#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры выбора кода
//
// Параметры:
// 		НазваниеМакета - Строка - Наименование макета данного объекта метаданных
// 		ТекущийПериод - Дата - Дата ограничения выбора кодов.
//
// Возвращаемое значение:
// 		Структура - структура параметров формы выбора кода:
// 			* СписокКодов - ТаблицаЗначений- список кодов льгот.
// 			* СписокПериодовДействия - СписокЗначений из Строка - Список имен областей макета.
// 			* ТекущийПериод - Строка - Название области макета.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений;
	
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов"           , КодыЛьгот);
	Параметры.Вставить("СписокПериодовДействия", СписокОбластей);
	Параметры.Вставить("ТекущийПериод"         , НазваниеОбласти);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть;
	
КонецПроцедуры

// Получает код региона из регистрации в налоговом органе, либо из регистрации организации, указанных в записи регистра
Функция КодРегионаПоМенеджеруЗаписи(МенеджерЗаписи, КэшКодовРегионов)
	
	Если МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		КодРегиона = КэшКодовРегионов[МенеджерЗаписи.НалоговыйОрган];
		Если КодРегиона = Неопределено Тогда
			КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.НалоговыйОрган, "КодРегиона");
			КэшКодовРегионов.Вставить(МенеджерЗаписи.НалоговыйОрган, КодРегиона);
		КонецЕсли;
	Иначе
		// Не учитываем историю регистрации организации: считаем маловероятным, что менялся регион
		КодРегиона = КэшКодовРегионов[МенеджерЗаписи.Организация];
		Если КодРегиона = Неопределено Тогда
			КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.Организация, "РегистрацияВНалоговомОргане.КодРегиона");
			КэшКодовРегионов.Вставить(МенеджерЗаписи.Организация, КодРегиона);
		КонецЕсли;
	КонецЕсли;

	Возврат КодРегиона;
	
КонецФункции

// Получает 8-значный код ОКТМО либо непосредственно из записи, либо из регистрации организации, указанной в записи.
// Если в исходных данных указан 11-значный код населенного пункта, то возвращаются первые 8 знаков.
Функция ОКТМОМуниципальногоОбразованияПоМенеджеруЗаписи(МенеджерЗаписи, КэшОКТМООрганизаций)
	
	Если МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане
		 Или МенеджерЗаписи.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
		КодПоОКТМО = Лев(СокрЛП(МенеджерЗаписи.КодПоОКТМО), 8);
	Иначе
		Отбор = Новый Структура("Организация, Период", МенеджерЗаписи.Организация, МенеджерЗаписи.Период);
		Результат = КэшОКТМООрганизаций.НайтиСтроки(Отбор);
		Если Результат.Количество() > 0 Тогда
			КодПоОКТМО = Результат[0].КодПоОКТМО;
		Иначе
			КодПоОКТМО = КодПоОКТМОНаДату(МенеджерЗаписи.Организация, МенеджерЗаписи.Период);
			КодПоОКТМО = Лев(СокрЛП(КодПоОКТМО), 8);
			СтрокаОКТМО = КэшОКТМООрганизаций.Добавить();
			СтрокаОКТМО.Организация = МенеджерЗаписи.Организация;
			СтрокаОКТМО.Период = МенеджерЗаписи.Период;
			СтрокаОКТМО.КодПоОКТМО = КодПоОКТМО;
		КонецЕсли;
	КонецЕсли;

	Возврат КодПоОКТМО;
	
КонецФункции

// Возвращает код по ОКТМО организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организации - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить код по ОКТМО организации.
//
// Возвращаемое значение:
//     Строка - код по ОКТМО.
//
Функция КодПоОКТМОНаДату(Организация, ДатаСведений = '20991231')
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация",  Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ДатаСведений, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистраций";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КодПоОКТМО;
	КонецЕсли;
	
КонецФункции

#Область ОбработчикиОбновления

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	ДобавитьОбработчикОбновленияДляПереходаНаВерсиюАлгоритмаС2020(Обработчики);
КонецПроцедуры

// Обработчик обновления для перехода на новую версию алгоритма расчета земельного налога с 2020г.
//
// В регистре сведенний Прараметры начисления земельного налога заполняются новые ресурсы по льготам на основании 
// данных из старых ресурсов.
// Создаются записи в справочнике основания льгот по имущественным налогам.
// В документах регистраторах регистра сведений заполняются новые поля оснований льгот.
Процедура ДобавитьОбработчикОбновленияДляПереходаНаВерсиюАлгоритмаС2020(Обработчики)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.17.36";
	Обработчик.Процедура           = "РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ЗарегистрироватьДанныеКОбработкеДляЗаполненияДанными";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет справочник льгот по земельному налогу по данным регистра ""Параметры начисления земельного налога"".
												|Заполняет поля оснований льгот в документах регистраторах регистра сведений ""Параметры начисления земельного налога"".
												|Заполняет льготы в регистре сведений ""Параметры начисления земельного налога"".
												|Выполнение регламентной операции расчета земельного налога может быть ограничено.';
												|en = 'Fills the catalog of land value tax reliefs by the ""Financial details of land value tax charge"" register data.
												|Fills the relief basis fields in recorder documents of the ""Financial details of land value tax charge"" information register.
												|Fills reliefs in the ""Financial details of land value tax charge"" information register.
												|Execution of the period-end transaction for calculating the land value tax might be limited.'");
												
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Многопоточный = Ложь;
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("34eeb0c2-1d6f-40f6-9415-15107ce41abf");
	Обработчик.ПроцедураПроверки   = "РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ЗаписьОбработана";
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(Метаданные.Документы.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя());
	ОбновляемыеОбъекты.Добавить(Метаданные.Документы.СнятиеСРегистрацииЗемельныхУчастков.ПолноеИмя());
	ОбновляемыеОбъекты.Добавить(Метаданные.Документы.КорректировкаРегистров.ПолноеИмя());
	ОбновляемыеОбъекты.Добавить(Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога.ПолноеИмя());
	ОбновляемыеОбъекты.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя());

	Обработчик.ЧитаемыеОбъекты = СтрСоединить(ОбновляемыеОбъекты, ",");
	Обработчик.БлокируемыеОбъекты  = "РегистрСведений.ПараметрыНачисленияЗемельногоНалога";
	Обработчик.ИзменяемыеОбъекты   =  СтрСоединить(ОбновляемыеОбъекты, ",");
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляЗаполненияДанными(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя();;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияЗемельныхУчастков.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК РегистрацияЗемельныхУчастков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РегистрацияЗемельныхУчастков.Организация = Организации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ПО РегистрацияЗемельныхУчастков.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И (НЕ РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазеДо2020 В (ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеПрименяется))
	|			ИЛИ РегистрацияЗемельныхУчастков.ПроцентУменьшенияСуммыНалогаДо2020 > 0
	|			ИЛИ РегистрацияЗемельныхУчастков.СуммаУменьшенияСуммыНалога > 0
	|			ИЛИ РегистрацияЗемельныхУчастков.СниженнаяНалоговаяСтавка > 0)";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Регистраторы = ТаблицаРезультата.ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДанныеЛьгот(Параметры) Экспорт
	// В прежней структуре регистра можно было указать одновременно 3 льготы: по налоговой базе (освобождение или
	// снижение на долю или указанную сумму), уменьшение суммы рассчитанного налога (на процент или указанную сумму) и
	// снижение налоговой ставки до указанной. В новой архитектуре также останется возможность указать до трех льгот.
	// Рассмотрим, как показатели каждой из трех льгот трансформируются в новую структуру регистра.
	//
	// 1. Налоговая льгота по налоговой базе определялась показателем НалоговаяЛьготаПоНалоговойБазе[До2020] (перечисление).
	//    В этом случае как дополнительные данные могли использоваться показатели:
	//    а. КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395 (если применяется федеральная льгота, указанная в
	//       ст. 395 НК)
	//    б. УменьшениеНалоговойБазыПоСтатье391 вместе с КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391 (в программе
	//       льготы по ст. 391 не применяется с 2017 года, да и фактически не применяется к организациям - там только
	//       льготы для физ лиц).
	//    в. УменьшениеНалоговойБазыНаСумму (показатель применялся до 2017 года)
	//
	//    Льготы "б" и "в" могли применяться одновременно (при этом каждая из этих льгот применялась только при значении
	//    НалоговаяЛьготаПоНалоговойБазе равным УменьшениеНалоговойБазы).
	//
	//    Теперь эта функция перешла к ОснованиеЛьготыПоНалоговойБазе (справочник) - там хранится и вид льготы, и ее код.
	//    Элементы справочника находятся/создаются на основании вида льготы в НалоговаяЛьготаПоНалоговойБазе и, при
	//    необходимости, кода льготы. Все льготы, кроме освобождения по ст. 395, будут местными.
	//    Льготы по ст. 391 (если где-то установлены в прошлых периодах) в виде снижения суммы
	//    налога (до 2017 года - на 10000) игнорируем, т.к. новый расчет применяется с 2020 года, а прежний расчет смотрит
	//    на прежние реквизиты регистра (в частности, УменьшениеНалоговойБазыПоСтатье391[До2020]).
	//    УменьшениеНалоговойБазыНаСумму, как таковой, не имеет значения: вид льготы в этом случае указан в
	//    НалоговаяЛьготаПоНалоговойБазе, а сумма уменьшения налоговой базы указана в НеОблагаемаяНалогомСумма - а этот
	//    реквизит остается.
	// 
	// 2. Налоговая льгота в виде уменьшения суммы налога определялась по значениям показателей ПроцентУменьшенияСуммыНалога[До2020]
	//    и СуммаУменьшенияСуммыНалога.
	//
	//	  Теперь эта функция перешла к ОснованиеЛьготыСнижениеСуммыНалога (справочник). Процент уменьшения суммы налога -
	//    это фиксированный атрибут конкретной льготы (в конкретном пункте местного закона указан процент уменьшения),
	//    поэтому показатель в регистре больше не требуется.
	//
	// 3. Налоговая льгота в виде снижения ставки определялась по значению показателя СниженнаяНалоговаяСтавка.
	//
	//    Теперь эта функция перешла к ОснованиеЛьготыСнижениеСтавки (справочник), но показатель СниженнаяНалоговаяСтавка
	//    остается, т.к. снижение ставки может быть относительным (например, "ставка налога снижается на 50 % в случае..."),
	//    т.е. для каждого участка будет своя.
	//
	// 4. Заполняем данные по льготам в документах регистраторах по данным полученным из записей регистров.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияЗемельныхУчастков.Период           КАК Период,
	|	РегистрацияЗемельныхУчастков.Регистратор      КАК Регистратор,
	|	РегистрацияЗемельныхУчастков.Организация      КАК Организация,
	|	РегистрацияЗемельныхУчастков.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияЗемельныхУчастков.НалоговыйОрган   КАК НалоговыйОрган,
	|	РегистрацияЗемельныхУчастков.КодПоОКТМО       КАК КодПоОКТМО,
	|
	|	РегистрацияЗемельныхУчастков.ПостановкаНаУчетВНалоговомОргане     КАК ПостановкаНаУчетВНалоговомОргане,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе       КАК ОснованиеЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки        КАК ОснованиеЛьготыСнижениеСтавки,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога   КАК ОснованиеЛьготыСнижениеСуммыНалога,
	|
	|	РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазеДо2020   КАК НалоговаяЛьготаПоНалоговойБазеДо2020,
	|
	|	РегистрацияЗемельныхУчастков.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395До2020 
	|											КАК КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395До2020,
	|
	|	РегистрацияЗемельныхУчастков.ПроцентУменьшенияСуммыНалогаДо2020     КАК ПроцентУменьшенияСуммыНалогаДо2020,
	|	РегистрацияЗемельныхУчастков.СуммаУменьшенияСуммыНалога             КАК СуммаУменьшенияСуммыНалога,
	|	РегистрацияЗемельныхУчастков.СниженнаяНалоговаяСтавка               КАК СниженнаяНалоговаяСтавка
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК РегистрацияЗемельныхУчастков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РегистрацияЗемельныхУчастков.Организация = Организации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ПО РегистрацияЗемельныхУчастков.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И (НЕ РегистрацияЗемельныхУчастков.НалоговаяЛьготаПоНалоговойБазеДо2020 В (ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеПрименяется))
	|			ИЛИ РегистрацияЗемельныхУчастков.ПроцентУменьшенияСуммыНалогаДо2020 > 0
	|			ИЛИ РегистрацияЗемельныхУчастков.СуммаУменьшенияСуммыНалога > 0
	|			ИЛИ РегистрацияЗемельныхУчастков.СниженнаяНалоговаяСтавка > 0)
	|	И НЕ РегистрацияЗемельныхУчастков.Регистратор ССЫЛКА Документ.СнятиеСРегистрацииЗемельныхУчастков
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацияЗемельныхУчастков.Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаЗаписей = РезультатЗапроса.Выбрать();
	
	// Создаем льготы. Созданные элементы справочника льгот кэшируем в виде таблицы значений.
	
	КоличествоОшибок = 0;
	
	Льготы = Новый ТаблицаЗначений;
	Льготы.Колонки.Добавить("ОснованиеЛьготы", Новый ОписаниеТипов("СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам"));
	Льготы.Колонки.Добавить("КодЛьготы", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	Льготы.Колонки.Добавить("ВидЛьготы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЛьготПоИмущественнымНалогам"));
	Льготы.Колонки.Добавить("ПроцентУменьшения", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	Льготы.Колонки.Добавить("КодРегиона", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	Льготы.Колонки.Добавить("КодПоОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Льготы.Колонки.Добавить("УстановленаМестнымНормативнымАктом", Новый ОписаниеТипов("Булево"));
		
	// Также кэшируем в параметрах данные, полученные из регистраций в налоговых органах.
	КэшКодовРегионов = Новый Соответствие;
		
	// Таблицу не индексируем - не ожидаем в ней очень много записей.
	КэшОКТМООрганизаций = Новый ТаблицаЗначений;
	КэшОКТМООрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КэшОКТМООрганизаций.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КэшОКТМООрганизаций.Колонки.Добавить("КодПоОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	
	МассивТиповРегистраторов = Новый Массив;
	МассивТиповРегистраторов.Добавить(Тип("ДокументСсылка.ПараметрыНачисленияЗемельногоНалога"));
	МассивТиповРегистраторов.Добавить(Тип("ДокументСсылка.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога"));
	ТипОснованиеЛьготы = Новый ОписаниеТипов("СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам");
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	ТаблицаКэшЛьгот = Новый ТаблицаЗначений;
	ТаблицаКэшЛьгот.Колонки.Добавить("Организация", ТипОрганизация);
	ТаблицаКэшЛьгот.Колонки.Добавить("Регистратор", Новый ОписаниеТипов(МассивТиповРегистраторов));
	ТаблицаКэшЛьгот.Колонки.Добавить("Период"     , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаКэшЛьгот.Колонки.Добавить("КодПоОКТМО" , ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаКэшЛьгот.Колонки.Добавить("ОснованиеЛьготыПоНалоговойБазе"    , ТипОснованиеЛьготы);
	ТаблицаКэшЛьгот.Колонки.Добавить("ОснованиеЛьготыСнижениеСтавки"     , ТипОснованиеЛьготы);
	ТаблицаКэшЛьгот.Колонки.Добавить("ОснованиеЛьготыСнижениеСуммыНалога", ТипОснованиеЛьготы);
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		ТекущаяЗапись = ВыборкаЗаписей; // Регистр подчинен регистратору. Менеджер записи недоступен.
		
		КодРегиона = КодРегионаПоМенеджеруЗаписи(ТекущаяЗапись, КэшКодовРегионов);
		КодПоОКТМО = ОКТМОМуниципальногоОбразованияПоМенеджеруЗаписи(ТекущаяЗапись, КэшОКТМООрганизаций);
		
		ЕстьЛьготаПоНалоговойБазе = Ложь;
		ЕстьЛьготаПоСуммеНалога = Ложь;
		ЕстьЛьготаПоНалоговойСтавке = Ложь;
				
		// В прежнем расчете налога льгота в виде уменьшения суммы налога была приоритетнее освобождения, если эти две
		// льготы были указаны одновременно. В новом расчете это поведение меняется: освобождение имеет высший приоритет,
		// т.к. при освобождении прочие льготы не имеют смысла.
		// Как следствие, в указанной выше ситуации при явном перезакрытии прошлых периодов сумма налога поменяется
		// (обнулится в период действия освобождения). Считаем это нормальным поведением.
		// Тем не менее, даже при наличии освобождения проверяем и заполняем другие льготы, чтобы добавить в справочник
		// все упомянутые льготы.
		Если Не ЗначениеЗаполнено(ТекущаяЗапись.ОснованиеЛьготыПоНалоговойБазе) Тогда
			
			Если ТекущаяЗапись.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
			 			
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				ПоискЛьготыПоНалоговойБазе = Новый Структура;
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", ТекущаяЗапись.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395До2020);
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
		
			ИначеЕсли ТекущаяЗапись.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.ОсвобождениеОтНалогообложенияМестное Тогда
			 			
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде освобождения. Код 3022400.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022400");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
			
			ИначеЕсли ТекущаяЗапись.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеОблагаемаяНалогомПлощадь Тогда
					
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде необлагаемой доли площади. Код 3022300.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022300");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.ДоляНеоблагаемойПлощади);
			
			ИначеЕсли ТекущаяЗапись.НалоговаяЛьготаПоНалоговойБазеДо2020 =
				Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.УменьшениеНалоговойБазы Тогда
					
				ЕстьЛьготаПоНалоговойБазе = Истина;
				
				// Это местная льгота в виде налогового вычета. Код 3022100.
				ПоискЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
				ПоискЛьготыПоНалоговойБазе.Вставить("КодЛьготы", "3022100");
				ПоискЛьготыПоНалоговойБазе.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму);
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяЗапись.ПроцентУменьшенияСуммыНалогаДо2020 > 0 Или ТекущаяЗапись.СуммаУменьшенияСуммыНалога > 0
			 И Не ЗначениеЗаполнено(ТекущаяЗапись.ОснованиеЛьготыСнижениеСуммыНалога) Тогда
			
			ЕстьЛьготаПоСуммеНалога = Истина;
			
			// Это местная льгота в виде уменьшения суммы налога. Код 3022200.
			ПоискЛьготыПоСуммеНалога = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
			ПоискЛьготыПоСуммеНалога.Вставить("КодЛьготы", "3022200");
			Если ТекущаяЗапись.ПроцентУменьшенияСуммыНалогаДо2020 > 0 Тогда
				ПоискЛьготыПоСуммеНалога.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент);
				ПоискЛьготыПоСуммеНалога.Вставить("ПроцентУменьшения", ТекущаяЗапись.ПроцентУменьшенияСуммыНалогаДо2020);
			Иначе
				// Снижение суммы налога на фиксированную сумму
				ПоискЛьготыПоСуммеНалога.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму);
			КонецЕсли;
		
		КонецЕсли;
		
		Если ТекущаяЗапись.СниженнаяНалоговаяСтавка > 0
			 И Не ЗначениеЗаполнено(ТекущаяЗапись.ОснованиеЛьготыСнижениеСтавки) Тогда
			
			ЕстьЛьготаПоНалоговойСтавке = Истина;
			
			// Это местная льгота в виде уменьшения ставки налога. Код 3022500.
			ПоискЛьготыПоНалоговойСтавке = ЛьготыПоИмущественнымНалогам.ПоискМестнойЛьготы(КодРегиона, КодПоОКТМО);
			ПоискЛьготыПоНалоговойСтавке.Вставить("КодЛьготы", "3022500");
			ПоискЛьготыПоНалоговойСтавке.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной);
		
		КонецЕсли;
		
		// Заполним кэш льгот.
		
		ОснованиеЛьготыПоНалоговойБазе     = Неопределено;
		ОснованиеЛьготыСнижениеСуммыНалога = Неопределено;
		ОснованиеЛьготыСнижениеСтавки      = Неопределено;
		
		НачатьТранзакцию();
	
		Попытка
			
			Если ЕстьЛьготаПоНалоговойБазе Тогда
				ОснованиеЛьготыПоНалоговойБазе = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоНалоговойБазе,
					Льготы);
			КонецЕсли;
				
			Если ЕстьЛьготаПоСуммеНалога Тогда
				ОснованиеЛьготыСнижениеСуммыНалога = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоСуммеНалога,
					Льготы);
			КонецЕсли;
			
			Если ЕстьЛьготаПоНалоговойСтавке Тогда
				ОснованиеЛьготыСнижениеСтавки = ЛьготыПоИмущественнымНалогам.НайтиИлиСоздатьЛьготу(
					Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог,
					ПоискЛьготыПоНалоговойСтавке,
					Льготы);
			КонецЕсли;
			
			СтрокаКэшаЛьгот = ТаблицаКэшЛьгот.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаКэшаЛьгот, ТекущаяЗапись);
			
			СтрокаКэшаЛьгот.ОснованиеЛьготыПоНалоговойБазе = ОснованиеЛьготыПоНалоговойБазе;
			СтрокаКэшаЛьгот.ОснованиеЛьготыСнижениеСуммыНалога = ОснованиеЛьготыСнижениеСуммыНалога;
			СтрокаКэшаЛьгот.ОснованиеЛьготыСнижениеСтавки = ОснованиеЛьготыСнижениеСтавки;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ТекстСообщения = Новый Массив;
			Описание = НСтр("ru = 'Не удалось обработать запись регистра ""Параметры начисления земельного налога""
				|(период: %1, организация: %2, основное средство: %3) по причине:';
				|en = 'Cannot process the ""Financial details of land value tax charge""
				|register record (period: %1, company: %2, fixed asset: %3). Reason:'");
			
			Описание = СтрЗаменить(Описание, Символы.ПС, " ");
			Описание = СтрШаблон(Описание, 
				Формат(ВыборкаЗаписей.Период, "ДЛФ=D"),
				ВыборкаЗаписей.Организация,
				ВыборкаЗаписей.ОсновноеСредство);
			
			ТекстСообщения.Добавить(Описание);
			ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если КоличествоОшибок > 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|не удалось обработать некоторые записи со льготами. Количество ошибок: %1';
			|en = 'The ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|procedure failed to process some records with reliefs. Total errors: %1'"),
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	// Заполним льготы в документах регистраторах, кроме снятий с регистрации земельных участков.
	
	КоличествоОшибок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КэшЛьгот.Организация КАК Организация,
	|	КэшЛьгот.Регистратор КАК Регистратор,
	|	КэшЛьгот.Период КАК Период,
	|	КэшЛьгот.КодПоОКТМО КАК КодПоОКТМО,
	|	КэшЛьгот.ОснованиеЛьготыПоНалоговойБазе КАК ОснованиеЛьготыПоНалоговойБазе,
	|	КэшЛьгот.ОснованиеЛьготыСнижениеСтавки КАК ОснованиеЛьготыСнижениеСтавки,
	|	КэшЛьгот.ОснованиеЛьготыСнижениеСуммыНалога КАК ОснованиеЛьготыСнижениеСуммыНалога
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	&ТаблицаКэшЛьгот КАК КэшЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготы.Организация КАК Организация,
	|	Льготы.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Льготы.Регистратор ССЫЛКА Документ.ПараметрыНачисленияЗемельногоНалога
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ Период
	|	КОНЕЦ КАК Период,
	|	Льготы.КодПоОКТМО КАК КодПоОКТМО,
	|	МАКСИМУМ(Льготы.ОснованиеЛьготыПоНалоговойБазе) КАК ОснованиеЛьготыПоНалоговойБазе,
	|	МАКСИМУМ(Льготы.ОснованиеЛьготыСнижениеСтавки) КАК ОснованиеЛьготыСнижениеСтавки,
	|	МАКСИМУМ(Льготы.ОснованиеЛьготыСнижениеСуммыНалога) КАК ОснованиеЛьготыСнижениеСуммыНалога
	|ИЗ
	|	Льготы КАК Льготы
	|СГРУППИРОВАТЬ ПО
	|	Льготы.Организация,
	|	Льготы.Регистратор,
	|	ВЫБОР
	|		КОГДА Льготы.Регистратор ССЫЛКА Документ.ПараметрыНачисленияЗемельногоНалога
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ Период
	|	КОНЕЦ,
	|	Льготы.КодПоОКТМО
	|ИТОГИ
	|ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаКэшЛьгот", ТаблицаКэшЛьгот);
	Результат = Запрос.Выполнить();
	
	ВыборкаРегистратор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя();
	
	Пока ВыборкаРегистратор.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ПолноеИмяОбъектаРегистратора = ВыборкаРегистратор.Регистратор.Метаданные().ПолноеИмя();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаРегистратора);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаРегистратор.Регистратор);
			Блокировка.Заблокировать();
	
			Документ = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
	
			ВыборкаОС = ВыборкаРегистратор.Выбрать();
			Пока ВыборкаОС.Следующий() Цикл
	
				Если ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип("ДокументСсылка.ПараметрыНачисленияЗемельногоНалога") Тогда
					ЗаполнитьЗначенияСвойств(Документ, ВыборкаОС);
				ИначеЕсли ТипЗнч(ВыборкаРегистратор.Регистратор) = Тип(
					"ДокументСсылка.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога") Тогда
					СтрокаПараметров = Документ.ПараметрыНалога.Найти(ВыборкаОС.Период, "ДатаПараметров");
					Если СтрокаПараметров <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПараметров, ВыборкаОС);
					КонецЕсли;
	
					СтрокаНалоговогоОргана = Документ.НалоговыйОрган.Найти(ВыборкаОС.Период, "ДатаПараметров");
					Если СтрокаНалоговогоОргана <> Неопределено Тогда
						СтрокаНалоговогоОргана.КодПоОКТМО = ВыборкаОС.КодПоОКТМО;
					КонецЕсли;
	
				КонецЕсли;
	
			КонецЦикла;
	
			Документ.ОбменДанными.Загрузка = Истина;
			Документ.Записать(РежимЗаписиДокумента.Запись);
			
			// Обновим набор записей регистратора.
			Блокировка = Новый БлокировкаДанных;
				
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыНачисленияЗемельногоНалога.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаРегистратор.Регистратор);
			
			Блокировка.Заблокировать();
			
			ЗаписиДокумента = РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.СоздатьНаборЗаписей();
			ЗаписиДокумента.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			
			ЗаписиДокумента.Прочитать();
			
			Для Каждого Запись Из ЗаписиДокумента Цикл 
				Запись.КодПоОКТМО = ВыборкаРегистратор.КодПоОКТМО;
				Запись.ОснованиеЛьготыПоНалоговойБазе = ВыборкаРегистратор.ОснованиеЛьготыПоНалоговойБазе;
				Запись.ОснованиеЛьготыСнижениеСтавки = ВыборкаРегистратор.ОснованиеЛьготыСнижениеСтавки;
				Запись.ОснованиеЛьготыСнижениеСуммыНалога = ВыборкаРегистратор.ОснованиеЛьготыСнижениеСуммыНалога;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписиДокумента); 
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаРегистратор.Регистратор, ДополнительныеПараметры);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КоличествоОшибок = КоличествоОшибок + 1;
	
			ТекстСообщения = Новый Массив;
			Описание = НСтр("ru = 'При обновлении данных по льготам не удалось обработать документ %1
							| по причине:';
							|en = 'Cannot process the %1
							| document when updating data on reliefs. Reason:'");
	
			Описание = СтрШаблон(Описание, ВыборкаРегистратор.Регистратор);
	
			ТекстСообщения.Добавить(Описание);
			ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
			ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);
	
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаРегистратор.Регистратор.Метаданные(), ВыборкаРегистратор.Регистратор, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|не удалось обработать некоторые документы регистраторы записей со льготами. Количество ошибок: %1';
			|en = 'The ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|procedure failed to process some documents that recorded reliefs. Total errors: %1'"),
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	// Заполним льготы в документах Снятие с регистрации земельных участков по срезам последних данных на 
	// момент снятия участка с регистрации.
	
	КоличествоОшибок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыНачисленияЗемельногоНалога.Организация КАК Организация,
	|	ПараметрыНачисленияЗемельногоНалога.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ УчасткиСНовымиЛьготами
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК ПараметрыНачисленияЗемельногоНалога
	|ГДЕ
	|	(НЕ
	|		(ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыПоНалоговойБазе = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыСнижениеСтавки = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыСнижениеСуммыНалога = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыНачисленияЗемельногоНалога.Организация КАК Организация,
	|	ПараметрыНачисленияЗемельногоНалога.Период КАК Период,
	|	ПараметрыНачисленияЗемельногоНалога.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК ПараметрыНачисленияЗемельногоНалога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчасткиСНовымиЛьготами КАК УчасткиСНовымиЛьготами
	|		ПО ПараметрыНачисленияЗемельногоНалога.Организация = УчасткиСНовымиЛьготами.Организация
	|		И ПараметрыНачисленияЗемельногоНалога.ОсновноеСредство = УчасткиСНовымиЛьготами.ОсновноеСредство
	|ГДЕ
	|	ПараметрыНачисленияЗемельногоНалога.Регистратор ССЫЛКА Документ.СнятиеСРегистрацииЗемельныхУчастков
	|	И
	|		(ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыПоНалоговойБазе = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыСнижениеСтавки = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	И
	|		ПараметрыНачисленияЗемельногоНалога.ОснованиеЛьготыСнижениеСуммыНалога = ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период
	|ИТОГИ
	|ПО
	|	Организация";
	
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СнятиеСРегистрацииЗемельныхУчастковОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ.СнятиеСРегистрацииЗемельныхУчастков.ОС КАК СнятиеСРегистрацииЗемельныхУчастковОС
	|ГДЕ
	|	СнятиеСРегистрацииЗемельныхУчастковОС.Ссылка = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОсновноеСредство,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОснованиеЛьготыПоНалоговойБазе,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.НачалоДействияЛьготыПоНалоговойБазе,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОкончаниеДействияЛьготыПоНалоговойБазе,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОснованиеЛьготыСнижениеСтавки,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.НачалоДействияЛьготыСнижениеСтавки,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОкончаниеДействияЛьготыСнижениеСтавки,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОснованиеЛьготыСнижениеСуммыНалога,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.НачалоДействияЛьготыСнижениеСуммыНалога,
	|	ПараметрыНачисленияЗемельногоНалогаСрезПоследних.ОкончаниеДействияЛьготыСнижениеСуммыНалога
	|ПОМЕСТИТЬ НовыеЛьготы
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога.СрезПоследних(&ГраницаПередСнятиемСРегистрации,
	|		Организация = &Организация
	|	И ОсновноеСредство В
	|		(ВЫБРАТЬ
	|			СписокОС.ОсновноеСредство
	|		ИЗ
	|			СписокОС КАК СписокОС)) КАК ПараметрыНачисленияЗемельногоНалогаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыНачисленияЗемельногоНалога.Период,
	|	ПараметрыНачисленияЗемельногоНалога.Регистратор,
	|	ПараметрыНачисленияЗемельногоНалога.НомерСтроки,
	|	ПараметрыНачисленияЗемельногоНалога.Активность,
	|	ПараметрыНачисленияЗемельногоНалога.Организация,
	|	ПараметрыНачисленияЗемельногоНалога.ОсновноеСредство,
	|	ПараметрыНачисленияЗемельногоНалога.ВключатьВНалоговуюБазу,
	|	ПараметрыНачисленияЗемельногоНалога.ДатаНачалаПроектированияДо2008,
	|	ПараметрыНачисленияЗемельногоНалога.ДатаРегистрацииПравНаОбъектНедвижимости,
	|	ПараметрыНачисленияЗемельногоНалога.ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ПараметрыНачисленияЗемельногоНалога.ДоляВПравеОбщейСобственностиЧислитель,
	|	ПараметрыНачисленияЗемельногоНалога.ДоляНеОблагаемойНалогомПлощадиЗнаменатель,
	|	ПараметрыНачисленияЗемельногоНалога.ДоляНеОблагаемойНалогомПлощадиЧислитель,
	|	ПараметрыНачисленияЗемельногоНалога.ЖилищноеСтроительство,
	|	ПараметрыНачисленияЗемельногоНалога.КадастроваяСтоимость,
	|	ПараметрыНачисленияЗемельногоНалога.КадастровыйНомер,
	|	ПараметрыНачисленияЗемельногоНалога.КБК,
	|	ПараметрыНачисленияЗемельногоНалога.КодКатегорииЗемель,
	|	ПараметрыНачисленияЗемельногоНалога.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395До2020,
	|	ПараметрыНачисленияЗемельногоНалога.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391До2020,
	|	ПараметрыНачисленияЗемельногоНалога.КодПоОКАТО,
	|	ПараметрыНачисленияЗемельногоНалога.КодПоОКТМО,
	|	ПараметрыНачисленияЗемельногоНалога.НалоговаяЛьготаПоНалоговойБазеДо2020,
	|	ПараметрыНачисленияЗемельногоНалога.НалоговаяСтавка,
	|	ПараметрыНачисленияЗемельногоНалога.НалоговыйОрган,
	|	ПараметрыНачисленияЗемельногоНалога.НеОблагаемаяНалогомСумма,
	|	ПараметрыНачисленияЗемельногоНалога.ОбщаяСобственность,
	|	ПараметрыНачисленияЗемельногоНалога.ПостановкаНаУчетВНалоговомОргане,
	|	ПараметрыНачисленияЗемельногоНалога.ПроцентУменьшенияСуммыНалогаДо2020,
	|	ПараметрыНачисленияЗемельногоНалога.СниженнаяНалоговаяСтавка,
	|	ПараметрыНачисленияЗемельногоНалога.СуммаУменьшенияСуммыНалога,
	|	ПараметрыНачисленияЗемельногоНалога.УменьшениеНалоговойБазыНаСуммуДо2020,
	|	ПараметрыНачисленияЗемельногоНалога.УменьшениеНалоговойБазыПоСтатье391До2020,
	|	ПараметрыНачисленияЗемельногоНалога.Комментарий,
	|
	|	НовыеЛьготы.ОснованиеЛьготыПоНалоговойБазе,
	|	НовыеЛьготы.НачалоДействияЛьготыПоНалоговойБазе,
	|	НовыеЛьготы.ОкончаниеДействияЛьготыПоНалоговойБазе,
	|	НовыеЛьготы.ОснованиеЛьготыСнижениеСтавки,
	|	НовыеЛьготы.НачалоДействияЛьготыСнижениеСтавки,
	|	НовыеЛьготы.ОкончаниеДействияЛьготыСнижениеСтавки,
	|	НовыеЛьготы.ОснованиеЛьготыСнижениеСуммыНалога,
	|	НовыеЛьготы.НачалоДействияЛьготыСнижениеСуммыНалога,
	|	НовыеЛьготы.ОкончаниеДействияЛьготыСнижениеСуммыНалога,
	|
	|	ПараметрыНачисленияЗемельногоНалога.ВидЗаписи,
	|	ПараметрыНачисленияЗемельногоНалога.ДатаИсправления,
	|	ПараметрыНачисленияЗемельногоНалога.МоментВремени
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК ПараметрыНачисленияЗемельногоНалога
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЛьготы КАК НовыеЛьготы
	|		ПО ПараметрыНачисленияЗемельногоНалога.ОсновноеСредство = НовыеЛьготы.ОсновноеСредство
	|ГДЕ
	|	ПараметрыНачисленияЗемельногоНалога.Регистратор = &Регистратор";

	ВыборкаПоОрганизации = Результат.Выбрать();
	Пока ВыборкаПоОрганизации.Следующий() Цикл

		ВыборкаПоРегистраторам = ВыборкаПоОрганизации.Выбрать();
		Пока ВыборкаПоРегистраторам.Следующий() Цикл

			Запрос.УстановитьПараметр("Организация", ВыборкаПоОрганизации.Организация);
			Запрос.УстановитьПараметр("Регистратор", ВыборкаПоРегистраторам.Регистратор);
			Запрос.УстановитьПараметр("ГраницаПередСнятиемСРегистрации", Новый Граница(ВыборкаПоРегистраторам.Период,
				ВидГраницы.Исключая));

			ОбновленныеДвижения = Запрос.Выполнить().Выгрузить();

			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПараметрыНачисленияЗемельногоНалога.НаборЗаписей");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаПоРегистраторам.Регистратор);

				Блокировка.Заблокировать();

				ЗаписиДокумента = РегистрыСведений.ПараметрыНачисленияЗемельногоНалога.СоздатьНаборЗаписей();
				ЗаписиДокумента.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);

				ЗаписиДокумента.Прочитать();

				ЗаписиДокумента.Загрузить(ОбновленныеДвижения);

				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписиДокумента);
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоРегистраторам.Регистратор, ДополнительныеПараметры);

				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();

				КоличествоОшибок = КоличествоОшибок + 1;

				ТекстСообщения = Новый Массив;
				Описание = НСтр("ru = 'При обновлении данных по льготам не удалось обработать документ %1
								| по причине:';
								|en = 'Cannot process the %1
								| document when updating data on reliefs. Reason:'");

				Описание = СтрШаблон(Описание, ВыборкаПоРегистраторам.Регистратор);

				ТекстСообщения.Добавить(Описание);
				ТекстСообщения.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ТекстСообщения = СтрСоединить(ТекстСообщения, Символы.ПС);

				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					ВыборкаПоРегистраторам.Регистратор.Метаданные(), ВыборкаПоРегистраторам.Регистратор, ТекстСообщения);

			КонецПопытки;

		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|не удалось обработать некоторые документы Снятие с регистрации земельных участков. Количество ошибок: %1';
			|en = 'The ""РегистрСведений.ПараметрыНачисленияЗемельногоНалога.ЗаполнитьДанныеЛьгот""
			|procedure failed to process some Remove land plot registration documents. Total errors: %1'"),
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;

	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Функция проверяет, обработана ли запись (см. ЗаполнитьДанныеЛьгот()).
//  Определена в свойстве ПроцедураПроверки соответствующего обработчика обновления.
//
// Параметры:
//  Параметры - Структура - см. документацию к БСП
// 
// Возвращаемое значение:
//   - Булево - если Истина, то можно редактировать и записывать данные, Ложь - данные недоступны, пока не будут обработаны процедурой обновления
//
Функция ЗаписьОбработана(Параметры) Экспорт

	Данные = Неопределено;
	
  	Если ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийМенеджерЗаписи.ПараметрыНачисленияЗемельногоНалога") 
  		 Или ТипЗнч(Параметры.Данные) = Тип("ДанныеФормыСтруктура") Тогда
    	Данные = Параметры.Данные;
  	ИначеЕсли ТипЗнч(Параметры.Данные) = Тип("РегистрСведенийНаборЗаписей.ПараметрыНачисленияЗемельногоНалога")
  		 И Параметры.Данные.Количество() > 0 Тогда
    	Данные = Параметры.Данные[0];
    КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	ТребуетсяОбработкаЗаписи = Данные.ВключатьВНалоговуюБазу 
		И Данные.ОснованиеЛьготыПоНалоговойБазе = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И Данные.ОснованиеЛьготыСнижениеСуммыНалога = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И Данные.ОснованиеЛьготыСнижениеСтавки = Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка()
		И (ЗначениеЗаполнено(Данные.НалоговаяЛьготаПоНалоговойБазеДо2020)
			И Данные.НалоговаяЛьготаПоНалоговойБазеДо2020 <> Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогуДо2020.НеПрименяется
		ИЛИ Данные.ПроцентУменьшенияСуммыНалогаДо2020 > 0
		ИЛИ Данные.СуммаУменьшенияСуммыНалога > 0
		ИЛИ Данные.СниженнаяНалоговаяСтавка > 0);
	
	Возврат Не ТребуетсяОбработкаЗаписи;

КонецФункции
#КонецОбласти
#КонецОбласти

#КонецЕсли