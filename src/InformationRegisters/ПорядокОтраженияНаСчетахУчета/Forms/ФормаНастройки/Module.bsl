#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтруктураНастроекИзмерений = Новый Структура("АналитикаУчета, Организация, МестоУчета");
	
	Для каждого РазделУчета Из РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета() Цикл
		Если Не РазделУчета.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаАналитики = НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета.Значение);
		МассивВидовСчетов = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.НастраиваемыеВидыСчетов(РазделУчета.Значение);
		// Удалим счета учета себестоимости и выручки от продаж для номенклатуры переданной:
		Если РазделУчета = "НоменклатураПереданная" Тогда
			СчетаДляУдаления = СтрСоединить("ВыручкаОтПродаж,СебестоимостьПродаж,НДСПриПродаже", ",");
			Для каждого СчетДляУдаления Из СчетаДляУдаления Цикл
				ИндексВыручки = МассивВидовСчетов.Найти(Перечисления.ВидыСчетовРеглУчета[СчетДляУдаления]);
				Если ИндексВыручки <> Неопределено Тогда
					МассивВидовСчетов.Удалить(ИндексВыручки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.ЗагрузитьЗначения(МассивВидовСчетов);
		
		Если Не НастройкаАналитики.Используется Тогда
		
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["АналитикаУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.АналитикаУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаблокированныйРеквизитЦвет);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																		|en = 'Not used'"));
		
		ИначеЕсли ЗначениеЗаполнено(НастройкаАналитики.ПредставлениеПустого) Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["АналитикаУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.АналитикаУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкаАналитики.ПредставлениеПустого);
			
		Иначе
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["АналитикаУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.АналитикаУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		КонецЕсли;
		
		НастройкаМестаУчета = НастройкаСчетовУчетаСервер.НастройкиМестаУчетаПоРазделуУчета(РазделУчета.Значение);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["МестоУчета"].Имя);
			
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка для аналитики учета';
																	|en = 'Setting for accounting dimension'"));
		
		Если Не НастройкаМестаУчета.Используется Тогда
		
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["МестоУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.Заполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаблокированныйРеквизитЦвет);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																		|en = 'Not used'"));
		
		ИначеЕсли ЗначениеЗаполнено(НастройкаМестаУчета.ПредставлениеПустого) Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["МестоУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.Заполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкаМестаУчета.ПредставлениеПустого);
			
		Иначе
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["МестоУчета"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.Заполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		КонецЕсли;
		
		НастройкаОрганизации = НастройкаСчетовУчетаСервер.НастройкиОрганизацииПоРазделуУчета(РазделУчета.Значение);
		
		Если Не НастройкаОрганизации.Используется Тогда
		
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Организация"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаблокированныйРеквизитЦвет);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка по организации не применяется';
																		|en = 'Setting by company is not used'"));
		
		Иначе
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Организация"].Имя);
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.ВидСчета", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка для аналитики учета';
																		|en = 'Setting for accounting dimension'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти