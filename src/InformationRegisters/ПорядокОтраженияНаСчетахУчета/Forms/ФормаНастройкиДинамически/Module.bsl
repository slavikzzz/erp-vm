#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	КэшДанныхМеханизмов = Новый Структура;
	
	Если Параметры.Свойство("НастройкаСчетовУчета") Тогда
		ПараметрыНастройкиСчетовУчета = Параметры.НастройкаСчетовУчета;
	ИначеЕсли Параметры.Свойство("АналитикаУчета") Тогда
		РазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(Параметры.АналитикаУчета, Истина);
		ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета(РазделыУчета);
	ИначеЕсли Параметры.Свойство("РазделыУчета") Тогда
		ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета(Параметры.РазделыУчета);
	Иначе
		ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета();
	КонецЕсли;
	
	
	
	УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройкиСчетовУчета);
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(ЭтотОбъект, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
	
	
	ПереопределитьФормуПоАналитикеУчета(ПараметрыНастройкиСчетовУчета);
	
	Если Параметры.Свойство("АналитикаУчета") Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			Список, "АналитикаУчета", Параметры.АналитикаУчета, ЗначениеЗаполнено(Параметры.АналитикаУчета));
	КонецЕсли;
	
	Элементы.РазделыУчета.Видимость = ПараметрыНастройкиСчетовУчета.СписокРазделовУчета.Количество() > 1;
	ПрименитьОтмеченныеРазделыУчета(ЭтотОбъект, ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
	
	СтрокаРазделовУчета = НастройкаСчетовУчетаКлиентСервер.ЗаголовокПоРазделамУчета(ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
	Если ЗначениеЗаполнено(СтрокаРазделовУчета) И ПараметрыНастройкиСчетовУчета.СписокРазделовУчета.Количество() = 1 Тогда
		Заголовок = НСтр("ru = 'Порядок отражения на счетах учета';
						|en = 'Procedure of recording on GL accounts'");
		Заголовок = Заголовок + " " + СтрокаРазделовУчета;
		ЭтотОбъект.АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьВыборРазделовУчета" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("Строка"));
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета);
		ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Разделы учета для вывода';
														|en = 'Accounting sections to display'"));
		СписокОтмеченных = Новый СписокЗначений;
		СписокОтмеченных.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(ПараметрыФормы.ЗначенияДляВыбора));
		ПараметрыФормы.Вставить("Отмеченные", СписокОтмеченных);
		ОповещениеОЗавершенииОтметки = Новый ОписаниеОповещения("УстановитьРазделыУчета", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,, ОповещениеОЗавершенииОтметки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаконченаНастройкаСчетовУчета" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ЭтоНовый", Ложь);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра());
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ЗначенияЗаполнения, ТекущаяСтрока);
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьСчетаУчетаНастройкамиРаздела(ТекущаяСтрока.РазделУчета, ПараметрыФормы.ЗначенияЗаполнения, КэшДанныхМеханизмов.НастройкаСчетовУчета, ТекущаяСтрока);
	ОткрытьФормуСчетовУчета(ТекущаяСтрока.РазделУчета, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ЭтоНовый", Ложь);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра());
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ЗначенияЗаполнения, ТекущаяСтрока);
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьСчетаУчетаНастройкамиРаздела(ТекущаяСтрока.РазделУчета, ПараметрыФормы.ЗначенияЗаполнения, КэшДанныхМеханизмов.НастройкаСчетовУчета, ТекущаяСтрока);
	ОткрытьФормуСчетовУчета(ТекущаяСтрока.РазделУчета, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
		
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("ЭтоНовый", Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра());
		ЗаполнитьЗначенияСвойств(ПараметрыФормы.ЗначенияЗаполнения, ТекущаяСтрока);
		НастройкаСчетовУчетаКлиентСервер.ЗаполнитьСчетаУчетаНастройкамиРаздела(ТекущаяСтрока.РазделУчета, ПараметрыФормы.ЗначенияЗаполнения, КэшДанныхМеханизмов.НастройкаСчетовУчета, ТекущаяСтрока);
		ОткрытьФормуСчетовУчета(ТекущаяСтрока.РазделУчета, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)

	ПараметрыФормы = Новый Структура("ЭтоНовый", Истина);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра());
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Для каждого ЭлементОтбора Из ПользовательскийОтбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		ИмяЭлементаОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ПараметрыФормы.ЗначенияЗаполнения.Свойство(ИмяЭлементаОтбора) Тогда
			ПараметрыФормы.ЗначенияЗаполнения[ИмяЭлементаОтбора] = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета);
	Если ОтмеченныеРазделы.Количество() = 1 Или ЗначениеЗаполнено(ПараметрыФормы.ЗначенияЗаполнения.АналитикаУчета) Тогда
		ОткрытьФормуСчетовУчета(ОтмеченныеРазделы, ПараметрыФормы);
	Иначе
		СписокВыбораРазделаНовойЗаписи = Новый СписокЗначений;
		Для каждого НастройкаРаздела Из КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов Цикл
			
			Если ОтмеченныеРазделы.Найти(НастройкаРаздела.Ключ) = Неопределено И ОтмеченныеРазделы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыФормы.ЗначенияЗаполнения.Организация) И Не НастройкаРаздела.Значение.СвойстваОрганизации.Используется Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыФормы.ЗначенияЗаполнения.МестоУчета) Тогда
				Если Не НастройкаРаздела.Значение.СвойстваМестаУчета.Используется Тогда
					Продолжить;
				КонецЕсли;
				Если Не НастройкаРаздела.Значение.СвойстваМестаУчета.ТипЗначения.СодержитТип(ТипЗнч(ПараметрыФормы.ЗначенияЗаполнения.МестоУчета)) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СписокВыбораРазделаНовойЗаписи.Добавить(НастройкаРаздела.Ключ, НастройкаРаздела.Значение.Представление);
			
		КонецЦикла;
		
		ОбработкаОповещения = Новый ОписаниеОповещения("ВыборРазделаУчета", ЭтотОбъект, ПараметрыФормы);
		СписокВыбораРазделаНовойЗаписи.ПоказатьВыборЭлемента(ОбработкаОповещения, НСтр("ru = 'Выберите раздел для добавления новой настройки';
																						|en = 'Select a section to add a new setting.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Измерения = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(Измерения, СтрокаТаблицы);
		УдалитьЗаписиПорядкаОтраженияНаСчетахУчета(Измерения);
	КонецЦикла;
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Список_Организация"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.РазделУчета", "ВнеоборотныеАктивы", ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка для аналитики учета';
																|en = 'Setting for accounting dimension'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["Список_Организация"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.Организация", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.МестоУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Список.РазделУчета", "ВнеоборотныеАктивы", ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка по организации не применяется';
																|en = 'Setting by company is not used'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой() 
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета); 
	
	Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СписокДобавить.Доступность             		  = ПравоИзменения;
	Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СписокИзменить.Доступность             		  = ПравоИзменения;
	Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СписокСкопировать.Доступность     		      = ПравоИзменения;
	Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СписокУдалить.Доступность     				  = ПравоИзменения;
	
	Элементы.Список.КонтекстноеМеню.ПодчиненныеЭлементы.СписокКонтекстноеМенюДобавить.Доступность     = ПравоИзменения;  
	Элементы.Список.КонтекстноеМеню.ПодчиненныеЭлементы.СписокКонтекстноеМенюИзменить.Доступность     = ПравоИзменения;
	Элементы.Список.КонтекстноеМеню.ПодчиненныеЭлементы.СписокКонтекстноеМенюСкопировать.Доступность  = ПравоИзменения;
	Элементы.Список.КонтекстноеМеню.ПодчиненныеЭлементы.СписокКонтекстноеМенюУдалить.Доступность      = ПравоИзменения;
		
КонецПроцедуры

&НаСервере
Процедура УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройки)
	
	ПараметрыНастройки.ПрефиксЭлементовФормы = "Список";
	ПараметрыНастройки.ИмяГруппыНастроекСчетовУчета = "Список";
	ПараметрыНастройки.ПрефиксПутиКДанным = "Список.";
	ПараметрыНастройки.ПрефиксПутиКДаннымРеквизитов = "Список.";
	ПараметрыНастройки.РазбитьПоРазделамЭлементы = ПараметрыНастройки.СписокРазделовУчета.Количество() > 1;
	ПараметрыНастройки.РедактированиеВСписке = Истина;
	ПараметрыНастройки.СоздаватьВСлучаеОтсутствия = Истина;
	ПараметрыНастройки.Вставить("МенятьОбщие");
	
	МассивЭлементовДляУдаления = Новый Массив;
	Для каждого РазделУчета Из ПараметрыНастройки.СписокРазделовУчета Цикл
		Если ПараметрыНастройки.НастройкиРазделов.Получить(РазделУчета.Значение) = Неопределено Тогда
			МассивЭлементовДляУдаления.Добавить(РазделУчета);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		ПараметрыНастройки.СписокРазделовУчета.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	// Если открыты настройки сразу для нескольких разделов учета, ограничим их:
	Если ПараметрыНастройки.СписокРазделовУчета.Количество() > 1 Тогда
		Для каждого ЭлементРазделаУчета Из ПараметрыНастройки.СписокРазделовУчета Цикл
			ЭлементРазделаУчета.Пометка = Ложь;
		КонецЦикла;
		ПараметрыНастройки.СписокРазделовУчета.Получить(0).Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьФормуПоАналитикеУчета(ПараметрыНастройкиСчетовУчета)
	
	ТекстЗапроса = СоставитьДинамическийТекстЗапросаПолученияСчетовУчета();
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	ИсточникДоступныхНастроек = Список.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек();
	Список.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	РазделыУчетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазделыУчета(СписокРазделовУчета, ДополнительныеПараметры = Неопределено) Экспорт

	Если ТипЗнч(СписокРазделовУчета) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета = СписокРазделовУчета;
	ПрименитьОтмеченныеРазделыУчета(ЭтотОбъект, СписокРазделовУчета);
	РазделыУчетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРазделаУчета(РазделУчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РазделУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСчетовУчета(РазделУчета.Значение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьОтмеченныеРазделыУчета(Форма, СписокРазделов)
	
	Форма.РазделыУчетаСтрокой = Новый ФорматированнаяСтрока(НастройкаСчетовУчетаКлиентСервер.ЗаголовокПоРазделамУчета(СписокРазделов),,,, "ОткрытьВыборРазделовУчета");
	НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьРаздела(Форма, СписокРазделов);
	ВыбранныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокРазделов);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Форма.Список, "РазделУчета", ВыбранныеРазделы, ВыбранныеРазделы.Количество() <> СписокРазделов.Количество(), ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаСервере
Функция СоставитьДинамическийТекстЗапросаПолученияСчетовУчета()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокОтраженияНаСчетахУчета.Организация КАК Организация,
	|	ПорядокОтраженияНаСчетахУчета.АналитикаУчета КАК АналитикаУчета,
	|	ПорядокОтраженияНаСчетахУчета.МестоУчета КАК МестоУчета,
	|	&ТекстОпределенияРазделаУчета КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета = НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоАналитикеУчета""
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета = НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоОрганизации""
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета <> НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоМестуУчета""
	|	КОНЕЦ КАК РежимНастройки,
	|	&ПоляПереопределяемый
	|{ВЫБРАТЬ
	|	Организация.*,
	|	АналитикаУчета.*,
	|	МестоУчета.*,
	|	РазделУчета,
	|	РежимНастройки,
	|	РежимНастройки КАК ПоляПостроителяПереопределяемый}
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияНаСчетахУчета
	|ГДЕ
	|	ПорядокОтраженияНаСчетахУчета.ВидСчета В(&ВидыСчетов)
	|	И (&ОграничениеАналитикиПоТипу)
	|{ГДЕ
	|	ПорядокОтраженияНаСчетахУчета.Организация.*,
	|	ПорядокОтраженияНаСчетахУчета.АналитикаУчета.*,
	|	ПорядокОтраженияНаСчетахУчета.МестоУчета.*,
	|	&ТекстОпределенияРазделаУчета КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета = НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоАналитикеУчета""
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета = НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоОрганизации""
	|		КОГДА ПорядокОтраженияНаСчетахУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И ПорядокОтраженияНаСчетахУчета.МестоУчета <> НЕОПРЕДЕЛЕНО ТОГДА ""НастройкаПоМестуУчета""
	|	КОНЕЦ КАК РежимНастройки}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияНаСчетахУчета.Организация,
	|	ПорядокОтраженияНаСчетахУчета.АналитикаУчета,
	|	ПорядокОтраженияНаСчетахУчета.МестоУчета";
	
	ШаблонОпределенияПоля = "МАКСИМУМ(ВЫБОР
	|		КОГДА ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.%1)
	|			ТОГДА ПорядокОтраженияНаСчетахУчета.%2
	|		ИНАЧЕ %3
	|	КОНЕЦ) КАК %2_%1";
	ШаблонПеречисленияСчетовДляДополнительныхЗначений = "ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.%1)";
	ШаблонОпределенияУсловияРазделаУчета = "КОГДА ПорядокОтраженияНаСчетахУчета.ВидСчета В (&ВидыСчетовРаздела) И &ДопУсловиеРаздела ТОГДА ""%1""";
	
	МассивТекстовПолей = Новый Массив;
	МассивТекстовПолейПостроителя = Новый Массив;
	МассивТекстовВидовСчетов = Новый Массив;
	МассивТекстовУсловийРаздела = Новый Массив;
	
	МассивТиповАналитики = Новый Массив;
	СоответствиеДопПолейИСчетов = Новый Соответствие;
	
	Для каждого НастройкаРаздела Из КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов Цикл
		МассивТекстовВидовСчетовРаздела = Новый Массив;
		СписокЭлементовНастройки = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Значение.ЭлементыНастройки);
		Для каждого ЭлементНастройки Из СписокЭлементовНастройки Цикл
			
			ТипЭлемента = НастройкаСчетовУчетаКлиентСервер.ПрефиксЭлементаНастройки(ЭлементНастройки);
			ИмяЭлемента = СтрЗаменить(ЭлементНастройки, ТипЭлемента + "_", "");
			ЗначениеПоУмолчанию = НастройкаСчетовУчетаКлиентСервер.ЗначениеУмолчанияПоТипуЭлемента(ТипЭлемента);
			
			ТекстСсылкиНаВидСчета = СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.%1)", ИмяЭлемента);
			Если ТипЭлемента = "СчетУчета" Тогда
				МассивТекстовВидовСчетовРаздела.Добавить(ТекстСсылкиНаВидСчета);
			КонецЕсли;
			Если ТипЭлемента = "СчетУчета" И МассивТекстовВидовСчетов.Найти(ТекстСсылкиНаВидСчета) = Неопределено
				Или ТипЭлемента <> "СчетУчета" Тогда
				
				ТекстПоля = ШаблонОпределенияПоля;
				Если ТипЭлемента = "СчетУчета" Тогда
					МассивТекстовВидовСчетов.Добавить(ТекстСсылкиНаВидСчета);
				ИначеЕсли ТипЭлемента = "ДопПоле" Тогда
					СчетУчета = НастройкаСчетовУчетаКлиентСервер.СчетУчетаДляКоторогоИспользуетсяДопПоле(ИмяЭлемента);
					ТекстПоля = СтрЗаменить(ТекстПоля, ".%1", "." + СчетУчета);
					ТекстПоля = СтрЗаменить(ТекстПоля, ".%2", ".%1");
				КонецЕсли;
				
				ТекстПоля = СтрШаблон(ТекстПоля, ИмяЭлемента, ТипЭлемента, ЗначениеПоУмолчанию);
				МассивТекстовПолей.Добавить(ТекстПоля);
				МассивТекстовПолейПостроителя.Добавить(ТипЭлемента + "_" + ИмяЭлемента);
				
			КонецЕсли;
		КонецЦикла;
		
		ТекстВидовСчетовРаздела = СтрСоединить(МассивТекстовВидовСчетовРаздела, ",");
		ТекстУсловияРаздела = СтрЗаменить(ШаблонОпределенияУсловияРазделаУчета, "&ВидыСчетовРаздела", ТекстВидовСчетовРаздела);
		Если НастройкаСчетовУчетаКлиентСервер.ВидыРасчетовСПартнерами().Найти(НастройкаРаздела.Ключ) <> Неопределено Тогда
			ДопУсловие = СтрШаблон("ЕстьNULL(ПорядокОтраженияНаСчетахУчета.АналитикаУчета.%1, ИСТИНА)", НастройкаРаздела.Ключ);
			ТекстУсловияРаздела = СтрЗаменить(ТекстУсловияРаздела, "&ДопУсловиеРаздела", ДопУсловие);
		Иначе
			ТекстУсловияРаздела = СтрЗаменить(ТекстУсловияРаздела, " И &ДопУсловиеРаздела", "");
		КонецЕсли;
		ТекстУсловияРаздела = СтрШаблон(ТекстУсловияРаздела, НастройкаРаздела.Ключ);
		МассивТекстовУсловийРаздела.Добавить(ТекстУсловияРаздела);
		
		ОписаниеТиповАналитикиУчета = НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета(НастройкаРаздела.Ключ).ТипЗначения;
		Если ОписаниеТиповАналитикиУчета <> Неопределено Тогда
			Для каждого Тип Из ОписаниеТиповАналитикиУчета.Типы() Цикл
				
				МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
				ИмяМетаданных = МетаданныеТипа.ПолноеИмя();
				ТекУсловиеАналитики = СтрШаблон("ПорядокОтраженияНаСчетахУчета.АналитикаУчета ССЫЛКА %1", ИмяМетаданных);
				Если МассивТиповАналитики.Найти(ТекУсловиеАналитики) = Неопределено Тогда
					МассивТиповАналитики.Добавить(ТекУсловиеАналитики);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОграничениеАналитикиПоТипу = ?(МассивТиповАналитики.Количество(), СтрСоединить(МассивТиповАналитики, " ИЛИ "), "ИСТИНА");
	
	ТекстПолейЗапроса = СтрСоединить(МассивТекстовПолей, ","+Символы.ПС+Символы.Таб);
	ТекстПолейПостроителяЗапроса = СтрСоединить(МассивТекстовПолейПостроителя, ","+Символы.ПС+Символы.Таб);
	ТекстВидовСчетов = СтрСоединить(МассивТекстовВидовСчетов, ","+Символы.ПС+Символы.Таб);
	ТекстУсловийРаздела = СтрСоединить(МассивТекстовУсловийРаздела, Символы.ПС+Символы.Таб+Символы.Таб);
	ТекстОпределенияРаздела = СтрЗаменить("МАКСИМУМ(ВЫБОР
	|		%СписокУсловийРазделов
	|	КОНЕЦ)", "%СписокУсловийРазделов", ТекстУсловийРаздела);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляПереопределяемый", ТекстПолейЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РежимНастройки КАК ПоляПостроителяПереопределяемый", ТекстПолейПостроителяЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидыСчетов", ТекстВидовСчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОпределенияРазделаУчета", ТекстОпределенияРаздела);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОграничениеАналитикиПоТипу", ТекстОграничениеАналитикиПоТипу);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСчетовУчета(РазделУчета, СтруктураПараметров)
	
	Если ТипЗнч(РазделУчета) = Тип("Массив") Тогда
		РазделыУчета = РазделУчета;
	Иначе
		РазделыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РазделУчета);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РазделыУчета", РазделыУчета);
	ИмяОткрываемойФормы = "РегистрСведений.ПорядокОтраженияНаСчетахУчета.Форма.ФормаЗаписиДинамически";
	СтруктураПараметров.Вставить("КлючНазначенияИспользования", РазделУчета);
	СтруктураПараметров.Вставить("КлючСохраненияПоложенияОкна", РазделУчета);
	ОткрытьФорму(ИмяОткрываемойФормы, СтруктураПараметров, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписиПорядкаОтраженияНаСчетахУчета(СтруктураИзмерений)
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, Новый Структура, Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура РазделыУчетаПриИзмененииСервер()
	УсловноеОформление.Элементы.Очистить();
	НастройкаСчетовУчетаСервер.УстановитьНастройкиСчетовУчетаВФорме(ЭтотОбъект);
	ВысотаШапки = Неопределено;
	ЭтотОбъект.КэшДанныхМеханизмов.НастройкаСчетовУчета.Свойство("ВысотаШапки", ВысотаШапки);
	Если ВысотаШапки = 2 Тогда
		Элементы.СписокГруппаИзмерения.Группировка = ГруппировкаКолонок.Вертикальная;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти