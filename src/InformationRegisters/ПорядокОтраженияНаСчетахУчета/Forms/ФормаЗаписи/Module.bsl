#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Запись, ЭтотОбъект);
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗаполнитьЗначенияСвойств(Запись, Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	КэшДанныхМеханизмов = Новый Структура;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	РедактируемыеРазделы = КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета;
	РедактируемыеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(РедактируемыеРазделы);
	Оповестить("ЗаконченаНастройкаСчетовУчета", РедактируемыеРазделы);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать вид счета!';
																|en = 'Specify an account type!'"), Запись.ИсходныйКлючЗаписи,, "Запись.ВидСчета", Отказ);
	КонецЕсли;
	РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(КэшДанныхМеханизмов.НастройкаСчетовУчета);
	НастройкаРаздела = КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов.Получить(РазделУчета);
	ШаблонОшибки = НСтр("ru = 'Для учета %1 по виду счета ""%2"" необходимо указать %3!';
						|en = 'For %1 accounting by the account type ""%2"" you need to specify %3!'");
	
	Если ЗначениеЗаполнено(Запись.ВидСчета) И Не ЗначениеЗаполнено(Запись.СчетУчета) Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НастройкаРаздела.Представление, Запись.ВидСчета, НСтр("ru = 'значение счета';
																									|en = 'account value'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Запись.ИсходныйКлючЗаписи,, "Запись.СчетУчета", Отказ);
	КонецЕсли;
	
	РазделыУчетаСОбязательнойАналитикой = НастройкаСчетовУчетаКлиентСервер.РазделыУчетаСОбязательнойАналитикой();
	Если РазделыУчетаСОбязательнойАналитикой.Найти(РазделУчета) <> Неопределено И Не ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НастройкаРаздела.Представление, Запись.ВидСчета, НастройкаРаздела.СвойстваАналитики.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Запись.ИсходныйКлючЗаписи,, "Запись.АналитикаУчета", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Организация) И ЗначениеЗаполнено(Запись.МестоУчета) Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НастройкаРаздела.Представление, Запись.ВидСчета, НСтр("ru = 'Организацию';
																									|en = 'Company'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Запись.ИсходныйКлючЗаписи,, "Запись.Организация", Отказ);
	КонецЕсли;
	
	Если НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяВидаСчета) Тогда
		ЭтоСчетПрочиеДоходыРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(Запись.СчетУчета)
			ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеРасходы(Запись.СчетУчета);
		Если ЭтоСчетПрочиеДоходыРасходы И Не ЗначениеЗаполнено(Запись.Субконто) Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибки, НастройкаРаздела.Представление, Запись.ВидСчета, НСтр("ru = 'значение субконто';
																										|en = 'extra dimension value'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Запись.ИсходныйКлючЗаписи,, "Запись.Субконто", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") И ТекущийОбъект.Организация.Пустая()
		И ТекущийОбъект.МестоУчета <> Неопределено Тогда
		ТекущийОбъект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ТекущийОбъект.Организация);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АналитикаУчетаПриИзменении(Элемент)
	
	АналитикаУчетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСчетаПриИзменении(Элемент)
	
	ВидСчетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Если НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяВидаСчета) Тогда
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.НачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура АналитикаУчетаПриИзмененииСервер()
	
	СтарыеРазделыУчета = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета);
	
	//Считаем, что если аналитика очищается, то при незаполненном виде счета, сбрасываются все настройки по разделам и разделы можно менять снова:
	Если Не ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		Если Не ЗначениеЗаполнено(Запись.ВидСчета) И ВозвратКоВсемРазделам Тогда
			Запись.АналитикаУчета = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НовыеРазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(Запись.АналитикаУчета);
	СтарыйРазделУчетаВходитВСписокНовых = СтарыеРазделыУчета.Количество() = 1 И НовыеРазделыУчета.Найти(СтарыеРазделыУчета[0]) <> Неопределено;
	
	Если НовыеРазделыУчета = Неопределено Или (Не СтарыйРазделУчетаВходитВСписокНовых
		И Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НовыеРазделыУчета, СтарыеРазделыУчета)) Тогда
		// Изменились разделы учета:
		ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета(НовыеРазделыУчета);
		ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(ЭтотОбъект, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
		УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройкиСчетовУчета);
		УстановитьСвойстваИзмеренийНаФорме();
		Запись.ВидСчета = Неопределено;
		Запись.Организация = Неопределено;
		Запись.МестоУчета = Неопределено;
		Запись.СчетУчета = Неопределено;
		Запись.Субконто = Неопределено;
		
	Иначе
		ПараметрыНастройкиСчетовУчета = КэшДанныхМеханизмов.НастройкаСчетовУчета;
	КонецЕсли;
	
	ОбновитьРеквизитыАналитики(ПараметрыНастройкиСчетовУчета, Запись);
	Если ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		НастройкаСчетовУчетаСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымАналитики(ПараметрыНастройкиСчетовУчета, Запись.АналитикаУчета);
	КонецЕсли;
	
	МассивДоступныхВидовСчетов = ПараметрыВыбораВидаСчета(ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
	Элементы.ВидСчета.ПараметрыВыбора = МассивДоступныхВидовСчетов;
	Если МассивДоступныхВидовСчетов.Получить(0).Значение.Количество() = 1 Тогда
		Запись.ВидСчета = МассивДоступныхВидовСчетов.Получить(0).Значение.Получить(0);
		ИмяВидаСчета = XMLСтрока(Запись.ВидСчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		УстановитьИспользуемыеСчетаУчета(ПараметрыНастройкиСчетовУчета, ИмяВидаСчета);
	КонецЕсли;
	
	ТекущийРазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(КэшДанныхМеханизмов.НастройкаСчетовУчета);
	НастройкаАналитики = КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов.Получить(ТекущийРазделУчета).СвойстваАналитики;
	
	ВозвратКоВсемРазделам = (Не ВозвратКоВсемРазделам Или Не ЗначениеЗаполнено(НастройкаАналитики.ПредставлениеПустого)) И Не ЗначениеЗаполнено(Запись.АналитикаУчета);
	Элементы.АналитикаУчета.ОтметкаНезаполненного = Ложь;
	
	УстановитьВидимостьСчетаИСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ВидСчетаПриИзмененииСервер()
	
	ИмяВидаСчета = XMLСтрока(Запись.ВидСчета);
	
	Если Не ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		
		СтарыеРазделыУчета = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета);
		Если ЗначениеЗаполнено(Запись.ВидСчета) Тогда
			НовыйРазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяВидаСчета);
			НовыеРазделыУчета = НастройкаСчетовУчетаКлиентСервер.ПодразделыОбщегоРаздела(НовыйРазделУчета);
		Иначе
			НовыеРазделыУчета = Неопределено;
		КонецЕсли;
		
		Если (НовыеРазделыУчета = Неопределено Или Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НовыеРазделыУчета, СтарыеРазделыУчета)) Тогда
			// Изменились разделы учета:
			ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета(НовыеРазделыУчета);
			ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(ЭтотОбъект, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
			УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройкиСчетовУчета);
			УстановитьСвойстваИзмеренийНаФорме();
			ОбновитьРеквизитыАналитики(ПараметрыНастройкиСчетовУчета, Запись);
			Запись.Организация = Неопределено;
			Запись.МестоУчета = Неопределено;
			Запись.СчетУчета = Неопределено;
			Запись.Субконто = Неопределено;
			
		Иначе
			ПараметрыНастройкиСчетовУчета = КэшДанныхМеханизмов.НастройкаСчетовУчета;
		КонецЕсли;
		
		МассивДоступныхВидовСчетов = ПараметрыВыбораВидаСчета(ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
		Элементы.ВидСчета.ПараметрыВыбора = МассивДоступныхВидовСчетов;
		Если МассивДоступныхВидовСчетов.Получить(0).Значение.Количество() = 1 Тогда
			Запись.ВидСчета = МассивДоступныхВидовСчетов.Получить(0).Значение.Получить(0);
		КонецЕсли;
		
	Иначе
		
		ПараметрыНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(ЭтотОбъект, "НастройкаСчетовУчета");
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		УстановитьИспользуемыеСчетаУчета(ПараметрыНастройкиСчетовУчета, ИмяВидаСчета);
	КонецЕсли;
	
	УстановитьВидимостьСчетаИСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИмяВидаСчета = XMLСтрока(Запись.ВидСчета);
	
	Если ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяВидаСчета);
		РазделыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РазделУчета);
	ИначеЕсли ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		РазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(Запись.АналитикаУчета);
	Иначе
		РазделыУчета = Неопределено;
	КонецЕсли;
	
	ПараметрыНастройкиСчетовУчета = НастройкаСчетовУчетаСервер.ПараметрыНастройкиСчетовУчета(РазделыУчета);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(ЭтотОбъект, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
	УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройкиСчетовУчета);
	УстановитьСвойстваИзмеренийНаФорме();
	ОбновитьРеквизитыАналитики(ПараметрыНастройкиСчетовУчета, Запись);
	Если ЗначениеЗаполнено(Запись.АналитикаУчета) Тогда
		Если ПараметрыНастройкиСчетовУчета.ЭтоСтараяНастройка Тогда
			ЭтотОбъект.ТолькоПросмотр = Истина;
		Иначе
			НастройкаСчетовУчетаСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымАналитики(ПараметрыНастройкиСчетовУчета, Запись.АналитикаУчета);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийРазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(КэшДанныхМеханизмов.НастройкаСчетовУчета);
	НастройкаАналитики = КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов.Получить(ТекущийРазделУчета).СвойстваАналитики;
	ВозвратКоВсемРазделам = РазделыУчета = Неопределено Или Не ЗначениеЗаполнено(НастройкаАналитики.ПредставлениеПустого);
	
	МассивДоступныхВидовСчетов = ПараметрыВыбораВидаСчета(ПараметрыНастройкиСчетовУчета.СписокРазделовУчета);
	Элементы.ВидСчета.ПараметрыВыбора = МассивДоступныхВидовСчетов;
	Если МассивДоступныхВидовСчетов.Получить(0).Значение.Количество() = 1 Тогда
		Запись.ВидСчета = МассивДоступныхВидовСчетов.Получить(0).Значение.Получить(0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		УстановитьИспользуемыеСчетаУчета(ПараметрыНастройкиСчетовУчета, ИмяВидаСчета);
	КонецЕсли;
	
	УстановитьВидимостьСчетаИСубконто();
	
КонецПроцедуры

&НаСервере
Процедура УточнитьПараметрыНастройкиСчетовДляТекущейФормы(ПараметрыНастройки)
	
	ПараметрыНастройки.ИмяГруппыНастроекСчетовУчета = "ГруппаНастроекСчетов";
	ПараметрыНастройки.ПрефиксПутиКДаннымРеквизитов = "Запись.АналитикаУчета.";
	ПараметрыНастройки.ПрефиксПутиКДанным = "";
	ПараметрыНастройки.РазбитьПоРазделамЭлементы = ПараметрыНастройки.СписокРазделовУчета.Количество() > 1;
	ПараметрыНастройки.Вставить("МенятьОбщие");
	ПараметрыНастройки.СоздаватьВСлучаеОтсутствия = Ложь;
	ПараметрыНастройки.Вставить("НастройкаПоОдному");
	ПараметрыНастройки.РазбитьПоРазделамЭлементы = Ложь;
	ПараметрыНастройки.Вставить("ЭтоСтараяНастройка", Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораВидаСчета(СписокРазделов)
	
	МассивРазделов = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокРазделов);
	МассивВидовСчетов = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.НастраиваемыеВидыСчетов(МассивРазделов);
	МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовСчетов));
	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИспользуемыеСчетаУчета(ПараметрыНастройки, ИмяВидаСчета)
	
	Для каждого НастройкаРаздела Из ПараметрыНастройки.НастройкиРазделов Цикл
		Для каждого ЭлементНастройки Из НастройкаРаздела.Значение.ЭлементыНастройки Цикл
			ТипЭлемента = НастройкаСчетовУчетаКлиентСервер.ПрефиксЭлементаНастройки(ЭлементНастройки);
			ИмяЭлемента = СтрЗаменить(ЭлементНастройки, ТипЭлемента + "_", "");
			Если ИмяВидаСчета = "" Тогда
				ЭлементНастройки.Пометка = Истина;
			ИначеЕсли ТипЭлемента = "СчетУчета" Тогда
				ЭлементНастройки.Пометка = ЭлементНастройки.Значение = ИмяВидаСчета;
			ИначеЕсли ТипЭлемента = "ДопПоле" Тогда
				ЭлементНастройки.Пометка = НастройкаСчетовУчетаКлиентСервер.ИспользуютсяМалоценныеТМЦ(ИмяЭлемента);
			ИначеЕсли ТипЭлемента = "Субконто" Тогда
				ЭлементНастройки.Пометка = НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьРеквизитыАналитики(ПараметрыНастройки, Запись)
	
	АналитикаКорректна = Не ЗначениеЗаполнено(Запись.АналитикаУчета);
	Для каждого НастройкаРаздела Из ПараметрыНастройки.НастройкиРазделов Цикл
		ОписаниеТиповАналитикиУчета = НастройкаРаздела.Значение.СвойстваАналитики.ТипЗначения;
		Если ОписаниеТиповАналитикиУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Тип Из ОписаниеТиповАналитикиУчета.Типы() Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			ИмяМетаданных = МетаданныеТипа.ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМетаданных);
			МенеджерОбъекта.ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(ПараметрыНастройки.ПутиКРеквизитамАналитики);
			
			Если Не АналитикаКорректна И Тип = ТипЗнч(Запись.АналитикаУчета) Тогда
				АналитикаКорректна = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Не АналитикаКорректна Тогда
		ПараметрыНастройки.ЭтоСтараяНастройка = Истина;
		Возврат;
	КонецЕсли;
	
	СчетаУчетаДляПолучения = Новый Массив;
	Для каждого Реквизит Из ПараметрыНастройки.РеквизитыАналитики Цикл
		ИмяЭлементаНастройки = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(Реквизит.Ключ);
		Если СтрНачинаетсяС(Реквизит.Ключ, "СчетУчета") Тогда
			СчетаУчетаДляПолучения.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЦикла;
	
	Если СчетаУчетаДляПолучения.Количество() Тогда
		Раздел = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(ПараметрыНастройки);
		СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Запись);
		НастройкиСчетов = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.НастройкаОтраженияРаздела(Раздел, СтруктураИзмерений, СчетаУчетаДляПолучения);
		Для каждого Реквизит Из ПараметрыНастройки.РеквизитыАналитики Цикл
			ИмяЭлементаНастройки = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(Реквизит.Ключ);
			Если НастройкиСчетов.Свойство(ИмяЭлементаНастройки) Тогда
				ПараметрыНастройки.РеквизитыАналитики.Вставить(Реквизит.Ключ, НастройкиСчетов[ИмяЭлементаНастройки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваИзмеренийНаФорме()
	
	НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(ЭтотОбъект);
	Для каждого НастройкаРаздела Из КэшДанныхМеханизмов.НастройкаСчетовУчета.НастройкиРазделов Цикл
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(ЭтотОбъект, НастройкаРаздела.Ключ);
		ТипАналитики = НастройкаРаздела.Значение.СвойстваАналитики.ТипЗначения;
		Если ТипАналитики <> Неопределено Тогда
			Запись.АналитикаУчета = ТипАналитики.ПривестиЗначение(Запись.АналитикаУчета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьСчетаИСубконто()
	
	Если Не ЗначениеЗаполнено(Запись.ВидСчета) Тогда
		Элементы.СчетУчета.Видимость = Ложь;
		Элементы.Субконто.Видимость = Ложь;
		Элементы.ОтноситсяКМалоценнымТМЦ.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СчетУчета.Видимость = Истина;
	Элементы.СчетУчета.Доступность = Истина;
	
	Элементы.Долгосрочный.Видимость = НастройкаСчетовУчетаКлиентСервер.ИспользуетсяДолгосрочныйСчет(ИмяВидаСчета);
	Элементы.ОтноситсяКМалоценнымТМЦ.Видимость = НастройкаСчетовУчетаКлиентСервер.ИспользуютсяМалоценныеТМЦ(ИмяВидаСчета)
		И КэшДанныхМеханизмов.НастройкаСчетовУчета.ОбщиеРеквизиты.ИспользуютсяМалоценные;
	
	Элементы.СчетУчета.ПараметрыВыбора = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСчетаУчета(ИмяВидаСчета, КэшДанныхМеханизмов.НастройкаСчетовУчета, Запись.Долгосрочный);
	НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваСчетовНаФорме(ЭтотОбъект, ИмяВидаСчета);
	Если Не НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяВидаСчета) Тогда
		Элементы.Субконто.Видимость = Ложь;
	Иначе
		Элементы.Субконто.Видимость = Истина;
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваСчетовНаФорме(ЭтотОбъект, ИмяВидаСчета,, "Субконто");
		Элементы.Субконто.ОграничениеТипа = НастройкаСчетовУчетаКлиентСервер.ТипСубконтоПоИмениСчета(ИмяВидаСчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти