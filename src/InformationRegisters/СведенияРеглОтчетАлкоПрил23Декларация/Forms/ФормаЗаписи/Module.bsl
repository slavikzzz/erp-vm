

#Область ОписаниеПеременных

&НаСервере
Перем ОбъектЭтогоОтчета; // Объект метаданных отчета, из которого открыта форма записи.

&НаКлиенте
Перем УправляемаяФормаВладелец; // Форма отчета, из которого открыта форма записи.

&НаКлиенте
Перем УникальностьФормы; // Уникальный идентификатор формы отчета.

&НаКлиенте
Перем ПоказыватьПредупреждениеПослеПереходаПоСсылке; // Флаг необходимости показа предупреждения.

// Форма выбора из списка, ввода пары значений, форма длительной операции, 
// записи регистра, ввода данных по ОП и т.д.
// Любая открытая из данной формы форма в режиме блокировки владельца.
&НаКлиенте
Перем ОткрытаяФормаПотомокСБлокировкойВладельца Экспорт;

&НаКлиенте
Перем АктивноеПоле, ИмяАктивногоПоля;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	ФормированиеПредставленийНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	
	// Определим тексты запросов динамических списков.
	
	ОсновнаяТаблица = "";	
	ТекстЗапроса = РегламентированнаяОтчетностьАЛКО.ТекстЗапросаВыбораКонтрагентаАЛКО(
																	ОсновнаяТаблица, Ложь, Неопределено);	    
	ДинСписокОтправителей.ТекстЗапроса = ТекстЗапроса;
	ДинСписокОтправителей.ОсновнаяТаблица = ОсновнаяТаблица;
	ДинСписокОтправителей.ДинамическоеСчитываниеДанных = Истина;
							
	ДинСписокПолучателей.ТекстЗапроса = ТекстЗапроса;
	ДинСписокПолучателей.ОсновнаяТаблица = ОсновнаяТаблица;
	ДинСписокПолучателей.ДинамическоеСчитываниеДанных = Истина;
	
	Элементы.ТаблицаПолучателей.Обновить();
	Элементы.ТаблицаОтправителей.Обновить();
		
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ТекстПредупреждения = НСтр("ru = 'Данная форма предназначена для редактирования данных из форм регламентированных отчетов.
								|
								|Открытие данной формы не из формы регламентированного отчета не предусмотрено!';
								|en = 'Данная форма предназначена для редактирования данных из форм регламентированных отчетов.
								|
								|Открытие данной формы не из формы регламентированного отчета не предусмотрено!'");
	
	// Ищем управляемую форму, откуда открыли.
	Если ВладелецФормы = Неопределено Тогда
		
	    Отказ = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ТекущийРодитель = ВладелецФормы;
	 
	Пока НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ТекущийРодитель) Цикл
	    ТекущийРодитель = ТекущийРодитель.Родитель;		
	КонецЦикла; 
			
	УправляемаяФормаВладелец		= ТекущийРодитель;
	ИмяФормыВладельца 	= УправляемаяФормаВладелец.ИмяФормы;
	
	Если СтрНайти(ИмяФормыВладельца, "РегламентированныйОтчетАлко") = 0 Тогда
	
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	
	КонецЕсли;
	
	УникальностьФормы   = УправляемаяФормаВладелец.УникальностьФормы;
	Оповестить("ОткрытаФормаЗаписиРегистра", ЭтаФорма, УникальностьФормы);
	
	ТекущееСостояниеВладельца = УправляемаяФормаВладелец.ТекущееСостояние;
	
    ДокументЗаписи = 		УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИндексСтраницыЗаписи = 	УправляемаяФормаВладелец.ИндексАктивнойСтраницыВРегистре;
	ИндексСтраницы = 		УправляемаяФормаВладелец.НомерАктивнойСтраницыМногострочногоРаздела;
	НомерПоследнейЗаписи = 	УправляемаяФормаВладелец.КоличествоСтрок;
	МаксИндексСтраницы = 	УправляемаяФормаВладелец.МаксИндексСтраницы;
	
	ДатаПодписи = 			УправляемаяФормаВладелец.ДатаПодписи;
	
	ПоказыватьПредупреждениеПослеПереходаПоссылке = УправляемаяФормаВладелец.ПоказыватьПредупреждениеПослеПереходаПоссылке;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
				
		// Заполним измерения, их нет на форме.
	    Запись.Активно = Истина;
		
		Запись.Документ = ДокументЗаписи;
				
		НомерПоследнейЗаписи = НомерПоследнейЗаписи + 1;
	    Запись.ИндексСтроки = НомерПоследнейЗаписи;
		
		Модифицированность = Истина;
			
	КонецЕсли;
		
	Заголовок = "Перевозка этилового спирта, алкогольной и спиртосодержащей продукции";
	
	ФлажокОтклАвтоРасчет 	= УправляемаяФормаВладелец.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ФлажокОтклАвтоВыборКодов	= УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мАвтоВыборКодов;
	ДатаПериодаОтчета = УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
	ДатаНачалаОтчета = УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	ПодготовкаНаСервере();

	Если НЕ ВладелецФормы.ТекущийЭлемент = Неопределено Тогда
		
		ИмяАктивногоПоля = ВладелецФормы.ТекущийЭлемент.Имя;
		
		Если ИмяАктивногоПоля = "П000010000301" Тогда
		    ИмяАктивногоПоля = "ПредставлениеВидаПеревозки";			
		КонецЕсли; 
		
		Если ИмяАктивногоПоля = "П000010000302" Тогда
		    ИмяАктивногоПоля = "Представление";			
		КонецЕсли;
		
		Если ИмяАктивногоПоля = "П000010000306" Тогда
		    ИмяАктивногоПоля = "ПредставлениеАдресаОтправителя";			
		КонецЕсли;
		
		Если ИмяАктивногоПоля = "П000010000313" Тогда
		    ИмяАктивногоПоля = "ПредставлениеАдресаПолучателя";			
		КонецЕсли;
		
	    АктивноеПоле = Элементы.Найти(ИмяАктивногоПоля);
		Если НЕ АктивноеПоле = Неопределено Тогда
			
			ТекущийЭлемент = АктивноеПоле;
			
			РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьСЗадержкой(ЭтаФорма, "АктивизироватьПоле", 0.1);
			
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьПоле() Экспорт

	Если НЕ (ТекущееСостояниеВладельца = "АктивизацияЯчейкиТаблицы" 
			ИЛИ ТекущееСостояниеВладельца = "Редактирование") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если НЕ АктивноеПоле = Неопределено Тогда
		
		Если АктивноеПоле.Вид = ВидПоляФормы.ПолеНадписи Тогда
			
			Если АктивноеПоле.Гиперссылка Тогда

				ИмяПроцедурыНажатие = ПолучитьДействиеПоляФормы(ИмяАктивногоПоля, "Нажатие");

				Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда
					Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, ЭтотОбъект);
					ВыполнитьОбработкуОповещения(Оповещение);
				КонецЕсли;

			КонецЕсли;

		ИначеЕсли АктивноеПоле.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если АктивноеПоле.КнопкаВыбора <> Неопределено Тогда
				
				Если АктивноеПоле.КнопкаВыбора Тогда

					ИмяПроцедурыНачалоВыбора = ПолучитьДействиеПоляФормы(ИмяАктивногоПоля, "НачалоВыбора");

					Если ЗначениеЗаполнено(ИмяПроцедурыНачалоВыбора) Тогда
						Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНачалоВыбора, ЭтотОбъект);
						ВыполнитьОбработкуОповещения(Оповещение);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ПолучитьДействиеПоляФормы(ИмяПоля, ИмяДействия)
	Возврат Элементы[ИмяПоля].ПолучитьДействие(ИмяДействия);
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ЗакрытаФормаЗаписиРегистра", , УникальностьФормы);
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
				
	ВнесеныИзменения = Модифицированность;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		// Обработка ситуаций "битых" внутренних данных отчета.
		// В норме условие должно проверяться один раз, результат Ложь, 
		// но если из отчета пришло неверное значениепоследней строки - этот цикл позволит
		// записать корректно данные.
		// В дальнейшем при закрытии формы через оповещение отчет будет проинформирован о текущей строке,
		// и скорректирует свои внутренние данные.
		
		СписокСоставаРегистра = Новый СписокЗначений;
		СписокСоставаРегистра.Добавить("Измерения");
		СтруктураИзмерений = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруДанныхЗаписиРегистраСведений(
																		ИмяРегистра, СписокСоставаРегистра);
	
		Пока РегламентированнаяОтчетностьАЛКО.СуществуетЗапись(Запись, ИмяРегистра, СтруктураИзмерений) Цикл
			
			НомерПоследнейЗаписи = НомерПоследнейЗаписи + 1;
			Запись.ИндексСтроки = НомерПоследнейЗаписи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоПервоеРедактирование = Ложь;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки, "ДобавлениеСтроки");
									
	ИначеЕсли ВнесеныИзменения Тогда
			
		// Нужно записать первоначальные данные Записи регистра в журнал.
		// Но сделать это надо только для случая первого изменения Записи после последнего сохранения отчета,
		// чтобы была информация о данных до изменения в случае отката внесенных изменений, если
		// отказался пользователь от сохранения отчета.
		
		ЭтоПервоеРедактирование = РегламентированнаяОтчетностьАЛКО.ЭтоПервоеРедактированиеЗаписиРегистра(ТекущийОбъект.Документ, ИмяРегистра, 
															ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки);
				
	КонецЕсли;
	
	Если ЭтоПервоеРедактирование Тогда
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		// Нужно сохранить первоначальные данные.
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки, "Редактирование", Ресурсы);
	Иначе
									
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);		
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, 0, "Сервис", Ресурсы);							
	КонецЕсли;

	Если ВнесеныИзменения Тогда
		РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
											Запись, ИмяРегистра, КонечноеЗначениеСтруктураДанных);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
    	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
    	МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещаем о необходимости пересчета итогов форму-владелец для активных записей.
	Если ВнесеныИзменения и Запись.Активно Тогда
	 
		// Оповещаем форму-владелец о изменениях.
		ИнформацияДляПересчетаИтогов = Новый Структура;
		ИнформацияДляПересчетаИтогов.Вставить("ИмяРегистра", 		ИмяРегистра);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтраницы", 	ИндексСтраницы);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтроки", 		Запись.ИндексСтроки);
		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", 	НачальноеЗначениеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", 	КонечноеЗначениеСтруктураДанных);
		
		Оповестить("ПересчетИтогов", ИнформацияДляПересчетаИтогов, УникальностьФормы);
	
	КонецЕсли;
		
	ВнесеныИзменения = Ложь;
		
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
		// Идет завершение работы системы.
	Иначе
		// Обычное закрытие.
	    Если Элементы.ГруппаВыборОтправителя.Видимость или Элементы.ГруппаВыборПолучателя.Видимость Тогда
		    // Щелкнули на крестик при выборе производителя.
			Отказ = Истина;
		    УправлениеВидимостью(Ложь, Ложь);
			
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальностьФормы Тогда
		
		Если НРег(ИмяСобытия) = НРег("ЗакрытьОткрытыеФормыЗаписи") Тогда			
		    Модифицированность = Ложь;
			Закрыть();			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура П000010000304ПриИзменении(Элемент)
	ТаблицаОтправителейВыборНаСервере(Неопределено, Запись.П000010000304, "");
КонецПроцедуры

&НаКлиенте
Процедура П000010000311ПриИзменении(Элемент)
	ТаблицаПолучателейВыборНаСервере(Неопределено, Запись.П000010000311, "");	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНажатие(Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент = Неопределено Тогда	
		Элемент = ТекущийЭлемент;	
	КонецЕсли; 
	
	Если Элемент.Имя = "ПредставлениеВидаПеревозки" Тогда
		
		ИмяКод = "П000010000301";
		ИмяНаименование = "ВидПеревозки";
		ЗаголовокФормы = "Выбор вида перевозки";
		НадписьПоляЗначения = "Вид перевозки";
		НадписьПоляКод = "Код";
		ДлинаПоляКода  = 4;
		ДлинаПоляЗначения = 40;
		
	ИначеЕсли Элемент.Имя = "Представление" Тогда
		
	    ИмяКод = "П000010000302";
		ИмяНаименование = "ВидПродукции";
		ЗаголовокФормы = "Ввод вида продукции";
		НадписьПоляЗначения = "Вид продукции";
		НадписьПоляКод = "Код";
		ДлинаПоляКода  = 6;
		ДлинаПоляЗначения = 40;
		
	КонецЕсли;
	
	
	ВыборВидаПродукции(ИмяКод, ИмяНаименование, ЗаголовокФормы, 
		НадписьПоляЗначения, НадписьПоляКод, ДлинаПоляКода, ДлинаПоляЗначения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеПриИзменении(Элемент)
	
	Если Элемент.Имя = "П000010000304" ИЛИ Элемент.Имя = "П000010000305" Тогда
	
		ОчищаемыйКонтрагент = "Отправитель";	
	
	КонецЕсли; 
	
	Если Элемент.Имя = "П000010000311" ИЛИ Элемент.Имя = "П000010000312" Тогда
	
		ОчищаемыйКонтрагент = "Получатель";	
	
	КонецЕсли;
		
	ОбработкаПослеИзменения();
		
КонецПроцедуры


&НаКлиенте
Процедура ОтправительПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	НажатиеГиперссылки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	НажатиеГиперссылки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНажатие(Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
		
	СтандартнаяОбработка = Ложь;
	
	Если Элемент = Неопределено Тогда	
		Элемент = ТекущийЭлемент;	
	КонецЕсли;
	
	Если Элемент.Имя = "ПредставлениеАдресаПолучателя" Тогда
	    ИмяПоля = "П000010000313";
	ИначеЕсли Элемент.Имя = "ПредставлениеАдресаОтправителя" Тогда	
	    ИмяПоля = "П000010000306";
	КонецЕсли;
	
	ВводАдресаНаКлиенте(ИмяПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительФизЛицоПриИзменении(Элемент)
	
	Запись.ФизЛицоУстановленПользователем = Истина;
	Модифицированность = Истина;
		
	ПолеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательРезидентРФПриИзменении(Элемент)
	
	Запись.РезидентУстановленПользователем = Истина;
	Модифицированность = Истина;
	
	ПолеПриИзменении(Элемент);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтправителей

&НаКлиенте
Процедура ТаблицаОтправителейВыбор(Элемент, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Истина)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	НаименованиеПолное = Элемент.ТекущиеДанные.НаименованиеПолное;
	ИНН = Элемент.ТекущиеДанные.ИНН;
	КПП = Элемент.ТекущиеДанные.КПП;	
	
	ТаблицаОтправителейВыборНаСервере(НаименованиеПолное, ИНН, КПП);
			
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаОтправителейПриАктивизацииСтроки(Элемент)
	
	Если НЕ ПроверялиНеобходимостьПоказаПредупреждения Тогда	
		
		Элементы.ГруппаИнфоВыбораОтправителя.Видимость = (Элемент.ТекущиеДанные = Неопределено);			
		
		ПроверялиНеобходимостьПоказаПредупреждения = Истина;
		
	КонецЕсли;	
	
	// Обход неверного отображения таблицы (укорачивание последнего столбца 
	// в таблицах с выводом значений по строке в нескольких уровнях).
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НужноИсправитьВыводТаблицы Тогда			
		Элемент.Обновить();	
		НужноИсправитьВыводТаблицы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПолучателей

&НаКлиенте
Процедура ТаблицаПолучателейВыбор(Элемент, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Истина)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	НаименованиеПолное = Элемент.ТекущиеДанные.НаименованиеПолное;
	ИНН = Элемент.ТекущиеДанные.ИНН;
	КПП = Элемент.ТекущиеДанные.КПП;
		
	ТаблицаПолучателейВыборНаСервере(НаименованиеПолное, ИНН, КПП);
			
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПолучателейПриАктивизацииСтроки(Элемент)
	
	Если НЕ ПроверялиНеобходимостьПоказаПредупреждения Тогда	
		
		Элементы.ГруппаИнфоВыбораПолучателя.Видимость = (Элемент.ТекущиеДанные = Неопределено);			
		
		ПроверялиНеобходимостьПоказаПредупреждения = Истина;
		
	КонецЕсли;	
	
	// Обход неверного отображения таблицы (укорачивание последнего столбца 
	// в таблицах с выводом значений по строке в нескольких уровнях).
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НужноИсправитьВыводТаблицы Тогда			
		Элемент.Обновить();	
		НужноИсправитьВыводТаблицы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьИЗакрыть(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
	    Закрыть();
	Иначе	
	    Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьГрузоотправителя(Команда)
	
	УправлениеВидимостью(Истина, Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьГрузополучателя(Команда)
	
	УправлениеВидимостью(Ложь, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборГрузоотправителя(Команда)
	
	ТаблицаОтправителейВыбор(Элементы.ТаблицаОтправителей);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборГрузополучателя(Команда)
	
	ТаблицаПолучателейВыбор(Элементы.ТаблицаПолучателей);
	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьсяНазад(Команда)
	
	УправлениеВидимостью(Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовкаНаСервере()
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ДоступностьПолейНаСервере();	
	СформироватьСпискиВыбораНаСервере();
	ФормированиеПредставленийНаСервере();
	
	// Заполним начальное значение всех полей записи во внутреннем формате.
	ИмяРегистра = РегламентированнаяОтчетностьАЛКО.ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормы);
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		Запись.ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(Запись.Документ, ИндексСтраницыЗаписи);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Документ, "Организация");
		Запись.Организация = ЗначенияРеквизитов.Организация;
		
		// Начальные данные в этих случаях всегда пустые.
		НачальноеЗначениеСтруктураДанных = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
		НачальноеЗначение = ЗначениеВСтрокуВнутр(НачальноеЗначениеСтруктураДанных);
		
	Иначе
		НачальноеЗначение = РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
															Запись, ИмяРегистра, НачальноеЗначениеСтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДоступностьПолейНаСервере()

	// Доступность полей формы в зависимости от флажка Авторасчет в отчете-владельце.
	// Для Приложения 5 нет авторасчета.
	
	Возврат;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ИмяФормыОбъекта)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОбъектОтчетаАЛКО(ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции


&НаСервере
Процедура ОбработкаМодифицированности(НачальноеЗначениеПолей, СтруктураМодифицированности)
	
	МодифицированностьКлючевыхПолей = Ложь;
	Для Каждого ЭлСтруктуры Из СтруктураМодифицированности Цикл
					
		Если ЭлСтруктуры.Значение Тогда
		    МодифицированностьКлючевыхПолей = Истина;
			Прервать;			
		КонецЕсли; 
	
	КонецЦикла;
			
	Если НЕ МодифицированностьКлючевыхПолей Тогда
		
		// Принудительно записываем начальные данные, включая всю
		// вспомогательную информацию.
		ЗаполнитьЗначенияСвойств(Запись, НачальноеЗначениеПолей);
		
	Иначе
		
		Если ЗначениеЗаполнено(ОчищаемыйКонтрагент) Тогда		
			Запись[ОчищаемыйКонтрагент] = Неопределено;			
		КонецЕсли;
		ОчищаемыйКонтрагент = "";
		
		ОбъектОтчета(ИмяФормыВладельца).ОбработкаЗаписи(ИмяРегистра, Запись, , ДатаПериодаОтчета);		
		
	КонецЕсли; 
	
	ФормированиеПредставленийНаСервере();
	
	Модифицированность = МодифицированностьКлючевыхПолей;
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПослеИзменения()
	
	СтруктураМодифицированности = "";
	РегламентированнаяОтчетностьАЛКО.ЗаписьИзменилась(Запись, НачальноеЗначениеСтруктураДанных, 
														Ложь, СтруктураМодифицированности);
	ОбработкаМодифицированности(НачальноеЗначениеСтруктураДанных, СтруктураМодифицированности);
	
	ФормированиеЗаголовковСвернутогоОтображения();
	
КонецПроцедуры


&НаСервере
Процедура ФормированиеЗаголовковСвернутогоОтображения()
	
	// ГруппаПроизводительИмпортер.
	Элементы.ГрузоотправительПредставление.Видимость = ЗначениеЗаполнено(Запись.Отправитель);
	
	// Обработка признака ФизЛицо.
	Элементы.ГруппаФИООтправителя.Видимость = Запись.ОтправительФизЛицо;
		
	Если ЗначениеЗаполнено(Запись.П000010000303) 
		или ЗначениеЗаполнено(Запись.П000010000304)
		или ЗначениеЗаполнено(Запись.П000010000305)
		Тогда
	    Элементы.ГруппаОтправителя.ЗаголовокСвернутогоОтображения = "Отправитель: " + 
			?(ЗначениеЗаполнено(Запись.П000010000303),Запись.П000010000303, "наименование не заполнено") 
			+ ?(ЗначениеЗаполнено(Запись.П000010000304),", ИНН " + Запись.П000010000304, ", ИНН не заполнено")
			+ ?(ЗначениеЗаполнено(Запись.П000010000305),", КПП " + Запись.П000010000305, 
											?(СтрДлина(СокрЛП(Запись.П000010000304)) = 10,", КПП не заполнено", "") );
	Иначе	
	    Элементы.ГруппаОтправителя.ЗаголовокСвернутогоОтображения = 
							Элементы.ГруппаОтправителя.Заголовок + " не заполнены!";							
	КонецЕсли;
	
	// Доступ к КПП только если введен 10 значный ИНН.
	Если СтрДлина(СокрЛП(Запись.П000010000304)) = 10 И (НЕ Запись.ОтправительФизЛицо) Тогда
	    Элементы.П000010000305.ТолькоПросмотр = Ложь;
		Элементы.П000010000305.ПропускатьПриВводе = Ложь;
	Иначе
		
	    Элементы.П000010000305.ТолькоПросмотр = Истина;
		Элементы.П000010000305.ПропускатьПриВводе = Истина;
		Если НЕ СокрЛП(Запись.П000010000305) = "" Тогда
		    Запись.П000010000305 = "";
			Модифицированность = Истина;		
		КонецЕсли; 
		
	КонецЕсли; 
			
	// ГруппаПолучателя.
	Элементы.ГрузополучательПолучательПредставление.Видимость = ЗначениеЗаполнено(Запись.Получатель);
	
	Если ЗначениеЗаполнено(Запись.П000010000311) 
		или ЗначениеЗаполнено(Запись.П000010000312)
		или ЗначениеЗаполнено(Запись.П000010000310)
		Тогда
		
	    Элементы.ГруппаПолучателя.ЗаголовокСвернутогоОтображения = "Получатель: " + 
			?(ЗначениеЗаполнено(Запись.П000010000310),Запись.П000010000310, "наименование не заполнено") 
			+ ?(ЗначениеЗаполнено(Запись.П000010000311),", ИНН " + Запись.П000010000311, ", ИНН не заполнено")
			+ ?(ЗначениеЗаполнено(Запись.П000010000312),", КПП " + Запись.П000010000312, 
											?(СтрДлина(СокрЛП(Запись.П000010000311)) = 10,", КПП не заполнено", "") );			
	Иначе	
	    Элементы.ГруппаПолучателя.ЗаголовокСвернутогоОтображения = 
							Элементы.ГруппаПолучателя.Заголовок + " не заполнены!";							
	КонецЕсли;
						
	// Доступ к КПП только если введен 10 значный ИНН.
	Если СтрДлина(СокрЛП(Запись.П000010000311)) = 10 И Запись.ПолучательРезидентРФ Тогда
		
	    Элементы.П000010000312.ТолькоПросмотр = Ложь;
		Элементы.П000010000312.ПропускатьПриВводе = Ложь;
		
	Иначе
		
	    Элементы.П000010000312.ТолькоПросмотр = Истина;
		Элементы.П000010000312.ПропускатьПриВводе = Истина;
		Если НЕ СокрЛП(Запись.П000010000312) = "" Тогда
		    Запись.П000010000312 = "";
			Модифицированность = Истина;		
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Процедура ФормированиеПредставленийНаСервере(
				ВидПеревозки = Неопределено, КодВидаПеревозки = Неопределено,
				ВидПродукции = Неопределено, КодВидаПродукции = Неопределено, 
				АдресПолучателя = Неопределено, АдресОтправителя = Неопределено)
				
	// Вид перевозки.
	Если ВидПеревозки = Неопределено Тогда
	    ВидПеревозки = Запись.ВидПеревозки;	
	КонецЕсли;
	
	Если КодВидаПеревозки = Неопределено Тогда
	    КодВидаПеревозки = Запись.П000010000301;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодВидаПеревозки) Тогда
	    ПредставлениеВидаПеревозки = "Код " + КодВидаПеревозки + ", " + ВидПеревозки;
	Иначе	
	    ПредставлениеВидаПеревозки = "Заполнить";
	КонецЕсли; 
	
	Если ПредставлениеВидаПеревозки = "Заполнить" Тогда		
		Элементы.ПредставлениеВидаПеревозки.ЦветТекста = ЦветСтиляНезаполненныйРеквизит;
	Иначе
		Элементы.ПредставлениеВидаПеревозки.ЦветТекста = ЦветСтиляЦветГиперссылкиБРО;
	КонецЕсли;
	
	// Вид продукции.
	Если ВидПродукции = Неопределено Тогда
	    ВидПродукции = Запись.ВидПродукции;	
	КонецЕсли;
	
	Если КодВидаПродукции = Неопределено Тогда
	    КодВидаПродукции = Запись.П000010000302;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодВидаПродукции) Тогда
	    ПредставлениеПродукции = "Код " + КодВидаПродукции + ", " + ВидПродукции;
	Иначе	
	    ПредставлениеПродукции = "Заполнить";
	КонецЕсли; 
	
	Если ПредставлениеПродукции = "Заполнить" Тогда		
		Элементы.Представление.ЦветТекста = ЦветСтиляНезаполненныйРеквизит;
	Иначе
		Элементы.Представление.ЦветТекста = ЦветСтиляЦветГиперссылкиБРО;
	КонецЕсли;
	
	
	// Адреса.
	Если АдресОтправителя = Неопределено Тогда
	    АдресОтправителя = Запись.П000010000306;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(АдресОтправителя) Тогда
	    ПредставлениеАдресаОтправителя = АдресОтправителя;
	Иначе	
	    ПредставлениеАдресаОтправителя = "Заполнить";
	КонецЕсли;
	
	Если ПредставлениеАдресаОтправителя = "Заполнить" Тогда		
		Элементы.ПредставлениеАдресаОтправителя.ЦветТекста = ЦветСтиляНезаполненныйРеквизит;
	Иначе
		Элементы.ПредставлениеАдресаОтправителя.ЦветТекста = ЦветСтиляЦветГиперссылкиБРО;
	КонецЕсли;
	
	
	Если АдресПолучателя = Неопределено Тогда
	    АдресПолучателя = Запись.П000010000313;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(АдресПолучателя) Тогда
	    ПредставлениеАдресаПолучателя = АдресПолучателя;
	Иначе	
	    ПредставлениеАдресаПолучателя = "Заполнить";
	КонецЕсли;
	
	Если ПредставлениеАдресаПолучателя = "Заполнить" Тогда		
		Элементы.ПредставлениеАдресаПолучателя.ЦветТекста = ЦветСтиляНезаполненныйРеквизит;
	Иначе
		Элементы.ПредставлениеАдресаПолучателя.ЦветТекста = ЦветСтиляЦветГиперссылкиБРО;
	КонецЕсли;
	
	ФормированиеЗаголовковСвернутогоОтображения();
		
КонецПроцедуры


&НаКлиенте
Процедура ВводАдресаНаКлиенте(ИмяПоля)
	
	СтандартнаяОбработка = Ложь;
		
	ЗаголовокФормыВвода = "Ввод адреса";
	ВидКонтактнойИнформации = УправляемаяФормаВладелец.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформации.ЛюбойАдрес;
		
	Оповещение = Новый ОписаниеОповещения("ВводАдресаЗавершениеНаКлиенте", ЭтаФорма, ИмяПоля);
	
	РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВводаАдресаКонтрагента(
					Запись[ИмяПоля + "XML"], ЗаголовокФормыВвода, Оповещение, ВидКонтактнойИнформации);
		
КонецПроцедуры

&НаКлиенте
Процедура ВводАдресаЗавершениеНаКлиенте(Результат, ИмяПоля) Экспорт

	Если НЕ (ТипЗнч(Результат) = Тип("Структура")) Тогда
		Возврат;	
	КонецЕсли;
	
	РегламентированнаяОтчетностьАЛКОКлиент.ВводАдресаКонтрагентаЗавершениеНаКлиенте(Результат, 
				Запись[ИмяПоля], Запись[ИмяПоля + "XML"], Модифицированность);
		
	ОбработкаПослеИзменения();
		
КонецПроцедуры 


&НаКлиенте
Процедура ВыборВидаПродукции(ИмяКод, ИмяНаименование, ЗаголовокФормы, 
		НадписьПоляЗначения, НадписьПоляКод, ДлинаПоляКода, ДлинаПоляЗначения)
	
	// Из списка.
	ИсходноеЗначениеКода = СокрЛП(Запись[ИмяКод]);
	ИсходноеЗначениеНазвания = СокрЛП(Запись[ИмяНаименование]);
	КолонкаПоиска = "Код";
	ИмяКолонкиКод = ИмяКод;
		
	МногострочныйРежимЗначения = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("ИмяКод", ИмяКод);
	ПараметрыПроцедуры.Вставить("ИмяНаименование", ИмяНаименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
		
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ПараметрыПриВключенномВыбореИзСписка", Новый Структура);
	ПараметрыВыборИзСписка = СтруктураПараметров.ПараметрыПриВключенномВыбореИзСписка;
	// Из списка.
	ПараметрыВыборИзСписка.Вставить("СвойстваПоказателей", 	СвойстваПоказателей);
	ПараметрыВыборИзСписка.Вставить("ИмяКолонкиКод", 		ИмяКолонкиКод);	
	ПараметрыВыборИзСписка.Вставить("КолонкаПоиска", 		КолонкаПоиска);
	ПараметрыВыборИзСписка.Вставить("ИсходноеЗначение", 	ИсходноеЗначениеКода);
	
	СтруктураПараметров.Вставить("ПараметрыПриОтключенномВыбореИзСписка", Новый Структура);
	ПараметрыВыборНеИзСписка = СтруктураПараметров.ПараметрыПриОтключенномВыбореИзСписка;
	// Не из списка.
	ПараметрыВыборНеИзСписка.Вставить("ЗаголовокФормы", 			ЗаголовокФормы);
	ПараметрыВыборНеИзСписка.Вставить("ИсходноеЗначениеКода", 		ИсходноеЗначениеКода);	
	ПараметрыВыборНеИзСписка.Вставить("ИсходноеЗначениеПоКоду",		ИсходноеЗначениеНазвания);
	ПараметрыВыборНеИзСписка.Вставить("НадписьПоляЗначения", 		НадписьПоляЗначения);
	ПараметрыВыборНеИзСписка.Вставить("НадписьПоляКод", 			НадписьПоляКод);
	ПараметрыВыборНеИзСписка.Вставить("МногострочныйРежимЗначения", МногострочныйРежимЗначения);
	ПараметрыВыборНеИзСписка.Вставить("ДлинаПоляКода", 				ДлинаПоляКода);
	ПараметрыВыборНеИзСписка.Вставить("ДлинаПоляЗначения", 			ДлинаПоляЗначения);
	ПараметрыВыборНеИзСписка.Вставить("УникальностьФормы", 			УникальностьФормы);

	
	РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВыбораЗначенийАЛКО(
			ЭтаФорма, ФлажокОтклАвтоВыборКодов, СтруктураПараметров, ОписаниеОповещения);
		
КонецПроцедуры


&НаКлиенте
Процедура ВыборЗавершение(РезультатВыбора, ПараметрыПроцедуры) Экспорт
	
	ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;
	
	Если РезультатВыбора = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	// Поскольку всегда "выбираем" код.	
	ИмяКолонкиКод = ПараметрыПроцедуры.ИмяКод;
	ИмяКолонкиНаименования = ПараметрыПроцедуры.ИмяНаименование;
	
	ИсходноеЗначение 				= СокрЛП(Запись[ИмяКолонкиКод]);
	Запись[ИмяКолонкиКод] 	= СокрЛП(РезультатВыбора.Код);
	
	КодИзменился = (ИсходноеЗначение <> СокрЛП(Запись[ИмяКолонкиКод]));
		
	ИсходноеЗначениеНаименования 			= СокрЛП(Строка(Запись[ИмяКолонкиНаименования]));
	Запись[ИмяКолонкиНаименования] = ?(СокрЛП(РезультатВыбора.Код) = "",
													"", СокрЛП(РезультатВыбора.Название));
	
	НаименованиеИзменилось = (ИсходноеЗначениеНаименования <> СокрЛП(Запись[ИмяКолонкиНаименования]));	
	
	Модифицированность = Модифицированность или КодИзменился или НаименованиеИзменилось;
	
	ОбработкаПослеИзменения(); 
	
КонецПроцедуры


&НаСервере
Процедура СформироватьСпискиВыбораНаСервере()
	
	КоллекцияСписковВыбора = РегламентированнаяОтчетностьАЛКО.СчитатьКоллекциюСписковВыбораАЛКО(
														ДатаПериодаОтчета, ИмяФормыВладельца, ОбъектЭтогоОтчета);
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000301", 2, , "Выбор вида перевозки", КоллекцияСписковВыбора["ВидыПеревозок"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидПеревозки", 2, , "Выбор вида перевозки", КоллекцияСписковВыбора["ВидыПеревозок"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000302", 5, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидПродукции", 5, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	
КонецПроцедуры


&НаСервере
Процедура УправлениеВидимостью(ПоказатьВыборОтправителей = Ложь, ПоказатьВыборПолучателей = Ложь)
	
	Если ПоказатьВыборОтправителей Тогда
		
		НужноИсправитьВыводТаблицы = Истина;
		
		ПроверялиНеобходимостьПоказаПредупреждения = Ложь;
				
		Элементы.ОК.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.ГруппаЗапись.Видимость = Ложь;
		Элементы.ГруппаВыборПолучателя.Видимость = Ложь;
		
		Элементы.ГруппаВыборОтправителя.Видимость = Истина;
		
		Если НЕ Запись.Отправитель = Неопределено Тогда
		
			Элементы.ТаблицаОтправителей.ТекущаяСтрока = Запись.Отправитель;
		
		КонецЕсли; 
		
	ИначеЕсли ПоказатьВыборПолучателей Тогда
		
		НужноИсправитьВыводТаблицы = Истина;
		
		ПроверялиНеобходимостьПоказаПредупреждения = Ложь;
				
		Элементы.ОК.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.ГруппаЗапись.Видимость = Ложь;
		Элементы.ГруппаВыборОтправителя.Видимость = Ложь;
		
		Элементы.ГруппаВыборПолучателя.Видимость = Истина;
		
		Если НЕ Запись.Получатель = Неопределено Тогда
		
			Элементы.ТаблицаПолучателей.ТекущаяСтрока = Запись.Получатель;
		
		КонецЕсли; 
				
	Иначе
				
		Элементы.ГруппаИнфоВыбораОтправителя.Видимость = Ложь;
		Элементы.ГруппаИнфоВыбораПолучателя.Видимость = Ложь;
		
		Элементы.ГруппаВыборПолучателя.Видимость = Ложь;
		Элементы.ГруппаВыборОтправителя.Видимость = Ложь;
		
		Элементы.ГруппаЗапись.Видимость = Истина;	
		Элементы.Отмена.Видимость = Истина;
		Элементы.ОК.Видимость = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры


&НаСервере
Функция ПолучитьИмяФормыОбъектаЭлементаСсылки(ИмяЭлементаСсылки, ЗначениеСсылка = Неопределено)
	
	ЗначениеСсылка = РегламентированнаяОтчетностьАЛКО.ПолучитьЗначениеЭлементаФормы(ЭтаФорма, ИмяЭлементаСсылки);	
	ИмяФормыОбъекта = РегламентированнаяОтчетностьАЛКО.ПолучитьИмяФормыОбъекта(ЗначениеСсылка);
	
	Возврат ИмяФормыОбъекта;
	
КонецФункции


&НаКлиенте
Процедура НажатиеГиперссылки(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ИмяЭлементаСсылки = Элемент.Имя;
	
	ЗначениеСсылка = Неопределено;
	ИмяФормыОбъекта = ПолучитьИмяФормыОбъектаЭлементаСсылки(ИмяЭлементаСсылки, ЗначениеСсылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НажатиеГиперссылкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗначениеСсылка);
	ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, 
			ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура НажатиеГиперссылкиЗавершение(Результат, ДопПараметры) Экспорт
	
	ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;
	
	Если ПоказыватьПредупреждениеПослеПереходаПоссылке = Неопределено Тогда
	    ПоказыватьПредупреждениеПослеПереходаПоссылке = Истина;	
	КонецЕсли;
	
	Если ПоказыватьПредупреждениеПослеПереходаПоссылке Тогда
	    // Открываем форму предупреждения.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Внимание!';
													|en = 'Внимание!'"));
		ПараметрыФормы.Вставить("ТекстПредупреждения", НСтр("ru='"
				+ "Если Вы внесли изменения в элемент справочника или документ,
				|для внесения изменений в строки отчета, заполняемых на основании
				|измененной информации, необходимо вручную перезаполнить такие строки.'"));
		
				
		ПараметрыФормы.Вставить("ТекстЗаголовкаФлажка", НСтр("ru = 'Больше не показывать в этом сеансе редактирования';
															|en = 'Больше не показывать в этом сеансе редактирования'"));
		ПараметрыФормы.Вставить("УникальностьФормы",       		УникальностьФормы);
		
		ИмяФормыПредупреждения = "ОбщаяФорма.АЛКОФормаПредупрежденияСФлажком";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСостояниеФлажкаФормыПредупреждения", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыПредупреждения, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьСостояниеФлажкаФормыПредупреждения(Результат, ДопПараметры) Экспорт
	
	Если (НЕ Результат = Неопределено) и Результат Тогда
		// Оповещаем форму отчета владельца о том, что больше показывать
		// предупреждение не надо.
		ПоказыватьПредупреждениеПослеПереходаПоссылке = Ложь;
		Оповестить("ПоказыватьПредупреждениеПослеПереходаПоСсылке", , УникальностьФормы);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаОтправителейВыборНаСервере(НаименованиеПолное, ИНН, КПП)
	
	Если НЕ (Запись.П000010000304 = СокрЛП(ИНН)
		И Запись.П000010000305 = СокрЛП(КПП)
		И Запись.П000010000303 = СокрЛП(НаименованиеПолное)) Тогда
	
		Запись.П000010000306 = "";
		Запись.П000010000306XML = "";
		
		Запись.ФизЛицоУстановленПользователем = Ложь;
				
	КонецЕсли;
	
	Запись.П000010000304 = СокрЛП(ИНН);
	Запись.П000010000305 = СокрЛП(КПП);
	Запись.П000010000303 = СокрЛП(НаименованиеПолное);
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ОчищаемыйКонтрагент = "Отправитель";
	
	ОбработкаПослеИзменения();
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаПолучателейВыборНаСервере(НаименованиеПолное, ИНН, КПП)
	
	Если НЕ (Запись.П000010000311 = СокрЛП(ИНН)
		И Запись.П000010000312 = СокрЛП(КПП)
		И Запись.П000010000310 = СокрЛП(НаименованиеПолное)) Тогда
	
		Запись.П000010000313 = "";
		Запись.П000010000313XML = "";
		
		Запись.РезидентУстановленПользователем = Ложь;
				
	КонецЕсли;
	
	Запись.П000010000311 = СокрЛП(ИНН);
	Запись.П000010000312 = СокрЛП(КПП);	
	Запись.П000010000310 = СокрЛП(НаименованиеПолное);
				
	УправлениеВидимостью(Ложь, Ложь);
	
	ОчищаемыйКонтрагент = "Получатель";
	
	ОбработкаПослеИзменения();
	
КонецПроцедуры


#КонецОбласти
