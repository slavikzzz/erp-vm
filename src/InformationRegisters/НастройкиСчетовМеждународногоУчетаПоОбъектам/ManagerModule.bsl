#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.13.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc287a94-cb93-4bfa-ae87-cf3580744665");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = СтрШаблон(
		НСтр("ru = 'Переносит настройки счетов международного учета объекта учета ""Резервы по страховым взносам""
			|с объекта настройки ""%1"" на объект настройки ""%2"".';
			|en = 'Transfers the settings of financial accounting accounts of the ""Insurance contribution provisions"" accounting object
			|from the ""%1"" configuration object to the ""%2"" configuration object.'"),
		"Перечисления.ТипыНалогов.ФССНС", "Справочники.Резервы.РезервЕжегодныхОтпусков");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСчетовПоОбъектам.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
	|ГДЕ
	|	ЛОЖЬ
	//++ Локализация
	|	ИЛИ
	|	(НастройкиСчетовПоОбъектам.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.РезервыПоСтраховымВзносам)
	|	И НастройкиСчетовПоОбъектам.ОбъектНастройки ССЫЛКА Перечисление.ТипыНалогов)
	//-- Локализация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	НастройкиСчетов = Результат.Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, НастройкиСчетов, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("ОбъектУчета", Выборка.ОбъектУчета);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектУчета.Установить(Выборка.ОбъектУчета);
			НаборЗаписей.Прочитать();
			
			ЗаписиКУдалению = Новый Массив;
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				//++ Локализация
				Если ЗаписьРегистра.ОбъектНастройки = Перечисления.ТипыНалогов.ФССНС Тогда
					ЗаписьРегистра.ОбъектНастройки = Справочники.Резервы.РезервЕжегодныхОтпусков;
				ИначеЕсли ТипЗнч(ЗаписьРегистра.ОбъектНастройки) = Тип("ПеречислениеСсылка.ТипыНалогов") Тогда
					ЗаписиКУдалению.Добавить(ЗаписьРегистра);
				КонецЕсли;
				//-- Локализация
			КонецЦикла;
			
			Для Каждого ЗаписьРегистра Из ЗаписиКУдалению Цикл
				НаборЗаписей.Удалить(ЗаписьРегистра);
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по причине: %2';
							|en = 'Cannot save the data to the %1 register. Reason: %2'");
			
			ТекстСообщения = 	СтрШаблон(
				Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли