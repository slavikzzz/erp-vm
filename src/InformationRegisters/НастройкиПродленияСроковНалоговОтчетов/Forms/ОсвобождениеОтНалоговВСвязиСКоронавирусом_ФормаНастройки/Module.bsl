
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("МассивОрганизаций") И ТипЗнч(Параметры.МассивОрганизаций) = Тип("Массив")
		И ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		СписокОрганизаций.ЗагрузитьЗначения(Параметры.МассивОрганизаций);
	Иначе
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено!';
								|en = 'Application cannot open this form explicitly.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	НастройкаПоОрганизации = СписокОрганизаций.Количество() = 1;
	Если НастройкаПоОрганизации Тогда
		НастраиваемаяОрганизация = СписокОрганизаций[0].Значение;
	КонецЕсли;
	
	ЗаполнитьОрганизацииВТаблицеНастроек();
	
	ОпределитьСтатусИЗначениеНастроек();
	
	УстановитьВидимостьЭлементов();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ НастройкаПоОрганизации
		И ИмяСобытия = "ОсвобождениеОтНалоговВСвязиСКоронавирусом_Организация_ИзменениеНастроек"
		И ТипЗнч(Параметр) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Параметр) Тогда
		
		// Форма списка приняла, что в форме настройки по организации изменились данные
		ОпределитьСтатусИЗначениеНастроек(Параметр);
		
	ИначеЕсли НастройкаПоОрганизации
		И ИмяСобытия = "ОсвобождениеОтНалоговВСвязиСКоронавирусом_Список_ИзменениеНастроек"
		И ТипЗнч(Параметр) = Тип("СписокЗначений") Тогда
		
		// Форма настройки по организации приняла, что в форме списка изменились данные
		Если Параметр.НайтиПоЗначению(НастраиваемаяОрганизация) <> Неопределено Тогда
			ОпределитьСтатусИЗначениеНастроек();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность И Не ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ПередЗакрытием_ПрименитьНастройки", ЭтаФорма);
		
		ПоказатьВопрос(ОписаниеЗакрытия, "Настройки были изменены. Применить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	
	ПрименитьНастройкиНаКлиенте();
	
	Если НастройкаПоОрганизации Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	ОпределитьСтатусИЗначениеНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверьтеДеятельностьОтнесенаКПострадавшимОтКоронавируса(Команда)
	
	Если ЗначениеЗаполнено(НастраиваемаяОрганизация) Тогда
		ОсновнойКодОКВЭД = ОсновнойКодОКВЭД(НастраиваемаяОрганизация);
	Иначе
		ОсновнойКодОКВЭД = "";
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОткрытьПроверкуДеятельностиНаКоронавирус(ОсновнойКодОКВЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверьтеРеестрМСП(Команда)
	
	Если ЗначениеЗаполнено(НастраиваемаяОрганизация) Тогда
		ИНН = ОрганизацияИНН(НастраиваемаяОрганизация);
	Иначе
		ИНН = "";
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.ОткрытьПроверкуРеестрМСП(ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Для каждого СтрокаНастройки Из ТаблицаНастроек Цикл
		СтрокаНастройки.ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Истина;
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Исключить(Команда)
	
	Для каждого СтрокаНастройки Из ТаблицаНастроек Цикл
		СтрокаНастройки.ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Ложь;
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	Если Поле.Имя = "ТаблицаНастроекНастроеноСсылкаНастроить" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		мОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Организация);
		
		ПараметрыФормы = Новый Структура("МассивОрганизаций", мОрганизации);
		
		ОткрытьФорму(ЭтаФорма.ИмяФормы, ПараметрыФормы, ЭтаФорма, ТекущиеДанные.Организация);
		
	ИначеЕсли Поле.Имя = "ТаблицаНастроекОрганизация" Тогда
		
		ПоказатьЗначение(,ТекущиеДанные.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьОтнесенаКПострадавшимОтКоронавирусаПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаОписанияОсвобожденияОтНалогов

&НаСервереБезКонтекста
Процедура НастроитьОсвобождениеНалогов(ЗаголовокГруппы, ПолеСоставМер, КнопкаРеестрМСП = Неопределено, Организация = Неопределено)
	
	ЗаголовокГруппы.Заголовок = "Федеральный закон № 172-ФЗ от 08.06.2020";
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		
		Если ЭтоЮрЛицо Тогда
			ШаблонСоставМер     = НСтр("ru = 'Малые и средние предприятия, занятые в сферах деятельности, наиболее пострадавших 
			                            |от коронавирусной инфекции, освобождены от уплаты %1 за 2 квартал 2020 года.
			                            |Воспользоваться освобождением могут предприятия, включенные в Реестр МСП';
			                            |en = 'Small and medium-sized enterprises operating in the industries most affected 
			                            |by coronavirus infection are exempt from payment of %1 for the 2nd quarter of 2020.
			                            |Enterprises included in the Register of SMEs can use the exemption'");
			Ссылка              = "https://its.1c.ru/bmk/bp30/tax_exemption_org";
			ОбязателенРеестрМСП = Истина;
		Иначе
			ШаблонСоставМер     = НСтр("ru = 'Индивидуальные предприниматели, занятые в сферах деятельности, наиболее пострадавших 
			                            |от коронавирусной инфекции, освобождены от уплаты %1 за 2 квартал 2020 года.
			                            |Страховой взнос в ПФР в фиксированном размере за 2020 год снижен для них до 20 318 руб.';
			                            |en = 'Individual entrepreneurs operating in the industries most affected 
			                            |by coronavirus infection are exempt from payment of %1 for the 2nd quarter of 2020.
			                            |The fixed insurance premium to the Pension Fund for 2020 is reduced to 20,318 rubles for them.'");
			Ссылка              = "https://its.1c.ru/bmk/bp30/tax_exemption_ip";
			ОбязателенРеестрМСП = Ложь;
		КонецЕсли;
		
		СсылкаHTML = СтрШаблон(НСтр("ru = '<a href = ""%1"">налогов</a>';
									|en = '<a href = ""%1"">taxes</a>'"), СсылкаUTM(Ссылка));
	
		ПолеСоставМер.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(ШаблонСоставМер, СсылкаHTML));
		
		КнопкаРеестрМСП.Видимость = ОбязателенРеестрМСП;
		
	Иначе
		
		ШаблонСоставМер     = НСтр("ru = 'Малые и средние предприятия, индивидуальные предприниматели, занятые в сферах деятельности,
		                         |наиболее пострадавших от коронавирусной инфекции, освобождены от уплаты %1 за 2 квартал 2020 года.';
		                         |en = 'Small and medium-sized enterprises, individual entrepreneurs operating in the industries most affected 
		                         |by coronavirus infection are exempt from payment of %1 for the 2nd quarter of 2020.'");
		Ссылка              = "https://its.1c.ru/bmk/bp30/tax_exemption_org";
		
		СсылкаHTML = СтрШаблон(НСтр("ru = '<a href = ""%1"">налогов</a>';
									|en = '<a href = ""%1"">taxes</a>'"), СсылкаUTM(Ссылка));
	
		ПолеСоставМер.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(СтрШаблон(ШаблонСоставМер, СсылкаHTML));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаUTM(URL)
	
	ПараметрыURL = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыURL, ОбщегоНазначенияБПКлиентСервер.ИТС_ПараметрыUTM());
	Возврат ОбщегоНазначенияБПКлиентСервер.ДополнитьURLПараметрами(URL, ПараметрыURL);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновнойКодОКВЭД(Знач Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОсновнойКодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД2");
	КонецЕсли;
	
	Возврат ОсновнойКодОКВЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияИНН(Знач Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.Страница_НастройкаПоОрганизации.Видимость       = НастройкаПоОрганизации;
	Элементы.Страница_НастройкаПоСпискуОрганизаций.Видимость = НЕ НастройкаПоОрганизации;
	Элементы.ПрименитьНастройки.Видимость                    = НастройкаПоОрганизации;
	
	Если НастройкаПоОрганизации Тогда
		НастроитьОсвобождениеНалогов(
			Элементы.ОсвобождениеОтУплатыНалогов,
			Элементы.ДекорацияОсвобождениеОтУплатыНалогов,
			Элементы.ПроверьтеРеестрМСП,
			НастраиваемаяОрганизация);
	Иначе
		НастроитьОсвобождениеНалогов(
			Элементы.ОсвобождениеОтУплатыНалогов_Список,
			Элементы.ДекорацияОсвобождениеОтУплатыНалогов_Список);
	КонецЕсли;
	
	Элементы.ТаблицаНастроекНастроеноСсылкаНастроить.Ширина = СтрДлина(НаименованиеСсылкиНастроить()) + 1;
	
	Элементы.ДекорацияПредставлениеСтатуса.Ширина = СтрДлина(ТекстСтатусаНастройки(Ложь)) + 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	// Ссылка "Подробнее" в таблице настроек
	
	Элемент  = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента                = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле           = Новый ПолеКомпоновкиДанных("ТаблицаНастроекНастроеноСсылкаНастроить");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНастроек.НастроеноСсылкаНастроить");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"                  , НаименованиеСсылкиНастроить());
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"             , ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	Элемент.Оформление.УстановитьЗначениеПараметра("ВертикальноеПоложение"  , ВертикальноеПоложение.Центр);
	
	// Оформление, когда настройка не существует
	
	УстановитьУсловноеОформление_ПоЗначениюНастроено(Ложь);
	
	// Оформление, когда настройка существует
	
	УстановитьУсловноеОформление_ПоЗначениюНастроено(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление_ПоЗначениюНастроено(НастройкиПроизведены)
	
	// Текст статуса настройки
	
	Элемент  = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента                = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле           = Новый ПолеКомпоновкиДанных("ТаблицаНастроекНастроеноСтатусНастройки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаНастроек.Настроено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НастройкиПроизведены;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"                  ,
		ТекстСтатусаНастройки(НастройкиПроизведены));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"             , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	
КонецПроцедуры


// Обработка ответа пользователя перед закрытием
&НаКлиенте
Процедура ПередЗакрытием_ПрименитьНастройки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПрименитьНастройкиНаКлиенте();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизацииВТаблицеНастроек()
	
	ТаблицаНастроек.Очистить();
	
	Для каждого ЭлементСписка Из СписокОрганизаций Цикл
		СтрокаНастроек = ТаблицаНастроек.Добавить();
		СтрокаНастроек.Организация = ЭлементСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСтатусИЗначениеНастроек(ОтборОрганизаций = Неопределено)
	
	Если ОтборОрганизаций = Неопределено Тогда
		ОтборОрганизаций = СписокОрганизаций.ВыгрузитьЗначения();
	КонецЕсли;
	
	СоответствияЗначений = НалоговыйУчет.ЗначенияНастроекПоАнтикризиснымМерамПоКоронавирусу(ОтборОрганизаций);
	
	Для каждого СтрокаНастройки Из ТаблицаНастроек Цикл
		
		// Если в соответствии не будет найдено значение, значит организация из таблицы настроек отсутствует в отборе,
		// строку не изменяем.
		СтруктураДанных = СоответствияЗначений.Получить(СтрокаНастройки.Организация);
		
		Если СтруктураДанных <> Неопределено Тогда
		
			СтрокаНастройки.Настроено = СтруктураДанных.НастройкаСуществует;
			СтрокаНастройки.НастроеноКартинкаЧисло = НомерКартинкиПоЗначению(СтрокаНастройки.Настроено);
			СтрокаНастройки.ДеятельностьОтнесенаКПострадавшимОтКоронавируса =
				СтруктураДанных.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
			
			Если НастройкаПоОрганизации Тогда
				ПриИзмененииСтатусаНастройкаСуществует(СтрокаНастройки.Настроено, Элементы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСтатусаНастройкаСуществует(НастройкаСуществует, Элементы)
	
	Если НастройкаСуществует = Истина Тогда
		Элементы.ДекорацияСтатуса.Картинка = БиблиотекаКартинок.ЗеленаяГалкаСредняя;
	Иначе
		Элементы.ДекорацияСтатуса.Картинка = БиблиотекаКартинок.ВниманиеКрасный;
	КонецЕсли;
	
	Элементы.ДекорацияПредставлениеСтатуса.Заголовок = ТекстСтатусаНастройки(НастройкаСуществует);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрименитьНастройкиНаКлиенте()
	
	ПрименитьНастройкиНаСервере();
	
	ЭтаФорма.Модифицированность = Ложь;
	
	Если НЕ НастройкаПоОрганизации Тогда
		Оповестить("ОсвобождениеОтНалоговВСвязиСКоронавирусом_Список_ИзменениеНастроек", СписокОрганизаций);
	Иначе
		Оповестить("ОсвобождениеОтНалоговВСвязиСКоронавирусом_Организация_ИзменениеНастроек", НастраиваемаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиНаСервере()
	
	ЗаписатьИзмененияНастроек();
	
	Если НастройкаПоОрганизации Тогда
		ПриИзмененииСтатусаНастройкаСуществует(Истина, Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНастроек()
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПродленияСроковНалоговОтчетов");
	ЭлементБлокировки.ИсточникДанных = ТаблицаНастроек.Выгрузить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	Блокировка.Заблокировать();
	
	Для каждого СтрокаНастройки Из ТаблицаНастроек Цикл 
	
		менЗаписи = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(менЗаписи, СтрокаНастройки);
		
		менЗаписи.Записать(Истина);
		
		СтрокаНастройки.Настроено = Истина;
		СтрокаНастройки.НастроеноКартинкаЧисло = НомерКартинкиПоЗначению(Истина);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеСсылкиНастроить()
	
	Возврат НСтр("ru = 'Подробнее';
				|en = 'Details'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСтатусаНастройки(НастройкаСуществует)
	
	Если НастройкаСуществует Тогда
		Возврат НСтр("ru = 'Настройка произведена';
					|en = 'Settings have been made'");
	Иначе
		Возврат НСтр("ru = 'Настройка не производилась';
					|en = 'Settings have not been made'");
	КонецЕсли;
	
КонецФункции



&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинкиПоЗначению(Настроено)
	
	Если Настроено = Истина Тогда
		Возврат 1;
	Иначе
		Возврат 3;
	КонецЕсли;
	
КонецФункции

#КонецОбласти