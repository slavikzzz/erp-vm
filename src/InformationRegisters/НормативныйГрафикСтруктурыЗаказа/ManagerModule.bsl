#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗапуститьРасчет() Экспорт

	ИмяЭкспортнойПроцедуры = "РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.Рассчитать";
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	
	Если ОбщегоНазначения.РежимОтладки() ИЛИ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Возврат;
		
	КонецЕсли;
	
	Ключ = "НормативныйГрафикСтруктурыЗаказа";
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Задания.ВГраница() = -1 Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Расчет нормативного графика производства. Управляющий поток';
									|en = 'Target production schedule calculation. Thread of control'");
		
		ПараметрыЗадания = Новый Массив;
		
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		
		ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
		
	КонецЕсли;

КонецПроцедуры

// Выполняется расчет нормативного графика.
// 
// Возвращаемое значение:
//  Булево - Выполняется расчет
Функция ВыполняетсяРасчет() Экспорт
	
	КлючПоиска = Новый Структура("Ключ, Состояние", "НормативныйГрафикСтруктурыЗаказа", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат (Задания.Количество() > 0 И Задания[0].Состояние = СостояниеФоновогоЗадания.Активно);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Управляющий поток
Процедура Рассчитать() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Задания.ЗаказНаПроизводство                               КАК ЗаказНаПроизводство,
		|	ЕСТЬNULL(НормативныйГрафик.Начало, ДАТАВРЕМЯ(1, 1, 1))    КАК ИнтервалМин,
		|	ВЫБОР
		|		КОГДА НормативныйГрафик.Окончание ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		КОГДА НормативныйГрафик.Окончание = НормативныйГрафик.Начало
		|			ТОГДА НормативныйГрафик.Окончание
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НормативныйГрафик.Окончание, СЕКУНДА, 1)
		|	КОНЕЦ                                                     КАК ИнтервалМакс,
		|	НормативныйГрафик.Окончание ЕСТЬ NULL                     КАК ПолныйПересчет,
		|	НЕ &ТекстПоляЗаказПереданКПроизводству                    КАК ОтменаЗаказа,
		|	Задания.Разделитель                                       КАК Разделитель,
		|	ВЫБОР
		|		КОГДА Задания.ЗаказНаПроизводство ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Задания.ЗаказНаПроизводство.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу)
		|	КОНЕЦ                                                     КАК РазмещениеКНачалу
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик КАК Задания
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
		|		ПО Задания.ЗаказНаПроизводство = НормативныйГрафик.ЗаказНаПроизводство
		|			И Задания.КлючПартия = НормативныйГрафик.КлючПартия
		|			И Задания.КлючПартия <> &ПустойКлючСвязи
		|ГДЕ 
		|	ИСТИНА НЕ В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ 
		|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК Т
		|		ГДЕ
		|			Т.ЗаказНаПроизводство = Задания.ЗаказНаПроизводство)
		|	И ИСТИНА НЕ В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ 
		|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Т
		|		ГДЕ
		|			Т.ЗаказНаПроизводство = Задания.ЗаказНаПроизводство)
		|	И ИСТИНА НЕ В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Т
		|		ГДЕ
		|			Т.ЗаказНаПроизводство = Задания.ЗаказНаПроизводство
		|			И Т.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика))
		|ИТОГИ
		|	МИНИМУМ(ИнтервалМин),
		|	МАКСИМУМ(ИнтервалМакс),
		|	МАКСИМУМ(ПолныйПересчет),
		|	МАКСИМУМ(ОтменаЗаказа),
		|	МАКСИМУМ(РазмещениеКНачалу)
		|ПО
		|	Задания.ЗаказНаПроизводство,
		|	Задания.Разделитель");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляЗаказПереданКПроизводству",
		СтруктураЗаказаПроведениеДокументов.ТекстПоляЗаказПереданКПроизводству("Задания.ЗаказНаПроизводство"));
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Задания = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПараметрыРасчета = НовыйПараметрыРасчета();
	
	Пока Задания.Строки.Количество() > 0 Цикл
		
		Для Индекс = -Задания.Строки.Количество()+1 По 0 Цикл
			
			Задание = Задания.Строки[-Индекс];
			
			Если Задание.ОтменаЗаказа Тогда
				
				Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
				Набор.Отбор.ЗаказНаПроизводство.Установить(Задание.ЗаказНаПроизводство);
				УстановитьПривилегированныйРежим(Истина);
				Набор.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
				ОбработатьРезультатРасчета(Задание, НовыйРезультатРасчетаЗаказа());
				
			Иначе
				
				ПараметрыПроцедуры = Новый Структура;
				ПараметрыПроцедуры.Вставить("ЗаказНаПроизводство", Задание.ЗаказНаПроизводство);
				ПараметрыПроцедуры.Вставить("Граница", ?(Задание.ПолныйПересчет, '00010101',
					?(Задание.РазмещениеКНачалу, Задание.ИнтервалМин, Задание.ИнтервалМакс)));
				
				МестоВОчереди = ПолучитьМестоВОчередиРасчета(ПараметрыРасчета);
				
				ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
				ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(НСтр("ru = 'Расчет нормативного графика (%1)';
																				|en = 'Target schedule calculation (%1)'"),
					МестоВОчереди + 1);
				ПараметрыВыполнения.ЗапуститьНеВФоне = НЕ ПараметрыРасчета.РаспараллеливатьРасчет;
				ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено,
					Новый УникальныйИдентификатор);
				ПараметрыВыполнения.ОжидатьЗавершение = 0;
				
				РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(
					"РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.РассчитатьГрафикЗаказа",
					ПараметрыПроцедуры,
					ПараметрыВыполнения);
				
				Если РезультатЗапуска.Статус = "Выполняется" Тогда
					ЭлементОчереди = Новый Структура;
					ЭлементОчереди.Вставить("Идентификатор", РезультатЗапуска.ИдентификаторЗадания);
					ЭлементОчереди.Вставить("АдресРезультата", РезультатЗапуска.АдресРезультата);
					ЭлементОчереди.Вставить("Задание", Задание);
					ПараметрыРасчета.ОчередьРасчета[МестоВОчереди] = ЭлементОчереди;
				Иначе
					Если РезультатЗапуска.Статус = "Выполнено" Тогда
						ОбработатьРезультатРасчета(Задание, РезультатЗапуска.АдресРезультата);
					Иначе
						ОбработатьОшибкуРасчета(ПараметрыРасчета, РезультатЗапуска.ПодробноеПредставлениеОшибки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОжидатьЗавершениеРасчета(ПараметрыРасчета, Истина);
		
		Если Задания.Строки.Количество() = 0 Тогда
			
			// Очистка буфера
			Набор = РегистрыСведений.БуферРасчетаНормативногоГрафика.СоздатьНаборЗаписей();
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			// Продолжение обработки заданий
			Задания = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьГрафикЗаказа(ЗаказНаПроизводство) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ОчиститьПротоколОшибок(ЗаказНаПроизводство);
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(ЗаказНаПроизводство);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗапуститьРасчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапускРасчета

Функция ПолучитьМестоВОчередиРасчета(ПараметрыРасчета)
	
	МестоВОчереди = 0;
	
	Если ПараметрыРасчета.РаспараллеливатьРасчет Тогда
		
		МестоВОчереди = ПараметрыРасчета.ОчередьРасчета.Найти(Неопределено);
		
		Если МестоВОчереди = Неопределено Тогда
			
			ОжидатьЗавершениеРасчета(ПараметрыРасчета, Ложь);
			МестоВОчереди = ПараметрыРасчета.ОчередьРасчета.Найти(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МестоВОчереди;
	
КонецФункции

Функция ОжидатьЗавершениеРасчета(ПараметрыРасчета, ОжидатьЗавершениеРасчетаВсехПотоков)
	
	РасчетЗавершен = Ложь;
	ОчередьРасчета = ПараметрыРасчета.ОчередьРасчета;
	
	СтруктураОтбора = Новый Структура();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Не РасчетЗавершен Цикл
		
		АктивныеЗадания = Новый Массив();
		ЕстьЗавершенныеЗадания = Ложь;
		
		Для Поток = 0 По ОчередьРасчета.ВГраница() Цикл
			
			Если ОчередьРасчета[Поток] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетВыполнен = Истина;
			
			ЭлементОчереди = ОчередьРасчета[Поток]; // Структура
			СтруктураОтбора.Вставить("УникальныйИдентификатор", ЭлементОчереди.Идентификатор);
			СписокЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			
			Если СписокЗаданий.ВГраница() <> -1 Тогда
				
				Если СписокЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
					АктивныеЗадания.Добавить(СписокЗаданий[0].УникальныйИдентификатор);
					Продолжить;
				КонецЕсли;
				
				Если СписокЗаданий[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					
					ОбработатьОшибкуРасчета(
						ПараметрыРасчета,
						ПодробноеПредставлениеОшибки(СписокЗаданий[0].ИнформацияОбОшибке));
					РасчетВыполнен = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если РасчетВыполнен Тогда
				ОбработатьРезультатРасчета(ОчередьРасчета[Поток].Задание, ОчередьРасчета[Поток].АдресРезультата);
			КонецЕсли;
			
			ОчередьРасчета[Поток] = Неопределено;
			ЕстьЗавершенныеЗадания = Истина;
			
		КонецЦикла;
		
		РасчетЗавершен = (ЕстьЗавершенныеЗадания И Не ОжидатьЗавершениеРасчетаВсехПотоков)
			ИЛИ Не ЗначениеЗаполнено(АктивныеЗадания);
		
		Если Не РасчетЗавершен Тогда
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АктивныеЗадания[0]);
			
			Если Задание <> Неопределено Тогда
				Задание.ОжидатьЗавершенияВыполнения(ПараметрыРасчета.ИнтервалПроверкиЗавершенияРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РасчетЗавершен;
	
КонецФункции

Процедура ОбработатьРезультатРасчета(Задание, Результат)
	
	РезультатРасчета = ?(ТипЗнч(Результат) = Тип("Строка"),
		ПолучитьИзВременногоХранилища(Результат),
		Результат);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		Если НЕ РезультатРасчета.Отказ Тогда
			
			Для каждого Строка Из Задание.Строки Цикл
				Набор = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.СоздатьНаборЗаписей();
				Набор.Отбор.ЗаказНаПроизводство.Установить(Задание.ЗаказНаПроизводство);
				Набор.Отбор.Разделитель.Установить(Строка.Разделитель);
				УстановитьПривилегированныйРежим(Истина);
				Набор.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Задание.Владелец().Строки.Удалить(Задание);
	
КонецПроцедуры

Процедура ОбработатьОшибкуРасчета(ПараметрыРасчета, ПодробноеПредставлениеОшибки)
	
	Если ПараметрыРасчета.ЛимитОшибок = 1 Тогда
		ВызватьИсключение ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ПараметрыРасчета.ЛимитОшибок = ПараметрыРасчета.ЛимитОшибок - 1;
	
КонецПроцедуры

#КонецОбласти

#Область НачалоРасчета

// Рассчитать график заказа.
// 
// Параметры:
//  Параметры - Структура:
//    * ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2.
//    * Граница - Дата.
//  АдресРезультата - Строка - адрес во временном хранилище для помещения результата.
//
Процедура РассчитатьГрафикЗаказа(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"МежцеховоеУправление2_2.СтруктураЗаказаРасчетНормативногоГрафика");
	
	РезультатРасчета = РассчитатьГрафикЗаказаВнутриЗамераВремени(Параметры.ЗаказНаПроизводство, Параметры.Граница);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		ОписаниеЗамера, РезультатРасчета.КоличествоЭтапов);
	
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресРезультата);
	
КонецПроцедуры

Функция РассчитатьГрафикЗаказаВнутриЗамераВремени(ЗаказНаПроизводство, Граница)
	
	РезультатРасчета = НовыйРезультатРасчетаЗаказа();
	
	// Чтение данных заказа
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеЗаказа.Ссылка КАК ЗаказНаПроизводство,
		|	ВЫБОР
		|		КОГДА ДанныеЗаказа.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу)
		|				И ДанныеЗаказа.НачатьНеРанее >= &ТекущаяДата
		|			ТОГДА ДанныеЗаказа.НачатьНеРанее
		|		КОГДА ДанныеЗаказа.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу)
		|				И ДанныеЗаказа.НачатьНеРанее < &ТекущаяДата
		|			ТОГДА &ТекущаяДата
		|		ИНАЧЕ ДанныеЗаказа.ДатаПотребности
		|	КОНЕЦ                 КАК НачалоРазмещения,
		|	ДанныеЗаказа.РазмещениеВыпуска = ЗНАЧЕНИЕ(
		|		Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеКНачалу,
		|	ИСТИНА                КАК ЭтоСборка,
		|	ИСТИНА НЕ В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК Т
		|		ГДЕ
		|			Т.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|		)                 КАК ПервыйРасчет
		|		
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ДанныеЗаказа
		|ГДЕ
		|	ДанныеЗаказа.Ссылка = &ЗаказНаПроизводство");
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ДанныеИсточника = Запрос.Выполнить().Выбрать();
	Если НЕ ДанныеИсточника.Следующий() Тогда
		Возврат РезультатРасчета;
	КонецЕсли;
	
	// Инициализация переменных
	ПолныйРасчет = (Граница = '00010101');
	
	ИспользоватьБуфер = ИспользоватьБуфер()
		И Не ДанныеИсточника.ПервыйРасчет
		И ПолныйРасчет;
	Область = ?(ИспользоватьБуфер,
		Новый УникальныйИдентификатор(),
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	// Кеширование структуры заказа
	СтруктураЗаказаКеш = Новый МенеджерВременныхТаблиц();
	ЗакешироватьСтруктуруЗаказа(СтруктураЗаказаКеш, ДанныеИсточника, ПолныйРасчет);
	
	// Подготовка к получению данных графиков
	ГрафикиКеш = Новый МенеджерВременныхТаблиц();
	Графики = Новый Массив;
	ПрочитатьГрафики(ГрафикиКеш, Графики);
	
	// Чтение этапов
	Если ПолныйРасчет Тогда
		
		// Полный расчет
		ГрафикКЗаписи = Неопределено;
		ДанныеРазмещения = ПервыеУзлы(ДанныеИсточника, СтруктураЗаказаКеш);
		РазделительЗаписи = НачалоМесяца(ДанныеИсточника.НачалоРазмещения);
		
		Если Не ИспользоватьБуфер
				И Не ДанныеИсточника.ПервыйРасчет Тогда
			Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
			Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	Иначе
		
		// Пересчет
		ГрафикКЗаписи = Неопределено;
		ДанныеРазмещения = УзлыКПересчету(ДанныеИсточника, СтруктураЗаказаКеш, Граница, ГрафикКЗаписи);
		РазделительЗаписи = НачалоМесяца(Граница);
		
	КонецЕсли;
	
	// Размещение
	ТактовБезРазмещения = 0;
	Пока ДанныеРазмещения.Узлы.Количество() <> 0
		ИЛИ ГрафикКЗаписи <> Неопределено Цикл
		
		ПараметрыТакта = НовыйПараметрыТакта();
		ПараметрыТакта.ПолныйРасчет = ПолныйРасчет;
		ПараметрыТакта.РазделительЗаписи = РазделительЗаписи;
		ПараметрыТакта.СтруктураЗаказаКеш = СтруктураЗаказаКеш;
		ПараметрыТакта.ИспользоватьБуфер = ИспользоватьБуфер;
		ПараметрыТакта.Область = Область;
		ЗаполнитьЗначенияСвойств(ПараметрыТакта, ДанныеИсточника,
			"ЗаказНаПроизводство, РазмещениеКНачалу, НачалоРазмещения, ЭтоСборка");
		
		ПрочитатьРасписание(
			ПараметрыТакта,
			ГрафикиКеш,
			Графики,
			РазделительЗаписи,
			КонецМесяца(РазделительЗаписи));
		
		РезультатТакта = ВыполнитьТактРасчета(ПараметрыТакта, ДанныеРазмещения, ГрафикКЗаписи);
		РезультатРасчета.КоличествоЭтапов = РезультатРасчета.КоличествоЭтапов + РезультатТакта.КоличествоЭтапов;
		
		Если РезультатТакта.Отказ Тогда
			РезультатРасчета.Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		Если РезультатТакта.КоличествоЭтапов <> 0 Тогда
			РезультатРасчета.Начало = Мин(РезультатРасчета.Начало, РезультатТакта.Начало);
			РезультатРасчета.Окончание = Макс(РезультатРасчета.Окончание, РезультатТакта.Окончание);
		КонецЕсли;
		
		// Зашита от зацикливания
		ТактовБезРазмещения = ?(РезультатТакта.КоличествоЭтапов = 0, ТактовБезРазмещения + 1, 0);
		Если ТактовБезРазмещения >= 100
				И ДанныеРазмещения.Узлы.Количество() <> 0 Тогда
			Этап = ДанныеРазмещения.Узлы[0].Этапы[0];
			ОписаниеОшибки = НовыйОписаниеОшибки();
			ОписаниеОшибки.Код = КодОшибкиЗацикливаниеРасчета();
			ОписаниеОшибки.Этап = Этап.Этап;
			ЗаписатьОшибку(ПараметрыТакта.ЗаказНаПроизводство, Этап.КлючПартия, ОписаниеОшибки);
			РезультатРасчета.Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		РазделительЗаписи = ?(ДанныеИсточника.РазмещениеКНачалу,
			КонецМесяца(РазделительЗаписи)+1,
			НачалоМесяца(РазделительЗаписи-1));
		
	КонецЦикла;
	
	// Очистка периодов справа (слева)
	Если Не ПолныйРасчет И Не РезультатРасчета.Отказ Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НормативныйГрафик.РазделительЗаписи КАК РазделительЗаписи
			|ИЗ
			|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
			|ГДЕ
			|	НормативныйГрафик.ЗаказНаПроизводство = &ЗаказНаПроизводство
			|	И НормативныйГрафик.КлючПартия <> &ПустойКлючСвязи
			|	И НормативныйГрафик.РазделительЗаписи >= &РазделительЗаписи";
		
		Если Не ДанныеИсточника.РазмещениеКНачалу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ">=", "<=");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
		Запрос.УстановитьПараметр("РазделительЗаписи", РазделительЗаписи);
		Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
			Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
			Набор.Отбор.РазделительЗаписи.Установить(Выборка.РазделительЗаписи);
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не РезультатРасчета.Отказ Тогда
		
		ОчиститьПротоколОшибок(ЗаказНаПроизводство);
		
		Если ИспользоватьБуфер Тогда
			
			// Перенос данных из буфера в график
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Буфер.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
				|	Буфер.КлючПартия          КАК КлючПартия,
				|	Буфер.Этап                КАК Этап,
				|	Буфер.РазделительЗаписи   КАК РазделительЗаписи,
				|	Буфер.Начало              КАК Начало,
				|	Буфер.Окончание           КАК Окончание
				|ИЗ
				|	РегистрСведений.БуферРасчетаНормативногоГрафика КАК Буфер
				|ГДЕ
				|	Буфер.Область = &Область");
			Запрос.УстановитьПараметр("Область", Область);
			
			Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
			Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
			
			УстановитьПривилегированныйРежим(Истина);
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			УстановитьПривилегированныйРежим(Ложь);
			
			// Итоговая строка по заказу
			Если РезультатРасчета.КоличествоЭтапов <> 0 Тогда
				Запись = Набор.Добавить();
				Запись.ЗаказНаПроизводство = ЗаказНаПроизводство;
				Запись.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
				ЗаполнитьЗначенияСвойств(Запись, РезультатРасчета, "Начало, Окончание");
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		Иначе
			
			// Итоговая строка по заказу
			Если РезультатРасчета.КоличествоЭтапов <> 0 Тогда
				Если Не ПолныйРасчет Тогда
					Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	График.Начало    КАК Начало,
						|	График.Окончание КАК Окончание
						|ИЗ
						|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
						|ГДЕ
						|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
						|	И График.КлючПартия = &ПустойКлючСвязи
						|	И График.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)");
					Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
					Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Если ДанныеИсточника.РазмещениеКНачалу Тогда
							РезультатРасчета.Начало = Выборка.Начало;
						Иначе
							РезультатРасчета.Окончание = Выборка.Окончание;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
				Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
				Набор.Отбор.КлючПартия.Установить(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
				Набор.Отбор.Этап.Установить(Справочники.ЭтапыПроизводства.ПустаяСсылка());
				
				Запись = Набор.Добавить();
				Запись.ЗаказНаПроизводство = ЗаказНаПроизводство;
				Запись.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
				ЗаполнитьЗначенияСвойств(Запись, РезультатРасчета, "Начало, Окончание");
				
				УстановитьПривилегированныйРежим(Истина);
				Набор.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				// Удаление итоговой строки
				Запрос = Новый Запрос(
					"ВЫБРАТЬ ПЕРВЫЕ 2
					|	График.КлючПартия КАК КлючПартия
					|ИЗ
					|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
					|ГДЕ
					|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство");
				Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Количество() = 1 Тогда
					Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
					Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
					Набор.Отбор.КлючПартия.Установить(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
					Набор.Отбор.Этап.Установить(Справочники.ЭтапыПроизводства.ПустаяСсылка());
					
					УстановитьПривилегированныйРежим(Истина);
					Набор.Записать();
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаказаКеш.Закрыть();
	
	Возврат РезультатРасчета;
	
КонецФункции

// Выполнить такт расчета.
// 
// Параметры:
//  ПараметрыТакта - Структура - 
//  ДанныеРазмещения - Структура - 
//  ГрафикКЗаписи - ТаблицаЗначений - График к записи.
// 
// Возвращаемое значение:
//  Структура - Результат такта расчета:
// * Отказ - Булево -
// * КоличествоЭтапов - Число -
// * Начало - Дата -
// * Окончание - Дата -
Функция ВыполнитьТактРасчета(ПараметрыТакта, ДанныеРазмещения, ГрафикКЗаписи)
	
	РезультатТакта = НовыйРезультатТактаРасчета();
	
	КлючТекущегоЭтапа =   ?(ПараметрыТакта.РазмещениеКНачалу, "НомерЭтапа", "НомерСледующегоЭтапа");
	КлючСледующегоЭтапа = ?(ПараметрыТакта.РазмещениеКНачалу, "НомерСледующегоЭтапа", "НомерЭтапа");
	
	СтруктураПоискаСвязи = Новый Структура("КлючПартияПредшественник, ЭтапПредшественник");
	СтруктураПоискаРазделитель = Новый Структура("РазделительЗаписи");
	
	ЗаписьЗамещением = НЕ ПараметрыТакта.ПолныйРасчет;
	ДанныеРазмещения.Этапы.ЗаполнитьЗначения(Истина, "РазмещатьВТекущемТакте");
	
	Пока ДанныеРазмещения.Узлы.Количество() <> 0
		ИЛИ ГрафикКЗаписи <> Неопределено Цикл
		
		НормативныйГрафик = ?(ПараметрыТакта.ИспользоватьБуфер,
			РегистрыСведений.БуферРасчетаНормативногоГрафика.СоздатьНаборЗаписей(),
			РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей());
		УзлыКЧтению = Новый Массив;
		ВсеУзлы = ДанныеРазмещения.Узлы.ВыгрузитьКолонку("КлючПартия");
		ЕстьРазмещенныеЭтапы = Ложь;
		
		ИндексУзел = 0;
		Пока ИндексУзел < ДанныеРазмещения.Узлы.Количество() Цикл
			
			Узел = ДанныеРазмещения.Узлы[ИндексУзел];
			МожноРазмещать = Новый Соответствие;
			ЭтапУзлаРазмещен = Ложь;
			
			ИндексЭтап = 0;
			Пока ИндексЭтап < Узел.Этапы.Количество() Цикл
				
				Этап = Узел.Этапы[ИндексЭтап]; // СтрокаТаблицыЗначений
				
				Размещать = Этап.РазмещатьВТекущемТакте
					И (// Ограничение по связям внутри узла
						МожноРазмещать[Этап[КлючТекущегоЭтапа]] = Неопределено
						ИЛИ МожноРазмещать[Этап[КлючТекущегоЭтапа]]
					);
				
				// Ограничение по связям между узлами
				Если Размещать Тогда
					Для ИндексСвязь = -Этап.Связи.ВГраница() По 0 Цикл
						
						Связь = Этап.Связи[-ИндексСвязь];
						Если ЗначениеЗаполнено(Связь.НачалоРазмещения) Тогда
							
							Этап.НачалоРазмещения = ?(ПараметрыТакта.РазмещениеКНачалу,
								Макс(Этап.НачалоРазмещения, Связь.НачалоРазмещения),
								Мин(Этап.НачалоРазмещения, Связь.НачалоРазмещения));
							
							// Дата связи учтена, строку можно удалить
							ДанныеРазмещения.Связи.Удалить(Связь);
							Этап.Связи.Удалить(-ИндексСвязь);
							
						Иначе
							Размещать = Ложь;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				// Размещение этапа
				Если Размещать Тогда
					
					// Расчет времени работы ВРЦ
					Если Этап.ЭтоББВ И Не Этап.ВремяВидовРЦРассчитано Тогда
						Для каждого ВидРЦ Из Этап.ВидыРЦ Цикл
							Если ПустаяСтрока(ВидРЦ.АлгоритмРасчетаКоличества) Тогда
								Коэффициент = Узел.КоличествоПартий;
								Если Этап.ОдновременноПроизводимоеКоличествоПартий <> 0 Тогда
									Коэффициент = Цел(Коэффициент / Этап.ОдновременноПроизводимоеКоличествоПартий)
										+ ?(Коэффициент % Этап.ОдновременноПроизводимоеКоличествоПартий <> 0, 1, 0);
								КонецЕсли;
								ВидРЦ.Время = ВидРЦ.Время * Коэффициент;
							КонецЕсли;
						КонецЦикла;
						Этап.ВремяВидовРЦРассчитано = Истина;
					КонецЕсли;
					
					Если Этап.ЭтоББВ Тогда
						РазместитьЭтапББВ(ПараметрыТакта, РезультатТакта, Узел, Этап);
					Иначе
						РазместитьЭтапУББВ(ПараметрыТакта, РезультатТакта, Этап);
					КонецЕсли;
					
					Если РезультатТакта.Отказ Тогда
						Возврат РезультатТакта;
					КонецЕсли;
					
					Если Этап.Размещен Тогда
						
						ЭтапОкончание = ?(Этап.Окончание = Этап.Начало, Этап.Окончание, Этап.Окончание-1);
						
						Если Не Этап.ЭтоПеремещение Тогда
							НоваяЗапись = НормативныйГрафик.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыТакта, ?(ПараметрыТакта.ИспользоватьБуфер,
								"ЗаказНаПроизводство, РазделительЗаписи, Область",
								"ЗаказНаПроизводство, РазделительЗаписи"));
							ЗаполнитьЗначенияСвойств(НоваяЗапись, Этап, "КлючПартия, Этап, Начало");
							НоваяЗапись.Окончание = ЭтапОкончание;
						КонецЕсли;
						
						// Актуализация дат внутри узла
						Для ИндексПоследователь = ИндексЭтап+1 По Узел.Этапы.ВГраница() Цикл
							ЭтапПоследователь = Узел.Этапы[ИндексПоследователь];
							Если ЭтапПоследователь[КлючТекущегоЭтапа] = Этап[КлючСледующегоЭтапа] Тогда
								ЭтапПоследователь.НачалоРазмещения = ?(ПараметрыТакта.РазмещениеКНачалу,
									Макс(ЭтапПоследователь.НачалоРазмещения, ЭтапОкончание),
									Мин(ЭтапПоследователь.НачалоРазмещения, Этап.Начало));
							КонецЕсли;
						КонецЦикла;
						
						// Актуализация дат между узлами
						СтруктураПоискаСвязи.КлючПартияПредшественник = Этап.КлючПартия;
						СтруктураПоискаСвязи.ЭтапПредшественник = Этап.Этап;
						Для каждого Связь Из ДанныеРазмещения.Связи.НайтиСтроки(СтруктураПоискаСвязи) Цикл
							Связь.НачалоРазмещения = ?(ПараметрыТакта.РазмещениеКНачалу, ЭтапОкончание, Этап.Начало);
						КонецЦикла;
						
						// Расчет итогов по узлу
						Узел.Начало = ?(Узел.Начало = '00010101', Этап.Начало, Мин(Узел.Начало, Этап.Начало));
						Узел.Окончание = Макс(Узел.Окончание, ЭтапОкончание);
						
						РезультатТакта.КоличествоЭтапов = РезультатТакта.КоличествоЭтапов + 1;
						ЭтапУзлаРазмещен = Истина;
						
					Иначе
						Этап.РазмещатьВТекущемТакте = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				// Отметка возможности размещения этапов внутри узла
				Если МожноРазмещать[Этап[КлючСледующегоЭтапа]] = Неопределено
					ИЛИ МожноРазмещать[Этап[КлючСледующегоЭтапа]] Тогда
					МожноРазмещать.Вставить(Этап[КлючСледующегоЭтапа], Этап.Размещен);
				КонецЕсли;
				
				// Удаление этапа из ДанныхРазмещения
				Если Этап.Размещен Тогда
					Для каждого ВидРЦ Из Этап.ВидыРЦ Цикл
						ДанныеРазмещения.ВидыРЦ.Удалить(ВидРЦ);
					КонецЦикла;
					ДанныеРазмещения.Этапы.Удалить(Этап);
					Узел.Этапы.Удалить(ИндексЭтап);
				Иначе
					ИндексЭтап = ИндексЭтап + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЭтапУзлаРазмещен Тогда
				
				Если Не Узел.ПоследователиПрочитаны Тогда
					УзлыКЧтению.Добавить(Узел.КлючПартия);
					Узел.ПоследователиПрочитаны = Истина;
				КонецЕсли;
				
				ЕстьРазмещенныеЭтапы = Истина;
				
				Если НормативныйГрафик.Количество() >= ПараметрыТакта.ГранулаЗаписи Тогда
					ЗаписатьГрафик(ПараметрыТакта, НормативныйГрафик, ЗаписьЗамещением);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Узел.Этапы.ВГраница() = -1 Тогда // Узел размещен
				
				// Защита от записи пустых итогов
				Если Узел.Начало <> '00010101' Тогда
					// Добавление итоговой записи по узлу
					НоваяЗапись = НормативныйГрафик.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыТакта, ?(ПараметрыТакта.ИспользоватьБуфер,
						"ЗаказНаПроизводство, РазделительЗаписи, Область",
						"ЗаказНаПроизводство, РазделительЗаписи"));
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Узел, "КлючПартия, Начало, Окончание");
					НоваяЗапись.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
					
					// Итоги по заказу
					РезультатТакта.Начало = Мин(РезультатТакта.Начало, Узел.Начало);
					РезультатТакта.Окончание = Макс(РезультатТакта.Окончание, Узел.Окончание);
				КонецЕсли;
				
				ДанныеРазмещения.Узлы.Удалить(ИндексУзел);
				
			Иначе
				ИндексУзел = ИндексУзел + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Обработка графика к записи
		Если ГрафикКЗаписи <> Неопределено Тогда
			
			СтруктураПоискаРазделитель.РазделительЗаписи = ПараметрыТакта.РазделительЗаписи;
			Для каждого Запись Из ГрафикКЗаписи.НайтиСтроки(СтруктураПоискаРазделитель) Цикл
				
				НоваяЗапись = НормативныйГрафик.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
				Если ПараметрыТакта.ИспользоватьБуфер Тогда
					НоваяЗапись.Область = ПараметрыТакта.Область;
				КонецЕсли;
				
				Если НормативныйГрафик.Количество() >= ПараметрыТакта.ГранулаЗаписи Тогда
					ЗаписатьГрафик(ПараметрыТакта, НормативныйГрафик, ЗаписьЗамещением);
				КонецЕсли;
				
				ЕстьРазмещенныеЭтапы = Истина;
				
				// Актуализация дат между узлами
				СтруктураПоискаСвязи.КлючПартияПредшественник = Запись.КлючПартия;
				СтруктураПоискаСвязи.ЭтапПредшественник = Запись.Этап;
				Для каждого Связь Из ДанныеРазмещения.Связи.НайтиСтроки(СтруктураПоискаСвязи) Цикл
					Связь.НачалоРазмещения = ?(ПараметрыТакта.РазмещениеКНачалу,
						?(Запись.Окончание = Запись.Начало, Запись.Окончание, Запись.Окончание-1),
						Запись.Начало);
				КонецЦикла;
				
				ГрафикКЗаписи.Удалить(Запись);
				
			КонецЦикла;
			
			Если ГрафикКЗаписи.Количество() = 0 Тогда
				ГрафикКЗаписи = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаписьЗамещением
				ИЛИ НормативныйГрафик.Количество() > 0 Тогда
			ЗаписатьГрафик(ПараметрыТакта, НормативныйГрафик, ЗаписьЗамещением);
		КонецЕсли;
		
		Если УзлыКЧтению.ВГраница() <> -1 Тогда
			ПрочитатьПоследующиеУзлы(ПараметрыТакта, УзлыКЧтению, ВсеУзлы, ДанныеРазмещения);
		КонецЕсли;
		
		Если НЕ ЕстьРазмещенныеЭтапы Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатТакта;
	
КонецФункции

Процедура ЗаписатьГрафик(ПараметрыТакта, Набор, ЗаписьЗамещением)
	
	Если ПараметрыТакта.ИспользоватьБуфер Тогда
		
		Набор.Отбор.Область.Установить(ПараметрыТакта.Область);
		
		УстановитьПривилегированныйРежим(Истина);
		Набор.Записать(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Набор = РегистрыСведений.БуферРасчетаНормативногоГрафика.СоздатьНаборЗаписей();
		
	Иначе
		
		Набор.Отбор.ЗаказНаПроизводство.Установить(ПараметрыТакта.ЗаказНаПроизводство);
		Набор.Отбор.РазделительЗаписи.Установить(ПараметрыТакта.РазделительЗаписи);
		УстановитьПривилегированныйРежим(Истина);
		Набор.Записать(ЗаписьЗамещением);
		УстановитьПривилегированныйРежим(Ложь);
		
		Набор = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.СоздатьНаборЗаписей();
		
	КонецЕсли;
	
	ЗаписьЗамещением = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетББВ

// Разместить этап ББВ.
// 
// Параметры:
//  ПараметрыТакта - Структура - 
//  РезультатТакта - Структура - 
//  Узел - СтрокаТаблицыЗначений - Узел.
//  Этап - СтрокаТаблицыЗначений - Этап.
Процедура РазместитьЭтапББВ(ПараметрыТакта, РезультатТакта, Узел, Этап)
	
	// Размещение первого буфера
	Буфер = ?(ПараметрыТакта.РазмещениеКНачалу, "ПредварительныйБуфер", "ЗавершающийБуфер");
	Если Этап[Буфер] > 0 Тогда
		
		Результат = РазместитьПоРасписаниюУББВ(
			ПараметрыТакта,
			Этап.Подразделение,
			Этап.НачалоРазмещения,
			Этап[Буфер],
			?(ПараметрыТакта.РазмещениеКНачалу,
				Этап.ПредварительныйБуферРазмещатьВДнях,
				Этап.ЗавершающийБуферРазмещатьВДнях));
		
		Если Результат <> Неопределено Тогда
			
			Если ПараметрыТакта.РазмещениеКНачалу Тогда
				Если Этап.Начало = '00010101' Тогда
					Этап.Начало = Результат.Начало;
				КонецЕсли;
				Если Этап[Буфер] = 0 Тогда
					Этап.НачалоРазмещения = Результат.Окончание;
				КонецЕсли;
			Иначе
				Если Этап.Окончание = '00010101' Тогда
					Этап.Окончание = Результат.Окончание;
				КонецЕсли;
				Если Этап[Буфер] = 0 Тогда
					Этап.НачалоРазмещения = Результат.Начало;
				КонецЕсли; 
			КонецЕсли;
			
		Иначе
			ОбработатьОшибкуНеНайденИнтервалУББВ(ПараметрыТакта, РезультатТакта, Этап, Этап.НачалоРазмещения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Размещение видов РЦ
	Если Этап[Буфер] = 0
		И Не Этап.ВидыРЦЗапланированы Тогда
	
		Если Этап.ВидыРЦ.Количество() = 1 Тогда
			
			// Размещение одиночного ВРЦ
			Исполнитель = Этап.ВидыРЦ[0];
			Интервал = НачальныйИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Этап.НачалоРазмещения);
			Если Интервал <> Неопределено Тогда
				
				РассчитатьНачалоЗагрузкиВРЦ(ПараметрыТакта, Этап, Интервал);
				Время = ЗагрузкаВРЦНаИнтервале(Узел, Исполнитель);
				
				Если Время = 0 И Исполнитель.Время <> 0 Тогда
					ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель);
					Интервал = Неопределено;
				КонецЕсли;
				
				Пока Интервал <> Неопределено Цикл
					
					Исполнитель.Время = Исполнитель.Время - Мин(Время, Исполнитель.Время);
					Если Исполнитель.Время = 0 Тогда
						
						РассчитатьОкончаниеЗагрузкиВРЦ(ПараметрыТакта, Этап, Исполнитель, Интервал);
						Этап.ВидыРЦЗапланированы = Истина;
						Прервать;
						
					Иначе
						Интервал = ОчереднойИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Интервал);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ОбработатьОшибкуНеНайденИнтервалББВ(
					ПараметрыТакта, РезультатТакта, Этап, Исполнитель, Этап.НачалоРазмещения);
			КонецЕсли;
			
		ИначеЕсли Этап.ВидыРЦ.Количество() > 1 Тогда
			
			// Размещение группы ВРЦ
			Если Этап.ПорядокРаботыВидовРЦ = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно Тогда
				ЗагрузитьГруппуВРЦПоследовательно(ПараметрыТакта, РезультатТакта, Узел, Этап);
			ИначеЕсли Этап.ПорядокРаботыВидовРЦ = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно Тогда
				ЗагрузитьГруппуВРЦОдновременно(ПараметрыТакта, РезультатТакта, Узел, Этап);
			ИначеЕсли Этап.ПорядокРаботыВидовРЦ = Перечисления.ПорядокРаботыВидовРабочихЦентров.Независимо Тогда
				ЗагрузитьГруппуВРЦНезависимо(ПараметрыТакта, РезультатТакта, Узел, Этап);
			КонецЕсли;
		
		Иначе
			
			// Виды РЦ не заданы
			Если ПараметрыТакта.РазмещениеКНачалу Тогда
				Если Этап.Начало = '00010101' Тогда
					Этап.Начало = Этап.НачалоРазмещения;
				КонецЕсли;
			Иначе
				Если Этап.Окончание = '00010101' Тогда
					Этап.Окончание = Этап.НачалоРазмещения;
				КонецЕсли;
			КонецЕсли;
			
			Этап.ОкончаниеЗагрузкиВидовРЦ = Этап.НачалоРазмещения;
			Этап.ВидыРЦЗапланированы = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Размещение второго буфера
	Если Этап.ВидыРЦЗапланированы Тогда
		
		Буфер = ?(ПараметрыТакта.РазмещениеКНачалу, "ЗавершающийБуфер", "ПредварительныйБуфер");
		Если Этап[Буфер] > 0 Тогда
			
			Результат = РазместитьПоРасписаниюУББВ(
				ПараметрыТакта,
				Этап.Подразделение,
				Этап.ОкончаниеЗагрузкиВидовРЦ,
				Этап[Буфер],
				?(ПараметрыТакта.РазмещениеКНачалу,
					Этап.ЗавершающийБуферРазмещатьВДнях,
					Этап.ПредварительныйБуферРазмещатьВДнях));
			
			Если Результат <> Неопределено Тогда
				
				Если Этап[Буфер] = 0 Тогда
					Если ПараметрыТакта.РазмещениеКНачалу Тогда
						Этап.Окончание = Результат.Окончание;
					Иначе
						Этап.Начало = Результат.Начало;
					КонецЕсли;
					Этап.Размещен = Истина;
				КонецЕсли;
				
			Иначе
				ОбработатьОшибкуНеНайденИнтервалУББВ(ПараметрыТакта, РезультатТакта, Этап, Этап.ОкончаниеЗагрузкиВидовРЦ);
			КонецЕсли;
		
		Иначе
			
			Если ПараметрыТакта.РазмещениеКНачалу Тогда
				Этап.Окончание = Этап.ОкончаниеЗагрузкиВидовРЦ;
			Иначе
				Этап.Начало = Этап.ОкончаниеЗагрузкиВидовРЦ;
			КонецЕсли;
			Этап.Размещен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦПоследовательно(ПараметрыТакта, РезультатТакта, Узел, Этап)
	
	Интервал = Неопределено;
	
	Для Индекс = 0 По Этап.ВидыРЦ.ВГраница() Цикл
		
		Исполнитель = Этап.ВидыРЦ[Индекс];
		Если Исполнитель.Время = 0
			И Этап.ОкончаниеЗагрузкиВидовРЦ <> '00010101' Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоРазмещения = ?(Интервал = Неопределено,
			Этап.НачалоРазмещения,
			?(ПараметрыТакта.РазмещениеКНачалу,
				Интервал.Дата,
				ПривестиКОкончаниюПериода(Интервал.Дата, Этап.Интервал)));
		
		Интервал = НачальныйИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, НачалоРазмещения);
		Если Интервал <> Неопределено Тогда
			
			Если Индекс = 0 Тогда
				РассчитатьНачалоЗагрузкиВРЦ(ПараметрыТакта, Этап, Интервал);
			КонецЕсли;
			Время = ЗагрузкаВРЦНаИнтервале(Узел, Исполнитель);
			
			Если Время = 0 И Исполнитель.Время <> 0 Тогда
				ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель);
				Возврат;
			КонецЕсли;
			
			Пока Интервал <> Неопределено Цикл
				
				Исполнитель.Время = Исполнитель.Время - Мин(Время, Исполнитель.Время);
				Если Исполнитель.Время = 0 Тогда
					РассчитатьОкончаниеЗагрузкиВРЦ(ПараметрыТакта, Этап, Исполнитель, Интервал);
					Прервать;
				Иначе
					Интервал = ОчереднойИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Интервал);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Исполнитель.Время <> 0 Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			ОбработатьОшибкуНеНайденИнтервалББВ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель, НачалоРазмещения);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Этап.ВидыРЦЗапланированы = Истина;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦОдновременно(ПараметрыТакта, РезультатТакта, Узел, Этап)
	
	СтруктураПоиска = Новый Структура("КлючГрафика, Интервал, Дата");
	ИнтервалыНеПересекаются = Истина;
	
	Исполнитель1 = Этап.ВидыРЦ[0];
	Интервал1 = НачальныйИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель1, Этап.НачалоРазмещения);
	Если Интервал1 <> Неопределено Тогда
		
		РассчитатьНачалоЗагрузкиВРЦ(ПараметрыТакта, Этап, Интервал1);
		
		Время = ЗагрузкаВРЦНаИнтервале(Узел, Исполнитель1);
		Если Время = 0 И Исполнитель1.Время <> 0 Тогда
			ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель1);
			Возврат;
		Иначе
			Для Индекс = 1 По Этап.ВидыРЦ.ВГраница() Цикл
				
				Время = Мин(Время, ЗагрузкаВРЦНаИнтервале(Узел, Этап.ВидыРЦ[Индекс]));
				Если Время = 0 И Этап.ВидыРЦ[Индекс].Время <> 0 Тогда
					ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Этап.ВидыРЦ[Индекс]);
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Пока Интервал1 <> Неопределено Цикл
			
			ВсеИсполнителиДоступны = Истина;
			Для Индекс = 1 По Этап.ВидыРЦ.ВГраница() Цикл
				
				Исполнитель2 = Этап.ВидыРЦ[Индекс];
				Если Исполнитель2.КлючГрафика = Исполнитель1.КлючГрафика Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска.КлючГрафика = Исполнитель2.КлючГрафика;
				СтруктураПоиска.Интервал = Исполнитель2.Интервал;
				СтруктураПоиска.Дата = Интервал1.Дата;
	
				НайденныеСтроки = ПараметрыТакта.РасписаниеББВ.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.ВГраница() = -1 Тогда
					ВсеИсполнителиДоступны = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВсеИсполнителиДоступны Тогда
				Исполнитель1.Время = Исполнитель1.Время - Мин(Время, Исполнитель1.Время);
				ИнтервалыНеПересекаются = Ложь;
			КонецЕсли;
			
			Если Исполнитель1.Время = 0 Тогда
				
				РассчитатьОкончаниеЗагрузкиВРЦ(ПараметрыТакта, Этап, Исполнитель1, Интервал1);
				Этап.ВидыРЦЗапланированы = Истина;
				Прервать;
				
			Иначе
				Интервал1 = ОчереднойИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель1, Интервал1);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОбработатьОшибкуНеНайденИнтервалББВ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель1, Этап.НачалоРазмещения);
		ИнтервалыНеПересекаются = Ложь;
	КонецЕсли;
	
	Если ИнтервалыНеПересекаются Тогда
		ОбработатьОшибкуИнтервалыНеПересекаются(ПараметрыТакта, РезультатТакта, Этап);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦНезависимо(ПараметрыТакта, РезультатТакта, Узел, Этап)
	
	ВидыРЦЗапланированы = Истина;
	
	Для Индекс = 0 По Этап.ВидыРЦ.ВГраница() Цикл
		
		Исполнитель = Этап.ВидыРЦ[Индекс];
		Если Исполнитель.Время = 0
			И Этап.ОкончаниеЗагрузкиВидовРЦ <> '00010101' Тогда
			Продолжить;
		КонецЕсли;
		
		Интервал = НачальныйИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Этап.НачалоРазмещения);
		Если Интервал <> Неопределено Тогда
			
			РассчитатьНачалоЗагрузкиВРЦ(ПараметрыТакта, Этап, Интервал);
			Время = ЗагрузкаВРЦНаИнтервале(Узел, Исполнитель);
			
			Если Время = 0 И Исполнитель.Время <> 0 Тогда
				ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель);
				Возврат;
			КонецЕсли;
			
			Пока Интервал <> Неопределено Цикл
				
				Исполнитель.Время = Исполнитель.Время - Мин(Время, Исполнитель.Время);
				Если Исполнитель.Время = 0 Тогда
					
					РассчитатьОкончаниеЗагрузкиВРЦ(ПараметрыТакта, Этап, Исполнитель, Интервал);
					Прервать;
					
				Иначе
					Интервал = ОчереднойИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Интервал);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ОбработатьОшибкуНеНайденИнтервалББВ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель, Этап.НачалоРазмещения);
		КонецЕсли;
		
		Если Исполнитель.Время <> 0 Тогда
			ВидыРЦЗапланированы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Этап.ВидыРЦЗапланированы = ВидыРЦЗапланированы;
	
КонецПроцедуры

Функция НачальныйИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, НачалоРазмещения)
	
	// Расчет даты интервала
	Дата = '00010101';
	Если Этап.ИнтервалИмеетНестандартныеГраницы Тогда
		
		Если ПараметрыТакта.РазмещениеКНачалу Тогда
			
			ГраницаИнтервала = ПривестиКГраницеИнтервалаПланирования(
				НачалоРазмещения, Этап.Интервал, Этап.ИнтервалНачало);
			Если НачалоРазмещения <= ГраницаИнтервала Тогда
				Дата = ПривестиКНачалуПериода(НачалоРазмещения, Этап.Интервал);
			Иначе
				Дата = ПривестиКОкончаниюПериода(НачалоРазмещения, Этап.Интервал);
			КонецЕсли;
			
		Иначе
			
			ГраницаИнтервала = ПривестиКГраницеИнтервалаПланирования(
				НачалоРазмещения, Этап.Интервал, Этап.ИнтервалОкончание);
			Если НачалоРазмещения >= ГраницаИнтервала Тогда
				Дата = ПривестиКНачалуПериода(НачалоРазмещения, Этап.Интервал);
			Иначе
				Дата = ПривестиКНачалуПериода(
					ПривестиКНачалуПериода(НачалоРазмещения, Этап.Интервал)-1,
					Этап.Интервал);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НачалоПериода = ПривестиКНачалуПериода(НачалоРазмещения, Этап.Интервал);
		Если ПараметрыТакта.РазмещениеКНачалу Тогда
			Если НачалоРазмещения = НачалоПериода Тогда
				Дата = НачалоРазмещения;
			Иначе
				Дата = ПривестиКОкончаниюПериода(НачалоРазмещения, Этап.Интервал);
			КонецЕсли;
		Иначе
			Дата = ПривестиКНачалуПериода(НачалоПериода-1, Этап.Интервал);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	// Подбор интервала поиском
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючГрафика", Исполнитель.КлючГрафика);
	СтруктураПоиска.Вставить("Интервал", Исполнитель.Интервал);
	СтруктураПоиска.Вставить("Дата");
	
	Если Исполнитель.Интервал = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		КоличествоИтерацийПоиска = 3;
	Иначе
		КоличествоИтерацийПоиска = 1;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоИтерацийПоиска Цикл
		
		СтруктураПоиска.Дата = Дата;
		НайденныеСтроки = ПараметрыТакта.РасписаниеББВ.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ПараметрыТакта.РазмещениеКНачалу Тогда
				Дата = ПривестиКОкончаниюПериода(Дата, Исполнитель.Интервал);
			Иначе
				Дата = ПривестиКНачалуПериода(Дата-1, Исполнитель.Интервал);
			КонецЕсли;
		Иначе
			Результат = НайденныеСтроки[0];
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Подбор интервала перебором
	Если Результат = Неопределено Тогда
		
		СтруктураПоиска.Удалить("Дата");
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ПараметрыТакта.РасписаниеББВ, СтруктураПоиска, Истина);
		
		Для Сч = 0 По НайденныеСтроки.ВГраница() Цикл
			Если ПараметрыТакта.РазмещениеКНачалу И НайденныеСтроки[Сч].Дата >= Дата
				ИЛИ Не ПараметрыТакта.РазмещениеКНачалу И НайденныеСтроки[Сч].Дата <= Дата Тогда
				
				Результат = НайденныеСтроки[Сч];
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчереднойИнтервалРазмещенияББВ(ПараметрыТакта, Этап, Исполнитель, Интервал)
	
	Результат = Неопределено;
	
	Индекс = ПараметрыТакта.РасписаниеББВ.Индекс(Интервал) + 1;
	Если Индекс < ПараметрыТакта.РасписаниеББВ.Количество() Тогда
		
		СледующийИнтервал = ПараметрыТакта.РасписаниеББВ[Индекс];
		Если СледующийИнтервал.КлючГрафика = Исполнитель.КлючГрафика
			И СледующийИнтервал.Интервал = Исполнитель.Интервал Тогда
			
			Результат = СледующийИнтервал;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузкаВРЦНаИнтервале(Узел, Исполнитель)
	
	КоличествоПартий = ?(Цел(Узел.КоличествоПартий) = Узел.КоличествоПартий,
		Узел.КоличествоПартий,
		Цел(Узел.КоличествоПартий)+1);
	
	ЕдиницОборудования = ?(Исполнитель.УчитыватьДоступность,
		Мин(КоличествоПартий, Исполнитель.КоличествоРабочихЦентров),
		КоличествоПартий);
	
	ЗагрузкаНаКвант = Исполнитель.МаксимальнаяДоступность * ЕдиницОборудования;
	
	Возврат Мин(Исполнитель.Время, ЗагрузкаНаКвант);
	
КонецФункции

// Рассчитать начало загрузки ВРЦ.
// 
// Параметры:
//  ПараметрыТакта - Структура - 
//  Этап - СтрокаТаблицыЗначений - Этап.
//  Интервал - СтрокаТаблицыЗначений - Интервал.
Процедура РассчитатьНачалоЗагрузкиВРЦ(ПараметрыТакта, Этап, Интервал)
	
	Если ПараметрыТакта.РазмещениеКНачалу Тогда
		
		Дата = ?(Этап.ИнтервалИмеетНестандартныеГраницы,
			ПривестиКГраницеИнтервалаПланирования(Интервал.Дата, Этап.Интервал, Этап.ИнтервалНачало),
			Интервал.Дата);
		
		Если Этап.Начало = '00010101' Тогда
			Этап.Начало = Дата;
		Иначе
			Этап.Начало = Мин(Этап.Начало, Дата);
		КонецЕсли;
		
	Иначе
		
		Дата = ?(Этап.ИнтервалИмеетНестандартныеГраницы,
			ПривестиКГраницеИнтервалаПланирования(Интервал.Дата, Этап.Интервал, Этап.ИнтервалОкончание) + 1,
			ПривестиКОкончаниюПериода(Интервал.Дата, Этап.Интервал));
		
		Если Этап.Окончание = '00010101' Тогда
			Этап.Окончание = Дата;
		Иначе
			Этап.Окончание = Макс(Этап.Окончание, Дата);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьОкончаниеЗагрузкиВРЦ(ПараметрыТакта, Этап, Исполнитель, Интервал)
	
	Если ПараметрыТакта.РазмещениеКНачалу Тогда
		
		Дата = ?(Этап.ИнтервалИмеетНестандартныеГраницы,
			ПривестиКГраницеИнтервалаПланирования(Интервал.Дата, Этап.Интервал, Этап.ИнтервалОкончание) + 1,
			ПривестиКОкончаниюПериода(Интервал.Дата, Этап.Интервал));
		
		Если Этап.ОкончаниеЗагрузкиВидовРЦ = '00010101' Тогда
			Этап.ОкончаниеЗагрузкиВидовРЦ = Дата;
		Иначе
			Этап.ОкончаниеЗагрузкиВидовРЦ = Макс(Этап.ОкончаниеЗагрузкиВидовРЦ, Дата);
		КонецЕсли;
		
	Иначе
		
		Дата = ?(Этап.ИнтервалИмеетНестандартныеГраницы,
			ПривестиКГраницеИнтервалаПланирования(Интервал.Дата, Этап.Интервал, Этап.ИнтервалНачало),
			Интервал.Дата);
		
		Если Этап.ОкончаниеЗагрузкиВидовРЦ = '00010101' Тогда
			Этап.ОкончаниеЗагрузкиВидовРЦ = Дата;
		Иначе
			Этап.ОкончаниеЗагрузкиВидовРЦ = Мин(Этап.ОкончаниеЗагрузкиВидовРЦ, Дата);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиКГраницеИнтервалаПланирования(Дата, Интервал, ГраницаИнтервала)
	
	Возврат ПривестиКНачалуПериода(Дата, Интервал)
		+ ГраницаИнтервалаВСекунды(ГраницаИнтервала, Интервал);
	
КонецФункции

Функция ГраницаИнтервалаВСекунды(ГраницаИнтервала, Интервал)
	
	Если Интервал = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		Возврат Час(ГраницаИнтервала) * 3600
			+ Минута(ГраницаИнтервала) * 60
			+ Секунда(ГраницаИнтервала);
			
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		Возврат (ДеньНедели(ГраницаИнтервала)-1) * 86400
			+ Час(ГраницаИнтервала) * 3600
			+ Минута(ГраницаИнтервала) * 60
			+ Секунда(ГраницаИнтервала);
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РасчетУББВ

// Разместить этап УББВ.
// 
// Параметры:
//  ПараметрыТакта - Структура - 
//  РезультатТакта - Структура - 
//  Этап - СтрокаТаблицыЗначений - Этап
Процедура РазместитьЭтапУББВ(ПараметрыТакта, РезультатТакта, Этап)
	
	Если Этап.ДлительностьЭтапа > 0 Тогда
		
		Результат = РазместитьПоРасписаниюУББВ(
			ПараметрыТакта,
			Этап.Подразделение,
			Этап.НачалоРазмещения,
			Этап.ДлительностьЭтапа,
			Этап.ЭтапРазмещатьВДнях);
		
		Если Результат <> Неопределено Тогда
			
			Если ПараметрыТакта.РазмещениеКНачалу Тогда
				Если Этап.Начало = '00010101' Тогда
					Этап.Начало = Результат.Начало;
				КонецЕсли;
				Если Этап.ДлительностьЭтапа = 0 Тогда
					Этап.Окончание = Результат.Окончание;
					Этап.Размещен = Истина;
				КонецЕсли;
			Иначе
				Если Этап.Окончание = '00010101' Тогда
					Этап.Окончание = Результат.Окончание;
				КонецЕсли;
				Если Этап.ДлительностьЭтапа = 0 Тогда
					Этап.Начало = Результат.Начало;
					Этап.Размещен = Истина;
				КонецЕсли; 
			КонецЕсли;
			
		Иначе
			ОбработатьОшибкуНеНайденИнтервалУББВ(ПараметрыТакта, РезультатТакта, Этап, Этап.НачалоРазмещения);
		КонецЕсли;
		
	Иначе
		
		Этап.Размещен = Истина;
		Этап.Начало = Этап.НачалоРазмещения;
		Этап.Окончание = Этап.НачалоРазмещения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазместитьПоРасписаниюУББВ(ПараметрыТакта, Подразделение, НачалоРазмещения, Время, РазмещатьВДнях)
	
	Интервал = ?(РазмещатьВДнях,
		НачальныйИнтервалРазмещенияУББВПоКалендарю(ПараметрыТакта, Подразделение, НачалоРазмещения),
		НачальныйИнтервалРазмещенияУББВПоРасписанию(ПараметрыТакта, Подразделение, НачалоРазмещения));
	
	Если Интервал = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Начало = НачалоРазмещенияУББВ(
		ПараметрыТакта.РазмещениеКНачалу, НачалоРазмещения, Интервал, РазмещатьВДнях);
	Окончание = Начало;
	
	Пока Интервал <> Неопределено Цикл
		
		СместитьГраницуРазмещенияУББВ(
			ПараметрыТакта.РазмещениеКНачалу, Интервал, Окончание, Время, РазмещатьВДнях);
		
		Если Время > 0 Тогда
			Интервал = ОчереднойИнтервалРазмещенияУББВ(
				ПараметрыТакта.РасписаниеУББВ, Интервал, РазмещатьВДнях);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("Начало, Окончание", '00010101', '00010101');
	Если Начало <> Окончание Тогда
		
		// Нормализация дат
		Если НЕ ПараметрыТакта.РазмещениеКНачалу Тогда
			ДатаНачалаРазмещения = Начало;
			Начало = Окончание;
			Окончание = ДатаНачалаРазмещения;
		КонецЕсли;
		
		// Приведение дат к границам расписания
		Если РазмещатьВДнях
			И ПараметрыТакта.ИндексУББВ[Подразделение].ЕстьГраницы Тогда
			
			Границы = ГраницыДняПоРасписанию(ПараметрыТакта.РасписаниеУББВ, Подразделение, НачалоДня(Начало));
			Если ЗначениеЗаполнено(Границы.Начало) Тогда
				Начало = НачалоДня(Начало) + ВремяВСекунды(Границы.Начало);
			КонецЕсли;
			
			ДатаГрафикаОкончание = НачалоДня(Окончание-1);
			Если НачалоДня(Начало) <> ДатаГрафикаОкончание Тогда
				Границы = ГраницыДняПоРасписанию(ПараметрыТакта.РасписаниеУББВ, Подразделение, ДатаГрафикаОкончание);
			КонецЕсли;
			Если ЗначениеЗаполнено(Границы.Окончание) Тогда
				Окончание = ДатаГрафикаОкончание + ВремяВСекунды(Границы.Окончание);
			КонецЕсли;
	
		КонецЕсли;
		
		Результат.Начало = Начало;
		Результат.Окончание = Окончание;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция НачальныйИнтервалРазмещенияУББВПоКалендарю(ПараметрыТакта, Подразделение, НачалоРазмещения)
	
	Если ПараметрыТакта.РазмещениеКНачалу Тогда
		
		Дата = ?(НачалоРазмещения = НачалоДня(НачалоРазмещения),
			НачалоРазмещения,
			КонецДня(НачалоРазмещения) + 1);
		СтруктураПоиска = Новый Структура("Подразделение, Дата", Подразделение, Дата);
		
		НайденныеСтроки = ПараметрыТакта.РасписаниеУББВ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			Возврат НайденныеСтроки[0];
		ИначеЕсли ПараметрыТакта.ИндексУББВ[Подразделение] <> Неопределено Тогда
			Для Индекс = ПараметрыТакта.ИндексУББВ[Подразделение].Начало
					По ПараметрыТакта.ИндексУББВ[Подразделение].Окончание Цикл
				Если ПараметрыТакта.РасписаниеУББВ[Индекс].Дата >= Дата Тогда
					Возврат ПараметрыТакта.РасписаниеУББВ[Индекс];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	Иначе
		
		Дата = НачалоДня(НачалоРазмещения - 86400);
		СтруктураПоиска = Новый Структура("Подразделение, Дата", Подразделение, Дата);
		
		НайденныеСтроки = ПараметрыТакта.РасписаниеУББВ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			Возврат НайденныеСтроки[0];
		ИначеЕсли ПараметрыТакта.ИндексУББВ[Подразделение] <> Неопределено Тогда
			Для Индекс = ПараметрыТакта.ИндексУББВ[Подразделение].Начало
					По ПараметрыТакта.ИндексУББВ[Подразделение].Окончание Цикл
				Если ПараметрыТакта.РасписаниеУББВ[Индекс].Дата <= Дата Тогда
					Возврат ПараметрыТакта.РасписаниеУББВ[Индекс];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НачальныйИнтервалРазмещенияУББВПоРасписанию(ПараметрыТакта, Подразделение, НачалоРазмещения)
	
	Если ПараметрыТакта.ИндексУББВ[Подразделение] = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыТакта.РазмещениеКНачалу Тогда
		
		Для Индекс = ПараметрыТакта.ИндексУББВ[Подразделение].Начало
				По ПараметрыТакта.ИндексУББВ[Подразделение].Окончание Цикл
			Если НачалоРазмещения < ПараметрыТакта.РасписаниеУББВ[Индекс].Окончание Тогда
				Возврат ПараметрыТакта.РасписаниеУББВ[Индекс];
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Индекс = ПараметрыТакта.ИндексУББВ[Подразделение].Начало
				По ПараметрыТакта.ИндексУББВ[Подразделение].Окончание Цикл
			Если НачалоРазмещения > ПараметрыТакта.РасписаниеУББВ[Индекс].Начало Тогда
				Возврат ПараметрыТакта.РасписаниеУББВ[Индекс];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НачалоРазмещенияУББВ(РазмещениеКНачалу, НачалоРазмещения, Интервал, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		
		Если РазмещениеКНачалу Тогда
			Результат = Интервал.Дата;
		Иначе
			Результат = КонецДня(Интервал.Дата) + 1;
		КонецЕсли;
		
	Иначе
		
		Если НачалоРазмещения >= Интервал.Начало
			И НачалоРазмещения <= Интервал.Окончание Тогда
			Результат = НачалоРазмещения;
		Иначе
			Если РазмещениеКНачалу Тогда
				Результат = Интервал.Начало;
			Иначе
				Результат = Интервал.Окончание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СместитьГраницуРазмещенияУББВ(РазмещениеКНачалу, Интервал, ГраницаРазмещения, ОсталосьРазместить, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		
		Если РазмещениеКНачалу Тогда
			ГраницаРазмещения = КонецДня(Интервал.Дата) + 1;
		Иначе
			ГраницаРазмещения = Интервал.Дата;
		КонецЕсли;
		
		ОсталосьРазместить = ОсталосьРазместить - 1;
		
	Иначе
		
		Если ГраницаРазмещения >= Интервал.Начало
			И ГраницаРазмещения <= Интервал.Окончание Тогда
			
			Если РазмещениеКНачалу Тогда
				
				ДоступноеВремя = Интервал.Окончание - ГраницаРазмещения;
				ВремяСмещения = Мин(ОсталосьРазместить, ДоступноеВремя);
				ГраницаРазмещения = ГраницаРазмещения + ВремяСмещения;
				
			Иначе
				
				ДоступноеВремя = ГраницаРазмещения - Интервал.Начало;
				ВремяСмещения = Мин(ОсталосьРазместить, ДоступноеВремя);
				ГраницаРазмещения = ГраницаРазмещения - ВремяСмещения;
				
			КонецЕсли;
			
			ОсталосьРазместить = ОсталосьРазместить - ВремяСмещения;
			
		Иначе
			
			ВремяСмещения = Мин(ОсталосьРазместить, Интервал.Длительность);
			
			Если РазмещениеКНачалу Тогда
				ГраницаРазмещения = Интервал.Начало + ВремяСмещения;
			Иначе
				ГраницаРазмещения = Интервал.Окончание - ВремяСмещения;
			КонецЕсли;
			
			ОсталосьРазместить = ОсталосьРазместить - ВремяСмещения;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Очередной интервал размещения УББВ.
// 
// Параметры:
//  РасписаниеУББВ - ТаблицаЗначений - Расписание УББВ
//  Интервал - СтрокаТаблицыЗначений - Интервал
//  РазмещатьВДнях - Булево - Размещать в днях
// 
// Возвращаемое значение:
//  Неопределено - Очередной интервал размещения УББВ
Функция ОчереднойИнтервалРазмещенияУББВ(РасписаниеУББВ, Интервал, РазмещатьВДнях)
	
	Результат = Неопределено;
	Для Индекс = РасписаниеУББВ.Индекс(Интервал)+1 По РасписаниеУББВ.Количество()-1 Цикл
		
		СледующийИнтервал = РасписаниеУББВ[Индекс];
		Если СледующийИнтервал.Подразделение = Интервал.Подразделение Тогда
			
			Если РазмещатьВДнях Тогда
				Если СледующийИнтервал.Дата <> Интервал.Дата  Тогда
					Результат = СледующийИнтервал;
					Прервать;
				КонецЕсли;
			Иначе
				Результат = СледующийИнтервал;
				Прервать;
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ГраницыДняПоРасписанию(РасписаниеУББВ, Подразделение, Дата)
	
	Результат = Новый Структура("Начало, Окончание", '00010101', '00010101');
	
	СтруктураПоиска = Новый Структура("Подразделение, Дата", Подразделение, Дата);
	НайденныеСтроки = РасписаниеУББВ.НайтиСтроки(СтруктураПоиска);
		
	Для Индекс = 0 По НайденныеСтроки.ВГраница() Цикл
		
		Если Индекс = 0 Тогда
			Результат.Начало = НайденныеСтроки[Индекс].ВремяНачала;
			Результат.Окончание = НайденныеСтроки[Индекс].ВремяОкончания;
		Иначе
			Результат.Начало = Мин(Результат.Начало, НайденныеСтроки[Индекс].ВремяНачала);
			Результат.Окончание = Макс(Результат.Окончание, НайденныеСтроки[Индекс].ВремяОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеЭтапов

Функция ПервыеУзлы(ДанныеИсточника, СтруктураЗаказаКеш)
	
	ТекстыЗапроса = Новый Массив;
	
	Если ДанныеИсточника.ЭтоСборка Тогда
		
		ТекстыЗапроса.Добавить( 
			"ВЫБРАТЬ
			|	СтруктураЗаказа1.КлючПартия КАК КлючПартия,
			|	ВЫБОР
			|		КОГДА СтруктураЗаказа1.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА СтруктураЗаказа1.ПартияПроизводства
			|		КОГДА СтруктураЗаказа1.ЭтоПеремещение
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ СтруктураЗаказа1.Спецификация
			|	КОНЕЦ                       КАК Ссылка,
			|	ВЫБОР
			|		КОГДА СтруктураЗаказа1.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА &ВидУзлаПартияЭтапов
			|		КОГДА СтруктураЗаказа1.ЭтоПеремещение
			|			ТОГДА &ВидУзлаПеремещение
			|		ИНАЧЕ &ВидУзлаПартияСтруктуры
			|	КОНЕЦ                       КАК ВидУзла
			|ПОМЕСТИТЬ ВТУзлы
			|ИЗ
			|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа1
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешСтруктураЗаказа КАК СтруктураЗаказа2
			|	ПО СтруктураЗаказа1.КлючНоменклатура = СтруктураЗаказа2.КлючНоменклатура
			|		И СтруктураЗаказа1.КлючПартия <> СтруктураЗаказа2.КлючПартия
			|		И СтруктураЗаказа1.ЭтоВыпуск = &ЭтоВыпуск
			|		И СтруктураЗаказа2.ЭтоВыпуск <> &ЭтоВыпуск
			|
			|СГРУППИРОВАТЬ ПО
			|	СтруктураЗаказа1.КлючПартия,
			|	ВЫБОР
			|		КОГДА СтруктураЗаказа1.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА СтруктураЗаказа1.ПартияПроизводства
			|		КОГДА СтруктураЗаказа1.ЭтоПеремещение
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ СтруктураЗаказа1.Спецификация
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА СтруктураЗаказа1.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА &ВидУзлаПартияЭтапов
			|		КОГДА СтруктураЗаказа1.ЭтоПеремещение
			|			ТОГДА &ВидУзлаПеремещение
			|		ИНАЧЕ &ВидУзлаПартияСтруктуры
			|	КОНЕЦ
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(СтруктураЗаказа2.КлючПартия ЕСТЬ NULL) = ИСТИНА
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидУзла");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаУзлыЭтапыВидыРЦ(ДанныеИсточника.РазмещениеКНачалу));
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВТУзлы");
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ";");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураЗаказаКеш;
	
	Запрос.УстановитьПараметр("НачалоРазмещения", ДанныеИсточника.НачалоРазмещения);
	Запрос.УстановитьПараметр("ЭтоВыпуск", НЕ ДанныеИсточника.РазмещениеКНачалу);
	Запрос.УстановитьПараметр("ВидУзлаПартияЭтапов", ВидУзлаПартияЭтапов());
	Запрос.УстановитьПараметр("ВидУзлаПеремещение", ВидУзлаПеремещение());
	Запрос.УстановитьПараметр("ВидУзлаПартияСтруктуры", ВидУзлаПартияСтруктуры());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаУзлы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-3].Выбрать();
	ВыборкаЭтапы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выбрать();
	ВыборкаВидыРЦ = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
	
	Если НЕ ВыборкаЭтапы.Следующий() Тогда
		ВыборкаЭтапы = Неопределено;
	КонецЕсли;
	Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
		ВыборкаВидыРЦ = Неопределено;
	КонецЕсли;
	
	ДанныеРазмещения = НовыйДанныеРазмещения();
	
	Пока ВыборкаУзлы.Следующий() Цикл
		
		НоваяСтрокаУзлы = ДанныеРазмещения.Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУзлы, ВыборкаУзлы);
		НоваяСтрокаУзлы.Этапы = Новый Массив;
		
		Пока ВыборкаЭтапы <> Неопределено
			И ВыборкаЭтапы.КлючПартия = ВыборкаУзлы.КлючПартия Цикл
			
			НоваяСтрокаЭтапы = ДанныеРазмещения.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапы, ВыборкаЭтапы);
			НоваяСтрокаУзлы.Этапы.Добавить(НоваяСтрокаЭтапы);
			
			Если ВыборкаЭтапы.ЭтоББВ Тогда
				
				НоваяСтрокаЭтапы.ВидыРЦ = Новый Массив;
				
				Пока ВыборкаВидыРЦ <> Неопределено
					И ВыборкаВидыРЦ.КлючПартия = ВыборкаЭтапы.КлючПартия
					И ВыборкаВидыРЦ.Этап = ВыборкаЭтапы.Этап Цикл
					
					НоваяСтрокаВидыРЦ = ДанныеРазмещения.ВидыРЦ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВидыРЦ, ВыборкаВидыРЦ);
					НоваяСтрокаЭтапы.ВидыРЦ.Добавить(НоваяСтрокаВидыРЦ);
					
					Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
						ВыборкаВидыРЦ = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ВыборкаЭтапы.Следующий() Тогда
				ВыборкаЭтапы = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеРазмещения;
	
КонецФункции

Функция УзлыКПересчету(ДанныеИсточника, СтруктураЗаказаКеш, Граница, ГрафикКЗаписи)
	
	ТекстыЗапроса = Новый Массив;
	
	// График к записи (партии, размещенные слева и справа от границы пересчета)
	Если ДанныеИсточника.РазмещениеКНачалу Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	График.РазделительЗаписи   КАК РазделительЗаписи,
			|	График.КлючПартия          КАК КлючПартия,
			|	График.Начало              КАК Начало,
			|	График.Окончание           КАК Окончание,
			|	График.Этап                КАК Этап
			|ПОМЕСТИТЬ ВТГрафикКЗаписи
			|ИЗ
			|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
			|ГДЕ
			|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
			|	И График.КлючПартия <> &ПустойКлючСвязи
			|	И График.РазделительЗаписи >= &РазделительЗаписи
			|	И ИСТИНА В (
			|				ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК ГрафикПредшественник
			|				ГДЕ
			|					ГрафикПредшественник.ЗаказНаПроизводство = &ЗаказНаПроизводство
			|					И ГрафикПредшественник.КлючПартия = График.КлючПартия
			|					И ГрафикПредшественник.Начало < &РазделительЗаписи)
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючПартия");
	Иначе
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	График.РазделительЗаписи   КАК РазделительЗаписи,
			|	График.КлючПартия          КАК КлючПартия,
			|	График.Начало              КАК Начало,
			|	График.Окончание           КАК Окончание,
			|	График.Этап                КАК Этап
			|ПОМЕСТИТЬ ВТГрафикКЗаписи
			|ИЗ
			|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
			|ГДЕ
			|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
			|	И График.КлючПартия <> &ПустойКлючСвязи
			|	И График.РазделительЗаписи <= &РазделительЗаписи
			|	И ИСТИНА В (
			|				ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК ГрафикПредшественник
			|				ГДЕ
			|					ГрафикПредшественник.ЗаказНаПроизводство = &ЗаказНаПроизводство
			|					И ГрафикПредшественник.КлючПартия = График.КлючПартия
			|					И ВЫБОР
			|						КОГДА ГрафикПредшественник.Окончание = ГрафикПредшественник.Начало
			|							ТОГДА ГрафикПредшественник.Окончание
			|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ГрафикПредшественник.Окончание, СЕКУНДА, 1)
			|					КОНЕЦ > &СледующийРазделительЗаписи)
			|						
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючПартия");
	КонецЕсли;
	
	// ВТУзлы
	Если ДанныеИсточника.ЭтоСборка Тогда
		
		Если ДанныеИсточника.РазмещениеКНачалу Тогда
			
			ТекстыЗапроса.Добавить(
				"// Узлы к пересчету
				|ВЫБРАТЬ
				|	СтруктураЗаказа.КлючПартия КАК КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ                      КАК Ссылка,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ                      КАК ВидУзла
				|ПОМЕСТИТЬ ВТУзлы
				|ИЗ
				|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
				|	ПО График.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешСтруктураЗаказа КАК Предшественники
				|	ПО НЕ СтруктураЗаказа.ЭтоВыпуск
				|		И Предшественники.ЭтоВыпуск
				|		И СтруктураЗаказа.КлючНоменклатура = Предшественники.КлючНоменклатура
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК ГрафикПредшественника
				|	ПО ГрафикПредшественника.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И Предшественники.КлючПартия = ГрафикПредшественника.КлючПартия
				|		И ВЫБОР
				|				КОГДА ГрафикПредшественника.Окончание = ГрафикПредшественника.Начало
				|					ТОГДА ГрафикПредшественника.Окончание
				|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ГрафикПредшественника.Окончание, СЕКУНДА, 1)
				|			КОНЕЦ > &Граница
				|
				|СГРУППИРОВАТЬ ПО
				|	СтруктураЗаказа.КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	МИНИМУМ(График.Начало) >= &Граница
				|	И МИНИМУМ(ГрафикПредшественника.Этап ЕСТЬ NULL) = ИСТИНА
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|// Последователи графика к записи
				|ВЫБРАТЬ
				|	СтруктураЗаказа.КлючПартия КАК КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ                      КАК Ссылка,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ                      КАК ВидУзла
				|ИЗ
				|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
				|	ПО График.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
				|
				|ГДЕ
				|	СтруктураЗаказа.КлючНоменклатура В (
				|		ВЫБРАТЬ
				|			Предшестенники.КлючНоменклатура
				|		ИЗ
				|			ВТКешСвязиКлючей КАК Предшестенники
				|		ГДЕ
				|			Предшестенники.КлючПартия В (
				|				ВЫБРАТЬ
				|					ГрафикКЗаписи.КлючПартия
				|				ИЗ
				|					ВТГрафикКЗаписи КАК ГрафикКЗаписи)
				|			И Предшестенники.ЭтоВыпуск <> &ПоследовательЭтоВыпуск)
				|	И СтруктураЗаказа.ЭтоВыпуск = &ПоследовательЭтоВыпуск
				|
				|СГРУППИРОВАТЬ ПО
				|	СтруктураЗаказа.КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	МИНИМУМ(График.Начало) >= &Граница
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ВидУзла");
			
		Иначе
			
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	СтруктураЗаказа.КлючПартия КАК КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ                      КАК Ссылка,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ                      КАК ВидУзла
				|ПОМЕСТИТЬ ВТУзлы
				|ИЗ
				|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
				|	ПО График.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешСтруктураЗаказа КАК Последователи
				|	ПО СтруктураЗаказа.ЭтоВыпуск
				|		И НЕ Последователи.ЭтоВыпуск
				|		И СтруктураЗаказа.КлючНоменклатура = Последователи.КлючНоменклатура
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК ГрафикПоследователя
				|	ПО ГрафикПоследователя.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И Последователи.КлючПартия = ГрафикПоследователя.КлючПартия
				|		И ГрафикПоследователя.Начало < &Граница
				|
				|СГРУППИРОВАТЬ ПО
				|	СтруктураЗаказа.КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(
				|		ВЫБОР
				|			КОГДА График.Окончание = График.Начало
				|				ТОГДА График.Окончание
				|			ИНАЧЕ ДОБАВИТЬКДАТЕ(График.Окончание, СЕКУНДА, 1)
				|		КОНЕЦ) <= &Граница
				|	И МИНИМУМ(ГрафикПоследователя.Этап ЕСТЬ NULL) = ИСТИНА
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|// Последователи графика к записи
				|ВЫБРАТЬ
				|	СтруктураЗаказа.КлючПартия КАК КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ                      КАК Ссылка,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ                      КАК ВидУзла
				|ИЗ
				|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа
				|
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
				|	ПО График.ЗаказНаПроизводство = &ЗаказНаПроизводство
				|		И СтруктураЗаказа.КлючПартия = График.КлючПартия
				|
				|ГДЕ
				|	СтруктураЗаказа.КлючНоменклатура В (
				|		ВЫБРАТЬ
				|			Предшестенники.КлючНоменклатура
				|		ИЗ
				|			ВТКешСвязиКлючей КАК Предшестенники
				|		ГДЕ
				|			Предшестенники.КлючПартия В (
				|				ВЫБРАТЬ
				|					ГрафикКЗаписи.КлючПартия
				|				ИЗ
				|					ВТГрафикКЗаписи КАК ГрафикКЗаписи)
				|			И Предшестенники.ЭтоВыпуск <> &ПоследовательЭтоВыпуск)
				|	И СтруктураЗаказа.ЭтоВыпуск = &ПоследовательЭтоВыпуск
				|
				|СГРУППИРОВАТЬ ПО
				|	СтруктураЗаказа.КлючПартия,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА СтруктураЗаказа.ПартияПроизводства
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ СтруктураЗаказа.Спецификация
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА СтруктураЗаказа.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
				|			ТОГДА &ВидУзлаПартияЭтапов
				|		КОГДА СтруктураЗаказа.ЭтоПеремещение
				|			ТОГДА &ВидУзлаПеремещение
				|		ИНАЧЕ &ВидУзлаПартияСтруктуры
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(
				|		ВЫБОР
				|			КОГДА График.Окончание = График.Начало
				|				ТОГДА График.Окончание
				|			ИНАЧЕ ДОБАВИТЬКДАТЕ(График.Окончание, СЕКУНДА, 1)
				|		КОНЕЦ) <= &Граница
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ВидУзла");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаУзлыЭтапыВидыРЦ(ДанныеИсточника.РазмещениеКНачалу));
	ТекстыЗапроса.Добавить(ТекстЗапросаСвязиУзлов(ДанныеИсточника.РазмещениеКНачалу, Ложь));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	График.РазделительЗаписи   КАК РазделительЗаписи,
		|	График.КлючПартия          КАК КлючПартия,
		|	График.Начало              КАК Начало,
		|	График.Окончание           КАК Окончание,
		|	График.Этап                КАК Этап
		|ИЗ
		|	ВТГрафикКЗаписи КАК График");
	
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВТГрафикКЗаписи");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВТУзлы");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ";"));
	Запрос.МенеджерВременныхТаблиц = СтруктураЗаказаКеш;
	
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ДанныеИсточника.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("НачалоРазмещения", ДанныеИсточника.НачалоРазмещения);
	Запрос.УстановитьПараметр("РазделительЗаписи", НачалоМесяца(Граница));
	Запрос.УстановитьПараметр("СледующийРазделительЗаписи", КонецМесяца(Граница)+1);
	Запрос.УстановитьПараметр("ВидУзлаПартияЭтапов", ВидУзлаПартияЭтапов());
	Запрос.УстановитьПараметр("ВидУзлаПеремещение", ВидУзлаПеремещение());
	Запрос.УстановитьПараметр("ВидУзлаПартияСтруктуры", ВидУзлаПартияСтруктуры());
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ИспользоватьБуфер", Ложь);
	Запрос.УстановитьПараметр("Область", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ДанныеИсточника.РазмещениеКНачалу Тогда
		Запрос.УстановитьПараметр("Граница", НачалоМесяца(Граница));
		Запрос.УстановитьПараметр("НачалоГрафика", НачалоМесяца(ДанныеИсточника.НачалоРазмещения));
		Запрос.УстановитьПараметр("ОкончаниеГрафика", НачалоМесяца(НачалоМесяца(Граница)-1));
		Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Граница", КонецМесяца(Граница)+1);
		Запрос.УстановитьПараметр("НачалоГрафика", КонецМесяца(Граница)+1);
		Запрос.УстановитьПараметр("ОкончаниеГрафика", НачалоМесяца(ДанныеИсточника.НачалоРазмещения));
		Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаУзлы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-6].Выбрать();
	ВыборкаЭтапы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-5].Выбрать();
	ВыборкаВидыРЦ = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-4].Выбрать();
	ВыборкаСвязи = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-3].Выбрать();
	ГрафикКЗаписи = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выгрузить();
	
	Если НЕ ВыборкаЭтапы.Следующий() Тогда
		ВыборкаЭтапы = Неопределено;
	КонецЕсли;
	Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
		ВыборкаВидыРЦ = Неопределено;
	КонецЕсли;
	Если НЕ ВыборкаСвязи.Следующий() Тогда
		ВыборкаСвязи = Неопределено;
	КонецЕсли;
	
	ДанныеРазмещения = НовыйДанныеРазмещения();
	
	Пока ВыборкаУзлы.Следующий() Цикл
		
		НоваяСтрокаУзлы = ДанныеРазмещения.Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУзлы, ВыборкаУзлы);
		НоваяСтрокаУзлы.Этапы = Новый Массив;
		
		Пока ВыборкаЭтапы <> Неопределено
			И ВыборкаЭтапы.КлючПартия = ВыборкаУзлы.КлючПартия Цикл
			
			// Этапы
			НоваяСтрокаЭтапы = ДанныеРазмещения.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапы, ВыборкаЭтапы);
			НоваяСтрокаУзлы.Этапы.Добавить(НоваяСтрокаЭтапы);
			
			// Виды РЦ
			Если ВыборкаЭтапы.ЭтоББВ Тогда
				Пока ВыборкаВидыРЦ <> Неопределено
					И ВыборкаВидыРЦ.КлючПартия = ВыборкаЭтапы.КлючПартия
					И ВыборкаВидыРЦ.Этап = ВыборкаЭтапы.Этап Цикл
					
					НоваяСтрокаВидыРЦ = ДанныеРазмещения.ВидыРЦ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВидыРЦ, ВыборкаВидыРЦ);
					НоваяСтрокаЭтапы.ВидыРЦ.Добавить(НоваяСтрокаВидыРЦ);
					
					Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
						ВыборкаВидыРЦ = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Связи
			Пока ВыборкаСвязи <> Неопределено
				И ВыборкаСвязи.КлючПартия = ВыборкаЭтапы.КлючПартия
				И ВыборкаСвязи.Этап = ВыборкаЭтапы.Этап Цикл
				
				НоваяСтрокаСвязи = ДанныеРазмещения.Связи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязи, ВыборкаСвязи);
				НоваяСтрокаЭтапы.Связи.Добавить(НоваяСтрокаСвязи);
				
				Если НЕ ВыборкаСвязи.Следующий() Тогда
					ВыборкаСвязи = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВыборкаЭтапы.Следующий() Тогда
				ВыборкаЭтапы = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ГрафикКЗаписи.Количество() = 0 Тогда
		ГрафикКЗаписи = Неопределено;
	Иначе
		ГрафикКЗаписи.Индексы.Добавить("РазделительЗаписи");
	КонецЕсли;
	
	Возврат ДанныеРазмещения;
	
КонецФункции

Процедура ПрочитатьПоследующиеУзлы(ПараметрыТакта, Узлы, УзлыИсключить, ДанныеРазмещения)
	
	ТекстыЗапроса = Новый Массив;
	
	Если ПараметрыТакта.ЭтоСборка Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Последователи.КлючПартия КАК КлючПартия,
			|	ВЫБОР
			|		КОГДА Последователи.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА Последователи.ПартияПроизводства
			|		КОГДА Последователи.ЭтоПеремещение
			|			ТОГДА НЕОПРЕДЕЛЕНО
			|		ИНАЧЕ Последователи.Спецификация
			|	КОНЕЦ                    КАК Ссылка,
			|	ВЫБОР
			|		КОГДА Последователи.ПартияПроизводства <> ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
			|			ТОГДА &ВидУзлаПартияЭтапов
			|		КОГДА Последователи.ЭтоПеремещение
			|			ТОГДА &ВидУзлаПеремещение
			|		ИНАЧЕ &ВидУзлаПартияСтруктуры
			|	КОНЕЦ                    КАК ВидУзла
			|ПОМЕСТИТЬ ВТУзлы
			|ИЗ
			|	ВТКешСтруктураЗаказа КАК Последователи
			|ГДЕ
			|	Последователи.КлючНоменклатура В (
			|		ВЫБРАТЬ
			|			Предшестенники.КлючНоменклатура
			|		ИЗ
			|			ВТКешСвязиКлючей КАК Предшестенники
			|		ГДЕ
			|			Предшестенники.КлючПартия В (&Узлы)
			|			И Предшестенники.ЭтоВыпуск <> &ПоследовательЭтоВыпуск)
			|	И Последователи.ЭтоВыпуск = &ПоследовательЭтоВыпуск
			|	И Последователи.КлючПартия НЕ В (&УзлыИсключить)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидУзла");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаУзлыЭтапыВидыРЦ(ПараметрыТакта.РазмещениеКНачалу));
	ТекстыЗапроса.Добавить(ТекстЗапросаСвязиУзлов(ПараметрыТакта.РазмещениеКНачалу, ПараметрыТакта.ИспользоватьБуфер));
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВТУзлы");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ";"));
	Запрос.МенеджерВременныхТаблиц = ПараметрыТакта.СтруктураЗаказаКеш;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ПараметрыТакта.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("НачалоРазмещения", ПараметрыТакта.НачалоРазмещения);
	Запрос.УстановитьПараметр("Узлы", Узлы);
	Запрос.УстановитьПараметр("УзлыИсключить", УзлыИсключить);
	Запрос.УстановитьПараметр("ВидУзлаПартияЭтапов", ВидУзлаПартияЭтапов());
	Запрос.УстановитьПараметр("ВидУзлаПеремещение", ВидУзлаПеремещение());
	Запрос.УстановитьПараметр("ВидУзлаПартияСтруктуры", ВидУзлаПартияСтруктуры());
	Запрос.УстановитьПараметр("ИспользоватьБуфер", ПараметрыТакта.ИспользоватьБуфер);
	Запрос.УстановитьПараметр("Область", ПараметрыТакта.Область);
	
	Если ПараметрыТакта.РазмещениеКНачалу Тогда
		
		Запрос.УстановитьПараметр("НачалоГрафика", НачалоМесяца(ПараметрыТакта.НачалоРазмещения));
		Запрос.УстановитьПараметр("ОкончаниеГрафика", ПараметрыТакта.РазделительЗаписи);
		
		Если ПараметрыТакта.ЭтоСборка Тогда
			Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Ложь);
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("НачалоГрафика", ПараметрыТакта.РазделительЗаписи);
		Запрос.УстановитьПараметр("ОкончаниеГрафика", НачалоМесяца(ПараметрыТакта.НачалоРазмещения));
		
		Если ПараметрыТакта.ЭтоСборка Тогда
			Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаУзлы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-4].Выбрать();
	ВыборкаЭтапы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-3].Выбрать();
	ВыборкаВидыРЦ = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выбрать();
	ВыборкаСвязи = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
	
	Если НЕ ВыборкаЭтапы.Следующий() Тогда
		ВыборкаЭтапы = Неопределено;
	КонецЕсли;
	Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
		ВыборкаВидыРЦ = Неопределено;
	КонецЕсли;
	Если НЕ ВыборкаСвязи.Следующий() Тогда
		ВыборкаСвязи = Неопределено;
	КонецЕсли;
	
	Если ДанныеРазмещения.Связи.Индексы.Количество() = 1 Тогда
		ДанныеРазмещения.Связи.Индексы.Удалить(0);
	КонецЕсли;
	
	Пока ВыборкаУзлы.Следующий() Цикл
		
		// Узлы
		НоваяСтрокаУзлы = ДанныеРазмещения.Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУзлы, ВыборкаУзлы);
		
		Пока ВыборкаЭтапы <> Неопределено
			И ВыборкаЭтапы.КлючПартия = ВыборкаУзлы.КлючПартия Цикл
			
			// Этапы
			НоваяСтрокаЭтапы = ДанныеРазмещения.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапы, ВыборкаЭтапы);
			НоваяСтрокаЭтапы.РазмещатьВТекущемТакте = Истина;
			НоваяСтрокаУзлы.Этапы.Добавить(НоваяСтрокаЭтапы);
			
			// Виды РЦ
			Если ВыборкаЭтапы.ЭтоББВ Тогда
				Пока ВыборкаВидыРЦ <> Неопределено
					И ВыборкаВидыРЦ.КлючПартия = ВыборкаЭтапы.КлючПартия
					И ВыборкаВидыРЦ.Этап = ВыборкаЭтапы.Этап Цикл
					
					НоваяСтрокаВидыРЦ = ДанныеРазмещения.ВидыРЦ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВидыРЦ, ВыборкаВидыРЦ);
					НоваяСтрокаЭтапы.ВидыРЦ.Добавить(НоваяСтрокаВидыРЦ);
					
					Если НЕ ВыборкаВидыРЦ.Следующий() Тогда
						ВыборкаВидыРЦ = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Связи
			Пока ВыборкаСвязи <> Неопределено
				И ВыборкаСвязи.КлючПартия = ВыборкаЭтапы.КлючПартия
				И ВыборкаСвязи.Этап = ВыборкаЭтапы.Этап Цикл
				
				НоваяСтрокаСвязи = ДанныеРазмещения.Связи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязи, ВыборкаСвязи);
				НоваяСтрокаЭтапы.Связи.Добавить(НоваяСтрокаСвязи);
				
				Если НЕ ВыборкаСвязи.Следующий() Тогда
					ВыборкаСвязи = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВыборкаЭтапы.Следующий() Тогда
				ВыборкаЭтапы = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеРазмещения.Связи.Индексы.Добавить("КлючПартияПредшественник, ЭтапПредшественник");
	
КонецПроцедуры

Функция ТекстЗапросаУзлыЭтапыВидыРЦ(РазмещениеКНачалу)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Партии.КлючПартия       КАК КлючПартия,
		|	Партии.КоличествоПартий КАК КоличествоПартий
		|ИЗ
		|	ВТКешКоличествоПартий КАК Партии
		|ГДЕ
		|	Партии.КлючПартия В (
		|		ВЫБРАТЬ
		|			Т.КлючПартия
		|		ИЗ
		|			ВТУзлы КАК Т)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партии.КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Узлы.КлючПартия                                    КАК КлючПартия,
		|	Этапы.Ссылка                                       КАК Этап,
		|	Этапы.Подразделение                                КАК Подразделение,
		|	Этапы.Подразделение.ИнтервалПланирования           КАК Интервал,
		|	Этапы.Подразделение.НачалоИнтервалаПланирования    КАК ИнтервалНачало,
		|	Этапы.Подразделение.ОкончаниеИнтервалаПланирования КАК ИнтервалОкончание,
		|	ВЫБОР
		|		КОГДА Этапы.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА НАЧАЛОПЕРИОДА(Этапы.Подразделение.НачалоИнтервалаПланирования, ДЕНЬ) <> Этапы.Подразделение.НачалоИнтервалаПланирования
		|								ИЛИ КОНЕЦПЕРИОДА(Этапы.Подразделение.ОкончаниеИнтервалаПланирования, ДЕНЬ) <> Этапы.Подразделение.ОкончаниеИнтервалаПланирования
		|		КОГДА Этапы.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА НАЧАЛОПЕРИОДА(Этапы.Подразделение.НачалоИнтервалаПланирования, НЕДЕЛЯ) <> Этапы.Подразделение.НачалоИнтервалаПланирования
		|								ИЛИ КОНЕЦПЕРИОДА(Этапы.Подразделение.ОкончаниеИнтервалаПланирования, НЕДЕЛЯ) <> Этапы.Подразделение.ОкончаниеИнтервалаПланирования
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИнтервалИмеетНестандартныеГраницы,
		|	Этапы.НомерЭтапа                                   КАК НомерЭтапа,
		|	Этапы.НомерСледующегоЭтапа                         КАК НомерСледующегоЭтапа,
		|	Этапы.ПланироватьРаботуВидовРабочихЦентров         КАК ЭтоББВ,
		|	Этапы.ПорядокРаботыВидовРабочихЦентров             КАК ПорядокРаботыВидовРЦ,
		|	ЛОЖЬ                                               КАК ВремяВидовРЦРассчитано,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ДлительностьЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ДлительностьЭтапа * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ДлительностьЭтапа * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ДлительностьЭтапа
		|	КОНЕЦ                                              КАК ДлительностьЭтапа,
		|	Этапы.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ЭтапРазмещатьВДнях,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияПредварительногоБуфера
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ПредварительныйБуфер
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ПредварительныйБуфер * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ПредварительныйБуфер * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ПредварительныйБуфер
		|	КОНЕЦ                                              КАК ПредварительныйБуфер,
		|	Этапы.ЕдиницаИзмеренияПредварительногоБуфера = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ПредварительныйБуферРазмещатьВДнях,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияЗавершающегоБуфера
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ЗавершающийБуфер
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ЗавершающийБуфер * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ЗавершающийБуфер * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ЗавершающийБуфер
		|	КОНЕЦ                                              КАК ЗавершающийБуфер,
		|	Этапы.ЕдиницаИзмеренияЗавершающегоБуфера = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ЗавершающийБуферРазмещатьВДнях,
		|	ЛОЖЬ                                               КАК Размещен,
		|	&НачалоРазмещения                                  КАК НачалоРазмещения,
		|	ЛОЖЬ                                               КАК ЭтоПеремещение,
		|	Этапы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоПартий
		|ИЗ
		|	ВТУзлы КАК Узлы
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
		|	ПО Узлы.Ссылка = Этапы.Владелец
		|
		|ГДЕ
		|	Узлы.ВидУзла = &ВидУзлаПартияСтруктуры
		|	И НЕ Этапы.ПометкаУдаления
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТКешКоличествоПартий КАК Т
		|		ГДЕ
		|			Т.КлючПартия = Узлы.КлючПартия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Узлы.КлючПартия                                    КАК КлючПартия,
		|	Этапы.Ссылка                                       КАК Этап,
		|	Этапы.Подразделение                                КАК Подразделение,
		|	Этапы.Подразделение.ИнтервалПланирования           КАК Интервал,
		|	Этапы.Подразделение.НачалоИнтервалаПланирования    КАК ИнтервалНачало,
		|	Этапы.Подразделение.ОкончаниеИнтервалаПланирования КАК ИнтервалОкончание,
		|	ВЫБОР
		|		КОГДА Этапы.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА НАЧАЛОПЕРИОДА(Этапы.Подразделение.НачалоИнтервалаПланирования, ДЕНЬ) <> Этапы.Подразделение.НачалоИнтервалаПланирования
		|								ИЛИ КОНЕЦПЕРИОДА(Этапы.Подразделение.ОкончаниеИнтервалаПланирования, ДЕНЬ) <> Этапы.Подразделение.ОкончаниеИнтервалаПланирования
		|		КОГДА Этапы.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА НАЧАЛОПЕРИОДА(Этапы.Подразделение.НачалоИнтервалаПланирования, НЕДЕЛЯ) <> Этапы.Подразделение.НачалоИнтервалаПланирования
		|								ИЛИ КОНЕЦПЕРИОДА(Этапы.Подразделение.ОкончаниеИнтервалаПланирования, НЕДЕЛЯ) <> Этапы.Подразделение.ОкончаниеИнтервалаПланирования
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                              КАК ИнтервалИмеетНестандартныеГраницы,
		|	Этапы.НомерЭтапа                                   КАК НомерЭтапа,
		|	Этапы.НомерСледующегоЭтапа                         КАК НомерСледующегоЭтапа,
		|	Этапы.ПланироватьРаботуВидовРабочихЦентров         КАК ЭтоББВ,
		|	Этапы.ПорядокРаботыВидовРабочихЦентров             КАК ПорядокРаботыВидовРЦ,
		|	ИСТИНА                                             КАК ВремяВидовРЦРассчитано,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияДлительностиЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ДлительностьЭтапа
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ДлительностьЭтапа * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ДлительностьЭтапа * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ДлительностьЭтапа
		|	КОНЕЦ                                              КАК ДлительностьЭтапа,
		|	Этапы.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ЭтапРазмещатьВДнях,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияПредварительногоБуфера
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ПредварительныйБуфер
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ПредварительныйБуфер * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ПредварительныйБуфер * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ПредварительныйБуфер
		|	КОНЕЦ                                              КАК ПредварительныйБуфер,
		|	Этапы.ЕдиницаИзмеренияПредварительногоБуфера = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ПредварительныйБуферРазмещатьВДнях,
		|	ВЫБОР Этапы.ЕдиницаИзмеренияЗавершающегоБуфера
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|			ТОГДА Этапы.ЗавершающийБуфер
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Этапы.ЗавершающийБуфер * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Этапы.ЗавершающийБуфер * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
		|			ТОГДА Этапы.ЗавершающийБуфер
		|	КОНЕЦ                                              КАК ЗавершающийБуфер,
		|	Этапы.ЕдиницаИзмеренияЗавершающегоБуфера = ЗНАЧЕНИЕ(
		|		Перечисление.ЕдиницыИзмеренияВремени.День)     КАК ЗавершающийБуферРазмещатьВДнях,
		|	ЛОЖЬ                                               КАК Размещен,
		|	&НачалоРазмещения                                  КАК НачалоРазмещения,
		|	ЛОЖЬ                                               КАК ЭтоПеремещение,
		|	1                                                  КАК ОдновременноПроизводимоеКоличествоПартий
		|ИЗ
		|	ВТУзлы КАК Узлы
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
		|	ПО Узлы.Ссылка = Этапы.ПартияПроизводства
		|
		|ГДЕ
		|	Узлы.ВидУзла = &ВидУзлаПартияЭтапов
		|	И Этапы.Проведен
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТКешКоличествоПартий КАК Т
		|		ГДЕ
		|			Т.КлючПартия = Узлы.КлючПартия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Узлы.КлючПартия   КАК КлючПартия,
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)    КАК Этап,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО      КАК Интервал,
		|	НЕОПРЕДЕЛЕНО      КАК ИнтервалНачало,
		|	НЕОПРЕДЕЛЕНО      КАК ИнтервалОкончание,
		|	ЛОЖЬ              КАК ИнтервалИмеетНестандартныеГраницы,
		|	0                 КАК НомерЭтапа,
		|	0                 КАК НомерСледующегоЭтапа,
		|	ЛОЖЬ              КАК ЭтоББВ,
		|	НЕОПРЕДЕЛЕНО      КАК ПорядокРаботыВидовРЦ,
		|	ЛОЖЬ              КАК ВремяВидовРЦРассчитано,
		|	ЕСТЬNULL(ДлительностьПеремещения.ДлительностьВДнях, 0) КАК ДлительностьЭтапа,
		|	ИСТИНА            КАК ЭтапРазмещатьВДнях,
		|	0                 КАК ПредварительныйБуфер,
		|	ЛОЖЬ              КАК ПредварительныйБуферРазмещатьВДнях,
		|	0                 КАК ЗавершающийБуфер,
		|	ЛОЖЬ              КАК ЗавершающийБуферРазмещатьВДнях,
		|	ЛОЖЬ              КАК Размещен,
		|	&НачалоРазмещения КАК НачалоРазмещения,
		|	ИСТИНА            КАК ЭтоПеремещение,
		|	1                 КАК ОдновременноПроизводимоеКоличествоПартий
		|ИЗ
		|	ВТУзлы КАК Узлы
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешДлительностьПеремещения КАК ДлительностьПеремещения
		|	ПО Узлы.КлючПартия = ДлительностьПеремещения.КлючПартия
		|ГДЕ
		|	Узлы.ВидУзла = &ВидУзлаПеремещение
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПартия,
		|	&УсловиеУпорядочиванияЭтапов,
		|	Этап
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Узлы.КлючПартия                          КАК КлючПартия,
		|	Этапы.Ссылка                             КАК Этап,
		|	Этапы.НомерЭтапа                         КАК НомерЭтапа,
		|	Виды.НомерСтроки                         КАК НомерСтроки,
		|	Виды.ВидРабочегоЦентра                                     КАК ВидРабочегоЦентра,
		|	Виды.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы КАК УчитыватьДоступность,
		|	ВЫБОР Виды.ВидРабочегоЦентра.ЕдиницаИзмеренияДоступностиРЦ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Виды.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Виды.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА Виды.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 86400
		|	КОНЕЦ                                    КАК МаксимальнаяДоступность,
		|	ВЫБОР
		|		КОГДА Виды.ВидРабочегоЦентра.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА Этапы.Подразделение
		|		ИНАЧЕ Виды.ВидРабочегоЦентра.Календарь
		|	КОНЕЦ                                    КАК КлючГрафика,
		|	Этапы.Подразделение.ИнтервалПланирования КАК Интервал,
		|	ВЫБОР Виды.ЕдиницаИзмерения
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА Виды.ВремяРаботы * 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА Виды.ВремяРаботы * 3600
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|			ТОГДА Виды.ВремяРаботы * 86400
		|		ИНАЧЕ Виды.ВремяРаботы
		|	КОНЕЦ                                    КАК Время,
		|	Виды.АлгоритмРасчетаКоличества           КАК АлгоритмРасчетаКоличества,
		|	ВЫБОР
		|		КОГДА Виды.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|			ТОГДА Виды.ВидРабочегоЦентра.КоличествоРабочихЦентров
		|		ИНАЧЕ ЕСТЬNULL(КоличествоРЦ.КоличествоРабочихЦентров, 0)
		|	КОНЕЦ                                    КАК КоличествоРабочихЦентров
		|ИЗ
		|	ВТУзлы КАК Узлы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
		|		ПО Узлы.Ссылка = Этапы.Владелец
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК Виды
		|		ПО Этапы.Ссылка = Виды.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКешКоличествоРЦ КАК КоличествоРЦ
		|		ПО Виды.ВидРабочегоЦентра = КоличествоРЦ.ВидРабочегоЦентра
		|ГДЕ
		|	Узлы.ВидУзла = &ВидУзлаПартияСтруктуры
		|	И НЕ Этапы.ПометкаУдаления
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТКешКоличествоПартий КАК Т
		|		ГДЕ
		|			Т.КлючПартия = Узлы.КлючПартия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Узлы.КлючПартия                          КАК КлючПартия,
		|	Этапы.Ссылка                             КАК Этап,
		|	Этапы.НомерЭтапа                         КАК НомерЭтапа,
		|	Виды1.НомерСтроки                        КАК НомерСтроки,
		|	ЕСТЬNULL(Виды2.ВидРабочегоЦентра, Виды1.ВидРабочегоЦентра)  КАК ВидРабочегоЦентра,
		|	ВЫБОР
		|		КОГДА Виды2.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|			ТОГДА Виды2.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|		ИНАЧЕ Виды1.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|	КОНЕЦ КАК УчитыватьДоступность,
		|	ВЫБОР
		|		КОГДА Виды2.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|			ТОГДА
		|				ВЫБОР Виды2.ВидРабочегоЦентра.ЕдиницаИзмеренияДоступностиРЦ
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|						ТОГДА Виды2.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 60
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|						ТОГДА Виды2.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 3600
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|						ТОГДА Виды2.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 86400
		|				КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР Виды1.ВидРабочегоЦентра.ЕдиницаИзмеренияДоступностиРЦ
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА Виды1.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА Виды1.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА Виды1.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 86400
		|			КОНЕЦ
		|	КОНЕЦ КАК МаксимальнаяДоступность,
		|	ВЫБОР
		|		КОГДА Виды2.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА Виды2.ВидРабочегоЦентра.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|						ТОГДА Этапы.Подразделение
		|					ИНАЧЕ Виды2.ВидРабочегоЦентра.Календарь
		|				КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА Виды1.ВидРабочегоЦентра.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|					ТОГДА Этапы.Подразделение
		|				ИНАЧЕ Виды1.ВидРабочегоЦентра.Календарь
		|			КОНЕЦ
		|	КОНЕЦ                                    КАК КлючГрафика,
		|	Этапы.Подразделение.ИнтервалПланирования КАК Интервал,
		|	ВЫБОР
		|		КОГДА Виды2.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|			ТОГДА
		|				ВЫБОР Виды2.ЕдиницаИзмерения
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|						ТОГДА Виды2.ВремяРаботы * 60
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|						ТОГДА Виды2.ВремяРаботы * 3600
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|						ТОГДА Виды2.ВремяРаботы * 86400
		|					ИНАЧЕ Виды2.ВремяРаботы
		|				КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР Виды1.ЕдиницаИзмерения
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА Виды1.ВремяРаботы * 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА Виды1.ВремяРаботы * 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА Виды1.ВремяРаботы * 86400
		|				ИНАЧЕ Виды1.ВремяРаботы
		|			КОНЕЦ
		|	КОНЕЦ                                    КАК Время,
		|	""""                                     КАК АлгоритмРасчетаКоличества,
		|	ВЫБОР
		|		КОГДА Виды2.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА Виды2.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|						ТОГДА Виды2.ВидРабочегоЦентра.КоличествоРабочихЦентров
		|					ИНАЧЕ ЕСТЬNULL(КоличествоРЦ2.КоличествоРабочихЦентров, 0)
		|				КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА Виды1.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|					ТОГДА Виды1.ВидРабочегоЦентра.КоличествоРабочихЦентров
		|				ИНАЧЕ ЕСТЬNULL(КоличествоРЦ1.КоличествоРабочихЦентров, 0)
		|			КОНЕЦ
		|	КОНЕЦ                                    КАК КоличествоРабочихЦентров
		|ИЗ
		|	ВТУзлы КАК Узлы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
		|	ПО Узлы.Ссылка = Этапы.ПартияПроизводства
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Виды1
		|	ПО Этапы.Ссылка = Виды1.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК Виды2
		|	ПО Этапы.Ссылка = Виды2.Ссылка
		|		И Виды1.КлючСвязи = Виды2.КлючСвязиВидыРабочихЦентров
		|		И НЕ Виды1.Использовать
		|		И Виды2.Использовать
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешКоличествоРЦ КАК КоличествоРЦ1
		|	ПО Виды1.ВидРабочегоЦентра = КоличествоРЦ1.ВидРабочегоЦентра
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКешКоличествоРЦ КАК КоличествоРЦ2
		|	ПО Виды2.ВидРабочегоЦентра = КоличествоРЦ2.ВидРабочегоЦентра
		|
		|ГДЕ
		|	Узлы.ВидУзла = &ВидУзлаПартияЭтапов
		|	И Этапы.Проведен
		|	И (Виды1.Использовать ИЛИ ЕСТЬNULL(Виды2.Использовать, ЛОЖЬ))
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТКешКоличествоПартий КАК Т
		|		ГДЕ
		|			Т.КлючПартия = Узлы.КлючПартия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПартия,
		|	&УсловиеУпорядочиванияЭтапов,
		|	Этап,
		|	&УсловиеУпорядочиванияВидовРЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеУпорядочиванияЭтапов",
		?(РазмещениеКНачалу, "НомерЭтапа ВОЗР", "НомерЭтапа УБЫВ"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеУпорядочиванияВидовРЦ",
		?(РазмещениеКНачалу, "НомерСтроки ВОЗР", "НомерСтроки УБЫВ"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвязиУзлов(РазмещениеКНачалу, ИспользоватьБуфер)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Связи.КлючПартия               КАК КлючПартия,
		|	Связи.Этап                     КАК Этап,
		|	Связи.КлючПартияПредшественник КАК КлючПартияПредшественник,
		|	Связи.ЭтапПредшественник       КАК ЭтапПредшественник,
		|	&ГрафикНачалоРазмещения        КАК НачалоРазмещения,
		|	ВЫБОР
		|		КОГДА Связи.Этап ССЫЛКА Справочник.ЭтапыПроизводства
		|			ТОГДА ЕСТЬNULL(ЭтапыСправочник.НомерЭтапа, 0)
		|		ИНАЧЕ ЕСТЬNULL(ЭтапыДокумент.НомерЭтапа, 0)
		|	КОНЕЦ                          КАК НомерЭтапа
		|ИЗ
		|	ВТКешСвязиУзлов КАК Связи
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
		|	ПО &ИспользоватьБуфер = ЛОЖЬ
		|		И График.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|		И Связи.КлючПартияПредшественник = График.КлючПартия
		|		И Связи.ЭтапПредшественник = График.Этап
		|		И График.РазделительЗаписи МЕЖДУ &НачалоГрафика И &ОкончаниеГрафика
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БуферРасчетаНормативногоГрафика КАК Буфер
		|	ПО &ИспользоватьБуфер = ИСТИНА
		|		И Буфер.Область = &Область
		|		И Буфер.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|		И Связи.КлючПартияПредшественник = Буфер.КлючПартия
		|		И Связи.ЭтапПредшественник = Буфер.Этап
		|		И Буфер.РазделительЗаписи МЕЖДУ &НачалоГрафика И &ОкончаниеГрафика
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыСправочник
		|	ПО Связи.Этап ССЫЛКА Справочник.ЭтапыПроизводства
		|		И Связи.Этап = ЭтапыСправочник.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыДокумент
		|	ПО Связи.Этап ССЫЛКА Документ.ЭтапПроизводства2_2
		|		И Связи.Этап = ЭтапыДокумент.Ссылка
		|
		|ГДЕ
		|	Связи.КлючПартия В (
		|		ВЫБРАТЬ
		|			Т.КлючПартия
		|		ИЗ
		|			ВТУзлы КАК Т)
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТКешКоличествоПартий КАК Т
		|		ГДЕ
		|			Т.КлючПартия = Связи.КлючПартия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючПартия,
		|	&УсловиеУпорядочиванияВТКешСвязиУзлов,
		|	Этап";
	
	Если РазмещениеКНачалу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГрафикНачалоРазмещения",
			?(ИспользоватьБуфер,
				"ВЫБОР
				|	КОГДА Буфер.Окончание ЕСТЬ NULL
				|		ТОГДА ДАТАВРЕМЯ(1,1,1)
				|	КОГДА Буфер.Окончание = Буфер.Начало
				|		ТОГДА Буфер.Окончание
				|	ИНАЧЕ ДОБАВИТЬКДАТЕ(Буфер.Окончание, СЕКУНДА, 1)
				|КОНЕЦ",
				"ВЫБОР
				|	КОГДА График.Окончание ЕСТЬ NULL
				|		ТОГДА ДАТАВРЕМЯ(1,1,1)
				|	КОГДА График.Окончание = График.Начало
				|		ТОГДА График.Окончание
				|	ИНАЧЕ ДОБАВИТЬКДАТЕ(График.Окончание, СЕКУНДА, 1)
				|КОНЕЦ"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУпорядочиванияВТКешСвязиУзлов", "НомерЭтапа ВОЗР");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГрафикНачалоРазмещения",
			?(ИспользоватьБуфер,
				"ЕСТЬNULL(Буфер.Начало, ДАТАВРЕМЯ(1,1,1))",
				"ЕСТЬNULL(График.Начало, ДАТАВРЕМЯ(1,1,1))"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУпорядочиванияВТКешСвязиУзлов", "НомерЭтапа УБЫВ");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗакешироватьСтруктуруЗаказа(СтруктураЗаказаКеш, ДанныеИсточника, ПолныйРасчет)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.КлючНоменклатура   КАК КлючНоменклатура,
		|	ВложенныйЗапрос.КлючПартия         КАК КлючПартия,
		|	ВложенныйЗапрос.Этап               КАК Этап,
		|	ВложенныйЗапрос.Номенклатура       КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика     КАК Характеристика,
		|	ВложенныйЗапрос.СпособОбеспечения  КАК СпособОбеспечения,
		|	ВложенныйЗапрос.ЭтоВыпуск          КАК ЭтоВыпуск,
		|	ВложенныйЗапрос.ЭтоПеремещение     КАК ЭтоПеремещение,
		|	ВложенныйЗапрос.ПартияПроизводства КАК ПартияПроизводства,
		|	ВложенныйЗапрос.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	МАКСИМУМ(ВложенныйЗапрос.Спецификация)       КАК Спецификация,
		|	СУММА(ВложенныйЗапрос.Запланировано)         КАК Запланировано,
		|	СУММА(ВложенныйЗапрос.Запущено)              КАК Запущено
		|ПОМЕСТИТЬ ВТКешСтруктураЗаказа
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			СтруктураЗаказа.КлючНоменклатура КАК КлючНоменклатура,
		|			СтруктураЗаказа.КлючПартия       КАК КлючПартия,
		|			СтруктураЗаказа.Спецификация     КАК Спецификация,
		|			СтруктураЗаказа.Этап             КАК Этап,
		|			СтруктураЗаказа.Номенклатура     КАК Номенклатура,
		|			СтруктураЗаказа.Характеристика   КАК Характеристика,
		|			ЕСТЬNULL(КэшНСИ.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения,
		|			СтруктураЗаказа.ВидСтроки <> ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление) КАК ЭтоВыпуск,
		|			СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение)
		|				ИЛИ СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|					И ИСТИНА В (
		|						ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказаПеремещение
		|						ГДЕ
		|							СтруктураЗаказаПеремещение.КлючПартия = СтруктураЗаказа.КлючПартия
		|							И СтруктураЗаказаПеремещение.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение)) КАК ЭтоПеремещение,
		|			ЕСТЬNULL(Этапы.ПартияПроизводства, ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК ПартияПроизводства,
		|			СтруктураЗаказа.Запланировано КАК Запланировано,
		|			СтруктураЗаказа.Запущено КАК Запущено,
		|			СтруктураЗаказа.РаспределеноИзПартий + СтруктураЗаказа.РаспределеноИзПартийОбособленно КАК РаспределеноИзПартий,
		|			СтруктураЗаказа.Требуется КАК Требуется
		|		ИЗ
		|			РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
		|				ПО СтруктураЗаказа.Номенклатура = КэшНСИ.Номенклатура
		|					И СтруктураЗаказа.Характеристика = КэшНСИ.Характеристика
		|					И СтруктураЗаказа.Склад = КэшНСИ.Склад
		|					И СтруктураЗаказа.Назначение = КэшНСИ.Назначение
		|					И СтруктураЗаказа.ЗаказНаПроизводство = КэшНСИ.ЗаказНаПроизводство
		|					
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
		|				ПО СтруктураЗаказа.Этап = Этапы.Ссылка
		|		ГДЕ
		|			СтруктураЗаказа.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|			И СтруктураЗаказа.ВидСтроки <> ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция)
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.КлючНоменклатура,
		|	ВложенныйЗапрос.КлючПартия,
		|	ВложенныйЗапрос.Этап,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.СпособОбеспечения,
		|	ВложенныйЗапрос.ЭтоВыпуск,
		|	ВложенныйЗапрос.ЭтоПеремещение,
		|	ВложенныйЗапрос.ПартияПроизводства,
		|	ВложенныйЗапрос.Номенклатура.ВидНоменклатуры
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Требуется) > 0
		|		ИЛИ СУММА(ВложенныйЗапрос.Запланировано) > 0 ИЛИ СУММА(ВложенныйЗапрос.Запущено) > 0 ИЛИ СУММА(ВложенныйЗапрос.РаспределеноИзПартий) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючНоменклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураЗаказа.КлючПартия       КАК КлючПартия,
		|	СтруктураЗаказа.КлючНоменклатура КАК КлючНоменклатура,
		|	СтруктураЗаказа.ЭтоВыпуск        КАК ЭтоВыпуск
		|ПОМЕСТИТЬ ВТКешСвязиКлючей
		|ИЗ
		|	ВТКешСтруктураЗаказа КАК СтруктураЗаказа
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Последователи.КлючПартия      КАК КлючПартия,
		|	Последователи.Этап            КАК Этап,
		|	Предшестенники.КлючПартия     КАК КлючПартияПредшественник,
		|	Предшестенники.Этап           КАК ЭтапПредшественник
		|ПОМЕСТИТЬ ВТКешСвязиУзлов
		|ИЗ
		|	ВТКешСтруктураЗаказа КАК Последователи
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКешСтруктураЗаказа КАК Предшестенники
		|		ПО Последователи.КлючНоменклатура = Предшестенники.КлючНоменклатура
		|ГДЕ
		|	Последователи.ЭтоВыпуск = &ПоследовательЭтоВыпуск
		|	И Предшестенники.ЭтоВыпуск <> &ПоследовательЭтоВыпуск
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.КлючПартия                 КАК КлючПартия,
		|	МАКСИМУМ(ВложенныйЗапрос.КоличествоПартий) КАК КоличествоПартий
		|ПОМЕСТИТЬ ВТКешКоличествоПартий
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Узлы.КлючПартия              КАК КлючПартия,
		|			Узлы.Номенклатура            КАК Номенклатура,
		|			Узлы.Характеристика          КАК Характеристика,
		|			СУММА((Узлы.Запланировано + Запущено)
		|					/ (ISNULL(СпецификацииИзделий.КоличествоУпаковокНаЕдиницуПартииЗапуска, 1) * ISNULL(&ТекстЗапросаКоэффициентУпаковки, 1))
		|				) КАК КоличествоПартий
		|		ИЗ
		|			ВТКешСтруктураЗаказа КАК Узлы
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|			ПО Узлы.Спецификация = СпецификацииИзделий.Спецификация
		|				И Узлы.ВидНоменклатуры = СпецификацииИзделий.ВидНоменклатуры
		|				И СпецификацииИзделий.Номенклатура   В (Узлы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|				И СпецификацииИзделий.Характеристика В (Узлы.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|		ГДЕ
		|			Узлы.ЭтоВыпуск
		|
		|		СГРУППИРОВАТЬ ПО
		|			Узлы.КлючПартия,
		|			Узлы.Номенклатура,
		|			Узлы.Характеристика
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.КлючПартия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	РабочиеЦентры.ВидРабочегоЦентра  КАК ВидРабочегоЦентра,
		|	КОЛИЧЕСТВО(РабочиеЦентры.Ссылка) КАК КоличествоРабочихЦентров
		|ПОМЕСТИТЬ ВТКешКоличествоРЦ
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	НЕ РабочиеЦентры.ПометкаУдаления
		|	И НЕ РабочиеЦентры.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеЦентры.ВидРабочегоЦентра
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРабочегоЦентра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Обеспечение.КлючПартия                                       КАК КлючПартия,
		|	МАКСИМУМ(Потребность.СпособОбеспечения.СрокИсполненияЗаказа) КАК ДлительностьВДнях
		|ПОМЕСТИТЬ ВТКешДлительностьПеремещения
		|ИЗ
		|	ВТКешСтруктураЗаказа КАК Потребность
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКешСтруктураЗаказа КАК Обеспечение
		|		ПО Потребность.КлючНоменклатура = Обеспечение.КлючНоменклатура
		|ГДЕ
		|	НЕ Потребность.ЭтоВыпуск
		|	И Обеспечение.ЭтоВыпуск
		|	И Обеспечение.ЭтоПеремещение
		|
		|СГРУППИРОВАТЬ ПО
		|	Обеспечение.КлючПартия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпецификацииИзделий.Упаковка",
			"СпецификацииИзделий.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = СтруктураЗаказаКеш;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ДанныеИсточника.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("РазмещениеКНачалу", ДанныеИсточника.РазмещениеКНачалу);
	Запрос.УстановитьПараметр("ПолныйРасчет", ПолныйРасчет);
	
	Если ДанныеИсточника.РазмещениеКНачалу Тогда
		
		Если ДанныеИсточника.ЭтоСборка Тогда
			Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Ложь);
		КонецЕсли;
		
	Иначе
		
		Если ДанныеИсточника.ЭтоСборка Тогда
			Запрос.УстановитьПараметр("ПоследовательЭтоВыпуск", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ЧтениеГрафиковРаботы

Процедура ПрочитатьГрафики(ГрафикиКеш, Графики)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка                                           КАК КлючГрафика,
		|	СтруктураПредприятия.ИнтервалПланирования                             КАК Интервал,
		|	ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение) КАК График
		|ПОМЕСТИТЬ ВТГрафикиББВ
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО СтруктураПредприятия.Ссылка = Графики.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	СтруктураПредприятия.ПроизводственноеПодразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРабочихЦентров.Календарь                          КАК КлючГрафика,
		|	ВидыРабочихЦентров.Подразделение.ИнтервалПланирования КАК Интервал,
		|	ВидыРабочихЦентров.Календарь                          КАК График
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|ГДЕ
		|	ВидыРабочихЦентров.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка                                           КАК Подразделение,
		|	ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение) КАК График
		|ПОМЕСТИТЬ ВТГрафикиУББВ
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО СтруктураПредприятия.Ссылка = Графики.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	СтруктураПредприятия.ПроизводственноеПодразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// График для расчет перемещений
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	ОсновнойКалендарьПредприятия.Значение                  КАК График
		|ИЗ
		|	Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Графики.График КАК График
		|ИЗ
		|	ВТГрафикиББВ КАК Графики
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОсновнойКалендарьПредприятия.Значение КАК График
		|ИЗ
		|	Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия");
	
	Запрос.МенеджерВременныхТаблиц = ГрафикиКеш;
	Графики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("График");
	
КонецПроцедуры

Процедура ПрочитатьРасписание(ПараметрыТакта, ГрафикиКеш, Графики, Начало, Окончание)
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(ГрафикиКеш, Графики, Начало, Окончание);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Графики.КлючГрафика КАК КлючГрафика,
		|	Графики.Интервал    КАК Интервал,
		|	ВЫБОР Графики.Интервал
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА НАЧАЛОПЕРИОДА(РасписанияРаботы.ДатаГрафика, ДЕНЬ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА НАЧАЛОПЕРИОДА(РасписанияРаботы.ДатаГрафика, НЕДЕЛЯ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасписанияРаботы.ДатаГрафика, МЕСЯЦ)
		|	КОНЕЦ               КАК Дата
		|ИЗ
		|	ВТГрафикиББВ КАК Графики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК РасписанияРаботы
		|		ПО Графики.График = РасписанияРаботы.ГрафикРаботы
		|ГДЕ
		|	Графики.Интервал В (
		|			ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День),
		|			ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя),
		|			ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц))
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлючГрафика,
		|	Интервал,
		|	&УсловиеУпорядочиванияДата
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Графики.КлючГрафика                                  КАК КлючГрафика,
		|	Графики.Интервал                                     КАК Интервал,
		|
		|	РасписанияРаботы.ДатаГрафика                               КАК Дата,
		|	ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяНачала,
		|	ВЫБОР
		|		КОГДА РасписанияРаботы.ВремяОкончания ЕСТЬ NULL 
		|				ИЛИ РасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59), СЕКУНДА) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), РасписанияРаботы.ВремяОкончания, СЕКУНДА)
		|	КОНЕЦ                                                КАК Длительность
		|ИЗ
		|	ВТГрафикиББВ КАК Графики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК РасписанияРаботы
		|		ПО Графики.График = РасписанияРаботы.ГрафикРаботы
		|ГДЕ
		|	Графики.Интервал = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Графики.Подразделение                                   КАК Подразделение, 
		|	РасписанияРаботы.ДатаГрафика                                  КАК Дата,
		|	ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1))    КАК ВремяНачала,
		|	ЕСТЬNULL(РасписанияРаботы.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяОкончания,
		|
		|	ВЫБОР
		|		КОГДА РасписанияРаботы.ВремяОкончания ЕСТЬ NULL
		|				ИЛИ РасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59), СЕКУНДА) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), РасписанияРаботы.ВремяОкончания, СЕКУНДА)
		|	КОНЕЦ                                                   КАК Длительность,
		|
		|	ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ ЕСТЬNULL(РасписанияРаботы.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ЕстьГраницы
		|
		|ИЗ
		|	ВТГрафикиУББВ КАК Графики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК РасписанияРаботы
		|		ПО Графики.График = РасписанияРаботы.ГрафикРаботы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	&УсловиеУпорядочиванияДата,
		|	&УсловиеУпорядочиванияВремя";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеУпорядочиванияДата",
		?(ПараметрыТакта.РазмещениеКНачалу, "Дата ВОЗР", "Дата УБЫВ"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеУпорядочиванияВремя",
		?(ПараметрыТакта.РазмещениеКНачалу, "ВремяНачала ВОЗР", "ВремяНачала УБЫВ"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ГрафикиКеш;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ГрафикиКеш,, "ВТГрафикиББВ,ВТГрафикиУББВ");
	
	// ББВ
	РасписаниеББВ = РезультатыЗапроса[0].Выгрузить();
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВремяНачала = Дата(Год(Выборка.Дата), Месяц(Выборка.Дата), День(Выборка.Дата),
				Час(Выборка.ВремяНачала), Минута(Выборка.ВремяНачала), Секунда(Выборка.ВремяНачала));
			ВремяОкончания = ВремяНачала + Выборка.Длительность;
			
			Если НЕ ВремяНачала = НачалоЧаса(ВремяНачала) Тогда
				ВремяНачала = КонецЧаса(ВремяНачала) + 1;
			КонецЕсли;
			
			Пока ВремяНачала < ВремяОкончания Цикл
				
				НоваяСтрока = РасписаниеББВ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "КлючГрафика, Интервал");
				НоваяСтрока.Дата = ВремяНачала;
				
				ВремяНачала = КонецЧаса(ВремяНачала) + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		РасписаниеББВ.Сортировать(
			"КлючГрафика, Интервал, Дата " + ?(ПараметрыТакта.РазмещениеКНачалу, "ВОЗР", "УБЫВ"));
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(РасписаниеББВ);
	
	РасписаниеББВ.Индексы.Добавить("КлючГрафика, Интервал, Дата");
	РасписаниеББВ.Индексы.Добавить("КлючГрафика, Интервал");
	
	ПараметрыТакта.РасписаниеББВ = РасписаниеББВ;
	
	// УББВ
	РасписаниеУББВ = РезультатыЗапроса[2].Выгрузить();
	РасписаниеУББВ.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	РасписаниеУББВ.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	ИндексУББВ = Новый Соответствие;
	
	Если РасписаниеУББВ.Количество() > 0 Тогда
		
		Подразделение = РасписаниеУББВ[0].Подразделение;
		ЕстьГраницы = Ложь;
		
		ИндексУББВ.Вставить(Подразделение, Новый Структура("Начало, Окончание, ЕстьГраницы", 0));
		
		Для Индекс = 0 По РасписаниеУББВ.Количество()-1 Цикл
			
			Строка = РасписаниеУББВ[Индекс];
			
			Если Строка.Подразделение <> Подразделение Тогда
				
				ИндексУББВ[Подразделение].Окончание = Индекс - 1;
				ИндексУББВ[Подразделение].ЕстьГраницы = ЕстьГраницы;
				
				Подразделение = Строка.Подразделение;
				ЕстьГраницы = Ложь;
				ИндексУББВ.Вставить(Подразделение, Новый Структура("Начало, Окончание, ЕстьГраницы", Индекс));
				
			КонецЕсли;
			
			Строка.Начало = Дата(Год(Строка.Дата), Месяц(Строка.Дата), День(Строка.Дата),
				Час(Строка.ВремяНачала), Минута(Строка.ВремяНачала), Секунда(Строка.ВремяНачала));
			Строка.Окончание = Строка.Начало + Строка.Длительность;
			
			Если Строка.ЕстьГраницы И НЕ ЕстьГраницы Тогда
				ЕстьГраницы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексУББВ[Подразделение].Окончание = Индекс - 1;
		ИндексУББВ[Подразделение].ЕстьГраницы = ЕстьГраницы;
		
		РасписаниеУББВ.Индексы.Добавить("Подразделение, Дата");
		
	КонецЕсли;
	
	ПараметрыТакта.РасписаниеУББВ = РасписаниеУББВ;
	ПараметрыТакта.ИндексУББВ = ИндексУББВ;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

Функция НовыйПараметрыРасчета()
	
	Результат = Новый Структура();
	
	Результат.Вставить("РаспараллеливатьРасчет", НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Результат.Вставить("КоличествоПотоков", ?(Результат.РаспараллеливатьРасчет, 8, 1));
	Результат.Вставить("ОчередьРасчета", Новый Массив(Результат.КоличествоПотоков));
	Результат.Вставить("ИнтервалПроверкиЗавершенияРасчета", 2);
	Результат.Вставить("ЛимитОшибок", 3);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатРасчетаЗаказа()
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("КоличествоЭтапов", 0);
	Результат.Вставить("Начало", '39991231');
	Результат.Вставить("Окончание", '00010101');
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатТактаРасчета()
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("КоличествоЭтапов", 0);
	Результат.Вставить("Начало", '39991231');
	Результат.Вставить("Окончание", '00010101');
	
	Возврат Результат;
	
КонецФункции

// Новый параметры такта.
// 
// Возвращаемое значение:
//  Структура - Новый параметры такта:
// * ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 -
// * РазмещениеКНачалу - Булево -
// * НачалоРазмещения - Дата -
// * ПолныйРасчет - Булево -
// * ЭтоСборка - Булево -
// * РазделительЗаписи - Дата -
// * РасписаниеББВ - ТаблицаЗначений -
// * РасписаниеУББВ - ТаблицаЗначений -
// * ИндексУББВ - Соответствие из КлючИЗначение - коллекция для быстрого поиска строк расписания:
//   ** Ключ - СправочникСсылка.СтруктураПредприятия - подразделение;
//   ** Значение - Структура:
//     *** Начало - Число - адрес новых двоичных данных файла.
//     *** Окончание - Число - адрес новых двоичных данных текста.
//     *** ЕстьГраницы - Булево - адрес новых двоичных данных текста.
// * СтруктураЗаказаКеш - МенеджерВременныхТаблиц -
// * ГранулаЗаписи - Число -
// * ИспользоватьБуфер - Булево -
// * Область - Неопределено -
Функция НовыйПараметрыТакта()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЗаказНаПроизводство", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	Результат.Вставить("РазмещениеКНачалу", Ложь);
	Результат.Вставить("НачалоРазмещения", '00010101');
	Результат.Вставить("ПолныйРасчет", Истина);
	Результат.Вставить("ЭтоСборка", Ложь);
	Результат.Вставить("РазделительЗаписи", '00010101');
	Результат.Вставить("РасписаниеББВ", Неопределено);
	Результат.Вставить("РасписаниеУББВ", Неопределено);
	Результат.Вставить("ИндексУББВ", Неопределено);
	Результат.Вставить("СтруктураЗаказаКеш", Неопределено);
	Результат.Вставить("ГранулаЗаписи", 4000);
	Результат.Вставить("ИспользоватьБуфер", Ложь);
	Результат.Вставить("Область", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Новый данные размещения.
// 
// Возвращаемое значение:
//  Структура - Новый данные размещения:
// * Узлы - ТаблицаЗначений -:
// ** КлючПартия 
// ** КоличествоПартий - Число -
// ** Этапы - Массив -
// ** ПоследователиПрочитаны - Булево -
// ** Начало - Дата -
// ** Окончание - Дата -
// * Этапы - ТаблицаЗначений -:
// ** КлючПартия 
// ** Этап - СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2 -
// ** Подразделение - СправочникСсылка.СтруктураПредприятия -
// ** Интервал - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// ** ИнтервалНачало - Дата -
// ** ИнтервалОкончание - Дата -
// ** ИнтервалИмеетНестандартныеГраницы - Булево -
// ** РазмещатьВТекущемТакте - Булево -
// ** Размещен - Булево -
// ** НачалоРазмещения - Дата -
// ** Начало - Дата -
// ** Окончание - Дата -
// ** НомерЭтапа - Число -
// ** НомерСледующегоЭтапа - Число -
// ** ЭтоББВ - Булево -
// ** ПорядокРаботыВидовРЦ - ПеречислениеСсылка.ПорядокРаботыВидовРабочихЦентров -
// ** ВремяВидовРЦРассчитано - Булево -
// ** ОдновременноПроизводимоеКоличествоПартий - Число -
// ** ВидыРЦЗапланированы - Булево -
// ** ОкончаниеЗагрузкиВидовРЦ - Дата -
// ** ДлительностьЭтапа - Число -
// ** ПредварительныйБуфер - Число -
// ** ЗавершающийБуфер - Число -
// ** ЭтапРазмещатьВДнях - Булево -
// ** ПредварительныйБуферРазмещатьВДнях - Булево -
// ** ЗавершающийБуферРазмещатьВДнях - Булево -
// ** ЭтоПеремещение - Булево -
// ** СчетчикОшибок - Число -
// ** ВидыРЦ - Массив -
// ** Связи - Массив -
// * ВидыРЦ - ТаблицаЗначений -:
// ** КлючПартия 
// ** Этап - СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2 -
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** УчитыватьДоступность - Булево -
// ** МаксимальнаяДоступность - Число -
// ** КлючГрафика - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари -
// ** Интервал - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// ** Время - Число -
// ** АлгоритмРасчетаКоличества - Строка -
// ** КоличествоРабочихЦентров - Число -
// * Связи - ТаблицаЗначений -:
// ** КлючПартия 
// ** Этап - СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2 -
// ** КлючПартияПредшественник 
// ** ЭтапПредшественник - СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2 -
// ** НачалоРазмещения - Дата -
Функция НовыйДанныеРазмещения()
	
	// Узлы
	Узлы = Новый ТаблицаЗначений();
	Узлы.Колонки.Добавить("КлючПартия", Метаданные.ОпределяемыеТипы.КлючСвязиСтруктурыЗаказа.Тип);
	Узлы.Колонки.Добавить("КоличествоПартий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Узлы.Колонки.Добавить("Этапы", Новый ОписаниеТипов("Массив"));
	Узлы.Колонки.Добавить("ПоследователиПрочитаны", Новый ОписаниеТипов("Булево"));
	Узлы.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	Узлы.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	
	// Этапы
	Этапы = Новый ТаблицаЗначений();
	Этапы.Колонки.Добавить("КлючПартия", Метаданные.ОпределяемыеТипы.КлючСвязиСтруктурыЗаказа.Тип);
	Этапы.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2"));
	
	Этапы.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Этапы.Колонки.Добавить("Интервал", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	Этапы.Колонки.Добавить("ИнтервалНачало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	Этапы.Колонки.Добавить("ИнтервалОкончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	Этапы.Колонки.Добавить("ИнтервалИмеетНестандартныеГраницы", Новый ОписаниеТипов("Булево"));
	
	Этапы.Колонки.Добавить("РазмещатьВТекущемТакте", Новый ОписаниеТипов("Булево"));
	
	Этапы.Колонки.Добавить("Размещен", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("НачалоРазмещения", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	Этапы.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	Этапы.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	
	Этапы.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	Этапы.Колонки.Добавить("НомерСледующегоЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	
	Этапы.Колонки.Добавить("ЭтоББВ", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ПорядокРаботыВидовРЦ", 
		Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРаботыВидовРабочихЦентров"));
	Этапы.Колонки.Добавить("ВремяВидовРЦРассчитано", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ОдновременноПроизводимоеКоличествоПартий",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Этапы.Колонки.Добавить("ВидыРЦЗапланированы", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ОкончаниеЗагрузкиВидовРЦ", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	
	Этапы.Колонки.Добавить("ДлительностьЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Этапы.Колонки.Добавить("ПредварительныйБуфер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	Этапы.Колонки.Добавить("ЗавершающийБуфер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	Этапы.Колонки.Добавить("ЭтапРазмещатьВДнях", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ПредварительныйБуферРазмещатьВДнях", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("ЗавершающийБуферРазмещатьВДнях", Новый ОписаниеТипов("Булево"));
	
	Этапы.Колонки.Добавить("ЭтоПеремещение", Новый ОписаниеТипов("Булево"));
	
	Этапы.Колонки.Добавить("СчетчикОшибок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	
	Этапы.Колонки.Добавить("ВидыРЦ", Новый ОписаниеТипов("Массив"));
	Этапы.Колонки.Добавить("Связи", Новый ОписаниеТипов("Массив"));
	
	// Виды РЦ
	ВидыРЦ = Новый ТаблицаЗначений;
	ВидыРЦ.Колонки.Добавить("КлючПартия", Метаданные.ОпределяемыеТипы.КлючСвязиСтруктурыЗаказа.Тип);
	ВидыРЦ.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2"));
	ВидыРЦ.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ВидыРЦ.Колонки.Добавить("УчитыватьДоступность", Новый ОписаниеТипов("Булево"));
	ВидыРЦ.Колонки.Добавить("МаксимальнаяДоступность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12)));
	ВидыРЦ.Колонки.Добавить("КлючГрафика",
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари"));
	ВидыРЦ.Колонки.Добавить("Интервал", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	ВидыРЦ.Колонки.Добавить("Время", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1)));
	ВидыРЦ.Колонки.Добавить("АлгоритмРасчетаКоличества", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	ВидыРЦ.Колонки.Добавить("КоличествоРабочихЦентров", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 1)));
	
	// Связи между узлами
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("КлючПартия", Метаданные.ОпределяемыеТипы.КлючСвязиСтруктурыЗаказа.Тип);
	Связи.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2"));
	Связи.Колонки.Добавить("КлючПартияПредшественник", Метаданные.ОпределяемыеТипы.КлючСвязиСтруктурыЗаказа.Тип);
	Связи.Колонки.Добавить("ЭтапПредшественник", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2"));
	Связи.Колонки.Добавить("НачалоРазмещения", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты()));
	
	Результат = Новый Структура;
	Результат.Вставить("Узлы", Узлы);
	Результат.Вставить("Этапы", Этапы);
	Результат.Вставить("ВидыРЦ", ВидыРЦ);
	Результат.Вставить("Связи", Связи);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Ошибки

Процедура ЗаписатьОшибку(ЗаказНаПроизводство, ИдентификаторОшибки, ОписаниеОшибки)
	
	Ошибки = Новый ТаблицаЗначений();
	Ошибки.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Ошибки.Колонки.Добавить("ИдентификаторОшибки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Ошибки.Колонки.Добавить("Протокол", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Ошибка = Ошибки.Добавить();
	Ошибка.ЗаказНаПроизводство = ЗаказНаПроизводство;
	Ошибка.ИдентификаторОшибки = ИдентификаторОшибки;
	Ошибка.Протокол = Новый ХранилищеЗначения(ОписаниеОшибки);
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("Ошибки", Ошибки);
	СтруктураОшибок.Вставить("ТипОшибки",
		Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика);
	
	РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ЗарегистрироватьОшибки(СтруктураОшибок);
	
КонецПроцедуры

Процедура ОбработатьОшибкуНеНайденИнтервалУББВ(ПараметрыТакта, РезультатТакта, Этап, НачалоРазмещения)
	
	Если Этап.СчетчикОшибок = ЛимитОшибок() Тогда
		
		ОписаниеОшибки = НовыйОписаниеОшибки();
		Если Этап.ЭтоПеремещение Тогда
			ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалОсновногоГрафика();
		Иначе
			ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалПодразделения();
			ОписаниеОшибки.Подразделение = Этап.Подразделение;
		КонецЕсли;
		ОписаниеОшибки.Дата = НачалоРазмещения;
		ОписаниеОшибки.РазмещениеКНачалу = ПараметрыТакта.РазмещениеКНачалу;
		
		ЗаписатьОшибку(ПараметрыТакта.ЗаказНаПроизводство, Этап.КлючПартия, ОписаниеОшибки);
		
		РезультатТакта.Отказ = Истина;
		
	Иначе
		Этап.СчетчикОшибок = Этап.СчетчикОшибок + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуНеНайденИнтервалББВ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель, НачалоРазмещения)
	
	Если Этап.СчетчикОшибок = ЛимитОшибок() Тогда
		
		ОписаниеОшибки = НовыйОписаниеОшибки();
		ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалББВ();
		ОписаниеОшибки.ВидРабочегоЦентра = Исполнитель.ВидРабочегоЦентра;
		ОписаниеОшибки.Дата = НачалоРазмещения;
		ОписаниеОшибки.РазмещениеКНачалу = ПараметрыТакта.РазмещениеКНачалу; 
		
		ЗаписатьОшибку(ПараметрыТакта.ЗаказНаПроизводство, Этап.КлючПартия, ОписаниеОшибки);
		
		РезультатТакта.Отказ = Истина;
		
	Иначе
		Этап.СчетчикОшибок = Этап.СчетчикОшибок + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуИнтервалыНеПересекаются(ПараметрыТакта, РезультатТакта, Этап)
	
	Если Этап.СчетчикОшибок = ЛимитОшибок() Тогда
		
		ОписаниеОшибки = НовыйОписаниеОшибки();
		ОписаниеОшибки.Код = КодОшибкиИнтервалыНеПересекаются();
		ОписаниеОшибки.Этап = Этап.Этап;
		
		ЗаписатьОшибку(ПараметрыТакта.ЗаказНаПроизводство, Этап.КлючПартия, ОписаниеОшибки);
		
		РезультатТакта.Отказ = Истина;
		
	Иначе
		Этап.СчетчикОшибок = Этап.СчетчикОшибок + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуНулевоеВремяЗагрузкиВРЦ(ПараметрыТакта, РезультатТакта, Этап, Исполнитель)
	
	Если Исполнитель.УчитыватьДоступность
		И Исполнитель.КоличествоРабочихЦентров = 0 Тогда
		
		ОписаниеОшибки = НовыйОписаниеОшибки();
		ОписаниеОшибки.Код = КодОшибкиНулевоеВремяЗагрузкиВРЦ();
		ОписаниеОшибки.ВидРабочегоЦентра = Исполнитель.ВидРабочегоЦентра;
		
		ЗаписатьОшибку(ПараметрыТакта.ЗаказНаПроизводство, Этап.КлючПартия, ОписаниеОшибки);
		
		РезультатТакта.Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КодОшибкиНеНайденИнтервалПодразделения()
	
	Возврат 1;
	
КонецФункции

Функция КодОшибкиНеНайденИнтервалББВ()
	
	Возврат 2;
	
КонецФункции

Функция КодОшибкиИнтервалыНеПересекаются()
	
	Возврат 3;
	
КонецФункции

Функция КодОшибкиНулевоеВремяЗагрузкиВРЦ()
	
	Возврат 4;
	
КонецФункции

// Код ошибки планирования - не найден интервал основного графика.
// 
// Возвращаемое значение:
//  Число - Код ошибки
Функция КодОшибкиНеНайденИнтервалОсновногоГрафика() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция КодОшибкиЗацикливаниеРасчета()
	
	Возврат 6;
	
КонецФункции

Функция ЛимитОшибок()
	Возврат 11;
КонецФункции

Функция НовыйОписаниеОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Код", 0);
	Результат.Вставить("Подразделение", Неопределено);
	Результат.Вставить("ВидРабочегоЦентра", Неопределено);
	Результат.Вставить("Этап", Неопределено);
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("РазмещениеКНачалу", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиЖурналОшибок(Параметры, АдресХранилища) Экспорт
	
	НаборыДанных = Новый Структура("ЖурналОшибок", ЖурналОшибок(Параметры.Заказ));

	СхемаКомпоновкиДанных = РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ПолучитьМакет("ЖурналОшибок");
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной").Настройки; // НастройкиКомпоновкиДанных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрМакетОформления = НастройкиКомпоновкиДанных.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
	ПараметрМакетОформления.Использование = Истина;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		НаборыДанных,
		ДанныеРасшифровки,
		Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных);
	Результат.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ЖурналОшибок(Заказ)
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Расшифровка",
		Новый ОписаниеТипов(
			"СправочникСсылка.СтруктураПредприятия,
			|СправочникСсылка.ВидыРабочихЦентров,
			|СправочникСсылка.ЭтапыПроизводства,
			|ДокументСсылка.ЭтапПроизводства2_2"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ошибки.Протокол КАК ОписаниеОшибки
		|ИЗ
		|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Ошибки
		|ГДЕ
		|	Ошибки.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И Ошибки.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика)");
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОшибкиХранилище = Выборка.ОписаниеОшибки; // ХранилищеЗначения
		ОписаниеОшибки = ОписаниеОшибкиХранилище.Получить();
		Если ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалПодразделения() Тогда
			
			Шаблон = ?(ОписаниеОшибки.РазмещениеКНачалу,
				НСтр("ru = 'Не определен график работы подразделения ""%1"" или данные графика не заполнены после %2.';
					|en = 'The work schedule of the ""%1"" business unit is not determined or the schedule data is not filled after %2.'"),
				НСтр("ru = 'Не определен график работы подразделения ""%1"" или данные графика не заполнены ранее %2.';
					|en = 'The work schedule of the ""%1"" business unit is not determined or the schedule data is not filled before %2.'"));
				
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ТекстСообщения = СтрШаблон(
				Шаблон,
				ОписаниеОшибки.Подразделение,
				Формат(ОписаниеОшибки.Дата, "ДЛФ=D"));
			НоваяСтрока.Расшифровка = ОписаниеОшибки.Подразделение;
		
		ИначеЕсли ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалОсновногоГрафика() Тогда
			
			Шаблон = ?(ОписаниеОшибки.РазмещениеКНачалу,
				НСтр("ru = 'Не определен основной график работы предприятия или данные графика не заполнены после %1.';
					|en = 'The main enterprise work schedule is not determined or the schedule data is not filled after %1.'"),
				НСтр("ru = 'Не определен основной график работы предприятия или данные графика не заполнены ранее %1.';
					|en = 'The main enterprise work schedule is not determined or the schedule data is not filled before %1.'"));
				
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ТекстСообщения = СтрШаблон(
				Шаблон,
				Формат(ОписаниеОшибки.Дата, "ДЛФ=D"));
			
		ИначеЕсли ОписаниеОшибки.Код = КодОшибкиНеНайденИнтервалББВ() Тогда
			
			Шаблон = ?(ОписаниеОшибки.РазмещениеКНачалу,
				НСтр("ru = 'Не определен график работы вида РЦ ""%1"" или данные графика не заполнены после %2.';
					|en = 'The work schedule of the ""%1"" work center type is not determined or the schedule data is not filled after %2.'"),
				НСтр("ru = 'Не определен график работы вида РЦ ""%1"" или данные графика не заполнены ранее %2.';
					|en = 'The work schedule of the ""%1"" work center type is not determined or the schedule data is not filled before %2.'"));
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ТекстСообщения = СтрШаблон(
				Шаблон,
				ОписаниеОшибки.ВидРабочегоЦентра,
				Формат(ОписаниеОшибки.Дата, "ДЛФ=D"));
			НоваяСтрока.Расшифровка = ОписаниеОшибки.ВидРабочегоЦентра;
			
		ИначеЕсли ОписаниеОшибки.Код = КодОшибкиИнтервалыНеПересекаются() Тогда
			
			СпецификацияПредставление = ?(ТипЗнч(ОписаниеОшибки.Этап) = Тип("СправочникСсылка.ЭтапыПроизводства"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОшибки.Этап, "Владелец.Представление"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОшибки.Этап, "Спецификация.Представление"));
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Интервалы работы видов РЦ этапа ""%1"" (спецификация ""%2"") не пересекаются.';
					|en = 'The intervals of operations of the work center types of the ""%1"" stage (the ""%2"" bill of materials) do not overlap.'"),
				ОписаниеОшибки.Этап,
				СпецификацияПредставление);
			НоваяСтрока.Расшифровка = ОписаниеОшибки.Этап;
			
		ИначеЕсли ОписаниеОшибки.Код = КодОшибкиНулевоеВремяЗагрузкиВРЦ() Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для вида РЦ ""%1"" не заданы рабочие центры (количество рабочих центров).';
					|en = 'Work centers (number of work centers) are not specified for the ""%1"" work center type.'"),
				ОписаниеОшибки.ВидРабочегоЦентра);
			НоваяСтрока.Расшифровка = ОписаниеОшибки.ВидРабочегоЦентра;
			
		ИначеЕсли ОписаниеОшибки.Код = КодОшибкиЗацикливаниеРасчета() Тогда
			
			НоваяСтрока = Результат.Добавить();
			Если ЗначениеЗаполнено(ОписаниеОшибки.Этап) Тогда
				СпецификацияПредставление = ?(ТипЗнч(ОписаниеОшибки.Этап) = Тип("СправочникСсылка.ЭтапыПроизводства"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОшибки.Этап, "Владелец.Представление"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОшибки.Этап, "Спецификация.Представление"));
				НоваяСтрока.ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В процессе расчета нормативного графика произошло зацикливание процедуры обработки данных (спецификация ""%1""). Выполнение прервано.';
						|en = 'The looping of the data processing procedure occurred during the target schedule calculation (the ""%1"" bill of materials). Execution terminated.'"),
					СпецификацияПредставление);
			Иначе
				НоваяСтрока.ТекстСообщения = 
					НСтр("ru = 'В процессе расчета нормативного графика произошло зацикливание процедуры обработки данных. Выполнение прервано.';
						|en = 'The looping of the data processing procedure occurred during the calculation of the target schedule. Execution is terminated.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьПротоколОшибок(ЗаказНаПроизводство)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ПротоколРасчетаСтруктурыЗаказа
		|ГДЕ
		|	ПротоколРасчетаСтруктурыЗаказа.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И ПротоколРасчетаСтруктурыЗаказа.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика)");
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Набор = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
		Набор.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
		Набор.Отбор.ТипОшибки.Установить(
			Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРасчетаНормативногоГрафика);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПривестиКНачалуПериода(Дата, Интервал)
	
	Если Интервал = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = НачалоДня(Дата);
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = НачалоНедели(Дата);
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Результат = НачалоМесяца(Дата);
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = НачалоЧаса(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиКОкончаниюПериода(Дата, Интервал)
	
	Если Интервал = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = КонецДня(Дата) + 1;
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = КонецНедели(Дата) + 1;
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Результат = КонецМесяца(Дата) + 1;
	ИначеЕсли Интервал = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = КонецЧаса(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяВСекунды(Время)
	
	Возврат Час(Время)*3600 + Минута(Время)*60 + Секунда(Время);
	
КонецФункции

Функция ВидУзлаПартияЭтапов()
	Возврат 1;
КонецФункции

Функция ВидУзлаПеремещение()
	Возврат 2;
КонецФункции

Функция ВидУзлаПартияСтруктуры()
	Возврат 3;
КонецФункции

// Функция для переопределения поведения
Функция ИспользоватьБуфер()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
