#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураМетаданных() Экспорт
	
	Результат = СтруктураЗаказаПовтИсп.СтруктураМетаданныхРегистра("СтруктураЗаказа");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обновление движений
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтруктураЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("22afef2a-b18d-4e62-81a6-0d0ec5e8e1b3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтруктураЗаказа.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Структура заказа на производство"" по данным документов ""Этап производства"".';
									|en = 'Fills the ""Production order structure"" register based on the ""Production stage"" document data.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтруктураЗаказа.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтруктураЗаказа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	// Заполнение ресурсов РаспределеноИзПартийОбособленно, РаспределеноИзПартий	

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтруктураЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеРесурсов";
	Обработчик.Версия = "2.5.17.81";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2bdf9d3e-e4ec-5f48-be48-118af54b6f33");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтруктураЗаказа.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаполнениеРесурсов";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Реструктуризация хранения данных о запущенных партиях';
									|en = 'Restructure of storing data the launched lots'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтруктураЗаказа.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтруктураЗаказа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрСведений.СтруктураЗаказа";
	ПолноеИмяДокумента = "Документ.ЭтапПроизводства2_2";
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Разделитель");
	НеиспользуемыеПоля.Добавить("РаспределеноИзЗапасовОбособленно");
	НеиспользуемыеПоля.Добавить("РаспределеноИзЗапасов");
	НеиспользуемыеПоля.Добавить("РаспределеноИзПартийОбособленно");
	НеиспользуемыеПоля.Добавить("РаспределеноИзПартий");
	НеиспользуемыеПоля.Добавить("Запланировано");
	НеиспользуемыеПоля.Добавить("ДополнительнаяЗапись");
	НеиспользуемыеПоля.Добавить("ИдентификаторВерсииДанных");
	НеиспользуемыеПоля.Добавить("КоличествоНаЕдиницуПартииЗапуска");
	НеиспользуемыеПоля.Добавить("КлючСвязиСтрокаСпецификации");
	НеиспользуемыеПоля.Добавить("КлючСвязиПеремещение");
	НеиспользуемыеПоля.Добавить("СпецификацияПолуфабриката");
	НеиспользуемыеПоля.Добавить("ГруппаИзделий");
	
	ПоляНесовместимыеСТипомНеопределено = Новый Массив;
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючНоменклатура");
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючПартия");
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючНабор");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра",             ПолноеИмяРегистра);
	
	ЗапросВыборки = ОбновлениеИнформационнойБазыУТ.ЗапросРазличийОтраженияДокументовВНезависимомРегистре(
						Документы.ЭтапПроизводства2_2.АдаптированныйТекстЗапросаДвиженийПоРегистру("СтруктураЗаказа"),
						ПолноеИмяРегистра,
						ПолноеИмяДокумента,
						НеиспользуемыеПоля);
	
	ТекстЗапросаВыборки = ЗапросВыборки.Текст;
	
	Для каждого Поле Из ПоляНесовместимыеСТипомНеопределено Цикл
		
		ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки,
											СтрЗаменить("ИЛИ ВложенныйЗапрос.Поле = НЕОПРЕДЕЛЕНО", "Поле", Поле),
											"");
		
	КонецЦикла;
	
	ТекстУсловиеПоУмолчанию = СтрЗаменить("ТаблицаРегистра.Ссылка ССЫЛКА ПолноеИмяДокумента",
											"ПолноеИмяДокумента",
											ПолноеИмяДокумента);
	
	ТекстУсловие            = СтрЗаменить("ИСТИНА В
										  |		(ВЫБРАТЬ ПЕРВЫЕ 1
										  |			ИСТИНА
										  |		ИЗ
										  |			ПолноеИмяДокумента КАК Таблица
										  |		ГДЕ
										  |			Таблица.Ссылка = ТаблицаРегистра.Этап
										  |				И УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) = ТаблицаРегистра.КлючНабор)",
										  "ПолноеИмяДокумента",
										  ПолноеИмяДокумента);
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, ТекстУсловиеПоУмолчанию, ТекстУсловие);
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.КлючНабор КАК КлючНабор
	|ИЗ
	|	&ТекстЗапросаВыборки КАК НеправильныеДвижения";
	
	ЗапросВыборки.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВыборки", "(" + ТекстЗапросаВыборки + ")");
	
	Данные = ЗапросВыборки.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
 		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СтруктураЗаказа";
	ИмяРегистра = "СтруктураЗаказа";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
		
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.КлючНабор КАК КлючНабор
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|";  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ТекущийДокумент = Документы.ЭтапПроизводства2_2.ПолучитьСсылку(Выборка.КлючНабор);
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтруктураЗаказа");
			ЭлементБлокировки.УстановитьЗначение("КлючНабор", Выборка.КлючНабор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Выборка.КлючНабор);
			НаборЗаписей.Прочитать();
			
			Если ЗначениеЗаполнено(ТекущийДокумент) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокумент, "Проведен") = Истина Тогда
				ТаблицаРегистра = Неопределено;
				ТаблицыДляДвижений = Документы.ЭтапПроизводства2_2.ДанныеДокументаДляПроведения(ТекущийДокумент, ИмяРегистра);
				ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистра, ТаблицаРегистра);
				НаборЗаписей.Загрузить(ТаблицаРегистра);
			Иначе
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();   
						
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущийДокумент);
			
			ШаблонОшибки = НСтр("ru = 'Не удалось записать данные в регистр ""Структура заказа на производство"" по этапу ""%1"":
									   |
									   |%2';
									   |en = 'Cannot save the data into the ""Production order structure"" on the ""%1"" step:
									   |
									   |%2'");
			
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
										ТекущийДокумент,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СтруктураЗаказа,
				ТекущийДокумент,
				ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
										Параметры.Очередь,
										ПолноеИмяРегистра);
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаполнениеРесурсов(Параметры) Экспорт 
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СтруктураЗаказа";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ЗаказНаПроизводство");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ЗаказНаПроизводство");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "КлючНабор";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.СтруктураЗаказа");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	План.КлючНабор КАК КлючНабор
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК План
	|ГДЕ
	|	План.ВидСтроки В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции), 
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|	И План.Запущено <> 0
	|";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеРесурсов(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СтруктураЗаказа";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
		
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.КлючНабор КАК КлючНабор
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|ГДЕ
	|	Истина В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
	|			ГДЕ
	|				СтруктураЗаказа.КлючНабор = ДанныеДляОбработки.КлючНабор
	|				И СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции))
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.КлючНабор
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|ГДЕ
	|	Истина В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
	|			ГДЕ
	|				СтруктураЗаказа.КлючНабор = ДанныеДляОбработки.КлючНабор
	|				И СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтруктураЗаказа");
			ЭлементБлокировки.УстановитьЗначение("КлючНабор", Выборка.КлючНабор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*,
			|	ВЫБОР
			|		КОГДА Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|				И Таблица.Запущено > 0
			|			ТОГДА Таблица.Запущено
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РаспределеноИзПартийОбособленно,
			|	ВЫБОР
			|		КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|				И Таблица.Запущено > 0
			|			ТОГДА Таблица.Запущено
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РаспределеноИзПартий,
			|	0 КАК Запущено
			|ИЗ
			|	РегистрСведений.СтруктураЗаказа КАК Таблица
			|ГДЕ
			|	Таблица.КлючНабор = &КлючНабор";
			Запрос.УстановитьПараметр("КлючНабор", Выборка.КлючНабор);
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Выборка.КлючНабор); 
			НаборЗаписей.Прочитать();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать данные в регистре %ИмяРегистра% по причине: %Причина%';
									|en = 'Cannot process the data in the ""%ИмяРегистра%"" register due to: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПредставлениеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СтруктураЗаказа, 
				Неопределено, 
				ТекстСообщения);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтруктураЗаказа");
			ЭлементБлокировки.УстановитьЗначение("КлючНабор", Выборка.КлючНабор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос.Текст =
			"ВЫБРАТЬ *
			|ИЗ
			|	РегистрСведений.СтруктураЗаказа КАК Таблица
			|ГДЕ 
			|	Таблица.КлючНабор = &КлючНабор 
			|	И НЕ (Таблица.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката)
			|				И Таблица.Запущено <> 0)
			|;";
			Запрос.УстановитьПараметр("КлючНабор", Выборка.КлючНабор);
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Выборка.КлючНабор); 
			НаборЗаписей.Прочитать();
			ЗаданияКРасчету = ОбщегоНазначенияУТ.СвернутаяКопияТаблицы(НаборЗаписей, "Номенклатура,Характеристика,Склад,Назначение");
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		 		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗадания(ЗаданияКРасчету);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;

			ЗафиксироватьТранзакцию(); 
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать данные в регистре %ИмяРегистра% по причине: %Причина%';
									|en = 'Cannot process the data in the ""%ИмяРегистра%"" register due to: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПредставлениеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СтруктураЗаказа, 
				Неопределено, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Если Параметры.ОбработкаЗавершена Тогда
		СтруктураЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли