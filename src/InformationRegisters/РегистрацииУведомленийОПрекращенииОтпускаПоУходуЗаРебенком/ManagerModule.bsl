#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИдентификаторСообщения - Строка - Значение отбора по соответствующему измерению.
//   ИдентификаторСтроки - Строка, Неопределено - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИдентификаторСообщения, ИдентификаторСтроки = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдентификаторСообщения);
		Если ИдентификаторСтроки <> Неопределено Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторСтроки", ИдентификаторСтроки);
		КонецЕсли;
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		Если ИдентификаторСтроки <> Неопределено Тогда
			НаборЗаписей.Отбор.ИдентификаторСтроки.Установить(ИдентификаторСтроки);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Идентификатор = ИдентификаторСообщения + "/" + ИдентификаторСтроки;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить регистрацию уведомления о прекращении отпуска по уходу %1 по причине: %2';
				|en = 'Cannot change registration of a notification to terminate the child care leave %1 due to: %2'"),
			Идентификатор,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком,
			Идентификатор,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

// Загружает ошибку логического контроля (тип 14) полученную в ответ на документ СЭДО 104.
Процедура ЗагрузитьОшибкуСообщения104(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения, "");
	Если Набор.Количество() = 0 Тогда
		КорневаяЗапись = Набор.Добавить();
	Иначе
		КорневаяЗапись = Набор[0];
	КонецЕсли;
	КорневаяЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	КорневаяЗапись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	КорневаяЗапись.Страхователь           = Страхователь;
	КорневаяЗапись.ЕстьОшибкиФЛК          = Истина;
	КорневаяЗапись.ТекстОшибкиФЛК         = ТекстОшибки;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

// Загружает результат уведомления о прекращении отпуска по уходу за ребенком до полутора лет.
Процедура ЗагрузитьСообщение106(Страхователь, РегистрацияИдентификатор, ТекстXML, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	// Пример:
	//<noticeTerminationResponse xmlns="http://www.fss.ru/integration/types/pvso/noticetermination/v01">
	//	<dateTimeReceive>2021-12-20T14:09:06.832+03:00</dateTimeReceive>
	//	<recriveID>1ef9656a-5e97-4b44-9149-a95620f3b69d</recriveID>
	//	<statusGeneral>0</statusGeneral>
	//	<protocol>
	//		<failedList>
	//			<failedBatchNoDetail>
	//				<notificationID>N_3702016817_2021_12_15_0010:7</notificationID>
	//				<errorList>
	//					<error>
	//						<errorCode>ERR_1840</errorCode>
	//						<errorDescription>(Ф)По одному пособию по уходу за ребенком не может быть создано более 1 уведомления о прекращении</errorDescription>
	//					</error>
	//				</errorList>
	//			</failedBatchNoDetail>
	//		</failedList>
	//	</protocol>
	//</noticeTerminationResponse>
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "noticeTerminationResponse");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'dateTimeReceive']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'recriveID']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'statusGeneral']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'protocol']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM;
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "noticeTerminationResponse");
		Возврат;
	КонецЕсли;
	
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "dateTimeReceive, recriveID, statusGeneral, errorList, protocol");
	ИдентификаторСообщения   = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.recriveID);
	РегистрацияДата          = СериализацияБЗК.ДатаИзXML(РеквизитыКорня.dateTimeReceive);
	РегистрацияСтатус        = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.statusGeneral);
	РегистрацияТекстОшибки   = ПредставлениеСпискаОшибок(РеквизитыКорня.errorList);
	ТекстыОшибокПоСтрокам    = ТекстыОшибокПоСтрокам(РеквизитыКорня.protocol);
	
	СведенияОСтатусе = ВозможныеСтатусы().Найти(РегистрацияСтатус, "Статус");
	Если СведенияОСтатусе = Неопределено Тогда
		РегистрацияУспех = Ложь;
	Иначе
		РегистрацияУспех = СведенияОСтатусе.Зарегистрирован;
	КонецЕсли;
	
	// В случае незаполненности идентификатора необходимо проверить наличие стандартного атрибута responseOn.
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
		ИдентификаторСообщения = АтрибутыКорня.responseOn;
	КонецЕсли;
	
	// Если идентификатор не заполнен, значит файл не соответствует схеме.
	Если ИдентификаторСообщения = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "recriveID");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиУзла(Результат, "recriveID");
		Возврат;
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Таблица = Набор.Выгрузить();
	Таблица.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	КорневаяЗапись = Таблица.Найти("", "ИдентификаторСтроки");
	Если КорневаяЗапись = Неопределено Тогда
		КорневаяЗапись = Таблица.Добавить();
	КонецЕсли;
	КорневаяЗапись.Найдена = Истина;
	
	КорневаяЗапись.ИдентификаторСообщения   = ИдентификаторСообщения;
	КорневаяЗапись.ГоловнаяОрганизация      = ГоловнаяОрганизация;
	КорневаяЗапись.Страхователь             = Страхователь;
	КорневаяЗапись.ДоставкаУспех            = Истина; // По факту наличия регистрации считаем документ доставленным.
	КорневаяЗапись.РегистрацияУспех         = РегистрацияУспех;
	КорневаяЗапись.РегистрацияДата          = РегистрацияДата;
	КорневаяЗапись.РегистрацияСтатус        = РегистрацияСтатус;
	КорневаяЗапись.РегистрацияТекстОшибки   = РегистрацияТекстОшибки;
	КорневаяЗапись.РегистрацияИдентификатор = РегистрацияИдентификатор;
	
	Если Не ЗначениеЗаполнено(КорневаяЗапись.ИсходящийДокумент) Тогда
		ИсходящийДокумент = НайтиИсходящийДокумент(Страхователь, ИдентификаторСообщения);
		Если ИсходящийДокумент <> Неопределено Тогда
			ЗаполнитьПоДокументу(КорневаяЗапись, ИсходящийДокумент);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(КорневаяЗапись.ФизическоеЛицо) Тогда
		ИменаРеквизитов = ТребуемыеРеквизитыИсходящегоДокумента();
		ИсходящийДокумент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КорневаяЗапись.ИсходящийДокумент, ИменаРеквизитов);
		ЗаполнитьПоДокументу(КорневаяЗапись, ИсходящийДокумент);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ТекстыОшибокПоСтрокам Цикл
		ИдентификаторСтроки = КлючИЗначение.Ключ;
		ТекстОшибки         = КлючИЗначение.Значение;
		
		Запись = Таблица.Найти(ИдентификаторСтроки, "ИдентификаторСтроки");
		Если Запись = Неопределено Тогда
			Запись = Таблица.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Запись, КорневаяЗапись, , "ИдентификаторСтроки, ИсходящийНомерСтроки, ТекстОшибкиСтроки");
		Запись.ИдентификаторСтроки  = ИдентификаторСтроки;
		Запись.ТекстОшибкиСтроки    = ТекстОшибки;
		Запись.ИсходящийНомерСтроки = НомерСтроки(ИдентификаторСтроки);
	КонецЦикла;
	
	СтрокиКУдалению = Таблица.НайтиСтроки(Новый Структура("Найдена", Ложь));
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Таблица.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Набор.Загрузить(Таблица);
	ЗавершитьЗаписьНабора(Набор);
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция НомерСтроки(ИдентификаторСтроки)
	МассивСтрок = СтрРазделить(ИдентификаторСтроки, ":", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
		Возврат ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[МассивСтрок.ВГраница()]);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПредставлениеСпискаОшибок(СписокОшибок)
	Если СписокОшибок = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для Каждого ОшибкаDOM Из СписокОшибок.ДочерниеУзлы Цикл
		Если ОшибкаDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
			Продолжить;
		КонецЕсли;
		УзлыОшибки = СериализацияБЗК.УзлыЭлементаDOMСКонтролем(ОшибкаDOM, "errorCode, errorDescription");
		Код       = СериализацияБЗК.СтрокаИзXML(УзлыОшибки.errorCode);
		Сообщение = СериализацияБЗК.СтрокаИзXML(УзлыОшибки.errorDescription);
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Массив = СтрРазделить(Сообщение, Символы.ПС + Символы.ВК, Ложь);
			Сообщение = СтрСоединить(Массив, Символы.ПС + "  ");
		КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			Сообщение = СокрП(Код + ": " + Сообщение);
		КонецЕсли;
		Если УзлыОшибки.ПредставленияНеобработанныхУзловDOM.Количество() > 0 Тогда
			Необработанные = СтрСоединить(УзлыОшибки.ПредставленияНеобработанныхУзловDOM, Символы.ПС);
			Необработанные = НСтр("ru = 'Необработанные узлы сообщения:';
									|en = 'Unprocessed message nodes:'") + Символы.ПС + Необработанные;
			Сообщение = ?(ЗначениеЗаполнено(Сообщение), Сообщение + Символы.ПС + "    " + Необработанные, Необработанные);
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			МассивСтрок.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция ТекстыОшибокПоСтрокам(ПротоколDOM)
	ИдентификаторыСтрокИТекстыОшибок = Новый Соответствие;
	Если ПротоколDOM <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для Каждого ГруппаОшибокDOM Из ПротоколDOM.ДочерниеУзлы Цикл
			Если ГруппаОшибокDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ОшибкаDOM Из ГруппаОшибокDOM.ДочерниеУзлы Цикл
				Если ОшибкаDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
					Продолжить;
				КонецЕсли;
				УзлыОшибки = СериализацияБЗК.УзлыЭлементаDOMСКонтролем(ОшибкаDOM, "notificationID, errorList");
				ИдентификаторСтроки = ВРег(СериализацияБЗК.СтрокаИзXML(УзлыОшибки.notificationID));
				ТекстОшибкиСтроки   = ПредставлениеСпискаОшибок(УзлыОшибки.errorList);
				ИдентификаторыСтрокИТекстыОшибок.Вставить(ИдентификаторСтроки, ТекстОшибкиСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат ИдентификаторыСтрокИТекстыОшибок;
КонецФункции

Функция ВозможныеСтатусы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Статус");
	Результат.Колонки.Добавить("Зарегистрирован");
	Результат.Колонки.Добавить("Расшифровка");
	Результат.Колонки.Добавить("Состояние");
	
	// Статусы из актуальной спецификации.
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "0";
	СтрокаТаблицы.Зарегистрирован = Ложь;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Не принят Фондом';
										|en = 'Not accepted by the Fund'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "1";
	СтрокаТаблицы.Зарегистрирован = Ложь;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Принят';
										|en = 'Accepted'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "2";
	СтрокаТаблицы.Зарегистрирован = Истина;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Произошла техническая ошибка. Необходимо повторно отправить документ чуть позже';
										|en = 'A technical error occurred. Resend the document later'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
	
	Возврат Результат;
КонецФункции

Функция ТекстОшибкиНеизвестныйСтатусРегистрации(Статус) Экспорт
	Возврат СтрШаблон(НСтр("ru = 'Недокументированный статус регистрации: %1';
							|en = 'Undocumented registration status: %1'"), Статус);
КонецФункции

Процедура ЗаполнитьСписокВыбораСтатусов(ПолеВвода, Статус) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		ВозможныеСтатусы = ВозможныеСтатусы();
		Для Каждого СтрокаТаблицы Из ВозможныеСтатусы Цикл
			СписокВыбора.Добавить(СтрокаТаблицы.Статус, СтрокаТаблицы.Расшифровка + " (" + СтрокаТаблицы.Статус + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) И СписокВыбора.НайтиПоЗначению(Статус) = Неопределено Тогда
		СписокВыбора.Добавить(Статус, ТекстОшибкиНеизвестныйСтатусРегистрации(Статус));
	КонецЕсли;
КонецПроцедуры

Функция НайтиИсходящийДокумент(Страхователь, ИдентификаторСообщения)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ИменаРеквизитов КАК ИменаРеквизитов,
	|	ВЫБОР
	|		КОГДА НайденныйДокумент.Страхователь = &Страхователь
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК НайденныйДокумент
	|ГДЕ
	|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаРеквизитов КАК ИменаРеквизитов", ТребуемыеРеквизитыИсходящегоДокумента());
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает строку - имена требуемых реквизитов документа "Сведения о застрахованном лице ФСС".
Функция ТребуемыеРеквизитыИсходящегоДокумента()
	Возврат "Ссылка, ФизическоеЛицо, Страхователь, ИдентификаторСообщения, ДатаОтправки";
КонецФункции

Процедура ЗаполнитьПоДокументу(КорневаяЗапись, ИсходящийДокументОбъект) Экспорт
	КорневаяЗапись.ИсходящийДокумент   = ИсходящийДокументОбъект.Ссылка;
	КорневаяЗапись.ФизическоеЛицо      = ИсходящийДокументОбъект.ФизическоеЛицо;
	КорневаяЗапись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ИсходящийДокументОбъект.Страхователь);
	КорневаяЗапись.Страхователь        = ИсходящийДокументОбъект.Страхователь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли