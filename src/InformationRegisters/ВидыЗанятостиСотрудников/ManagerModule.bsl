#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ГоловнаяОрганизация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбменДанными

// Пересчитывает зависимые данные после загрузки сообщения обмена
//
// Параметры:
//		ЗависимыеДанные - ТаблицаЗначений:
//			* ВедущиеМетаданные - ОбъектМетаданных - Метаданные ведущих данных
//			* ЗависимыеМетаданные - ОбъектМетаданных - Метаданные текущего объекта
//			* ВедущиеДанные - Массив - Массив объектов, заполненный при загрузке сообщения обмена.
//				По этим объектам требуется обновить зависимые данные.
//
Процедура ОбновитьЗависимыеДанныеПослеЗагрузкиОбменаДанными(ЗависимыеДанные) Экспорт
	ЗарплатаКадрыПериодическиеРегистры.ОбновитьИнтервальныйРегистрПослеЗагрузкиПервичныхДанных(
		Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя, ЗависимыеДанные);
КонецПроцедуры

#КонецОбласти

// Заполняет интервальный регистр сведений ВидыЗанятостиСотрудниковИнтервальный.
//
Процедура ЗаполнитьИнтервальныйРегистр(ПараметрыОбновления = Неопределено) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.ПеренестиВозвратныйРегистрВИнтервальныйРегистрСведений(
		Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя, ПараметрыОбновления);
	
КонецПроцедуры

// Вызывается для формирования интервального регистра из обработчиков обновления основного.
// В передаваемом МенеджерВременныхТаблиц должна быть создана временная таблица ВТОтборДляПереформирования
// с колонкой Сотрудник.
//
Процедура ОбновитьДвиженияИнтервальногоРегистра(МенеджерВременныхТаблиц) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.ОбновитьДвиженияИнтервальногоРегистра(
		Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя, МенеджерВременныхТаблиц);
	
КонецПроцедуры
	
// Заполняет виды занятости пустых интервалов регистра сведений ВидыЗанятостиСотрудниковИнтервальный.
//
Процедура ЗаполнитьВидЗанятостиПустыхИнтерваловИнтервальногоРегистра(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.ВидЗанятости КАК ВидЗанятости,
		|	ВидыЗанятостиСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
		|	ВидыЗанятостиСотрудниковИнтервальный.ДатаОкончания КАК ДатаОкончания,
		|	ВидыЗанятостиСотрудниковИнтервальный.*
		|ИЗ
		|	РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальныйПредыдущий
		|		ПО ВидыЗанятостиСотрудниковИнтервальный.Сотрудник = ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.Сотрудник
		|			И ВидыЗанятостиСотрудниковИнтервальный.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудниковИнтервальный.ФизическоеЛицо = ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.ФизическоеЛицо
		|			И (ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала = ДОБАВИТЬКДАТЕ(ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.ДатаОкончания, СЕКУНДА, 1))
		|			И ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости <> ВидыЗанятостиСотрудниковИнтервальныйПредыдущий.ВидЗанятости
		|ГДЕ
		|	ВидыЗанятостиСотрудниковИнтервальный.ПустойИнтервал
		|	И ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный", "Сотрудник", Выборка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ВидыЗанятостиСотрудниковИнтервальный.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ДатаОкончания.Установить(Выборка.ДатаОкончания);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеИнтервальногоРегистра() Экспорт
	
	ОписаниеИнтервальногоРегистра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИнтервальногоРегистра();
	ОписаниеИнтервальногоРегистра.ПараметрыНаследованияРесурсов = ПараметрыНаследованияРесурсов();
	
	ОписаниеИнтервальногоРегистра.ОсновноеИзмерение = "Сотрудник";
	ОписаниеИнтервальногоРегистра.ИзмеренияРасчета = "Сотрудник";
	
	Возврат ОписаниеИнтервальногоРегистра;
	
КонецФункции

Функция ПараметрыНаследованияРесурсов() Экспорт
	
	ПараметрыРесурсов = ЗарплатаКадрыПериодическиеРегистры.ПараметрыНаследованияРесурсов("ВидыЗанятостиСотрудников");
	ПараметрыРесурсов["ВидЗанятости"].ПравилоНаследования = "Наследование";
	
	Возврат ПараметрыРесурсов;
	
КонецФункции

Процедура ПодготовитьОбновлениеЗависимыхДанныхПриОбменеПередЗаписью(Объект) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.КонтрольИзмененийПередЗаписью(Объект);
	
КонецПроцедуры

Процедура ПодготовитьОбновлениеЗависимыхДанныхПриОбменеПриЗаписи(Объект) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.КонтрольИзмененийПриЗаписи(Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
