#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиПрямыхВыплатФСССотрудников) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПрочитатьОрганизациюСотрудникаФизическоеЛицо();
	
	Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		Отказ = Истина; // Сотрудник не выбран. Вероятная причина: кнопка нажата в пустом списке.
		Возврат;
	КонецЕсли;
	
	// Заполнение типов способов и определение представлений переключателей.
	ТипыСпособовПрямыхВыплат = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого СтрокаТаблицыТипов Из ТипыСпособовПрямыхВыплат Цикл
		ОписаниеТипа = Новый ОписаниеТипов(СтрокаТаблицыТипов.ИмяТипа);
		// Заполнение типов способов.
		ОписаниеСпособа = ТипыСпособов.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеСпособа, СтрокаТаблицыТипов);
		ОписаниеСпособа.ОписаниеТипа = ОписаниеТипа;
		// Определение представлений переключателей.
		Если ОписаниеТипа.СодержитТип(ТипЗнч(КартаМИР)) Тогда
			ЭлементСписка = Элементы.СпособНаКартуМИР.СписокВыбора[0];
		ИначеЕсли ОписаниеТипа.СодержитТип(ТипЗнч(ЗарплатныйПроект)) Тогда
			ЭлементСписка = Элементы.СпособЗарплатныйПроект.СписокВыбора[0];
		ИначеЕсли ОписаниеТипа.СодержитТип(ТипЗнч(ВидКонтактнойИнформации)) Тогда
			ЭлементСписка = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0];
		ИначеЕсли Метаданные.ОпределяемыеТипы.СпособыПрямыхВыплатФСС.Тип.СодержитТип(СтрокаТаблицыТипов.Тип) Тогда
			ВидимостьБанковскихСчетов = Истина;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("БанковскийСчет", ОписаниеТипа, , , Ложь));
			ЭлементСписка = Элементы.СпособБанковскийСчет.СписокВыбора[0];
			ИмяСправочникаБанковскихСчетов = СтрРазделить(ОписаниеСпособа.ИмяТипа, ".")[1];
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неподдерживаемый тип способа: %1. См. состав определяемого типа %2 и релизацию формы %3.';
											|en = 'Unsupported method type: %1. See definable type %2 composition and form %3 implementation.'"), 
				СтрокаТаблицыТипов.ИмяТипа,
				"СпособыПрямыхВыплатФСС",
				ИмяФормы);
		КонецЕсли;
		ЭлементСписка.Значение      = ОписаниеСпособа.ИмяТипа;
		ЭлементСписка.Представление = ОписаниеСпособа.Заголовок + ":";
	КонецЦикла;
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Элементы.ГруппаБанковскийСчет.Видимость = ВидимостьБанковскихСчетов;
	Если ВидимостьБанковскихСчетов Тогда
		ПолеВвода = Элементы.Добавить("БанковскийСчет", Тип("ПолеФормы"), Элементы.ГруппаБанковскийСчет);
		ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеВвода.ПутьКДанным = "БанковскийСчет";
		ПолеВвода.АвтоМаксимальнаяШирина = Элементы.ЗарплатныйПроект.АвтоМаксимальнаяШирина;
		ПолеВвода.МаксимальнаяШирина     = Элементы.ЗарплатныйПроект.МаксимальнаяШирина;
		ПолеВвода.ПоложениеЗаголовка     = Элементы.ЗарплатныйПроект.ПоложениеЗаголовка;
		ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_БанковскийСчетПриИзменении");
		СвязиПараметровВыбора = Новый Массив;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Запись.ФизическоеЛицо"));
		ПолеВвода.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	КонецЕсли;
	
	Прочитать();
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Настройки прямых выплат СФР в %2';
								|en = '%1: Direct payment settings of Social Insurance Fund of Russia in %2'"), Запись.ФизическоеЛицо, Запись.ГоловнаяОрганизация);
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючЗаписи());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Запись.ФизическоеЛицо = Параметр.ФизическоеЛицо Тогда
		ИдентификаторИсточника = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(Источник, "УникальныйИдентификатор");
		Если ИдентификаторИсточника <> УникальныйИдентификатор Тогда
			ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И (Запись.ОпределятьПоОрганизации Или Запись.ОпределятьПоОсновномуМестуРаботы)
		И Запись.ГоловнаяОрганизация = Параметр.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов"
		И Источник = Запись.Значение Тогда
		ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Запись.Значение Тогда
		ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение
		И Запись.ФизическоеЛицо = Источник Тогда
		ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение
		И Запись.ФизическоеЛицо = Источник Тогда
		ПодключитьОбработчикОжиданияПрочитатьНаКлиенте();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПрямыеВыплатыФСС

&НаКлиенте
Процедура ТекущаяОрганизацияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетПособийСоциальногоСтрахованияКлиент.ОткрытьНастройкиПрямыхВыплатОрганизации(
		Организация,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыОсновногоСотрудникаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетПособийСоциальногоСтрахованияКлиент.НастроитьСпособПрямыхВыплатФизическогоЛица(
		ОсновнаяГоловнаяОрганизация,
		Запись.ФизическоеЛицо,
		ЭтотОбъект,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьПоОрганизацииПриИзменении(Элемент)
	Если Запись.ОпределятьПоОрганизации Тогда
		Запись.ОпределятьПоОсновномуМестуРаботы = Ложь;
	КонецЕсли;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьПоОсновномуМестуРаботыПриИзменении(Элемент)
	Запись.ОпределятьПоОрганизации = Ложь;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СпособНаКартуМИРПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	Если ЗначениеЗаполнено(КартаМИР) Тогда
		ЗаписатьНаКлиенте();
	Иначе
		ОбновитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособЗарплатныйПроектПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	Если ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
		ЗаписатьНаКлиенте();
	Иначе
		ОбновитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособБанковскийСчетПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	Если ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчет) Тогда
		ЗаписатьНаКлиенте();
	Иначе
		ОбновитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособВидКонтактнойИнформацииПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		ЗаписатьНаКлиенте();
	Иначе
		ОбновитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КартаМИРПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	ИмяТипаСпособа = Элементы.СпособНаКартуМИР.СписокВыбора[0].Значение;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатныйПроектПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	ИмяТипаСпособа = Элементы.СпособЗарплатныйПроект.СписокВыбора[0].Значение;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатныйПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "+" Тогда
		СтандартнаяОбработка = Ложь;
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выберите зарплатный проект для %1';
				|en = 'Select a payroll card program for %1'"),
			Строка(Запись.ФизическоеЛицо));
		Отбор = Новый Структура;
		Отбор.Вставить("ГоловнаяОрганизация", Запись.ГоловнаяОрганизация);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораЗарплатногоПроекта", ЭтотОбъект);
		ОткрытьФорму("Справочник.ЗарплатныеПроекты.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерЛицевогоСчетаПриИзменении(Элемент)
	РеквизитыСчетаИзменены = Истина;
	ОбновитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтактнойИнформацииПриИзменении(Элемент)
	ОтключитьФлажкиАвтозаполнения();
	ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение;
	ЗаписатьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПодробностиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ИмяТипаСпособа = Элементы.СпособЗарплатныйПроект.СписокВыбора[0].Значение Тогда
		Если Не ЗначениеЗаполнено(ЗарплатныйПроект) Или Не ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Сотрудник);
		ПараметрыФормы.Вставить("ОткрытьФормуВыплатыУчетЗатрат", Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыФормы);
		Оповестить("ОткрытьФормуВыплатыУчетЗатрат", Сотрудник, ЭтотОбъект);
	ИначеЕсли ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчет) Тогда
			Возврат;
		КонецЕсли;
		ПоказатьЗначение(, ЭтотОбъект.БанковскийСчет)
	ИначеЕсли ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Запись.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ВводАдреса", Истина);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьНомерСчетаБИК(Команда)
	Если Не ВидимостьБанковскихСчетов Тогда
		Возврат;
	КонецЕсли;
	ИмяФормыОбъекта = "Справочник." + ИмяСправочникаБанковскихСчетов + ".ФормаОбъекта";
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчет) Тогда
		ПараметрыФормы.Вставить("Ключ", ЭтотОбъект.БанковскийСчет);
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Владелец",       Запись.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо", Запись.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("Банк",           Банк);
		ЗначенияЗаполнения.Вставить("НомерСчета",     НомерСчета);
		ЗначенияЗаполнения.Вставить("БИК",            БИК);
		ЗначенияЗаполнения.Вставить("КоррСчет",       КоррСчет);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	Обработчик = Новый ОписаниеОповещения("ПослеРедактированияБанковскогоСчета", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЛицевойСчетЗарплатногоПроекта(Команда)
	НачатьРедактированиеНомераЛицевогоСчетаЗарплатногоПроекта();
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроверкиНомераСчетаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, URL, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачатьРедактированиеНомераЛицевогоСчетаЗарплатногоПроекта();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияВНомереСчета(Команда)
	РедактируемыйЗарплатныйПроект = Неопределено;
	СохранитьРеквизитыЛицевогоСчета();
	ОповеститьПослеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияВНомереСчета(Команда)
	РедактируемыйЗарплатныйПроект = Неопределено;
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗакрыть(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьОрганизациюСотрудникаФизическоеЛицо()
	ИменаПолей       = "ГоловнаяОрганизация,ФизическоеЛицо,Организация,Сотрудник,ВидЗанятости";
	ДанныеСотрудника = Неопределено;
	ТекстОшибки      = "";
	
	Ключ = ОбщегоНазначенияБЗК.ЗначениеСвойства(Параметры, "Ключ");
	Если ТипЗнч(Ключ) = Тип("РегистрСведенийКлючЗаписи.НастройкиПрямыхВыплатФСССотрудников") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, Ключ);
	КонецЕсли;
	
	Запись.ФизическоеЛицо      = Параметры.ФизическоеЛицо;
	Запись.ГоловнаяОрганизация = Параметры.ГоловнаяОрганизация;
	Организация                = Параметры.Организация;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Запись.ГоловнаяОрганизация;
	ИначеЕсли Не ЗначениеЗаполнено(Запись.ГоловнаяОрганизация) Тогда
		Запись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ФизическоеЛицо) И ЗначениеЗаполнено(Запись.ГоловнаяОрганизация) Тогда
		ДанныеСотрудника = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
			Запись.ГоловнаяОрганизация,
			Запись.ФизическоеЛицо,
			ИменаПолей,
			ТекущаяДатаСеанса(),
			,
			ТекстОшибки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ДанныеСотрудника = Неопределено Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Запись.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
	Запись.ФизическоеЛицо      = ДанныеСотрудника.ФизическоеЛицо;
	ВидЗанятости               = ДанныеСотрудника.ВидЗанятости;
	Сотрудник                  = ДанныеСотрудника.Сотрудник;
	ОсновнаяГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.Организация) Тогда
		Организация = ДанныеСотрудника.Организация;
	КонецЕсли;
	
	Если ЭтоСовместительство() Тогда
		ОсновныеМестаРаботыФизическихЛиц = СпособыПрямыхВыплатФСС.ОсновныеМестаРаботыФизическихЛиц(Запись.ФизическоеЛицо);
		Для Каждого ОсновноеМестоРаботы Из ОсновныеМестаРаботыФизическихЛиц Цикл
			ОсновнаяГоловнаяОрганизация = ОсновноеМестоРаботы.ГоловнаяОрганизация;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОПоследнемИзменении()
	Если Не ЗначениеЗаполнено(Запись.ДатаИзменения) Тогда
		Возврат "";
	КонецЕсли;
	Если Запись.ДатаИзменения >= НачалоДня(ТекущаяДатаСеанса()) Тогда
		ФорматДаты = НСтр("ru = 'ДФ=HH:mm:ss';
							|en = 'DF=HH:mm:ss'");
	Иначе
		ФорматДаты = "ДЛФ=D";
	КонецЕсли;
	Возврат СтрШаблон(
		НСтр("ru = 'Последнее изменение: %1, %2.';
			|en = 'Last change: %1, %2.'"),
		Формат(Запись.ДатаИзменения, ФорматДаты),
		Строка(Запись.Ответственный));
КонецФункции

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьНаКлиенте()
	ОтключитьОбработчикОжидания("ПрочитатьНаКлиенте");
	ПодключитьОбработчикОжидания("ПрочитатьНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНаКлиенте()
	Прочитать();
КонецПроцедуры

&НаСервере
Процедура Прочитать()
	
	Способы = СпособыПрямыхВыплатФСС.НастройкиСотрудников(
		Организация,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ФизическоеЛицо),
		ТекущаяДатаСеанса());
	
	СпособыПрямыхВыплатФСС.ЗаполнитьСведенияОбАдресах(Способы.ТаблицаРезультат);
	
	СтрокаРезультат            = Способы.ТаблицаРезультат[0];
	Запись.ГоловнаяОрганизация = Способы.ГоловнаяОрганизация;
	
	БанковскиеРеквизиты.Загрузить(Способы.БанковскиеРеквизиты);
	
	СписокВыбораЗарплатныхПроектов = Элементы.ЗарплатныйПроект.СписокВыбора;
	СписокВыбораЗарплатныхПроектов.Очистить();
	Если ВидимостьБанковскихСчетов Тогда
		СписокВыбораБанковскихСчетов = Элементы["БанковскийСчет"].СписокВыбора;
		СписокВыбораБанковскихСчетов.Очистить();
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из БанковскиеРеквизиты Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) И Не СтрокаТаблицы.ПометкаУдаления Тогда
			Если ТипЗнч(СтрокаТаблицы.Значение) = ТипЗнч(ЗарплатныйПроект)
				И СписокВыбораЗарплатныхПроектов.НайтиПоЗначению(СтрокаТаблицы.Значение) = Неопределено Тогда
				СписокВыбораЗарплатныхПроектов.Добавить(СтрокаТаблицы.Значение, СтрокаТаблицы.ПредставлениеЗначения);
			ИначеЕсли ВидимостьБанковскихСчетов
				И ТипЗнч(СтрокаТаблицы.Значение) = ТипЗнч(ЭтотОбъект.БанковскийСчет)
				И СписокВыбораБанковскихСчетов.НайтиПоЗначению(СтрокаТаблицы.Значение) = Неопределено Тогда
				СписокВыбораБанковскихСчетов.Добавить(СтрокаТаблицы.Значение, СтрокаТаблицы.ПредставлениеЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнения реквизитов записи.
	ИменаПолей = "ОпределятьПоОрганизации, ОпределятьПоОсновномуМестуРаботы, ДатаИзменения, Ответственный, Значение";
	ЗаполнитьЗначенияСвойств(Запись, СтрокаРезультат, ИменаПолей);
	
	// Заполнения реквизитов формы.
	КартаМИР                = Запись.Значение;
	ЗарплатныйПроект        = Запись.Значение;
	ВидКонтактнойИнформации = Запись.Значение;
	Если ВидимостьБанковскихСчетов Тогда
		ЭтотОбъект.БанковскийСчет = Запись.Значение;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаРезультат, "НомерСчета, Банк, БИК, КоррСчет");
	
	РеквизитыСчетаИзменены = Ложь;
	
	ЭтоЗарплатныйПроект = ЗначениеЗаполнено(ЗарплатныйПроект);
	ЭтоБанковскийСчет   = ВидимостьБанковскихСчетов И ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчет);
	Если ЭтоЗарплатныйПроект Или ЭтоБанковскийСчет Тогда
		Если Не ЗначениеЗаполнено(НомерСчета) И ЭтоЗарплатныйПроект Тогда
			РедактируемыйЗарплатныйПроект = ЗарплатныйПроект;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Банк) И ЭтоЗарплатныйПроект Тогда
			Найденные = БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Значение", ЗарплатныйПроект));
			Если Найденные.Количество() = 0 Тогда
				Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗарплатныйПроект, "Банк.Ссылка, Банк.Код, Банк.КоррСчет");
				РеквизитыБанка = БанковскиеРеквизиты.Добавить();
				РеквизитыБанка.Значение = ЗарплатныйПроект;
				РеквизитыБанка.Банк     = Значения.БанкСсылка;
				РеквизитыБанка.БИК      = Значения.БанкКод;
				РеквизитыБанка.КоррСчет = Значения.БанкКоррСчет;
			Иначе
				РеквизитыБанка = Найденные[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыБанка, "Банк, БИК, КоррСчет");
		КонецЕсли;
		// Подгрузка ссылки на зарплатный проект / банковский счет с тем же номером счета.
		Если ЗначениеЗаполнено(НомерСчета) И ВидимостьБанковскихСчетов Тогда
			Найденные = БанковскиеРеквизиты.НайтиСтроки(Новый Структура("НомерСчета, ПометкаУдаления", НомерСчета, Ложь));
			Для Каждого РеквизитыБанка Из Найденные Цикл
				Если ЭтоЗарплатныйПроект
					И ТипЗнч(РеквизитыБанка.Значение) = ТипЗнч(ЭтотОбъект.БанковскийСчет) Тогда
					ЭтотОбъект.БанковскийСчет = РеквизитыБанка.Значение;
				ИначеЕсли ЭтоБанковскийСчет
					И ТипЗнч(РеквизитыБанка.Значение) = Тип("СправочникСсылка.ЗарплатныеПроекты") Тогда
					ЗарплатныйПроект = РеквизитыБанка.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Подробности = СпособыПрямыхВыплатФСС.ПредставлениеСпособаВыплаты(СтрокаРезультат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КартаМИР) Тогда
		ИмяТипаСпособа = Элементы.СпособНаКартуМИР.СписокВыбора[0].Значение;
	ИначеЕсли ЭтоЗарплатныйПроект Тогда
		ИмяТипаСпособа = Элементы.СпособЗарплатныйПроект.СписокВыбора[0].Значение;
		Если СписокВыбораЗарплатныхПроектов.НайтиПоЗначению(ЗарплатныйПроект) = Неопределено Тогда
			СписокВыбораЗарплатныхПроектов.Добавить(ЗарплатныйПроект, Строка(ЗарплатныйПроект));
		КонецЕсли;
	ИначеЕсли ЭтоБанковскийСчет Тогда
		ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение;
	Иначе
		ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		ВидКонтактнойИнформации = КадровыйУчет.ВидКонтактнойИнформацииАдресМестаПроживанияФизическогоЛица();
	КонецЕсли;
	
	ГиперссылкаШрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекста, , , , , Истина);
	ГиперссылкаЦвет = ЦветаСтиля.ГиперссылкаЦвет;
	НадписьПоказатьВсе = Новый ФорматированнаяСтрока(НСтр("ru = 'Показать все';
															|en = 'Show all'"), ГиперссылкаШрифт, ГиперссылкаЦвет);
	СписокВыбораЗарплатныхПроектов.Добавить("+", НадписьПоказатьВсе);
	
	СостояниеФормы = Новый ФорматированнаяСтрока(ИнформацияОПоследнемИзменении());
	
	ОбновитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	НедоступныйЦветТекста = ЦветаСтиля.ЗаголовокПоляЗаполняемогоАвтоматическиЦветБЗК;
	НедоступныйЦветРамки  = ЦветаСтиля.РамкаПоляЗаполняемогоАвтоматическиЦветБЗК;
	
	Элементы.ГруппаОпределятьПоОсновномуМестуРаботы.Видимость = ЭтоСовместительство()
		И ЗначениеЗаполнено(ОсновнаяГоловнаяОрганизация);
	
	Если Запись.ОпределятьПоОрганизации Или Запись.ОпределятьПоОсновномуМестуРаботы Тогда
		ДоступныйЦветТекста = НедоступныйЦветТекста;
		ДоступныйЦветРамки  = НедоступныйЦветРамки;
	Иначе
		ДоступныйЦветТекста = Новый Цвет;
		ДоступныйЦветРамки  = Новый Цвет;
	КонецЕсли;
	
	Элементы.СпособНаКартуМИР.ЦветТекста              = ДоступныйЦветТекста;
	Элементы.СпособЗарплатныйПроект.ЦветТекста        = ДоступныйЦветТекста;
	Элементы.СпособБанковскийСчет.ЦветТекста          = ДоступныйЦветТекста;
	Элементы.СпособВидКонтактнойИнформации.ЦветТекста = ДоступныйЦветТекста;
	
	НаКартуМИР               = (ИмяТипаСпособа = Элементы.СпособНаКартуМИР.СписокВыбора[0].Значение);
	НаСчетВЗарплатномПроекте = (ИмяТипаСпособа = Элементы.СпособЗарплатныйПроект.СписокВыбора[0].Значение);
	НаБанковскийСчет         = (ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение);
	ПочтовымПереводом        = (ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение);
	
	Если НаКартуМИР Тогда
		Элементы.КартаМИР.ЦветТекста = ДоступныйЦветТекста;
		Элементы.КартаМИР.ЦветРамки  = ДоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьОбязательностьЗаполненияПоляВвода(
			Элементы.КартаМИР,
			КартаМИР);
	Иначе
		Элементы.КартаМИР.ЦветТекста = НедоступныйЦветТекста;
		Элементы.КартаМИР.ЦветРамки  = НедоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьНеобязательностьЗаполненияПоляВвода(
			Элементы.КартаМИР);
	КонецЕсли;
	
	Если НаСчетВЗарплатномПроекте Тогда
		Элементы.ЗарплатныйПроект.ЦветТекста = ДоступныйЦветТекста;
		Элементы.ЗарплатныйПроект.ЦветРамки  = ДоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьОбязательностьЗаполненияПоляВвода(
			Элементы.ЗарплатныйПроект,
			ЗарплатныйПроект);
	Иначе
		Элементы.ЗарплатныйПроект.ЦветТекста = НедоступныйЦветТекста;
		Элементы.ЗарплатныйПроект.ЦветРамки  = НедоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьНеобязательностьЗаполненияПоляВвода(
			Элементы.ЗарплатныйПроект);
	КонецЕсли;
	
	Если ВидимостьБанковскихСчетов Тогда
		Если НаБанковскийСчет Тогда
			Элементы["БанковскийСчет"].ЦветТекста = ДоступныйЦветТекста;
			Элементы["БанковскийСчет"].ЦветРамки  = ДоступныйЦветРамки;
			ОбщегоНазначенияБЗККлиентСервер.УстановитьОбязательностьЗаполненияПоляВвода(
				Элементы["БанковскийСчет"],
				ЭтотОбъект.БанковскийСчет);
		Иначе
			Элементы["БанковскийСчет"].ЦветТекста = НедоступныйЦветТекста;
			Элементы["БанковскийСчет"].ЦветРамки  = НедоступныйЦветРамки;
			ОбщегоНазначенияБЗККлиентСервер.УстановитьНеобязательностьЗаполненияПоляВвода(
				Элементы["БанковскийСчет"]);
		КонецЕсли;
	КонецЕсли;
	
	Если ПочтовымПереводом Тогда
		Элементы.ВидКонтактнойИнформации.ЦветТекста = ДоступныйЦветТекста;
		Элементы.ВидКонтактнойИнформации.ЦветРамки  = ДоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьОбязательностьЗаполненияПоляВвода(
			Элементы.ВидКонтактнойИнформации,
			ВидКонтактнойИнформации);
	Иначе
		Элементы.ВидКонтактнойИнформации.ЦветТекста = НедоступныйЦветТекста;
		Элементы.ВидКонтактнойИнформации.ЦветРамки  = НедоступныйЦветРамки;
		ОбщегоНазначенияБЗККлиентСервер.УстановитьНеобязательностьЗаполненияПоляВвода(
			Элементы.ВидКонтактнойИнформации);
	КонецЕсли;
	
	ЭтоЗарплатныйПроект = НаСчетВЗарплатномПроекте И ЗначениеЗаполнено(ЗарплатныйПроект);
	ЭтоБанковскийСчет = Не ЭтоЗарплатныйПроект
		И ВидимостьБанковскихСчетов
		И НаБанковскийСчет
		И ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчет);
	
	Если ЭтоЗарплатныйПроект Или ЭтоБанковскийСчет Тогда
		// Переключение на страницу с номером счета и датой открытия.
		Элементы.СтраницыПодробностей.ТекущаяСтраница = Элементы.СтраницаПодробностейНомерСчета;
		// По умолчанию номер счета и дата открытия недоступны для изменения.
		Если ЭтоБанковскийСчет
			Или РедактируемыйЗарплатныйПроект <> ЗарплатныйПроект Тогда
			РедактируемыйЗарплатныйПроект = Неопределено;
			ТолькоПросмотрНомераСчета = Истина;
		Иначе
			ТолькоПросмотрНомераСчета = Ложь;
		КонецЕсли;
		// Установка стиля аналогичного полю ввода зарплатного проекта.
		Если ТолькоПросмотрНомераСчета Тогда
			Элементы.НомерСчета.ЦветТекста          = НедоступныйЦветТекста;
			Элементы.НомерСчета.ЦветРамки           = НедоступныйЦветРамки;
			Элементы.НомерСчета.ЦветТекстаЗаголовка = НедоступныйЦветТекста;
		Иначе
			Элементы.НомерСчета.ЦветТекста          = Новый Цвет;
			Элементы.НомерСчета.ЦветРамки           = Новый Цвет;
			Элементы.НомерСчета.ЦветТекстаЗаголовка = Новый Цвет;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Элементы.БИК, Элементы.НомерСчета, "ЦветТекста, ЦветРамки, ЦветТекстаЗаголовка");
		// Установка доступности полей ввода.
		Элементы.НомерСчета.ТолькоПросмотр       = ТолькоПросмотрНомераСчета;
		Элементы.ИзменитьНомерСчетаБИК.Видимость = ТолькоПросмотрНомераСчета И ВидимостьБанковскихСчетов;
		Элементы.ИзменитьЛицевойСчетЗарплатногоПроекта.Видимость = ЭтоЗарплатныйПроект;
		// Проверка банковских реквизитов.
		ПроверитьНомерСчетаБИК();
		// Установка доступности кнопок.
		Если ЭтоЗарплатныйПроект Тогда
			Элементы.КоманднаяПанельСохраненияИзмененийЛицевогоСчета.Видимость = Не ТолькоПросмотрНомераСчета;
			Элементы.СохранитьИзмененияВНомереСчета.КнопкаПоУмолчанию = Не ТолькоПросмотрНомераСчета
				И Элементы.СохранитьИзмененияВНомереСчета.Доступность
				И РеквизитыСчетаИзменены;
		Иначе
			Элементы.КоманднаяПанельСохраненияИзмененийЛицевогоСчета.Видимость = Ложь;
			Элементы.СохранитьИзмененияВНомереСчета.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
		// Вывод предупреждения при редактировании номера счета.
		Если ТолькоПросмотрНомераСчета Тогда
			Элементы.СтраницаПодробностейНомерСчета.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Иначе
			Элементы.СтраницаПодробностейНомерСчета.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		КонецЕсли;
		Если ЭтоЗарплатныйПроект Тогда
			Элементы.РезультатПроверкиНомераСчета.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			Элементы.РезультатПроверкиНомераСчета.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	Иначе
		// Переключение на страницу с подробностями.
		Элементы.СтраницыПодробностей.ТекущаяСтраница = Элементы.СтраницаНадпись;
		Элементы.СтраницаПодробностейНомерСчета.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Элементы.СтраницыПодписейВПодвале.ТекущаяСтраница = Элементы.СтраницаДанныеПрочитаны;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНомерСчетаБИК()
	РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(НомерСчета, БИК, КоррСчет);
	Элементы.РезультатПроверкиНомераСчета.Заголовок = РезультатПроверки.Пояснение;
	Если РезультатПроверки.Успех Тогда
		Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
		Элементы.СохранитьИзмененияВНомереСчета.Доступность = Истина;
	Иначе
		Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
		Элементы.СохранитьИзмененияВНомереСчета.Доступность = Ложь;
	КонецЕсли;
	Возврат РезультатПроверки.Успех;
КонецФункции

&НаКлиенте
Процедура ОтключитьФлажкиАвтозаполнения()
	Запись.ОпределятьПоОрганизации = Ложь;
	Запись.ОпределятьПоОсновномуМестуРаботы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	ЗаписатьНаСервере();
	ОповеститьПослеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеЗаписи()
	Оповестить("Запись_НастройкиПрямыхВыплатФСССотрудников", Запись, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере()
	Модифицированность = Ложь;
	
	ЗаполнятьАвтоматически = Запись.ОпределятьПоОрганизации Или Запись.ОпределятьПоОсновномуМестуРаботы;
	Если ЗаполнятьАвтоматически Тогда
		Запись.Значение = Неопределено;
	Иначе
		Если ИмяТипаСпособа = Элементы.СпособНаКартуМИР.СписокВыбора[0].Значение Тогда
			Запись.Значение = КартаМИР;
		ИначеЕсли ИмяТипаСпособа = Элементы.СпособЗарплатныйПроект.СписокВыбора[0].Значение Тогда
			Запись.Значение = ЗарплатныйПроект;
		ИначеЕсли ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение Тогда
			Запись.Значение = ЭтотОбъект.БанковскийСчет;
		Иначе
			ИмяТипаСпособа = Элементы.СпособВидКонтактнойИнформации.СписокВыбора[0].Значение;
			Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
				Запись.Значение = ВидКонтактнойИнформации;
			Иначе
				Запись.Значение = КадровыйУчет.ВидКонтактнойИнформацииАдресМестаПроживанияФизическогоЛица();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаписаны = РегистрыСведений.НастройкиПрямыхВыплатФСССотрудников.ЗаписатьМенеджерЗаписи(Запись);
	
	Прочитать();
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ФизическоеЛицо);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоФизическимЛицам(ФизическиеЛица);
	
	Элементы.СтраницыПодписейВПодвале.ТекущаяСтраница = Элементы.СтраницаИзмененияСохранены;
	
	Возврат ДанныеЗаписаны;
КонецФункции

&НаСервере
Процедура СохранитьРеквизитыЛицевогоСчета()
	
	Если Не ЗначениеЗаполнено(ЗарплатныйПроект)
		Или ЗарплатныйПроект <> Запись.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатныйПроектОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗарплатныйПроект, "Организация");
	Если Не ЗначениеЗаполнено(ЗарплатныйПроектОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Запись.ФизическоеЛицо);
	НаборЗаписей.Отбор.ЗарплатныйПроект.Установить(ЗарплатныйПроект);
	НаборЗаписей.Отбор.Организация.Установить(ЗарплатныйПроектОрганизация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаписьЛицевогоСчета = НаборЗаписей[0];
	Иначе
		ЗаписьЛицевогоСчета = НаборЗаписей.Добавить();
		ЗаписьЛицевогоСчета.ФизическоеЛицо   = Запись.ФизическоеЛицо;
		ЗаписьЛицевогоСчета.ЗарплатныйПроект = ЗарплатныйПроект;
		ЗаписьЛицевогоСчета.Организация      = ЗарплатныйПроектОрганизация;
	КонецЕсли;
	
	ЗаписьЛицевогоСчета.НомерЛицевогоСчета = НомерСчета;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СпособыПрямыхВыплатФСС.ЗаписатьОшибку(НаборЗаписей.Метаданные(), НаборЗаписей, Подробно);
	КонецПопытки;
	
	Прочитать();
	
	Элементы.СтраницыПодписейВПодвале.ТекущаяСтраница = Элементы.СтраницаИзмененияСохранены;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСовместительство()
	Возврат ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
КонецФункции

&НаСервере
Функция КлючЗаписи()
	Измерения = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация", Запись.ФизическоеЛицо, Запись.ГоловнаяОрганизация);
	Возврат РегистрыСведений.НастройкиПрямыхВыплатФСССотрудников.СоздатьКлючЗаписи(Измерения);
КонецФункции

&НаКлиенте
Процедура ПослеВыбораЗарплатногоПроекта(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СправочникСсылка.ЗарплатныеПроекты")
		Или Не ЗначениеЗаполнено(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли;
	ЗарплатныйПроект = РезультатВыбора;
	РедактируемыйЗарплатныйПроект = ЗарплатныйПроект;
	ЗарплатныйПроектПриИзменении(Элементы.ЗарплатныйПроект);
КонецПроцедуры

&НаКлиенте
Процедура НачатьРедактированиеНомераЛицевогоСчетаЗарплатногоПроекта()
	Если РедактируемыйЗарплатныйПроект = ЗарплатныйПроект Тогда
		Возврат;
	КонецЕсли;
	РедактируемыйЗарплатныйПроект = ЗарплатныйПроект;
	ОбновитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияБанковскогоСчета(Ссылка, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> ТипЗнч(ЭтотОбъект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	ОповеститьПослеЗаписи = Ложь;
	ПослеРедактированияБанковскогоСчетаНаСервере(Ссылка, ОповеститьПослеЗаписи);
	Если ОповеститьПослеЗаписи Тогда
		ОповеститьПослеЗаписи();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияБанковскогоСчетаНаСервере(Ссылка, ОповеститьПослеЗаписи)
	Если Ссылка = ЭтотОбъект.БанковскийСчет
		И ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение Тогда
		// Выбран отредактированный счет, следует перечитать данные.
		Прочитать();
	ИначеЕсли НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерСчета") Тогда
		// Выбран зарплатный проект с таким же номером счета, следует перечитать данные.
		// По умолчанию предполагаем что сотрудник хочет получать пособия "туда же куда и зарплату".
		Прочитать();
	Иначе
		// Текущий номер счета не соответствует отредактированному счету, следует изменить способ выплаты.
		ЭтотОбъект.БанковскийСчет = Ссылка;
		Запись.ОпределятьПоОрганизации = Ложь;
		Запись.ОпределятьПоОсновномуМестуРаботы = Ложь;
		ИмяТипаСпособа = Элементы.СпособБанковскийСчет.СписокВыбора[0].Значение;
		ЗаписатьНаСервере();
		ОповеститьПослеЗаписи = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
