///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ИнформацияОбнаруженоЗацикливание.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		Элементы.ИнформацияОбнаруженоЗацикливание.Заголовок, 
		ОбменДаннымиКонтрольЗацикливания.ВсеЗацикленныеУзлыПредставление());
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	Настройки.РегистрацияДанныхОбменаПриЗацикливании КАК РегистрацияДанныхОбменаПриЗацикливании,
	|	Настройки.ОтключитьКонтрольКонтураСинхронизации КАК ОтключитьКонтрольКонтураСинхронизации
	|ИЗ
	|	РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК Настройки
	|ГДЕ
	|	Настройки.ОбнаруженоЗацикливание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК Настройки
	|ГДЕ
	|	Настройки.ОтключитьКонтрольКонтураСинхронизации";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаУзлов.Загрузить(РезультатЗапроса[0].Выгрузить());
	Если ТаблицаУзлов.Количество() > 0 Тогда
		
		Элементы.ГруппаЭтаБаза.Видимость = Истина;
		Элементы.ФормаПереключитьКонтроль.Видимость = Ложь;
		Элементы.ГруппаДругаяБаза.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаЭтаБаза.Видимость = Ложь;
		Элементы.ФормаПереключитьКонтроль.Видимость = Истина;
		Элементы.ГруппаДругаяБаза.Видимость = Истина;
		
		Элементы.ИнформацияДругаяБаза.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			Элементы.ИнформацияДругаяБаза.Заголовок,
			ОбменДаннымиКонтрольЗацикливания.БазаСПриостановленнойРегистрациейПредставление());
		
	КонецЕсли;
	
	КонтрольКонтураСинхронизацииВключен = РезультатЗапроса[1].Пустой();
	СкрытоПредупреждениеЗацикливания = ОбменДаннымиКонтрольЗацикливания.СкрытоПредупреждениеЗацикливанияОтПользователя();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаголовкиЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаУзлов

&НаКлиенте
Процедура ТаблицаУзловОтключитьКонтрольКонтураСинхронизацииПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ТаблицаУзлов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеКонтролемЗацикленности(ДанныеТекущейСтроки.УзелИнформационнойБазы, ДанныеТекущейСтроки.ОтключитьКонтрольКонтураСинхронизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаУзловРегистрацияДанныхОбменаПриЗацикливании" Тогда
		
		Строка = ТаблицаУзлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Строка.РегистрацияДанныхОбменаПриЗацикливании = НЕ Строка.РегистрацияДанныхОбменаПриЗацикливании;
		
		ВозобновитьПриостановитьРегистрацию(Строка.УзелИнформационнойБазы, Строка.РегистрацияДанныхОбменаПриЗацикливании);
		
	ИначеЕсли Поле.Имя = "ТаблицаУзловНезарегистрированныеДанные" Тогда
		
		Строка = ТаблицаУзлов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", Строка.УзелИнформационнойБазы);
		
		ОткрытьФорму("РегистрСведений.ОбъектыНезарегистрированныеПриЗацикливании.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Оповестить("ИзменениеВидимостиПредупрежденийЗацикливания");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтурСинхронизации(Команда)
	
	ОткрытьФорму("РегистрСведений.КонтурСинхронизации.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьКонтроль(Команда)
	
	ПереключитьКонтрольНаСервере();
	ЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПредупреждениеОЗацикливании(Команда)
	
	СкрытоПредупреждениеЗацикливания = НЕ СкрытоПредупреждениеЗацикливания;
	ОбменДаннымиВызовСервера.СкрытьПоказатьПредупреждениеЗацикливанияОтПользователя(СкрытоПредупреждениеЗацикливания);
	ЗаголовкиЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаголовкиЭлементовФормы()
	
	Если КонтрольКонтураСинхронизацииВключен = Истина Тогда
		
		ЗаголовокСтрокой = НСтр("ru = 'Отключить контроль';
								|en = 'Отключить контроль'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	Иначе
		
		ЗаголовокСтрокой = НСтр("ru = 'Включить контроль';
								|en = 'Включить контроль'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	Элементы.ФормаПереключитьКонтроль.Заголовок = ЗаголовокСтрокой;
	
	
	Если СкрытоПредупреждениеЗацикливания = Истина Тогда
		
		ЗаголовокСтрокой = НСтр("ru = 'Отображать предупреждение о зацикливании';
								|en = 'Отображать предупреждение о зацикливании'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	Иначе
		
		ЗаголовокСтрокой = НСтр("ru = 'Скрыть предупреждение о зацикливании';
								|en = 'Скрыть предупреждение о зацикливании'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	Элементы.ФормаОтображатьПредупреждениеОЗацикливании.Заголовок = ЗаголовокСтрокой;
	
КонецПроцедуры

&НаСервере
Функция УзлыСОбнаруженнымЗацикливанием()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтурСинхронизации.УзелИнформационнойБазы КАК УзелПланаОбмена
	|ИЗ
	|	РегистрСведений.КонтурСинхронизации КАК КонтурСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК ОбщиеНастройкиУзловИнформационныхБаз
	|		ПО КонтурСинхронизации.УзелИнформационнойБазы = ОбщиеНастройкиУзловИнформационныхБаз.УзелИнформационнойБазы
	|ГДЕ
	|	НЕ КонтурСинхронизации.УзелИнформационнойБазы ЕСТЬ NULL");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УзелПланаОбмена");
	
КонецФункции

&НаСервере
Процедура ВозобновитьПриостановитьРегистрацию(УзелИнформационнойБазы, РегистрацияДанныхОбменаПриЗацикливании)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка 
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьЗацикливание(
			УзелИнформационнойБазы,,
			РегистрацияДанныхОбменаПриЗацикливании);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(, УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьКонтрольНаСервере()
	
	УзлыСОбнаруженнымЗацикливанием = УзлыСОбнаруженнымЗацикливанием();
	Для каждого УзелПланаОбмена Из УзлыСОбнаруженнымЗацикливанием Цикл
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьЗацикливание(УзелПланаОбмена, , , КонтрольКонтураСинхронизацииВключен);
		
	КонецЦикла;
	
	КонтрольКонтураСинхронизацииВключен = НЕ КонтрольКонтураСинхронизацииВключен;
	Если НЕ КонтрольКонтураСинхронизацииВключен Тогда
		
		ОбменДаннымиВызовСервера.СкрытьПоказатьПредупреждениеЗацикливанияОтПользователя(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Возобновить регистрацию
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаУзловРегистрацияДанныхОбменаПриЗацикливании");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаУзлов.РегистрацияДанныхОбменаПриЗацикливании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Текст = НСтр("ru = 'Возобновить регистрацию';
				|en = 'Resume registration'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	
	// Приостановить регистрацию
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаУзловРегистрацияДанныхОбменаПриЗацикливании");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаУзлов.РегистрацияДанныхОбменаПриЗацикливании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Текст = НСтр("ru = 'Приостановить регистрацию';
				|en = 'Terminate registration'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);

	// Перейти
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаУзловНезарегистрированныеДанные");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаУзлов.УзелИнформационнойБазы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Текст = НСтр("ru = 'Перейти';
				|en = 'Go to'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеКонтролемЗацикленности(Знач УзелИнформационнойБазы, Знач ОтключитьКонтрольКонтураСинхронизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка 
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьЗацикливание(
			УзелИнформационнойБазы,,, ОтключитьКонтрольКонтураСинхронизации);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(, УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	
КонецПроцедуры

#КонецОбласти
