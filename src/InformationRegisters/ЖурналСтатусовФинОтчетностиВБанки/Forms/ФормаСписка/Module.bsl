#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере()
	
	УстановитьУсловноеОформление();

	НастройкиФильтров = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "НастройкиФильтров");

	// Ограничим список выбираемых организаций только теми, данных которых пользователь может просматривать.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	ПараметрыВыбораОрганизации = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации));
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
	// Если в параметрах явно передана организация, то используем именно ее.
	Если ЗначениеЗаполнено(Параметры.Организация) И ДоступныеОрганизации.Найти(Параметры.Организация) <> Неопределено Тогда
		Организация = Параметры.Организация;
	Иначе
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Организация = ?(НастройкиФильтров = Неопределено, ОсновнаяОрганизация, НастройкиФильтров.Организация);
		
		Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
			Организация = Неопределено;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НастройкиФильтров = Неопределено Тогда
		КонецПериода  = КонецМесяца(ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), -1));
		НачалоПериода = НачалоМесяца(КонецПериода);
		
		ПоказатьПериод();
	Иначе
		
		НачалоПериода = Дата(1, 1, 1);
		КонецПериода  = Дата(1, 1, 1);
		
		Если ЗначениеЗаполнено(НастройкиФильтров.НачалоПериода) Тогда
			НачалоПериода  = НастройкиФильтров.НачалоПериода;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиФильтров.КонецПериода) Тогда
			КонецПериода  = НастройкиФильтров.КонецПериода;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) 
			И ЗначениеЗаполнено(КонецПериода) Тогда
			НачалоПериода = НачалоМесяца(КонецПериода);
		КонецЕсли;
		
		ПоказатьПериод();
		
		Если НастройкиФильтров.Свойство("Банк") Тогда
			Банк = НастройкиФильтров.Банк;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Банк) Тогда
		// Если банк явно задан в параметрах, то используем его.
		Банк = Параметры.Банк;
	КонецЕсли;
	
	ЕстьПравоРедактированияОтчета = ПравоДоступа("Редактирование", Метаданные.Документы.РегламентированныйОтчет);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЕстьПравоРедактированияОтчета ИЛИ ОбщегоНазначения.РазделениеВключено()
		ИЛИ ДанныеАутентификации <> Неопределено Тогда
		Элементы.Предупреждение.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОтборы(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если НЕ ЕстьПравоРедактированияОтчета Тогда
		Элементы.СписокОбновитьСтатусы.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокБанков(Элементы.ОтборБанк.СписокВыбора);
	
	СведенияОДлительнойОперации = Новый Структура();
	СведенияОДлительнойОперации.Вставить("ДлительнаяОперацияОбновленияДанныхСервиса");
	СведенияОДлительнойОперации.Вставить("ДлительнаяОперация");
	СведенияОДлительнойОперации.Вставить("Имя", "");
	СведенияОДлительнойОперации.Вставить("ФормаДлительнойОперации");
	СведенияОДлительнойОперации.Вставить("ПараметрыОжидания");
	СведенияОДлительнойОперации.Вставить("КоличествоЭтапов", 0);
	СведенияОДлительнойОперации.Вставить("НомерЭтапа", 0);
	
	ОбновитьСведенияОСервисе();
	
	Элементы.ОшибкиОбновления.Видимость = Ложь;
	
	Элементы.ГруппаВидеоролики.Видимость = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ФинОтчетность"), 
			ВРег("Видеоролики"), 
			Истина);
	
	УстановитьДинамическуюКартинкуСтатусаОбновления();
	
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключаемыйОбновитьНадписьВремяОбновления();
	ПодключитьОбработчикОжидания("ПодключаемыйОбновитьНадписьВремяОбновления",
		ИнтервалОбработчикаОбновленияНадписейПоУмолчанию());
	ОбработатьНовыеСобытияНаКлиенте(ОбработатьНовыеСобытия());
	
	ОжидатьЗавершениеОбновленияДанныхСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено;
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЗначенияКлюча = Новый Структура();
	ЗначенияКлюча.Вставить("Организация");
	ЗначенияКлюча.Вставить("Предмет");
	
	Если ИмяСобытия = "Запись_РегламентированныйОтчет" ИЛИ ИмяСобытия = "Позиционирование в списке отчетов" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка") И Параметр.Свойство("Организация") Тогда
			ЗначенияКлюча.Предмет     = Параметр.Ссылка;
			ЗначенияКлюча.Организация = Параметр.Организация;
		КонецЕсли;
		
	ИначеЕсли (ИмяСобытия = "Запись_ФинОтчетВБанк"  ИЛИ ИмяСобытия = "ФинОтчетВБанк_Отправка") Тогда
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.ФинОтчетВБанк") Тогда
			РеквизитыДокумента        = ЗначенияРеквизитовОбъекта(Источник, "Организация");
			ЗначенияКлюча.Предмет     = Источник;                                           
			ЗначенияКлюча.Организация = РеквизитыДокумента.Организация;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "РасшифрованыПротоколыФинансовойОтчетностиВБанки" Тогда
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = ФинОтчетностьВБанкиКлиентСервер.ИмяСобытияПометкаПредметаПрочтенным() Тогда
		ОбработатьНовыеСобытияНаКлиенте(ОбработатьНовыеСобытия());
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияПолучениеВсехОшибокОперации() Тогда
		ВывестиОшибкиПоследнегоОбменаВПанель(ЭтотОбъект, УникальныйИдентификатор);
		
	ИначеЕсли ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиент.ИмяСобытияСменаЭтапаОбмена() Тогда
		УстановитьТекущуюОрганизацию(Параметр.Организация);
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		Элементы.Предупреждение.Видимость = Ложь;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначенияКлюча.Предмет) И ЗначениеЗаполнено(ЗначенияКлюча.Организация) Тогда
		// Обновляем список и позиционируемся на измененном документе.
		Элементы.Список.Обновить();
		КлючЗаписи = СоздатьКлючЗаписиРегистра(ЗначенияКлюча);
		Элементы.Список.ТекущаяСтрока = КлючЗаписи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПроОшибкиОбменаОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОшибкиПоследнегоОбмена = ПолучитьИзВременногоХранилища(АдресСведенийПоОшибкам);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", Неопределено);
	ДлительныеОперацииОбменаСБанкамиКлиент.ПоказатьОшибки(
		ОшибкиПоследнегоОбмена,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ Очистка Тогда
		СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено;
		УстановитьОтборПоОрганизации();
	Иначе
		Очистка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено;
	ОрганизацияОчисткаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	НачалоПериода = Дата(1, 1, 1);
	КонецПериода  = Дата(1, 1, 1);
	
	УстановитьОтборы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтборВыбратьПериодЗавершение", 
		ЭтотОбъект);
		
	СтандартнаяОбработка = Ложь;
	
	ТекущаяДатаСеанса = Неопределено;

	
	НачалоПериодаВыбор = НачалоПериода;
	КонецПериодаВыбор  = КонецПериода;

	
	Если НЕ ЗначениеЗаполнено(НачалоПериодаВыбор) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаНаСервере();
		НачалоПериодаВыбор = НачалоКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонецПериодаВыбор) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяДатаСеанса) Тогда
			ТекущаяДатаСеанса = ТекущаяДатаНаСервере();
		КонецЕсли;
		КонецПериодаВыбор = КонецКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ВидПериода",
		НачалоПериодаВыбор, КонецПериодаВыбор, Неопределено);
	
	ОткрытьФорму("РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки.Форма.ВыборСтандартногоПериодаГодКвартал", ПараметрыВыбора, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	УстановитьОтборы(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтборы(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Предмет) Тогда
		Возврат;
	КонецЕсли;
		
	Предмет = ТекущиеДанные.Предмет;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.СписокСтатусОтчета И ФинОтчетностьВБанкиКлиентСервер.ЭтоБанкУниверсальногоОбмена(ТекущиеДанные.Банк) Тогда

		Если ТекущиеДанные.Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусНеОтправлено() Тогда
			ТекстСообщения = НСтр("ru = 'Для отправки откройте форму пакета отчетности и нажмите кнопку ""Отправить""';
									|en = 'To send, open the reporting batch form and click ""Submit""'");
			ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Отчетность еще не отправлена';
															|en = 'Reporting has not been sent yet'"));
			Возврат;

		ИначеЕсли ТекущиеДанные.Статус =  ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено() 
			ИЛИ ТекущиеДанные.Статус =  ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено() Тогда

			// Для отчета, по которому не получен протокол открываем форму этапов отправки.
			Документооборот = УниверсальныйОбменСБанкамиВызовСервера.
				ПоследнийДокументооборотПоПредмету(Предмет,, Истина);
			Если Документооборот <> Неопределено Тогда
				УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуСостоянияДокументооборота(Документооборот);
			КонецЕсли;
			Возврат;

		ИначеЕсли ТекущиеДанные.Статус =  ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка() Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Предмет);

		КонецЕсли;

		// Открываем протокол.
		ФинОтчетностьВБанкиКлиент.ОткрытьПротокол(Предмет);
	
	ИначеЕсли Поле = Элементы.СписокЕстьКритическиеОшибки
		И Элемент.ТекущиеДанные.ЕстьКритическиеОшибки
		И ФинОтчетностьВБанкиКлиентСервер.ЭтоБанкУниверсальногоОбмена(ТекущиеДанные.Банк) Тогда
		
		ПоказатьКритическиеОшибкиПоСсылке(Предмет);
	Иначе
		Результат = ПометитьПрочтенными();
		// Оповещаем другие формы.
		Оповестить(
			ФинОтчетностьВБанкиКлиентСервер.ИмяСобытияПометкаПредметаПрочтенным(),,
			Результат.СтавшиеПрочтенными);
		// Открываем сам отчет.
		ПоказатьЗначение(, ТекущиеДанные.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьФормуНовогоОтчета();

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	// Вместо платформенной формы записи регистра открываем форму пакета отчетности.
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Предмет) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Предмет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	// Вместо стандартного удаления записей регистров, изменим пометку на удаление для соответствующего документа.
	Отказ = Истина;
	
	СнятьПометку = Ложь;
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки.ПометкаУдаления Тогда
			СнятьПометку = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		ПредставлениеПредмета = ПредставлениеПредмета(Элементы.Список.ТекущиеДанные.Предмет);
		Если СнятьПометку Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?';
											|en = 'Do you want to clear a deletion mark for ""%1""?'"), ПредставлениеПредмета);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?';
											|en = 'Do you want to mark %1 for deletion?'"), ПредставлениеПредмета);
		КонецЕсли;
	Иначе
		Если СнятьПометку Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?';
								|en = 'Unmark selected items for deletion?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?';
								|en = 'Mark the selected items for deletion?'");
		КонецЕсли; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Предметы = Новый Массив;
	СнятьПометку = Ложь;
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки.Предмет) Тогда
			Предметы.Добавить(ДанныеСтроки.Предмет);
			Если ДанныеСтроки.ПометкаУдаления Тогда
				СнятьПометку = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Предметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуУдаления(Предметы, НЕ СнятьПометку);
	
	Элементы.Список.Обновить();
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.ПриИзмененииСписка(ЭтотОбъект, Элементы.Список);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		// Ранее были ошибки доступа к сервису, попытаемся еще раз.
		ОписаниеОшибкиОбновленияДанныхСервиса = "";
		ОбновитьСведенияОСервисе();
		ОжидатьЗавершениеОбновленияДанныхСервиса();
		УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
	Иначе
		// Обновляем статусы ранее отправленных пакетов отчетности.
		ОбновитьСтатусыОтчетов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержкиПользователей", ЭтотОбъект);
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Обработчик, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправку(Команда)
	Перем ВыбранныйБанк;

	Если ЗначениеЗаполнено(Банк) Тогда
		ВыбранныйБанк = Банк;
	ИначеЕсли Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВыбранныйБанк = Элементы.Список.ТекущиеДанные.Банк;
	КонецЕсли;
	
	ЗаполнениеФинОтчетностиВБанкиКлиентПереопределяемый.НастроитьОтправку(ЭтотОбъект, ВыбранныйБанк);

КонецПроцедуры

&НаКлиенте
Процедура ЖурналПередачи(Команда)
	
	ОткрытьФорму("РегистрСведений.ЖурналПередачиОтчетностиВБанк.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПрочитанным(Команда)
	
	Результат = ПометитьПрочтенными();
	
	Если Результат.ВсеВыделенныеОбъекты.Количество() > 0
		И Результат.СтавшиеПрочтенными.Количество() = 0 Тогда
		СообщитьОНевозможностиИзменитьПрочтенность();
		Возврат;
	КонецЕсли;

	// Оповещаем другие формы.
	Оповестить(
		ФинОтчетностьВБанкиКлиентСервер.ИмяСобытияПометкаПредметаПрочтенным(),,
		Результат.СтавшиеПрочтенными);
	
	// Обновление динамического списка.
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоОрганизации()
	
	Перем ОтборОрганизация;
	
	ОтборДинамическогоСписка = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	Для Каждого Элемент Из ОтборДинамическогоСписка.Элементы Цикл
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			ОтборОрганизация = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборОрганизация = Неопределено Тогда
		ОтборОрганизация = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	КонецЕсли;
	
	ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОрганизация.ПравоеЗначение = Организация;
	
	ОтборОрганизация.Использование = Истина;
	
	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	НастройкиФильтров = Новый Структура;
	
	НастройкиФильтров.Вставить("НачалоПериода", НачалоПериода);
	НастройкиФильтров.Вставить("КонецПериода", КонецПериода);
	
	НастройкиФильтров.Вставить("Организация", Организация);
	НастройкиФильтров.Вставить("Банк", Банк);
	
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "НастройкиФильтров", НастройкиФильтров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ФинОтчетность"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПериодОтчета = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОчисткаНаСервере()
	
	Перем ОтборОрганизация;
	
	ОтборДинамическогоСписка = Список.КомпоновщикНастроек.Настройки.Отбор;
						
	Для Каждого Элемент Из ОтборДинамическогоСписка.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			ОтборОрганизация = Элемент;
		КонецЕсли;
				
	КонецЦикла;
	
	Если НЕ ОтборОрганизация = Неопределено Тогда
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборОрганизация);
	КонецЕсли;
	
	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
	Очистка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	ПараметрыФормы.Отбор.Вставить("Получатель", Банк);
	ОткрытьФорму("Справочник.ПравилаФинОтчетности.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоОтчета()
	
	// Проверяем, что закончилось задание обновления данных из сервиса.
	Если СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса <> Неопределено
		И СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса" Тогда
		ОбработчикПослеЗавершения = Новый ОписаниеОповещения("ОткрытьФормуНовогоОтчетаЗавершение", ЭтотОбъект);
		ОжидатьЗавершениеОбновленияДанныхСервиса(Истина, ОбработчикПослеЗавершения);
		Возврат;
	КонецЕсли;
	
	ПараметрыСозданияФормыОтчета = НовыеПараметрыСозданияФормыОтчета();
	
	Если Элементы.Предупреждение.Видимость Тогда
		ПараметрыСозданияФормыОтчета.ВидПрепятствияДляСоздания = "НетИнтернетПоддержки";
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибкиОбновленияДанныхСервиса) Тогда
		ПараметрыСозданияФормыОтчета.ВидПрепятствияДляСоздания = "Прочие";
		ПараметрыСозданияФормыОтчета.ОписаниеПрепятствийДляСоздания = 
			УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(
			ОписаниеОшибкиОбновленияДанныхСервиса);
		
	КонецЕсли;
	
	ОткрытьФормуНовогоОтчетаЗавершение(Истина, ПараметрыСозданияФормыОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция НовыеПараметрыСозданияФормыОтчета()
	
	ПараметрыСозданияФормыОтчета = Новый Структура;
	
	// Виды препятствий для создания:
	//   * "НетИнтернетПоддержки";
	//   * "Прочие";
	//   * "" - нет препятствий.
	ПараметрыСозданияФормыОтчета.Вставить("ВидПрепятствияДляСоздания", "");
	ПараметрыСозданияФормыОтчета.Вставить("ОписаниеПрепятствийДляСоздания", "");
	
	Возврат ПараметрыСозданияФормыОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНовогоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Банк", Банк);
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыФормы.Вставить("КонецПериода",  КонецПериода);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВидПрепятствияДляСоздания", ДополнительныеПараметры.ВидПрепятствияДляСоздания);
		ПараметрыФормы.Вставить("ОписаниеПрепятствийДляСоздания", ДополнительныеПараметры.ОписаниеПрепятствийДляСоздания);
	КонецЕсли;
	
	ОбработчикРезультатаЗакрытияОкнаСозданияОтчета = Новый ОписаниеОповещения(
		"ОбработатьРезультатЗакрытияОкнаСозданияОтчета", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки.Форма.ФормаСозданияНовогоОтчета",
		ПараметрыФормы, ЭтотОбъект, , , , ОбработчикРезультатаЗакрытияОкнаСозданияОтчета,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗакрытияОкнаСозданияОтчета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = "ПодключитьИнтернетПоддержку" Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержкиПользователей", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Обработчик, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		 ИЛИ НЕ РезультатВыбора.Свойство("НачалоПериода")
		 ИЛИ НЕ РезультатВыбора.Свойство("КонецПериода") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачалоПериода = ?(ЗначениеЗаполнено(РезультатВыбора.НачалоПериода), 
		НачалоДня(РезультатВыбора.НачалоПериода), РезультатВыбора.НачалоПериода);
	
	КонецПериода  = ?(ЗначениеЗаполнено(РезультатВыбора.КонецПериода),
		КонецДня(РезультатВыбора.КонецПериода),   РезультатВыбора.КонецПериода);
	
	ПоказатьПериод();
	
	УстановитьОтборы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборы(Форма)
	
	ОтборДинамическогоСписка = Форма.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборДинамическогоСписка.Элементы.Очистить();
	
	ОтборОрганизация    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаНачала     = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания1 = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания2 = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЗаполненБанк   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборБанк           = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТипБанка        = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборОрганизация.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
	ОтборДатаНачала.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ДатаНачала");
	ОтборДатаОкончания1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	ОтборДатаОкончания2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	ОтборЗаполненБанк.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Банк");
	ОтборБанк.ЛевоеЗначение           = Новый ПолеКомпоновкиДанных("Банк");
	ОтборТипБанка.ЛевоеЗначение       = Новый ПолеКомпоновкиДанных("ТипБанка");
	
	ОтборЗаполненБанк.Использование = Истина;
	ОтборЗаполненБанк.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация) Тогда
		ОтборОрганизация.Использование = Ложь;
	Иначе
		ОтборОрганизация.Использование  = Истина;
		ОтборОрганизация.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборОрганизация.ПравоеЗначение = Форма.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Банк) Тогда
		ОтборБанк.Использование     = Ложь;
		ОтборТипБанка.Использование = Ложь;
	Иначе
		Если ФинОтчетностьВБанкиКлиентСервер.ЭтоБанкУниверсальногоОбмена(Форма.Банк) Тогда
			ОтборТипБанка.Использование  = Ложь;
			ОтборБанк.Использование      = Истина;
			ОтборБанк.ВидСравнения       = ВидСравненияКомпоновкиДанных.Равно;
			ОтборБанк.ПравоеЗначение     = Форма.Банк;
		Иначе
			ОтборБанк.Использование      = Ложь;
			ОтборТипБанка.Использование  = Истина;
			ОтборТипБанка.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборТипБанка.ПравоеЗначение = ТипОбычногоБанка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ПериодОтчета) Тогда
		ОтборДатаНачала.Использование = Ложь;
		ОтборДатаОкончания1.Использование = Ложь;
		ОтборДатаОкончания2.Использование = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Форма.НачалоПериода) Тогда
			ОтборДатаНачала.Использование      = Истина;
			ОтборДатаНачала.ВидСравнения       = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ОтборДатаНачала.ПравоеЗначение     = НачалоГода(Форма.НачалоПериода);
			
			ОтборДатаОкончания1.Использование  = Истина;
			ОтборДатаОкончания1.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
			ОтборДатаОкончания1.ПравоеЗначение = Форма.НачалоПериода;
		Иначе
			ОтборДатаНачала.Использование      = Ложь;
			ОтборДатаОкончания1.Использование  = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.КонецПериода) Тогда
			ОтборДатаОкончания2.Использование  = Истина;
			ОтборДатаОкончания2.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ОтборДатаОкончания2.ПравоеЗначение = Форма.КонецПериода;
		Иначе
			ОтборДатаОкончания2.Использование  = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержкиПользователей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Предупреждение.Видимость = Ложь;
	
	// Запустим обновление данных из сервиса.
	ОбновитьСведенияОСервисе();

	ОжидатьЗавершениеОбновленияДанныхСервиса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Устанавливаем для колонки Состояние цвет текста в зависимости от статуса отправки.
	УсловноеОформление.Элементы.Очистить();

	// Состояние отправки
	ЗначенияПеречисления = Метаданные.Перечисления.СтатусыОтправкиФинОтчетностиВБанки.ЗначенияПеречисления;

	Для каждого МетаданныеЗначения Из ЗначенияПеречисления Цикл

		Статус = Перечисления.СтатусыОтправкиФинОтчетностиВБанки[МетаданныеЗначения.Имя];

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокСтатусОтчета");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.Статус", ВидСравненияКомпоновкиДанных.Равно, Статус);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ФинОтчетностьВБанки.ЦветТекстаСтатусаОтчета(Статус));
		
	КонецЦикла;

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Непрочтенное", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокБанков(СписокВыбора)

	СписокВыбора.Очистить();
	
	// Показываем в том числе и неактивные, т.к. по ним ранее могли быть уже сданы отчеты.
	ДоступныеБанки = ФинОтчетностьВБанкиВызовСервера.ДоступныеБанки(Истина);
	
	Для каждого ЭлементСписка Из ДоступныеБанки Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаления(Знач Предметы, Знач ПометкаУдаления)

	Для каждого Предмет Из Предметы Цикл
	
		ДокОбъект = Предмет.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		
		// В записях регистра признак пометки удаления изменяется в обработчиках ПриЗаписи() документов.
	
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	
	// Скроем элементы управления, которые не применимы для конкретного выбранного банка.
	БанкВыбран = ЗначениеЗаполнено(Форма.Банк);
	ЭтоБанкУниверсальногоОбмена = ФинОтчетностьВБанкиКлиентСервер.ЭтоБанкУниверсальногоОбмена(Форма.Банк);
	
	// Специфические команды для Сбербанка.
	ЗаполнениеФинОтчетностиВБанкиКлиентСерверПереопределяемый.УстановитьВидимостьКнопкиНастройкиОтправки(Форма);
	Элементы.СписокЖурналПередачи.Видимость = БанкВыбран И НЕ ЭтоБанкУниверсальногоОбмена;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Знач Ссылка, Знач Реквизиты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиРегистра(Знач ЗначенияКлюча)

	Возврат РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки.СоздатьКлючЗаписи(ЗначенияКлюча);

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПредмета(Знач Предмет) 

	Возврат ФинОтчетностьВБанки.ПредставлениеПредмета(Предмет);

КонецФункции

#Область ОбновлениеДанныхСервиса

&НаСервере
Процедура ОбновитьСведенияОСервисе()

	Если НЕ ЕстьПравоРедактированияОтчета Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("СведенияОСервисе") Тогда
		СведенияОСервисе = Параметры.СведенияОСервисе;
	Иначе
		СведенияОСервисе = УниверсальныйОбменСБанками.
			СведенияОСервисе(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
	КонецЕсли;
	
	ФинОтчетностьВБанки.НачатьОбновлениеДанныхСервиса(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеОбновленияДанныхСервиса(ВыводитьОкноОжидания = Ложь, ОбработчикПослеЗавершения = Неопределено) Экспорт

	Если СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса = Неопределено Тогда
		// Фоновое задание не запущено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения       = НСтр("ru = 'Обновление данных сервиса 1С:ФинОтчетность';
													|en = 'Update 1C:Financial Reporting service data'");
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбработчикПослеЗавершения", ОбработчикПослеЗавершения);
	
	ОповещенияОЗавершении = Новый ОписаниеОповещения("ОбновлениеДанныхСервисаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса,
		ОповещенияОЗавершении,
		ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;	
	КонецЕсли;
	
	// Запомним, что текущее фоновое задание завершилось, чтобы можно было переходить к следующим шагам.
	СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса = Неопределено; // Сбросим признак выполнения.
	СведенияОДлительнойОперации.Имя = "";
	
	ЕстьОшибки = Ложь;
	ОписаниеОшибкиОбновленияДанныхСервиса = "";
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус", "") = "Ошибка" Тогда
		// Ошибка работы фонового задания.
		ЕстьОшибки = Истина;
		ОписаниеОшибкиОбновленияДанныхСервиса = Результат.КраткоеПредставлениеОшибки;
		Элементы.СообщениеПроОшибкиОбмена.Заголовок = 
			УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(ОписаниеОшибкиОбновленияДанныхСервиса);
		
	Иначе
		
		РезультатОбновленияДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОбновленияДанных.ИмяСобытия = "ДанныеАктуальны" Тогда
			// Перезаполним список доступных банков.
			ЗаполнитьСписокБанков(Элементы.ОтборБанк.СписокВыбора);
			
		Иначе
			// Ошибка результата фонового задания.
			ЕстьОшибки = Истина;
			
			ОписаниеОшибкиОбновленияДанныхСервиса = РезультатОбновленияДанных.ОписаниеСобытия;
			Если РезультатОбновленияДанных.ИмяСобытия = "ОшибкаАвторизацииПоЛогину" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при авторизации по логину ИТС: %1
                                                |Проверьте правильность указания пользователя и пароля.';
                                                |en = 'An error occurred during ITS username authorization: %1
                                                |Make sure the user and password are correct.'");
				
			ИначеЕсли РезультатОбновленияДанных.ИмяСобытия = "ОшибкаПриПолученииТикета" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка прав доступа к ресурсу (тикета): %1
                                                |Обратитесь к админинстраторам ресурса.';
                                                |en = 'Resource access rights (ticket) error: %1
                                                |Contact the resource administrators.'");
				
			ИначеЕсли РезультатОбновленияДанных.ИмяСобытия = "ОшибкаПриПолученииДанных" Тогда
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка при получении данных: %1
                                                |Попробуйте повторно запустить обновление данных сервиса.';
                                                |en = 'Error receiving data: %1
                                                |Try to restart the service data update.'");
				                              
			КонецЕсли;
			Если РезультатОбновленияДанных.ИмяСобытия = "Ошибка" Тогда
				Элементы.СообщениеПроОшибкиОбмена.Заголовок = 
					УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьТекстОшибкиОбновленияДанныхСервиса(ОписаниеОшибкиОбновленияДанныхСервиса);
			Иначе
				Элементы.СообщениеПроОшибкиОбмена.Заголовок = СтрШаблон(ШаблонСообщенияОбОшибке, ОписаниеОшибкиОбновленияДанныхСервиса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеЗавершения, НЕ ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
		
	Иначе
		
		СтартоватьОбновлениеСтатусовОтчетов();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СообщитьОНевозможностиИзменитьПрочтенность()
	
	ТекстСообщения = НСтр("ru = 'Отчет уже прочитан';
							|en = 'The report is already read'");
		
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьОбновлениеСтатусовОтчетов()
	
	ОбновитьСтатусыОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновогоОбновленияСтатусовОтчетов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		МассивОтчетов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если МассивОтчетов.Количество() Тогда
			Оповестить("ПолученСтатусОтчетаВБанке", МассивОтчетов);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыводитьОшибку Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ВидОперации = НСтр("ru = 'Обновление статусов отчетов.';
								|en = 'Update the report statuses.'");
			ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки);
		КонецЕсли;
	Иначе
		ПодключитьОбработчикОжидания("СтартоватьОбновлениеСтатусовОтчетов", 300, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКритическиеОшибкиПоСсылке(Предмет)
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьОшибку(Предмет,
		ЭтотОбъект,
		УникальныйИдентификатор,
		"");
	
КонецПроцедуры
	
&НаСервере
Функция ПометитьПрочтенными()
	
	ВсеВыделенныеОбъекты 	= Новый Массив;
	СтавшиеПрочтенными 		= Новый Массив;
	СтавшиеНепрочтенными 	= Новый Массив;
	
	Для каждого Строка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВсеВыделенныеОбъекты.Добавить(Строка.Предмет);
	КонецЦикла;
		
	СтавшиеПрочтенными = ФинОтчетностьВБанки.ПометитьПредметыПрочтенными(ВсеВыделенныеОбъекты);
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеВыделенныеОбъекты", 		ВсеВыделенныеОбъекты);
	Результат.Вставить("СтавшиеПрочтенными", 		СтавшиеПрочтенными);
	Результат.Вставить("СтавшиеНепрочтенными", 		СтавшиеНепрочтенными);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеПоОбновлениюСтатусовОтчетовВСбербанкНаСервере(ИдентификаторФормы, ПараметрыКлиента)
	
	ПараметрыПроцедуры = Новый Структура("ПараметрыКлиента", ПараметрыКлиента);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = Нстр("ru = 'Получение статусов отчетов Сбербанка';
																|en = 'Receive Sberbank report statuses'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОтчетностьВБанкиСлужебный.ОбновитьСтатусыОтчетов", ПараметрыПроцедуры, ПараметрыВыполненияВФоне);

КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеПоОбновлениюСтатусовНаСервереДляБанковУниверсальногоОбмена(
		Знач ИдентификаторФормы,
		АдресЭтапов)
	
	ПараметрыПроцедуры = Новый Структура("Отбор, АдресЭтапов",
		Неопределено,
		АдресЭтапов);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = Нстр("ru = 'Получение статусов отчетов 1С:ФинОтчетности';
																|en = 'Receive 1C:Financial Reporting report statuses'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ФинОтчетностьВБанки.ОбновитьСтатусыОтчетов", ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации(СведенияОДлительнойОперации)
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыДлительнойОперации = ДлительныеОперацииОбменаСБанкамиКлиент.
		ПараметрыДлительногоОбмена();
	ПараметрыФормыДлительнойОперации.ПараметрыРежима.ЭтоОбменИзФормыСпискаПредметов = Истина;
	ПараметрыФормыДлительнойОперации.ИдентификаторФоновогоЗаданияОбмена =
		СведенияОДлительнойОперации.ДлительнаяОперация.ИдентификаторЗадания;
	
	СведенияОДлительнойОперации.ФормаДлительнойОперации =
		ДлительныеОперацииОбменаСБанкамиКлиент.ПоказатьФормуОбмена(
			ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность"),
			ПараметрыФормыДлительнойОперации);
			
	// Добавляем этап обмена со Сбербанком.
	Сбербанк = НСтр("ru = 'ПАО Сбербанк';
					|en = 'Sberbank PJSC'");
	ПараметрыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыДобавленияЭтапаОбмена();
	ПараметрыЭтапа.ИмяСобытия = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПолучениеВходящих();
	ПараметрыЭтапа.Банк = Сбербанк;
	ПараметрыЭтапа.ВесЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВесЭтапаПоУмолчанию() / 2;
	ПараметрыЭтапа.ИндексЭтапа = 0;
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОДобавленииЭтапа(ПараметрыЭтапа);
	
	// Оповещаем клиента об изменении статуса обмена.
	ПараметрыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыЭтапа.Имя = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПолучениеВходящих();
	ПараметрыЭтапа.Банк = Сбербанк;
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаОбмена(ПараметрыЭтапа);
	
	ПараметрыИзменения =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.
			НовыеПараметрыИзмененияПризнакаЧтенияСообщенийФоновогоЗадания(Истина);
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ОповеститьОбИзмененииПризнакаЧтенияСообщенийФоновогоЗадания(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыОтчетов(ВыводитьОшибку = Ложь)
	
	Если СведенияОДлительнойОперации.ФормаДлительнойОперации <> Неопределено
		И НЕ СведенияОДлительнойОперации.ФормаДлительнойОперации.Открыта() Тогда
		// Форма была закрыта, но операция не завершилась.
		СведенияОДлительнойОперации.Имя = "";
		СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено;
		СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперация <> Неопределено Тогда
		Если ВыводитьОшибку И СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено Тогда
			// Открываем форму длительной операции.
			ОткрытьФормуДлительнойОперации(СведенияОДлительнойОперации);
			Элементы.КартинкаАнимацияОбновления.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИдентификаторФоновогоЗаданияОбмена = Неопределено;
	ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания = Ложь;
	
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ОчиститьПараметрыДлительнойОтправкиКлиентСервер();
		
	// Очищаем сведения об ошибках.
	ДлительныеОперацииОбменаСБанкамиВызовСервера.СохранитьОшибкиПоследнегоОбмена(Неопределено);
		
	Элементы.КартинкаАнимацияОбновления.Видимость = НЕ ВыводитьОшибку;
	
	// Длительная операция получения статусов Сбербанка.
	СведенияОДлительнойОперации.Имя = "ОбновитьСтатусыОтчетовСбербанка";
	СведенияОДлительнойОперации.ПараметрыОжидания =
		ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	СведенияОДлительнойОперации.ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	СведенияОДлительнойОперации.ПараметрыОжидания.ТекстСообщения =
		НСтр("ru = 'Получение статусов отчетов для Сбербанка';
			|en = 'Receive report statuses for Sberbank'");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("ТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	ПараметрыКлиента.Вставить("ВерсияОС", СистемнаяИнформация.ВерсияОС);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыводитьОшибку", ВыводитьОшибку);
	ДополнительныеПараметры.Вставить("БылиОшибки", Ложь);
	ДополнительныеПараметры.Вставить("ТекущийИндексВКоллекции", 0);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеФоновогоОбновленияСтатусовОтчетовСбербанка",
		ЭтотОбъект,
		ДополнительныеПараметры);
	СведенияОДлительнойОперации.ДлительнаяОперация =
		ЗаданиеПоОбновлениюСтатусовОтчетовВСбербанкНаСервере(
			УникальныйИдентификатор,
			ПараметрыКлиента);
	
	Если ВыводитьОшибку Тогда
		ОткрытьФормуДлительнойОперации(СведенияОДлительнойОперации);
	КонецЕсли;
	
	АдресСведенийПоОшибкам = "";
	УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
	
	// Запускаем операцию обмена.
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперация,
		Оповещение,
		СведенияОДлительнойОперации.ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновогоОбновленияСтатусовОтчетовСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		МассивОтчетов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если МассивОтчетов.Количество() Тогда
			Оповестить("ПолученСтатусОтчетаВБанке", МассивОтчетов);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРезультатОбновленияСтатусовОтчетов(Результат, ДополнительныеПараметры);
	
	// Запуск длительной операция получения статусов банков универсального обмена.
	СведенияОДлительнойОперации.Имя = "ОбновитьСтатусыОтчетовБанковУниверсальногоОбмена";
	СведенияОДлительнойОперации.ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	СведенияОДлительнойОперации.ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	СведенияОДлительнойОперации.ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение данных с сервера обмена 1С:ФинОтчетности';
																		|en = 'Receive data from 1C:Financial Reporting exchange server'");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеФоновогоОбновленияСтатусовОтчетовБанковУниверсальногоОбмена",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	АдресЭтапов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СведенияОДлительнойОперации.ДлительнаяОперация =
		ЗаданиеПоОбновлениюСтатусовНаСервереДляБанковУниверсальногоОбмена(
			УникальныйИдентификатор,
			АдресЭтапов);
		
	ИдентификаторЗадания = СведенияОДлительнойОперации.ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыСменыИдентификатора =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСменыИдентификатораФоновогоЗадания();
	ПараметрыСменыИдентификатора.Идентификатор = ИдентификаторЗадания;
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеИдентификатораФоновогоЗадания(
		ПараметрыСменыИдентификатора);
	
	Если НЕ ДополнительныеПараметры.ВыводитьОшибку Тогда
		// Запускаем обработчик ожидания для чтения сообщений об ошибках.
		ИдентификаторФоновогоЗаданияОбмена = ИдентификаторЗадания;
		ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания = Истина;
		ПодключитьОбработчикОжидания(
			"ПодключаемыйПрочитатьСообщенияФоновыхЗаданий",
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИнтервалЧтенияСообщенийФоновыхЗаданий(),
			Истина);
	КонецЕсли;
	
	// Запускаем операцию обмена.
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СведенияОДлительнойОперации.ДлительнаяОперация,
		Оповещение,
		СведенияОДлительнойОперации.ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновогоОбновленияСтатусовОтчетовБанковУниверсальногоОбмена(
		Результат,
		ДополнительныеПараметры) Экспорт
		
	// Отключаем признак чтения сообщений фонового задания в этой форме.
	ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания = Ложь;
		
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		МассивТранзакций = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если МассивТранзакций <> Неопределено И МассивТранзакций.Количество() > 0 Тогда
			МассивОтчетов = Новый Массив;
			Для каждого Транзакция Из МассивТранзакций Цикл
				Отчет = УниверсальныйОбменСБанкамиВызовСервера.ПредметТранзакции(Транзакция);
				МассивОтчетов.Добавить(Отчет);
			КонецЦикла;
			Оповестить("ПолученСтатусОтчетаВБанке", МассивОтчетов);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Транзакции =
		УниверсальныйОбменСБанкамиКлиент.
			ТранзакцииТребующиеРасшифровки(
				ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность"));
				
	ОбработатьРезультатОбновленияСтатусовОтчетов(Результат, ДополнительныеПараметры);
	
	Если Транзакции.Количество() = 0 
		ИЛИ СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено Тогда
		// Нет входящих или не была открыта форма длительной операции.
		
		Если СведенияОДлительнойОперации.ФормаДлительнойОперации <> Неопределено Тогда
			ОповеститьОЗавершении();
		КонецЕсли;
		ПослеОбновленияСтатусовОтчетов(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ОбработатьНовыеСобытияНаКлиенте(ОбработатьНовыеСобытия());
	
	ОрганизацииТранзакций = УниверсальныйОбменСБанкамиВызовСервера.ОрганизацияТранзакции(Транзакции);
	
	Организации = Новый Соответствие;
	Для каждого КлючЗначение Из ОрганизацииТранзакций Цикл
		Организации.Вставить(КлючЗначение.Значение, Истина);
	КонецЦикла;
	
	Этапы = Новый Массив;
	Для каждого КлючЗначение Из Организации Цикл
		Этап = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
			НовыеПараметрыДобавленияЭтапаОбмена();
		Этап.Организация = КлючЗначение.Ключ;
		Этапы.Добавить(Этап);
	КонецЦикла;
	
	// Отключаем признак чтения сообщений фонового задания в форме длительной операции.
	ПараметрыИзменения =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.
			НовыеПараметрыИзмененияПризнакаЧтенияСообщенийФоновогоЗадания(Ложь);
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ОповеститьОбИзмененииПризнакаЧтенияСообщенийФоновогоЗадания(ПараметрыИзменения);
	
	// Оповещаем о смене этапа на расшифровку.
	ПараметрыУточнения = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		НовыеПараметрыУточненииЭтаповСобытияОбмена();
	ПараметрыУточнения.ИмяСобытия =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаРасшифровкаСообщений();
	ПараметрыУточнения.ЭтапыСобытия = Этапы;
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОбУточненииЭтаповСобытия(ПараметрыУточнения);
	
	ОповеститьОРасшифровке();
	
	ПараметрыРасшифровки = УниверсальныйОбменСБанкамиКлиент.ПараметрыРасшифроватьНерасшифрованныеТранзакции();
	ПараметрыРасшифровки.Сервис = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность");
	ПараметрыРасшифровки.ФормаВладелец = ЭтотОбъект;
	ПараметрыРасшифровки.РасшифровкаВПроцессеОбмена = Истина;
	Оповещение = Новый ОписаниеОповещения(
		"ОбновитьСтатусыОтчетовПослеРасшифровкиТранзакций", ЭтотОбъект, ДополнительныеПараметры);
	УниверсальныйОбменСБанкамиКлиент.РасшифроватьНерасшифрованныеТранзакции(Оповещение, ПараметрыРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыОтчетовПослеРасшифровкиТранзакций(Результат, ДополнительныеПараметры) Экспорт
	
	ОповеститьОЗавершении();
	ПослеОбновленияСтатусовОтчетов(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНовыеСобытияНаКлиенте(Данные)
	
	Элементы.ДекорацияНовыеСообщения.Заголовок = Данные.ТекстНадписи;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьНовыеСобытия()
	
	Результат = Новый Структура;
	Результат.Вставить("Новых", 0);
	Результат.Вставить("ТекстНадписи", "");
	
	Сервис = Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность;
	
	ДеревоСобытий = УниверсальныйОбменСБанками.НовоеДеревоНовыхСобытий();
	УниверсальныйОбменСБанками.ЗаполнитьДеревоНовое(
		Сервис,
		ДеревоСобытий);
	ДанныеГрупп = УниверсальныйОбменСБанками.ГруппыСобытийСервиса(Сервис);
	Результат.Новых = УниверсальныйОбменСБанкамиКлиентСервер.
		ОпределитьКоличествоНовых(ДеревоСобытий.Строки, ДанныеГрупп);
	
	Если Результат.Новых > 0 Тогда
		ТекстНадписи = НСтр("ru = 'Получено %1 внимания';
							|en = 'Received %1 warning(s)'");
		
		ЧислоИПредметИсчисленияСообщения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка
			(НСтр("ru = '%1 сообщений, требующих;
				|%1 сообщение, требующее;
				|%1 сообщения, требующие;
				|%1 сообщения, требующие;
				|%1 сообщений, требующих;
				|%1 сообщения, требующие';
				|en = '%1 messages that require; 
				|%1 message that requires; 
				|%1 messages that require;
				|%1 messages that require; 
				|%1 messages that require; 
				|%1 messages that require'"),
			Результат.Новых,
			ВидЧисловогоЗначения.Количественное,
			"ЧДЦ=0");
			
		Результат.ТекстНадписи = СтрШаблон(ТекстНадписи,
			ЧислоИПредметИсчисленияСообщения);
	Иначе
		Результат.ТекстНадписи = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеОбновленияСтатусовОтчетов(ДополнительныеПараметры) Экспорт
	
	БылиСообщенияОбОшибках = Ложь;
	// Получаем ошибки обмена.
	Ошибки = ДлительныеОперацииОбменаСБанкамиКлиент.ОшибкиКлиентСервер();
	БылиСообщенияОбОшибках = Ошибки.Количество() > 0;
	Если СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено
			ИЛИ (СведенияОДлительнойОперации.ФормаДлительнойОперации <> Неопределено
				И НЕ СведенияОДлительнойОперации.ФормаДлительнойОперации.Открыта()) Тогда
		
		Если БылиСообщенияОбОшибках Тогда
			// Сохраняем ошибки так как форма длительных операций не была открыта.
			ПараметрыСохранения =
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСохранения(Ложь);
			ПараметрыСохранения.Ошибки = Ошибки;
			ПараметрыСохранения.ЕстьОшибки = БылиСообщенияОбОшибках;
			ПараметрыСохранения.ПараметрыРежима =
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПараметрыРежимаОбмена();
			ДлительныеОперацииОбменаСБанкамиВызовСервера.
				СохранитьОшибкиПоследнегоОбмена(ПараметрыСохранения);
			// Получаем информацию о входящих транзакциях.
			ФинОтчетностьВБанкиСлужебныйКлиент.ПолучитьИнформациюОВходящихТранзакцияхОтБанков(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ БылиСообщенияОбОшибках Тогда
		ДлительныеОперацииОбменаСБанкамиВызовСервера.
			СохранитьОшибкиПоследнегоОбмена(Неопределено);
		АдресСведенийПоОшибкам = "";
	КонецЕсли;
	
	Если ДополнительныеПараметры.БылиОшибки
		ИЛИ БылиСообщенияОбОшибках Тогда
			ПодключитьОбработчикОжидания("СтартоватьОбновлениеСтатусовОтчетов", 300, Истина);
	КонецЕсли;
	
	СведенияОДлительнойОперации.Имя = "";
	СведенияОДлительнойОперации.ДлительнаяОперация = Неопределено;
	СведенияОДлительнойОперации.ФормаДлительнойОперации = Неопределено;
	СведенияОДлительнойОперации.ПараметрыОжидания = Неопределено;
	
	Элементы.КартинкаАнимацияОбновления.Видимость = Ложь;
	
	ОбработатьНовыеСобытияНаКлиенте(ОбработатьНовыеСобытия());
	ПодключаемыйОбновитьНадписьВремяОбновления();
	
	ВывестиОшибкиПоследнегоОбменаВПанель(ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОбновленияСтатусовОтчетов(Результат, ДополнительныеПараметры)
	
	Элементы.Список.Обновить();
	
	Если Результат <> Неопределено И Результат.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Обновление статусов отчетов.';
							|en = 'Update report statuses.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации,
			Результат.ПодробноеПредставлениеОшибки);
		Если ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.
				ВывестиОшибку(Результат.КраткоеПредставлениеОшибки);
		Иначе
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.
				ВывестиОшибку(Результат.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		ДополнительныеПараметры.БылиОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления)
	
	ДатаПоследнегоОбновления = ФинОтчетностьВБанки.ДатаПоследнегоОбновленияСобытий();
	Возврат ФинОтчетностьВБанки.ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
КонецФункции

&НаКлиенте
Процедура ПодключаемыйОбновитьНадписьВремяОбновления()
	
	НадписьВремяОбновления = ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНовыеСообщенияНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыОткрытияФормы.Вставить("Владелец", ЭтотОбъект);
	УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуНовыхСобытий(
		ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность"),
		,,ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДинамическуюКартинкуСтатусаОбновления()
	
	ЭтоВеб = ОбщегоНазначения.ЭтоВебКлиент();
	Если НЕ ЭтоВеб Тогда
		Элементы.КартинкаАнимацияОбновления.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИнтервалОбработчикаОбновленияНадписейПоУмолчанию()
	
	Возврат 60;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОРасшифровке()
	
	// Оповещаем о расшифровке.
	ПараметрыСменыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыСменыЭтапа.Имя = 
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаРасшифровкаСообщений();
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаОбмена(
		ПараметрыСменыЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершении()
	
	// Оповещаем о завершении.
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОЗавершенииОбмена();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПанелиОшибокОбновления(Форма)

	Форма.Элементы.ОшибкиОбновления.Видимость = ЭтоАдресВременногоХранилища(Форма.АдресСведенийПоОшибкам)
		ИЛИ ЗначениеЗаполнено(Форма.ОписаниеОшибкиОбновленияДанныхСервиса);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиОшибкиПоследнегоОбменаВПанель(Форма, УникальныйИдентификатор)
	
	ОшибкиПоследнегоОбмена = ДлительныеОперацииОбменаСБанкамиВызовСервера.
		ПолучитьОшибкиПоследнегоОбмена();
	Если ОшибкиПоследнегоОбмена <> Неопределено Тогда
		Форма.АдресСведенийПоОшибкам = ПоместитьВоВременноеХранилище(ОшибкиПоследнегоОбмена,
			УникальныйИдентификатор);
	Иначе
		Форма.АдресСведенийПоОшибкам = "";
	КонецЕсли;

	Форма.Элементы.СообщениеПроОшибкиОбмена.Заголовок = ФорматированнаяСтрокаСообщенияОшибкиОбмена();
	УстановитьВидимостьПанелиОшибокОбновления(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаСообщенияОшибкиОбмена()

	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Обратите внимание, при обновлении состояния возникли';
							|en = 'Note that upon updating the state, there were'"));
	Подстроки.Добавить(" ");
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'технические ошибки';
														|en = 'technical errors'"), , , , "ОшибкиСостояния"));

	Возврат Новый ФорматированнаяСтрока(Подстроки);

КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(Идентификатор)
	
	Возврат ДлительныеОперацииОбменаСБанками.СообщенияФоновогоЗадания(Идентификатор);
	
КонецФункции

&НаКлиенте
// Читаем сообщения об ошибках из фоновых заданий аналогично форме ДлительнаяОперацияОбменаСБанками,
// если она не была открыта.
Процедура ПодключаемыйПрочитатьСообщенияФоновыхЗаданий()
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если ИдентификаторФоновогоЗаданияОбмена = ПустойУИД Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = СообщенияФоновогоЗадания(ИдентификаторФоновогоЗаданияОбмена);
	Если Сообщения <> Неопределено  Тогда
		Для каждого ДанныеСообщения Из Сообщения.ВсеСообщения Цикл
			Если ДанныеСообщения.Префикс = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПрефиксСообщенийОшибок() Тогда
				ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(ДанныеСообщения.Значение.ТекстОшибки,
					,,,,,ДанныеСообщения.Значение.Организация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяЗапускОбработчикаЧтенияСообщенийФоновогоЗадания Тогда
		ПодключитьОбработчикОжидания(
			"ПодключаемыйПрочитатьСообщенияФоновыхЗаданий",
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИнтервалЧтенияСообщенийФоновыхЗаданий(),
			Истина);
	Иначе
		ИдентификаторФоновогоЗаданияОбмена = ПустойУИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюОрганизацию(НовоеЗначениеТекущейОрганизаци)

	ТекущаяОрганизация = НовоеЗначениеТекущейОрганизаци;
	ДлительныеОперацииОбменаСБанкамиКлиент.
		ИзменитьПараметрыДлительнойОтправкиКлиентСервер("ТекущаяОрганизация", ТекущаяОрганизация);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипОбычногоБанка()

	Перем ИскомыйТип;
	
	Для каждого ТипБанка Из Метаданные.ОпределяемыеТипы.СправочникБанкиФинОтчетность.Тип.Типы() Цикл
		Если ТипБанка <> Тип("СправочникСсылка.БанкиУниверсальногоОбмена") Тогда
			ИскомыйТип = ТипБанка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИскомыйТип;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции
