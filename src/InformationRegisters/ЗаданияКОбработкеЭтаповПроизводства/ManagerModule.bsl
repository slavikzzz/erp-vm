#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр заданий.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап, для которого необходимо добавить задание.
//  Действия		 - см. СтруктураДействий
//
Процедура ДобавитьЗадание(ЭтапПроизводства, Действия) Экспорт
	
	Если Действия.ОбновитьСостояние ИЛИ Действия.ЗаполнитьПоОперациям Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("ЭтапПроизводства",     ЭтапПроизводства);
		Данные.Вставить("ОбновитьСостояние",    Действия.ОбновитьСостояние);
		Данные.Вставить("ЗаполнитьПоОперациям", Действия.ЗаполнитьПоОперациям);
		
		ОтложенныеЗадания.ОбработатьЗаданияОчереди("ЗаданияКОбработкеЭтаповПроизводства", Данные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру действий.
//
// Возвращаемое значение:
//  Структура - структура действий:
//   * ОбновитьСостояние    - Булево -
//   * ЗаполнитьПоОперациям - Булево -
//
Функция СтруктураДействий() Экспорт
	
	СтруктураДействий = Новый Структура("ОбновитьСостояние, ЗаполнитьПоОперациям", Ложь, Ложь);
	Возврат СтруктураДействий;
	
КонецФункции

#Область ОтложенныеЗадания

// Возвращает текст запроса выборки заданий.
//
// Параметры:
//  Запрос            - см. ОтложенныеЗадания.ТекстЗапросаВыборкиЗаданийПоУмолчанию.Запрос
//  ПараметрыОчереди  - см. ОтложенныеЗадания.ТекстЗапросаВыборкиЗаданийПоУмолчанию.ПараметрыОчереди
//  КоличествоЗаданий - см. ОтложенныеЗадания.ТекстЗапросаВыборкиЗаданийПоУмолчанию.Запрос
//
// Возвращаемое значение:
//  Строка - текст запроса выборки заданий
//
Функция ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий) Экспорт
	
	ТекстЗапроса = ОтложенныеЗадания.ТекстЗапросаВыборкиЗаданийПоУмолчанию(
					Запрос,
					ПараметрыОчереди,
					КоличествоЗаданий,
					"Таблица.ОтложитьВыполнениеДо < &ТекущаяУниверсальнаяДата");
	
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает дополнительные свойства выполнения заданий.
//
// Параметры:
// 	ЗафиксироватьОшибку - см. ОтложенныеЗадания.ВыполнитьЗадания.ЗафиксироватьОшибку
//
// Возвращаемое значение:
//  Неопределено, Структура - Дополнительные свойства выполнения заданий:
//   * ИдентификаторыЗаданийОшибокБлокировкиЭтапа - Массив из УникальныйИдентификатор -
//
Функция ДополнительныеСвойства(ЗафиксироватьОшибку) Экспорт
	
	Если ЗафиксироватьОшибку Тогда
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ИдентификаторыЗаданийОшибокБлокировкиЭтапа", Новый Массив);
	Иначе
		ДополнительныеСвойства = Неопределено;
	КонецЕсли;
	
	Возврат ДополнительныеСвойства;
	
КонецФункции

// Выполняет предварительную обработку ошибок до основной обработки в методе см. ОтложенныеЗадания.ВыполнитьЗадания.
//
// Параметры:
//  ПараметрыОчереди                    - СтрокаТаблицыЗначений из см. ОтложенныеЗадания.ОчередиЗаданий
//  Данные                              - ТаблицаЗначений - данные для выполнения заданий,
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор не
//                                                                                   выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ТекстИсключения                     - Строка - текст ошибки исключения,
//  ДополнительныеСвойства              - см. ДополнительныеСвойства
//
Процедура ПередОбработкойОшибок(
			ПараметрыОчереди,
			Данные,
			ИдентификаторыНеОбработанныхЗаписей,
			ТекстИсключения,
			ДополнительныеСвойства) Экспорт
	
	ИдентификаторыЗаданийОшибокБлокировкиЭтапа = ДополнительныеСвойства.ИдентификаторыЗаданийОшибокБлокировкиЭтапа;
	Если ИдентификаторыЗаданийОшибокБлокировкиЭтапа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АналитикаРасчета,
	|	МИНИМУМ(КоличествоСдвигов) + 1 КАК КоличествоСдвигов
	|ИЗ
	|	РегистрСведений.ЗаданияКОбработкеЭтаповПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.ИдентификаторЗаписи В (&ИдентификаторыЗаданийОшибокБлокировкиЭтапа)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаРасчета
	|";
	
	АналитикаРасчета = ПараметрыОчереди.АналитикаРасчета;
	Если Не ЗначениеЗаполнено(АналитикаРасчета) Тогда
		АналитикаРасчета = "ИдентификаторЗаписи";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "АналитикаРасчета", АналитикаРасчета);
	
	Запрос.УстановитьПараметр("ИдентификаторыЗаданийОшибокБлокировкиЭтапа", ИдентификаторыЗаданийОшибокБлокировкиЭтапа);
	
	ТаблицаСдвигов = Запрос.Выполнить().Выгрузить();
	ТаблицаСдвигов.Индексы.Добавить(АналитикаРасчета);
	
	Данные.Индексы.Добавить("ИдентификаторЗаписи");
	
	Если АналитикаРасчета <> "ИдентификаторЗаписи" Тогда
		Данные.Индексы.Добавить(АналитикаРасчета);
	КонецЕсли;
	
	ОтборИдентификаторЗаписи = Новый Структура("ИдентификаторЗаписи");
	ОтборАналитикаРасчета    = Новый Структура(АналитикаРасчета);
	
	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();
	
	Для каждого ИдентификаторЗаписи Из ИдентификаторыЗаданийОшибокБлокировкиЭтапа Цикл
		
		ОтборИдентификаторЗаписи.ИдентификаторЗаписи = ИдентификаторЗаписи;
		
		СтрокаДанные = Данные.НайтиСтроки(ОтборИдентификаторЗаписи)[0];
		
		ЗаполнитьЗначенияСвойств(ОтборАналитикаРасчета, СтрокаДанные);
		
		КоличествоСдвигов = ТаблицаСдвигов.НайтиСтроки(ОтборАналитикаРасчета)[0].КоличествоСдвигов;
		
		Если КоличествоСдвигов = 1 Тогда
			ОтложитьВыполнениеДо = ТекущаяУниверсальнаяДата + 60 * 5;
		ИначеЕсли КоличествоСдвигов = 2 Тогда
			ОтложитьВыполнениеДо = ТекущаяУниверсальнаяДата + 60 * 12;
		ИначеЕсли КоличествоСдвигов = 3 Тогда
			ОтложитьВыполнениеДо = ТекущаяУниверсальнаяДата + 60 * 20;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Данные.Удалить(СтрокаДанные);
		ИдентификаторыНеОбработанныхЗаписей.Удалить(ИдентификаторЗаписи);
		
		НаборЗаписей = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи);
		НаборЗаписей.Прочитать();
		
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.КоличествоСдвигов    = КоличествоСдвигов;
			ЗаписьНабора.ОтложитьВыполнениеДо = ОтложитьВыполнениеДо;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли