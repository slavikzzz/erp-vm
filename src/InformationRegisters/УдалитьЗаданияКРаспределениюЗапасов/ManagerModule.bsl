#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.УдалитьЗаданияКРаспределениюЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.15.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bcacf3c3-e8c3-43da-bd02-462dd7ee65db");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.УдалитьЗаданияКРаспределениюЗапасов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Переносит существующие записи в новый регистр ""Задания к распределению запасов"".';
									|en = 'Transfers existing records to the new ""Jobs for allocating inventory"" register.'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.УдалитьЗаданияКРаспределениюЗапасов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.УдалитьЗаданияКРаспределениюЗапасов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюЗапасов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.УдалитьЗаданияКРаспределениюЗапасов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ПолноеИмяРегистра = "РегистрСведений.УдалитьЗаданияКРаспределениюЗапасов";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра",			  ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Номенклатура      КАК Номенклатура,
	|	Задания.Характеристика    КАК Характеристика,
	|	Задания.Склад             КАК Склад,
	|	Задания.Назначение        КАК Назначение,
	|	Задания.РазделительЗаписи КАК РазделительЗаписи,
	|	Задания.ЗаказНаОтгрузку   КАК ЗаказНаОтгрузку
	|ИЗ
	|	РегистрСведений.УдалитьЗаданияКРаспределениюЗапасов КАК Задания";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.УдалитьЗаданияКРаспределениюЗапасов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	ДополнительныеПараметры.ВыбиратьПорциями    = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
					Параметры.Очередь,
					ПолноеИмяРегистра,
					МенеджерВременныхТаблиц,
					ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Или Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Номенклатура      КАК Номенклатура,
	|	Задания.Характеристика    КАК Характеристика,
	|	Задания.Склад             КАК Склад,
	|	Задания.Назначение        КАК Назначение,
	|	Задания.РазделительЗаписи КАК РазделительЗаписи,
	|	Задания.ЗаказНаОтгрузку   КАК ЗаказНаОтгрузку,
	|	Задания.КСнятиюРезерва    КАК КСнятиюРезерва,
	|	Задания.ДатаЗаписи        КАК ДатаЗаписи
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗаданияКРаспределениюЗапасов КАК Задания
	|		ПО ДанныеДляОбработки.Номенклатура      = Задания.Номенклатура
	|		 И ДанныеДляОбработки.Характеристика    = Задания.Характеристика
	|		 И ДанныеДляОбработки.Склад             = Задания.Склад
	|		 И ДанныеДляОбработки.Назначение        = Задания.Назначение
	|		 И ДанныеДляОбработки.РазделительЗаписи = Задания.РазделительЗаписи
	|		 И ДанныеДляОбработки.ЗаказНаОтгрузку   = Задания.ЗаказНаОтгрузку";
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	Запустить = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого Запись Из ТаблицаЗаписей Цикл
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",	  Запись.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика",	  Запись.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",			  Запись.Склад);
			ЭлементБлокировки.УстановитьЗначение("Назначение",		  Запись.Назначение);
			ЭлементБлокировки.УстановитьЗначение("РазделительЗаписи", Запись.РазделительЗаписи);
			ЭлементБлокировки.УстановитьЗначение("ЗаказНаОтгрузку",	  Запись.ЗаказНаОтгрузку);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Запись.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Запись.Характеристика);
			НаборЗаписей.Отбор.Склад.Установить(Запись.Склад);
			НаборЗаписей.Отбор.Назначение.Установить(Запись.Назначение);
			НаборЗаписей.Отбор.РазделительЗаписи.Установить(Запись.РазделительЗаписи);
			НаборЗаписей.Отбор.ЗаказНаОтгрузку.Установить(Запись.ЗаказНаОтгрузку);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
		Если ТаблицаЗаписей.Количество() > 0 Тогда
			
			ОтложенныеЗадания.ДобавитьЗаданияВОчередь("ЗаданияКРаспределениюЗапасов", ТаблицаЗаписей);
			
			Запустить = Истина;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонОшибки = НСтр("ru = 'Не удалось заполнить идентификатор записи в регистре %1:
								   |
								   |%2';
								   |en = 'Cannot fill the record ID in the %1 register:
								   |
								   |%2'");
		
		ТекстОшибки = СтрШаблон(ШаблонОшибки,
									ПолноеИмяРегистра,
									ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.ЗаданияКРаспределениюЗапасов,,
			ТекстОшибки);
		
	КонецПопытки;
	
	ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Если ОбработкаЗавершена И Запустить Тогда
		ОтложенныеЗадания.Запустить("ЗаданияКРаспределениюЗапасов");
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли