
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает в регистр ПооперационноеРасписание2_2 данные операций, которые подлежат удалению при последующем
//	сохранении расписания по команде пользователя.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  Операции - ТаблицаЗначений - данные операций, колонки:
//		* Этап - ДокументСсылка.ЭтапПроизводства2_2 -
//		* Операция - СправочникСсылка.ТехнологическиеОперации -
//		* ИдентификаторОперации - Число - идентификатор операции.
//		* РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры - рабочий центр, на котором выполняется операция.
//		* Начало - Дата - начало интервала выполнения операции.
//		* Окончание - Дата - окончание интервала выполнения операции.
//
Процедура ЗаписатьОперацииДляУдаления(Знач МодельРасписания, Знач Операции) Экспорт
	
	Если ЗначениеЗаполнено(МодельРасписания) И ЗначениеЗаполнено(Операции) Тогда
		
		Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
		Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
		Набор.Отбор.ЭтоУдалениеОперации.Установить(Истина);
		Набор.Загрузить(Операции);
		
		Для Каждого Запись Из Набор Цикл
			
			Запись.МодельРасписания = МодельРасписания;
			Запись.Моделирование = Истина;
			Запись.ЭтоУдалениеОперации = Истина;
			
		КонецЦикла;
	    	
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает вариант расписания в ИБ. Под вариантом понимается расписание,
//	до его сохранения по команде пользователя (см. процедуру ЗаписатьРасписание).
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель планирования,
//		в соответствии с настройками которой выполнен расчет.
//  Расписание - ТаблицаЗначений - структура таблицы аналогична структуре регистра ПооперационноеРасписание2_2.
//
Процедура ЗаписатьВариантРасписания(Знач МодельРасписания, Знач МодельПланирования, Знач Расписание) Экспорт
	
	Если ЗначениеЗаполнено(МодельРасписания) И ЗначениеЗаполнено(Расписание) Тогда
		
		Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
		Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
		Набор.Отбор.МодельПланирования.Установить(МодельПланирования);
		Набор.Отбор.ЭтоУдалениеОперации.Установить(Ложь);
		Набор.Загрузить(Расписание);
		
		Для Каждого Запись Из Набор Цикл
			
			Запись.МодельРасписания = МодельРасписания;
			Запись.МодельПланирования = МодельПланирования;
			Запись.Моделирование = Истина;
			
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует расписание производства - сохраняет выбранный вариант расписания и очищает временные данные моделирования.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель планирования,
//		которой принадлежит записываемое расписание.
//  ЗаписьВыполнена	- Булево - флаг успешного выполнения записи.
//
Процедура ЗаписатьРасписание(Знач МодельРасписания, Знач МодельПланирования, ЗаписьВыполнена) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(МодельРасписания) Тогда
			АктуализироватьРасписание(МодельРасписания, МодельПланирования);
			ОчиститьРасписаниеМодельРасписания(МодельРасписания);
		КонецЕсли;
		
		ЗаписьВыполнена = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись пооперационного расписания';
				|en = 'Save operation timetable'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьВыполнена = Ложь;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Определяет количество размещенных операций, принадлежащих модели расписания.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//
// Возвращаемое значение:
//  Число - количество операций.
//
Функция КоличествоУникальныхОперацийМоделиРасписания(Знач МодельРасписания) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.МодельПланирования КАК МодельПланирования,
	|	СУММА(ВложенныйЗапрос.КоличествоОпераций) КАК КоличествоОпераций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПооперационноеРасписание.МодельПланирования КАК МодельПланирования,
	|		ПооперационноеРасписание.Этап КАК Этап,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПооперационноеРасписание.ИдентификаторОперации) КАК КоличествоОпераций
	|	ИЗ
	|		РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|	ГДЕ
	|		ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|		И ПооперационноеРасписание.Моделирование = ИСТИНА
	|		И ПооперационноеРасписание.ЭтоУдалениеОперации = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПооперационноеРасписание.МодельПланирования,
	|		ПооперационноеРасписание.Этап) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.МодельПланирования
	|ИТОГИ
	|	СУММА(КоличествоОпераций)
	|ПО
	|	ОБЩИЕ");
	
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоОпераций) Тогда
		Результат = Выборка.КоличествоОпераций;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Очищает данные моделирования пооперационного расписания.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта), расписание которой необходимо очистить.
//
Процедура ОчиститьРасписаниеМодельРасписания(Знач МодельРасписания) Экспорт
	
	Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
	Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
	Набор.Записать();
	
КонецПроцедуры

// Пересчитывает количественные ресурсы по указанной технологической операции.
//
// Параметры:
//  КлючОперации - Структура - где:
//  *Этап	 	 - ДокументСсылка.ЭтапПроизводства2_2		 - этап производства.
//  *Операция 	 - СправочникСсылка.ТехнологическиеОперации	 - технологическая операция.
//  НомерПартии - Число		 							 - номер партии по операции.
//  Отказ	 - Булево									 - признак прерывания обработки проведения.
//
Процедура ПересчитатьКоличественныеРесурсыПоКлючу(Знач КлючОперации, НомерПартии, Отказ = Ложь) Экспорт
	
	ЗаблокироватьРасписаниеДляЗаписиПоКлючу(КлючОперации, НомерПартии, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОкружениеОперации = ОкружениеОперацииВРасписании(КлючОперации);
	
	КлючОперации.Вставить("НомерПартии", НомерПартии);
	ДанныеОперации = НайтиОперациюПоКлючу(ОкружениеОперации, КлючОперации);
	Если ДанныеОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРасчетаПоОперации(КлючОперации.Этап, ДанныеОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьПоОперации(КлючОперации.Этап, ДанныеОперации, НомерПартии, Отказ);
	
КонецПроцедуры

// Возвращает данные операции из расписания
//
// Параметры:
//  КлючОперации - Структура - где:
//  *Этап	 	 - ДокументСсылка.ЭтапПроизводства2_2		 - этап производства.
//  *Операция 	 - СправочникСсылка.ТехнологическиеОперации	 - технологическая операция.
//  НомерПартии	 - Число		 							 - номер партии по операции.
//  РабочийЦентр - СправочникСсылка.РабочиеЦентры	 		 - рабочий центр операции.
// 
// Возвращаемое значение:
//   - Структура - данные операции из расписания.
//
Функция ДанныеОперацииРасписания(КлючОперации, НомерПартии, РабочийЦентр) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расписание.Подразделение КАК Подразделение,
	|	Расписание.Этап.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Расписание.Операция КАК Операция,
	|	Расписание.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	Расписание.РабочийЦентр КАК РабочийЦентр,
	|	Расписание.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Расписание.Операция.МожноПропустить, ЛОЖЬ) КАК МожноПропустить,
	|	Расписание.Этап КАК Этап,
	|	Расписание.КоличествоПартии КАК Запланировано,
	|	ВЫБОР
	|		КОГДА Расписание.КоличествоПартии + Расписание.ТребуетПовторения > Расписание.Создано
	|			ТОГДА Расписание.КоличествоПартии + Расписание.ТребуетПовторения - Расписание.Создано
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОжиданиеСоздания,
	|	Расписание.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
	|	Расписание.НачатыПредшествующие КАК НачатыПредшествующие,
	|	Расписание.МожноВыполнять КАК МожноВыполнять,
	|	Расписание.Выполняется КАК Выполняется,
	|	Расписание.Выполнено КАК Выполнено,
	|	Расписание.ТребуетПовторения КАК ТребуетПовторения,
	|	Расписание.Пропущено КАК Пропущено,
	|	Расписание.НомерПартии КАК НомерПартии,
	|	Расписание.ИдентификаторОперации КАК ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК Расписание
	|ГДЕ
	|	Расписание.Этап = &Этап
	|	И Расписание.Операция = &Операция
	|	И Расписание.ИдентификаторОперации = &ИдентификаторОперации
	|	И Расписание.НомерПартии = &НомерПартии
	|	И НЕ Расписание.ЭтоУдалениеОперации
	|	И НЕ Расписание.Вспомогательная
	|	И НЕ Расписание.Моделирование
	|	И НЕ Расписание.ДополнительнаяЗапись";
	
	Запрос.УстановитьПараметр("Этап", КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	Запрос.УстановитьПараметр("НомерПартии", НомерПартии);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОперации = Новый Структура();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеОперации.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеОперации, Выборка);
	
	Возврат ДанныеОперации;
	
КонецФункции

// Очищает данные пооперационного расписания по ключу операции.
//
// Параметры:
//  КлючОперации - Структура - ключ операции, расписание которой необходимо очистить.
//	НомерПартии - Число - номер партии операции.
//	Отказ	 - Булево - признак прерывания обработки проведения.
//
Процедура ОчиститьРасписаниеПоКлючу(КлючОперации, НомерПартии, Отказ = Ложь) Экспорт
	
	Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
	Набор.Отбор.Этап.Установить(КлючОперации.Этап);
	Набор.Отбор.Операция.Установить(КлючОперации.Операция);
	Набор.Отбор.ИдентификаторОперации.Установить(КлючОперации.ИдентификаторОперации);
	Набор.Отбор.НомерПартии.Установить(НомерПартии);
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АктуализироватьРасписание(Знач МодельРасписания, Знач МодельПланирования)
	
	ТекстЗапроса = ТекстЗапросаАктуализацияРасписания();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Запрос.УстановитьПараметр("МодельПланирования", МодельПланирования);
	
	ТаблицаНабора = Новый ТаблицаЗначений;
	ОперативныйУчетПроизводстваПриПланированииСервер.ЗаполнитьСтруктуруТаблицыПоМетаданнымРегистра("РегистрыСведений", "ПооперационноеРасписание2_2", ТаблицаНабора);
	ТаблицаНабора.Колонки.Добавить("Требуется", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	ТаблицаНабора.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	ТаблицаНабора.Колонки.Добавить("НомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	
	ВыборкаЭтапы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭтапы.Следующий() Цикл
		
		ТаблицаНабора.Очистить();
		Выборка = ВыборкаЭтапы.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаНабора = ТаблицаНабора.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			
		КонецЦикла;
		
		ТаблицаПартий = ТаблицаНабора.Скопировать(, "Операция, ИдентификаторОперации, НомерПартии");//ТаблицаЗначений - 
		ТаблицаПартий.Свернуть("Операция, ИдентификаторОперации, НомерПартии");
		СтруктураОтбора = Новый Структура("Операция, ИдентификаторОперации, НомерПартии");
		Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаПартии);
			СтрокиНабора = ТаблицаНабора.НайтиСтроки(СтруктураОтбора);
			РассчитатьПоказателиВыполненияОперации(СтрокиНабора, СтрокиНабора[0]);
			
		КонецЦикла;
		
		Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Этап.Установить(ВыборкаЭтапы.Этап);
		Набор.Загрузить(ТаблицаНабора);
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаАктуализацияРасписания()
	
	Результат = 
	"ВЫБРАТЬ
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.НомерПартии КАК НомерПартии,
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентр
	|ПОМЕСТИТЬ ОперацииУдалить
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.НомерПартии КАК НомерПартии,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентр,
	|	ПооперационноеРасписание.МодельРасписания КАК МодельРасписания,
	|	ПооперационноеРасписание.МодельПланирования КАК МодельПланирования,
	|	ПооперационноеРасписание.ЭтоУдалениеОперации КАК ЭтоУдалениеОперации,
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ПооперационноеРасписание.ТактПараллельнойЗагрузки КАК ТактПараллельнойЗагрузки,
	|	ПооперационноеРасписание.ВремяПлан КАК ВремяПлан,
	|	ПооперационноеРасписание.Загрузка КАК Загрузка,
	|	ПооперационноеРасписание.ЭтоПереналадка КАК ЭтоПереналадка,
	|	ПооперационноеРасписание.КоличествоПартии КАК КоличествоПартии,
	|	ПооперационноеРасписание.Коэффициент КАК Коэффициент,
	|	ПооперационноеРасписание.Создано КАК Создано,
	|	ПооперационноеРасписание.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
	|	ПооперационноеРасписание.НачатыПредшествующие КАК НачатыПредшествующие,
	|	ПооперационноеРасписание.МожноВыполнять КАК МожноВыполнять,
	|	ПооперационноеРасписание.Выполняется КАК Выполняется,
	|	ПооперационноеРасписание.Выполнено КАК Выполнено,
	|	ПооперационноеРасписание.ТребуетПовторения КАК ТребуетПовторения,
	|	ПооперационноеРасписание.Пропущено КАК Пропущено,
	|	ПооперационноеРасписание.ВремяПерехода КАК ВремяПерехода,
	|	ПооперационноеРасписание.Подразделение КАК Подразделение,
	|	ПооперационноеРасписание.Вспомогательная КАК Вспомогательная,
	|	ПооперационноеРасписание.Моделирование КАК Моделирование,
	|	ПооперационноеРасписание.ЛеваяГраница КАК ЛеваяГраница,
	|	ПооперационноеРасписание.ПраваяГраница КАК ПраваяГраница,
	|	ПооперационноеРасписание.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	ПооперационноеРасписание.ДлительностьИнтервала КАК ДлительностьИнтервала,
	|	ПооперационноеРасписание.ЗапретитьСоздаватьОперации КАК ЗапретитьСоздаватьОперации
	|ПОМЕСТИТЬ ВариантРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.МодельПланирования = &МодельПланирования
	|	И ПооперационноеРасписание.Моделирование
	|	И НЕ ПооперационноеРасписание.ЭтоУдалениеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Этап КАК Этап
	|ПОМЕСТИТЬ ЭтапыПроизводства
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацииУдалить.Этап КАК Этап
	|	ИЗ
	|		ОперацииУдалить КАК ОперацииУдалить
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВариантРасписания.Этап
	|	ИЗ
	|		ВариантРасписания КАК ВариантРасписания) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.МодельРасписания КАК МодельРасписания,
	|	ПооперационноеРасписание.МодельПланирования КАК МодельПланирования,
	|	ПооперационноеРасписание.Моделирование КАК Моделирование,
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.НомерПартии КАК НомерПартии,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентр,
	|	ПооперационноеРасписание.МодельРасписания КАК МодельРасписания1,
	|	ПооперационноеРасписание.МодельПланирования КАК МодельПланирования1,
	|	ПооперационноеРасписание.ЭтоУдалениеОперации КАК ЭтоУдалениеОперации,
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ПооперационноеРасписание.ТактПараллельнойЗагрузки КАК ТактПараллельнойЗагрузки,
	|	ПооперационноеРасписание.ВремяПлан КАК ВремяПлан,
	|	ПооперационноеРасписание.Загрузка КАК Загрузка,
	|	ПооперационноеРасписание.ЭтоПереналадка КАК ЭтоПереналадка,
	|	ПооперационноеРасписание.КоличествоПартии КАК КоличествоПартии,
	|	ПооперационноеРасписание.Коэффициент КАК Коэффициент,
	|	ПооперационноеРасписание.Создано КАК Создано,
	|	ПооперационноеРасписание.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
	|	ПооперационноеРасписание.НачатыПредшествующие КАК НачатыПредшествующие,
	|	ПооперационноеРасписание.МожноВыполнять КАК МожноВыполнять,
	|	ПооперационноеРасписание.Выполняется КАК Выполняется,
	|	ПооперационноеРасписание.Выполнено КАК Выполнено,
	|	ПооперационноеРасписание.ТребуетПовторения КАК ТребуетПовторения,
	|	ПооперационноеРасписание.Пропущено КАК Пропущено,
	|	ПооперационноеРасписание.ВремяПерехода КАК ВремяПерехода,
	|	ПооперационноеРасписание.Подразделение КАК Подразделение,
	|	ПооперационноеРасписание.Вспомогательная КАК Вспомогательная,
	|	ПооперационноеРасписание.Моделирование КАК Моделирование1,
	|	ПооперационноеРасписание.ЛеваяГраница КАК ЛеваяГраница,
	|	ПооперационноеРасписание.ПраваяГраница КАК ПраваяГраница,
	|	ПооперационноеРасписание.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	ПооперационноеРасписание.ДлительностьИнтервала КАК ДлительностьИнтервала,
	|	ПооперационноеРасписание.ЗапретитьСоздаватьОперации КАК ЗапретитьСоздаватьОперации,
	|	ОчередьПроизводственныхОпераций.Требуется КАК Требуется,
	|	ОчередьПроизводственныхОпераций.НомерОперации КАК НомерОперации,
	|	ОчередьПроизводственныхОпераций.НомерСледующейОперации КАК НомерСледующейОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
	|		ПО ПооперационноеРасписание.Этап = ОчередьПроизводственныхОпераций.Этап
	|			И ПооперационноеРасписание.Операция = ОчередьПроизводственныхОпераций.Операция
	|			И ПооперационноеРасписание.ИдентификаторОперации = ОчередьПроизводственныхОпераций.ИдентификаторОперации
	|ГДЕ
	|	ПооперационноеРасписание.Этап В
	|			(ВЫБРАТЬ
	|				ЭтапыПроизводства.Этап КАК Этап
	|			ИЗ
	|				ЭтапыПроизводства)
	|	И НЕ (ПооперационноеРасписание.Этап, ПооперационноеРасписание.Операция, ПооперационноеРасписание.ИдентификаторОперации, ПооперационноеРасписание.НомерПартии) В
	|				(ВЫБРАТЬ
	|					ОперацииУдалить.Этап КАК Этап,
	|					ОперацииУдалить.Операция КАК Операция,
	|					ОперацииУдалить.ИдентификаторОперации КАК ИдентификаторОперации,
	|					ОперацииУдалить.НомерПартии КАК НомерПартии
	|				ИЗ
	|					ОперацииУдалить)
	|	И НЕ ПооперационноеРасписание.Моделирование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ВариантРасписания.Этап,
	|	ВариантРасписания.Операция,
	|	ВариантРасписания.ИдентификаторОперации,
	|	ВариантРасписания.НомерПартии,
	|	ВариантРасписания.РабочийЦентр,
	|	ВариантРасписания.МодельРасписания,
	|	ВариантРасписания.МодельПланирования,
	|	ВариантРасписания.ЭтоУдалениеОперации,
	|	ВариантРасписания.Начало,
	|	ВариантРасписания.Окончание,
	|	ВариантРасписания.ТактПараллельнойЗагрузки,
	|	ВариантРасписания.ВремяПлан,
	|	ВариантРасписания.Загрузка,
	|	ВариантРасписания.ЭтоПереналадка,
	|	ВариантРасписания.КоличествоПартии,
	|	ВариантРасписания.Коэффициент,
	|	ВариантРасписания.Создано,
	|	ВариантРасписания.ОжиданиеПредшествующих,
	|	ВариантРасписания.НачатыПредшествующие,
	|	ВариантРасписания.МожноВыполнять,
	|	ВариантРасписания.Выполняется,
	|	ВариантРасписания.Выполнено,
	|	ВариантРасписания.ТребуетПовторения,
	|	ВариантРасписания.Пропущено,
	|	ВариантРасписания.ВремяПерехода,
	|	ВариантРасписания.Подразделение,
	|	ВариантРасписания.Вспомогательная,
	|	ВариантРасписания.Моделирование,
	|	ВариантРасписания.ЛеваяГраница,
	|	ВариантРасписания.ПраваяГраница,
	|	ВариантРасписания.ДополнительнаяЗапись,
	|	ВариантРасписания.ДлительностьИнтервала,
	|	ВариантРасписания.ЗапретитьСоздаватьОперации,
	|	ОчередьПроизводственныхОпераций.Требуется,
	|	ОчередьПроизводственныхОпераций.НомерОперации,
	|	ОчередьПроизводственныхОпераций.НомерСледующейОперации
	|ИЗ
	|	ВариантРасписания КАК ВариантРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
	|		ПО ВариантРасписания.Этап = ОчередьПроизводственныхОпераций.Этап
	|			И ВариантРасписания.Операция = ОчередьПроизводственныхОпераций.Операция
	|			И ВариантРасписания.ИдентификаторОперации = ОчередьПроизводственныхОпераций.ИдентификаторОперации
	|ИТОГИ ПО
	|	Этап";
	
	Возврат Результат;
	
КонецФункции

#Область ПересчетПоОперации

Процедура ЗаблокироватьРасписаниеДляЗаписиПоКлючу(КлючОперации, НомерПартии, Отказ = Ложь) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПооперационноеРасписание2_2");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("Этап", КлючОперации.Этап);
	ЭлементБлокировки.УстановитьЗначение("Операция", КлючОперации.Операция);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	ЭлементБлокировки.УстановитьЗначение("НомерПартии", НомерПартии);
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать пооперационное расписание: %Причина%';
								|en = 'Cannot lock the operation timetable. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеДляРасчетаПоОперации(Этап, ДанныеОперации, Отказ)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	Последовательность = ДанныеОперации.Владелец();
	
	Для Каждого ТекущаяСтрока Из Последовательность Цикл
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки.УстановитьЗначение("Этап",     Этап);
		ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
		ЭлементБлокировки.УстановитьЗначение("НомерПартии", ТекущаяСтрока.НомерПартии);
		
		Если ТекущаяСтрока.НомерОперации = ДанныеОперации.НомерСледующейОперации 
			ИЛИ ТекущаяСтрока = ДанныеОперации Тогда
		
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПооперационноеРасписание2_2");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.УстановитьЗначение("Этап",     Этап);
			ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
			ЭлементБлокировки.УстановитьЗначение("НомерПартии", ТекущаяСтрока.НомерПартии);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать пооперационное расписание: %Причина%';
								|en = 'Cannot lock the operation timetable. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ПересчитатьПоОперации(Этап, ДанныеОперации, НомерПартии, Отказ)
	
	ДополнитьОперацииРезультатомВыполнения(Этап, ДанныеОперации.Владелец());
	
	Последовательность = СледующиеОперации(ДанныеОперации);
	Операции = ДругиеПартииОперации(ДанныеОперации);
	Для Ит = 0 По Операции.ВГраница() Цикл
		Последовательность.Вставить(Ит, Операции[Ит]);
	КонецЦикла;
	Последовательность.Вставить(0, ДанныеОперации);
	
	Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
	
	Для Каждого ТекущаяСтрока Из Последовательность Цикл
		
		Набор.Отбор.Этап.Установить(Этап);
		Набор.Отбор.Операция.Установить(ТекущаяСтрока.Операция);
		Набор.Отбор.ИдентификаторОперации.Установить(ТекущаяСтрока.ИдентификаторОперации);
		Набор.Отбор.НомерПартии.Установить(ТекущаяСтрока.НомерПартии);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			СообщитьПользователюОбОшибкеРасчета(Отказ);
			Возврат;
		КонецЕсли;
		
		РассчитатьПоказателиВыполненияОперации(Набор, ТекущаяСтрока);
		
		Попытка
			Набор.Записать(Истина);
		Исключение
			СообщитьПользователюОбОшибкеРасчета(Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Последовательность

Функция ПредыдущиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерСледующейОперации", Курсор.НомерОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция СледующиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерОперации", Курсор.НомерСледующейОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция ДругиеПартииОперации(Курсор)
	
	Результат = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("НомерОперации", Курсор.НомерОперации);
	Отбор.Вставить("ИдентификаторОперации", Курсор.ИдентификаторОперации);
	Отбор.Вставить("ДополнительнаяЗапись", Ложь);
	Отбор.Вставить("ЭтоПереналадка", Ложь);
	Отбор.Вставить("Вспомогательная", Ложь);
	
	НайденныеСтроки = Курсор.Владелец().НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.НомерПартии = Курсор.НомерПартии Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(НайденнаяСтрока);
	КонецЦикла;			 
	
	Возврат Результат;
	
КонецФункции

Функция ОкружениеОперацииВРасписании(КлючОперации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущаяОперация.Операция КАК Операция,
	|	ТекущаяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ТекущаяОперация.НомерОперации КАК НомерОперации,
	|	ТекущаяОперация.НомерСледующейОперации КАК НомерСледующейОперации,
	|	ТекущаяОперация.Требуется КАК Требуется,
	|	ТекущаяОперация.Запланировано КАК Запланировано,
	|	ТекущаяОперация.ВремяЕдИзм КАК ВремяВыполненияЕдИзм
	|ПОМЕСТИТЬ ВТТекущаяОперация
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ТекущаяОперация
	|ГДЕ
	|	ТекущаяОперация.Этап = &Этап
	|	И ТекущаяОперация.Операция = &Операция
	|	И ТекущаяОперация.ИдентификаторОперации = &ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СледующиеОперации.Операция КАК Операция,
	|	СледующиеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
	|	СледующиеОперации.НомерОперации КАК НомерОперации,
	|	СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
	|	СледующиеОперации.Требуется КАК Требуется,
	|	СледующиеОперации.Запланировано КАК Запланировано,
	|	СледующиеОперации.ВремяЕдИзм КАК ВремяВыполненияЕдИзм
	|ПОМЕСТИТЬ ВТСледующиеОперации
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК СледующиеОперации
	|ГДЕ
	|	СледующиеОперации.Этап = &Этап
	|	И СледующиеОперации.НомерОперации В
	|			(ВЫБРАТЬ
	|				ТекущаяОперация.НомерСледующейОперации
	|			ИЗ
	|				ВТТекущаяОперация КАК ТекущаяОперация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СледующиеОперации.Операция КАК Операция,
	|	СледующиеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
	|	СледующиеОперации.НомерОперации КАК НомерОперации,
	|	СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
	|	СледующиеОперации.Требуется КАК Требуется,
	|	СледующиеОперации.Запланировано КАК Запланировано,
	|	СледующиеОперации.ВремяВыполненияЕдИзм КАК ВремяВыполненияЕдИзм
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	ВТСледующиеОперации КАК СледующиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредыдущиеОперации.Операция,
	|	ПредыдущиеОперации.ИдентификаторОперации,
	|	ПредыдущиеОперации.НомерОперации,
	|	ПредыдущиеОперации.НомерСледующейОперации,
	|	ПредыдущиеОперации.Требуется,
	|	ПредыдущиеОперации.Запланировано,
	|	ПредыдущиеОперации.ВремяЕдИзм
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ПредыдущиеОперации
	|ГДЕ
	|	ПредыдущиеОперации.Этап = &Этап
	|	И ПредыдущиеОперации.НомерСледующейОперации В
	|			(ВЫБРАТЬ
	|				ТекущаяОперация.НомерОперации
	|			ИЗ
	|				ВТТекущаяОперация КАК ТекущаяОперация
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				СледующиеОперации.НомерОперации
	|			ИЗ
	|				ВТСледующиеОперации КАК СледующиеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущаяОперация.Операция,
	|	ТекущаяОперация.ИдентификаторОперации,
	|	ТекущаяОперация.НомерОперации,
	|	ТекущаяОперация.НомерСледующейОперации,
	|	ТекущаяОперация.Требуется,
	|	ТекущаяОперация.Запланировано,
	|	ТекущаяОперация.ВремяВыполненияЕдИзм
	|ИЗ
	|	ВТТекущаяОперация КАК ТекущаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Операция КАК Операция,
	|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
	|	Операции.НомерОперации КАК НомерОперации,
	|	Операции.НомерСледующейОперации КАК НомерСледующейОперации,
	|	Операции.Требуется КАК Требуется,
	|	Операции.Запланировано КАК Запланировано,
	|	Операции.ВремяВыполненияЕдИзм КАК ВремяВыполненияЕдИзм,
	|	ПооперационноеРасписание2_2.НомерПартии КАК НомерПартии,
	|	ПооперационноеРасписание2_2.РабочийЦентр КАК РабочийЦентр,
	|	ПооперационноеРасписание2_2.КоличествоПартии КАК ЗапланированоНаПартию,
	|	ПооперационноеРасписание2_2.Коэффициент КАК Коэффициент,
	|	ПооперационноеРасписание2_2.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	ПооперационноеРасписание2_2.Вспомогательная КАК Вспомогательная,
	|	ПооперационноеРасписание2_2.ЭтоПереналадка КАК ЭтоПереналадка,
	|	ПооперационноеРасписание2_2.Начало КАК Начало
	|ИЗ
	|	ВТОперации КАК Операции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание2_2
	|		ПО Операции.Операция = ПооперационноеРасписание2_2.Операция
	|			И Операции.ИдентификаторОперации = ПооперационноеРасписание2_2.ИдентификаторОперации
	|ГДЕ
	|	ПооперационноеРасписание2_2.Этап = &Этап
	|	И НЕ ПооперационноеРасписание2_2.ЭтоУдалениеОперации
	|	И НЕ ПооперационноеРасписание2_2.Моделирование
	|	И НЕ ПооперационноеРасписание2_2.ДополнительнаяЗапись
	|	И НЕ ПооперационноеРасписание2_2.Вспомогательная
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПооперационноеРасписание2_2.Начало";
	
	Запрос.УстановитьПараметр("Этап", КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиОперациюПоКлючу(СписокОпераций, КлючОперации)
	
	ОтборОперация = Новый Структура("Операция, ИдентификаторОперации, НомерПартии");
	ЗаполнитьЗначенияСвойств(ОтборОперация, КлючОперации);
	ОтборОперация.Вставить("ДополнительнаяЗапись", Ложь);
	ОтборОперация.Вставить("Вспомогательная", Ложь);
	
	НайденныеСтроки = СписокОпераций.НайтиСтроки(ОтборОперация);
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область Прочее

// Параметры:
// 	Этап - ДокументСсылка.ЭтапПроизводства2_2 - 
// 	Операции - ТаблицаЗначений - из запроса в ОкружениеОперацииВРасписании()
//
Процедура ДополнитьОперацииРезультатомВыполнения(Этап, Операции)
	
	ВыполнениеОпераций = РезультатВыполненияОпераций(
		Этап, 
		Операции.Скопировать(,"Операция, ИдентификаторОперации, НомерПартии"));
		
	ОписаниеТипов = Новый ОписаниеТипов(
		"Число", 
		Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	Операции.Колонки.Добавить("Создано",     ОписаниеТипов);
	Операции.Колонки.Добавить("ОжиданиеПредшествующих",     ОписаниеТипов);
	Операции.Колонки.Добавить("НачатыПредшествующие", ОписаниеТипов);
	Операции.Колонки.Добавить("МожноВыполнять",   ОписаниеТипов);
	Операции.Колонки.Добавить("Выполняется", ОписаниеТипов);
	Операции.Колонки.Добавить("Выполнено",   ОписаниеТипов);
	Операции.Колонки.Добавить("ТребуетПовторения", ОписаниеТипов);
	Операции.Колонки.Добавить("Пропущено",         ОписаниеТипов);
		
	ОтборОперация = Новый Структура("Операция, ИдентификаторОперации, НомерПартии");
	
	Для Каждого ДанныеОперации Из Операции Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОперация, ДанныеОперации);
		НайденныеСтроки = ВыполнениеОпераций.НайтиСтроки(ОтборОперация);
		
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОперации,
				НайденныеСтроки[0],
				"Создано,
				|Выполняется,
				|Выполнено,
				|ТребуетПовторения,
				|Пропущено");
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатВыполненияОпераций(Этап, Операции)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтборОперации.Операция КАК Операция,
	|	ОтборОперации.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ОтборОперации.НомерПартии КАК НомерПартии
	|ПОМЕСТИТЬ ВТОтборОперации
	|ИЗ
	|	&ОтборОперации КАК ОтборОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственнаяОперация.Операция КАК Операция,
	|	ПроизводственнаяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПроизводственнаяОперация.НомерПартии КАК НомерПартии,
	|	СУММА(ВЫБОР
	|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусСоздана, &СтатусВыполняется, &СтатусПропущена)
	|				ТОГДА ПроизводственнаяОперация.Количество
	|						- ПроизводственнаяОперация.КоличествоОтменено
	|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполнена
	|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
	|						+ ПроизводственнаяОперация.КоличествоНаКонтроле
	|						+ ПроизводственнаяОперация.КоличествоНаДоработке
	|						+ ПроизводственнаяОперация.КоличествоБрак
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Создано,
	|	СУММА(ВЫБОР
	|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполняется
	|				ТОГДА ПроизводственнаяОперация.Количество
	|						- ПроизводственнаяОперация.КоличествоОтменено
	|						- ПроизводственнаяОперация.КоличествоБрак
	|						- ПроизводственнаяОперация.КоличествоФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполняется,
	|	СУММА(ВЫБОР
	|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусВыполняется, &СтатусВыполнена)
	|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполнено,
	|	СУММА(ВЫБОР
	|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполнена
	|					И ПроизводственнаяОперация.ТребуетПовторения
	|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТребуетПовторения,
	|	СУММА(ВЫБОР
	|			КОГДА ПроизводственнаяОперация.Статус = &СтатусПропущена
	|				ТОГДА ПроизводственнаяОперация.Количество
	|						- ПроизводственнаяОперация.КоличествоОтменено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Пропущено
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация
	|ГДЕ
	|	ПроизводственнаяОперация.Этап = &Этап
	|	И (ПроизводственнаяОперация.Операция, ПроизводственнаяОперация.ИдентификаторОперации, ПроизводственнаяОперация.НомерПартии) В
	|			(ВЫБРАТЬ
	|				ВТОтборОперации.Операция,
	|				ВТОтборОперации.ИдентификаторОперации,
	|				ВТОтборОперации.НомерПартии
	|			ИЗ
	|				ВТОтборОперации КАК ВТОтборОперации)
	|	И ПроизводственнаяОперация.Статус <> &СтатусНеВыполнена
	|	И ПроизводственнаяОперация.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственнаяОперация.Операция,
	|	ПроизводственнаяОперация.ИдентификаторОперации,
	|	ПроизводственнаяОперация.НомерПартии";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ОтборОперации", Операции);
	Запрос.УстановитьПараметр("СтатусСоздана", Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Запрос.УстановитьПараметр("СтатусВыполняется", Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	Запрос.УстановитьПараметр("СтатусВыполнена", Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	Запрос.УстановитьПараметр("СтатусПропущена", Перечисления.СтатусыПроизводственныхОпераций.Пропущена);
	Запрос.УстановитьПараметр("СтатусНеВыполнена", Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Операция, ИдентификаторОперации, НомерПартии");
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьПоказателиВыполненияОперации(НаборОпераций, ДанныеОперации)
	
	Операция = НаборОпераций[0];
	ЗаполнитьЗначенияСвойств(
		Операция,
		ДанныеОперации,
		"Создано,
		|Выполняется,
		|Выполнено,
		|ТребуетПовторения,
		|Пропущено");
		
	Операция.ОжиданиеПредшествующих = 0;
	Операция.НачатыПредшествующие   = 0;
	Операция.МожноВыполнять         = 0;
	
	ПредыдущиеОперации = ПредыдущиеОперации(ДанныеОперации);
	Если ПредыдущиеОперации.Количество() = 0 Тогда
		
		Операция.МожноВыполнять = Макс(Операция.КоличествоПартии + Операция.ТребуетПовторения, Операция.Создано)
			- (Операция.Выполняется + Операция.Выполнено + Операция.Пропущено);
			
	Иначе
		
		МассивПредыдущих = Новый Массив;
		МассивКоличеств = Новый Массив;
		
		Для Каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
			
			Коэффициент = 1;
			Если ПредыдущаяОперация.Требуется > 0 Тогда
				Коэффициент = ДанныеОперации.Требуется / ПредыдущаяОперация.Требуется;
			КонецЕсли;
			
			Индекс = МассивПредыдущих.Найти(ПредыдущаяОперация.ИдентификаторОперации);
			Если Индекс = Неопределено Тогда
				
				МассивПредыдущих.Добавить(ПредыдущаяОперация.ИдентификаторОперации);
				СтруктураКоличеств = Новый Структура;
				СтруктураКоличеств.Вставить("ВыполняетсяПредыдущих", ПредыдущаяОперация.Выполняется * Коэффициент);
				СтруктураКоличеств.Вставить("ВыполненоПредыдущих", 
					(ПредыдущаяОперация.Выполнено - ПредыдущаяОперация.ТребуетПовторения + ПредыдущаяОперация.Пропущено) * Коэффициент);
				МассивКоличеств.Добавить(СтруктураКоличеств);
				
			Иначе
				
				ПредыдущиеКоличества = МассивКоличеств[Индекс];
				ПредыдущиеКоличества.ВыполняетсяПредыдущих = ПредыдущиеКоличества.ВыполняетсяПредыдущих + ПредыдущаяОперация.Выполняется * Коэффициент;
				ПредыдущиеКоличества.ВыполненоПредыдущих = ПредыдущиеКоличества.ВыполненоПредыдущих 
					+ (ПредыдущаяОперация.Выполнено - ПредыдущаяОперация.ТребуетПовторения + ПредыдущаяОперация.Пропущено) * Коэффициент;

			КонецЕсли;
			
		КонецЦикла;
		
		ДругиеПартии = ДругиеПартииОперации(ДанныеОперации);
		
		НачатыПредшествующие = -1;
		ВыполненыПредшествующие = -1;
		
		Для Каждого ПредыдущиеКоличества Из МассивКоличеств Цикл
			
			НачатыПредшествующие = ?(НачатыПредшествующие = -1, ПредыдущиеКоличества.ВыполняетсяПредыдущих + ПредыдущиеКоличества.ВыполненоПредыдущих, 
									Мин(ПредыдущиеКоличества.ВыполняетсяПредыдущих + ПредыдущиеКоличества.ВыполненоПредыдущих, НачатыПредшествующие));
									
			ВыполненыПредшествующие = ?(ВыполненыПредшествующие = -1, ПредыдущиеКоличества.ВыполненоПредыдущих, 
									Мин(ПредыдущиеКоличества.ВыполненоПредыдущих, ВыполненыПредшествующие));
			
		КонецЦикла;
		
		Для Каждого ДругаяПартия Из ДругиеПартии Цикл
			
			НачатыПредшествующие = НачатыПредшествующие - ДругаяПартия.НачатыПредшествующие - ДругаяПартия.МожноВыполнять - ДругаяПартия.Выполняется - ДругаяПартия.Выполнено;
			ВыполненыПредшествующие = ВыполненыПредшествующие - ДругаяПартия.МожноВыполнять - ДругаяПартия.Выполняется - ДругаяПартия.Выполнено;
			
		КонецЦикла;
		
		ВыполненыПредшествующие = Макс(ВыполненыПредшествующие, 0);
		НачатыПредшествующие = Макс(НачатыПредшествующие - ВыполненыПредшествующие, 0);		
		
		ОжидаетВыполнения = Макс(Операция.КоличествоПартии + Операция.ТребуетПовторения, Операция.Создано)
			- (Операция.Выполняется + Операция.Выполнено + Операция.Пропущено);
		
		Операция.МожноВыполнять = Макс(Мин(ВыполненыПредшествующие - Операция.Выполняется - Операция.Выполнено - Операция.Пропущено, ОжидаетВыполнения), 0);
		
		Операция.НачатыПредшествующие = Мин(НачатыПредшествующие, ОжидаетВыполнения - Операция.МожноВыполнять);
		Операция.ОжиданиеПредшествующих = ОжидаетВыполнения - Операция.МожноВыполнять - Операция.НачатыПредшествующие;
		
		ЗаполнитьЗначенияСвойств(ДанныеОперации, Операция, "ОжиданиеПредшествующих, НачатыПредшествующие, МожноВыполнять");
		
	КонецЕсли;
	
	Если Не НаборОпераций.Количество() = 1 Тогда
		
		СтрокаСвойств = "Создано, ОжиданиеПредшествующих, НачатыПредшествующие, НачатыПредшествующие, МожноВыполнять, Выполняется, Выполнено, 
		|ТребуетПовторения, Пропущено";
		Для Индекс = 1 По НаборОпераций.Количество() - 1 Цикл
			ЗаполнитьЗначенияСвойств(НаборОпераций[Индекс], Операция, СтрокаСвойств);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура СообщитьПользователюОбОшибкеРасчета(Отказ)
	
	ТекстСообщения = НСтр("ru = 'Не удалось рассчитать выполнение производственных операций.';
							|en = 'Cannot calculate routing operation execution.'");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			,
			, 
			Отказ);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
