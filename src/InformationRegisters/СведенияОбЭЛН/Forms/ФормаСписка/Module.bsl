#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перечисления.ПричиныНетрудоспособности.ДобавитьВФормуСпискаПредставлениеСтарыхПричин(
		Список,
		"ПричинаНетрудоспособности",
		"ПричинаНетрудоспособности",
		"ДатаНачалаСобытия");
	
	УстановитьСвойствоСпискаПоПараметруФормы("РежимВыбора");
	УстановитьСвойствоСпискаПоПараметруФормы("ВыборГруппИЭлементов");
	УстановитьСвойствоСпискаПоПараметруФормы("МножественныйВыбор");
	УстановитьСвойствоСпискаПоПараметруФормы("ТекущаяСтрока");
	
	Если ЗначениеЗаполнено(Параметры.Организация) И Не Параметры.Отбор.Свойство("ГоловнаяОрганизация") Тогда
		Параметры.Отбор.Вставить("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Параметры.Организация));
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Сотрудник) И Не Параметры.Отбор.Свойство("ФизическоеЛицо") Тогда
		Поля = "ГоловнаяОрганизация, ФизическоеЛицо";
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Параметры.Сотрудник, Поля, ТекущаяДатаСеанса());
		Если КадровыеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(КадровыеДанные.ГоловнаяОрганизация) Тогда
				Параметры.Отбор.Вставить("ГоловнаяОрганизация", КадровыеДанные.ГоловнаяОрганизация);
			КонецЕсли;
			Если ЗначениеЗаполнено(КадровыеДанные.ФизическоеЛицо) Тогда
				Параметры.Отбор.Вставить("ФизическоеЛицо", КадровыеДанные.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Список.РежимВыбора Тогда
		Элементы.ФормаВыбрать.КнопкаПоУмолчанию = Истина;
		Элементы.ПолучитьНовыеСообщения.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЕсли;
	
	Если Элементы.Список.МножественныйВыбор Тогда
		Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	Иначе
		Элементы.Список.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	КонецЕсли;
	
	ВыбранныеНомераЭЛН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВыбранныеНомераЭЛН");
	Если ТипЗнч(ВыбранныеНомераЭЛН) <> Тип("Массив") Тогда
		ВыбранныеНомераЭЛН = Новый Массив;
	КонецЕсли;
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "ЦветТекста", ЦветаСтиля.ТекстПодобранногоЗначенияЦвет);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "НомерЛисткаНетрудоспособности", ВидСравненияКомпоновкиДанных.ВСписке, ВыбранныеНомераЭЛН);
	ИдентификаторСпискаПодобранных = Список.УсловноеОформление.ПолучитьИдентификаторПоОбъекту(ЭлементУО);
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "ДатаОтправки, СостояниеОтправки, КомментарийКСостоянию");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "СостояниеОтправки", "=", Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС);
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "ДатаОтправки, СостояниеОтправки, КомментарийКСостоянию");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "ЦветТекста", ЦветаСтиля.РезультатПроблемаЦвет);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "СостояниеОтправки", "=", Перечисления.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС);
	
	ФиксОтборПоГоловнойОрганизации = Параметры.Отбор.Свойство("ГоловнаяОрганизация");
	ФиксОтборПоОрганизации         = ФиксОтборПоГоловнойОрганизации Или Параметры.Отбор.Свойство("Организация");
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список", , , , , Не ФиксОтборПоОрганизации);
	Для Каждого КлючИЗначение Из Параметры.Отбор Цикл
		УдалитьОтбор(Список, КлючИЗначение.Ключ);
	КонецЦикла;
	Если ФиксОтборПоГоловнойОрганизации  Тогда
		УдалитьОтбор(Список, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ВходящийЗапросФССДляРасчетаПособия"
		Или ИмяСобытия = "Запись_ОтветНаЗапросФССДляРасчетаПособия"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС() Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	Если Не ФиксОтборПоОрганизации Тогда
		ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Не ФиксОтборПоОрганизации Тогда
		ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ПолеФормы, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.Список.РежимВыбора Тогда
		ИменаПолей = "НомерЛисткаНетрудоспособности, Больничный, Организация, Сотрудник, ФизическоеЛицо, Отказ"; 
		РезультатВыбора = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(РезультатВыбора, СтрокаТаблицы);
		РезультатВыбора.Отказ = Ложь;
		ОповеститьОВыборе(РезультатВыбора);
		Если Не РезультатВыбора.Отказ Тогда
			ЭлементУО = Список.УсловноеОформление.ПолучитьОбъектПоИдентификатору(ИдентификаторСпискаПодобранных);
			ЭлементУО.Отбор.Элементы[0].ПравоеЗначение.Добавить(СтрокаТаблицы.НомерЛисткаНетрудоспособности);
		КонецЕсли;
	Иначе
		Если ПолеФормы = Элементы.ПодготовленныйКОтправкеРеестр Тогда
			ОткрытьПодготовленныйКОтправкеРеестр(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.ОтправленныйРеестр Тогда
			ОткрытьОтправленныйРеестр(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.ПринятыйРеестр Тогда
			ОткрытьПринятыйРеестр(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.ВходящийЗапрос Тогда
			ОткрытьВходящийЗапросФСС(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.ОтветНаЗапрос Тогда
			ОткрытьОтветНаЗапросФСС(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.Больничный
			Или ПолеФормы = Элементы.ПричинаНетрудоспособности
			Или ПолеФормы = Элементы.ПериодНетрудоспособностиНачало
			Или ПолеФормы = Элементы.ПериодНетрудоспособностиОкончание Тогда
			ОткрытьБольничный(Неопределено);
		ИначеЕсли ПолеФормы = Элементы.Сотрудник Тогда
			ПоказатьЗначениеКолонки("Сотрудник");
		ИначеЕсли ПолеФормы = Элементы.ФизическоеЛицо Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
				ПоказатьЗначениеКолонки("Сотрудник");
			Иначе
				ПоказатьЗначениеКолонки("ФизическоеЛицо");
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(ТаблицаФормы, ИдентификаторСтроки, СтандартнаяОбработка)
	СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ТекущийЭлемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьБольничный(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодготовленныйКОтправкеРеестр(Команда)
	ПоказатьЗначениеКолонки("ПодготовленныйКОтправкеРеестр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтправленныйРеестр(Команда)
	ПоказатьЗначениеКолонки("ОтправленныйРеестр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПринятыйРеестр(Команда)
	ПоказатьЗначениеКолонки("ПринятыйРеестр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВходящийЗапросФСС(Команда)
	ПоказатьЗначениеКолонки("ВходящийЗапрос");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтветНаЗапросФСС(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоСпискаПоПараметруФормы(Ключ)
	Если Параметры.Свойство(Ключ) И ЗначениеЗаполнено(Параметры[Ключ]) Тогда
		Элементы.Список[Ключ] = Параметры[Ключ];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеКолонки(ИмяКолонки)
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = ТекущаяСтрока[ИмяКолонки];
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьБольничный(СтрокаТаблицы)
	ПараметрыФормы = Новый Структура("Ключ", СтрокаТаблицы.Больничный);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
		ПолучитьЭЛНИзФСС = (СтрокаТаблицы.СостояниеФСС = ПредопределенноеЗначение("Перечисление.СостоянияЭЛНВФСС.Закрыт"));
		Если Не ПолучитьЭЛНИзФСС Тогда
			Текст = СтрШаблон(НСтр("ru = 'ЭЛН %1 не закрыт';
									|en = 'Electronic sick leave record %1 is not closed'"), СтрокаТаблицы.НомерЛисткаНетрудоспособности);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",                   СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",                СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛисткаНетрудоспособности", СтрокаТаблицы.НомерЛисткаНетрудоспособности);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ПолучитьЭЛНИзФСС",   ПолучитьЭЛНИзФСС);
	КонецЕсли;
	ОткрытьФорму("Документ.БольничныйЛист.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы)
	ПараметрыФормы = Новый Структура("Ключ", СтрокаТаблицы.ОтветНаЗапрос);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтветНаЗапрос) Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВходящийЗапрос) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует входящий запрос для ЭЛН %1';
									|en = 'Incoming request for the electronic sick leave record is missing %1'"), СтрокаТаблицы.НомерЛисткаНетрудоспособности);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует больничный для ЭЛН %1';
									|en = 'Sick leave is missing for electronic sick leave record %1'"), СтрокаТаблицы.НомерЛисткаНетрудоспособности);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",               СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",            СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛН",                   СтрокаТаблицы.НомерЛисткаНетрудоспособности);
		ЗначенияЗаполнения.Вставить("ВходящийЗапрос",            СтрокаТаблицы.ВходящийЗапрос);
		ЗначенияЗаполнения.Вставить("ПервичныйДокумент",         СтрокаТаблицы.Больничный);
		ЗначенияЗаполнения.Вставить("ПричинаНетрудоспособности", СтрокаТаблицы.ПричинаНетрудоспособности);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	ОткрытьФорму("Документ.ОтветНаЗапросФССДляРасчетаПособия.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьОтбор(Список, ИмяПоля)
	Коллекции = Новый Массив;
	Коллекции.Добавить(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	Для Каждого Элемент Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			Коллекции.Добавить(Элемент.Элементы);
		КонецЕсли;
	КонецЦикла;
	КоллекцияИндекс   = -1;
	КоллекцияВГраница = Коллекции.ВГраница();
	ПолеКД            = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Пока КоллекцияИндекс < КоллекцияВГраница Цикл
		КоллекцияИндекс = КоллекцияИндекс + 1;
		Коллекция = Коллекции[КоллекцияИндекс];
		ОбратныйИндекс = Коллекция.Количество();
		Пока ОбратныйИндекс > 0 Цикл
			ОбратныйИндекс = ОбратныйИндекс - 1;
			Элемент = Коллекция[ОбратныйИндекс];
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Элемент.ЛевоеЗначение = ПолеКД Тогда
					Коллекция.Удалить(Элемент);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
				Коллекции.Добавить(Элемент.Элементы);
				КоллекцияВГраница = КоллекцияВГраница + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
