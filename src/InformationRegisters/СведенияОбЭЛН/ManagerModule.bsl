#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ГоловнаяОрганизация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс


#Область ПриДобавленииИсключенийПоискаСсылок

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СведенияОбЭЛН);
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.41";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9d436e83-3e0d-11eb-80e8-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение головной организации для ЭЛН.';
										|en = 'Filling in the head organization for ESLR.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.141";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bfc88408-ba22-11eb-80f1-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ЗаполнитьПричинуИсправления";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение причины исправления для ЭЛН.';
										|en = 'Fill in a correction reason for ESLR.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.59";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("069d474f-b7e6-11ec-8449-fa605558a8c0");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ЗаполнитьДатуНачалаСобытия";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение даты начала события в сведениях об ЭЛН.';
										|en = 'Fill a start date of the event in information about the electronic sick leave record.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.62";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("484860e8-0769-11ed-810b-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ВключитьФлажокТребуетсяРеестрЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Включение флажка отправки ЭЛН для больничных по НС/ПЗ, которые еще не приняты ФСС и нет входящих запросов СЭДО.';
										|en = 'Select the check box to send an electronic sick leave record on industrial accidents and occupational diseases which have not been accepted by SSF yet and have no incoming EDI requests.'");
	
КонецПроцедуры

// Заполняет измерение ГоловнаяОрганизация на основании ресурса Организация.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьГоловнуюОрганизацию(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛН,
	|	СведенияОбЭЛН.Организация КАК Организация,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СведенияОбЭЛН.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	ОбработкаЗавершена = Истина;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛокальнаяТранзакция = Не ТранзакцияАктивна();
		Если ЛокальнаяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Чтение записи со старыми значениями измерений.
		СтарыйНабор = НачатьЗаписьНабора(Выборка.НомерЛН, ПустаяОрганизация, Ложь);
		Если СтарыйНабор = Неопределено Или СтарыйНабор.Количество() = 0 Тогда
			// Ошибка блокировки или другой процесс изменил запись.
			ОбработкаЗавершена = Ложь;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтараяЗапись = СтарыйНабор[0];
		ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(СтараяЗапись.Организация);
		Если СтараяЗапись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация Тогда
			// Ссылки совпадают, обновление не требуется.
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Подготовка набора для записи с новыми значениями измерений.
		НовыйНабор = НачатьЗаписьНабора(Выборка.НомерЛН, ТребуемаяГоловнаяОрганизация, Истина);
		Если НовыйНабор = Неопределено Или НовыйНабор.Количество() > 0 Тогда
			// Ошибка блокировки или запись уже занята.
			Если НовыйНабор = Неопределено Тогда
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
		НоваяЗапись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
		
		СтарыйНабор.Очистить();
		
		ЗавершитьЗаписьНабора(СтарыйНабор);
		ЗавершитьЗаписьНабора(НовыйНабор);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Заполняет ресурсы Исправление, КодПричиныИсправления, ОписаниеПричиныИсправления и реквизит БольничныйПроведен.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьПричинуИсправления(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ДанныеЭЛН.Исправление, ЛОЖЬ) КАК Исправление,
	|	ЕСТЬNULL(ДанныеЭЛН.КодПричиныИсправления, """") КАК КодПричиныИсправления,
	|	ЕСТЬNULL(ДанныеЭЛН.ОписаниеПричиныИсправления, """") КАК ОписаниеПричиныИсправления,
	|	ЕСТЬNULL(БольничныйЛист.Проведен, ЛОЖЬ) КАК БольничныйПроведен
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
	|		ПО СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = ДанныеЭЛН.Ссылка
	|			И СведенияОбЭЛН.НомерЛисткаНетрудоспособности = ДанныеЭЛН.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО СведенияОбЭЛН.Больничный = БольничныйЛист.Ссылка
	|ГДЕ
	|	(СведенияОбЭЛН.Больничный <> ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|			ИЛИ СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр <> ЗНАЧЕНИЕ(Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка))";
	ОбработкаЗавершена = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛокальнаяТранзакция = Не ТранзакцияАктивна();
		Если ЛокальнаяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Чтение записи со старыми значениями измерений.
		Набор = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Выборка.ГоловнаяОрганизация, Ложь);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			// Ошибка блокировки или другой процесс изменил запись.
			ОбработкаЗавершена = Ложь;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Запись = Набор[0];
		
		Если ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр) Тогда
			Запись.Исправление = Выборка.Исправление;
			Запись.КодПричиныИсправления = Выборка.КодПричиныИсправления;
			Запись.ОписаниеПричиныИсправления = Выборка.ОписаниеПричиныИсправления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Больничный) Тогда
			Запись.БольничныйПроведен = Выборка.БольничныйПроведен;
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(Набор);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Заполняет ресурс ДатаНачалаСобытия.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьДатуНачалаСобытия(ПараметрыОбновления = Неопределено) Экспорт
	
	// Если есть 111е сообщение - лучше его обработать штатным способом, при этом заполнится дата начала события.
	СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(Неопределено, 111);
	
	// Для старых ЭЛН данные заполняются из больничных.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОбЭЛН.ДоступенИсходныйXML КАК ДоступенИсходныйXML,
	|	СведенияОбЭЛН.ИсходныйXML КАК ИсходныйXML,
	|	СведенияОбЭЛН.БольничныйПроведен КАК БольничныйПроведен,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	БольничныйЛист.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.НомерЗаменяемогоЛН КАК НомерЗаменяемогоЛН
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО СведенияОбЭЛН.Больничный = БольничныйЛист.Ссылка
	|ГДЕ
	|	СведенияОбЭЛН.ДатаНачалаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|	И БольничныйЛист.ДатаНачалаСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
	ОбработкаЗавершена = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛокальнаяТранзакция = Не ТранзакцияАктивна();
		Если ЛокальнаяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Чтение записи со старыми значениями измерений.
		Набор = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Выборка.ГоловнаяОрганизация, Ложь);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			// Ошибка блокировки или другой процесс изменил запись.
			ОбработкаЗавершена = Ложь;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Запись = Набор[0];
		Запись.ДатаНачалаСобытия  = Выборка.ДатаНачалаСобытия;
		Запись.НомерПервичногоЛН  = Выборка.НомерПервичногоЛисткаНетрудоспособности;
		Запись.НомерЗаменяемогоЛН = Выборка.НомерЗаменяемогоЛН;
		
		ЗавершитьЗаписьНабора(Набор);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Включает флажок ТребуетсяРеестрЭЛН для больничных по НС/ПЗ, которые еще не приняты ФСС и нет входящих запросов СЭДО.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ВключитьФлажокТребуетсяРеестрЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойВходящийЗапрос", Документы.ВходящийЗапросФССДляРасчетаПособия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.Сотрудники.ПустаяСсылка());
	Запрос.УстановитьПараметр("НС", Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве);
	Запрос.УстановитьПараметр("ПЗ", Перечисления.ПричиныНетрудоспособности.Профзаболевание);
	Запрос.УстановитьПараметр("ДатаАктуальности", НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	НЕ СведенияОбЭЛН.ИзмененияПринятыФСС
	|	И НЕ СведенияОбЭЛН.ТребуетсяРеестрЭЛН
	|	И СведенияОбЭЛН.БольничныйПроведен
	|	И СведенияОбЭЛН.ВходящийЗапрос <> &ПустойВходящийЗапрос
	|	И СведенияОбЭЛН.Сотрудник <> &ПустойСотрудник
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности В (&НС, &ПЗ)
	|	И СведенияОбЭЛН.ДатаБольничного >= &ДатаАктуальности";
	
	ОбработкаЗавершена = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Чтение записи со старыми значениями измерений.
		Набор = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Выборка.ГоловнаяОрганизация, Ложь);
		Если Набор = Неопределено Тогда
			ОбработкаЗавершена = Ложь; // Ошибка блокировки или другой процесс изменил запись.
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Если Не Запись.ТребуетсяРеестрЭЛН
				И Не Запись.ИзмененияПринятыФСС
				И Не ЗначениеЗаполнено(Запись.ВходящийЗапрос) Тогда
				Запись.ТребуетсяРеестрЭЛН = Истина;
			КонецЕсли;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ПолучениеСведений

Функция ЭтоЭЛН(НомерЛН) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И (СведенияОбЭЛН.ДоступенИсходныйXML
	|			ИЛИ СведенияОбЭЛН.Хеш <> """")";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция ДоступенИсходныйXML(НомерЛН, ГоловнаяОрганизация) Экспорт
	ЗначенияРесурсов = ЗначенияРесурсов(НомерЛН, ГоловнаяОрганизация);
	Возврат ?(ЗначенияРесурсов = Неопределено, Ложь, ЗначенияРесурсов.ДоступенИсходныйXML);
КонецФункции

Функция ЗначенияРесурсов(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Или Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Фильтр = Новый Структура;
	Фильтр.Вставить("НомерЛисткаНетрудоспособности", НомерЛН);
	Фильтр.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Возврат Получить(Фильтр);
КонецФункции

Функция СведенияОбЭЛН(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Или Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ИсходныйXML(НомерЛН, ГоловнаяОрганизация, ПроверятьВозможностьЗагрузки = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Или Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.ИсходныйXML КАК ИсходныйXML,
	|	СведенияОбЭЛН.СостояниеФСС КАК СостояниеФСС
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ПроверятьВозможностьЗагрузки
			И Не ЭЛНФСС.РазрешенаЗагрузкаЭЛН(Выборка.СостояниеФСС, НомерЛН) Тогда
			Возврат "";
		КонецЕсли;
		Возврат Выборка.ИсходныйXML.Получить();
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ДатаНачалаСобытия(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.ИсходныйXML КАК ИсходныйXML,
	|	СведенияОбЭЛН.СостояниеФСС КАК СостояниеФСС,
	|	СведенияОбЭЛН.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Выборка.ДатаНачалаСобытия) Тогда
		Возврат Выборка.ДатаНачалаСобытия;
	Иначе
		Если Не ЭЛНФСС.РазрешенаЗагрузкаЭЛН(Выборка.СостояниеФСС, НомерЛН) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТекстXML = Выборка.ИсходныйXML.Получить();
		Если Не ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНИзXML(ТекстXML);
		Возврат ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН, ГоловнаяОрганизация);
	КонецЕсли;
КонецФункции

Функция ПрочитатьХеш(НомерЛН, ГоловнаяОрганизация) Экспорт
	Фильтр = Новый Структура;
	Фильтр.Вставить("НомерЛисткаНетрудоспособности", НомерЛН);
	Фильтр.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Возврат Получить(Фильтр).Хеш;
КонецФункции

Функция ПериодНетрудоспособности(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Или Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.ПериодНетрудоспособностиНачало КАК ПериодНетрудоспособностиНачало,
	|	СведенияОбЭЛН.ПериодНетрудоспособностиОкончание КАК ПериодНетрудоспособностиОкончание,
	|	СведенияОбЭЛН.НомерПервичногоЛН КАК НомерПервичногоЛН
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОбновитьСведенияОбЭЛН.
Процедура ЗаписатьПервичныеСведения(НомерЛН, Хеш, СтатусЭЛНВФСС, Организация, ФизическоеЛицо, ИсходныйXML = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН)
		Или (Не ЗначениеЗаполнено(Хеш) И Не ЗначениеЗаполнено(СтатусЭЛНВФСС)) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
		Запись.ГоловнаяОрганизация           = ГоловнаяОрганизация;
		Запись.Организация                   = Организация;
		Запись.ФизическоеЛицо                = ФизическоеЛицо;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если СтатусЭЛНВФСС <> Неопределено Тогда
		Если ЗначениеЗаполнено(Запись.СостояниеФСС) Тогда
			Приоритеты = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
			ТекущийПриоритет   = Приоритеты[Запись.СостояниеФСС];
			НовыйПриоритет     = Приоритеты[СтатусЭЛНВФСС];
			Если ТекущийПриоритет < НовыйПриоритет Тогда
				ОтменитьЗаписьНабора(НаборЗаписей);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Запись.СостояниеФСС = СтатусЭЛНВФСС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хеш) Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныйXML) Тогда
		Запись.ИсходныйXML = Новый ХранилищеЗначения(ИсходныйXML, Новый СжатиеДанных(9));
		Запись.ДоступенИсходныйXML = Истина;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ЗаполнениеРеестров

Функция ТаблицаОснованийДляРеестраЭЛН(Организация, ИгнорируемыйПодготовленныйКОтправкеРеестр, ВключаемыеЭЛН, ИсключаемыеЭЛН, КоличествоПервых) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяСсылкаРеестра", Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИгнорируемыйПодготовленныйКОтправкеРеестр", ИгнорируемыйПодготовленныйКОтправкеРеестр);
	Запрос.УстановитьПараметр("ВключаемыеЭЛН", ВключаемыеЭЛН);
	Запрос.УстановитьПараметр("ИсключаемыеЭЛН", ИсключаемыеЭЛН);
	Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.Сотрудники.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.Больничный КАК Больничный,
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр КАК ПодготовленныйКОтправкеРеестр
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ТребуетсяРеестрЭЛН
	|	И СведенияОбЭЛН.Организация = &Организация
	|	И СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр В (&ПустаяСсылкаРеестра, &ИгнорируемыйПодготовленныйКОтправкеРеестр)
	|	И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)
	|	И СведенияОбЭЛН.БольничныйПроведен
	|	И СведенияОбЭЛН.Сотрудник <> &ПустойСотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОбЭЛН.ДатаБольничного";
	Если ВключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)", "");
	КонецЕсли;
	Если ИсключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", ?(КоличествоПервых = 0, "", "ПЕРВЫЕ " + Формат(КоличествоПервых, "ЧГ=")));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти


#Область СобытияБольничных

Процедура ПриЗаписиБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = Новый Соответствие;
	
	ГоловнаяОрганизация        = БольничныйОбъект.ГоловнаяОрганизация;
	ЗначенияРеквизитовДоЗаписи = БольничныйОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	ПодобратьДругойБольничный = Не БольничныйОбъект.Проведен
		Или Не ЗначениеЗаполнено(БольничныйОбъект.НомерЛисткаНетрудоспособности)
		Или (ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.НомерЛисткаНетрудоспособности)
			И БольничныйОбъект.НомерЛисткаНетрудоспособности <> ЗначенияРеквизитовДоЗаписи.НомерЛисткаНетрудоспособности);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	(СведенияОбЭЛН.Больничный = &СсылкаБольничного
	|			ИЛИ СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		Если ПодобратьДругойБольничный Тогда
			ЗначенияРеквизитов = БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш);
		Иначе
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
		
		ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		
		Если ПодобратьДругойБольничный Тогда
			ЗаполнитьФлажокИзмененияПринятыИПричинуИсправленияИзПоследнегоРеестра(Запись);
		ИначеЕсли БольничныйОбъект.ДополнительныеСвойства.Свойство("ЭтоПоследнийБольничныйЭЛН")
			И БольничныйОбъект.ДополнительныеСвойства.ЭтоПоследнийБольничныйЭЛН Тогда
			Запись.ТребуетсяРеестрЭЛН         = БольничныйОбъект.ДополнительныеСвойства.ОтправитьЭЛН;
			Запись.Исправление                = БольничныйОбъект.ДополнительныеСвойства.ИсправлениеЭЛН;
			Запись.КодПричиныИсправления      = БольничныйОбъект.ДополнительныеСвойства.КодПричиныИсправленияЭЛН;
			Запись.ОписаниеПричиныИсправления = БольничныйОбъект.ДополнительныеСвойства.ОписаниеПричиныИсправленияЭЛН;
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Процедура ПередУдалениемБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = Новый Соответствие;
	
	// Обновление поля "Больничный" и связанных с ним полей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.Больничный = &СсылкаБольничного";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Выборка.ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		ЗначенияРеквизитов = БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш);
		
		Если ЗначенияРеквизитов.Ссылка = БольничныйОбъект.Ссылка Тогда
			// Если удаляется последний больничный в цепочке,
			// то сведения об ЭЛН удаляются вместе с ним.
			НаборЗаписей.Очистить();
		Иначе
			ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СобытияРеестров

Процедура ПриЗагрузкеОтветаФССПоРеестру(НомерЛН, РеестрОбъект, СтрокаТаблицыЭЛН, Хеш) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
		Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хеш) Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если СтрокаТаблицыЭЛН <> Неопределено Тогда
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН);
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
	
КонецПроцедуры

Процедура ПередЗаписьюРеестра(РеестрОбъект, РежимЗаписи, РежимПроведения) Экспорт
	// Очистка поля "ПодготовленныйКОтправкеРеестр" в случае, если реестр был распроведен.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
		|ИЗ
		|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|ГДЕ
		|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			ИначеЕсли НаборЗаписей.Количество() > 0
				И НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
				НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
				ЗавершитьЗаписьНабора(НаборЗаписей);
			Иначе
				ОтменитьЗаписьНабора(НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиРеестра(РеестрОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РеестрОбъект.Проведен Или РеестрОбъект.ПометкаУдаления Тогда
		ОчиститьСсылкиНаРеестр(РеестрОбъект);
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = РеестрОбъект.ГоловнаяОрганизация;
	
	Для Каждого СтрокаТаблицы Из РеестрОбъект.ДанныеЭЛН Цикл
		НаборЗаписей = НачатьЗаписьНабора(СтрокаТаблицы.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			// Нештатная ситуация (ошибка учета) - к отправке зарегистрирован ЭЛН, по которому не загружен хеш.
			Запись = НаборЗаписей.Добавить();
			Запись.НомерЛисткаНетрудоспособности = СтрокаТаблицы.НомерЛисткаНетрудоспособности;
			Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицы);
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект, Истина);
	
КонецПроцедуры

Процедура ПередУдалениемРеестра(РеестрОбъект) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СобытияДокументовСЭДО

Процедура ПриЗаписиВходящегоЗапроса(ВходящийЗапросОбъект) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияДоЗаписи = ВходящийЗапросОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	
	НомерЛН             = ВходящийЗапросОбъект.НомерЛН;
	ГоловнаяОрганизация = ВходящийЗапросОбъект.ГоловнаяОрганизация;
	ПометкаУдаления     = ВходящийЗапросОбъект.ПометкаУдаления;
	
	НомерЛНДоЗаписи             = ЗначенияДоЗаписи.НомерЛН;
	ГоловнаяОрганизацияДоЗаписи = ЗначенияДоЗаписи.ГоловнаяОрганизация;
	ПометкаУдаленияДоЗаписи     = ЗначенияДоЗаписи.ПометкаУдаления;
	
	// Актуализация сведений о запросе-ответе по старым значениям измерений,
	// которые в результате изменений в документе утратили актуальность, но претендовали на актуальность до записи.
	Если ЗначениеЗаполнено(НомерЛНДоЗаписи)
		И ЗначениеЗаполнено(ГоловнаяОрганизацияДоЗаписи)
		И Не ПометкаУдаленияДоЗаписи
		И (НомерЛН <> НомерЛНДоЗаписи
			Или ГоловнаяОрганизация <> ГоловнаяОрганизацияДоЗаписи
			Или ПометкаУдаления <> ПометкаУдаленияДоЗаписи) Тогда
		НаборЗаписей = НачатьЗаписьНабора(НомерЛНДоЗаписи, ГоловнаяОрганизацияДоЗаписи, Ложь);
		Если НаборЗаписей <> Неопределено Тогда
			Если НаборЗаписей.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(НаборЗаписей);
			Иначе
				Запись = НаборЗаписей[0];
				ОбновитьСведенияОЗапросеОтветеСЭДО(Запись);
				ЗавершитьЗаписьНабора(НаборЗаписей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Актуализация сведений о запросе-ответе по новым значениям измерений,
	// которые в результате изменений в документе претендуют на актуальность.
	Если ЗначениеЗаполнено(НомерЛН)
		И ЗначениеЗаполнено(ГоловнаяОрганизация)
		И Не ПометкаУдаления Тогда
		НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
		Если НаборЗаписей <> Неопределено Тогда
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.НомерЛисткаНетрудоспособности = НомерЛН;
				Запись.ГоловнаяОрганизация           = ГоловнаяОрганизация;
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			ОбновитьСведенияОЗапросеОтветеСЭДО(Запись);
			ЗавершитьЗаписьНабора(НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиОтветаНаЗапрос(ОтветНаЗапросОбъект) Экспорт
	// Механика аналогична входящему запросу.
	ПриЗаписиВходящегоЗапроса(ОтветНаЗапросОбъект);
КонецПроцедуры

Процедура ПриЗаписиИсходящегоСообщенияОСтраховомСлучае(ИсходящееСообщение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияДоЗаписи = ИсходящееСообщение.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	
	НомерЛН             = ИсходящееСообщение.НомерЛН;
	ГоловнаяОрганизация = ИсходящееСообщение.ГоловнаяОрганизация;
	ПометкаУдаления     = ИсходящееСообщение.ПометкаУдаления;
	
	НомерЛНДоЗаписи             = ЗначенияДоЗаписи.НомерЛН;
	ГоловнаяОрганизацияДоЗаписи = ЗначенияДоЗаписи.ГоловнаяОрганизация;
	ПометкаУдаленияДоЗаписи     = ЗначенияДоЗаписи.ПометкаУдаления;
	
	// Актуализация сведений об исходящем сообщении по старым значениям измерений,
	// которые в результате изменений в документе утратили актуальность, но претендовали на актуальность до записи.
	Если ЗначениеЗаполнено(НомерЛНДоЗаписи)
		И ЗначениеЗаполнено(ГоловнаяОрганизацияДоЗаписи)
		И Не ПометкаУдаленияДоЗаписи
		И (НомерЛН <> НомерЛНДоЗаписи
			Или ГоловнаяОрганизация <> ГоловнаяОрганизацияДоЗаписи
			Или ПометкаУдаления <> ПометкаУдаленияДоЗаписи) Тогда
		НаборЗаписей = НачатьЗаписьНабора(НомерЛНДоЗаписи, ГоловнаяОрганизацияДоЗаписи, Ложь);
		Если НаборЗаписей <> Неопределено Тогда
			Если НаборЗаписей.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(НаборЗаписей);
			Иначе
				Запись = НаборЗаписей[0];
				ОбновитьДанныеСообщенияОСтраховомСлучае(Запись);
				ЗавершитьЗаписьНабора(НаборЗаписей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Актуализация сведений об исходящем сообщении по новым значениям измерений,
	// которые в результате изменений в документе претендуют на актуальность.
	Если ЗначениеЗаполнено(НомерЛН)
		И ЗначениеЗаполнено(ГоловнаяОрганизация)
		И Не ПометкаУдаления Тогда
		НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
		Если НаборЗаписей <> Неопределено Тогда
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.НомерЛисткаНетрудоспособности = НомерЛН;
				Запись.ГоловнаяОрганизация           = ГоловнаяОрганизация;
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			ОбновитьДанныеСообщенияОСтраховомСлучае(Запись);
			ЗавершитьЗаписьНабора(НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти



#Область НаборЗаписей

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   НомерЛН                      - Строка                       - Значение отбора по измерению НомерЛисткаНетрудоспособности.
//   ГоловнаяОрганизация          - СправочникСсылка.Организации - Значение отбора по измерению ГоловнаяОрганизация.
//   ПодниматьИсключениеПриОшибке - Булево
//   ТекстОшибки                  - Строка
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.СведенияОбЭЛН - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, ПодниматьИсключениеПриОшибке = Неопределено, ТекстОшибки = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// При переходе на ЭЛН 2.0 добавлен обязательный параметр ГоловнаяОрганизация.
	// В случае несоответствия типа должно возникнуть исключение.
	// В целях обратной совместимости для для расширения 65+
	// реализована возможность "мягкого" выхода без поднятия исключения,
	// для чего 3й параметр сделан необязательным.
	Если ТипЗнч(ПодниматьИсключениеПриОшибке) <> Тип("Булево") Тогда
		Если ТипЗнч(ГоловнаяОрганизация) = Тип("Булево") Тогда
			ПодниматьИсключениеПриОшибке = ГоловнаяОрганизация;
			ГоловнаяОрганизация = Неопределено;
		Иначе
			ПодниматьИсключениеПриОшибке = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(НомерЛН) <> Тип("Строка")
		Или ТипЗнч(ГоловнаяОрганизация) <> Тип("СправочникСсылка.Организации") Тогда
		Попытка
			// Формирование текста ошибки.
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
				"РегистрыСведений.СведенияОбЭЛН.НачатьЗаписьНабора",
				"НомерЛН",
				НомерЛН,
				Тип("Строка"));
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
				"РегистрыСведений.СведенияОбЭЛН.НачатьЗаписьНабора",
				"ГоловнаяОрганизация",
				ГоловнаяОрганизация,
				Тип("СправочникСсылка.Организации"));
		Исключение
			// Поднятие исключение или сообщение об ошибке.
			Если ПодниматьИсключениеПриОшибке Тогда
				ВызватьИсключение;
			КонецЕсли;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(ТекстОшибки, , Метаданные.РегистрыСведений.СведенияОбЭЛН);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.СведенияОбЭЛН.Представление());
	КонецЕсли;
	ЕстьОграниченияДоступа = Не ПолныеПраваИлиПривилегированныйРежим И УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей();
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОбЭЛН");
		ЭлементБлокировки.УстановитьЗначение("НомерЛисткаНетрудоспособности", НомерЛН);
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЛисткаНетрудоспособности.Установить(НомерЛН);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		Если ЕстьОграниченияДоступа Тогда // Чтение в привилегированном режиме.
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Прочитать();
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
		Иначе
			НаборЗаписей.Прочитать();
		КонецЕсли;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения об ЭЛН %1 %2 по причине: %3';
				|en = 'Cannot change ESLR %1 %2 information. Reason: %3'"),
			НомерЛН,
			ГоловнаяОрганизация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СведенияОбЭЛН,
			НомерЛН,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		Если ПодниматьИсключениеПриОшибке Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СведенияОбЭЛН
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
			Если ЗначениеЗаполнено(Запись.Страхователь) Тогда
				Запись.Организация = Запись.Страхователь;
			Иначе
				Запись.Организация = Запись.ГоловнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СведенияОбЭЛН
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти


#Область ОбновлениеВторичныхДанных

Функция ИменаТребуемыхРеквизитовБольничного() Экспорт
	Возврат
	"Ссылка, НомерЛисткаНетрудоспособности, Дата, ДатаНачала, ДатаОкончания,
	|Организация, ФизическоеЛицо, Сотрудник, ПричинаНетрудоспособности, Проведен, ПометкаУдаления,
	|ГоловнаяОрганизация, ДатаНачалаСобытия, НомерПервичногоЛисткаНетрудоспособности, НомерЗаменяемогоЛН";
КонецФункции

Процедура ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов, ПроверятьСНИЛСФизлица = Истина) Экспорт
	
	// Если больничный есть, то Больничный, Организация и ФизическоеЛицо заполняются из больничного, даже если тот не проведен:
	//   - Больничный - используется для удаления записей вместе с больничными и другими механизмами (например, СЭДО ФСС);
	//   - Организация и ФизическоеЛицо - используется в RLS.
	//   - ДатаНачалаСобытия - используется для функции ЭЛНФСС.ДатаНачалаСобытия.
	// Если больничного нет, то ФизическоеЛицо заполняется по СНИЛС, Сотрудник и Организация - по физическому лицу.
	Если ЗначенияРеквизитов = Неопределено
		Или ЗначенияРеквизитов.ГоловнаяОрганизация <> Запись.ГоловнаяОрганизация
		Или ЗначенияРеквизитов.НомерЛисткаНетрудоспособности <> Запись.НомерЛисткаНетрудоспособности Тогда
		Запись.Больничный         = Неопределено;
		Запись.БольничныйПроведен = Ложь;
		Если ПроверятьСНИЛСФизлица
			И ЗначениеЗаполнено(Запись.СНИЛС)
			И ЗначениеЗаполнено(Запись.ФизическоеЛицо)
			И Запись.СНИЛС <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ФизическоеЛицо, "СтраховойНомерПФР") Тогда
			Запись.ФизическоеЛицо = Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
			Запись.Сотрудник   = Неопределено;
			Запись.Организация = Запись.ГоловнаяОрганизация;
		КонецЕсли;
	Иначе
		Запись.Больничный         = ЗначенияРеквизитов.Ссылка;
		Запись.Организация        = ЗначенияРеквизитов.Организация;
		Запись.ФизическоеЛицо     = ЗначенияРеквизитов.ФизическоеЛицо;
		Запись.БольничныйПроведен = ЗначенияРеквизитов.Проведен;
		Запись.ДатаНачалаСобытия  = ЗначенияРеквизитов.ДатаНачалаСобытия;
	КонецЕсли;
	
	Если Запись.БольничныйПроведен Тогда
		Запись.ДатаБольничного           = ЗначенияРеквизитов.Дата;
		Запись.Сотрудник                 = ЗначенияРеквизитов.Сотрудник;
		Запись.ПричинаНетрудоспособности = ЗначенияРеквизитов.ПричинаНетрудоспособности;
		Если Не Запись.ДоступенИсходныйXML
			Или Не ЗначениеЗаполнено(Запись.ПериодНетрудоспособностиНачало) Тогда
			Запись.ПериодНетрудоспособностиНачало    = ЗначенияРеквизитов.ДатаНачала;
			Запись.ПериодНетрудоспособностиОкончание = ЗначенияРеквизитов.ДатаОкончания;
			Запись.НомерПервичногоЛН                 = ЗначенияРеквизитов.НомерПервичногоЛисткаНетрудоспособности;
			Запись.НомерЗаменяемогоЛН                = ЗначенияРеквизитов.НомерЗаменяемогоЛН;
		КонецЕсли;
	Иначе
		// В эту ветку код попадает в следующих случаях:
		//   1. Больничный не проведен или отмечен к удалению (исправления также отсутствуют);
		//   2. В больничном изменен номер листка нетрудоспособности (введены сведения другого больничного).
		// В обоих случаях запись в регистре остается до тех пор,
		//   пока больничный не будет окончательно удален из программы,
		//   либо пока в программе не появится другой больничный с этим номером ЭЛН.
		// Поэтому поля Организация и ФизическоеЛицо остаются заполненными,
		//   а поле Сотрудник очищается, исключая возможность автоматического подбора этого ЭЛН в реестр ЭЛН.
		Запись.ТребуетсяРеестрЭЛН = Ложь;
		Запись.ДатаБольничного    = Неопределено;
	КонецЕсли;
	
	// Актуализация физического лица и организации в случае отсутствия или незаполненности больничного.
	ЗаполнитьФизическоеЛицо(Запись);
	ЗаполнитьСотрудникаИОрганизацию(Запись);
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицо(Запись)
	Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) И ЗначениеЗаполнено(Запись.СНИЛС) Тогда
		РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(
			Запись.СНИЛС,
			Запись.Фамилия,
			Запись.Имя,
			Запись.Отчество);
		Запись.ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСотрудникаИОрганизацию(Запись)
	Если ЗначениеЗаполнено(Запись.ФизическоеЛицо) И ЗначениеЗаполнено(Запись.Страхователь) Тогда
		ТребуетсяОрганизация = Не ЗначениеЗаполнено(Запись.Организация);
		ТребуетсяСотрудник   = Не ЗначениеЗаполнено(Запись.Сотрудник);
		Если ТребуетсяОрганизация Тогда
			Запись.Организация = Запись.Страхователь;
		КонецЕсли;
		Если ТребуетсяОрганизация Или ТребуетсяСотрудник Тогда
			ТекстОшибки = "";
			КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
				Запись.Страхователь,
				Запись.ФизическоеЛицо,
				"Организация, Сотрудник",
				Запись.ДатаНачалаСобытия,
				Ложь,
				ТекстОшибки);
			Если КадровыеДанные <> Неопределено Тогда
				Если ТребуетсяОрганизация И ЗначениеЗаполнено(КадровыеДанные.Организация) Тогда
					Запись.Организация = КадровыеДанные.Организация;
				КонецЕсли;
				Если ТребуетсяСотрудник Тогда
					Запись.Сотрудник = КадровыеДанные.Сотрудник;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭЛН.Состояние) Тогда
		Запись.ОтправленныйРеестр     = РеестрОбъект.Ссылка;
		Запись.ДатаОтправки           = РеестрОбъект.ДатаПолученияОтветаФСС;
		Запись.СостояниеОтправки      = СтрокаТаблицыЭЛН.Состояние;
		Запись.КомментарийКСостоянию  = СтрокаТаблицыЭЛН.КомментарийКСостоянию;
		Если Запись.СостояниеОтправки = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС Тогда
			Запись.ПринятыйРеестр      = РеестрОбъект.Ссылка;
			Запись.ИзмененияПринятыФСС = Истина;
			Запись.ТребуетсяРеестрЭЛН  = Ложь;
			Запись.Исправление         = Ложь;
		КонецЕсли;
		Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
	Иначе
		Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет флажок отправки и причину исправления из последнего реестра.
Процедура ЗаполнитьФлажокИзмененияПринятыИПричинуИсправленияИзПоследнегоРеестра(Запись)
	
	Если Запись.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.Аннулирован Тогда
		// Действия прекращены.
		Запись.ИзмененияПринятыФСС = Ложь;
		Запись.ТребуетсяРеестрЭЛН  = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Запись.ВходящийЗапрос)
		Или ЗначениеЗаполнено(Запись.ОтветНаЗапрос)
		Или ЗначениеЗаполнено(Запись.СообщениеОСтраховомСлучае) Тогда
		// Сведения отправляются через СЭДО.
		Запись.ИзмененияПринятыФСС = Ложь;
		Запись.ТребуетсяРеестрЭЛН  = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр)
		И Запись.ПодготовленныйКОтправкеРеестр <> Запись.ПринятыйРеестр Тогда
		// Последний изменный пользователем реестр еще не отправлен в ФСС.
		Запись.ИзмененияПринятыФСС = Ложь;
		Запись.ТребуетсяРеестрЭЛН  = Истина;
	ИначеЕсли ЗначениеЗаполнено(Запись.ПринятыйРеестр) Тогда
		// Последний изменный пользователем реестр был принят ФСС.
		Запись.ИзмененияПринятыФСС = Истина;
		Запись.ТребуетсяРеестрЭЛН  = Ложь;
	Иначе
		Если Запись.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.ВыплаченФСС
			Или Запись.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.ПринятРеестрПВСО
			Или Запись.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.ПринятРеестрЭЛН Тогда
			// Сведения ранее были приняты ФСС.
			Запись.ИзмененияПринятыФСС = Истина;
			Запись.ТребуетсяРеестрЭЛН  = Ложь;
		ИначеЕсли Запись.СостояниеФСС = Перечисления.СостоянияЭЛНВФСС.Закрыт Тогда
			// Сведения не отправлялись или не приняты ФСС - ожидаются данные через СЭДО.
		Иначе
			// ЭЛН не готов к выплате пособия.
			Запись.ИзмененияПринятыФСС = Ложь;
			Запись.ТребуетсяРеестрЭЛН  = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Реестр = Запись.ПодготовленныйКОтправкеРеестр;
	Если Не ЗначениеЗаполнено(Реестр) Тогда
		Реестр = Запись.ПринятыйРеестр;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реестр) Тогда
		РеквизитыСтрокиРеестра = РеквизитыСтрокиРеестра(Реестр, Запись.НомерЛисткаНетрудоспособности);
	Иначе
		РеквизитыСтрокиРеестра = ПоследнийПроведенныйРеестр(
			Запись.НомерЛисткаНетрудоспособности,
			Запись.ГоловнаяОрганизация,
			Перечисления.СостоянияРеестровФСС.Подготовлен);
	КонецЕсли;
	
	Если РеквизитыСтрокиРеестра <> Неопределено Тогда
		Запись.Исправление                = РеквизитыСтрокиРеестра.Исправление;
		Запись.КодПричиныИсправления      = РеквизитыСтрокиРеестра.КодПричиныИсправления;
		Запись.ОписаниеПричиныИсправления = РеквизитыСтрокиРеестра.ОписаниеПричиныИсправления;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыСтрокиРеестра(СсылкаРеестра, НомерЛисткаНетрудоспособности)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Дата,
	|	Шапка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Состояние КАК Состояние,
	|	ТабличнаяЧасть.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧасть.Исправление КАК Исправление,
	|	ТабличнаяЧасть.КодПричиныИсправления КАК КодПричиныИсправления,
	|	ТабличнаяЧасть.ОписаниеПричиныИсправления КАК ОписаниеПричиныИсправления
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Шапка
	|		ПО (ТабличнаяЧасть.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)
	|			И (ТабличнаяЧасть.Ссылка = &Ссылка)
	|			И (Шапка.Ссылка = &Ссылка)";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("Ссылка", СсылкаРеестра);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПоследнийПроведенныйРеестр(НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, СостояниеРеестра = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Шапка.Дата КАК Дата,
	|	Шапка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Состояние КАК Состояние,
	|	ТабличнаяЧасть.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧасть.Исправление КАК Исправление,
	|	ТабличнаяЧасть.КодПричиныИсправления КАК КодПричиныИсправления,
	|	ТабличнаяЧасть.ОписаниеПричиныИсправления КАК ОписаниеПричиныИсправления
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Шапка
	|		ПО (ТабличнаяЧасть.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)
	|			И ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|			И (Шапка.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (Шапка.Проведен)
	|			И (Шапка.СостояниеРеестра = &СостояниеРеестра)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Если СостояниеРеестра = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Шапка.СостояниеРеестра = &СостояниеРеестра)", "");
	Иначе
		Запрос.УстановитьПараметр("СостояниеРеестра", СостояниеРеестра);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОчиститьСсылкиНаРеестр(РеестрОбъект, ТолькоАктуализироватьИспользуемыеНомераЭЛН = Ложь) Экспорт
	// Очистка полей "ПодготовленныйКОтправкеРеестр", "ОтправленныйРеестр" и "ПринятыйРеестр".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ОтправленныйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПринятыйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)";
	
	Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
	Если ТолькоАктуализироватьИспользуемыеНомераЭЛН Тогда
		// Очистка ссылок только на те номера ЭЛН, которые ранее использовались в этом реестре, а сейчас не используются.
		Запрос.УстановитьПараметр("ИспользуемыеНомераЛН", РеестрОбъект.ДанныеЭЛН.ВыгрузитьКолонку("НомерЛисткаНетрудоспособности"));
	Иначе
		// Очистка любых ссылок на этот реестр.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)", "");
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей[0];
		
		// Очистка полей заполняемых из реестра.
		Если Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		Если Запись.ОтправленныйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ОтправленныйРеестр    = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
			Запись.ДатаОтправки          = '00010101';
			Запись.СостояниеОтправки     = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка();
			Запись.КомментарийКСостоянию = "";
		КонецЕсли;
		Если Запись.ПринятыйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПринятыйРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		
		// Перезаполнение полей на основании предшествующих реестров.
		РеестрИСтрока = Неопределено;
		Если ЗначениеЗаполнено(Запись.ПринятыйРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ПринятыйРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено И ЗначениеЗаполнено(Запись.ОтправленныйРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ОтправленныйРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено И ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ПодготовленныйКОтправкеРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено Тогда
			РеестрИСтрока = ПоследнийПроведенныйРеестр(Запись.НомерЛисткаНетрудоспособности, Запись.ГоловнаяОрганизация);
		КонецЕсли;
		Если РеестрИСтрока <> Неопределено Тогда
			ОбновитьСведенияОРеестре(Запись, РеестрИСтрока, РеестрИСтрока);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСведенияОЗапросеОтветеСЭДО(Запись)
	ДанныеВходящегоЗапроса = ПоследнийВходящийЗапрос(Запись.НомерЛисткаНетрудоспособности, Запись.ГоловнаяОрганизация);
	Если ДанныеВходящегоЗапроса = Неопределено Тогда
		Запись.ВходящийЗапрос = Неопределено;
		Запись.ОтветНаЗапрос  = Неопределено;
	Иначе
		Запись.ВходящийЗапрос = ДанныеВходящегоЗапроса.Ссылка;
		Запись.ОтветНаЗапрос  = ДанныеВходящегоЗапроса.ОтветНаЗапрос;
	КонецЕсли;
	// Если нет входящего запроса или в ответе на запрос не выбран входящий запрос, то поиск осуществляет по № ЛН.
	Если Не ЗначениеЗаполнено(Запись.ОтветНаЗапрос) Тогда
		Запись.ОтветНаЗапрос = ПоследнийОтветНаЗапрос(Запись.НомерЛисткаНетрудоспособности, Запись.ГоловнаяОрганизация);
	КонецЕсли;
	Если Не Запись.ДоступенИсходныйXML
		И Не ЗначениеЗаполнено(Запись.Больничный)
		И ЗначениеЗаполнено(Запись.ВходящийЗапрос)
		И ДанныеВходящегоЗапроса <> Неопределено Тогда
		Запись.Организация         = ДанныеВходящегоЗапроса.Организация;
		Запись.Страхователь        = ДанныеВходящегоЗапроса.Страхователь;
		Запись.Сотрудник           = ДанныеВходящегоЗапроса.Сотрудник;
		Запись.ФизическоеЛицо      = ДанныеВходящегоЗапроса.ФизическоеЛицо;
		Запись.СНИЛС               = ДанныеВходящегоЗапроса.СотрудникСНИЛС;
		Запись.Фамилия             = ДанныеВходящегоЗапроса.СотрудникФамилия;
		Запись.Имя                 = ДанныеВходящегоЗапроса.СотрудникИмя;
		Запись.Отчество            = ДанныеВходящегоЗапроса.СотрудникОтчество;
	КонецЕсли;
КонецПроцедуры

Функция ПоследнийВходящийЗапрос(НомерЛН, ГоловнаяОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящийЗапросФСС.Ссылка КАК Ссылка,
	|	ВходящийЗапросФСС.ОтветНаЗапрос КАК ОтветНаЗапрос,
	|	ВходящийЗапросФСС.НомерПроцесса КАК НомерПроцесса,
	|	ВходящийЗапросФСС.Организация КАК Организация,
	|	ВходящийЗапросФСС.Страхователь КАК Страхователь,
	|	ВходящийЗапросФСС.Сотрудник КАК Сотрудник,
	|	ВходящийЗапросФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВходящийЗапросФСС.СотрудникСНИЛС КАК СотрудникСНИЛС,
	|	ВходящийЗапросФСС.СотрудникФамилия КАК СотрудникФамилия,
	|	ВходящийЗапросФСС.СотрудникИмя КАК СотрудникИмя,
	|	ВходящийЗапросФСС.СотрудникОтчество КАК СотрудникОтчество,
	|	ВходящийЗапросФСС.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|ГДЕ
	|	ВходящийЗапросФСС.НомерЛН = &НомерЛН
	|	И ВходящийЗапросФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И НЕ ВходящийЗапросФСС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящийЗапросФСС.НомерПроцесса УБЫВ,
	|	ВходящийЗапросФСС.Дата УБЫВ,
	|	ВходящийЗапросФСС.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПоследнийОтветНаЗапрос(НомерЛН, ГоловнаяОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветНаЗапросФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС
	|ГДЕ
	|	ОтветНаЗапросФСС.НомерЛН = &НомерЛН
	|	И ОтветНаЗапросФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И НЕ ОтветНаЗапросФСС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветНаЗапросФСС.Дата УБЫВ,
	|	ОтветНаЗапросФСС.Проведен УБЫВ,
	|	ОтветНаЗапросФСС.ДатаОтправки УБЫВ,
	|	ОтветНаЗапросФСС.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОбновитьДанныеСообщенияОСтраховомСлучае(Запись)
	ДанныеСообщения = ПоследнееСообщениеОСтраховомСлучаеФСС(
		Запись.НомерЛисткаНетрудоспособности,
		Запись.ГоловнаяОрганизация);
	Если ДанныеСообщения = Неопределено Тогда
		Запись.СообщениеОСтраховомСлучае = Неопределено;
	Иначе
		Запись.СообщениеОСтраховомСлучае = ДанныеСообщения.Ссылка;
	КонецЕсли;
	
	Если Не Запись.ДоступенИсходныйXML
		И Не ЗначениеЗаполнено(Запись.Больничный)
		И Не ЗначениеЗаполнено(Запись.ВходящийЗапрос)
		И ЗначениеЗаполнено(Запись.СообщениеОСтраховомСлучае)
		И ДанныеСообщения <> Неопределено Тогда
		Запись.Организация         = ДанныеСообщения.Организация;
		Запись.Страхователь        = ДанныеСообщения.Страхователь;
		Запись.Сотрудник           = ДанныеСообщения.Сотрудник;
		Запись.ФизическоеЛицо      = ДанныеСообщения.ФизическоеЛицо;
		Запись.СНИЛС               = ДанныеСообщения.СотрудникСНИЛС;
		Запись.Фамилия             = ДанныеСообщения.СотрудникФамилия;
		Запись.Имя                 = ДанныеСообщения.СотрудникИмя;
		Запись.Отчество            = ДанныеСообщения.СотрудникОтчество;
	КонецЕсли;
	
КонецПроцедуры

Функция ПоследнееСообщениеОСтраховомСлучаеФСС(НомерЛН, ГоловнаяОрганизация)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОСтраховомСлучаеФСС.Ссылка КАК Ссылка,
	|	СообщениеОСтраховомСлучаеФСС.Организация КАК Организация,
	|	СообщениеОСтраховомСлучаеФСС.Страхователь КАК Страхователь,
	|	СообщениеОСтраховомСлучаеФСС.Сотрудник КАК Сотрудник,
	|	СообщениеОСтраховомСлучаеФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СообщениеОСтраховомСлучаеФСС.СотрудникСНИЛС КАК СотрудникСНИЛС,
	|	СообщениеОСтраховомСлучаеФСС.СотрудникФамилия КАК СотрудникФамилия,
	|	СообщениеОСтраховомСлучаеФСС.СотрудникИмя КАК СотрудникИмя,
	|	СообщениеОСтраховомСлучаеФСС.СотрудникОтчество КАК СотрудникОтчество
	|ИЗ
	|	Документ.ИсходящееСообщениеОСтраховомСлучаеФСС КАК СообщениеОСтраховомСлучаеФСС
	|ГДЕ
	|	СообщениеОСтраховомСлучаеФСС.НомерЛН = &НомерЛН
	|	И СообщениеОСтраховомСлучаеФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И НЕ СообщениеОСтраховомСлучаеФСС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОСтраховомСлучаеФСС.ДатаОтправки УБЫВ,
	|	СообщениеОСтраховомСлучаеФСС.ДатаСоздания УБЫВ,
	|	СообщениеОСтраховомСлучаеФСС.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСообщения111

Процедура ЗагрузитьСообщение111(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Чтение данных ЭЛН.
	ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНСКэшем(ТекстXML, Кэш);
	Если ДанныеЭЛН.Успех Тогда
		// В процессе обновления сведений также может отключиться флажок Успех и заполниться текст ошибки.
		// Через ДанныеЭЛН флажок попадет в кэш и может быть использован другими потребителями сообщения 111.
		ОбновитьСведенияОбЭЛН(Страхователь, ТекстXML, ДанныеЭЛН);
		ПроиндексироватьСНИЛССообщения111(Страхователь, ИдентификаторСообщения, ДанныеЭЛН, Кэш);
	КонецЕсли;
	Если Не ДанныеЭЛН.Успех Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ДанныеЭЛН.ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСведенияОбЭЛН(Страхователь, ТекстXML, ДанныеЭЛН) Экспорт
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	НаборЗаписей = НачатьЗаписьНабора(ДанныеЭЛН.НомерЛН, ГоловнаяОрганизация, Ложь, ДанныеЭЛН.ТекстОшибки);
	Если НаборЗаписей = Неопределено Тогда
		ДанныеЭЛН.Успех = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.НомерЛисткаНетрудоспособности = ДанныеЭЛН.НомерЛН;
			Запись.ГоловнаяОрганизация           = ГоловнаяОрганизация;
			Запись.ФизическоеЛицо                = ЭЛНФСС.ФизическоеЛицо(ДанныеЭЛН);
			ПроверятьСНИЛСФизлица = Ложь;
		Иначе
			Запись = НаборЗаписей[0];
			ПроверятьСНИЛСФизлица = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЭЛН.СтатусЭЛНВФСС) Тогда
			Если ЗначениеЗаполнено(Запись.СостояниеФСС) Тогда
				Приоритеты       = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
				ТекущийПриоритет = Приоритеты[Запись.СостояниеФСС];
				НовыйПриоритет   = Приоритеты[ДанныеЭЛН.СтатусЭЛНВФСС];
				Если ТекущийПриоритет < НовыйПриоритет Тогда
					ОтменитьЗаписьНабора(НаборЗаписей);
					Возврат; // Ошибки нет, загружены более актуальные данные.
				КонецЕсли;
			КонецЕсли;
			Запись.СостояниеФСС = ДанныеЭЛН.СтатусЭЛНВФСС;
		КонецЕсли;
		
		Запись.Страхователь        = Страхователь;
		Запись.СНИЛС               = ДанныеЭЛН.СНИЛС;
		Запись.Фамилия             = ДанныеЭЛН.Фамилия;
		Запись.Имя                 = ДанныеЭЛН.Имя;
		Запись.Отчество            = ДанныеЭЛН.Отчество;
		Запись.Хеш                 = ДанныеЭЛН.Хеш;
		Запись.ИсходныйXML         = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
		Запись.ДоступенИсходныйXML = Истина;
		Запись.НомерПервичногоЛН   = ДанныеЭЛН.НомерПервичногоЛН;
		Запись.НомерЗаменяемогоЛН  = ДанныеЭЛН.НомерЗаменяемогоЛН;
		
		ИменаРеквизитов = ИменаТребуемыхРеквизитовБольничного();
		Если ЗначениеЗаполнено(Запись.Больничный) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Больничный, ИменаРеквизитов);
			ЗаполнитьБольничный = ЗначенияРеквизитов.ГоловнаяОрганизация <> Запись.ГоловнаяОрганизация
				Или ЗначенияРеквизитов.ФизическоеЛицо <> Запись.ФизическоеЛицо;
		Иначе
			ЗаполнитьБольничный = Истина;
		КонецЕсли;
		Если Не ЗаполнитьБольничный Тогда
			ЗаполнитьБольничный = Не ЗначениеЗаполнено(Запись.Организация) Или Не ЗначениеЗаполнено(Запись.Сотрудник);
		КонецЕсли;
		Если Не ЗаполнитьБольничный Тогда
			ЗаполнитьБольничный = СЭДОФСС.СтраховательОрганизации(Запись.Организация) <> Страхователь
				Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Сотрудник, "ФизическоеЛицо")
					<> Запись.ФизическоеЛицо;
		КонецЕсли;
		Если ЗаполнитьБольничный Тогда
			ЗначенияРеквизитов = ЗначенияРеквизитовПоследнегоБольничного(
				Запись.НомерЛисткаНетрудоспособности,
				Запись.ГоловнаяОрганизация,
				ИменаРеквизитов,
				Неопределено);
			ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов, ПроверятьСНИЛСФизлица);
		КонецЕсли;
		
		ОбновитьСведенияОЗапросеОтветеСЭДО(Запись);
		
		Запись.ПериодНетрудоспособностиНачало    = ДанныеЭЛН.ДатаНачала;
		Запись.ПериодНетрудоспособностиОкончание = ДанныеЭЛН.ДатаОкончания;
		Если Не ЗначениеЗаполнено(Запись.ДатаНачалаСобытия) Тогда
			Запись.ДатаНачалаСобытия = ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН, Запись.ГоловнаяОрганизация);
		КонецЕсли;
		Если Не Запись.БольничныйПроведен Тогда
			Запись.ПричинаНетрудоспособности = ЭЛНФСС.ПричинаНетрудоспособности(ДанныеЭЛН, Запись.ГоловнаяОрганизация);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
		
	Исключение
		ДанныеЭЛН.Успех = Ложь;
		ОтменитьЗаписьНабора(НаборЗаписей);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроиндексироватьСНИЛССообщения111(Страхователь, ИдентификаторСообщения, ДанныеЭЛН, Кэш) Экспорт
	РегистрыСведений.СНИЛСВходящихСообщенийСЭДО.ОбновитьЗапись(
		Страхователь,
		ИдентификаторСообщения,
		111,
		ДанныеЭЛН.СНИЛС,
		ЭЛНФСС.ФизическоеЛицо(ДанныеЭЛН),
		СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш),
		СокрП(ДанныеЭЛН.Фамилия + " " + ДанныеЭЛН.Имя + " " + ДанныеЭЛН.Отчество),
		ДанныеЭЛН.НомерЛН);
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// С точки зрения учета ЭЛН ключами являются № ЛН и страхователь (головная организация).
	// Заполнение реквизита ФизическоеЛицо зависит от того, есть ли проведенный больничный по данному ЭЛН.
	// Если проведенный больничный есть - ФизическоеЛицо, Сотрудник и Организация заполняются из него.
	// Если проведенного больничного нет - ФизическоеЛицо, Сотрудник и Организация заполняются по данным ЭЛН.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.СНИЛС = &НовыйСНИЛС
	|	И СведенияОбЭЛН.ФизическоеЛицо <> &ФизическоеЛицо
	|	И НЕ СведенияОбЭЛН.БольничныйПроведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОбЭЛН.СНИЛС <> &НовыйСНИЛС
	|	И НЕ СведенияОбЭЛН.БольничныйПроведен";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбЭЛН.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбЭЛН.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаВыборки.НомерЛисткаНетрудоспособности, СтрокаВыборки.ГоловнаяОрганизация);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Если Запись.СНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
				НовоеФизическоеЛицо = ФизическоеЛицо;
			Иначе
				НовоеФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли;
			Если Запись.ФизическоеЛицо <> НовоеФизическоеЛицо Тогда
				Запись.ФизическоеЛицо = НовоеФизическоеЛицо;
				Запись.Сотрудник      = Неопределено;
				Запись.Организация    = Неопределено;
				ЗаполнитьСотрудникаИОрганизацию(Запись);
			КонецЕсли;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Функция БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш)
	ЗначениеИзКэша = Кэш[Запись.НомерЛисткаНетрудоспособности];
	Если ЗначениеИзКэша <> Неопределено Тогда
		Возврат ЗначениеИзКэша;
	КонецЕсли;
	
	ИменаПолей = ИменаТребуемыхРеквизитовБольничного();
	
	ЗначенияРеквизитов = Документы.БольничныйЛист.ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(
		БольничныйОбъект,
		Запись.НомерЛисткаНетрудоспособности,
		Запись.ГоловнаяОрганизация,
		ИменаПолей);
	
	Если ЗначенияРеквизитов = Неопределено
		Или ЗначенияРеквизитов.НомерЛисткаНетрудоспособности <> Запись.НомерЛисткаНетрудоспособности
		Или ЗначенияРеквизитов.ПометкаУдаления Тогда
		// Не найден подходящий больничный.
		ЗначенияРеквизитов = ЗначенияРеквизитовПоследнегоБольничного(
			Запись.НомерЛисткаНетрудоспособности,
			Запись.ГоловнаяОрганизация,
			ИменаПолей,
			БольничныйОбъект.Ссылка);
		Если ЗначенияРеквизитов = Неопределено Тогда
			// Более подходящий больничный так и не найден.
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(Запись.НомерЛисткаНетрудоспособности, ЗначенияРеквизитов);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ЗначенияРеквизитовПоследнегоБольничного(НомеЛН, ГоловнаяОрганизация, ИменаПолей, ИсключаемыйБольничный) Экспорт
	ОтборКД = Новый ОтборКомпоновкиДанных;
	Если ЗначениеЗаполнено(ИсключаемыйБольничный) Тогда
		ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Ссылка", "<>", ИсключаемыйБольничный);
	КонецЕсли;
	ОтборПроведен = ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Проведен", "=", Истина);
	ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
		НомеЛН,
		ГоловнаяОрганизация,
		ОтборКД,
		ИменаПолей);
	Если ЗначенияРеквизитов = Неопределено Тогда
		ОтборКД.Элементы.Удалить(ОтборПроведен);
		ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
			НомеЛН,
			ГоловнаяОрганизация,
			ОтборКД,
			ИменаПолей);
	КонецЕсли;
	Возврат ЗначенияРеквизитов;
КонецФункции

#КонецОбласти


#КонецЕсли