#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Команда = Метаданные.РегистрыСведений.СогласияНаУведомленияОбЭЛН.Команды.СогласияНаУведомленияОбЭЛН;
	НавигационнаяСсылка = "e1cib/command/" + Команда.ПолноеИмя();
	Заголовок = Команда.Представление();
	Элементы.ГруппаДатаУстаревания.Видимость = СЭДОФССРасширенный.ИспользоватьПроактивныеВыплаты();
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
	КонецЕсли;
	
	ДоступенОбменЧерезСЭДО = СЭДОФСС.ДоступенОбменЧерезСЭДО();
	
	Элементы.ВключитьУведомленияОбЭЛН.Видимость = ДоступенОбменЧерезСЭДО;
	Элементы.ОтключитьУведомленияОбЭЛН.Видимость = ДоступенОбменЧерезСЭДО;
	
	СписокВыбора = Элементы.ФильтрПоСостояниюСогласия.СписокВыбора;
	СписокВыбора.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.ПустаяСсылка(), НСтр("ru = 'Не оформлено';
																								|en = 'Not registered'"));
	СписокВыбора.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.ОжидаетПодписания);
	СписокВыбора.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	СписокВыбора.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.НеПланируетсяПодписывать);
	СписокВыбора.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Отозвано);
	
	СписокВыбора = Элементы.ФильтрПоСостояниюПодписки.СписокВыбора;
	СписокВыбора.Добавить(1, НСтр("ru = 'Включена';
									|en = 'Enabled'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Отключена';
									|en = 'Disabled'"));
	СписокВыбора.Добавить(3, НСтр("ru = 'В процессе включения (ожидается ответ ФСС)';
									|en = 'In the process of enabling (waiting for SSF response)'"));
	СписокВыбора.Добавить(4, НСтр("ru = 'В процессе отключения (ожидается ответ ФСС)';
									|en = 'In the process of disabling (waiting for SSF response)'"));
	СписокВыбора.Добавить(5, НСтр("ru = 'Возникла ошибка';
									|en = 'Error occurred'"));
	
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеПодписки0", "");
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Список.Параметры.УстановитьЗначениеПараметра("СостояниеПодписки" + Формат(ЭлементСписка.Значение, "ЧН=; ЧГ="), ЭлементСписка.Представление);
	КонецЦикла;
	
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101');
	Список.Параметры.УстановитьЗначениеПараметра("МаксимальнаяДата", НачалоДня(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.СогласиеНаУведомлениеОбЭЛН");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодключаемыеКомандыСогласий;
	ПараметрыРазмещения.ПрефиксГрупп = "Согласия";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Перенос подключаемых команд в "Еще", а кнопки печати - в группу с быстрыми командами.
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Команда = ТаблицаКоманд.Найти("СогласиеНаУведомлениеОбЭЛН", "Идентификатор");
	Если Команда <> Неопределено Тогда
		Кнопка = Элементы[Команда.ИмяВФорме];
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
		Элементы.Переместить(Кнопка, Элементы.ГруппаСогласие, Элементы.ПодменюЕщеСогласий);
	КонецЕсли;
	
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ЗначениеЗаполнено(Организация) И Организация <> Настройки["Организация"] Тогда
		Настройки.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если Настройки.Количество() > 0 Тогда
		ОбновитьСписокНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СЭДОФССРасширенныйКлиент.ЭтоСобытиеЗаписиКадровогоПриказа(ИмяСобытия) Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 5, Истина);
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПолученияУведомленийОбЭЛН"
		Или СЭДОФССРасширенныйКлиент.ТребуетсяОбновитьНапоминаниеОбОтключенииПодпискиНаЭЛН(ИмяСобытия) Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоСостояниюСогласияПриИзменении(Элемент)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоСостояниюПодпискиПриИзменении(Элемент)
	ОбновитьСписокНаСервере();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, Сотрудник, ПолеФормы, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Элементы.Список.ДанныеСтроки(Сотрудник);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если ПолеФормы = Элементы.СписокСогласие
		Или ПолеФормы = Элементы.СписокДатаСогласия
		Или ПолеФормы = Элементы.СостояниеСогласия
		Или ПолеФормы = Элементы.СписокСотрудник Тогда
		
		СЭДОФССРасширенныйКлиент.ОткрытьСогласие(СтрокаТаблицы.Согласие, Организация, Сотрудник);
		
	ИначеЕсли ПолеФормы = Элементы.СписокДатаОтзываСогласия
		Или ПолеФормы = Элементы.СписокОснованиеОтзываСогласия Тогда
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеОтзываСогласия) Тогда
			ПоказатьЗначение(, СтрокаТаблицы.ОснованиеОтзываСогласия);
		КонецЕсли;
		
	ИначеЕсли (ПолеФормы = Элементы.СостояниеПодписки
			Или ПолеФормы = Элементы.ИндексКартинкиСостоянияПодписки)
		И СтрокаТаблицы.ИндексКартинкиСостоянияПодписки = 5 Тогда
		
		Если СтрокаТаблицы.БудетДействовать Тогда
			ЗаголовокДиалога = НСтр("ru = 'Ошибка при включении подписки на ЭЛН';
									|en = 'Error when enabling subscription to ESLR'");
		Иначе
			ЗаголовокДиалога = НСтр("ru = 'Ошибка при отключении подписки на ЭЛН';
									|en = 'Error when disabling subscription to ESLR'");
		КонецЕсли;
		ИнформированиеПользователяКлиент.ПоказатьПодробности(
			СтрокаТаблицы.ТекстОшибкиПодписки,
			ЗаголовокДиалога,
			БиблиотекаКартинок.Предупреждение32);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСогласие(Команда)
	Сотрудники = ВыделенныеСотрудники();
	Если Сотрудники.Количество = 0 Тогда
		Возврат;
	ИначеЕсли Сотрудники.Количество = 1 Тогда
		ОткрытьСогласие(Сотрудники.Массив[0]);
	Иначе
		МассивСогласий = СоздатьСогласия(Организация, Страхователь, Сотрудники.Массив);
		ОповеститьОбИзменении(Тип("ДокументСсылка.СогласиеНаУведомлениеОбЭЛН"));
		Оповестить("Запись_СогласиеНаУведомлениеОбЭЛН");
		Отбор = Новый Структура("Ссылка", МассивСогласий);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Документ.СогласиеНаУведомлениеОбЭЛН.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПодписалСогласие(Команда)
	Сотрудники = ВыделенныеСотрудники();
	Если Сотрудники.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	КоличествоПроведено = ПровестиСогласия(Организация, Страхователь, Сотрудники.Массив, Истина);
	Если КоличествоПроведено = 0 Тогда
		ЗаголовокОповещения = "";
		ТекстОповещения = НСтр("ru = 'Согласия выбранных сотрудников не требуют подписания (не созданы, уже подписаны или отозваны)';
								|en = 'Consents of the selected employees do not require signing (not created, already signed or revoked)'");
		КартинкаОповещения = БиблиотекаКартинок.Информация32;
	ИначеЕсли Сотрудники.Количество = КоличествоПроведено Тогда
		ЗаголовокОповещения = "";
		ТекстОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Сотрудник подписал %1 согласие (проведен %1 документ);;Сотрудники подписали %1 согласия (проведено %1 документа);Сотрудники подписали %1 согласий (проведено %1 документов);';
				|en = ';The employee has signed %1 consent (%1 document posted);;Employees have signed %1 consents (%1 documents posted);Employees have signed %1 consents (%1 documents posted);'"), 
			КоличествоПроведено);
		КартинкаОповещения = БиблиотекаКартинок.Успешно32;
	Иначе
		КоличествоНепроведено = Сотрудники.Количество - КоличествоПроведено;
		ЗаголовокОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Подписано %1 согласие (проведен %1 документ) из [Всего];;Подписано %2 согласия (проведено %1 документа) из [Всего];Подписано %1 согласий (проведено %1 документов) из [Всего];';
				|en = ';%1 consent signed (%1 document posted) of [Всего];;%2 consents signed (%1 documents posted) of [Всего];%1 consents (%1 documents posted) of [Всего];'"), 
			КоличествоПроведено);
		ЗаголовокОповещения = СтрЗаменить(ЗаголовокОповещения, "[Всего]", Сотрудники.Количество);
		ТекстОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 согласие не требует подписания (не создано, уже подписано или отозвано);;%1 согласия не требуют подписания (не созданы, уже подписаны или отозваны);%1 согласий не требуют подписания (не созданы, уже подписаны или отозваны);';
				|en = ';%1 consent does not require signing (not created, already signed or revoked);;%1 consents do not require signing (not created, already signed or revoked);%1 consents do not require signing (not created, already signed or revoked);'"), 
			КоличествоНепроведено);
		КартинкаОповещения = БиблиотекаКартинок.Информация32;
	КонецЕсли;
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения, КартинкаОповещения);
	Если КоличествоПроведено > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СогласиеНаУведомлениеОбЭЛН"));
		Оповестить("Запись_СогласиеНаУведомлениеОбЭЛН");
		
		Если ДоступенОбменЧерезСЭДО Тогда
			ТекстВопроса = ?(ЗаголовокОповещения = "", "", ЗаголовокОповещения + "." + Символы.ПС)
				+ ТекстОповещения + "." + Символы.ПС + Символы.ПС;
			Если КоличествоПроведено = 1 Тогда
				ЗаголовокВопроса = НСтр("ru = 'Включение подписки на ЭЛН после подписания согласия';
										|en = 'Enabling a subscription to ESLR after consent signing'");
				ТекстВопроса     = ТекстВопроса + СтрШаблон(
					НСтр("ru = 'Включить подписку %1 на получение сообщений ФСС об изменении состояний ЭЛН сотрудника?';
						|en = 'Do you wish to enable subscription %1 to receive SSF messages on employee ESLR status changes?'"),
					Организация);
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Включить подписку';
															|en = 'Enable subscription'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не включать';
																|en = 'Do not add'"));
			Иначе
				ЗаголовокВопроса = НСтр("ru = 'Включение подписок на ЭЛН после подписания согласий';
										|en = 'Enabling subscriptions to ESLR after consent signing'");
				ТекстВопроса     = ТекстВопроса + СтрШаблон(
					НСтр("ru = 'Включить подписки %1 на получение сообщений ФСС об изменении состояний ЭЛН сотрудников (%2)?';
						|en = 'Do you wish to enable subscriptions %1 to receive SSF messages on employees ESLR status changes (%2)?'"),
					Организация,
					КоличествоПроведено);
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Включить подписки';
															|en = 'Enable subscriptions'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не включать';
																|en = 'Do not add'"));
			КонецЕсли;
			Обработчик = Новый ОписаниеОповещения("ПослеОтветаНаВопросОВключенииПодписки", ЭтотОбъект, Сотрудники);
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНеПланируетПодписыватьСогласие(Команда)
	Сотрудники = ВыделенныеСотрудники();
	Если Сотрудники.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	КоличествоПроведено = ПровестиСогласия(Организация, Страхователь, Сотрудники.Массив, Ложь);
	Если КоличествоПроведено = 0 Тогда
		ЗаголовокОповещения = "";
		ТекстОповещения = НСтр("ru = 'Невозможно зафиксировать отказ в подписании выбранных согласий (документы не созданы или отозваны)';
								|en = 'Cannot commit the refusal to sign the selected consents (documents are not created or revoked)'");
		КартинкаОповещения = БиблиотекаКартинок.Информация32;
	ИначеЕсли Сотрудники.Количество = КоличествоПроведено Тогда
		ЗаголовокОповещения = "";
		ТекстОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Сотрудник не планирует подписывать %1 согласие (проведен %1 документ);;Сотрудники не планируют подписывать %1 согласия (проведено %1 документа);Сотрудники не планируют подписывать %1 согласий (проведено %1 документов);';
				|en = ';The employee does not plan to sign %1 consent (%1 document posted);;Employees do not plan to sign %1 consents (%1 documents posted);Employees do not plan to sign %1 consents (%1 documents posted);'"), 
			КоличествоПроведено);
		КартинкаОповещения = БиблиотекаКартинок.Успешно32;
	Иначе
		КоличествоНепроведено = Сотрудники.Количество - КоличествоПроведено;
		ЗаголовокОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Зафиксирован %1 отказ в подписании согласия (проведен %1 документ) из [Всего];;Зафиксировано %1 отказа в подписании согласия (проведено %1 документа) из [Всего];Зафиксировано %1 отказов в подписании согласий (проведено %1 документов) из [Всего];';
				|en = ';%1 refusal to sign consent is recorded (%1 document posted) of [Всего];;%1 refusals to sign consent are recorded (%1 documents posted) of [Всего];%1 refusals to sign consent are recorded (%1 documents posted) of [Всего];'"), 
			КоличествоПроведено);
		ЗаголовокОповещения = СтрЗаменить(ЗаголовокОповещения, "[Всего]", Сотрудники.Количество);
		ТекстОповещения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 согласие не требует регистрации отказа (не создано, уже подписано или отозвано);;%1 согласия не требуют регистрации отказов (не созданы, уже подписаны или отозваны);%1 согласий не требуют регистрации отказов (не созданы, уже подписаны или отозваны);';
				|en = ';%1 consent does not require dismissal recording (not created, already signed or revoked);;%1 consents do not require dismissal recording (not created, already signed or revoked);%1 consents do not require dismissal recording (not created, already signed or revoked);'"), 
			КоличествоНепроведено);
		КартинкаОповещения = БиблиотекаКартинок.Информация32;
	КонецЕсли;
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения, КартинкаОповещения);
	Если КоличествоПроведено > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СогласиеНаУведомлениеОбЭЛН"));
		Оповестить("Запись_СогласиеНаУведомлениеОбЭЛН");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОтозвалСогласие(Команда)
	Сотрудники = ВыделенныеСотрудники();
	Если Сотрудники.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НетСогласийДляОтзыва(Организация, Страхователь, Сотрудники.Массив) Тогда
		Текст = НСтр("ru = 'Согласия выбранных сотрудников не требуют отзыва (не оформлены или не проведены)';
					|en = 'Consents of the selected employees do not require revocation (not recorded or not posted)'");
		ПоказатьОповещениеПользователя(, , Текст, БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияРедактированияКомментарияКОтзывам", ЭтотОбъект, Сотрудники);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		"",
		НСтр("ru = 'Комментарий к отзыву согласия';
			|en = 'Commentary on consent revocation'"));
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеСогласие(Команда)
	Сотрудники = ВыделенныеСотрудники();
	Если Сотрудники.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСогласий = МассивСогласийДляУдаления(Организация, Страхователь, Сотрудники.Массив);
	Если МассивСогласий.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Отсутствуют согласия которые могут быть помечены на удаление';
					|en = 'There are no consents that can be marked for deletion'");
		ПоказатьОповещениеПользователя(, , Текст, БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	СЭДОФССРасширенныйКлиент.ИзменитьПометкуУдаленияСогласий(МассивСогласий, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьУведомленияОбЭЛН(Команда)
	ИзменитьПодписку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУведомленияОбЭЛН(Команда)
	ИзменитьПодписку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияОДействующихСогласиях(Команда)
	Количество = ОбновитьСведенияОДействующихСогласияхНаСервере();
	Если Количество > 0 Тогда
		Текст = СтрШаблон(НСтр("ru = 'Обновлены сведения о согласиях %1 сотрудников';
								|en = 'Updated consent details for %1 employees'"), Количество);
		ПоказатьОповещениеПользователя(, , Текст, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщенияИзФСС(Команда)
	СЭДОФССКлиент.ПолучитьСообщенияИзФСС(Организация);
КонецПроцедуры

&НаКлиенте
Процедура СогласияНаУведомлениеОбЭЛН(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/list/Документ.СогласиеНаУведомлениеОбЭЛН");
КонецПроцедуры

&НаКлиенте
Процедура ОтзывыСогласийНаУведомлениеОбЭЛН(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/list/Документ.ОтзывСогласияНаУведомлениеОбЭЛН");
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, МассивВыбранныхСогласий());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, МассивВыбранныхСогласий());
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Список

&НаКлиенте
Функция ВыделенныеСотрудники()
	Результат = Новый Структура("Количество, Массив", 0, Новый Массив);
	Если Не ЗначениеЗаполнено(Элементы.Список.ВыделенныеСтроки) Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого Сотрудник Из Элементы.Список.ВыделенныеСтроки Цикл
		Если Результат.Массив.Найти(Сотрудник) = Неопределено Тогда
			Результат.Массив.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	Результат.Количество = Результат.Массив.Количество();
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция МассивВыбранныхСогласий()
	Массив = Новый Массив;
	Если Не ЗначениеЗаполнено(Элементы.Список.ВыделенныеСтроки) Тогда
		Возврат Массив;
	КонецЕсли;
	Для Каждого Сотрудник Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Сотрудник);
		Если ДанныеСтроки <> Неопределено
			И Массив.Найти(ДанныеСтроки.Согласие) = Неопределено Тогда
			Массив.Добавить(ДанныеСтроки.Согласие);
		КонецЕсли;
	КонецЦикла;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок()
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	Страхователь = СЭДОФСС.СтраховательОрганизации(Организация);
	
	ОбновитьПараметрыСписка();
	
	Элементы.Список.Обновить();
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН.ОрганизацииПолучающиеСостоянияЭЛН());
	
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьФорму(ЭтотОбъект);
	
	ОбновитьНадписьСообщенияОжидаемыеОтФСС();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСообщенияОжидаемыеОтФСС()
	
	КоличествоОжидаемыхСообщений = РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.КоличествоОжидаемыхСообщений(Страхователь);
	Если КоличествоОжидаемыхСообщений = 0 Тогда
		Элементы.ГруппаСообщенияОжидаемыеОтФСС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСообщенияОжидаемыеОтФСС.Видимость = Истина;
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 сообщение;;%1 сообщения;%1 сообщений;';
				|en = ';%1 message;;%1 messages;%1 messages;'"), 
			КоличествоОжидаемыхСообщений);
		Элементы.НадписьСообщенияОжидаемыеОтФСС.Заголовок = СтрШаблон(
			НСтр("ru = 'Ожидается %1 ФСС об изменении состояний подписок';
				|en = 'Waiting for %1 SSF on subscription status change'"),
			ПредставлениеКоличества);
		Элементы.ПолучитьСообщенияИзФСС.Доступность = ДоступенОбменЧерезСЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСписка()
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаАктуальности", РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ДатаНачалаАктуальности());
	Список.Параметры.УстановитьЗначениеПараметра("Страхователь", Страхователь);
	
	ОтборПоСостояниюСогласия = Неопределено;
	ОтборПоСостояниюПодписки = Неопределено;
	Для Каждого ЭлементОтбораКД Из Список.Отбор.Элементы Цикл
		Если Строка(ЭлементОтбораКД.ЛевоеЗначение) = "СостояниеСогласия" Тогда
			ОтборПоСостояниюСогласия = ЭлементОтбораКД;
		ИначеЕсли Строка(ЭлементОтбораКД.ЛевоеЗначение) = "ИндексКартинкиСостоянияПодписки" Тогда
			ОтборПоСостояниюПодписки = ЭлементОтбораКД;
		КонецЕсли;
	КонецЦикла;
	
	Если ФильтрПоСостояниюСогласия <> Неопределено Тогда
		Если ОтборПоСостояниюСогласия = Неопределено Тогда
			ОтборПоСостояниюСогласия = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоСостояниюСогласия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеСогласия");
		КонецЕсли;
		ОтборПоСостояниюСогласия.Использование = Истина;
		ОтборПоСостояниюСогласия.ПравоеЗначение = ФильтрПоСостояниюСогласия;
	ИначеЕсли ОтборПоСостояниюСогласия <> Неопределено Тогда
		ОтборПоСостояниюСогласия.Использование = Ложь;
	КонецЕсли;
	
	Если ФильтрПоСостояниюПодписки <> Неопределено Тогда
		Если ОтборПоСостояниюПодписки = Неопределено Тогда
			ОтборПоСостояниюПодписки = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоСостояниюПодписки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексКартинкиСостоянияПодписки");
		КонецЕсли;
		ОтборПоСостояниюПодписки.Использование = Истина;
		Если ФильтрПоСостояниюПодписки = 2 Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(0);
			СписокЗначений.Добавить(2);
			ОтборПоСостояниюПодписки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборПоСостояниюПодписки.ПравоеЗначение = СписокЗначений;
		Иначе
			ОтборПоСостояниюПодписки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоСостояниюПодписки.ПравоеЗначение = ФильтрПоСостояниюПодписки;
		КонецЕсли;
	ИначеЕсли ОтборПоСостояниюПодписки <> Неопределено Тогда
		ОтборПоСостояниюПодписки.Использование = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Согласия

&НаКлиенте
Процедура ПослеОкончанияРедактированияКомментарияКОтзывам(Знач Комментарий, Знач Сотрудники) Экспорт
	Если Комментарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОтзыва = ОтозватьСогласия(Организация, Страхователь, Сотрудники, Комментарий);
	
	ПоказатьРезультатОперации(РезультатОтзыва);
	
	Если РезультатОтзыва.КоличествоОтозвано > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ОтзывСогласияНаУведомлениеОбЭЛН"));
		Оповестить("Запись_ОтзывСогласияНаУведомлениеОбЭЛН");
		
		Если ДоступенОбменЧерезСЭДО Тогда
			ЗаголовокВопроса = НСтр("ru = 'Отключение подписки на ЭЛН после отзыва согласия';
									|en = 'Disabling subscription to ESRL after consent revocation'");
			ТекстВопроса     = НСтр("ru = 'После отзыва согласия сотрудника
				|необходимо в течении 1 дня отключить подписку
				|на уведомления об изменении состояний ЭЛН сотрудника.';
				|en = 'After revoking the employee''s consent
				|, it is necessary to disable the subscription
				|to notifications on the employee ESLR status changes within 1 day.'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отключить подписку';
														|en = 'Disable subscription'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не отключать';
															|en = 'Do not disable'"));
			Обработчик = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОтключенииПодписки", ЭтотОбъект, Сотрудники);
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОперации(Результат)
	Если Результат.Успех Тогда
		ПоказатьОповещениеПользователя(, , Результат.Кратко, БиблиотекаКартинок.Успешно32);
	Иначе
		ИнформированиеПользователяКлиент.Предупредить(Результат.Кратко, Результат.Подробно, Результат.Заголовок);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РезультатОперации()
	Возврат Новый Структура("Успех, Заголовок, Кратко, Подробно", Ложь);
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОтключенииПодписки(Ответ, Сотрудники) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьПодписку(Ложь, Сотрудники);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОВключенииПодписки(Ответ, Сотрудники) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьПодписку(Истина, Сотрудники);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииСогласий(Ответ, Сотрудники) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КоличествоУдалено = УдалитьСогласияСотрудников(Организация, Страхователь, Сотрудники.Массив);
	Если КоличествоУдалено = 0 Тогда
		Возврат;
	КонецЕсли;
	Если КоличествоУдалено = 1 Тогда
		Текст = НСтр("ru = 'Согласие помечено на удаление';
					|en = 'Consent is marked for deletion'");
	Иначе
		Текст = СтрШаблон(НСтр("ru = 'Помечено на удаление %1 согласий';
								|en = '%1 consents are marked for deletion'"), КоличествоУдалено);
	КонецЕсли;
	ПоказатьОповещениеПользователя(, , Текст, БиблиотекаКартинок.Успешно32);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СогласиеНаУведомлениеОбЭЛН"));
	Оповестить("Запись_СогласиеНаУведомлениеОбЭЛН");
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСогласия(Знач Организация, Знач Страхователь, Знач МассивСотрудников)
	СозданныеДокументы = Новый Массив;
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.ОжидаетПодписания);
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, МассивСотрудников, Состояния);
	
	Ответственный = Пользователи.ТекущийПользователь();
	ОтветственныйЗаОбработкуПерсональныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Ответственный, "ФизическоеЛицо");
	
	СозданныеРанееСогласия = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		СозданноеРанее = СозданныеРанееСогласия.Найти(Сотрудник, "Сотрудник");
		Если СозданноеРанее <> Неопределено И ЗначениеЗаполнено(СозданноеРанее.Согласие) Тогда
			ДокументОбъект = СозданноеРанее.Согласие.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.СогласиеНаУведомлениеОбЭЛН.СоздатьДокумент();
			ДокументОбъект.Дата = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		ДокументОбъект.Страхователь  = Страхователь;
		ДокументОбъект.Организация   = Организация;
		ДокументОбъект.Сотрудник     = Сотрудник;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.ОтветственныйЗаОбработкуПерсональныхДанных = ОтветственныйЗаОбработкуПерсональныхДанных;
		ДокументОбъект.ОбновитьВторичныеДанные();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
КонецФункции

&НаСервереБезКонтекста
Функция ПровестиСогласия(Знач Организация, Знач Страхователь, Знач МассивСотрудников, Знач СотрудникПодписалСогласие)
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.ОжидаетПодписания);
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.НеПланируетсяПодписывать);
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, МассивСотрудников, Состояния);
	
	СозданныеСогласия = Запрос.Выполнить().Выгрузить();
	Для Каждого СозданноеРанее Из СозданныеСогласия Цикл
		ДокументОбъект = СозданноеРанее.Согласие.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		ДокументОбъект.СотрудникПодписалСогласие = СотрудникПодписалСогласие;
		ДокументОбъект.ОбновитьВторичныеДанные();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	Возврат СозданныеСогласия.Количество();
КонецФункции

&НаСервереБезКонтекста
Функция НетСогласийДляОтзыва(Знач Организация, Знач Страхователь, Знач МассивСотрудников)
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, МассивСотрудников, Состояния);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ" + Символы.ПС, "ВЫБРАТЬ ПЕРВЫЕ 1" + Символы.ПС);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция ОтозватьСогласия(Знач Организация, Знач Страхователь, Знач Сотрудники, Знач Комментарий)
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, Сотрудники.Массив, Состояния);
	
	Сообщения = Новый Массив;
	ЗарегистрироватьНовыеСообщенияИПривязатьИхКСотруднику(Сообщения, Неопределено);
	
	Ответственный = Пользователи.ТекущийПользователь();
	СозданныеСогласия = Запрос.Выполнить().Выгрузить();
	КоличествоОтозвано = 0;
	Для Каждого СозданноеРанее Из СозданныеСогласия Цикл
		ДокументОбъект = Документы.ОтзывСогласияНаУведомлениеОбЭЛН.СоздатьДокумент();
		ДокументОбъект.Дата          = НачалоДня(ТекущаяДатаСеанса());
		ДокументОбъект.Страхователь  = Страхователь;
		ДокументОбъект.Организация   = Организация;
		ДокументОбъект.Сотрудник     = СозданноеРанее.Сотрудник;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.Комментарий   = Комментарий;
		Отказ = Не ДокументОбъект.ПроверитьЗаполнение();
		ЗарегистрироватьНовыеСообщенияИПривязатьИхКСотруднику(Сообщения, СозданноеРанее.Сотрудник);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КоличествоОтозвано = КоличествоОтозвано + 1;
	КонецЦикла;
	
	Результат = РезультатОперации();
	Результат.Вставить("КоличествоОтозвано", КоличествоОтозвано);
	Результат.Успех = (Сотрудники.Количество = КоличествоОтозвано);
	Результат.Подробно = СтрСоединить(Сообщения, Символы.ПС);
	
	Если Результат.Успех Тогда
		Если КоличествоОтозвано = 1 Тогда
			Результат.Кратко = НСтр("ru = 'Согласие отозвано';
									|en = 'Consent is revoked'");
		Иначе
			Результат.Кратко = СтрШаблон(НСтр("ru = 'Отозвано %1 согласий';
												|en = '%1 consents revoked'"), КоличествоОтозвано);
		КонецЕсли;
	Иначе
		Если КоличествоОтозвано = 0 Тогда
			Результат.Заголовок = СтрШаблон(НСтр("ru = 'Согласия %1 сотрудников не отозваны';
												|en = 'Consents from %1 employees are not revoked'"), Сотрудники.Количество);
			Результат.Кратко = НСтр("ru = 'Согласия выбранных сотрудников не требуют отзыва (не оформлены или не проведены)';
									|en = 'Consents of the selected employees do not require revocation (not recorded or not posted)'");
		Иначе
			КоличествоНеОтозвано = Сотрудники.Количество - КоличествоОтозвано;
			Результат.Заголовок = СтрШаблон(НСтр("ru = 'Отозвано %1 согласий %2 сотрудников';
												|en = 'Revoked %1 consents from %2 employees'"), КоличествоОтозвано, Сотрудники.Количество);
			Результат.Кратко = СтрШаблон(НСтр("ru = '%1 согласий не требуют отзыва (не оформлены или не проведены)';
												|en = '%1 consents do not require revocation (not recorded or not posted)'"), КоличествоНеОтозвано);
		КонецЕсли;
		Результат.Подробно = Результат.Заголовок + ":" + Символы.ПС + Символы.ПС + Результат.Подробно;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗарегистрироватьНовыеСообщенияИПривязатьИхКСотруднику(Сообщения, Сотрудник)
	СообщенияСотрудника = ПолучитьСообщенияПользователю(Истина);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Если Сообщения.Количество() > 0 Тогда
			Сообщения.Добавить("");
		КонецЕсли;
		Сообщения.Добавить(Строка(Сотрудник) + ":");
	КонецЕсли;
	
	Для Каждого Сообщение Из СообщенияСотрудника Цикл
		Сообщения.Добавить(Сообщение.Текст);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСогласийДляУдаления(Знач Организация, Знач Страхователь, Знач МассивСотрудников)
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, МассивСотрудников, Неопределено);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ПоследнийЗапрос.ТаблицаДляПомещения = "ВТСогласия";
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
	"ВЫБРАТЬ
	|	СогласиеНаУведомлениеОбЭЛН.Ссылка КАК Ссылка,
	|	СогласиеНаУведомлениеОбЭЛН.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СогласиеНаУведомлениеОбЭЛН КАК СогласиеНаУведомлениеОбЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСогласия КАК ВТСогласия
	|		ПО СогласиеНаУведомлениеОбЭЛН.Ссылка = ВТСогласия.Согласие
	|ГДЕ
	|	НЕ СогласиеНаУведомлениеОбЭЛН.ПометкаУдаления";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьСогласияСотрудников(Знач Организация, Знач Страхователь, Знач МассивСотрудников)
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.ОжидаетПодписания);
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Подписано);
	Состояния.Добавить(Перечисления.СостоянияСогласийНаУведомленияОбЭЛН.Отозвано);
	Запрос = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ЗапросСФильтрами(Страхователь, МассивСотрудников, Состояния);
	
	СозданныеРанееСогласия = Запрос.Выполнить().Выгрузить();
	Количество = 0;
	
	Для Каждого СозданноеРанее Из СозданныеРанееСогласия Цикл
		Если Не ЗначениеЗаполнено(СозданноеРанее.Согласие) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СозданноеРанее.Согласие.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
КонецФункции

&НаСервере
Функция ОбновитьСведенияОДействующихСогласияхНаСервере()
	Количество = РегистрыСведений.СогласияНаУведомленияОбЭЛН.Обновить(Организация, Неопределено);
	ОбновитьСписокНаСервере();
	Возврат Количество;
КонецФункции

&НаКлиенте
Процедура ОткрытьСогласие(Сотрудник)
	СтрокаТаблицы = Элементы.Список.ДанныеСтроки(Сотрудник);
	Согласие = ?(СтрокаТаблицы = Неопределено, Неопределено, СтрокаТаблицы.Согласие);
	СЭДОФССРасширенныйКлиент.ОткрытьСогласие(СтрокаТаблицы.Согласие, Организация, Сотрудник);
КонецПроцедуры

#КонецОбласти

#Область Подписки

&НаКлиенте
Процедура ИзменитьПодписку(ВключитьПодписку, Сотрудники = Неопределено)
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ВыделенныеСотрудники();
		Если Сотрудники.Количество = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СЭДОФССРасширенныйКлиент.ИзменитьПодписку(ВключитьПодписку, Сотрудники.Массив);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
