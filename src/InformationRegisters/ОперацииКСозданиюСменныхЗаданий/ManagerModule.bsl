#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Рассчитывает и заполняет регистр.
//
// Параметры:
//  Этапы - Массив из ДокументСсылка.ЭтапПроизводства2_2, ДокументСсылка.ЭтапПроизводства2_2 - документы по которым
//    необходимо выполнить расчет.
//  СменныеЗадания - Массив из ДокументСсылка.СменноеЗадание, ДокументСсылка.СменноеЗадание - сменное задание в
//    контексте которого  выполняется действие. Если не передано (либо передана пустая ссылка), то считается что
//    расчет связан с пересчетом неназначенной части (базы) по данному этапу. Используется для блокировки данных.
//
Процедура РассчитатьОперации(Этапы, СменныеЗадания = Неопределено) Экспорт
	
	Если СменныеЗадания = Неопределено Тогда
		МассивЗаданий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документы.СменноеЗадание.ПустаяСсылка());
	Иначе
		МассивЗаданий = ?(ТипЗнч(СменныеЗадания) = Тип("Массив"),
			СменныеЗадания,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СменныеЗадания));
		Если МассивЗаданий.Найти(Документы.СменноеЗадание.ПустаяСсылка()) = Неопределено Тогда
			МассивЗаданий.Добавить(Документы.СменноеЗадание.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	МассивЭтапов = ?(ТипЗнч(Этапы) = Тип("Массив"), Этапы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Этапы));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("СменноеЗадание", Новый ОписаниеТипов("ДокументСсылка.СменноеЗадание"));
	ИсточникБлокировки.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	
	Для каждого Задание Из МассивЗаданий Цикл
		Для каждого Этап Из МассивЭтапов Цикл
			НоваяСтрока = ИсточникБлокировки.Добавить();
			НоваяСтрока.СменноеЗадание = Задание;
			НоваяСтрока.Этап = Этап;
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СменноеЗадание", "СменноеЗадание");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		
		БлокировкаДанных.Заблокировать();
		
		Для каждого Этап Из МассивЭтапов Цикл
			Операции = РассчитатьДанныеРегистра(Этап);
			
			Если Операции.Количество() = 0 Тогда
				Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
				Набор.Отбор.СменноеЗадание.Установить(Документы.СменноеЗадание.ПустаяСсылка());
				Набор.Отбор.Этап.Установить(Этап);
				Набор.ДополнительныеСвойства.Вставить(КлючНеКонтролироватьДанныеПриЗаписи());
				Набор.Записать();
			Иначе
				Операции.Сортировать("СменноеЗадание");
				
				СменноеЗадание = Операции[0].СменноеЗадание;
				Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
				
				Для каждого Операция Из Операции Цикл
					Если Операция.СменноеЗадание <> СменноеЗадание Тогда
						Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
						Набор.Отбор.Этап.Установить(Этап);
						Набор.ДополнительныеСвойства.Вставить(КлючНеКонтролироватьДанныеПриЗаписи());
						Набор.Записать();
						
						СменноеЗадание = Операция.СменноеЗадание;
						Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
					КонецЕсли;
					
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Операция);
				КонецЦикла;
				
				Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
				Набор.Отбор.Этап.Установить(Этап);
				Набор.ДополнительныеСвойства.Вставить(КлючНеКонтролироватьДанныеПриЗаписи());
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось рассчитать операции к созданию сменных заданий';
								|en = 'Cannot calculate operations to create shift tasks'");
		
	КонецПопытки;
	
КонецПроцедуры

// Назначает операции исполнителям, рабочим центрам, видам РЦ.
//
// Параметры:
//  КлючиОпераций - Массив из РегистрСведенийКлючЗаписи.ОперацииКСозданиюСменныхЗаданий
//  Параметры - Структура - параметры назначения (состав см. ПараметрыНазначенияОпераций).
//
Процедура НазначитьОперации(КлючиОпераций, Параметры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Порядок = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Операции = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
		Для каждого Ключ Из КлючиОпераций Цикл
			НоваяСтрока = Операции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Ключ);
			НоваяСтрока.Порядок = Порядок;
			
			Порядок = Порядок + 1;
		КонецЦикла;
		
		ИсточникБлокировки = Операции.Скопировать(, "СменноеЗадание, Этап");
		ИсточникБлокировки.Свернуть("СменноеЗадание, Этап");
		Для каждого Этап Из ИсточникБлокировки.ВыгрузитьКолонку("Этап") Цикл
			НоваяСтрока = ИсточникБлокировки.Добавить();
			НоваяСтрока.СменноеЗадание = Параметры.Измерения.СменноеЗадание;
			НоваяСтрока.Этап = Этап;
		КонецЦикла;
		
		БлокировкаДанных = Новый БлокировкаДанных;
			
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СменноеЗадание", "СменноеЗадание");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		
		БлокировкаДанных.Заблокировать();
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТОперацииНазначение(МенеджерВременныхТаблиц, Операции, Параметры);
		
		ИзменитьОперации(МенеджерВременныхТаблиц);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось назначить операции';
								|en = 'Cannot assign operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет операции из регистра по заданным ключам записей.
//
// Параметры:
//  КлючиОпераций - Массив - массив значений РегистрСведенийКлючЗаписи.
//
Процедура УдалитьОперацииПоКлючам(КлючиОпераций) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Операции = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		Для каждого Ключ Из КлючиОпераций Цикл
			ЗаполнитьЗначенияСвойств(Операции.Добавить(), Ключ);
		КонецЦикла;
		
		БлокировкаДанных = Новый БлокировкаДанных;
			
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Операции;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СменноеЗадание", "СменноеЗадание");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		
		БлокировкаДанных.Заблокировать();
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТОперацииУдаление(МенеджерВременныхТаблиц, Операции);
		
		ИзменитьОперации(МенеджерВременныхТаблиц);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось удалить операции';
								|en = 'Cannot delete operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет операции, принадлежащие заданному сменному заданию.
//
// Параметры:
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - сменное задание.
//
Процедура УдалитьОперацииЗадания(СменноеЗадание) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
			
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОперацииКСозданиюСменныхЗаданий.Этап КАК Этап
			|ИЗ
			|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
			|ГДЕ
			|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = &СменноеЗадание");
		Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
		Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
		Набор.Записать();
		
		ПараметрыОбработкиЭтапа = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
		ПараметрыОбработкиЭтапа.ОбновитьСостояние = Истина;
	
		Пока Выборка.Следующий() Цикл
			
			РассчитатьОперации(Выборка.Этап, СменноеЗадание);
			
			РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Выборка.Этап, ПараметрыОбработкиЭтапа);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось удалить операции';
								|en = 'Cannot delete operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Создает документы ПроизводственнаяОперация2_2 по данным регистра и удаляет соответствующие записи.
//
// Параметры:
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - задание, операции которого необходимо создать.
//  СтатусДокументов - ПеречислениеСсылка.СтатусыПроизводственныхОпераций - статус создаваемых документов.
//
Процедура РегистрВДокументы(СменноеЗадание, СтатусДокументов) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
			
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		ДанныеЗаполненияМассив = ДанныеЗаполненияОпераций(СменноеЗадание);
		
		Если ДанныеЗаполненияМассив.Количество() = 0 Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Этапы = Новый Массив;
		ОтборЭтап = Новый Структура("Этап");
		БлокировкаДанных = Новый БлокировкаДанных;
		
		// Создание Производственных операций
		Для каждого ДанныеЗаполнения Из ДанныеЗаполненияМассив Цикл
			
			ДанныеЗаполнения.Статус = СтатусДокументов;
			
			ОперацияОбъект = Документы.ПроизводственнаяОперация2_2.СоздатьДокумент();
			ОперацияОбъект.Заполнить(ДанныеЗаполнения);
			
			Если СтатусДокументов = Перечисления.СтатусыПроизводственныхОпераций.Выполнена
				И НЕ ОперацияОбъект.ПроверитьЗаполнение() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'При создании производственной операции ""%1"" возникли ошибки';
									|en = 'Errors occurred when creating routing operation ""%1""'"),
						ОперацияОбъект.Наименование));
				
				ВызватьИсключение НСтр("ru = 'Ошибка создания производственной операции';
										|en = 'An error occurred when creating routing operation'");
				
			КонецЕсли;
			
			ОперацияОбъект.УстановитьРежимГрупповойОбработки();
			ОперацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если Этапы.Найти(ДанныеЗаполнения.КлючОперации.Этап) = Неопределено Тогда
				Этапы.Добавить(ДанныеЗаполнения.КлючОперации.Этап);
				ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДанныеЗаполнения.Распоряжение);
				ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЗаполнения.ПартияПроизводства);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеЗаполнения.КлючОперации.Этап);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			КонецЕсли;
			
		КонецЦикла;
		
		// Очистка регистра Операции к созданию сменных заданий
		Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
		Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
		Набор.Записать();
		
		// Пересчет связанных данных
		Действия = Неопределено;
		Если СтатусДокументов = Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
			Действия = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
			Действия.ОбновитьСостояние = Истина;
			Действия.ЗаполнитьПоОперациям = Истина;
		КонецЕсли;
		
		БлокировкаДанных.Заблокировать();
		ДанныеЭтапов = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этапы);
		
		Для каждого ДанныеЗаполнения Из ДанныеЗаполненияМассив Цикл
			
			Этап = ДанныеЗаполнения.КлючОперации.Этап;
			ИндексЭлемента = Этапы.Найти(Этап);
			Если ИндексЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеЭтапа = ДанныеЭтапов.Получить(Этап);
			Если ДанныеЗаполнения.Свойство("ДанныеСпецификации") Тогда
				ОтборЭтап.Этап = ДанныеЭтапа.ЭтапСпецификации;
				ДанныеЭтапа.Вставить("Операции", ДанныеЗаполнения.ДанныеСпецификации.Операции.Скопировать(ОтборЭтап));
			КонецЕсли;
			
			РегистрыСведений.ОчередьПроизводственныхОпераций.РассчитатьОчередьПоДаннымЭтапа(Этап, ДанныеЭтапа, Ложь);
			
			Если СтатусДокументов = Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
				РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Этап, Действия);
			КонецЕсли;
			
			Этапы.Удалить(ИндексЭлемента);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось создать производственные операции';
								|en = 'Cannot create routing operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет регистр по данным документов ПроизводственнаяОперация2_2 и удаляет документы.
//
// Параметры:
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - задание, операции которого необходимо удалить.
//
Процедура ДокументыВРегистр(СменноеЗадание) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
			
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Операции.Подразделение         КАК Подразделение,
			|	Операции.СменноеЗадание        КАК СменноеЗадание,
			|	Операции.Этап                  КАК Этап,
			|	Операции.Операция              КАК Операция,
			|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
			|	ВЫБОР
			|		КОГДА Операции.Исполнитель В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка))
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		ИНАЧЕ Операции.Исполнитель
			|	КОНЕЦ                          КАК Исполнитель,
			|	Операции.РабочийЦентр          КАК РабочийЦентр,
			|	Операции.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
			|	СУММА(ВЫБОР
			|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
			|				ТОГДА Операции.КоличествоФакт
			|			ИНАЧЕ Операции.Количество - Операции.КоличествоОтменено
			|		КОНЕЦ)                     КАК Количество,
			|	Очередь.ВремяШтучное           КАК ВремяШтучное,
			|	Очередь.ВремяПЗ                КАК ВремяПЗ,
			|	Очередь.ВремяЕдИзм             КАК ВремяЕдИзм,
			|	Операции.Этап.Распоряжение     КАК Распоряжение,
			|	Очередь.НомерОперации          КАК НомерОперации,
			|	Очередь.НомерСледующейОперации КАК НомерСледующейОперации
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|		ПО Операции.Подразделение = Очередь.Подразделение
			|			И Операции.Этап = Очередь.Этап
			|			И Операции.Операция = Очередь.Операция
			|			И Операции.ИдентификаторОперации = Очередь.ИдентификаторОперации
			|ГДЕ
			|	Операции.СменноеЗадание = &СменноеЗадание
			|	И Операции.Проведен
			|	И Операции.НаОснованииНСИ
			|
			|СГРУППИРОВАТЬ ПО
			|	Очередь.ВремяШтучное,
			|	Очередь.ВремяПЗ,
			|	Очередь.ВремяЕдИзм,
			|	Операции.Подразделение,
			|	Операции.Этап,
			|	Операции.Операция,
			|	Операции.ИдентификаторОперации,
			|	Операции.СменноеЗадание,
			|	ВЫБОР
			|		КОГДА Операции.Исполнитель В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка))
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|		ИНАЧЕ Операции.Исполнитель
			|	КОНЕЦ,
			|	Операции.РабочийЦентр,
			|	Операции.ВидРабочегоЦентра,
			|	Операции.Этап.Распоряжение,
			|	Очередь.НомерОперации,
			|	Очередь.НомерСледующейОперации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Операции.Ссылка                  КАК Ссылка,
			|	Операции.Этап                    КАК Этап,
			|	Операции.Этап.Распоряжение       КАК Распоряжение,
			|	Операции.Этап.ПартияПроизводства КАК ПартияПроизводства
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|ГДЕ
			|	Операции.СменноеЗадание = &СменноеЗадание");
		Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если МассивРезультатов[1].Пустой() Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Удаление производственных операций
		Этапы = Новый Массив;
		БлокировкаДанных = Новый БлокировкаДанных();
		Выборка = МассивРезультатов[1].Выбрать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Пока Выборка.Следующий() Цикл
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ПроизводственнаяОперация2_2
			ОперацияОбъект.Удалить();
			
			Если Этапы.Найти(Выборка.Этап) = Неопределено Тогда
				Этапы.Добавить(Выборка.Этап);
				ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
				ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", Выборка.ПартияПроизводства);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Этап);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		БлокировкаДанных.Заблокировать();
		ДанныеЭтапов = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этапы);
		
		// Пересчет связанных данных
		Для каждого Этап Из Этапы Цикл
			
			РегистрыСведений.ОчередьПроизводственныхОпераций.РассчитатьОчередьПоДаннымЭтапа(Этап, ДанныеЭтапов.Получить(Этап), Ложь);
			
		КонецЦикла;
		
		// Запись регистра
		Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
		Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
		
		Порядок = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Выборка = МассивРезультатов[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Порядок = Порядок;
			
			Порядок = Порядок + 1;
			
		КонецЦикла;
		
		Набор.Записать();
		
		// Пересчет регистра
		РассчитатьОперации(Этапы, СменноеЗадание);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось загрузить данные из производственных операций';
								|en = 'Cannot import data from routing operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Конструктор структуры, которая используется для назначения операций.
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* Измерения - Структура - разрезы назначения:
//			** СменноеЗадание - ДокументСсылка.СменноеЗадание.
//			** Исполнитель - СправочникСсылка.Бригады, СправочникСсылка.ФизическиеЛица - исполнитель.
//			** РабочийЦентр - СправочникСсылка.РабочиеЦентры.
//			** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров.
//		* Количество - Число, Неопределено - назначаемое количество.
//			Если передано Неопределено, то операция назначается в полном объеме.
//		* НазначитьЧасть - Булево - имеет смысл только если передано Количество.
//			Истина - изменяемые операции будут уменьшены на Количество. Например
//			при назначении части операции, которая не была назначена ранее, следует передать Истина.
//			В этом случае часть операции будет назачена, а оставшаяся часть останется неназаченной.
//			Ложь - изменяемые операции будут уменьшены на полное количество. Например
//			если изменяется ранее назначенная операция, в количестве меньшем чем была назначены первоначально,
//			то следует вычесть полное количество по старому набору измерений, и добавить новую запись
//			с заданным количеством. Соответственно параметр в этом случае должен иметь значение Ложь.
//
Функция ПараметрыНазначенияОпераций() Экспорт
	
	Результат = Новый Структура;
	
	Измерения = Новый Структура;
	Измерения.Вставить("СменноеЗадание", Неопределено);
	Измерения.Вставить("Исполнитель", Неопределено);
	Измерения.Вставить("РабочийЦентр", Неопределено);
	Измерения.Вставить("ВидРабочегоЦентра", Неопределено);
	
	Результат.Вставить("Измерения", Измерения);
	Результат.Вставить("Количество", Неопределено);
	
	Результат.Вставить("НазначитьЧасть", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Удаляет из сменного задания операции у которых нарушен порядок назначения.
//
// Параметры:
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - сменное задание.
//
Процедура ИсключитьОперацииСНарушениемПорядкаНазначения(СменноеЗадание) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Операции.*
			|ИЗ
			|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
			|ГДЕ
			|	Операции.СменноеЗадание = &СменноеЗадание
			|	И НЕ Операции.НарушенПорядокНазначения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Операции.Этап КАК Этап
			|ИЗ
			|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
			|ГДЕ
			|	Операции.СменноеЗадание = &СменноеЗадание
			|	И Операции.НарушенПорядокНазначения");
		Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
		Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
		Набор.Загрузить(МассивРезультатов[0].Выгрузить());
		Набор.ДополнительныеСвойства.Вставить(КлючНеКонтролироватьДанныеПриЗаписи());
		Набор.Записать();
		
		РассчитатьОперации(МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Этап"), СменноеЗадание);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось исключить операции';
								|en = 'Cannot exclude operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Корректирует количество у операций с нарушением порядка назначения в случае если им доступно
// частичное назначение. В противном случае операции удаляются из задания.
//
// Параметры:
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - сменное задание.
//
Процедура СкорректироватьОперацииСНарушениемПорядкаНазначения(СменноеЗадание) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(ТекстЗапросаКорректировкаОпераций());
		Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
		
		МассивРезультатов = Запрос.ВыполнитьПакет(); 
		
		Связи = МассивРезультатов[1].Выгрузить();
		Связи.Индексы.Добавить("ИдентификаторОперации");
		Связи.Индексы.Добавить("ИдентификаторОперацииПредш");
		
		СтПоискаИд = Новый Структура("ИдентификаторОперации");
		СтПоискаИдПредш = Новый Структура("ИдентификаторОперацииПредш");
		
		Выборка = МассивРезультатов[2].Выбрать();
		
		Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
		Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
		Набор.Загрузить(МассивРезультатов[3].Выгрузить());
		
		ЭтапыПересчет = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Нормативы = Связи.Найти(Выборка.ИдентификаторОперации, "ИдентификаторОперацииПредш");
			
			Коэф = Неопределено;
			
			СтПоискаИд.ИдентификаторОперации = Выборка.ИдентификаторОперации;
			Для каждого Строка Из Связи.НайтиСтроки(СтПоискаИд) Цикл
				
				Если Строка.ИдентификаторОперации = Строка.ИдентификаторОперацииПредш Тогда
					Продолжить;
				КонецЕсли;
				
				Коэф = ?(Коэф = Неопределено ИЛИ Строка.Количество/Строка.КоличествоВсего < Коэф,
					Строка.Количество/Строка.КоличествоВсего,
					Коэф);
				
				Если Коэф = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ДоступноКНазначению = Нормативы.КоличествоВсего*Коэф;
			
			Если ДоступноКНазначению > Нормативы.Количество Тогда
				
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.НарушенПорядокНазначения = Ложь;
				
				Если Нормативы.Количество + Запись.Количество > ДоступноКНазначению Тогда
					Запись.Количество = ДоступноКНазначению - Нормативы.Количество;
				КонецЕсли;
				
				СтПоискаИдПредш.ИдентификаторОперацииПредш = Выборка.ИдентификаторОперации;
				Для каждого Строка Из Связи.НайтиСтроки(СтПоискаИдПредш) Цикл
					Строка.Количество = Строка.Количество + Запись.Количество;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЭтапыПересчет.Найти(Выборка.Этап) = Неопределено Тогда
				
				ЭтапыПересчет.Добавить(Выборка.Этап);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить(КлючНеКонтролироватьДанныеПриЗаписи());
		Набор.Записать();
		
		Если ЭтапыПересчет.ВГраница() <> -1 Тогда
			РассчитатьОперации(ЭтапыПересчет, СменноеЗадание);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось скорректировать операции';
								|en = 'Cannot adjust operations'");
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет операции в сменное задание. Может быть использована только для опеарций, не назначенных другому заданию.
// Если статус задания "Формируется", то происходит назначение операций. Если статус задания "Сформировано", то создаются
// документы "Производственная опеарция".
//
// Параметры:
//  Операции - ТаблицаЗначений - данные операций:
//		* КлючОперации - РегистрСведенийКлючЗаписи.ОперацииКСозданиюСменныхЗаданий.
//		* Исполнитель - СправочникСсылка.Бригады, СправочникСсылка.ФизическиеЛица - исполнитель.
//		* ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров.
//		* РабочийЦентр - СправочникСсылка.РабочиеЦентры.
//		* Количество - Число.
//  СменноеЗадание - ДокументСсылка.СменноеЗадание - сменное задание.
//
Процедура ДобавитьВЗадание(Операции, СменноеЗадание) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", СменноеЗадание);
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.СменноеЗадание");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СменноеЗадание);
		
		БлокировкаДанных.Заблокировать();
		
		Этапы = Новый Массив;
		ОтборЭтап = Новый Структура("Этап");
		РевизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СменноеЗадание, "Статус, Участок");
		
		Если РевизитыЗадания.Статус = Перечисления.СтатусыСменныхЗаданий.Формируется Тогда
			
			// Запись в регистр
			
			Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
			Набор.Отбор.СменноеЗадание.Установить(СменноеЗадание);
			
			Порядок = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТаблицаОпераций = Набор.ВыгрузитьКолонки();
			
			Для каждого Операция Из Операции Цикл
				
				НоваяСтрока = ТаблицаОпераций.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция.КлючОперации);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция,
					"Исполнитель, ВидРабочегоЦентра, РабочийЦентр, Количество");
				
				НоваяСтрока.СменноеЗадание = СменноеЗадание;
				НоваяСтрока.Порядок = Порядок;
				
				Порядок = Порядок + 1;
				
				Если Этапы.Найти(Операция.КлючОперации.Этап) = Неопределено Тогда
				
					Этапы.Добавить(Операция.КлючОперации.Этап);
					
				КонецЕсли;
			
			КонецЦикла;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Операции.Подразделение         КАК Подразделение,
				|	Операции.СменноеЗадание        КАК СменноеЗадание,
				|	Операции.Этап                  КАК Этап,
				|	Операции.Операция              КАК Операция,
				|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
				|	ВЫБОР
				|		КОГДА Операции.Исполнитель В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка))
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
				|		ИНАЧЕ Операции.Исполнитель
				|	КОНЕЦ                          КАК Исполнитель,
				|	Операции.РабочийЦентр          КАК РабочийЦентр,
				|	Операции.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
				|	Операции.Количество            КАК Количество,
				|	Операции.Порядок               КАК Порядок
				|ПОМЕСТИТЬ ВТОперации
				|ИЗ
				|	&Операции КАК Операции
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Подразделение            КАК Подразделение,
				|	ВложенныйЗапрос.СменноеЗадание           КАК СменноеЗадание,
				|	ВложенныйЗапрос.Этап                     КАК Этап,
				|	ВложенныйЗапрос.Операция                 КАК Операция,
				|	ВложенныйЗапрос.ИдентификаторОперации    КАК ИдентификаторОперации,
				|	ВложенныйЗапрос.Исполнитель              КАК Исполнитель,
				|	ВложенныйЗапрос.РабочийЦентр             КАК РабочийЦентр,
				|	ВложенныйЗапрос.ВидРабочегоЦентра        КАК ВидРабочегоЦентра,
				|	ВложенныйЗапрос.НазначатьНеРанее         КАК НазначатьНеРанее,
				|	ВложенныйЗапрос.ВремяШтучное             КАК ВремяШтучное,
				|	ВложенныйЗапрос.ВремяПЗ                  КАК ВремяПЗ,
				|	ВложенныйЗапрос.ВремяЕдИзм               КАК ВремяЕдИзм,
				|	ВложенныйЗапрос.МожноНазначать           КАК МожноНазначать,
				|	ВложенныйЗапрос.НужноНазначать           КАК НужноНазначать,
				|	ВложенныйЗапрос.НарушенПорядокНазначения КАК НарушенПорядокНазначения,
				|	ВложенныйЗапрос.Распоряжение             КАК Распоряжение,
				|	ВложенныйЗапрос.НомерОперации            КАК НомерОперации,
				|	ВложенныйЗапрос.НомерСледующейОперации   КАК НомерСледующейОперации,
				|	СУММА(ВложенныйЗапрос.Количество)        КАК Количество,
				|	МАКСИМУМ(ВложенныйЗапрос.Порядок)        КАК Порядок
				|ИЗ
				|	(ВЫБРАТЬ
				|		ОперацииРегистр.Подразделение          КАК Подразделение,
				|		ОперацииРегистр.СменноеЗадание         КАК СменноеЗадание,
				|		ОперацииРегистр.Этап                   КАК Этап,
				|		ОперацииРегистр.Операция               КАК Операция,
				|		ОперацииРегистр.ИдентификаторОперации  КАК ИдентификаторОперации,
				|		ОперацииРегистр.Исполнитель            КАК Исполнитель,
				|		ОперацииРегистр.РабочийЦентр           КАК РабочийЦентр,
				|		ОперацииРегистр.ВидРабочегоЦентра      КАК ВидРабочегоЦентра,
				|		ДАТАВРЕМЯ(1, 1, 1)                     КАК НазначатьНеРанее,
				|		ОперацииРегистр.Количество             КАК Количество,
				|		ОперацииРегистр.ВремяШтучное           КАК ВремяШтучное,
				|		ОперацииРегистр.ВремяПЗ                КАК ВремяПЗ,
				|		ОперацииРегистр.ВремяЕдИзм             КАК ВремяЕдИзм,
				|		ЛОЖЬ                                   КАК МожноНазначать,
				|		ЛОЖЬ                                   КАК НужноНазначать,
				|		ВЫБОР
				|			КОГДА ОперацииРегистр.Этап В (&Этапы)
				|				ТОГДА ЛОЖЬ
				|			ИНАЧЕ ОперацииРегистр.НарушенПорядокНазначения
				|		КОНЕЦ                                  КАК НарушенПорядокНазначения,
				|		ОперацииРегистр.Распоряжение           КАК Распоряжение,
				|		ОперацииРегистр.НомерОперации          КАК НомерОперации,
				|		ОперацииРегистр.НомерСледующейОперации КАК НомерСледующейОперации,
				|		ОперацииРегистр.Порядок                КАК Порядок
				|	ИЗ
				|		РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииРегистр
				|	ГДЕ
				|		ОперацииРегистр.СменноеЗадание = &СменноеЗадание
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ОперацииНазначение.Подразделение,
				|		ОперацииНазначение.СменноеЗадание,
				|		ОперацииНазначение.Этап,
				|		ОперацииНазначение.Операция,
				|		ОперацииНазначение.ИдентификаторОперации,
				|		ОперацииНазначение.Исполнитель,
				|		ОперацииНазначение.РабочийЦентр,
				|		ОперацииНазначение.ВидРабочегоЦентра,
				|		ДАТАВРЕМЯ(1, 1, 1),
				|		ОперацииНазначение.Количество,
				|		Очередь.ВремяШтучное,
				|		Очередь.ВремяПЗ,
				|		Очередь.ВремяЕдИзм,
				|		ЛОЖЬ,
				|		ЛОЖЬ,
				|		ЛОЖЬ,
				|		Очередь.Распоряжение,
				|		Очередь.НомерОперации,
				|		Очередь.НомерСледующейОперации,
				|		ОперацииНазначение.Порядок
				|	ИЗ
				|		ВТОперации КАК ОперацииНазначение
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
				|			ПО ОперацииНазначение.Подразделение = Очередь.Подразделение
				|				И ОперацииНазначение.Этап = Очередь.Этап
				|				И ОперацииНазначение.Операция = Очередь.Операция
				|				И ОперацииНазначение.ИдентификаторОперации = Очередь.ИдентификаторОперации) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ВидРабочегоЦентра,
				|	ВложенныйЗапрос.МожноНазначать,
				|	ВложенныйЗапрос.НарушенПорядокНазначения,
				|	ВложенныйЗапрос.ВремяШтучное,
				|	ВложенныйЗапрос.ВремяПЗ,
				|	ВложенныйЗапрос.ВремяЕдИзм,
				|	ВложенныйЗапрос.Распоряжение,
				|	ВложенныйЗапрос.Этап,
				|	ВложенныйЗапрос.Исполнитель,
				|	ВложенныйЗапрос.НазначатьНеРанее,
				|	ВложенныйЗапрос.НужноНазначать,
				|	ВложенныйЗапрос.РабочийЦентр,
				|	ВложенныйЗапрос.Операция,
				|	ВложенныйЗапрос.Подразделение,
				|	ВложенныйЗапрос.СменноеЗадание,
				|	ВложенныйЗапрос.ИдентификаторОперации,
				|	ВложенныйЗапрос.НомерОперации,
				|	ВложенныйЗапрос.НомерСледующейОперации");
			Запрос.УстановитьПараметр("Операции", ТаблицаОпераций);
			Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
			Запрос.УстановитьПараметр("Этапы", Этапы);
			
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			Набор.Записать();
			
			// Пересчет связанных данных
			ПараметрыЗадания = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
			ПараметрыЗадания.ОбновитьСостояние = Истина;
			
			Для каждого Этап Из Этапы Цикл
				
				РассчитатьОперации(Этап, СменноеЗадание);
				РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Этап, ПараметрыЗадания);
				
			КонецЦикла;
			
		Иначе
			
			ДанныеЗаполненияМассив = ДанныеЗаполненияОпераций(СменноеЗадание, Операции);
			
			БлокировкаДанных = Новый БлокировкаДанных;
			
			// Создание Производственных операций
			Для каждого ДанныеЗаполнения Из ДанныеЗаполненияМассив Цикл
				
				ДанныеЗаполнения.Участок = РевизитыЗадания.Участок;
				
				ОперацияОбъект = Документы.ПроизводственнаяОперация2_2.СоздатьДокумент();
				ОперацияОбъект.Заполнить(ДанныеЗаполнения);
				ОперацияОбъект.УстановитьРежимГрупповойОбработки();
				ОперацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Если Этапы.Найти(ДанныеЗаполнения.КлючОперации.Этап) = Неопределено Тогда
					Этапы.Добавить(ДанныеЗаполнения.КлючОперации.Этап);
					ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭтапПроизводства2_2");
					ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДанныеЗаполнения.Распоряжение);
					ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЗаполнения.ПартияПроизводства);
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеЗаполнения.КлючОперации.Этап);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				КонецЕсли;
				
			КонецЦикла;
			
			БлокировкаДанных.Заблокировать();
			ДанныеЭтапов = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этапы);
			
			// Пересчет связанных данных
			ПараметрыЗадания = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
			ПараметрыЗадания.ОбновитьСостояние = Истина;
			
			Для каждого ДанныеЗаполнения Из ДанныеЗаполненияМассив Цикл
				
				Этап = ДанныеЗаполнения.КлючОперации.Этап;
				ИндексЭлемента = Этапы.Найти(Этап);
				Если ИндексЭлемента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеЭтапа = ДанныеЭтапов.Получить(Этап);
				Если ДанныеЗаполнения.Свойство("ДанныеСпецификации") Тогда
					ОтборЭтап.Этап = ДанныеЭтапа.ЭтапСпецификации;
					ДанныеЭтапа.Вставить("Операции", ДанныеЗаполнения.ДанныеСпецификации.Операции.Скопировать(ОтборЭтап));
				КонецЕсли;
				
				РегистрыСведений.ОчередьПроизводственныхОпераций.РассчитатьОчередьПоДаннымЭтапа(Этап, ДанныеЭтапа, Ложь);
				РассчитатьОперации(Этап, СменноеЗадание);
				РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Этап, ПараметрыЗадания);
				
				Этапы.Удалить(ИндексЭлемента);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке());
		
		ВызватьИсключение НСтр("ru = 'Не удалось добавить операции';
								|en = 'Cannot add operations'");
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текст запроса для расчета времени выполнения операции.
//
// Параметры:
//  ИмяТаблицыРегистр - Строка - синоним таблицы регистра сведений ОперацииКСозданиюСменныхЗаданий в тексте запроса.
// 
// Возвращаемое значение:
//  Строка - текст для подстановки в запрос.
//
Функция ТекстЗапросаВремяОперации(ИмяТаблицыРегистр) Экспорт
	
	Возврат	СтрЗаменить(
		"(
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Регистр.ВидРабочегоЦентра.ПараллельнаяЗагрузка, ЛОЖЬ)
		|			ТОГДА Регистр.ВремяШтучное * ЕСТЬNULL(Регистр.РабочийЦентр.КоэффициентВремениРаботы, 1)
		|		ИНАЧЕ Регистр.ВремяШтучное * ЕСТЬNULL(Регистр.РабочийЦентр.КоэффициентВремениРаботы, 1) * Регистр.Количество / Регистр.Операция.Количество
		|	КОНЕЦ + Регистр.ВремяПЗ
		|)",
		"Регистр",
		ИмяТаблицыРегистр);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьДанныеРегистра(Этап)
	
	Запрос = Новый Запрос(ТекстЗапросаОперацииДляРасчета());
	Запрос.УстановитьПараметр("Этап", Этап);
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	Операции = МассивРезультатов[МассивРезультатов.ВГраница()-3].Выгрузить();
	
	СвязиОпераций = МассивРезультатов[МассивРезультатов.ВГраница()-2].Выгрузить();
	СвязиОпераций.Индексы.Добавить("ИдентификаторОперации");
	СвязиОпераций.Индексы.Добавить("ИдентификаторОперацииПредш");
	
	Выборка = МассивРезультатов[МассивРезультатов.ВГраница()-1].Выбрать();
	
	НазначенныеОперации = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить();
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(НазначенныеОперации);
	НазначенныеОперации.Индексы.Добавить("ИдентификаторОперации");
	НазначенныеОперации.Индексы.Добавить("ИдентификаторОперацииПредш, Дата");
	
	СтПоискаИд = Новый Структура("ИдентификаторОперации");
	СтПоискаИдПредш = Новый Структура("ИдентификаторОперацииПредш");
	СтПоискаИдПредшДата = Новый Структура("ИдентификаторОперацииПредш, Дата");
	СтПоискаКлючам = Новый Структура(
		"Подразделение, СменноеЗадание, Этап, Операция, ИдентификаторОперации, Исполнитель, РабочийЦентр, ВидРабочегоЦентра, НазначатьНеРанее");
	
	// Расчет ресурсов назначенных операций: нарушен порядок назначения
	
	ИндексПоКлючам = Операции.Индексы.Добавить(
		"Подразделение, СменноеЗадание, Этап, Операция, ИдентификаторОперации, Исполнитель, РабочийЦентр, ВидРабочегоЦентра, НазначатьНеРанее");
	
	Итоги = Новый Соответствие;             // Содержит нарастающие итоги по операциям в полном объеме
	ИтогиБезНарушений = Новый Соответствие; // Содержит нарастающие итоги исключая операции с нарушением порядка назначения
	
	Пока Выборка.Следующий() Цикл
		
		Если Итоги[Выборка.ИдентификаторОперации] = Неопределено Тогда
			Итоги.Вставить(Выборка.ИдентификаторОперации, Выборка.Количество);
			ИтогиБезНарушений.Вставить(Выборка.ИдентификаторОперации, 0);
		Иначе
			Итоги[Выборка.ИдентификаторОперации] = Итоги[Выборка.ИдентификаторОперации] + Выборка.Количество;
		КонецЕсли;
		
		Если Выборка.ЭтоДокумент Тогда
			ИтогиБезНарушений[Выборка.ИдентификаторОперации] = ИтогиБезНарушений[Выборка.ИдентификаторОперации] + Выборка.Количество;
			Продолжить;
		КонецЕсли;
		
		СтПоискаИд.ИдентификаторОперации = Выборка.ИдентификаторОперации;
		Предшественники = СвязиОпераций.НайтиСтроки(СтПоискаИд);
		
		Если Предшественники.ВГраница() = -1 Тогда
			ИтогиБезНарушений[Выборка.ИдентификаторОперации] = ИтогиБезНарушений[Выборка.ИдентификаторОперации] + Выборка.Количество;
			Продолжить;
		КонецЕсли;
		
		НарушенПорядокНазначения = Ложь;
		
		Для каждого Связь Из Предшественники Цикл
			
			Если ИтогиБезНарушений[Связь.ИдентификаторОперацииПредш] = Неопределено
				ИЛИ Итоги[Связь.ИдентификаторОперации] / Связь.КоличествоВсего 
				  > ИтогиБезНарушений[Связь.ИдентификаторОперацииПредш] / Связь.КоличествоВсегоПредш Тогда
				
				НарушенПорядокНазначения = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НарушенПорядокНазначения Тогда
			
			ЗаполнитьЗначенияСвойств(СтПоискаКлючам, Выборка);
			Операции.НайтиСтроки(СтПоискаКлючам)[0].НарушенПорядокНазначения = Истина;
			
			// Операция с нарушением порядка назначения должна быть исключена из расчета ресурса "можно назначать"
			СтПоискаИдПредшДата.ИдентификаторОперацииПредш = Выборка.ИдентификаторОперации;
			СтПоискаИдПредшДата.Дата = Выборка.Дата;
			НайденныеСтроки = НазначенныеОперации.НайтиСтроки(СтПоискаИдПредшДата);
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество - Выборка.Количество;
			КонецЕсли;
			
		Иначе
			ИтогиБезНарушений[Выборка.ИдентификаторОперации] = ИтогиБезНарушений[Выборка.ИдентификаторОперации] + Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Операции.Индексы.Удалить(ИндексПоКлючам);
	
	// Расчет ресурсов неназначенных операций: можно/нужно назначть, назначать не ранее
	
	ОперацииОбработать = Операции.НайтиСтроки(Новый Структура("Назначена", Ложь));
	Для каждого Операция Из ОперацииОбработать Цикл
		
		КоличествоНазначено = Операция.КоличествоВсего - Операция.Количество;
		
		// Расчет количества "нужно назначать"
		Дробь = Неопределено;
		
		СтПоискаИдПредш.ИдентификаторОперацииПредш = Операция.ИдентификаторОперации;
		Последователи = СвязиОпераций.НайтиСтроки(СтПоискаИдПредш);
		
		Для каждого Строка Из Последователи Цикл
			ДробьНов = ПроизводствоСервер.Дробь(Строка.КоличествоНазначено, Строка.КоличествоВсего);
			Если Дробь = Неопределено Тогда
				Дробь = ДробьНов;
			Иначе
				Дробь = ?(ДробьНов.Значение > Дробь.Значение, ДробьНов, Дробь);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоНужноНазначать = 0;
		Если Дробь <> Неопределено И Дробь.Значение > 0 Тогда
			
			Количество = Окр(Операция.КоличествоВсего * Дробь.Числитель/Дробь.Знаменатель, 3) - КоличествоНазначено;
			
			Если Количество > 0 Тогда
				КоличествоНужноНазначать = Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		// Инициализация буфера, накапливающего количество назначенных предшествующих операций
		Буфер = Новый Соответствие;
		ВсеПредшественникиНазначены = Истина;
		
		СтПоискаИд.ИдентификаторОперации = Операция.ИдентификаторОперации;
		Предшественники = СвязиОпераций.НайтиСтроки(СтПоискаИд);
		
		Если Предшественники.ВГраница() <> -1 Тогда
			Для каждого Строка Из Предшественники Цикл
				
				Буфер.Вставить(Строка.ИдентификаторОперацииПредш,
					Новый Структура("Количество, КоличествоВсего", 0, Строка.КоличествоВсегоПредш));
				
				Если ВсеПредшественникиНазначены Тогда
					
					Если ИтогиБезНарушений.Получить(Строка.ИдентификаторОперацииПредш) = Неопределено
						ИЛИ ИтогиБезНарушений[Строка.ИдентификаторОперацииПредш] <> Строка.КоличествоВсегоПредш Тогда
						
						ВсеПредшественникиНазначены = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Операция.МожноНазначать = Истина;
			Операция.НужноНазначать = КоличествоНужноНазначать > 0;
			Продолжить;
		КонецЕсли;
		
		// Расчет количества к назначению по датам
		НазначениеПоДатам = Новый Массив;
		Предшественники = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(НазначенныеОперации, СтПоискаИд, Истина);
		
		Для Индекс = 0 По Предшественники.ВГраница() Цикл
			
			Предшественник = Предшественники[Индекс];
			
			Если Предшественник.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Буфер[Предшественник.ИдентификаторОперацииПредш].Количество = 
				Буфер[Предшественник.ИдентификаторОперацииПредш].Количество + Предшественник.Количество;
			
			Дробь = Неопределено;
			Для каждого КлючИЗначение Из Буфер Цикл
				ДробьНов = ПроизводствоСервер.Дробь(КлючИЗначение.Значение.Количество, КлючИЗначение.Значение.КоличествоВсего);
				Если Дробь = Неопределено Тогда
					Дробь = ДробьНов;
				Иначе
					Дробь = ?(ДробьНов.Значение < Дробь.Значение, ДробьНов, Дробь);
				КонецЕсли;
			КонецЦикла;
				
			Если Дробь.Значение = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого КлючИЗначение Из Буфер Цикл
				
				КлючИЗначение.Значение.Количество = КлючИЗначение.Значение.Количество
					- Окр(КлючИЗначение.Значение.КоличествоВсего * Дробь.Числитель/Дробь.Знаменатель, 3);
				
			КонецЦикла;
				
			Количество = Окр(Операция.КоличествоВсего * Дробь.Числитель/Дробь.Знаменатель, 3);
			
			// Зачет назначенного количества
			Если КоличествоНазначено > 0 Тогда
				
				Если КоличествоНазначено >= Количество Тогда
					
					КоличествоНазначено = КоличествоНазначено - Количество;
					Продолжить;
					
				Иначе
					
					Количество = Количество - КоличествоНазначено;
					КоличествоНазначено = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ВГраница = НазначениеПоДатам.ВГраница();
			Если ВГраница = -1
				ИЛИ НазначениеПоДатам[ВГраница].НазначатьНеРанее <> Предшественник.Дата Тогда
				
				НазначениеПоДатам.Добавить(
					Новый Структура("НазначатьНеРанее, Количество",
						Предшественник.Дата, Количество));
				
			Иначе
				
				НазначениеПоДатам[ВГраница].Количество = НазначениеПоДатам[ВГраница].Количество + Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Отметка операций к назначению
		Для Индекс = 0 По НазначениеПоДатам.ВГраница() Цикл
			
			Если ВсеПредшественникиНазначены И Индекс = НазначениеПоДатам.ВГраница()
				ИЛИ НазначениеПоДатам[Индекс].Количество >= Операция.Количество Тогда
				
				Операция.МожноНазначать = Истина;
				Операция.НазначатьНеРанее = НазначениеПоДатам[Индекс].НазначатьНеРанее;
				Операция.НужноНазначать = КоличествоНужноНазначать > 0;
				
				Прервать;
				
			Иначе
				
				НоваяОперация = Операции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяОперация, Операция);
				ЗаполнитьЗначенияСвойств(НоваяОперация, НазначениеПоДатам[Индекс],
					"НазначатьНеРанее, Количество");
				НоваяОперация.МожноНазначать = Истина;
				НоваяОперация.НужноНазначать = КоличествоНужноНазначать > 0;
				
				Операция.Количество = Операция.Количество - НоваяОперация.Количество;
				КоличествоНужноНазначать = КоличествоНужноНазначать - Мин(КоличествоНужноНазначать, НоваяОперация.Количество);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Операция.НужноНазначать И КоличествоНужноНазначать > 0 Тогда
			Операция.НужноНазначать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Операции;
	
КонецФункции

Функция ТекстЗапросаОперацииДляРасчета()
	
	Возврат
		"ВЫБРАТЬ
		|	Операции.Этап                                            КАК Этап,
		|	Операции.ИдентификаторОперации                           КАК ИдентификаторОперации,
		|	ОперацииПредш.ИдентификаторОперации                      КАК ИдентификаторОперацииПредш,
		|	МАКСИМУМ(Операции.Создано)
		|		- МАКСИМУМ(Операции.ТребуетПовторения)
		|		+ СУММА(ЕСТЬNULL(НазначенныеОперации.Количество, 0)) КАК КоличествоНазначено,
		|	МАКСИМУМ(Операции.Запланировано)                         КАК КоличествоВсего,
		|	МАКСИМУМ(ОперацииПредш.Запланировано)
		|		- МАКСИМУМ(ОперацииПредш.Брак)                       КАК КоличествоВсегоПредш
		|ПОМЕСТИТЬ ВТСвязиОпераций
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Операции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОперацииПредш
		|		ПО Операции.Подразделение = ОперацииПредш.Подразделение
		|			И Операции.Этап = ОперацииПредш.Этап
		|			И Операции.НомерОперации = ОперацииПредш.НомерСледующейОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|		ПО Операции.Этап = НазначенныеОперации.Этап
		|			И Операции.ИдентификаторОперации = НазначенныеОперации.ИдентификаторОперации
		|			И (НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка))
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И ОперацииПредш.Этап = &Этап
		|
		|СГРУППИРОВАТЬ ПО
		|	Операции.Этап,
		|	Операции.ИдентификаторОперации,
		|	ОперацииПредш.ИдентификаторОперации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	ИдентификаторОперацииПредш,
		|	ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Подразделение                  КАК Подразделение,
		|	ВложенныйЗапрос.Этап                           КАК Этап,
		|	ВложенныйЗапрос.Операция                       КАК Операция,
		|	ВложенныйЗапрос.ИдентификаторОперации          КАК ИдентификаторОперации,
		|	ВложенныйЗапрос.СменноеЗадание                 КАК СменноеЗадание,
		|	ВложенныйЗапрос.Исполнитель                    КАК Исполнитель,
		|	ВложенныйЗапрос.РабочийЦентр                   КАК РабочийЦентр,
		|	ВложенныйЗапрос.ВидРабочегоЦентра              КАК ВидРабочегоЦентра,
		|	ВложенныйЗапрос.НазначатьНеРанее               КАК НазначатьНеРанее,
		|	СУММА(ВложенныйЗапрос.Количество)              КАК Количество,
		|	ВложенныйЗапрос.ВремяШтучное                   КАК ВремяШтучное,
		|	ВложенныйЗапрос.ВремяПЗ                        КАК ВремяПЗ,
		|	ВложенныйЗапрос.ВремяЕдИзм                     КАК ВремяЕдИзм,
		|	ЛОЖЬ                                           КАК МожноНазначать,
		|	ЛОЖЬ                                           КАК НужноНазначать,
		|	ЛОЖЬ                                           КАК НарушенПорядокНазначения,
		|	ВложенныйЗапрос.Распоряжение                   КАК Распоряжение,
		|	ВложенныйЗапрос.НомерОперации                  КАК НомерОперации,
		|	ВложенныйЗапрос.НомерСледующейОперации         КАК НомерСледующейОперации,
		|	МАКСИМУМ(ВложенныйЗапрос.КоличествоВсего)      КАК КоличествоВсего,
		|	ВложенныйЗапрос.СменноеЗадание <> НЕОПРЕДЕЛЕНО КАК Назначена,
		|	МАКСИМУМ(ВложенныйЗапрос.Порядок)              КАК Порядок
		|ИЗ
		|	(ВЫБРАТЬ
		|		Очередь.Подразделение                                               КАК Подразделение,
		|		Очередь.Этап                                                        КАК Этап,
		|		Очередь.Операция                                                    КАК Операция,
		|		Очередь.ИдентификаторОперации                                       КАК ИдентификаторОперации,
		|		НЕОПРЕДЕЛЕНО                                                        КАК СменноеЗадание,
		|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)                    КАК Исполнитель,
		|		ВЫБОР
		|			КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|				ТОГДА ТехнологическиеОперации.РабочийЦентр
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ                                                               КАК РабочийЦентр,
		|		ВЫБОР
		|			КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|				ТОГДА РабочиеЦентры.ВидРабочегоЦентра
		|			ИНАЧЕ ТехнологическиеОперации.РабочийЦентр
		|		КОНЕЦ                                                               КАК ВидРабочегоЦентра,
		|		НЕОПРЕДЕЛЕНО                                                        КАК НазначатьНеРанее,
		|		Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано КАК Количество,
		|		Очередь.ВремяШтучное                                                КАК ВремяШтучное,
		|		Очередь.ВремяПЗ                                                     КАК ВремяПЗ,
		|		Очередь.ВремяЕдИзм                                                  КАК ВремяЕдИзм,
		|		Очередь.Распоряжение                                                КАК Распоряжение,
		|		Очередь.НомерОперации                                               КАК НомерОперации,
		|		Очередь.НомерСледующейОперации                                      КАК НомерСледующейОперации,
		|		Очередь.Запланировано                                               КАК КоличествоВсего,
		|		0                                                                   КАК Порядок
		|	ИЗ
		|		РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|			ПО Очередь.Операция = ТехнологическиеОперации.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|			ПО (ТехнологическиеОперации.РабочийЦентр = РабочиеЦентры.Ссылка)
		|	ГДЕ
		|		Очередь.Этап = &Этап
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОперацииКСозданиюСменныхЗаданий.Подразделение,
		|		ОперацииКСозданиюСменныхЗаданий.Этап,
		|		ОперацииКСозданиюСменныхЗаданий.Операция,
		|		ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
		|		ВЫБОР
		|			КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|				ТОГДА ТехнологическиеОперации.РабочийЦентр
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|				ТОГДА РабочиеЦентры.ВидРабочегоЦентра
		|			ИНАЧЕ ТехнологическиеОперации.РабочийЦентр
		|		КОНЕЦ,
		|		НЕОПРЕДЕЛЕНО,
		|		-ОперацииКСозданиюСменныхЗаданий.Количество,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяШтучное,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяПЗ,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяЕдИзм,
		|		ОперацииКСозданиюСменныхЗаданий.Распоряжение,
		|		ОперацииКСозданиюСменныхЗаданий.НомерОперации,
		|		ОперацииКСозданиюСменныхЗаданий.НомерСледующейОперации,
		|		0,
		|		0
		|	ИЗ
		|		РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|			ПО ОперацииКСозданиюСменныхЗаданий.Операция = ТехнологическиеОперации.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|			ПО (ТехнологическиеОперации.РабочийЦентр = РабочиеЦентры.Ссылка)
		|	ГДЕ
		|		ОперацииКСозданиюСменныхЗаданий.Этап = &Этап
		|		И ОперацииКСозданиюСменныхЗаданий.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОперацииКСозданиюСменныхЗаданий.Подразделение,
		|		ОперацииКСозданиюСменныхЗаданий.Этап,
		|		ОперацииКСозданиюСменныхЗаданий.Операция,
		|		ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации,
		|		ОперацииКСозданиюСменныхЗаданий.СменноеЗадание,
		|		ОперацииКСозданиюСменныхЗаданий.Исполнитель,
		|		ОперацииКСозданиюСменныхЗаданий.РабочийЦентр,
		|		ОперацииКСозданиюСменныхЗаданий.ВидРабочегоЦентра,
		|		ОперацииКСозданиюСменныхЗаданий.НазначатьНеРанее,
		|		ОперацииКСозданиюСменныхЗаданий.Количество,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяШтучное,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяПЗ,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяЕдИзм,
		|		ОперацииКСозданиюСменныхЗаданий.Распоряжение,
		|		ОперацииКСозданиюСменныхЗаданий.НомерОперации,
		|		ОперацииКСозданиюСменныхЗаданий.НомерСледующейОперации,
		|		0,
		|		ОперацииКСозданиюСменныхЗаданий.Порядок
		|	ИЗ
		|		РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|	ГДЕ
		|		ОперацииКСозданиюСменныхЗаданий.Этап = &Этап
		|		И ОперацииКСозданиюСменныхЗаданий.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Этап,
		|	ВложенныйЗапрос.Операция,
		|	ВложенныйЗапрос.ИдентификаторОперации,
		|	ВложенныйЗапрос.СменноеЗадание,
		|	ВложенныйЗапрос.Исполнитель,
		|	ВложенныйЗапрос.РабочийЦентр,
		|	ВложенныйЗапрос.ВидРабочегоЦентра,
		|	ВложенныйЗапрос.НазначатьНеРанее,
		|	ВложенныйЗапрос.ВремяШтучное,
		|	ВложенныйЗапрос.ВремяПЗ,
		|	ВложенныйЗапрос.ВремяЕдИзм,
		|	ВложенныйЗапрос.Распоряжение,
		|	ВложенныйЗапрос.НомерОперации,
		|	ВложенныйЗапрос.НомерСледующейОперации,
		|	ВложенныйЗапрос.СменноеЗадание <> НЕОПРЕДЕЛЕНО
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСвязиОпераций.ИдентификаторОперации      КАК ИдентификаторОперации,
		|	ВТСвязиОпераций.ИдентификаторОперацииПредш КАК ИдентификаторОперацииПредш,
		|	ВТСвязиОпераций.КоличествоНазначено        КАК КоличествоНазначено,
		|	ВТСвязиОпераций.КоличествоВсего            КАК КоличествоВсего,
		|	ВТСвязиОпераций.КоличествоВсегоПредш       КАК КоличествоВсегоПредш
		|ИЗ
		|	ВТСвязиОпераций КАК ВТСвязиОпераций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Операции.Подразделение         КАК Подразделение,
		|	Операции.СменноеЗадание        КАК СменноеЗадание,
		|	Операции.Этап                  КАК Этап,
		|	Операции.Операция              КАК Операция,
		|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Операции.Исполнитель           КАК Исполнитель,
		|	Операции.РабочийЦентр          КАК РабочийЦентр,
		|	Операции.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
		|	Операции.НазначатьНеРанее      КАК НазначатьНеРанее,
		|	Операции.СменноеЗадание.Дата   КАК Дата,
		|	Операции.НомерОперации         КАК НомерОперации,
		|	Операции.Порядок               КАК Порядок,
		|	ЛОЖЬ                           КАК ЭтоДокумент,
		|	Операции.Количество            КАК Количество
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И Операции.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроизвОперация.Подразделение,
		|	ПроизвОперация.СменноеЗадание,
		|	ПроизвОперация.Этап,
		|	ПроизвОперация.Операция,
		|	ПроизвОперация.ИдентификаторОперации,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ПроизвОперация.СменноеЗадание.Дата,
		|	0,
		|	0,
		|	ИСТИНА,
		|	СУММА(ВЫБОР
		|			КОГДА ПроизвОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|				ТОГДА ПроизвОперация.КоличествоФакт
		|			ИНАЧЕ ПроизвОперация.Количество - ПроизвОперация.КоличествоОтменено
		|		КОНЕЦ)
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК ПроизвОперация
		|ГДЕ
		|	ПроизвОперация.Этап = &Этап
		|	И ПроизвОперация.Проведен
		|	И ПроизвОперация.НаОснованииНСИ
		|	И НЕ ПроизвОперация.ТребуетПовторения
		|	И ПроизвОперация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроизвОперация.Операция,
		|	ПроизвОперация.СменноеЗадание,
		|	ПроизвОперация.Подразделение,
		|	ПроизвОперация.Этап,
		|	ПроизвОперация.ИдентификаторОперации,
		|	ПроизвОперация.СменноеЗадание.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	НомерОперации,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИдентификаторОперации      КАК ИдентификаторОперации,
		|	ВложенныйЗапрос.ИдентификаторОперацииПредш КАК ИдентификаторОперацииПредш,
		|	ВложенныйЗапрос.Дата                       КАК Дата,
		|	СУММА(ВложенныйЗапрос.Количество)          КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Связи.ИдентификаторОперации      КАК ИдентификаторОперации,
		|		Связи.ИдентификаторОперацииПредш КАК ИдентификаторОперацииПредш,
		|		Задание.Дата                     КАК Дата,
		|		Операции.Количество              КАК Количество
		|	ИЗ
		|		ВТСвязиОпераций КАК Связи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
		|			ПО Связи.Этап = Операции.Этап
		|				И Связи.ИдентификаторОперацииПредш = Операции.ИдентификаторОперации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК Задание
		|			ПО (Операции.СменноеЗадание = Задание.Ссылка)
		|	ГДЕ
		|		Операции.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Связи.ИдентификаторОперации,
		|		Связи.ИдентификаторОперацииПредш,
		|		ВЫБОР
		|			КОГДА Задание.Дата ЕСТЬ НЕ NULL
		|				ТОГДА Задание.Дата
		|			КОГДА ПроизвОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|				ТОГДА ПроизвОперация.ОкончаниеВыполнения
		|			КОГДА ПроизвОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется)
		|				ТОГДА ПроизвОперация.НачалоВыполнения
		|			ИНАЧЕ ПроизвОперация.Дата
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПроизвОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|				ТОГДА ПроизвОперация.КоличествоФакт
		|			ИНАЧЕ ПроизвОперация.Количество - ПроизвОперация.КоличествоОтменено
		|		КОНЕЦ
		|	ИЗ
		|		ВТСвязиОпераций КАК Связи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2 КАК ПроизвОперация
		|			ПО Связи.Этап = ПроизвОперация.Этап
		|				И Связи.ИдентификаторОперацииПредш = ПроизвОперация.ИдентификаторОперации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК Задание
		|			ПО (ПроизвОперация.СменноеЗадание = Задание.Ссылка)
		|	ГДЕ
		|		ПроизвОперация.Проведен
		|		И НЕ ПроизвОперация.ТребуетПовторения
		|		И ПроизвОперация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ИдентификаторОперации,
		|	ВложенныйЗапрос.ИдентификаторОперацииПредш,
		|	ВложенныйЗапрос.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторОперации,
		|	Дата";
	
КонецФункции

Процедура СоздатьВТОперацииНазначение(МенеджерВременныхТаблиц, Операции, Параметры)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Операции.Подразделение         КАК Подразделение,
		|	Операции.Этап                  КАК Этап,
		|	Операции.Операция              КАК Операция,
		|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Операции.СменноеЗадание        КАК СменноеЗадание,
		|	Операции.Исполнитель           КАК Исполнитель,
		|	Операции.РабочийЦентр          КАК РабочийЦентр,
		|	Операции.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
		|	Операции.НазначатьНеРанее      КАК НазначатьНеРанее,
		|	Операции.Порядок               КАК Порядок
		|ПОМЕСТИТЬ ВТОперацииНазначение
		|ИЗ
		|	&Операции КАК Операции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииНазначение.Подразделение                         КАК Подразделение,
		|	ОперацииНазначение.Этап                                  КАК Этап,
		|	ОперацииНазначение.Операция                              КАК Операция,
		|	ОперацииНазначение.ИдентификаторОперации                 КАК ИдентификаторОперации,
		|	ОперацииНазначение.СменноеЗадание                        КАК СменноеЗадание,
		|	ОперацииНазначение.Исполнитель                           КАК Исполнитель,
		|	ОперацииНазначение.РабочийЦентр                          КАК РабочийЦентр,
		|	ОперацииНазначение.ВидРабочегоЦентра                     КАК ВидРабочегоЦентра,
		|	ОперацииНазначение.НазначатьНеРанее                      КАК НазначатьНеРанее,
		|	ЕСТЬNULL(ОперацииКСозданиюСменныхЗаданий.Количество, 1)  КАК Количество,
		|		// ЕСТЬNULL(..., 1) на следующем шаге конвертируется в -1;
		|		// отрицательное значение не пройдет контроль - нельзя назначать операции, отсутствующие в регистре
		|	ОперацииКСозданиюСменныхЗаданий.ВремяШтучное             КАК ВремяШтучное,
		|	ОперацииКСозданиюСменныхЗаданий.ВремяПЗ                  КАК ВремяПЗ,
		|	ОперацииКСозданиюСменныхЗаданий.ВремяЕдИзм               КАК ВремяЕдИзм,
		|	ОперацииКСозданиюСменныхЗаданий.МожноНазначать           КАК МожноНазначать,
		|	ОперацииКСозданиюСменныхЗаданий.НужноНазначать           КАК НужноНазначать,
		|	ОперацииКСозданиюСменныхЗаданий.НарушенПорядокНазначения КАК НарушенПорядокНазначения,
		|	ОперацииКСозданиюСменныхЗаданий.Распоряжение             КАК Распоряжение,
		|	ОперацииКСозданиюСменныхЗаданий.НомерОперации            КАК НомерОперации,
		|	ОперацииКСозданиюСменныхЗаданий.НомерСледующейОперации   КАК НомерСледующейОперации,
		|	ОперацииКСозданиюСменныхЗаданий.Порядок                  КАК ПорядокСтарый,
		|	ОперацииНазначение.Порядок                               КАК ПорядокНовый
		|ПОМЕСТИТЬ ВТЗаписи
		|ИЗ
		|	ВТОперацииНазначение КАК ОперацииНазначение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|		ПО ОперацииНазначение.Подразделение = ОперацииКСозданиюСменныхЗаданий.Подразделение
		|			И ОперацииНазначение.Этап = ОперацииКСозданиюСменныхЗаданий.Этап
		|			И ОперацииНазначение.Операция = ОперацииКСозданиюСменныхЗаданий.Операция
		|			И ОперацииНазначение.ИдентификаторОперации = ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации
		|			И ОперацииНазначение.СменноеЗадание = ОперацииКСозданиюСменныхЗаданий.СменноеЗадание
		|			И ОперацииНазначение.Исполнитель = ОперацииКСозданиюСменныхЗаданий.Исполнитель
		|			И ОперацииНазначение.РабочийЦентр = ОперацииКСозданиюСменныхЗаданий.РабочийЦентр
		|			И ОперацииНазначение.ВидРабочегоЦентра = ОперацииКСозданиюСменныхЗаданий.ВидРабочегоЦентра
		|			И ОперацииНазначение.НазначатьНеРанее = ОперацииКСозданиюСменныхЗаданий.НазначатьНеРанее
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтарыеЗаписи.Подразделение            КАК Подразделение,
		|	СтарыеЗаписи.Этап                     КАК Этап,
		|	СтарыеЗаписи.Операция                 КАК Операция,
		|	СтарыеЗаписи.ИдентификаторОперации    КАК ИдентификаторОперации,
		|	СтарыеЗаписи.СменноеЗадание           КАК СменноеЗадание,
		|	СтарыеЗаписи.Исполнитель              КАК Исполнитель,
		|	СтарыеЗаписи.РабочийЦентр             КАК РабочийЦентр,
		|	СтарыеЗаписи.ВидРабочегоЦентра        КАК ВидРабочегоЦентра,
		|	СтарыеЗаписи.НазначатьНеРанее         КАК НазначатьНеРанее,
		|	-СтарыеЗаписи.Количество              КАК Количество,
		|	СтарыеЗаписи.ВремяШтучное             КАК ВремяШтучное,
		|	СтарыеЗаписи.ВремяПЗ                  КАК ВремяПЗ,
		|	СтарыеЗаписи.ВремяЕдИзм               КАК ВремяЕдИзм,
		|	СтарыеЗаписи.МожноНазначать           КАК МожноНазначать,
		|	СтарыеЗаписи.НужноНазначать           КАК НужноНазначать,
		|	СтарыеЗаписи.НарушенПорядокНазначения КАК НарушенПорядокНазначения,
		|	СтарыеЗаписи.Распоряжение             КАК Распоряжение,
		|	СтарыеЗаписи.НомерОперации            КАК НомерОперации,
		|	СтарыеЗаписи.НомерСледующейОперации   КАК НомерСледующейОперации,
		|	СтарыеЗаписи.ПорядокСтарый            КАК Порядок
		|ПОМЕСТИТЬ ВТОперации
		|ИЗ
		|	ВТЗаписи КАК СтарыеЗаписи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НовыеЗаписи.Подразделение,
		|	НовыеЗаписи.Этап,
		|	НовыеЗаписи.Операция,
		|	НовыеЗаписи.ИдентификаторОперации,
		|	&СменноеЗадание,
		|	НовыеЗаписи.Исполнитель,
		|	ВЫБОР
		|		КОГДА РабочиеЦентры.ВидРабочегоЦентра ЕСТЬ НЕ NULL
		|				И НовыеЗаписи.ВидРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|				И РабочиеЦентры.ВидРабочегоЦентра <> НовыеЗаписи.ВидРабочегоЦентра
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|		КОГДА РабочиеЦентры.Участок ЕСТЬ НЕ NULL
		|				И РабочиеЦентры.Участок <> Задание.Участок
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|		ИНАЧЕ НовыеЗаписи.РабочийЦентр
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Задание.Участок <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка)
		|			И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Справочник.РабочиеЦентры КАК Т
		|				ГДЕ
		|					Т.ВидРабочегоЦентра = НовыеЗаписи.ВидРабочегоЦентра
		|					И Т.Участок = Задание.Участок)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|		ИНАЧЕ НовыеЗаписи.ВидРабочегоЦентра
		|	КОНЕЦ,
		|	НовыеЗаписи.НазначатьНеРанее,
		|	НовыеЗаписи.Количество,
		|	НовыеЗаписи.ВремяШтучное,
		|	НовыеЗаписи.ВремяПЗ,
		|	НовыеЗаписи.ВремяЕдИзм,
		|	НовыеЗаписи.МожноНазначать,
		|	НовыеЗаписи.НужноНазначать,
		|	НовыеЗаписи.НарушенПорядокНазначения,
		|	НовыеЗаписи.Распоряжение,
		|	НовыеЗаписи.НомерОперации,
		|	НовыеЗаписи.НомерСледующейОперации,
		|	НовыеЗаписи.ПорядокНовый
		|ИЗ
		|	ВТЗаписи КАК НовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО НовыеЗаписи.РабочийЦентр = РабочиеЦентры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК Задание
		|		ПО Задание.Ссылка = &СменноеЗадание";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.УстановитьПараметр("СменноеЗадание", Параметры.Измерения.СменноеЗадание);
	
	Если Параметры.Измерения.Исполнитель <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыеЗаписи.Исполнитель", "&Исполнитель");
		Запрос.УстановитьПараметр("Исполнитель", Параметры.Измерения.Исполнитель);
		
	КонецЕсли;
	
	Если Параметры.Измерения.РабочийЦентр <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыеЗаписи.РабочийЦентр", "&РабочийЦентр");
		Запрос.УстановитьПараметр("РабочийЦентр", Параметры.Измерения.РабочийЦентр);
		
	КонецЕсли;
	
	Если Параметры.Измерения.ВидРабочегоЦентра <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыеЗаписи.ВидРабочегоЦентра", "&ВидРабочегоЦентра");
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", Параметры.Измерения.ВидРабочегоЦентра);
		
	КонецЕсли;
	
	Если Параметры.Количество <> Неопределено Тогда
		
		Если Параметры.НазначитьЧасть Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыеЗаписи.Количество",
				"ВЫБОР
				|	КОГДА &Количество >= СтарыеЗаписи.Количество
				|		ТОГДА СтарыеЗаписи.Количество
				|	ИНАЧЕ &Количество
				|КОНЕЦ");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыеЗаписи.Количество", "&Количество");
		Запрос.УстановитьПараметр("Количество", Параметры.Количество);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТОперацииУдаление(МенеджерВременныхТаблиц, Операции)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Подразделение         КАК Подразделение,
		|	Операции.Этап                  КАК Этап,
		|	Операции.Операция              КАК Операция,
		|	Операции.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Операции.СменноеЗадание        КАК СменноеЗадание,
		|	Операции.Исполнитель           КАК Исполнитель,
		|	Операции.РабочийЦентр          КАК РабочийЦентр,
		|	Операции.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
		|	Операции.НазначатьНеРанее      КАК НазначатьНеРанее
		|ПОМЕСТИТЬ ВТКлючиОпераций
		|ИЗ
		|	&Операции КАК Операции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТКлючиОпераций.Подразделение                            КАК Подразделение,
		|	ВТКлючиОпераций.Этап                                     КАК Этап,
		|	ВТКлючиОпераций.Операция                                 КАК Операция,
		|	ВТКлючиОпераций.ИдентификаторОперации                    КАК ИдентификаторОперации,
		|	ВТКлючиОпераций.СменноеЗадание                           КАК СменноеЗадание,
		|	ВТКлючиОпераций.Исполнитель                              КАК Исполнитель,
		|	ВТКлючиОпераций.РабочийЦентр                             КАК РабочийЦентр,
		|	ВТКлючиОпераций.ВидРабочегоЦентра                        КАК ВидРабочегоЦентра,
		|	ВТКлючиОпераций.НазначатьНеРанее                         КАК НазначатьНеРанее,
		|	-ЕСТЬNULL(ОперацииКСозданиюСменныхЗаданий.Количество, 1) КАК Количество,
		|		// -ЕСТЬNULL(..., 1) отрицательное значение не пройдет контроль - нельзя удалять операции, отсутствующие в регистре
		|	ОперацииКСозданиюСменныхЗаданий.ВремяШтучное             КАК ВремяШтучное,
		|	ОперацииКСозданиюСменныхЗаданий.ВремяПЗ                  КАК ВремяПЗ,
		|	ОперацииКСозданиюСменныхЗаданий.ВремяЕдИзм               КАК ВремяЕдИзм,
		|	ОперацииКСозданиюСменныхЗаданий.МожноНазначать           КАК МожноНазначать,
		|	ОперацииКСозданиюСменныхЗаданий.НужноНазначать           КАК НужноНазначать,
		|	ОперацииКСозданиюСменныхЗаданий.НарушенПорядокНазначения КАК НарушенПорядокНазначения,
		|	ОперацииКСозданиюСменныхЗаданий.Распоряжение             КАК Распоряжение,
		|	ОперацииКСозданиюСменныхЗаданий.НомерОперации            КАК НомерОперации,
		|	ОперацииКСозданиюСменныхЗаданий.НомерСледующейОперации   КАК НомерСледующейОперации,
		|	ОперацииКСозданиюСменныхЗаданий.Порядок                  КАК Порядок
		|ПОМЕСТИТЬ ВТОперации
		|ИЗ
		|	ВТКлючиОпераций КАК ВТКлючиОпераций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|		ПО ВТКлючиОпераций.Подразделение = ОперацииКСозданиюСменныхЗаданий.Подразделение
		|			И ВТКлючиОпераций.Этап = ОперацииКСозданиюСменныхЗаданий.Этап
		|			И ВТКлючиОпераций.Операция = ОперацииКСозданиюСменныхЗаданий.Операция
		|			И ВТКлючиОпераций.ИдентификаторОперации = ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации
		|			И ВТКлючиОпераций.СменноеЗадание = ОперацииКСозданиюСменныхЗаданий.СменноеЗадание
		|			И ВТКлючиОпераций.Исполнитель = ОперацииКСозданиюСменныхЗаданий.Исполнитель
		|			И ВТКлючиОпераций.РабочийЦентр = ОперацииКСозданиюСменныхЗаданий.РабочийЦентр
		|			И ВТКлючиОпераций.ВидРабочегоЦентра = ОперацииКСозданиюСменныхЗаданий.ВидРабочегоЦентра
		|			И ВТКлючиОпераций.НазначатьНеРанее = ОперацииКСозданиюСменныхЗаданий.НазначатьНеРанее");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ИзменитьОперации(МенеджерВременнныхТаблиц)
	
	СменныеЗадания = Новый Массив;
	
	ПараметрыОбработкиЭтапа = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
	ПараметрыОбработкиЭтапа.ОбновитьСостояние = Истина;
	
	Запрос = Новый Запрос(ТекстЗапросаИзменитьОперации());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнныхТаблиц;
	
	ВыборкаЭтап = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭтап.Следующий() Цикл
		СменныеЗадания.Очистить();
		
		ВыборкаСменноеЗадание = ВыборкаЭтап.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСменноеЗадание.Следующий() Цикл
			СменныеЗадания.Добавить(ВыборкаСменноеЗадание.СменноеЗадание);
			
			Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
			Набор.Отбор.СменноеЗадание.Установить(ВыборкаСменноеЗадание.СменноеЗадание);
			Набор.Отбор.Этап.Установить(ВыборкаЭтап.Этап);
			
			Выборка = ВыборкаСменноеЗадание.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Количество < 0 Тогда
					ВызватьИсключение НСтр("ru = 'Попытка изменить несуществующую операцию';
											|en = 'Attempt to change a non-existing operation'");
				ИначеЕсли Выборка.Количество > 0 Тогда
					ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				КонецЕсли;
			КонецЦикла;
			
			Набор.Записать();
		КонецЦикла;
		
		РассчитатьОперации(ВыборкаЭтап.Этап, СменныеЗадания);
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(ВыборкаЭтап.Этап, ПараметрыОбработкиЭтапа);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаИзменитьОперации()
	
	Возврат
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Подразделение          КАК Подразделение,
		|	ВложенныйЗапрос.Этап                   КАК Этап,
		|	ВложенныйЗапрос.Операция               КАК Операция,
		|	ВложенныйЗапрос.ИдентификаторОперации  КАК ИдентификаторОперации,
		|	ВложенныйЗапрос.СменноеЗадание         КАК СменноеЗадание,
		|	ВложенныйЗапрос.Исполнитель            КАК Исполнитель,
		|	ВложенныйЗапрос.РабочийЦентр           КАК РабочийЦентр,
		|	ВложенныйЗапрос.ВидРабочегоЦентра      КАК ВидРабочегоЦентра,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СменноеЗадание = ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос.НазначатьНеРанее
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ                                  КАК НазначатьНеРанее,
		|	СУММА(ВложенныйЗапрос.Количество)      КАК Количество,
		|	ВложенныйЗапрос.ВремяШтучное           КАК ВремяШтучное,
		|	ВложенныйЗапрос.ВремяПЗ                КАК ВремяПЗ,
		|	ВложенныйЗапрос.ВремяЕдИзм             КАК ВремяЕдИзм,
		|	ЛОЖЬ                                   КАК МожноНазначать,
		|	ЛОЖЬ                                   КАК НужноНазначать,
		|	ЛОЖЬ                                   КАК НарушенПорядокНазначения,
		|	ВложенныйЗапрос.Распоряжение           КАК Распоряжение,
		|	ВложенныйЗапрос.НомерОперации          КАК НомерОперации,
		|	ВложенныйЗапрос.НомерСледующейОперации КАК НомерСледующейОперации,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ВложенныйЗапрос.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос.Порядок
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                 КАК Порядок
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОперацииКСозданиюСменныхЗаданий.Подразделение            КАК Подразделение,
		|		ОперацииКСозданиюСменныхЗаданий.Этап                     КАК Этап,
		|		ОперацииКСозданиюСменныхЗаданий.Операция                 КАК Операция,
		|		ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации    КАК ИдентификаторОперации,
		|		ОперацииКСозданиюСменныхЗаданий.СменноеЗадание           КАК СменноеЗадание,
		|		ОперацииКСозданиюСменныхЗаданий.Исполнитель              КАК Исполнитель,
		|		ОперацииКСозданиюСменныхЗаданий.РабочийЦентр             КАК РабочийЦентр,
		|		ОперацииКСозданиюСменныхЗаданий.ВидРабочегоЦентра        КАК ВидРабочегоЦентра,
		|		ОперацииКСозданиюСменныхЗаданий.НазначатьНеРанее         КАК НазначатьНеРанее,
		|		ОперацииКСозданиюСменныхЗаданий.Количество               КАК Количество,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяШтучное             КАК ВремяШтучное,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяПЗ                  КАК ВремяПЗ,
		|		ОперацииКСозданиюСменныхЗаданий.ВремяЕдИзм               КАК ВремяЕдИзм,
		|		ОперацииКСозданиюСменныхЗаданий.Распоряжение             КАК Распоряжение,
		|		ОперацииКСозданиюСменныхЗаданий.НомерОперации            КАК НомерОперации,
		|		ОперацииКСозданиюСменныхЗаданий.НомерСледующейОперации   КАК НомерСледующейОперации,
		|		ОперацииКСозданиюСменныхЗаданий.Порядок                  КАК Порядок
		|	ИЗ
		|		РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|	ГДЕ
		|		ОперацииКСозданиюСменныхЗаданий.Этап В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Т.Этап
		|				ИЗ
		|					ВТОперации КАК Т)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТОперации.Подразделение,
		|		ВТОперации.Этап,
		|		ВТОперации.Операция,
		|		ВТОперации.ИдентификаторОперации,
		|		ВТОперации.СменноеЗадание,
		|		ВЫБОР
		|			КОГДА ВТОперации.Исполнитель В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка))
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ИНАЧЕ ВТОперации.Исполнитель
		|		КОНЕЦ,
		|		ВТОперации.РабочийЦентр,
		|		ВТОперации.ВидРабочегоЦентра,
		|		ВТОперации.НазначатьНеРанее,
		|		ВТОперации.Количество,
		|		ВТОперации.ВремяШтучное,
		|		ВТОперации.ВремяПЗ,
		|		ВТОперации.ВремяЕдИзм,
		|		ВТОперации.Распоряжение,
		|		ВТОперации.НомерОперации,
		|		ВТОперации.НомерСледующейОперации,
		|		ВТОперации.Порядок
		|	ИЗ
		|		ВТОперации КАК ВТОперации) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Распоряжение,
		|	ВложенныйЗапрос.ВремяШтучное,
		|	ВложенныйЗапрос.ВремяПЗ,
		|	ВложенныйЗапрос.ВремяЕдИзм,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.ВидРабочегоЦентра,
		|	ВложенныйЗапрос.Операция,
		|	ВложенныйЗапрос.СменноеЗадание,
		|	ВложенныйЗапрос.Исполнитель,
		|	ВложенныйЗапрос.Этап,
		|	ВложенныйЗапрос.РабочийЦентр,
		|	ВложенныйЗапрос.ИдентификаторОперации,
		|	ВложенныйЗапрос.НомерОперации,
		|	ВложенныйЗапрос.НомерСледующейОперации,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СменноеЗадание = ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос.НазначатьНеРанее
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ
		|ИТОГИ ПО
		|	Этап,
		|	СменноеЗадание";
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Операции к созданию сменных заданий';
			|en = 'Operations to create shift tasks'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Функция КлючНеКонтролироватьДанныеПриЗаписи() Экспорт
	
	Возврат "НеКонтролироватьДанныеПриЗаписи";
	
КонецФункции

Функция ТекстЗапросаКорректировкаОпераций()
	
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НазначенныеОперации.СменноеЗадание.Дата КАК Дата,
		|	Операции.Этап                           КАК Этап,
		|	Операции.ИдентификаторОперации          КАК ИдентификаторОперации,
		|	ОперацииПредш.ИдентификаторОперации     КАК ИдентификаторОперацииПредш,
		|	ОперацииПредш.Запланировано             КАК КоличествоВсего
		|ПОМЕСТИТЬ ВТСвязиОпераций
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Операции
		|		ПО НазначенныеОперации.Подразделение = Операции.Подразделение
		|			И НазначенныеОперации.Этап = Операции.Этап
		|			И НазначенныеОперации.Операция = Операции.Операция
		|			И НазначенныеОперации.ИдентификаторОперации = Операции.ИдентификаторОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОперацииПредш
		|		ПО НазначенныеОперации.Подразделение = ОперацииПредш.Подразделение
		|			И НазначенныеОперации.Этап = ОперацииПредш.Этап
		|			И (Операции.НомерОперации = ОперацииПредш.НомерСледующейОперации)
		|ГДЕ
		|	НазначенныеОперации.СменноеЗадание = &СменноеЗадание
		|	И НазначенныеОперации.НарушенПорядокНазначения
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НазначенныеОперации.СменноеЗадание.Дата КАК Дата,
		|	Операции.Этап                           КАК Этап,
		|	Операции.ИдентификаторОперации          КАК ИдентификаторОперации,
		|	Операции.ИдентификаторОперации          КАК ИдентификаторОперацииПредш,
		|	Операции.Запланировано                  КАК КоличествоВсего
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Операции
		|		ПО НазначенныеОперации.Подразделение = Операции.Подразделение
		|			И НазначенныеОперации.Этап = Операции.Этап
		|			И НазначенныеОперации.Операция = Операции.Операция
		|			И НазначенныеОперации.ИдентификаторОперации = Операции.ИдентификаторОперации
		|ГДЕ
		|	НазначенныеОперации.СменноеЗадание = &СменноеЗадание
		|	И НазначенныеОперации.НарушенПорядокНазначения
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИдентификаторОперации      КАК ИдентификаторОперации,
		|	ВложенныйЗапрос.ИдентификаторОперацииПредш КАК ИдентификаторОперацииПредш,
		|	ВложенныйЗапрос.КоличествоВсего            КАК КоличествоВсего,
		|	СУММА(ВложенныйЗапрос.Количество)          КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Связи.ИдентификаторОперации      КАК ИдентификаторОперации,
		|		Связи.ИдентификаторОперацииПредш КАК ИдентификаторОперацииПредш,
		|		Связи.КоличествоВсего            КАК КоличествоВсего,
		|		ЕСТЬNULL(Операции.Количество, 0) КАК Количество
		|	ИЗ
		|		ВТСвязиОпераций КАК Связи
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
		|			ПО Связи.Этап = Операции.Этап
		|				И Связи.ИдентификаторОперацииПредш = Операции.ИдентификаторОперации
		|				И (Операции.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка))
		|				И Связи.Дата >= Операции.СменноеЗадание.Дата
		|				И (НЕ Операции.НарушенПорядокНазначения)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Связи.ИдентификаторОперации,
		|		Связи.ИдентификаторОперацииПредш,
		|		Связи.КоличествоВсего,
		|		ВЫБОР
		|			КОГДА Операции.Количество ЕСТЬ NULL
		|				ТОГДА 0
		|			КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|				ТОГДА Операции.КоличествоФакт
		|			ИНАЧЕ Операции.Количество
		|		КОНЕЦ
		|	ИЗ
		|		ВТСвязиОпераций КАК Связи
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2 КАК Операции
		|			ПО Связи.Этап = Операции.Этап
		|				И Связи.ИдентификаторОперацииПредш = Операции.ИдентификаторОперации
		|				И Связи.Дата >= Операции.СменноеЗадание.Дата
		|				И (Операции.Проведен)
		|				И (НЕ Операции.ТребуетПовторения)
		|				И (Операции.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена))) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ИдентификаторОперации,
		|	ВложенныйЗапрос.ИдентификаторОперацииПредш,
		|	ВложенныйЗапрос.КоличествоВсего
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииКСозданиюСменныхЗаданий.*
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|ГДЕ
		|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = &СменноеЗадание
		|	И ОперацииКСозданиюСменныхЗаданий.НарушенПорядокНазначения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОперацииКСозданиюСменныхЗаданий.Этап,
		|	ОперацииКСозданиюСменныхЗаданий.НомерОперации,
		|	ОперацииКСозданиюСменныхЗаданий.Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииКСозданиюСменныхЗаданий.*
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|ГДЕ
		|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = &СменноеЗадание
		|	И НЕ ОперацииКСозданиюСменныхЗаданий.НарушенПорядокНазначения";
	
КонецФункции

Процедура ДобавитьВЗаданиеВФоне(Параметры, АдресХранилища) Экспорт
	
	Попытка
		
		ДобавитьВЗадание(Параметры.Операции, Параметры.СменноеЗадание);
		
	Исключение
		
		ПоместитьВоВременноеХранилище(
			Новый Структура("Сообщения", ПолучитьСообщенияПользователю()),
			АдресХранилища);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьНеназначенныеОперации(Этап) Экспорт
	
	Набор = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.СоздатьНаборЗаписей();
	Набор.Отбор.СменноеЗадание.Установить(Документы.СменноеЗадание.ПустаяСсылка());
	Набор.Отбор.Этап.Установить(Этап);
	Набор.Записать();
	
КонецПроцедуры

Функция ДанныеЗаполненияКонструктор()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("СпособЗаполнения", "ЗаполнитьПоОперации");
	ДанныеЗаполнения.Вставить("Статус");
	ДанныеЗаполнения.Вставить("КлючОперации", УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации());
	ДанныеЗаполнения.Вставить("СменноеЗадание");
	ДанныеЗаполнения.Вставить("Подразделение");
	ДанныеЗаполнения.Вставить("Исполнитель");
	ДанныеЗаполнения.Вставить("ВидРабочегоЦентра");
	ДанныеЗаполнения.Вставить("РабочийЦентр");
	ДанныеЗаполнения.Вставить("ВариантНаладки");
	ДанныеЗаполнения.Вставить("ЭтапСпецификации");
	ДанныеЗаполнения.Вставить("Количество");
	ДанныеЗаполнения.Вставить("Участок");
	ДанныеЗаполнения.Вставить("Распоряжение");
	ДанныеЗаполнения.Вставить("ПартияПроизводства");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияОпераций(СменноеЗадание, ТаблицаОпераций = Неопределено)
	
	Результат = Новый Массив;
	ПартииПроизводства = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ТаблицаОпераций = Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание          КАК СменноеЗадание,
		|	ОперацииКСозданиюСменныхЗаданий.Подразделение           КАК Подразделение,
		|	ОперацииКСозданиюСменныхЗаданий.Этап                    КАК Этап,
		|	ОперацииКСозданиюСменныхЗаданий.Этап.Этап               КАК ЭтапСпецификации,
		|	ОперацииКСозданиюСменныхЗаданий.Этап.Распоряжение       КАК Распоряжение,
		|	ОперацииКСозданиюСменныхЗаданий.Этап.ПартияПроизводства КАК ПартияПроизводства,
		|	ОперацииКСозданиюСменныхЗаданий.Операция                КАК Операция,
		|	ОперацииКСозданиюСменныхЗаданий.ИдентификаторОперации   КАК ИдентификаторОперации,
		|	ОперацииКСозданиюСменныхЗаданий.Исполнитель             КАК Исполнитель,
		|	ОперацииКСозданиюСменныхЗаданий.ВидРабочегоЦентра       КАК ВидРабочегоЦентра,
		|	ОперацииКСозданиюСменныхЗаданий.РабочийЦентр            КАК РабочийЦентр,
		|	ОперацииКСозданиюСменныхЗаданий.Операция.ВариантНаладки КАК ВариантНаладки,
		|	ОперацииКСозданиюСменныхЗаданий.Количество              КАК Количество,
		|	ЕСТЬNULL(Документ.Участок, ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка)) КАК Участок
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииКСозданиюСменныхЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК Документ
		|		ПО ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = Документ.Ссылка
		|ГДЕ
		|	ОперацииКСозданиюСменныхЗаданий.СменноеЗадание = &СменноеЗадание
		|
		|";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СменноеЗадание", СменноеЗадание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДанныеЗаполнения = ДанныеЗаполненияКонструктор();
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка,
				"СменноеЗадание, Подразделение, Исполнитель, ВидРабочегоЦентра, РабочийЦентр, ВариантНаладки, Участок, ЭтапСпецификации, Распоряжение, ПартияПроизводства, Количество");
				
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.КлючОперации, Выборка,
				"Этап,Операция,ИдентификаторОперации");
				
			Результат.Добавить(ДанныеЗаполнения);
			
			ПартииПроизводства.Добавить(ДанныеЗаполнения.ПартияПроизводства);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Операция Из ТаблицаОпераций Цикл
			
			ДанныеЗаполнения = ДанныеЗаполненияКонструктор();
			
			ДанныеЗаполнения.СменноеЗадание = СменноеЗадание;
			ДанныеЗаполнения.Подразделение = Операция.КлючОперации.Подразделение;
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Операция,
				"Исполнитель, ВидРабочегоЦентра, РабочийЦентр, ВариантНаладки, ЭтапСпецификации, Распоряжение, ПартияПроизводства, Количество");
				
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.КлючОперации, Операция.КлючОперации,
				"Этап,Операция,ИдентификаторОперации");
				
			Результат.Добавить(ДанныеЗаполнения);
			
			ПартииПроизводства.Добавить(ДанныеЗаполнения.ПартияПроизводства);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Партии.Ссылка                                                                         КАК ПартияПроизводства,
		|	Партии.ОсновноеИзделиеНоменклатура                                                    КАК Номенклатура,
		|	Партии.ОсновноеИзделиеХарактеристика                                                  КАК Характеристика,
		|	Партии.Спецификация                                                                   КАК Спецификация,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2)                         КАК Распоряжение,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).Подразделение           КАК ПодразделениеДиспетчер,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).НачатьНеРанее           КАК НачалоПроизводства,
		|	СУММА(ТабличнаяЧасть.Количество)                                                      КАК Количество
		|ИЗ
		|	Справочник.ПартииПроизводства КАК Партии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|			ПО Партии.Ссылка = ТабличнаяЧасть.Ссылка.ПартияПроизводства
		|				И Партии.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|				И Партии.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|				И НЕ ТабличнаяЧасть.Отменено
		|				И ТабличнаяЧасть.Ссылка.Проведен
		|ГДЕ
		|	Партии.Ссылка В (&Партии)
		|	И Партии.ТипПроцесса В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
		|
		|СГРУППИРОВАТЬ ПО
		|	Партии.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Партии.Ссылка                                                                         КАК ПартияПроизводства,
		|	Партии.ОсновноеИзделиеНоменклатура                                                    КАК Номенклатура,
		|	Партии.ОсновноеИзделиеХарактеристика                                                  КАК Характеристика,
		|	Партии.Спецификация                                                                   КАК Спецификация,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2)                         КАК Распоряжение,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).Подразделение           КАК ПодразделениеДиспетчер,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫРАЗИТЬ(Партии.Документ КАК Документ.ЗаказНаПроизводство2_2).НачатьНеРанее           КАК НачалоПроизводства,
		|	СУММА(ТабличнаяЧасть.Количество)                                                      КАК Количество
		|ИЗ
		|	Справочник.ПартииПроизводства КАК Партии
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|			ПО Партии.Ссылка = ТабличнаяЧасть.Ссылка.ПартияПроизводства
		|				И Партии.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|				И Партии.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|				И НЕ ТабличнаяЧасть.Отменено
		|				И ТабличнаяЧасть.Ссылка.Проведен
		|ГДЕ
		|	Партии.Ссылка В (&Партии)
		|	И Партии.ТипПроцесса В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
		|
		|СГРУППИРОВАТЬ ПО
		|	Партии.Ссылка
		|";
		
		Запрос.УстановитьПараметр("Партии", ПартииПроизводства);
		Запрос.Текст = ТекстЗапроса;
		
		СписокНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
		ПараметрыВыборки.ПереченьДанных.Добавить("Операции");
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать = Истина;
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
		ПараметрыВыборки.ПолучитьПромежуточныйВыпуск = Истина;
		
		ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки);
		
		СписокНоменклатуры.Индексы.Добавить("ПартияПроизводства");
		Для каждого ДанныеЗаполнения Из Результат Цикл
			
			Строка = СписокНоменклатуры.Найти(ДанныеЗаполнения.ПартияПроизводства, "ПартияПроизводства");
			Если Строка <> Неопределено Тогда
				ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификаций[СписокНоменклатуры.Индекс(Строка)]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
