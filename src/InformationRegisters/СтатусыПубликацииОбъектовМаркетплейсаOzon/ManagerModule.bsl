
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(УчетнаяЗаписьМаркетплейса.Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	// Дерево категорий
	Обработчик 									   = Обработчики.Добавить();
	Обработчик.Процедура 						   = "РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбработатьДанныеДляПереходаНаНовуюВерсию_ДеревоКатегорий";
	Обработчик.Версия							   = "2.5.16.58";
	Обработчик.РежимВыполнения 					   = "Отложенно";
	Обработчик.Идентификатор 					   = Новый УникальныйИдентификатор("44bda080-0d20-4e61-b905-f96b5c95495b");
	Обработчик.Многопоточный 					   = Истина;
	Обработчик.Порядок							   = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_ДеревоКатегорий";
	Обработчик.ПроцедураПроверки 				   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий						   = НСтр("ru = 'Устанавливает новые категории и типы товаров торговой площадки Ozon.';
															|en = 'Sets new categories and types of items of the Ozon trading platform.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовМаркетплейсов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СоответствияАтрибутовМаркетплейсов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовМаркетплейсов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СоответствияАтрибутовМаркетплейсов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ","); 

	// Схемы работы торговых площадок
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбработатьДанныеДляПереходаНаНовуюВерсию_СхемыРаботыТорговыхПлощадок";
	Обработчик.Версия = "2.5.17.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4551c40-5667-4c59-9528-8d01ff4cced1");   
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_СхемыРаботыТорговыхПлощадок";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает признак ""Продается по схеме работы FBO"" в регистре сведений ""Статусы публикации объектов маркетплейса Ozon"" для существующих карточек товаров. 
	|Проверяет, если в регистре сведений ""Соответствия объектов маркетплейсов"" есть склады со схемой работы ""FBS"", тогда устанавливает для всех товаров признак ""Продается по схеме работы FBS"", если в регистре сведений ""Соответствия объектов маркетплейсов"" есть склады со схемой работы ""DBS"" устанавливает признак ""Продается по схеме работы DBS"" для всех товаров.';
	|en = 'Sets the ""Sold by FBO work schema"" flag in the ""Publication status of Ozon objects"" information register for the existing item cards. 
	|If there are warehouses with the ""FBS"" work schema in the ""Marketplace object mappings"" information register, sets the ""Sold by FBS work schema"" flag for all items. If the ""Marketplace object mappings"" information register contains warehouses with the ""DBS"" work schema, sets the ""Sold by DBS work schema"" flag for all items.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовМаркетплейсов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");     
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СоответствияОбъектовМаркетплейсов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_ДеревоКатегорий(Параметры) Экспорт   

	ПараметрыВыборки					  = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
	ПараметрыВыборки.СпособВыборки		  = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", 			  "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И НЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса ПОДОБНО ""%~_%"" СПЕЦСИМВОЛ ""~""
		|	И НЕ ВЫРАЗИТЬ(СтатусыПубликацииОбъектовМаркетплейсаOzon.КодОшибки КАК СТРОКА(100)) = &ОшибкаКатегорияУстарела";
	
	Запрос.УстановитьПараметр("ОшибкаКатегорияУстарела", 
		ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаКатегорияУстарела);
	
	РегистрируемыеИзмерения = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеИзмерения, ДополнительныеПараметры);

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию_ДеревоКатегорий(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon;
	ПолноеИмяРегистра = МетаданныеОбъекта.ПолноеИмя();
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
	КэшКатегорий = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбновляемыеДанные.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаОбновляемыеДанные.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	ТаблицаОбновляемыеДанные.Номенклатура КАК Номенклатура,
		|	ТаблицаОбновляемыеДанные.Характеристика КАК Характеристика,
		|	ТаблицаОбновляемыеДанные.Упаковка КАК Упаковка,
		|	ТаблицаОбновляемыеДанные.ОбъектПубликации КАК ОбъектПубликации
		|ПОМЕСТИТЬ ВТ_ТаблицаОбновляемыеДанные
		|ИЗ
		|	&ТаблицаОбновляемыеДанные КАК ТаблицаОбновляемыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаОбновляемыеДанные.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТ_ТаблицаОбновляемыеДанные.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	ВТ_ТаблицаОбновляемыеДанные.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаОбновляемыеДанные.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаОбновляемыеДанные.Упаковка КАК Упаковка,
		|	ВТ_ТаблицаОбновляемыеДанные.ОбъектПубликации КАК ОбъектПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, НЕОПРЕДЕЛЕНО) КАК ИсточникКатегорииМаркетплейса
		|ИЗ
		|	ВТ_ТаблицаОбновляемыеДанные КАК ВТ_ТаблицаОбновляемыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ВТ_ТаблицаОбновляемыеДанные.УчетнаяЗаписьМаркетплейса)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ВТ_ТаблицаОбновляемыеДанные.ВидОбъектаМаркетплейса)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ВТ_ТаблицаОбновляемыеДанные.Номенклатура)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ВТ_ТаблицаОбновляемыеДанные.Характеристика)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ВТ_ТаблицаОбновляемыеДанные.Упаковка)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = ВТ_ТаблицаОбновляемыеДанные.ОбъектПубликации)
		|ИТОГИ ПО
		|	УчетнаяЗаписьМаркетплейса";
	
	ТаблицаОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Запрос.УстановитьПараметр("ТаблицаОбновляемыеДанные", ТаблицаОбновляемыеДанные);
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		// Получить данные с торговой площадки
		Идентификаторы     = Новый Массив;			// Массив Из Строка - 
		КэшИдентификаторов = Новый Соответствие;
		ОписаниеТоваров    = Неопределено;
		
		ВыборкаДанных = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса) 
					И СтрНайти(ВыборкаДанных.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
				Идентификаторы.Добавить(ВыборкаДанных.ИдентификаторОбъектаМаркетплейса);
				КэшИдентификаторов.Вставить(ВыборкаДанных.ИдентификаторПубликации, ВыборкаДанных.ИдентификаторОбъектаМаркетплейса);
			КонецЕсли;
		КонецЦикла;
		
		Если Идентификаторы.Количество() > 0 Тогда
			Отказ = Ложь;
			
			ПараметрыЗапроса = ИнтеграцияСМаркетплейсомOzonСервер.НовыеПараметрыЗапросаПолученияОписанияТоваров(, Идентификаторы,);
			ОписаниеТоваров  = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеТоваров(
				ВыборкаУчетныеЗаписи.УчетнаяЗаписьМаркетплейса, 
				ПараметрыЗапроса, 
				КэшКатегорий, 
				КэшИдентификаторов,
				Отказ);
				
			Если Отказ Тогда
				ТекстОшибки = НСтр("ru = 'При получении описания товаров с торговой площадки возникли ошибки.';
									|en = 'Errors occurred when receiving item descriptions from the trading platform.'");
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon,
					,
					ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Обновить данные
		ВыборкаДанных.Сбросить();
		Пока ВыборкаДанных.Следующий() Цикл
			НаборЗаписей = Неопределено;
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных();
				
				ЭлементБлокировки		= Блокировка.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				ЭлементБлокировки.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", ВыборкаДанных.УчетнаяЗаписьМаркетплейса);
				ЭлементБлокировки.УстановитьЗначение("ВидОбъектаМаркетплейса",	  ВыборкаДанных.ВидОбъектаМаркетплейса);
				ЭлементБлокировки.УстановитьЗначение("Номенклатура",			  ВыборкаДанных.Номенклатура);
				ЭлементБлокировки.УстановитьЗначение("Характеристика",			  ВыборкаДанных.Характеристика);
				ЭлементБлокировки.УстановитьЗначение("Упаковка",				  ВыборкаДанных.Упаковка);
				ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации",		  ВыборкаДанных.ОбъектПубликации);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ВыборкаДанных.УчетнаяЗаписьМаркетплейса);
				НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаДанных.ВидОбъектаМаркетплейса);
				НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДанных.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДанных.Характеристика);  
				НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаДанных.Упаковка);
				НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаДанных.ОбъектПубликации);
				НаборЗаписей.Прочитать();  
				
				Если НаборЗаписей.Количество() > 0
						И СтрНайти(НаборЗаписей[0].ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
					Запись = НаборЗаписей[0];
					
					НайденныеСтрокиОписаниеТоваров = Новый Массив;
					Если ЗначениеЗаполнено(НаборЗаписей[0].ИдентификаторОбъектаМаркетплейса) 
							И ОписаниеТоваров <> Неопределено Тогда
						Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", ВыборкаДанных.ИдентификаторОбъектаМаркетплейса);
						НайденныеСтрокиОписаниеТоваров = ОписаниеТоваров.НайтиСтроки(Отбор);
					КонецЕсли;
					
					Если НайденныеСтрокиОписаниеТоваров.Количество() > 0 Тогда
						ИдентификаторКатегорииМаркетплейса = НайденныеСтрокиОписаниеТоваров[0].ИдентификаторКатегорииМаркетплейса;
						НаименованиеКатегорииМаркетплейса  = НайденныеСтрокиОписаниеТоваров[0].НаименованиеКатегорииМаркетплейса;
						НаименованиеТипаТовараМаркетплейса = НаименованиеКатегорииМаркетплейса;
						
						Индекс = СтрНайти(НаименованиеТипаТовараМаркетплейса, Символы.НПП + ">" + Символы.НПП, НаправлениеПоиска.СКонца);
						Если Индекс > 0 Тогда
							НаименованиеТипаТовараМаркетплейса = Сред(НаименованиеТипаТовараМаркетплейса, Индекс + 3);
						КонецЕсли;
						
						Запись = НаборЗаписей[0];
						
						ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
						Если ТипЗнч(ДанныеОбъекта) = Тип("ТаблицаЗначений") Тогда
							Для Каждого ЭлементКоллекции Из ДанныеОбъекта Цикл
								ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
								ЭлементКоллекции.НаименованиеКатегорииМаркетплейса  = НаименованиеКатегорииМаркетплейса;
								
								Если ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
									ЭлементКоллекции.ИдентификаторЗначенияПоУмолчанию = СтрРазделить(ИдентификаторКатегорииМаркетплейса, "_", Истина)[1];
									ЭлементКоллекции.ЗначениеПоУмолчанию			  = НаименованиеТипаТовараМаркетплейса;
									
									ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса = ЭлементКоллекции.ИдентификаторЗначенияПоУмолчанию;
									ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса			   = ЭлементКоллекции.ЗначениеПоУмолчанию;
									ЭлементКоллекции.ЗначениеРеквизита1С					   = Неопределено;
									ЭлементКоллекции.НеЗаполненРеквизит1С					   = Истина;    
									ЭлементКоллекции.ПолныйПутьКРеквизиту1С					   = "";
									ЭлементКоллекции.ПредставлениеРеквизита1С				   = "";
									ЭлементКоллекции.НеЗаполненПутьКРеквизиту1С				   = Истина;
									ЭлементКоллекции.НеЗаполненоСоответствиеАтрибута		   = Истина;
									ЭлементКоллекции.НеЗаполненАтрибут						   = Не ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса);
									ЭлементКоллекции.УстановленоЗначениеПоУмолчанию			   = Не ЭлементКоллекции.НеЗаполненоСоответствиеАтрибута
																									И ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса)
																									И ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса = ЭлементКоллекции.ЗначениеПоУмолчанию;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Запись.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
						Запись.НаименованиеКатегорииМаркетплейса  = НаименованиеКатегорииМаркетплейса;
						Запись.ДанныеОбъекта					  = Новый ХранилищеЗначения(ДанныеОбъекта);
						Запись.ДатаОбновления					  = ТекущаяДатаСеанса();
						
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
						
						ПеренестиСоответствиеИзУстаревшейКатегории(ВыборкаДанных, ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса);
						ПеренестиАтрибутыИзУстаревшейКатегории(ВыборкаДанных, ИдентификаторКатегорииМаркетплейса);
						ПеренестиЗначенияАтрибутовИзУстаревшейКатегории(ВыборкаДанных, ИдентификаторКатегорииМаркетплейса);
						
					Иначе
						Запись.Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками;
						Запись.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаКатегорияУстарела;
						Запись.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Категория Ozon ""%1 (id %2)"" устарела. Необходимо указать действующую категорию торговой площадки в сопоставлении категорий и перевыбрать номенклатуру, характеристику или упаковку в текущей карточке товара.';
														|en = 'The ""%1 (id %2)"" Ozon category is outdated. Specify the valid trading platform category in category mapping and select the item, variant, or packaging unit in the current item card again.'"),
													НаименованиеКатегорииМаркетплейса,
													ИдентификаторКатегорииМаркетплейса);
						Запись.ДатаОбновления = ТекущаяДатаСеанса();
						
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					КонецЕсли;
					
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				Если НаборЗаписей = Неопределено Тогда
					НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ВыборкаДанных.УчетнаяЗаписьМаркетплейса);
					НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаДанных.ВидОбъектаМаркетплейса);
					НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДанных.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДанных.Характеристика);  
					НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаДанных.Упаковка);
					НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаДанных.ОбъектПубликации);
				КонецЕсли;
				
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НаборЗаписей);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ПеренестиСоответствиеИзУстаревшейКатегории(ДанныеТоварнойПозиции, ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса)

	НачатьТранзакцию();

	Попытка
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки		= Блокировка.Добавить("РегистрСведений.СоответствияОбъектовМаркетплейсов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",		 ДанныеТоварнойПозиции.УчетнаяЗаписьМаркетплейса);
		ЭлементБлокировки.УстановитьЗначение("ВидОбъектаМаркетплейса",			 Перечисления.ВидыОбъектовМаркетплейсов.КатегорияТоваров);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОбъектаМаркетплейса", ДанныеТоварнойПозиции.ИдентификаторКатегорииМаркетплейса);
		ЭлементБлокировки.УстановитьЗначение("Объект1С",						 ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса);
		
		Блокировка.Заблокировать();
		
		Запись 									= РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьМенеджерЗаписи();
		Запись.УчетнаяЗаписьМаркетплейса		= ДанныеТоварнойПозиции.УчетнаяЗаписьМаркетплейса;
		Запись.ВидОбъектаМаркетплейса			= Перечисления.ВидыОбъектовМаркетплейсов.КатегорияТоваров;
		Запись.ИдентификаторОбъектаМаркетплейса = ДанныеТоварнойПозиции.ИдентификаторКатегорииМаркетплейса;
		Запись.Объект1С							= ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.ИдентификаторОбъектаМаркетплейса = ИдентификаторКатегорииМаркетплейса;
			Запись.НаименованиеОбъектаМаркетплейса	= НаименованиеКатегорииМаркетплейса;
			Запись.ДатаАктуальности					= ТекущаяДатаСеанса();
			Запись.Записать(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеТоварнойПозиции.УчетнаяЗаписьМаркетплейса);
		НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Перечисления.ВидыОбъектовМаркетплейсов.КатегорияТоваров);
		НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеТоварнойПозиции.ИдентификаторКатегорииМаркетплейса);
		НаборЗаписей.Отбор.Объект1С.Установить(ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса);
		
		ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НаборЗаписей);
	КонецПопытки;

КонецПроцедуры

Процедура ПеренестиАтрибутыИзУстаревшейКатегории(ДанныеТоварнойПозиции, ИдентификаторКатегорииМаркетплейса)

	ИдентификаторКатегории1С      = СтрЗаменить(ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
	ИдентификаторВладельцаОбъекта = ИдентификаторКатегории1С + "/" + ДанныеТоварнойПозиции.ИдентификаторКатегорииМаркетплейса + "/";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторВладельцаОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Объект1С
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса ПОДОБНО &ИдентификаторВладельцаОбъектаМаркетплейса";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",                 ДанныеТоварнойПозиции.УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса", ИдентификаторВладельцаОбъекта + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		НачатьТранзакцию();
	
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			
			ЭлементБлокировкиДанных				   = БлокировкаДанных.Добавить("РегистрСведений.СоответствияОбъектовМаркетплейсов");
			ЭлементБлокировкиДанных.Режим		   = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса",				   "УчетнаяЗаписьМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ВидОбъектаМаркетплейса",					   "ВидОбъектаМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторОбъектаМаркетплейса",		   "ИдентификаторОбъектаМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторВладельцаОбъектаМаркетплейса", "ИдентификаторВладельцаОбъектаМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Объект1С",								   "Объект1С");
			
			БлокировкаДанных.Заблокировать();
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				Запись = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДанных);
				Запись.Прочитать();
				
				Если Запись.Выбран() Тогда
					Запись.ИдентификаторВладельцаОбъектаМаркетплейса = СтрЗаменить(
						Запись.ИдентификаторВладельцаОбъектаМаркетплейса,
						ИдентификаторВладельцаОбъекта,
						ИдентификаторКатегории1С + "/" + ИдентификаторКатегорииМаркетплейса + "/");
					Запись.ДатаАктуальности = ТекущаяДатаСеанса();
					Запись.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось перенести атрибуты устаревшей категории: %1% по причине: %2%';
					|en = 'Cannot transfer product options of the outdated category: %1%. Reason: %2%'"),
				ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СоответствияОбъектовМаркетплейсов,
				,
				ТекстСообщения);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ПеренестиЗначенияАтрибутовИзУстаревшейКатегории(ДанныеТоварнойПозиции, ИдентификаторКатегорииМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.Категория1С КАК Категория1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса
		|ИЗ
		|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|ГДЕ
		|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияАтрибутовМаркетплейсов.Категория1С = &Категория1С
		|	И СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса = &ИдентификаторКатегорииМаркетплейса";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",          ДанныеТоварнойПозиции.УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Категория1С",                        ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса);
	Запрос.УстановитьПараметр("ИдентификаторКатегорииМаркетплейса", ДанныеТоварнойПозиции.ИдентификаторКатегорииМаркетплейса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		НачатьТранзакцию();
	
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			
			ЭлементБлокировкиДанных				   = БлокировкаДанных.Добавить("РегистрСведений.СоответствияАтрибутовМаркетплейсов");
			ЭлементБлокировкиДанных.Режим		   = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса",			"УчетнаяЗаписьМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Категория1С",						"Категория1С");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторКатегорииМаркетплейса", "ИдентификаторКатегорииМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторАтрибутаМаркетплейса",  "ИдентификаторАтрибутаМаркетплейса");
			
			БлокировкаДанных.Заблокировать();
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				Запись = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДанных);
				Запись.Прочитать();
				
				Если Запись.Выбран() Тогда
					Запись.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
					Запись.ДатаАктуальности					  = ТекущаяДатаСеанса();
					Запись.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось перенести атрибуты устаревшей категории: %1% по причине: %2%';
					|en = 'Cannot transfer product options of the outdated category: %1%. Reason: %2%'"),
				ДанныеТоварнойПозиции.ИсточникКатегорииМаркетплейса,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СоответствияОбъектовМаркетплейсов,
				,
				ТекстСообщения);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию_СхемыРаботыТорговыхПлощадок(Параметры) Экспорт
		
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	НЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ПродаетсяПоСхемеРаботыFBO
	|	И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|";
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаРегистра, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию_СхемыРаботыТорговыхПлощадок(Параметры) Экспорт
		
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon;
	ПолноеИмяРегистра  = МетаданныеОбъекта.ПолноеИмя();
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра) Тогда 
		Параметры.ОбработкаЗавершена = ОбновлениеПредшествующихДанныхЗавершено_СхемыРаботыТорговыхПлощадок(); 
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;       
		КонецЕсли;
	КонецЕсли;  
			
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВЫБОР КОГДА СУММА(ПодЗапрос.ЕстьFBS) = 1 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ИспользуетсяСхемаFBS,
				   |	ВЫБОР КОГДА СУММА(ПодЗапрос.ЕстьDBS) = 1 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ИспользуетсяСхемаDBS
				   |ИЗ
				   |(ВЫБРАТЬ ПЕРВЫЕ 1
	               |	1 КАК ЕстьFBS,
				   |	0 КАК ЕстьDBS
	               |ИЗ
	               |	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	               |ГДЕ
	               |	СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBS
				   |	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
				   |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ 
				   |
				   |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	0 КАК ЕстьFBS,
				   |	1 КАК ЕстьDBS
	               |ИЗ
	               |	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	               |ГДЕ
	               |	СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыDBS 
				   |	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
				   |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
				   |) КАК ПодЗапрос";
	Результат = Запрос.Выполнить().Выбрать();
	
	ИспользуетсяСхемаFBS = Ложь;
	ИспользуетсяСхемаDBS = Ложь;
	
	Пока Результат.Следующий() Цикл
		ИспользуетсяСхемаFBS = Результат.ИспользуетсяСхемаFBS;
		ИспользуетсяСхемаDBS = Результат.ИспользуетсяСхемаDBS;
	КонецЦикла;    
	
	ТаблицаОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Для Каждого Строка Из ТаблицаОбновляемыеДанные Цикл
		
		НаборЗаписей = Неопределено;
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировки.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", Строка.УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировки.УстановитьЗначение("ВидОбъектаМаркетплейса", Строка.ВидОбъектаМаркетплейса);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);  
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Строка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Упаковка", Строка.Упаковка);
			ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", Строка.ОбъектПубликации); 
			Блокировка.Заблокировать();        
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(Строка.УчетнаяЗаписьМаркетплейса);
			НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Строка.ВидОбъектаМаркетплейса);
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Строка.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(Строка.Упаковка);
			НаборЗаписей.Отбор.ОбъектПубликации.Установить(Строка.ОбъектПубликации);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Запись.ПродаетсяПоСхемеРаботыFBO = Истина;
				Если ИспользуетсяСхемаFBS Тогда
					Запись.ПродаетсяПоСхемеРаботыFBS = Истина;
				КонецЕсли;
				
				Если ИспользуетсяСхемаDBS Тогда
					Запись.ПродаетсяПоСхемеРаботыDBS = Истина;
				КонецЕсли;
				
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если НаборЗаписей = Неопределено Тогда
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(Строка.УчетнаяЗаписьМаркетплейса);
				НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Строка.ВидОбъектаМаркетплейса);
				НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Строка.Характеристика);
				НаборЗаписей.Отбор.Упаковка.Установить(Строка.Упаковка);
				НаборЗаписей.Отбор.ОбъектПубликации.Установить(Строка.ОбъектПубликации);
			КонецЕсли;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НаборЗаписей);
		КонецПопытки;
		
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
		
КонецПроцедуры

Функция ОбновлениеПредшествующихДанныхЗавершено_СхемыРаботыТорговыхПлощадок()
	
	Запрос = Новый Запрос; 
	ЕстьОшибка = Ложь;
	Запрос.УстановитьПараметр("РежимВыполнения", Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяОбработчика = ""РегистрыСведений.СоответствияОбъектовМаркетплейсов.ОбработатьДанныеДляПереходаНаНовуюВерсию""
		|	И ОбработчикиОбновления.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбработчиковОбновления.Ошибка))
		|	И ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбработчикиОбновления.Статус,
		|	ОбработчикиОбновления.ИмяОбработчика";
	
	СтатусыОбработчиков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Обработчик Из СтатусыОбработчиков Цикл
		
		ТекстСообщения = НСтр("ru = 'Обновление зависимых данных завершено с ошибкой.
		|Не выполнен обработчик обновления';
		|en = 'Dependent data update completed with an error.
		|The update handler is not performed'") + " """ + Обработчик.ИмяОбработчика + """";
		
		ЕстьОшибка = Истина;
		ВызватьИсключение ТекстСообщения;
		
	КонецЦикла;
	
	Возврат ЕстьОшибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
