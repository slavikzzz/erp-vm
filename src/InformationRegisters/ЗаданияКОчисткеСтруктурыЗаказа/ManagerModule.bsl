#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет задания к расчету структуры заказа на производство
// 
// Параметры:
// 	ЗаказыНаПроизводство - Массив, ДокументСсылка.ЗаказНаПроизводство2_2	- заказ на производство или список заказов на производство.
Процедура ДобавитьЗадания(Знач ЗаказыНаПроизводство) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЗаказыНаПроизводство) = Тип("Массив") Тогда
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаказыНаПроизводство);
	Иначе
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказыНаПроизводство);
	КонецЕсли;
	
	КолонкиПоЗначению = Новый Структура("Очередь, Разделитель", Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь(), Новый УникальныйИдентификатор());
	
	НаборЗаписей = РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.СоздатьНаборЗаписей();
	
	Для каждого ЗаказНаПроизводство Из ЗаказыНаПроизводство Цикл
	
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, КолонкиПоЗначению);
		
		НоваяЗапись.ЗаказНаПроизводство = ЗаказНаПроизводство;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выбирает изменения из очереди и возращает номер очереди, в котором есть необработанные задания
// 
// Возвращаемое значение:
// 	Число - номер очереди
Функция ВыбратьИзменения(ГраницаРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Граница                       КАК Очередь,
	|	&Разделитель                   КАК Разделитель,
	|	Таблица.ЗаказНаПроизводство    КАК ЗаказНаПроизводство
	|ИЗ
	|	РегистрСведений.ЗаданияКОчисткеСтруктурыЗаказа КАК Таблица
	|ГДЕ 
	|	Таблица.Очередь = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ЗаказНаПроизводство
	|";
	Запрос.УстановитьПараметр("Граница", ГраницаРасчета);
	Запрос.УстановитьПараметр("Разделитель", Новый УникальныйИдентификатор);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКОчисткеСтруктурыЗаказа");
		ЭлементБлокировки.УстановитьЗначение("Очередь", 0);
		Блокировка.Заблокировать();
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Набор = РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			Набор.Записать(Ложь);
			
			Набор = РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.СоздатьНаборЗаписей();
			Набор.Отбор.Очередь.Установить(0);
			Набор.Записать(Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Очередь КАК Очередь
	|ИЗ
	|	РегистрСведений.ЗаданияКОчисткеСтруктурыЗаказа КАК Таблица
	|ГДЕ
	|	Таблица.Очередь > 0
	|УПОРЯДОЧИТЬ ПО
	|	Очередь ВОЗР";
	РезультатЗапроса = Запрос.Выполнить();
	
	НомерОчереди = ?(РезультатЗапроса.Пустой(), 0, РезультатЗапроса.Выгрузить()[0].Очередь);
	
	Возврат НомерОчереди;
	
КонецФункции

// Удаляет задания по номеру очереди
// 
// Параметры:
// 	Очередь - Число - номер очереди
Процедура УдалитьЗадания(Очередь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.СоздатьНаборЗаписей();
	Набор.Отбор.Очередь.Установить(Очередь);
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмя() Экспорт

	ПолноеИмя = Метаданные.РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.ПолноеИмя();

	Возврат ПолноеИмя;

КонецФункции

#КонецОбласти

#КонецЕсли