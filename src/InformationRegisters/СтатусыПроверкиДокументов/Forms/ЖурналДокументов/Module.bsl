#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	Элементы.ГруппаКомандПроверкаДокументов.Видимость = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов);
	
	ОбновитьОтборПоТипуДокумента();
	
	РазрешатьИзменятьПроверенныеФинансовыеДокументы = ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеФинансовыеДокументы");
	
	Если Параметры.Свойство("ДатаОкончанияПериода") И Не Параметры.ДатаОкончанияПериода = '39991231' Тогда
		Период.ДатаОкончания = Параметры.ДатаОкончанияПериода;
		УстановитьОтборПоПериоду(Список, Период);
	КонецЕсли;
	
	Параметры.Отбор.Свойство("Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация", 
		Организация, 
		,
		,
		ЗначениеЗаполнено(Организация));
	
	Параметры.Отбор.Свойство("СтатусПроверки", СтатусПроверки);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СтатусПроверки",
		СтатусПроверки,
		,
		, 
		ЗначениеЗаполнено(СтатусПроверки));
	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СтрНайти(ИмяСобытия, "Запись_") > 0 Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		Оповестить("ЗакрытаФормаСпискаДокументов");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроверкиОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СтатусПроверки",
		СтатусПроверки,
		,
		, 
		ЗначениеЗаполнено(СтатусПроверки));
	
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, СтрокаСписка.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьПроверку(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		МассивДокументов.Добавить(Данные.Документ);
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Ложь);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	НастроитьДоступностьКнопокСписка();
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		МассивДокументов.Добавить(Данные.Документ);
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Истина);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	НастроитьДоступностьКнопокСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	Отбор = Новый Структура("Регистратор", Документ);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ПроводкиМеждународногоУчета",
		ПараметрыФормы,
		Команда,
		Документ);
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиРеглУчета(Команда)
	
	//++ Локализация
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	Отбор = Новый Структура("Регистратор", Документ);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Обработка.ОтражениеДокументовВРеглУчете.Форма.ПроводкиРегламентированногоУчета",
		ПараметрыФормы,
		Команда,
		Документ);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду(Список, Период);
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусПроверки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не проверяется>';
																|en = '<not under check>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Номер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Список, Период)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "НачалоПериода", Период.ДатаНачала, ЗначениеЗаполнено(Период.ДатаНачала)); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "КонецПериода", Период.ДатаОкончания, ЗначениеЗаполнено(Период.ДатаОкончания)); 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, СтатусПроверки)
	
	СтрокаОшибок = "";
	ДанныеОбОшибках = Новый Соответствие;
	
	РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументов(МассивДокументов, ДанныеОбОшибках, СтатусПроверки);
	
	Если ДанныеОбОшибках.Количество() Тогда
		
		Для каждого Ошибка Из ДанныеОбОшибках Цикл
			СтрокаОшибок = СтрокаОшибок + Ошибка.Значение + ";" + Символы.ПС;
			ИндексОшибочногоДокументаВМассиве = МассивДокументов.Найти(Ошибка.Ключ);
			Если Не ИндексОшибочногоДокументаВМассиве = Неопределено Тогда
				МассивДокументов.Удалить(ИндексОшибочногоДокументаВМассиве);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаОшибок;
	
КонецФункции

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьОтбор" Тогда
		
		ОбновитьОтборПоТипуДокумента();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастроитьОтбор" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
		ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("ТолькоПоТипамДокументов", Истина);
		ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
		
		ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", 
			ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКнопокСписка()
	
	ПроверитьДоступность = Ложь;
	ОтменитьПроверкуДоступность = Ложь;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(СтрокаСписка);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтатусПроверкиВСтроке = ДанныеСтроки.СтатусПроверки;
			Если Не ПроверитьДоступность Тогда
				ПроверитьДоступность = 
					НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен")
					И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка");
			КонецЕсли;
			Если Не ОтменитьПроверкуДоступность Тогда
				ОтменитьПроверкуДоступность = 
					НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке")
					И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен")
					И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка");
			КонецЕсли;
			
			Если ПроверитьДоступность
				И ОтменитьПроверкуДоступность Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СписокПроверить.Доступность = ПроверитьДоступность;
	Элементы.СписокОтменитьПроверку.Доступность = ОтменитьПроверкуДоступность;
	
КонецПроцедуры
&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	ТЗТипыДокументов = ТЗХозОперацииИТипыДокументов.Скопировать(Новый Структура("Отбор", Истина), "ТипДокумента");
	ТЗТипыДокументов.Свернуть("ТипДокумента");
	
	ОтборТипыДокументов.ЗагрузитьЗначения(ТЗТипыДокументов.ВыгрузитьКолонку("ТипДокумента"));
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
		КлючНазначенияФормыПоУмолчанию(), НСтр("ru = 'Журнал проверяемых документов';
												|en = 'Journal of documents to check'"));
	
	Заголовок   = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	ТекущийКлюч = ДанныеРабочегоМеста.КлючНазначенияИспользования;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипДокумента",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ИнформационнаяНадписьОтбор = "";
	
	Если ТЗХозОперацииИТипыДокументов.Количество() = 0 Тогда
		
		ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
											НСтр("ru = 'Нет документов для отображения в журнале <a href=""%1"">Обновить</a>';
												|en = 'No documents to record in journal <a href=""%1"">Update</a>'"),
											"ОбновитьОтбор");
	Иначе
		
		ЕстьОтборы = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор",Ложь)).Количество() > 0;
		Если ЕстьОтборы Тогда
			
			КоличествоТипыДокументов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документа';
																									|en = ';%1 document;;%1 document;%1 documents;%1 document'"), ОтборТипыДокументов.Количество());
			
			ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
												НСтр("ru = 'Показаны %1 <a href=""%2"">Настроить</a>';
													|en = 'Shown %1 <a href=""%2"">Set up</a>'"),
												КоличествоТипыДокументов, "НастроитьОтбор");
			
		Иначе
			
			ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
											НСтр("ru = 'Показаны все документы журнала <a href=""%1"">Настроить</a>';
												|en = 'All journal documents are shown <a href=""%1"">Set up</a>'"),
											"НастроитьОтбор");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Элементы.ИнформационнаяНадписьОтбор.Заголовок = ИнформационнаяНадписьОтбор;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ЖурналПроверяемыхДокументов";
	
КонецФункции

&НаСервере
Процедура ОбновитьОтборПоТипуДокумента()
	
	ОтборТипыДокументов.Очистить();
	МассивИменДокументов = Новый Массив;
	Для каждого ТипДокумента Из Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.Измерения.Документ.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДокумента);
		Если НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ХозяйственныеОперацииИДокументы.Добавить();
		НоваяСтрока.ПолноеИмяДокумента = ОбъектМетаданных.ПолноеИмя();
		НоваяСтрока.Отбор = Истина;
		НоваяСтрока.ТипДокумента = Тип("ДокументСсылка." + ОбъектМетаданных.Имя);
		НоваяСтрока.ДокументПредставление = ОбъектМетаданных.Синоним;
		
		ОтборТипыДокументов.Добавить(НоваяСтрока.ТипДокумента);
		МассивИменДокументов.Добавить(НоваяСтрока.ПолноеИмяДокумента);
	КонецЦикла;
	
	ИдентификаторыОбъектовМетаданных = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(МассивИменДокументов);
	Для каждого СтрокаТаблицы Из ХозяйственныеОперацииИДокументы Цикл
		СтрокаТаблицы.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных[СтрокаТаблицы.ПолноеИмяДокумента];
	КонецЦикла;
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ХозяйственныеОперацииИДокументы.Выгрузить());
	
КонецПроцедуры

#КонецОбласти
