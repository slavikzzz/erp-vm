#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отмечает изменение статуса проверки документа.
// 
// Параметры:
//	МассивДокументов - Массив Из ДокументСсылка - ссылка на документ или массив документов,
//		являющийся измерением регистра "Статусы проверки документов" (см. измерение "Документ" данного регистра).
//	ДанныеОшибок - Соответствие из КлючИЗначение:
//		* Ключ - ДокументСсылка - ссылка на документ, при установке статуса которого возникла ошибка.
//		* Значение - Строка - описание ошибки.
//		Соответствие описаний ошибок документам (если не задано - данные об ошибках не фиксируются).
//	ДокументПроверен - Булево - Истина, если ставится пометка что документ проверен и ложь в противном случае.
//	 		Если необходимо поменять текущий статус можно не указывать значение данного параметра.
//
Процедура УстановитьСтатусПроверкиДокументов(Знач МассивДокументов, ДанныеОшибок = Неопределено, ДокументПроверен = Неопределено) Экспорт
	
	ФиксироватьОшибки = Не ДанныеОшибок = Неопределено;
	
	Если Не ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Документ = МассивДокументов;
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Документ);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов) Тогда
		Если ФиксироватьОшибки Тогда
			ДанныеОшибок.Вставить(МассивДокументов.Получить(0), НСтр("ru = 'У пользователя не достаточно прав для изменения данных о проверке документов';
																	|en = 'User is not authorized to change the document check data'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиДокумента = НСтр("ru = 'Недоступно изменение статуса проверки документа %1.
		|Возможно с документом работают другие пользователи.';
		|en = 'Cannot change the %1 document check status.
		|Other users may be working with the document.'");
	
	ТаблицаДокументов = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей().ВыгрузитьКолонки("Документ");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаДокументов, МассивДокументов, "Документ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ,
	|	ПроверкаДокументовПереопределяемый.Период,
	|	ПроверкаДокументовПереопределяемый.Организация,
	|	ПроверкаДокументовПереопределяемый.СтатусПроверки КАК СтатусПроверкиСтарый,
	|	ВЫБОР
	|		КОГДА НовыйСтатусПроверки.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ТОГДА &ТекущийПользователь
	|		ИНАЧЕ ПроверкаДокументовПереопределяемый.Проверил
	|	КОНЕЦ КАК Проверил,
	|	ВЫБОР
	|		КОГДА НовыйСтатусПроверки.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ТОГДА &ТекущаяДата
	|		ИНАЧЕ ПроверкаДокументовПереопределяемый.ДатаПроверки
	|	КОНЕЦ КАК ДатаПроверки,
	|	ВЫБОР
	|		КОГДА НовыйСтатусПроверки.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ТОГДА ПроверкаДокументовПереопределяемый.Изменил
	|		ИНАЧЕ &ТекущийПользователь
	|	КОНЕЦ КАК Изменил,
	|	ВЫБОР
	|		КОГДА НовыйСтатусПроверки.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ТОГДА ПроверкаДокументовПереопределяемый.ДатаИзменения
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаИзменения,
	|	НовыйСтатусПроверки.Ссылка КАК СтатусПроверки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
	|		ПО ТаблицаДокументов.Документ = ПроверкаДокументовПереопределяемый.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.СтатусыПроверкиФинансовыхДокументов КАК НовыйСтатусПроверки
	|		ПО НовыйСтатусПроверки.Ссылка = ВЫБОР
	|			КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО И ПроверкаДокументовПереопределяемый.СтатусПроверки <> ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен) ИЛИ &НовыйСтатусПроверки = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|			КОГДА &НовыйСтатусПроверки = ЛОЖЬ И ПроверкаДокументовПереопределяемый.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|		КОНЕЦ
	|ИТОГИ ПО
	|	Документ";
	
	// Пояснения к запросу:
	//	Проверил и ДатаПроверки - заполняются текущим пользователем тогда, когда новый статус проверки становится "Проверен";
	//	Изменил и ДатаИзменения - наоборот, когда статус проверки меняет статус на "НеПроверен" или на "КПовторнойПроверке";
	//	НовыйСтатусПроверки:
	//		1) Если параметр не указан, значит мы должны просто изменить текущий статус проверки документа
	//		на противоположный. Таким образом если ранее была отметка о проверке, то должно встать "КПовторнойПроверке",
	//		а если ранее документ был не проверен (или на повторной проверке) - то он должен стать проверенным.
	//		2) Если параметр истина (документ становится проверенным) - указываем статус "Проверен".
	//		3) Если параметр ложь (документ должен стать непроверенным) - указываем статус "Не проверен" когда документ
	//		никогда раньше не проверялся, в противном случае - "КПовторнойПроверке".
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("НовыйСтатусПроверки", ДокументПроверен);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(Запрос.Текст, "ТаблицаДокументов.Документ");
	
	Результат = Запрос.Выполнить();
	
	СтатусыПроверкиДокумента = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "СтатусыПроверкиДокументов");
	
	// Запишем изменения для документов, данные по которым ранее заносились в регистр:	
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
					
			ЗначенияБлокировки	= Новый Структура("Документ", ВыборкаПоДокументам.Документ);
			ОбщегоНазначенияУТ.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
			
			ЗаблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
			
			СтатусыПроверкиДокумента.Очистить();
			СтатусыПроверкиДокумента.Отбор.Документ.Установить(ВыборкаПоДокументам.Документ);
			
			Выборка = ВыборкаПоДокументам.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаписьРегистра = СтатусыПроверкиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				
			КонецЦикла;
			
			СтатусыПроверкиДокумента.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ФиксироватьОшибки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДокумента, ВыборкаПоДокументам.Документ);
				ДанныеОшибок.Вставить(ВыборкаПоДокументам.Документ, ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные о проверке документа.
//
//	Параметры:
//		ДокументСсылка - ДокументСсылка - ссылка на документ, для которого необходимо получить данные о проверке (см. измерение "Документ" данного регистра).
//
//	Возвращаемое значение:
//		Структура - содержит следующие данные:
//			* СтатусПроверки - ПеречислениеСсылка.СтатусыПроверкиФинансовыхДокументов - текущий статус проверки документа
//			* Проверен - Булево - признак проверки документа, если данных о проверке данного документа в базе нет - возвращает Ложь;
//			* Проверил - СправочникСсылка.Пользователи - последний пользователь, кто проверял документ, если никто не проверял - пустая ссылка;
//			* ДатаПроверки - Дата - дата и время последней проверки документа.
//			* БылПроверен - Булево - Признак того, что документ был ранее проверен.
//			* УведомительнаяПроверка - Булево - блокирует форму документа, если он проверен, по умолчанию равен ФО "РазрешатьИзменятьПроверенныеФинансовыеДокументы".
//
Функция ПолучитьДанныеПроверкиДокумента(ДокументСсылка) Экспорт
	
	СтруктураВозврата = ИнициализироватьДанныеПроверкиДокумента();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	СтатусыПроверкиДокументов.Организация КАК Организация,
	|	СтатусыПроверкиДокументов.Документ КАК Документ,
	|	СтатусыПроверкиДокументов.Проверил КАК Проверил,
	|	СтатусыПроверкиДокументов.ДатаПроверки КАК ДатаПроверки,
	|	СтатусыПроверкиДокументов.СтатусПроверки КАК СтатусПроверки,
	|	ЕСТЬNULL(Исключения.УведомительнаяПроверка, Константы.РазрешатьИзменятьПроверенныеФинансовыеДокументы) КАК УведомительнаяПроверка,
	|	СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен) КАК Проверен,
	|	СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|		ИЛИ СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке) КАК БылПроверен
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК Исключения
	|		ПО ТИПЗНАЧЕНИЯ(СтатусыПроверкиДокументов.Документ) = ТИПЗНАЧЕНИЯ(Исключения.ВидДокумента.ЗначениеПустойСсылки)
	|ГДЕ
	|	СтатусыПроверкиДокументов.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверен УБЫВ";
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устанавливает статус "Не проверен" для новых документов или отменяет проверку документу, если документ ранее был изменен.
//
//	Параметры:
//		ДокументСсылка - ДокументСсылка - ссылка на документ, для которого происходит запись статуса (см. измерение "Документ" данного регистра);
//		ДатаДокумента - Дата - Дата документа
//		Организации - Массив Из СправочникСсылка. - массив организаций, для которых необходимо отразить запись о проверке документа в регистре
//		ДанныеПроверки - см. ПолучитьДанныеПроверкиДокумента
//		ДопПараметры - Структура - Может содержать следующие свойства:
//			* ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - если передано "ВозвратИзЭксплуатации", тогда статус проверки
//										принудительно устанавливается в пустую ссылку, так как такие документы не должны проверяться.
//
Процедура УстановитьСтатусПроверкиДокументаПриЗаписи(ДокументСсылка,  ДатаДокумента, Организации, ДанныеПроверки, ДопПараметры = Неопределено) Экспорт
	
	ПроверкаДокументов = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПроверкаДокументов.Отбор.Документ.Установить(ДокументСсылка);
	ПроверкаДокументов.Очистить();
	
	СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.НеПроверен;
	Если ДанныеПроверки.Свойство("БылПроверен") И ДанныеПроверки.БылПроверен Тогда
		СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке;
	КонецЕсли;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ХозяйственнаяОперация") И ДопПараметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
			СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Организация Из Организации Цикл
		
		ЗаписьСтатусаПроверки = ПроверкаДокументов.Добавить();
	
		ЗаписьСтатусаПроверки.Документ = ДокументСсылка;
		ЗаписьСтатусаПроверки.Период = ДатаДокумента;
		ЗаписьСтатусаПроверки.Организация = Организация;
		
		ЗаписьСтатусаПроверки.ДатаИзменения = ТекущаяДатаСеанса();
		ЗаписьСтатусаПроверки.Изменил = Пользователи.ТекущийПользователь();
		ЗаписьСтатусаПроверки.СтатусПроверки = СтатусПроверки;
		ЗаписьСтатусаПроверки.Проверил = ДанныеПроверки.Проверил;
		ЗаписьСтатусаПроверки.ДатаПроверки = ДанныеПроверки.ДатаПроверки;
		
	КонецЦикла;
	
	ПроверкаДокументов.Записать();
	
КонецПроцедуры

// Получает данные о проверке документа.
//
//	Возвращаемое значение:
//		Структура - содержит следующие данные:
//			* СтатусПроверки - ПеречислениеСсылка.СтатусыПроверкиФинансовыхДокументов - текущий статус проверки документа
//			* Проверен - Булево - признак проверки документа, если данных о проверке данного документа в базе нет - возвращает Ложь;
//			* Проверил - СправочникСсылка.Пользователи - последний пользователь, кто проверял документ, если никто не проверял - пустая ссылка;
//			* ДатаПроверки - Дата - дата и время последней проверки документа.
//			* БылПроверен - Булево - Признак того, что документ был ранее проверен.
//			* УведомительнаяПроверка - Булево - блокирует форму документа, если он проверен, по умолчанию равен ФО "РазрешатьИзменятьПроверенныеФинансовыеДокументы".
//
Функция ИнициализироватьДанныеПроверкиДокумента() Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Проверен", Ложь);
	СтруктураВозврата.Вставить("Проверил", Справочники.Пользователи.ПустаяСсылка());
	СтруктураВозврата.Вставить("ДатаПроверки", Дата(1,1,1));
	СтруктураВозврата.Вставить("СтатусПроверки", Перечисления.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка());
	СтруктураВозврата.Вставить("БылПроверен", Ложь);
	СтруктураВозврата.Вставить("УведомительнаяПроверка", ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеФинансовыеДокументы"));
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецЕсли
