#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураМетаданных() Экспорт
	
	Результат = СтруктураЗаказаПовтИсп.СтруктураМетаданныхРегистра("ТрудозатратыСтруктурыЗаказа");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ТрудозатратыСтруктурыЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.70";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2602a5ef-47bf-4806-98cd-9b987b631a70");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ТрудозатратыСтруктурыЗаказа.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр ""Трудозатраты структуры заказа"" по данным документов ""Этап производства"".';
									|en = 'Fills the ""Order structure labor costs"" register based on the ""Production stage"" document data.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ТрудозатратыСтруктурыЗаказа.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ТрудозатратыСтруктурыЗаказа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрСведений.ТрудозатратыСтруктурыЗаказа";
	ПолноеИмяДокумента = "Документ.ЭтапПроизводства2_2";
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Разделитель");
	НеиспользуемыеПоля.Добавить("ДополнительнаяЗапись");
	НеиспользуемыеПоля.Добавить("ИдентификаторВерсииДанных");
	НеиспользуемыеПоля.Добавить("КлючСвязиСтрокаСпецификации");
	НеиспользуемыеПоля.Добавить("КоличествоНаЕдиницуПартииЗапуска");
	
	ПоляНесовместимыеСТипомНеопределено = Новый Массив;
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючВидРабот");
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючПартия");
	ПоляНесовместимыеСТипомНеопределено.Добавить("КлючНабор");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра",             ПолноеИмяРегистра);
	
	ЗапросВыборки = ОбновлениеИнформационнойБазыУТ.ЗапросРазличийОтраженияДокументовВНезависимомРегистре(
						Документы.ЭтапПроизводства2_2.АдаптированныйТекстЗапросаДвиженийПоРегистру("ТрудозатратыСтруктурыЗаказа"),
						ПолноеИмяРегистра,
						ПолноеИмяДокумента,
						НеиспользуемыеПоля);
	
	ТекстЗапросаВыборки = ЗапросВыборки.Текст;
	
	Для каждого Поле Из ПоляНесовместимыеСТипомНеопределено Цикл
		
		ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки,
											СтрЗаменить("ИЛИ ВложенныйЗапрос.Поле = НЕОПРЕДЕЛЕНО", "Поле", Поле),
											"");
		
	КонецЦикла;
	
	ТекстУсловиеПоУмолчанию = СтрЗаменить("ТаблицаРегистра.Ссылка ССЫЛКА ПолноеИмяДокумента",
											"ПолноеИмяДокумента",
											ПолноеИмяДокумента);
	
	ТекстУсловие            = СтрЗаменить("ИСТИНА В
										  |		(ВЫБРАТЬ ПЕРВЫЕ 1
										  |			ИСТИНА
										  |		ИЗ
										  |			ПолноеИмяДокумента КАК Таблица
										  |		ГДЕ
										  |			Таблица.УникальныйИдентификатор = ТаблицаРегистра.КлючНабор)",
										  "ПолноеИмяДокумента",
										  ПолноеИмяДокумента);
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, ТекстУсловиеПоУмолчанию, ТекстУсловие);
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.КлючНабор КАК КлючНабор
	|ИЗ
	|	&ТекстЗапросаВыборки КАК НеправильныеДвижения";
	
	ЗапросВыборки.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВыборки", "(" + ТекстЗапросаВыборки + ")");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		ЗапросВыборки.Выполнить().Выгрузить(),
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ТрудозатратыСтруктурыЗаказа";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
					Параметры.Очередь,
					ПолноеИмяРегистра,
					МенеджерВременныхТаблиц,
					ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Или Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Регистры = Новый Структура;
	Регистры.Вставить("ТрудозатратыСтруктурыЗаказа", "Таблица" + "ТрудозатратыСтруктурыЗаказа");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.КлючНабор КАК КлючНабор,
	|	ЭтапПроизводства2_2.Ссылка   КАК Ссылка
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО ДанныеДляОбработки.КлючНабор = ЭтапПроизводства2_2.УникальныйИдентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапПроизводства2_2.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Выборка.КлючНабор);
			НаборЗаписей.Прочитать();
			
			ТекущийДокумент = Выборка.Ссылка;
			
			Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
				
				СтруктураЗаказаПроведениеДокументов.ЗаписатьДанные(
					Документы.ЭтапПроизводства2_2.ДанныеДокументаДляПроведения(ТекущийДокумент, Регистры),
					ТекущийДокумент,
					Неопределено,
					Ложь);
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекущийДокумент = Выборка.Ссылка;
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущийДокумент);
			
			ШаблонОшибки = НСтр("ru = 'Не удалось добавить запись регистра ""Трудозатраты структуры заказа"" по этапу ""%1"":
									   |
									   |%2';
									   |en = 'Cannot add the record of the ""Order structure labor costs"" register for the ""%1"" stage:
									   |
									   |%2'");
			
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
										ТекущийДокумент,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ТрудозатратыСтруктурыЗаказа,
				ТекущийДокумент,
				ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
										Параметры.Очередь,
										ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли