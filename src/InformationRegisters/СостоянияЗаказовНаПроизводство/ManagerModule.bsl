#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает и записывает состояния заказов на производство.
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - набор заказов.
//
Процедура ОтразитьСостояние(Заказы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Заказы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаИзменений(МассивСсылок);
	ЗаписатьСостояния(Выборка);
	
КонецПроцедуры

// Очищает состояния заказов на производство.
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - набор заказов.
//
Процедура ОчиститьСостояние(Заказы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Заказы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		Набор = РегистрыСведений.СостоянияЗаказовНаПроизводство.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(Ссылка);
		Набор.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ТекстЗапросаВТСостоянияЭтапов()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка             КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Таблица.КодСостояния = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения)
		|		КОГДА Таблица.КодСостояния = 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению)
		|	КОНЕЦ                      КАК СостояниеНаМежцеховомУровне,
		|	Таблица.ТребуетОбеспечения КАК ТребуетОбеспечения
		|ПОМЕСТИТЬ ВТСостоянияЭтапов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Распоряжение КАК Ссылка,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА Таблица.СостояниеНаМежцеховомУровне = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения)
		|					ТОГДА 1
		|				КОГДА Таблица.СостояниеНаМежцеховомУровне = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению)
		|					ТОГДА 2
		|				ИНАЧЕ 3
		|			КОНЕЦ) КАК КодСостояния,
		|		МАКСИМУМ(Таблица.ТребуетОбеспечения) КАК ТребуетОбеспечения
		|	ИЗ
		|		РегистрСведений.СостоянияЭтаповПроизводства КАК Таблица
		|	ГДЕ
		|		Таблица.Распоряжение В(&МассивСсылок)
		|		И (Таблица.СостояниеНаМежцеховомУровне В (ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения),
		|													ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению))
		|				ИЛИ Таблица.ТребуетОбеспечения)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Таблица.Распоряжение) КАК Таблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТребуетсяСформироватьЭтапы()
	
	ТекстЗапроса = Документы.ЗаказНаПроизводство2_2.ТекстЗапросаВТТребуетсяСформироватьЭтапы();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТНезавершенныеЗаказы()
	
	ТекстЗапроса = Документы.ЗаказНаПроизводство2_2.ТекстЗапросаВТНезавершенныеЗаказы();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИзмененныеСостояния()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеквизитыДокумента.Ссылка             КАК Заказ,
		|
		|	ВЫБОР
		|		КОГДА НЕ ВТСостоянияЭтапов.Ссылка ЕСТЬ NULL И ВТСостоянияЭтапов.СостояниеНаМежцеховомУровне = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПроверитьЭтапы)
		|	
		|		КОГДА НЕ ВТТребуетсяСформироватьЭтапы.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяСформироватьЭтапы)
		|	
		|		КОГДА НЕ ВТСостоянияЭтапов.Ссылка ЕСТЬ NULL И ВТСостоянияЭтапов.СостояниеНаМежцеховомУровне = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПередатьЭтапыКВыполнению)
		|	
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ПустаяСсылка)
		|
		|	КОНЕЦ                                 КАК СостояниеЭтапов,
		|
		|	ВЫБОР
		|		КОГДА НЕ ВТСостоянияЭтапов.Ссылка ЕСТЬ NULL И ВТСостоянияЭтапов.ТребуетОбеспечения
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяОбеспечение)
		|		
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ПустаяСсылка)
		|
		|	КОНЕЦ                                 КАК СостояниеОбеспечения,
		|
		|	ВЫБОР
		|		КОГДА РеквизитыДокумента.ТипПроизводственногоПроцесса В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)) ТОГДА
		|
		|			ВЫБОР
		|				КОГДА ВТНезавершенныеЗаказы.Ссылка ЕСТЬ NULL
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.Выполнен)
		|
		|				КОГДА &ИспользуетсяГрафикПроизводства
		|						И РеквизитыДокумента.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1)
		|						И ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
		|							ГДЕ
		|								График.ОкончаниеЭтапа  > РеквизитыДокумента.ДатаПотребности
		|								И График.Распоряжение  = РеквизитыДокумента.Ссылка
		|								И График.СтатусГрафика = &СтатусРабочийГрафик)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.НарушенаДатаПотребности)
		|
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ПустаяСсылка)
		|				КОНЕЦ
		|
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовНаПроизводствоВОчереди.ПустаяСсылка)
		|
		|	КОНЕЦ                                 КАК СостояниеВыпуска,
		|
		|	ВЫБОР
		|		КОГДА РеквизитыДокумента.Проведен
		|				И РеквизитыДокумента.Статус = &СтатусКПроизводству
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                 КАК АктивныйСтатус
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК РеквизитыДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияЭтапов КАК ВТСостоянияЭтапов
		|		ПО ВТСостоянияЭтапов.Ссылка = РеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТребуетсяСформироватьЭтапы КАК ВТТребуетсяСформироватьЭтапы
		|		ПО ВТТребуетсяСформироватьЭтапы.Ссылка = РеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНезавершенныеЗаказы КАК ВТНезавершенныеЗаказы
		|		ПО ВТНезавершенныеЗаказы.Ссылка = РеквизитыДокумента.Ссылка
		|
		|ГДЕ 
		|	РеквизитыДокумента.Ссылка В (&МассивСсылок)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыборкаИзменений(МассивСсылок)
	
	ТекстыЗапроса = Новый Массив();
	
	ТекстЗапроса = ТекстЗапросаВТСостоянияЭтапов();
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВТТребуетсяСформироватьЭтапы();
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВТНезавершенныеЗаказы();
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаИзмененныеСостояния();
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.УстановитьПараметр("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
	
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("ИспользуетсяГрафикПроизводства", УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ЗаписатьСостояния(Выборка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.СостоянияЗаказовНаПроизводство.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(Выборка.Заказ);
		
		ДобавитьЗаписьВНабор(Выборка, Набор);
	
		Попытка
			
			Набор.Записать(Истина);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заказа по причине: %Причина%';
									|en = 'Cannot record state of order. Reason: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Заказ.Метаданные(), Выборка.Заказ, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьЗаписьВНабор(Выборка, Набор)
	
	Если Выборка.АктивныйСтатус
		И (Не Выборка.СостояниеЭтапов.Пустая()
			ИЛИ Не Выборка.СостояниеОбеспечения.Пустая()
			ИЛИ Не Выборка.СостояниеВыпуска.Пустая()
		) Тогда
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
	КонецЕсли;

КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Межцеховое управление';
				|en = 'Production scheduling and controlling'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Ошибка отражения состояния заказов в очереди';
					|en = 'Error recording order states in the queue'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
