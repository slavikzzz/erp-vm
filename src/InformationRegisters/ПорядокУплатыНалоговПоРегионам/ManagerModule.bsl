#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив налогов, для которых порядок уплаты авансов
// настраивается по регионам (см. КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам()).
//
// Параметры:
//  Период - Дата - если указана, то будут учтены разные даты перехода на новые настройки,
//					а в ином случае в результат попадут все налоги, порядок которых устанавливается
//                  по регионам (не важно, с какой даты произошел переход).
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыИмущественныхНалогов
//
Функция НалогиПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено) Экспорт
	
	Налоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период);
	
	Возврат Налоги;
	
КонецФункции

// Определяет, используются ли для налога региональные настройки уплаты. Конкретная дата начала использования региональных 
// настроек определяется в НачалоИспользованияНастроек().
// 
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов 
// 
// Возвращаемое значение: 
//  Булево 
//  		Истина - порядок уплаты настраивается в регистре ПорядокУплатыНалоговПоРегионам (дата начала
//  				 применения определяется отдельно),
//  		Ложь - порядок уплаты настраивается иначе (обычно в регистре ПорядокУплатыНалоговНаМестах).
//  
Функция ПорядокУплатыУстанавливаетсяПоРегионам(Налог) Экспорт
	
	РегиональныеНалоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам();
	
	Возврат РегиональныеНалоги.Найти(Налог) <> Неопределено;
	
КонецФункции

// Заполняет переданный список регионов значениями из адресного классификатора
// Параметры:
//  СписокРегионов	 	 - СписокЗначений из число.
//  ТолькоИспользуемые	 - Булево.
//  								Истина - в списке будут только те регионы, которые выбраны в регистрациях в налоговых органах.
//									Ложь - все регионы из адресного классификатора.
//	КодРегиона 			 - Строка - код текущего выбранного региона. Если указан, то в список добавляется только этот 1 регион
//
Процедура ЗаполнитьСписокВыбораРегиона(СписокРегионов, ТолькоИспользуемые = Ложь, КодРегиона = Неопределено) Экспорт
	
	СписокРегионов.Очистить();
	
	Если ЗначениеЗаполнено(КодРегиона) И КодРегиона <> "00" Тогда
		
		ШаблонПредставления = НСтр("ru = '%1';
									|en = '%1'");  //например: "Москва г"
		
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеРегиона);
			
		СписокРегионов.Добавить(КодРегиона, Представление);
		Возврат;
		
	КонецЕсли;
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	
	Если НЕ ТолькоИспользуемые Тогда
		
		ТаблицаРегионов = КлассификаторСубъектовРФ;
		
	Иначе
		
		// Запрос выбирает все коды регионов, которые выбраны в справочнике регистраций в налоговом органе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.КодРегиона КАК КодРегиона
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|";

		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаРегионов = РезультатЗапроса.Выбрать();
		
		ТаблицаРегионов = КлассификаторСубъектовРФ.СкопироватьКолонки();
		Пока ВыборкаРегионов.Следующий() Цикл
			
			СтрокаРегиона = ТаблицаРегионов.Добавить();
			СтрокаРегиона.КодСубъектаРФ = ВыборкаРегионов.КодРегиона;
			
			СтрокаКлассификатора = КлассификаторСубъектовРФ.Найти(СтрокаРегиона.КодСубъектаРФ, "КодСубъектаРФ");
			Если СтрокаКлассификатора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРегиона, СтрокаКлассификатора);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

	ШаблонПредставления = НСтр("ru = '%1 %2';
								|en = '%1 %2'");  //например: "Москва г"
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.Наименование,
			Регион.Сокращение);
		СписокРегионов.Добавить(Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН="), Представление);
	КонецЦикла;
	
	// Сортируем по наименованию региона
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

//  Возвращает дату начала использования новых настроек (форма настроек и/или регистр)
//
// Параметры:
//  Налог - строка - код задачи по налогу в списке задач (например, "ТранспортныйНалог")
// 
// Возвращаемое значение:
//  Дата - дата начала применения новой формы настроек и нового регистра (если применимо)
//
Функция НачалоИспользованияНастроек(Налог) Экспорт
	
	Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		Возврат '20210101';
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
		Возврат '20220101';
	Иначе
		 // Для земельного налога регистр не используется, но используется новая форма настроек
		Возврат '20210101';
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Коды налогов порядок которых настраивается по регионам.
// 
// Параметры:
//  Период - Неопределено, Дата - Период
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыИмущественныхНалогов - Коды налогов порядок которых настраивается по регионам.
Функция КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено)
	
	ТранспортныйНалог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог");
	НалогНаИмущество  = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество");
	
	Налоги = Новый Массив;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(ТранспортныйНалог) Тогда
		Налоги.Добавить(ТранспортныйНалог);
	КонецЕсли;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(НалогНаИмущество) Тогда
		Налоги.Добавить(НалогНаИмущество);
	КонецЕсли;
	
	Возврат Налоги;
	
КонецФункции

#Область ОбработчикиОбновления

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПорядокУплатыНалоговНаМестах";
	Обработчик.Версия = "2.5.15.14";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ЗарегистрироватьДанныеДляОбновления";
	Обработчик.ПроцедураПроверки   = "РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ВыполненоНачальноеЗаполнение";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПорядокУплатыНалоговПоРегионам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("bfd04a8e-2e5e-49b0-8a9e-bd6a90dec553");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет регистр ""Порядок уплаты налогов по регионам"" по данным регистра 
											|""Порядок уплаты налогов на местах"" для транспортного налога и налога на имущество.
											|В связи с этим ограничена настройка уплаты авансовых платежей, 
											|а также расчет транспортного налога и налога на имущество в закрытии месяца.';
											|en = 'Fills the ""Tax payment procedure by regions"" register based on the 
											|""Procedure for tax payment at the local level"" register for the vehicle and property taxes.
											|Due to this, the advance payment setting 
											|and the calculation of vehicle and property taxes are limited in the month-end closing.'");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеДляОбновления(Параметры) Экспорт
	ПолноеИмяОбъекта = "РегистрСведений.ПорядокУплатыНалоговПоРегионам";

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяОбъекта;
	
	// Зарегистрируем к обработке организации, по которым есть данные к переносу.
	// По транспортному налогу и налогу на имущество разные даты начала применения новых настроек.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокУплатыНалоговНаМестах.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалоговНаМестах
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестах.Период >= &ПериодПоТранспортномуНалогу
	|	И ПорядокУплатыНалоговНаМестах.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог)
	|	И ЕСТЬNULL(ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане.КодРегиона, """") <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокУплатыНалоговНаМестах.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалоговНаМестах
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестах.Период >= &ПериодПоНалогуНаИмущество
	|	И ПорядокУплатыНалоговНаМестах.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество)
	|	И ЕСТЬNULL(ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане.КодРегиона, """") <> """"";
	
	Запрос.УстановитьПараметр("ПериодПоТранспортномуНалогу", НачалоИспользованияНастроек(Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог));
	Запрос.УстановитьПараметр("ПериодПоНалогуНаИмущество", НачалоИспользованияНастроек(Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество));
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить();

	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры, СписокОрганизаций, ДополнительныеПараметры);
		
КонецПроцедуры

// Процедура - обработчик обновления. Заполняет текущий регистр данными
// из регистра сведений ПорядокУплатыНалоговНаМестах по транспортному налогу и налогу на имущество.
//
// Параметры:
//  Параметры - Структура - см. документацию БСП для отложенных обработчиков обновления
//
Процедура ЗаполнитьДаннымиПрежнегоРегистраПорядокУплатыНалоговНаМестах(Параметры) Экспорт
	// Заполним новый регистр на дату начала его использования. Для этого выбираем нужные 
	// данные из прежнего регистра. 
	// Переносим данные одной порцией, т.к. ожидается, что записей получится немного
	// (максимум по 86 на каждую организацию).
	Параметры.ОбработкаЗавершена = Ложь;
	
	ТранспортныйНалог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог");
	НалогНаИмущество =  ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"// Данные для записи в новый регистр.
	|ВЫБРАТЬ
	|	ПорядокУплатыНалогов.Период КАК Период,
	|	ПорядокУплатыНалогов.Организация КАК Организация,
	|	ПорядокУплатыНалогов.Налог КАК Налог,
	|	ПорядокУплатыНалогов.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	МАКСИМУМ(ПорядокУплатыНалогов.УплачиваютсяАвансы) КАК УплачиваютсяАвансы
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалогов
	|ГДЕ
	|	ПорядокУплатыНалогов.Период >= ВЫБОР
	|		КОГДА ПорядокУплатыНалогов.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог)
	|			ТОГДА &НачалоПримененияНовыхНастроекПоТранспортномуНалогу
	|		КОГДА ПорядокУплатыНалогов.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество)
	|			ТОГДА &НачалоПримененияНовыхНастроекПоНалогуНаИмущество
	|	КОНЕЦ
	|	И ПорядокУплатыНалогов.Налог В (&Налоги)
	|	И ПорядокУплатыНалогов.РегистрацияВНалоговомОргане.КодРегиона <> """"""""
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУплатыНалогов.Период,
	|	ПорядокУплатыНалогов.Организация,
	|	ПорядокУплатыНалогов.Налог,
	|	ПорядокУплатыНалогов.РегистрацияВНалоговомОргане.КодРегиона
	|ИТОГИ
	|ПО
	|	Организация
	|;
	|// Данные для удаления из старого регистра.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокУплатыНалогов.Период КАК Период,
	|	ПорядокУплатыНалогов.Организация КАК Организация,
	|	ПорядокУплатыНалогов.Налог КАК Налог,
	|	ПорядокУплатыНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалогов
	|ГДЕ
	|	ПорядокУплатыНалогов.Период >= ВЫБОР
	|		КОГДА ПорядокУплатыНалогов.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог)
	|			ТОГДА &НачалоПримененияНовыхНастроекПоТранспортномуНалогу
	|		КОГДА ПорядокУплатыНалогов.Налог = ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество)
	|			ТОГДА &НачалоПримененияНовыхНастроекПоНалогуНаИмущество
	|	КОНЕЦ
	|	И ПорядокУплатыНалогов.Налог В (&Налоги)
	|	И ПорядокУплатыНалогов.РегистрацияВНалоговомОргане.КодРегиона <> """"""""
	|ИТОГИ
	|ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("НачалоПримененияНовыхНастроекПоТранспортномуНалогу", 
									НачалоИспользованияНастроек(ТранспортныйНалог));

	Запрос.УстановитьПараметр("НачалоПримененияНовыхНастроекПоНалогуНаИмущество", 
									НачалоИспользованияНастроек(НалогНаИмущество));
	
	СписокНалогов = Новый Массив;
	СписокНалогов.Добавить(ТранспортныйНалог);
	СписокНалогов.Добавить(НалогНаИмущество);
	Запрос.УстановитьПараметр("Налоги", СписокНалогов);
	
	ПакетныйРезультат = Запрос.ВыполнитьПакет();
	
	Результат = ПакетныйРезультат.Получить(0);
	УдаляемыеЗаписи = ПакетныйРезультат.Получить(1);
	
	Если Не Результат.Пустой() Тогда

		ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаПоОрганизациям.Следующий() Цикл

			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаПоОрганизациям.Организация);

			ДанныеПоОрганизации = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.Прямой);

			Пока ДанныеПоОрганизации.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ДанныеПоОрганизации);
			КонецЦикла;

			НачатьТранзакцию();
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
				// Удалим из старого регистра данные, перенесенные в новый.
				ВыборкаУдаляемыхПоОрганизациям = УдаляемыеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ВыборкаУдаляемыхПоОрганизациям.НайтиСледующий(Новый Структура("Организация",
																				ВыборкаПоОрганизациям.Организация));

				УдаляемыеДанные = ВыборкаУдаляемыхПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.Прямой);
				УдалитьЗаписиСтарогоРегистра(УдаляемыеДанные);
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоОрганизациям.Организация);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Процедуре ""РегистрСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПорядокУплатыНалоговНаМестах""
									 |не удалось перенести данные из прежнего регистра по причине:
									 |%1';
									 |en = 'The ""РегистрСведений.ПорядокУплатыНалоговПоРегионам.ЗаполнитьДаннымиПрежнегоРегистраПорядокУплатыНалоговНаМестах"" procedure
									 |cannot transfer data from the previous register. Reason:
									 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;

	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры 

// Удалить записи старого регистра сведений.
// 
// Параметры:
//  УдаляемыеДанные - ВыборкаИзРезультатаЗапроса - Удаляемые данные
Процедура УдалитьЗаписиСтарогоРегистра(УдаляемыеДанные)
	
	Пока УдаляемыеДанные.Следующий() Цикл
		УдаляемыйНабор = РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьНаборЗаписей();
		
		УдаляемыйНабор.Отбор.Период.Установить(УдаляемыеДанные.Период);
		УдаляемыйНабор.Отбор.Организация.Установить(УдаляемыеДанные.Организация);
		УдаляемыйНабор.Отбор.Налог.Установить(УдаляемыеДанные.Налог);
		УдаляемыйНабор.Отбор.РегистрацияВНалоговомОргане.Установить(УдаляемыеДанные.РегистрацияВНалоговомОргане);
		
		УдаляемыйНабор.Прочитать();
		УдаляемыйНабор.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(УдаляемыйНабор, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполненоНачальноеЗаполнение(Параметры) Экспорт
	
	// Здесь нет смысла анализировать отдельные записи: 
	// обработчик обновления (см. ЗаполнитьДаннымиПрежнегоРегистра()) 
	// либо выполнится и одним действием заполнит новый регистр настроек (в таком случае данная проверка вообще не вызывается),
	// либо не выполнится, и тогда полностью блокируем работу с новыми настройками (возвращаем Ложь).
	Возврат Ложь;
		
КонецФункции

#КонецОбласти
#КонецОбласти
#КонецЕсли
