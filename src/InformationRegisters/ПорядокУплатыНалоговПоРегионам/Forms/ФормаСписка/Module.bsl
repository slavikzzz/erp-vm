
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиУчетаФормаСписка.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Налог = Параметры.Налог;
	РегиональныеНалоги = РегистрыСведений.ПорядокУплатыНалоговПоРегионам.НалогиПорядокКоторыхНастраиваетсяПоРегионам();
		
	Если ЗначениеЗаполнено(Налог) И РегиональныеНалоги.Найти(Налог) = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Настройка налога по регионам не предусмотрена';
								|en = 'Tax setting by regions is not supported'");
	КонецЕсли;	
			
	Если Не ЗначениеЗаполнено(Налог) И РегиональныеНалоги.Количество() = 1 Тогда
		// Если налог не указан в параметрах, то заполним здесь
		Налог = РегиональныеНалоги[0];
	КонецЕсли;	
	
	ВыборНалогаДоступен = Истина;
	Если ЗначениеЗаполнено(Налог) Тогда	
	
		ВыборНалогаДоступен = Ложь;
	
		Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Налог на имущество: уплата авансов (история)';
							|en = 'Property tax: advance payment (history)'");
		ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Транспортный налог: уплата авансов (история)';
							|en = 'Vehicle tax: advance payment (history)'");
		КонецЕсли;
				                                                                 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Налог",
			Налог,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
		
	УстановитьУсловноеОформление();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьИсторияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПорядокУплатыНалоговНаМестах" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Налог", Налог);
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", ОтборОрганизация));
		Иначе
			ЭлементОтбораОрганизация = ОтборыСписковКлиентСервер.ЭлементОтбораСпискаПоИмени(Список, "Организация");
			БыстрыйОтборОрганизация = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
				ЭлементОтбораОрганизация.ИдентификаторПользовательскойНастройки); 
			
			Если БыстрыйОтборОрганизация <> Неопределено 
				 И БыстрыйОтборОрганизация.Использование 
				 И ЗначениеЗаполнено(БыстрыйОтборОрганизация.ПравоеЗначение) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", БыстрыйОтборОрганизация.ПравоеЗначение));
			КонецЕсли;
		
		КонецЕсли;
	
		ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговНаМестах.ФормаСписка",
			ПараметрыФормы,
			ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборНалогаДоступен", ВыборНалогаДоступен);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);
	
	ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговПоРегионам.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Налог
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Налог");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВыборНалогаДоступен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Наименования регионов
	ТаблицаРегионов = АдресныйКлассификатор.СубъектыРФ();
	
	ШаблонПредставления = НСтр("ru = '%1, %2 %3';
								|en = '%1, %2 %3'");  //например: "77, Москва г" 
	Для Каждого Регион Из ТаблицаРегионов Цикл
				
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.КодСубъектаРФ,
			Регион.Наименование,
			Регион.Сокращение);
			
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодРегиона");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.КодРегиона", ВидСравненияКомпоновкиДанных.Равно, Регион.КодСубъектаРФ);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Представление);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
