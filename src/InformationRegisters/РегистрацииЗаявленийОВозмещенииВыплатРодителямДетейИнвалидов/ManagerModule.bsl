///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ИсходящийДокумент)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ИсходящийДокумент)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИдентификаторСообщения - Строка - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИдентификаторСообщения) Экспорт
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдентификаторСообщения);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить регистрацию уведомления о прекращении отпуска по уходу %1 по причине: %2';
				|en = 'Cannot change registration of a notification to terminate the child care leave %1 due to: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком,
			ИдентификаторСообщения,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#Область ОбновлениеИнформационнойБазы

// Повторно рассчитывает статус в регистрациях ответов на запросы ФСС для расчета пособий.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ОбновитьСостоянияНеСоовпадающиеСДокументом(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.РегистрацияИдентификатор КАК РегистрацияИдентификатор
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Регистр
	|ГДЕ
	|	Регистр.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументаСЭДОФСС.Отправлен)
	|	И Регистр.РегистрацияИдентификатор <> """"";
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегистрацияИдентификатор");
	СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, , Идентификаторы);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

Процедура ЗаполнитьПоДокументу(Запись, ИсходящийДокументОбъект) Экспорт
	Запись.ИсходящийДокумент   = ИсходящийДокументОбъект.Ссылка;
	Запись.ГоловнаяОрганизация = ИсходящийДокументОбъект.ГоловнаяОрганизация;
	Запись.Страхователь        = ИсходящийДокументОбъект.Страхователь;
КонецПроцедуры

Функция НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, РезультатБРО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	Регистрация.ИсходящийДокумент КАК ИсходящийДокумент,
	|	Регистрация.Страхователь КАК Страхователь,
	|	Регистрация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Регистрация
	|ГДЕ
	|	Регистрация.ИдентификаторСообщения = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Регистрация.ИдентификаторСообщения,
	|	Регистрация.ИсходящийДокумент,
	|	Регистрация.Страхователь,
	|	Регистрация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Регистрация
	|ГДЕ
	|	Регистрация.РегистрацияИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Регистрация.ИдентификаторСообщения,
	|	Регистрация.ИсходящийДокумент,
	|	Регистрация.Страхователь,
	|	Регистрация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Регистрация
	|ГДЕ
	|	Регистрация.ДоставкаИдентификаторПакета = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Таблица = Запрос.Выполнить().Выгрузить();
	Найденные = Таблица.Скопировать(Новый Структура("Страхователь", Страхователь));
	Если Найденные.Количество() = 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Найденные = Таблица.Скопировать(Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
		Если Найденные.Количество() = 0 Тогда
			Найденные = Таблица;
		КонецЕсли;
	КонецЕсли;
	Если Найденные.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""';
				|en = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""'"),
			Страхователь,
			Метаданные.РегистрыСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов.ПредставлениеЗаписи,
			ИдентификаторСообщения);
		СЭДОФСС.ОшибкаОбработки(РезультатБРО, ТекстОшибки);
	КонецЕсли;
	Возврат Найденные;
КонецФункции

// Загружает ошибку логического контроля (тип 14) полученную в ответ на документ СЭДО 120.
Процедура ЗагрузитьОшибкуСообщения120(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	Запись.Страхователь           = Страхователь;
	Запись.ЕстьОшибкиФЛК          = Истина;
	Запись.ТекстОшибкиФЛК         = ТекстОшибки;
	
	ЗаполнитьСостояниеРегистрацииИСтатусДокумента(Запись);
	
	ЗавершитьЗаписьНабора(Набор);
	
КонецПроцедуры

// Загружает ответ на заявление о возмещении расходов на оплату дней ухода за детьми-инвалидами.
Процедура ЗагрузитьСообщение121(Страхователь, РегистрацияИдентификатор, ТекстXML, Результат, Кэш) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	// Пример:
	//<n1:disabilityChildrenStatementResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//    xmlns:n1="http://www.fss.ru/integration/types/pvso/disabilitychildren/v01"
	//    responseOn="b0776790-ac5b-4582-9f07-6a1068dd75a9">
	//	<n1:status>1</n1:status>
	//</n1:disabilityChildrenStatementResponse>
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "disabilityChildrenStatementResponse");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'status']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM;
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "noticeTerminationResponse");
		Возврат;
	КонецЕсли;
	
	АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
	ИдентификаторСообщения = АтрибутыКорня.responseOn;
	
	// Если идентификатор не заполнен, значит файл не соответствует схеме.
	Если ИдентификаторСообщения = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаАтрибута(Результат, "responseOn");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиАтрибута(Результат, "responseOn");
		Возврат;
	КонецЕсли;
	
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "status, errorList");
	РегистрацияСтатус = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.status);
	РегистрацияТекстОшибки = СЭДОФСС.ПредставлениеСпискаОшибокXML(РеквизитыКорня.errorList);
	РегистрацияДата = СЭДОФСС.ДатаСообщения(РегистрацияИдентификатор, Кэш);
	
	ВозможныеСтатусы = ВозможныеСтатусы();
	СведенияОСтатусе = ВозможныеСтатусы.Найти(РегистрацияСтатус, "Статус");
	Если СведенияОСтатусе = Неопределено Тогда
		РегистрацияУспех = Ложь;
	Иначе
		РегистрацияУспех = СведенияОСтатусе.Зарегистрирован;
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Попытка
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.ИдентификаторСообщения   = ИдентификаторСообщения;
		Иначе
			Запись = Набор[0];
			Если ЗначениеЗаполнено(Запись.РегистрацияСтатус)
				И РегистрацияИдентификатор <> Запись.РегистрацияИдентификатор
				И РегистрацияДата < Запись.РегистрацияДата Тогда
				ОтменитьЗаписьНабора(Набор);
				Возврат; // Более старая регистрация.
			КонецЕсли;
		КонецЕсли;
		
		Запись.ДоставкаУспех            = Истина; // По факту наличия регистрации считаем документ доставленным.
		Запись.РегистрацияУспех         = РегистрацияУспех;
		Запись.РегистрацияДата          = РегистрацияДата;
		Запись.РегистрацияСтатус        = РегистрацияСтатус;
		Запись.РегистрацияТекстОшибки   = РегистрацияТекстОшибки;
		Запись.РегистрацияИдентификатор = РегистрацияИдентификатор;
		
		ЗаполнитьСостояниеРегистрацииИСтатусДокумента(Запись);
		
		ЗавершитьЗаписьНабора(Набор);
	Исключение
		ОтменитьЗаписьНабора(Набор);
		ВызватьИсключение;
	КонецПопытки;
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция ВозможныеСтатусы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Статус");
	Результат.Колонки.Добавить("Зарегистрирован");
	Результат.Колонки.Добавить("Расшифровка");
	Результат.Колонки.Добавить("Состояние");
	
	// Статусы из актуальной спецификации.
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "0";
	СтрокаТаблицы.Зарегистрирован = Ложь;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Не принят Фондом';
										|en = 'Not accepted by the Fund'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "1";
	СтрокаТаблицы.Зарегистрирован = Истина;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Принят';
										|en = 'Accepted'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	
	СтрокаТаблицы = Результат.Добавить();
	СтрокаТаблицы.Статус          = "2";
	СтрокаТаблицы.Зарегистрирован = Ложь;
	СтрокаТаблицы.Расшифровка     = НСтр("ru = 'Произошла техническая ошибка. Необходимо повторно отправить документ позже';
										|en = 'A technical error occurred. Resend the document later'");
	СтрокаТаблицы.Состояние       = Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
	
	Возврат Результат;
КонецФункции

Функция ЗаполнитьСостояниеРегистрацииИСтатусДокумента(Запись) Экспорт
	СостояниеИзменилось = ЗаполнитьСостояниеРегистрации(Запись);
	
	Если СостояниеИзменилось И ЗначениеЗаполнено(Запись.ИсходящийДокумент) Тогда
		ДокументОбъект = Запись.ИсходящийДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ЗаполнитьСтатусДокумента(Запись) Тогда
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеИзменилось;
КонецФункции

Функция ЗаполнитьСостояниеРегистрации(Запись) Экспорт
	СтароеСостояние = Запись.Состояние;
	Запись.Состояние = СостояниеРегистрации(Запись);
	Возврат СтароеСостояние <> Запись.Состояние;
КонецФункции

Функция СостояниеРегистрации(Запись) Экспорт
	
	Если Не ЗначениеЗаполнено(Запись.ДоставкаДата) И Не ЗначениеЗаполнено(Запись.ДатаОтправкиОператору) Тогда
		// Не отправлен.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
		
	ИначеЕсли ЗначениеЗаполнено(Запись.ДоставкаТекстОшибки) Тогда
		// Ошибка при отправке.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ОшибкаПриОтправке;
		
	ИначеЕсли Запись.ЕстьОшибкиФЛК Тогда
		// Отправлен, получены ошибки.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ОшибкаЛогическогоКонтроля;
		
	ИначеЕсли ЗначениеЗаполнено(Запись.ОтказВВозмещении) Тогда
		// Фонд отказал в возмещении.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
		
	КонецЕсли;
	
	// Заполнена дата отправка и есть информация о статусе.
	СведенияОСтатусе = ВозможныеСтатусы().Найти(Запись.РегистрацияСтатус, "Статус");
	Если СведенияОСтатусе <> Неопределено Тогда
		Возврат СведенияОСтатусе.Состояние;
	КонецЕсли;
	
	Если Запись.ОтправленОператору И Не Запись.ДоставкаУспех Тогда
		// Передан оператору для доставки.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ОтправленОператору;
		
	ИначеЕсли Не ЗначениеЗаполнено(Запись.РегистрацияСтатус) Тогда
		// Отправлен - заполнена дата отправка, нет информации о статусе.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.Отправлен;
		
	Иначе
		// Успешная доставка, заполнен статус, статус неизвестен.
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.НеПринят;
	КонецЕсли;
	
КонецФункции

Функция ТекстОшибкиНеизвестныйСтатусРегистрации(Статус) Экспорт
	Возврат СтрШаблон(НСтр("ru = 'Недокументированный статус регистрации: %1';
							|en = 'Undocumented registration status: %1'"), Статус);
КонецФункции

Процедура ЗаполнитьСписокВыбораСтатусов(ПолеВвода, Статус) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		ВозможныеСтатусы = ВозможныеСтатусы();
		Для Каждого СтрокаТаблицы Из ВозможныеСтатусы Цикл
			СписокВыбора.Добавить(СтрокаТаблицы.Статус, СтрокаТаблицы.Расшифровка + " (" + СтрокаТаблицы.Статус + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) И СписокВыбора.НайтиПоЗначению(Статус) = Неопределено Тогда
		СписокВыбора.Добавить(Статус, ТекстОшибкиНеизвестныйСтатусРегистрации(Статус));
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиОтказа(ОтказВВозмещенииОбъект, ЗначенияРеквизитовДоЗаписи) Экспорт
	Если Не ОтказВВозмещенииОбъект.Загружен Тогда
		Возврат;
	КонецЕсли;
	ЕстьВходящееЗаявление = ЗначениеЗаполнено(ОтказВВозмещенииОбъект.ВходящееЗаявление);
	ЕстьВходящееЗаявлениеДоЗаписи = ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ВходящееЗаявление)
		И ОтказВВозмещенииОбъект.ВходящееЗаявление <> ЗначенияРеквизитовДоЗаписи.ВходящееЗаявление;
	Если Не ЕстьВходящееЗаявление И Не ЕстьВходящееЗаявлениеДоЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацииЗаявлений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	РегистрацииЗаявлений.ИсходящийДокумент КАК ИсходящийДокумент,
	|	РегистрацииЗаявлений.ОтказВВозмещении КАК ОтказВВозмещении
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК РегистрацииЗаявлений
	|ГДЕ
	|	РегистрацииЗаявлений.ИсходящийДокумент = &ВходящееЗаявление
	|	И РегистрацииЗаявлений.ОтказВВозмещении <> &ОтказВВозмещении
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацииЗаявлений.ИдентификаторСообщения,
	|	РегистрацииЗаявлений.ИсходящийДокумент,
	|	РегистрацииЗаявлений.ОтказВВозмещении
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК РегистрацииЗаявлений
	|ГДЕ
	|	РегистрацииЗаявлений.ИсходящийДокумент = &ВходящееЗаявлениеДоЗаписи
	|	И РегистрацииЗаявлений.ОтказВВозмещении = &ОтказВВозмещении";
	
	Запрос.УстановитьПараметр("ОтказВВозмещении", ОтказВВозмещенииОбъект.Ссылка);
	Если ЕстьВходящееЗаявление Тогда
		Запрос.УстановитьПараметр("ВходящееЗаявление", ОтказВВозмещенииОбъект.ВходящееЗаявление);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрацииЗаявлений.ИсходящийДокумент = &ВходящееЗаявление", "ЛОЖЬ");
	КонецЕсли;
	Если ЕстьВходящееЗаявлениеДоЗаписи Тогда
		Запрос.УстановитьПараметр("ВходящееЗаявлениеДоЗаписи", ЗначенияРеквизитовДоЗаписи.ВходящееЗаявление);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрацииЗаявлений.ИсходящийДокумент = &ВходящееЗаявлениеДоЗаписи", "ЛОЖЬ");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если ЕстьВходящееЗаявление
			И СтрокаТаблицы.ИсходящийДокумент = ОтказВВозмещенииОбъект.ВходящееЗаявление Тогда
			Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИдентификаторСообщения);
			Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(Набор);
			Иначе
				Запись = Набор[0];
				Запись.ОтказВВозмещении = ОтказВВозмещенииОбъект.Ссылка;
				ЗаполнитьСостояниеРегистрацииИСтатусДокумента(Запись);
				ЗавершитьЗаписьНабора(Набор);
			КонецЕсли;
		ИначеЕсли ЕстьВходящееЗаявлениеДоЗаписи
			И СтрокаТаблицы.ИсходящийДокумент = ЗначенияРеквизитовДоЗаписи.ВходящееЗаявление Тогда
			Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИдентификаторСообщения);
			Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(Набор);
			Иначе
				Запись = Набор[0];
				Запись.ОтказВВозмещении = Неопределено;
				ЗаполнитьСостояниеРегистрацииИСтатусДокумента(Запись);
				ЗавершитьЗаписьНабора(Набор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОСтатусеВыплатыПособия

Процедура ПриЗаписиУведомленияОСтатусеВыплатыПособия(Документ, УдалитьСсылки = Неопределено) Экспорт
	Если Не Документ.Загружен Тогда
		Возврат;
	КонецЕсли;
	Если УдалитьСсылки = Неопределено Тогда
		УдалитьСсылки = Документ.ПометкаУдаления
			Или Не ЗначениеЗаполнено(Документ.СтатусВыплаты)
			Или Не ЗначениеЗаполнено(Документ.ГоловнаяОрганизация)
			Или Не ЗначениеЗаполнено(Документ.ИдентификаторРеестра);
	КонецЕсли;
	Если УдалитьСсылки Тогда
		УдалитьСсылкиНаУведомленияОСтатусеВыплатыПособия(Документ.Ссылка);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Документ.ИдентификаторРеестра) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Документ.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СтатусВыплаты", Документ.СтатусВыплаты);
	Запрос.УстановитьПараметр("ИдентификаторРеестра", Документ.ИдентификаторРеестра);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистр.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Регистр
	|		ПО Шапка.ИдентификаторСообщения = Регистр.ИдентификаторСообщения
	|ГДЕ
	|	Шапка.ИдентификаторРеестра = &ИдентификаторРеестра
	|	И Шапка.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Регистр.ВыплатаСтатус <= &СтатусВыплаты";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИдентификаторСообщения);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.ВыплатаСсылка = Документ.Ссылка;
			Запись.ВыплатаСтатус = Документ.СтатусВыплаты;
			Запись.ВыплатаУспех = (Запись.ВыплатаСтатус = 3);
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСсылкиНаУведомленияОСтатусеВыплатыПособия(ВыплатаСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.ИсходящийДокумент КАК ИсходящийДокумент
	|ИЗ
	|	РегистрСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов КАК Шапка
	|ГДЕ
	|	Шапка.ВыплатаСсылка = &ВыплатаСсылка";
	Запрос.УстановитьПараметр("ВыплатаСсылка", ВыплатаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИсходящийДокумент);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.ВыплатаСсылка = Неопределено;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли