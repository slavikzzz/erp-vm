#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(Метаданные.Константы.НомерЗаданияКРасчетуАмортизацииНМА.Имя);
	
КонецФункции

// Возвращает период с которого требуется расчет амортизации.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Массив организаций.
// 
// Возвращаемое значение:
//  Дата - Начало месяца на который требуется расчет амортизации.
//
Функция НачалоРасчета(СписокОрганизаций) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Организация В (&СписокОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.НачалоРасчета;
	
КонецФункции

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//  НачалоПериода	 - Дата	- Начало периода выборки данных.
//  ОкончаниеПериода - Дата	- Конец периода выборки данных.
//  НомерЗадания	 - Число	- Номер задания.
//	Организации - Массив из СправочникСсылка.Организации - Фильтр по организации.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства:
//		* СписокОрганизаций - Массив из СправочникСсылка.Организации - Организации, для которых есть задания.
//		* НачалоПериода - Дата - Дата первого задания.
//		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит в себе временную таблицу ЗаданияКРасчету.
//
Функция ЗаданияКРасчету(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерПакета,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|
	|ПОМЕСТИТЬ ЗаданияКРасчету
	|
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Задания
	|
	|ГДЕ
	|	(Задания.Месяц >= &НачалоПериода 
	|		ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1,1,1))
	|	И (Задания.Месяц <= &ОкончаниеПериода
	|		ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1,1,1))
	|
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&Организации)
	|			ИЛИ &ПоВсемОрганизациям)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияКРасчету.Организация
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ЗаданияКРасчету.Месяц), ДАТАВРЕМЯ(1,1,1)) КАК НачалоПериода
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Выборка.Следующий();
	
	ЗаданияКРасчету = Новый Структура;
	ЗаданияКРасчету.Вставить("СписокОрганизаций", Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ЗаданияКРасчету.Вставить("НачалоПериода", Выборка.НачалоПериода);
	ЗаданияКРасчету.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ЗаданияКРасчету;
	
КонецФункции

// Определяет необходимость расчета в заданном периоде.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Список организаций.
//  Период				 - Дата		 - Проверяемый период.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется расчет.
//
Функция ТребуетсяРасчет(СписокОрганизаций, Период) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаТребуетсяРасчетАмортизацииНМА(Период);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
		|			&Период, 
		|			Организация В (&Организация)) КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюБУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|			&Период, 
		|			Организация В (&Организация)) КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюУУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаНМАБУ КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюБУ
		|	И НачислениеАмортизации.Организация В(&Организация)
		|	И НачислениеАмортизации.Период >= &Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаНМАУУ КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюУУ
		|	И НачислениеАмортизации.Организация В(&Организация)
		|	И НачислениеАмортизации.Период >= &Период
		|";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Если РасчетАмортизацииНМА.АмортизацияМожетНачислятьсяСДатыПринятияКУчету(СписокОрганизаций, Период) Тогда
		Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Иначе	
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции
 
// Фиксирует удачное выполнение операции.
// 
// Параметры:
//  Период - Дата - Период
//  СписокОрганизаций - Массив - Список организаций
//  НомерДоРасчета - Число - Номер до расчета
//  ПакетыАмортизации - ТаблицаЗначений - Пакеты амортизации
Процедура ЗафиксироватьРасчет(Период, СписокОрганизаций, НомерДоРасчета, ПакетыАмортизации = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	// Добавление записей на следующий период
	ЗаданияНаСледующийПериод = ЗаданияНаСледующийПериод(Период, СписокОрганизаций, НомерДоРасчета, ПакетыАмортизации);
	Если ЗаданияНаСледующийПериод <> Неопределено Тогда
		Для каждого Выборка Из ЗаданияНаСледующийПериод Цикл
			НоваяЗапись = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.НомерЗадания = НомерДоРасчета;
			НоваяЗапись.Записать(Истина);
		КонецЦикла;
	КонецЕсли; 
		
	// Удаление заданий, по которым был выполнен расчет
	Если ПакетыАмортизации <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПакетыАмортизации.Организация КАК Организация,
		|	ПакетыАмортизации.НомерПакета КАК НомерПакета
		|ПОМЕСТИТЬ ПакетыАмортизации
		|ИЗ
		|	&ПакетыАмортизации КАК ПакетыАмортизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц КАК Месяц,
		|	Задания.НомерПакета КАК НомерПакета,
		|	Задания.Организация КАК Организация,
		|	Задания.НомерЗадания КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Задания
		|ГДЕ
		|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Задания.НомерЗадания <= &НомерЗадания
		|	И (Задания.Организация, Задания.НомерПакета) В
		|		(ВЫБРАТЬ
		|			ПакетыАмортизации.Организация,
		|			ПакетыАмортизации.НомерПакета
		|		ИЗ
		|			ПакетыАмортизации КАК ПакетыАмортизации)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц КАК Месяц,
		|	Задания.НомерПакета КАК НомерПакета,
		|	Задания.Организация КАК Организация,
		|	Задания.НомерЗадания КАК НомерЗадания
		|
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК Задания
		|
		|ГДЕ
		|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Задания.НомерЗадания <= &НомерЗадания
		|	И Задания.Организация В (&СписокОрганизаций)
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("НомерЗадания", НомерДоРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПакетыАмортизации", ПакетыАмортизации);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Записать(); 
	КонецЦикла;
		
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, НомерПакета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(
				СтруктураПолей.Месяц, 
				СтруктураПолей.Документ, 
				СтруктураПолей.Организация, 
				СтруктураПолей.НомерПакета, 
				НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к расчету амортизации НМА за %1 в организации %2 по причине: %3';
				|en = 'Cannot generate a job to calculate intangible asset amortization for %1 in company %2. Reason: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца';
										|en = 'Month-end closing'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет новое задание.
//
// Параметры:
//  ПериодЗадания	 - Дата - Месяц в котором добавляется задание.
//  ДокументЗадания	 - ДокументСсылка - Документ, который изменение которого привело к созданию задания.
//  Организация		 - СправочникСсылка.Организации - Организация, для которой добавляется задание.
//  НомерПакета		 - Число - Номер пакета основных средств.
//  НомерЗадания	 - Число - Номер задания.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания, Организация, НомерПакета, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	// Запишем задания
	НачатьТранзакцию();
	Попытка
	
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли; 
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.НомерПакета  = НомерПакета;
		НаборЗаписей.Организация  = Организация;
		НаборЗаписей.Документ     = ДокументЗадания;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВыработкаНМА", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПервоначальныеСведенияНМА", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПорядокУчетаНМАБУ", "Период", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПараметрыАмортизацииНМАБУ", "Период", "РегламентныеОперации", "Организация");
	
КонецПроцедуры

// Возвращает перечень объектов метаданных, на основании данных которых формируются записи в регистре.
//
//Возвращаемое значение:
// Массив из ОбъектМетаданных
Функция ВходящиеДанныеМеханизма() Экспорт
	
	ВходящиеДанные = Новый Массив;
	ВходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ВыработкаНМА);
	ВходящиеДанные.Добавить(Метаданные.РегистрыНакопления.СтоимостьНМА);

	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.МестоУчетаНМА);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАУУ);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМА);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ);
	ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ);
	
	Возврат ВходящиеДанные;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущийНомерЗадания()
	УстановитьПривилегированныйРежим(Истина);
	ТекущийНомерЗадания = Константы.НомерЗаданияКРасчетуАмортизацииНМА.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТекущийНомерЗадания;
КонецФункции

Функция ЗаданияНаСледующийПериод(Период, СписокОрганизаций, НомерДоРасчета, ПакетыАмортизации)

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Задания на следующий месяц, если на начало месяца есть объекты, по которым начисляется амортизация
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоСледующегоМесяца", КонецМесяца(Период) + 1);
	Запрос.УстановитьПараметр("КонецСледующегоМесяца", КонецМесяца(КонецМесяца(Период) + 1));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПакетыАмортизации", ПакетыАмортизации);
	Запрос.УстановитьПараметр("ИспользоватьОтборНМА", ПакетыАмортизации <> Неопределено);

	СписокЗапросов = Новый Массив;
	
	Если ПакетыАмортизации <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПакетыАмортизации.Организация КАК Организация,
		|	ПакетыАмортизации.НомерПакета КАК НомерПакета
		|
		|ПОМЕСТИТЬ ПакетыАмортизации
		|
		|ИЗ
		|	&ПакетыАмортизации КАК ПакетыАмортизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПакетыАмортизации.Организация КАК Организация, 
		|	ПакетыАмортизации.НематериальныйАктив КАК НематериальныйАктив
		|
		|ПОМЕСТИТЬ ОтборОС
		|
		|ИЗ
		|	РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизации
		|
		|ГДЕ
		|	(Организация, НомерПакета) В 
		|		(ВЫБРАТЬ
		|			ПакетыАмортизации.Организация, 
		|			ПакетыАмортизации.НомерПакета
		|		ИЗ
		|			ПакетыАмортизации КАК ПакетыАмортизации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив,
		|	Организация";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК НомерПакета
		|
		|ПОМЕСТИТЬ ПакетыАмортизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК НематериальныйАктив
		|ПОМЕСТИТЬ ОтборОС
		|";
		
	КонецЕсли;
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета,
	|	&НачалоСледующегоМесяца КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеАмортизации.Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
	|			&КонецМесяца, 
	|			Организация В (&СписокОрганизаций)
	|				И (НЕ &ИспользоватьОтборНМА
	|					ИЛИ (Организация, НематериальныйАктив) В 
	|							(ВЫБРАТЬ
	|								ОтборОС.Организация, 
	|								ОтборОС.НематериальныйАктив
	|							ИЗ
	|								ОтборОС КАК ОтборОС))) КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.НематериальныйАктив = НачислениеАмортизации.НематериальныйАктив
	|	ГДЕ
	|		НачислениеАмортизации.НачислятьАмортизациюУУ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НачислениеАмортизации.Организация КАК Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|			&КонецМесяца, 
	|			Организация В (&СписокОрганизаций)
	|				И (НЕ &ИспользоватьОтборНМА
	|					ИЛИ (Организация, НематериальныйАктив) В 
	|							(ВЫБРАТЬ
	|								ОтборОС.Организация, 
	|								ОтборОС.НематериальныйАктив
	|							ИЗ
	|								ОтборОС КАК ОтборОС))) КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.НематериальныйАктив = НачислениеАмортизации.НематериальныйАктив
	|	ГДЕ
	|		(НачислениеАмортизации.НачислятьАмортизациюБУ
	|			ИЛИ НачислениеАмортизации.НачислятьАмортизациюНУ)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АмортизацияНМА.Организация КАК Организация,
	|		АмортизацияНМА.НомерПакета КАК НомерПакета
	|	ИЗ
	|		Документ.АмортизацияНМА2_4 КАК АмортизацияНМА
	|
	|	ГДЕ
	|		АмортизацияНМА.Дата МЕЖДУ &НачалоСледующегоМесяца И &КонецСледующегоМесяца
	|		И АмортизацияНМА.Проведен
	|		И АмортизацияНМА.Организация В (&СписокОрганизаций)
	|		И (НЕ &ИспользоватьОтборНМА
	|			ИЛИ (АмортизацияНМА.Организация, АмортизацияНМА.НомерПакета) В 
	|					(ВЫБРАТЬ
	|						ПакетыАмортизации.Организация, 
	|						ПакетыАмортизации.НомерПакета
	|					ИЗ
	|						ПакетыАмортизации КАК ПакетыАмортизации))
	|
	|	) КАК НачислениеАмортизации
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияНаСледующийПериод = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗаданияНаСледующийПериод.Количество() <> 0 Тогда
		Возврат ЗаданияНаСледующийПериод;
	КонецЕсли;
	
	// Задания на ближайший следующий месяц, в котором начисляется амортизация

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Месяц,
	|	ЕСТЬNULL(МИНИМУМ(НачислениеАмортизации.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеАмортизации.Организация КАК Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(НачислениеАмортизации.Период, МЕСЯЦ) КАК Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАУУ КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.НематериальныйАктив = НачислениеАмортизации.НематериальныйАктив
	|	ГДЕ
	|		НачислениеАмортизации.НачислятьАмортизациюУУ
	|		И НачислениеАмортизации.Организация В (&СписокОрганизаций)
	|		И НачислениеАмортизации.Период >= &НачалоСледующегоМесяца
	|
	|		И (НЕ &ИспользоватьОтборНМА
	|				ИЛИ (НачислениеАмортизации.Организация, НачислениеАмортизации.НематериальныйАктив) В 
	|						(ВЫБРАТЬ
	|							ОтборОС.Организация, 
	|							ОтборОС.НематериальныйАктив
	|						ИЗ
	|							ОтборОС КАК ОтборОС))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НачислениеАмортизации.Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(НачислениеАмортизации.Период, МЕСЯЦ) КАК Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАБУ КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.НематериальныйАктив = НачислениеАмортизации.НематериальныйАктив
	|	ГДЕ
	|		(НачислениеАмортизации.НачислятьАмортизациюБУ
	|			ИЛИ НачислениеАмортизации.НачислятьАмортизациюНУ)
	|		И НачислениеАмортизации.Организация В (&СписокОрганизаций)
	|		И НачислениеАмортизации.Период >= &НачалоСледующегоМесяца
	|
	|		И (НЕ &ИспользоватьОтборНМА
	|				ИЛИ (НачислениеАмортизации.Организация, НачислениеАмортизации.НематериальныйАктив) В 
	|						(ВЫБРАТЬ
	|							ОтборОС.Организация, 
	|							ОтборОС.НематериальныйАктив
	|						ИЗ
	|							ОтборОС КАК ОтборОС))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АмортизацияНМА.Организация КАК Организация,
	|		АмортизацияНМА.НомерПакета КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(АмортизацияНМА.Дата, МЕСЯЦ) КАК Период
	|	ИЗ
	|		Документ.АмортизацияНМА2_4 КАК АмортизацияНМА
	|
	|	ГДЕ
	|		АмортизацияНМА.Дата >= &НачалоСледующегоМесяца
	|		И АмортизацияНМА.Проведен
	|		И АмортизацияНМА.Организация В (&СписокОрганизаций)
	|
	|		И (НЕ &ИспользоватьОтборНМА
	|			ИЛИ (АмортизацияНМА.Организация, АмортизацияНМА.НомерПакета) В 
	|					(ВЫБРАТЬ
	|						ПакетыАмортизации.Организация, 
	|						ПакетыАмортизации.НомерПакета
	|					ИЗ
	|						ПакетыАмортизации КАК ПакетыАмортизации))
	|
	|	) КАК НачислениеАмортизации
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(МИНИМУМ(НачислениеАмортизации.Период), ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|";

	УстановитьПривилегированныйРежим(Истина);
	ЗаданияНаСледующийПериод = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеЗадания Из ЗаданияНаСледующийПериод Цикл
		
		Если РасчетАмортизацииНМА.АмортизацияМожетНачислятьсяСДатыПринятияКУчету(ДанныеЗадания.Организация, ДанныеЗадания.Период) Тогда
			ДанныеЗадания.Месяц = ДанныеЗадания.Период;
		Иначе
			ДанныеЗадания.Месяц = ДобавитьМесяц(ДанныеЗадания.Период, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаданияНаСледующийПериод;

КонецФункции

#КонецОбласти

#КонецЕсли