
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняется при получении данных файла при обмене в РИБ.
// При загрузке набора записей в подчиненный узел удаляет существующие записи у других регистраторов
// с такими же значениями измерений.
// 
// Параметры:
//  ПолученныйНабор - РегистрСведенийНаборЗаписей.ДокументыУчтенныеПриРасчетеНДФЛ
//  ЭтоПолучениеОтГлавного - Булево.
Процедура ПриПолученииДанныхФайла(ПолученныйНабор, Знач ЭтоПолучениеОтГлавного) Экспорт
	
	Если ТипЗнч(ПолученныйНабор) <> Тип("РегистрСведенийНаборЗаписей.ДокументыУчтенныеПриРасчетеНДФЛ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСеанса.ВыполняетсяОбновлениеИБ Или Не ЭтоПолучениеОтГлавного Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = ПолученныйНабор.Отбор.Регистратор.Значение;
	СписокКолонок = "ФизическоеЛицо, ДокументОснование, Организация";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, ПолученныйНабор, , "ВТНаборЗаписей");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор КАК Регистратор,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборЗаписей КАК НаборЗаписей
		|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = НаборЗаписей.ДокументОснование
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = НаборЗаписей.ФизическоеЛицо
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = НаборЗаписей.Организация
		|ГДЕ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор <> &Регистратор";
	

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ");
	ЭлементБлокировки.ИсточникДанных = ПолученныйНабор.Выгрузить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "ДокументОснование");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Устранение дублирования записей по документу основанию %1.
				|Регистраторы: в базе %2, в загружаемом наборе записей %3';
				|en = 'Resolve record duplication in the %1 base document.
				|Recorders: in the %2 base and in the %3 record set being imported'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Строка(ВыборкаДетальныеЗаписи.ДокументОснование), Строка(ВыборкаДетальныеЗаписи.Регистратор),
				Регистратор); 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Удаление дублей';
											|en = 'Data exchange. Delete duplicates'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Предупреждение, , , ТекстПредупреждения);
			
			РегистраторВыборки = ВыборкаДетальныеЗаписи.Регистратор;
			НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(РегистраторВыборки);
			НаборЗаписей.Прочитать();
			НаборТаблицей = НаборЗаписей.Выгрузить();
			ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НаборТаблицей, СписокКолонок);
			ПараметрыОтбора = Новый Структура(СписокКолонок);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаДетальныеЗаписи);
			НайденныеСтроки = НаборТаблицей.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого Строка Из НайденныеСтроки Цикл
					НаборТаблицей.Удалить(Строка);
				КонецЦикла;
				НаборЗаписей.Загрузить(НаборТаблицей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЕсли;
			
			Если РегистраторВыборки.Метаданные().ТабличныеЧасти.Найти("УчтенныеПриРасчетеНДФЛДокументы")
				<> Неопределено Тогда
				РегистраторОбъект = РегистраторВыборки.ПолучитьОбъект();
				ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НаборТаблицей, "ДокументОснование");
				НайденныеСтроки = НаборТаблицей.НайтиСтроки(Новый Структура("ДокументОснование", РегистраторВыборки));
				Для Каждого Строка Из НайденныеСтроки Цикл
					НаборТаблицей.Удалить(Строка);
				КонецЦикла;
				РегистраторОбъект.УчтенныеПриРасчетеНДФЛДокументы.Загрузить(НаборТаблицей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистраторОбъект);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления
//
// Выполняется при использовании РИБ в главном узле:
// 	- удаляются дубли записей в регистре сведений ДокументыУчтенныеПриРасчетеНДФЛ
// 	- записи регистра сведений ДокументыУчтенныеПриРасчетеНДФЛ регистрируются для выгрузки в подчиненные узлы.
//
// Параметры:
//  ПараметрыОбновления - Структура:
//  	* ОбработкаЗавершена - Булево
//  	* ПрогрессВыполнения  - Структура:
//  		** ВсегоОбъектов - Число
//  		** ОбработаноОбъектов  - Число
Процедура ОбновитьДанныеРегистраДокументыУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления) Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ() Или ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	СписокКолонок = "ФизическоеЛицо, ДокументОснование, Организация";
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК ДокументОснование,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация КАК Организация
		|ПОМЕСТИТЬ ВТЗадвоенныеСтроки
		|ИЗ
		|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|СГРУППИРОВАТЬ ПО
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ДокументыУчтенныеПриРасчетеНДФЛ.НомерСтроки) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗадвоенныеСтроки.ДокументОснование КАК ДокументОснование,
		|	ЗадвоенныеСтроки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадвоенныеСтроки.Организация КАК Организация
		|ИЗ
		|	ВТЗадвоенныеСтроки КАК ЗадвоенныеСтроки";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			ЗарегистрироватьДокументыУчтенныеПриРасчетеНДФЛ();
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
			Возврат;
		КонецЕсли;
		
		РегистраторыВсе = Новый Массив;
		Сочетания = Результат.Выгрузить();
		СочетанияВсе = Сочетания;
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(СочетанияВсе, СписокКолонок);
		Пока Истина Цикл
			Регистраторы = РегистраторыПоСочетаниям(Сочетания);
			НовыеРегистраторы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Регистраторы, РегистраторыВсе);
			Если НовыеРегистраторы.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РегистраторыВсе, НовыеРегистраторы, Истина);
			Сочетания = СочетанияПоРегистраторам(НовыеРегистраторы, МенеджерВременныхТаблиц);
			Если Сочетания.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			НовыеСочетанияМассив = Новый Массив;
			Для Каждого Сочетание Из Сочетания Цикл
				ПараметрыОтбора = Новый Структура(СписокКолонок);
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Сочетание);
				НайденныеСтроки = СочетанияВсе.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(СочетанияВсе.Добавить(), Сочетание);
					НовыеСочетанияМассив.Добавить(Сочетание);
				КонецЕсли;	
			КонецЦикла;
			Если НовыеСочетанияМассив.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Сочетания = Сочетания.Скопировать(НовыеСочетанияМассив);
		КонецЦикла;
		
		Если РегистраторыВсе.Количество() > 0 Тогда
			УдалитьДублиПоРегистраторам(РегистраторыВсе, МенеджерВременныхТаблиц);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РегистрацияФизическихЛиц

// АПК:299-выкл: Особенности иерархии библиотек

Функция РеквизитГоловнаяОрганизация() Экспорт
	Возврат Метаданные.РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.Измерения.Организация.Имя;
КонецФункции

Функция РеквизитФизическоеЛицо() Экспорт
	Возврат Метаданные.РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.Измерения.ФизическоеЛицо.Имя;
КонецФункции

// АПК:299-вкл

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РегистраторыПоСочетаниям(Сочетания)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, Сочетания, "ВТСочетания", Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
		|ИЗ
		|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСочетания КАК Сочетания
		|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = Сочетания.ДокументОснование
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = Сочетания.ФизическоеЛицо
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = Сочетания.Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Регистратор");
	
КонецФункции

Функция СочетанияПоРегистраторам(Регистраторы, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК ДокументОснование,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗадвоенныеСтроки КАК ЗадвоенныеСтроки
		|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = ЗадвоенныеСтроки.ДокументОснование
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = ЗадвоенныеСтроки.ФизическоеЛицо
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = ЗадвоенныеСтроки.Организация
		|ГДЕ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор В (&Регистраторы)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// АПК:1327-выкл используется при начальном заполнении ИБ.
// АПК:1328-выкл используется при начальном заполнении ИБ.

Процедура УдалитьДублиПоРегистраторам(Регистраторы, МенеджерВременныхТаблиц)
	
	СписокКолонок = "ФизическоеЛицо, ДокументОснование, Организация";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадвоенныеСтроки.ДокументОснование КАК ДокументОснование,
		|	ЗадвоенныеСтроки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадвоенныеСтроки.Организация КАК Организация,
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор КАК Регистратор
		|ИЗ
		|	ВТЗадвоенныеСтроки КАК ЗадвоенныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ПО ЗадвоенныеСтроки.ДокументОснование = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
		|		И ЗадвоенныеСтроки.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
		|		И ЗадвоенныеСтроки.Организация = ДокументыУчтенныеПриРасчетеНДФЛ.Организация
		|		И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор В (&Регистраторы)
		|		И ЗадвоенныеСтроки.ДокументОснование <> ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор УБЫВ";

	ТаблицаДублей = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаДублей, СписокКолонок);
	
	Сочетания = ТаблицаДублей.Скопировать(, СписокКолонок);
	Сочетания.Свернуть(СписокКолонок);
			
	// Заполняем соответствие документов и новых наборов записей.
	// Существующие записи очищаем.
	ЗаписиДокументов = Новый Соответствие();
	Для Каждого Сочетание Из Сочетания Цикл
		ПараметрыОтбора = Новый Структура(СписокКолонок);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Сочетание);
		НайденныеСтроки = ТаблицаДублей.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Регистратор = НайденныеСтроки[0].Регистратор;
			ЗаписиДокумента = ЗаписиДокументов.Получить(Регистратор);
			Если ЗаписиДокумента = Неопределено Тогда
				НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Прочитать();
				ЗаписиДокумента = НаборЗаписей.Выгрузить();
				ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗаписиДокумента, СписокКолонок);
				ЗаписиДокументов.Вставить(Регистратор, ЗаписиДокумента);
				
				НаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЕсли;
			НайденныеСтроки = ЗаписиДокумента.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого Строка Из НайденныеСтроки Цикл
					ЗаписиДокумента.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Записываем новые наборы записей.
	Для Каждого КлючЗначение Из ЗаписиДокументов Цикл
		Регистратор = КлючЗначение.Ключ;
		НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		ЗаписиДокумента = ЗаписиДокументов.Получить(Регистратор);
		НаборЗаписей.Загрузить(ЗаписиДокумента);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		Если Регистратор.Метаданные().ТабличныеЧасти.Найти("УчтенныеПриРасчетеНДФЛДокументы") <> Неопределено Тогда
			РегистраторОбъект = Регистратор.ПолучитьОбъект();
			ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ЗаписиДокумента, "ДокументОснование");
			НайденныеСтроки = ЗаписиДокумента.НайтиСтроки(Новый Структура("ДокументОснование", Регистратор));
			Для Каждого Строка Из НайденныеСтроки Цикл
				ЗаписиДокумента.Удалить(Строка);
			КонецЦикла;
			РегистраторОбъект.УчтенныеПриРасчетеНДФЛДокументы.Загрузить(ЗаписиДокумента);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистраторОбъект, Истина);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// АПК:1327-вкл
// АПК:1328-вкл

// Регистрирует все записи регистра ДокументыУчтенныеПриРасчетеНДФЛ для выгрузки в узлы РИБ.
//
Процедура ЗарегистрироватьДокументыУчтенныеПриРасчетеНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
		|ИЗ
		|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		
		Отказ = Ложь;
		ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменВРаспределеннойИнформационнойБазе",
			НаборЗаписей, Отказ, Истина);
		
		Если НаборЗаписей.ОбменДанными.Получатели.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(НаборЗаписей.ОбменДанными.Получатели, НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
