#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ПервоначальныеСведенияНМА.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.13.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Многопоточный = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ee1529fa-c98f-4a32-bd0e-3b5a116a7831");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПервоначальныеСведенияНМА.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Критичный;
	Если ПолучитьФункциональнуюОпцию("ЛокализацияРФ") Тогда
		Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Первоначальные сведения НМА"":
		|- заполняет новые ресурсы ""Дата принятия к учету (НУ)"", ""Документ принятия к учету (НУ)""';
		|en = 'Updates the ""Initial intangible assets information"" register:
		|- Fills the new resources: ""Date of recognition (TA)"" and ""Recognition document (TA)""'");
	Иначе
		Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Первоначальные сведения НМА"":
		|- заполняет регистр по данным упр. учета';
		|en = 'Updates the ""Initial intangible assets information"" register:
		|- Fills the register based on management accounting data'");
	КонецЕсли;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ПервоначальныеСведенияНМА";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКОбновлению.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Регистратор
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведенияНМА КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ДатаПринятияКУчетуБУ = ДАТАВРЕМЯ(1, 1, 1)
	|		И &ЭтоМеждународнаяВерсия
	|		И НЕ &РеглУчетВНАВедетсяНезависимо
	|		И НЕ ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РегистрИсточник.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.ПервоначальныеСведенияНМА КАК РегистрИсточник
	|	ГДЕ
	|		НЕ &ЭтоМеждународнаяВерсия
	|		И РегистрИсточник.ДатаПринятияКУчетуНУ = ДАТАВРЕМЯ(1,1,1)
	//++ Локализация
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.ПринятиеКУчетуНМА
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.ПодготовкаКПередачеНМА
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.ПереоценкаНМА
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.СписаниеНМА
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.РаспределениеНДС
	//-- Локализация
	|		И НЕ РегистрИсточник.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|		И ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|			ГДЕ
	|				ДанныеДокумента.Проведен
	|				И ДанныеДокумента.НематериальныйАктив = РегистрИсточник.НематериальныйАктив
	|				И (ДанныеДокумента.ОтражатьВРеглУчете
	|						И НЕ ДанныеДокумента.ОтражатьВБУ
	|						И НЕ ДанныеДокумента.ОтражатьВНУ
	|					ИЛИ ДанныеДокумента.ОтражатьВНУ)
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ВводОстатковВнеоборотныхАктивов2_4.НМА КАК ДанныеДокумента
	|			ГДЕ
	|				ДанныеДокумента.Ссылка.Проведен
	|				И ДанныеДокумента.НематериальныйАктив = РегистрИсточник.НематериальныйАктив
	|				И (ДанныеДокумента.Ссылка.ОтражатьВРеглУчете
	|						И НЕ ДанныеДокумента.Ссылка.ОтражатьВБУ
	|						И НЕ ДанныеДокумента.Ссылка.ОтражатьВНУ
	|					ИЛИ ДанныеДокумента.Ссылка.ОтражатьВНУ)
	|
	//++ Локализация
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ПринятиеКУчетуНМА КАК ДанныеДокумента
	|			ГДЕ
	|				ДанныеДокумента.Проведен
	|				И ДанныеДокумента.НематериальныйАктив = РегистрИсточник.НематериальныйАктив
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ВводОстатковВнеоборотныхАктивов.НМА КАК ДанныеДокумента
	|			ГДЕ
	|				ДанныеДокумента.Ссылка.Проведен
	|				И ДанныеДокумента.НематериальныйАктив = РегистрИсточник.НематериальныйАктив
	//-- Локализация
	|				)
	|
	|	) КАК ДанныеКОбновлению";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЭтоМеждународнаяВерсия", НЕ ПолучитьФункциональнуюОпцию("ЛокализацияРФ"));
	Запрос.УстановитьПараметр("РеглУчетВНАВедетсяНезависимо", НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо());

	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ПервоначальныеСведенияНМА";
	
	ЭтоМеждународнаяВерсия = НЕ ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	РеглУчетВНАВедетсяНезависимо = НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПервоначальныеСведенияНМА.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ПервоначальныеСведенияНМА.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				
				Если ЭтоМеждународнаяВерсия Тогда
					
					Если НЕ РеглУчетВНАВедетсяНезависимо
						И НЕ ЗначениеЗаполнено(ЗаписьРегистра.ДатаПринятияКУчетуБУ)
						И ЗначениеЗаполнено(ЗаписьРегистра.ДатаПринятияКУчетуУУ) Тогда
						
						ЗаписьРегистра.ДатаПринятияКУчетуБУ = ЗаписьРегистра.ДатаПринятияКУчетуУУ;
					КонецЕсли;
					
				Иначе
					
					//++ Локализация
					
					Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ДатаПринятияКУчетуНУ)
						И ЗначениеЗаполнено(ЗаписьРегистра.ДатаПринятияКУчетуБУ)
						И ЗначениеЗаполнено(ЗаписьРегистра.ДокументПринятияКУчетуБУ) Тогда
						
						ОтражатьВНУ = Ложь;
						
						ТипДокумента = ТипЗнч(ЗаписьРегистра.ДокументПринятияКУчетуБУ);
						
						Если ТипДокумента = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4") Тогда
							
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								ЗаписьРегистра.ДокументПринятияКУчетуБУ, "ОтражатьВРеглУчете,ОтражатьВБУ,ОтражатьВНУ");
								
							ОтражатьВНУ = 
								ЗначенияРеквизитов.ОтражатьВРеглУчете
									И НЕ ЗначенияРеквизитов.ОтражатьВБУ
									И НЕ ЗначенияРеквизитов.ОтражатьВНУ
								ИЛИ ЗначенияРеквизитов.ОтражатьВНУ;
							
						ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")
							ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4") Тогда
							
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								ЗаписьРегистра.ДокументПринятияКУчетуБУ, "ОтражатьВРеглУчете,ОтражатьВБУ,ОтражатьВНУ,ПорядокУчетаНУ,ПорядокУчетаБУ");
								
							ОтражатьВНУ = 
								ЗначенияРеквизитов.ОтражатьВРеглУчете
									И НЕ ЗначенияРеквизитов.ОтражатьВБУ
									И НЕ ЗначенияРеквизитов.ОтражатьВНУ
								ИЛИ ЗначенияРеквизитов.ОтражатьВНУ
									И (ЗначенияРеквизитов.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию
										ИЛИ ЗначенияРеквизитов.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию
										ИЛИ ЗначенияРеквизитов.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету
										
										ИЛИ ЗначенияРеквизитов.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислениеАмортизацииИлиСписаниеНаРасходы
											И ЗаписьРегистра.ПервоначальнаяСтоимостьНУ > ВнеоборотныеАктивыЛокализация.ПредельнаяСтоимостьСписанияНаРасходы()
										ИЛИ ЗначенияРеквизитов.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислениеАмортизацииИлиСписаниеНаРасходы
											И ЗаписьРегистра.ПервоначальнаяСтоимостьНУ <= ВнеоборотныеАктивыЛокализация.ПредельнаяСтоимостьСписанияНаРасходы()
											И (ЗначенияРеквизитов.ПорядокУчетаБУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию
												ИЛИ ЗначенияРеквизитов.ПорядокУчетаБУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию));
							
						ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов")
							ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
								
							ОтражатьВНУ = Истина;
								
						КонецЕсли;
						
						Если ОтражатьВНУ Тогда
							ЗаписьРегистра.ДатаПринятияКУчетуНУ = ЗаписьРегистра.ДатаПринятияКУчетуБУ;
							ЗаписьРегистра.ДокументПринятияКУчетуНУ = ЗаписьРегистра.ДокументПринятияКУчетуБУ;
						КонецЕсли;
						
					КонецЕсли;
					
					//-- Локализация
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
