
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Объект = Параметры.МаршрутнаяКарта;
	
	ЗаполнитьНастройкуИзделий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьХарактеристикиВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьХарактеристикиИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаИзделия = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если СтрокаИзделия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИзделия.ТипСтроки = 1 Тогда
		СтрокаИзделия = СтрокаИзделия.ПолучитьРодителя();
	КонецЕсли; 
	
	КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
	
	// Проверим наличие выбранной характеристики
	Для каждого ЭлементКоллекции Из КоллекцияХарактеристик Цикл
		Если ЭлементКоллекции.Характеристика = ВыбранноеЗначение Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяХарактеристика = КоллекцияХарактеристик.Добавить();
	НоваяХарактеристика.Характеристика = ВыбранноеЗначение;
	НоваяХарактеристика.ТипСтроки = 1;
	
	Если КоллекцияХарактеристик.Количество() = 0 Тогда
		СтрокаИзделия.ЛюбыеХарактеристики = Истина;
	Иначе
		СтрокаИзделия.ЛюбыеХарактеристики = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПодобратьХарактеристики(Команда)
	
	ДобавитьХарактеристикиВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристики(Команда)
	
	УдалитьХарактеристикиИзСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	ЗаписатьНаСервере();
	
	УправлениеДаннымиОбИзделияхКлиент.ОповеститьОЗаписиОсновнойМаршрутнойКарты();
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыПометка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Истина, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЛюбыеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для любых характеристик>';
																|en = '<for any variants>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНоменклатурыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЛюбыеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для выбранных характеристик>';
																|en = '<for selected variants>'"));

КонецПроцедуры

#Область НастройкаИзделий

&НаСервере
Процедура ЗаполнитьНастройкуИзделий()

	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ДоступенВводХарактеристики = Ложь;
	ХарактеристикиИспользуются = Ложь;
	
	// Получим изделия и добавим их в список выбора 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)) КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыходныеИзделия.НомерСтроки";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаНоменклатуры = Результат.Выбрать();
	
	КоллекцияНоменклатуры = СписокНоменклатуры.ПолучитьЭлементы();
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		НоваяНоменклатура = КоллекцияНоменклатуры.Добавить();
		НоваяНоменклатура.Номенклатура   = ВыборкаНоменклатуры.Номенклатура;
		НоваяНоменклатура.Характеристика = ВыборкаНоменклатуры.Характеристика;
		НоваяНоменклатура.ХарактеристикиИспользуются = ВыборкаНоменклатуры.ХарактеристикиИспользуются;
		НоваяНоменклатура.ЛюбыеХарактеристики = Истина;
		НоваяНоменклатура.Пометка = Истина;
		
		Если ИспользоватьХарактеристикиНоменклатуры И НоваяНоменклатура.ХарактеристикиИспользуются И НоваяНоменклатура.Характеристика.Пустая() Тогда
			ДоступенВводХарактеристики = Истина;
		КонецЕсли; 

		ХарактеристикиИспользуются = ХарактеристикиИспользуются ИЛИ НоваяНоменклатура.ХарактеристикиИспользуются;
		
	КонецЦикла;

	Если КоллекцияНоменклатуры.Количество() = 1 Тогда
		Элементы.СписокНоменклатурыПометка.Видимость = Ложь;
		
		Если НЕ ДоступенВводХарактеристики Тогда
			Элементы.СписокНоменклатуры.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	// Если не доступен ввод характеристики, то уберем командную панель
	Если НЕ ДоступенВводХарактеристики Тогда
		Элементы.СписокНоменклатуры.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли; 
	
	// Если не используются характеристики то уберем колонку "Характеристика"
	Если НЕ ИспользоватьХарактеристикиНоменклатуры ИЛИ НЕ ХарактеристикиИспользуются Тогда
		Элементы.СписокНоменклатурыХарактеристика.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Открывает форму выбора характеристики и добавляет выбранные в список
//
&НаКлиенте
Процедура ДобавитьХарактеристикиВСписок()

	СтрокаИзделия = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если СтрокаИзделия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИзделия.ТипСтроки = 1 Тогда
		СтрокаИзделия = СтрокаИзделия.ПолучитьРодителя();
	КонецЕсли; 
	
	Если НЕ СтрокаИзделия.Характеристика.Пустая() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Характеристика определена в маршрутной карте.';
									|en = 'Characteristic is determined in the route sheet.'"));
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", СтрокаИзделия.Номенклатура);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", 
					ПараметрыФормы, 
					Элементы.СписокНоменклатуры,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикиИзСписка()

	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИзделия = ТекущиеДанные.ПолучитьРодителя();
	
	КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
	КоллекцияХарактеристик.Удалить(ТекущиеДанные);
	
	Если КоллекцияХарактеристик.Количество() = 0 Тогда
		СтрокаИзделия.ЛюбыеХарактеристики = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьНастройки

&НаСервере
Процедура ДобавитьНастройкуДляИзделия(Номенклатура, Характеристика, ЕстьОшибки)

	СвойстваЗаписи = Новый Структура;
	СвойстваЗаписи.Вставить("Номенклатура",    Номенклатура);
	СвойстваЗаписи.Вставить("Характеристика",  Характеристика);
	СвойстваЗаписи.Вставить("МаршрутнаяКарта", Объект);
	
	Если НЕ УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновнойМаршрутнойКартой(СвойстваЗаписи) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура ЗаписатьНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		ЕстьОшибки = Ложь;
		КоллекцияНоменклатуры = СписокНоменклатуры.ПолучитьЭлементы();
		
		Для каждого СтрокаИзделия Из КоллекцияНоменклатуры Цикл
			
			Если НЕ СтрокаИзделия.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаИзделия.ЛюбыеХарактеристики Тогда
				ДобавитьНастройкуДляИзделия(СтрокаИзделия.Номенклатура, СтрокаИзделия.Характеристика, ЕстьОшибки);
			Иначе
				КоллекцияХарактеристик = СтрокаИзделия.ПолучитьЭлементы();
				Для каждого СтрокаХарактеристики Из КоллекцияХарактеристик Цикл
					ДобавитьНастройкуДляИзделия(СтрокаИзделия.Номенклатура, СтрокаХарактеристики.Характеристика, ЕстьОшибки);
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось назначить маршрутную карту основной.';
									|en = 'Cannot set the route sheet as the main one.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Назначение основной маршрутной карты';
				|en = 'Assign main route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
 		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
