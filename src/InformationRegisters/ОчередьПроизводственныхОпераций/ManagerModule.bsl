#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает и записывает очередь производственных операций
//  (вызывается при обработки очереди заданий к расчету очереди производственных операций).
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКРасчетуОчередиПроизводственныхОпераций", есть и служебные колонки:
//             * ОбъектРасчета       - ДокументСсылка.ЭтапПроизводства2_2 -
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * УдалитьДеньРегистрации - Число  -
//             * ДатаЗаписи             - Дата   -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - Неопределено, Структура - дополнительные свойства выполнения заданий.
//
Процедура РассчитатьОчередьОтложенно(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоляОшибки = Неопределено;
	
	Этапы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Задания.ВыгрузитьКолонку("ОбъектРасчета"));
	
	ДанныеЭтапов = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этапы);
	
	МетаРегистра = Неопределено;
	ИмяСобытия   = Неопределено;
	
	Для каждого Этап Из Этапы Цикл
		
		ДанныеЭтапа = ДанныеЭтапов[Этап];
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение",       ДанныеЭтапа.Распоряжение);
			ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЭтапа.ПартияПроизводства);
			ЭлементБлокировки.УстановитьЗначение("Ссылка",             Этап);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();
			
			РассчитатьОчередьПоДаннымЭтапа(Этап, ДанныеЭтапа, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если МетаРегистра = Неопределено Тогда
				МетаРегистра = Метаданные.РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций;
				ИмяСобытия   = ОтложенныеЗадания.ИмяСобытия();
			КонецЕсли;
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МетаРегистра,, ТекстИсключения);
			
			Если ПоляОшибки = Неопределено Тогда
				
				Задания.Индексы.Добавить("ОбъектРасчета");
				
				ПоляОшибки = Новый Структура;
				ПоляОшибки.Вставить("ОбъектРасчета");
				
				ДанныеОшибки = Новый Структура;
				ДанныеОшибки.Вставить("ОбъектРасчета");
				
			КонецЕсли;
			
			ДанныеОшибки.ОбъектРасчета = Этап;
			
			ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(ПоляОшибки, ДанныеОшибки, ТекстИсключения);
			
			НайденныеСтроки = Задания.НайтиСтроки(ДанныеОшибки);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				ИдентификаторыНеОбработанныхЗаписей.Вставить(СтрокаТаблицы.ИдентификаторЗаписи, ТекстОшибки);
			КонецЦикла;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает и записывает очередь производственных операций.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - обрабатываемый документ
//  ДанныеЭтапа - Структура - данные этапа для расчета очереди операций (должны быть прочитаны ответственно)
//  РассчитыватьСменныеЗадания - Булево - признак необходимости расчета данных регистра "Операции к созданию сменных заданий"
//
Процедура РассчитатьОчередьПоДаннымЭтапа(Этап, ДанныеЭтапа, РассчитыватьСменныеЗадания = Истина) Экспорт
	
	Если НЕ ДанныеЭтапа.ТребуетсяРассчитать Тогда
		Возврат;
	КонецЕсли;
	
	Очередь = ОчередьОпераций(Этап, ДанныеЭтапа);
	ЗаписатьОчередь(Этап, Очередь);
	
	Если ДанныеЭтапа.ИспользоватьСменныеЗадания
		И РассчитыватьСменныеЗадания
		И НЕ ДанныеЭтапа.ВАрхиве Тогда
		
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.РассчитатьОперации(Этап);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в очередь заданий к расчету данных регистра новое задание.
//
// Параметры:
//  Этап				 - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
//  УдалениеПроведения	 - Булево								 - признак обработки удаления проведения.
//  Отказ				 - Булево								 - признак прерывания обработки проведения.
//
Процедура ДобавитьЗаданиеКРасчетуОчереди(Этап, УдалениеПроведения = Ложь, Отказ = Ложь) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
	ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
	ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование") Тогда
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПооперационноеРасписание2_2");
		ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСменныеЗадания") Тогда
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОперацииКСозданиюСменныхЗаданий");
		ЭлементБлокировки.УстановитьЗначение("СменноеЗадание", Документы.СменноеЗадание.ПустаяСсылка());
		ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %1';
										|en = 'Cannot lock the queue of routing operations: %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтапа = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этап)[Этап];
	
	ВыполнитьКонтрольПередРасчетомОчереди(ДанныеЭтапа, УдалениеПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьОчередь(Этап);
	
	Если ДанныеЭтапа.ИспользоватьСменныеЗадания Тогда
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.УдалитьНеназначенныеОперации(Этап);
	КонецЕсли;
	
	Если ДанныеЭтапа.ТребуетсяРассчитать И НЕ УдалениеПроведения Тогда
		РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Этап);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает очередь по указанной технологической операции.
//
// Параметры:
//  КлючОперации - см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации
//  ВсеПоследующиеОперации - Булево - признак, определяющий необходимость пересчитать всю очередь от текущей до конца.
//  Отказ - Булево - признак прерывания обработки проведения.
//
Процедура ПересчитатьОчередь(КлючОперации, ВсеПоследующиеОперации = Ложь, Отказ = Ложь) Экспорт
	
	ЗаблокироватьОчередьДляЗаписиПоКлючу(КлючОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОкружениеОперации = ОкружениеОперацииВОчереди(КлючОперации, ВсеПоследующиеОперации);
	
	ДанныеОперации = НайтиОперациюПоКлючу(ОкружениеОперации, КлючОперации);
	Если ДанныеОперации = Неопределено Тогда
		СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
		Возврат;
	КонецЕсли;
	
	Этап = КлючОперации.Этап;
	
	ЗаблокироватьДанныеДляРасчетаОчередиПоОперации(Этап, ДанныеОперации, ВсеПоследующиеОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьОчередьПоОперации(Этап, ДанныеОперации, ВсеПоследующиеОперации, Отказ);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция ОчередьОперацийКонструктор()
	
	НаборЗаписей = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	
	Возврат НаборЗаписей.ВыгрузитьКолонки();
	
КонецФункции

#КонецОбласти

#Область ВыполнитьКонтроль

Функция ВыполнитьКонтрольПередРасчетомОчереди(ДанныеЭтапа, УдалениеПроведения = Ложь, Отказ = Ложь)
	
	ЕстьОшибка = Ложь;
	
	Если ДанныеЭтапа.ТребуетсяРассчитать И НЕ УдалениеПроведения Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(Очередь.Создано) > 0 КАК ОшибкаВОперациях
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|	ПО Очередь.Подразделение = НазначенныеОперации.Подразделение
		|		И Очередь.Этап = НазначенныеОперации.Этап
		|		И Очередь.Операция = НазначенныеОперации.Операция
		|		И Очередь.ИдентификаторОперации = НазначенныеОперации.ИдентификаторОперации
		|		И НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|ГДЕ
		|	Очередь.Этап = &Этап
		|
		|ИМЕЮЩИЕ
		|	(СУММА(Очередь.Создано) > 0 
		|		ИЛИ МАКСИМУМ(НазначенныеОперации.Этап ЕСТЬ НЕ NULL) = ИСТИНА)
		|	И (МАКСИМУМ(ВЫБОР
		|				КОГДА Очередь.МаршрутнаяКарта <> &МаршрутнаяКарта
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) = ИСТИНА
		|		ИЛИ МАКСИМУМ(ВЫБОР
		|				КОГДА Очередь.КоэффициентМаршрутнойКарты <> &КоэффициентМаршрутнойКарты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) = ИСТИНА)");
		Запрос.УстановитьПараметр("Этап", ДанныеЭтапа.Ссылка);
		Запрос.УстановитьПараметр("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
		Запрос.УстановитьПараметр("КоэффициентМаршрутнойКарты", ДанныеЭтапа.КоэффициентМаршрутнойКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЕстьОшибка = Истина;
			
			Если Выборка.ОшибкаВОперациях Тогда
				ТекстСообщения = НСтр("ru = 'Запрещено изменять маршрутную карту и коэффициент после создания производственных операций.';
										|en = 'You cannot edit the route sheet or the factor after creating routing operations.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Запрещено изменять маршрутную карту и коэффициент после создания сменных заданий.';
										|en = 'You cannot edit the route sheet or the factor after creating shift tasks.'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ОшибкаВОперациях
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И Операции.НаОснованииНСИ
		|	И НЕ Операции.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|ГДЕ
		|	НазначенныеОперации.Этап = &Этап
		|	И НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Этап", ДанныеЭтапа.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЕстьОшибка = Истина;
			
			Если Выборка.ОшибкаВОперациях Тогда
				ТекстСообщения = НСтр("ru = 'По этапу созданы операции.';
										|en = 'Operations are created for the stage.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'По этапу созданы сменные задания.';
										|en = 'Shift tasks are created by the stage.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка расчета очереди производственных операций. %1';
										|en = 'An error occurred while calculating routing operation queue. %1'"), ТекстСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РассчитатьПоЭтапу

Функция ОчередьОпераций(Этап, ДанныеЭтапа)
	
	КлючеваяОперация = "МежцеховоеУправление2_2.РасчетОчередиПроизводственныхОпераций";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ОчередьОпераций = ОчередьОперацийВнутриЗамераВремени(Этап, ДанныеЭтапа);
	
	ВремяНачалаЗамера = ОписаниеЗамера.Получить("ВремяНачала");
	Если ВремяНачалаЗамера <> Неопределено
		И ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаЗамера > 0 Тогда
		КоличествоДанных = ОчередьОпераций.Количество();
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	КонецЕсли;
	
	Возврат ОчередьОпераций;
	
КонецФункции

Функция ОчередьОперацийВнутриЗамераВремени(Этап, ДанныеЭтапа)
	
	ОчередьОпераций = ОчередьОперацийКонструктор();
	
	СписокОпераций = СписокОпераций(Этап, ДанныеЭтапа);
	
	Для Индекс = 0 По СписокОпераций.Количество() - 1 Цикл
		
		ТекущаяСтрока = СписокОпераций[Индекс];
		
		НоваяОперация = ОчередьОпераций.Добавить();
		НоваяОперация.Этап          = Этап;
		НоваяОперация.Требуется     = ТекущаяСтрока.КоличествоНаПартию;
		НоваяОперация.Запланировано = ТекущаяСтрока.КоличествоНаПартию;
		
		ЗаполнитьЗначенияСвойств(
			НоваяОперация,
			ТекущаяСтрока,
			"Операция,
			|ИдентификаторОперации,
			|ИдентификаторКонтрольнойОперации,
			|НомерОперации,
			|НомерСледующейОперации");
		
		ЗаполнитьЗначенияСвойств(
			НоваяОперация,
			ДанныеЭтапа,
			"Распоряжение,
			|Подразделение,
			|МаршрутнаяКарта,
			|КоэффициентМаршрутнойКарты,
			|ВАрхиве");
		
		РассчитатьПоказателиВыполненияОперации(НоваяОперация, ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОчередьОпераций;
	
КонецФункции

Функция СписокОпераций(Этап, ДанныеЭтапа)
	
	Если ДанныеЭтапа.Свойство("Операции") Тогда
		
		Операции = ДанныеЭтапа.Операции; //ТаблицаЗначений
	
	ИначеЕсли ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях")
		И НЕ ЗначениеЗаполнено(ДанныеЭтапа.МаршрутнаяКарта) Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеЭтапа, "Номенклатура,Характеристика,Спецификация");
		ДанныеПоНоменклатуре.Количество = ДанныеЭтапа.КоличествоУпаковокПлан * ДанныеЭтапа.КоэффициентУпаковки;
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных("Операции");
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать = Истина;
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки,
			Новый Структура("Этап", ДанныеЭтапа.ЭтапСпецификации));
		
		Операции = ДанныеСпецификации.Операции;
		
	Иначе
	
		ДанныеМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
			ДанныеЭтапа.МаршрутнаяКарта,
			ДанныеЭтапа.КоэффициентМаршрутнойКарты,
			Неопределено,
			Неопределено,
			"Операции");
			
		Операции = ДанныеМаршрутнойКарты.Операции;
		
	КонецЕсли;
	
	// Сокращение маршрута слева
	Если ДанныеЭтапа.ИдентификаторПервойОперации <> 0 Тогда
		Операция = Операции.Найти(ДанныеЭтапа.ИдентификаторПервойОперации, "ИдентификаторОперации");
		Если Операция <> Неопределено Тогда
			Операции.Индексы.Добавить("НомерСледующейОперации");
			СтруктураПоиска = Новый Структура("НомерСледующейОперации", Операция.НомерОперации);
			Очередь = Операции.НайтиСтроки(СтруктураПоиска);
			Пока Очередь.ВГраница() <> -1 Цикл
				СтруктураПоиска.НомерСледующейОперации = Очередь[0].НомерОперации;
				Для каждого Строка Из Операции.НайтиСтроки(СтруктураПоиска) Цикл
					Очередь.Добавить(Строка);
				КонецЦикла;
				Операции.Удалить(Очередь[0]);
				Очередь.Удалить(0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сокращение маршрута справа
	Если ДанныеЭтапа.ИдентификаторПоследнейОперации <> 0 Тогда
		Операция = Операции.Найти(ДанныеЭтапа.ИдентификаторПоследнейОперации, "ИдентификаторОперации");
		Если Операция <> Неопределено Тогда
			Операции.Индексы.Добавить("НомерОперации");
			СтруктураПоиска = Новый Структура("НомерОперации", Операция.НомерСледующейОперации);
			Очередь = Операции.НайтиСтроки(СтруктураПоиска);
			Пока Очередь.ВГраница() <> -1 Цикл
				СтруктураПоиска.НомерОперации = Очередь[0].НомерСледующейОперации;
				Для каждого Строка Из Операции.НайтиСтроки(СтруктураПоиска) Цикл
					Очередь.Добавить(Строка);
				КонецЦикла;
				Операции.Удалить(Очередь[0]);
				Очередь.Удалить(0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьОперацииРезультатомВыполнения(Этап, Операции);
	
	ДобавитьЗаполнитьСлужебныеРеквизитыОпераций(Операции);

	Возврат Операции;
	
КонецФункции

Процедура ЗаписатьОчередь(Этап, Очередь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	Набор.Отбор.Этап.Установить(Этап);
	
	Набор.Загрузить(Очередь);
	
	Набор.Записать(Истина);

КонецПроцедуры

Процедура ОчиститьОчередь(Этап)

	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	Набор.Отбор.Этап.Установить(Этап);
	
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РассчитатьПоОперации

Процедура ЗаблокироватьОчередьДляЗаписиПоКлючу(КлючОперации, Отказ = Ложь) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("Этап", КлючОперации.Этап);
	ЭлементБлокировки.УстановитьЗначение("Операция", КлючОперации.Операция);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);

	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %Причина%';
								|en = 'Cannot lock queue of routing operations. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеДляРасчетаОчередиПоОперации(Этап, ДанныеОперации, ВсеПоследующиеОперации, Отказ)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	Последовательность = ДанныеОперации.Владелец();
	
	Для каждого ТекущаяСтрока Из Последовательность Цикл
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
		
		ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
		
		Если ТекущаяСтрока.НомерОперации = ДанныеОперации.НомерСледующейОперации
			ИЛИ (ВсеПоследующиеОперации
					И ТекущаяСтрока.НомерОперации >= ДанныеОперации.НомерСледующейОперации)
			ИЛИ ТекущаяСтрока = ДанныеОперации Тогда
		
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
			
			ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %Причина%';
								|en = 'Cannot lock queue of routing operations. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ПересчитатьОчередьПоОперации(Этап, ДанныеОперации, ВсеПоследующиеОперации, Отказ)
	
	ТаблицаОпераций = ДанныеОперации.Владелец();
	
	ДополнитьОперацииРезультатомВыполнения(Этап, ТаблицаОпераций);
	
	Если ВсеПоследующиеОперации Тогда
		Последовательность = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОперации);
		ТаблицаОпераций.Сортировать("НомерОперации");
		Для Индекс = 0 По ТаблицаОпераций.Количество()-1 Цикл
			Операция = ТаблицаОпераций[Индекс];
			Если Операция.НомерОперации >= ДанныеОперации.НомерСледующейОперации Тогда
				Последовательность.Добавить(Операция);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Последовательность = СледующиеОперации(ДанныеОперации);
		Последовательность.Вставить(0, ДанныеОперации);
	КонецЕсли;
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	
	Для Индекс = 0 По Последовательность.ВГраница() Цикл
		
		ТекущаяСтрока = Последовательность[Индекс];
		
		Набор.Отбор.Этап.Установить(Этап);
		Набор.Отбор.Операция.Установить(ТекущаяСтрока.Операция);
		Набор.Отбор.ИдентификаторОперации.Установить(ТекущаяСтрока.ИдентификаторОперации);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
			Возврат;
		КонецЕсли;
		
		РассчитатьПоказателиВыполненияОперации(Набор[0], ТекущаяСтрока);
		
		Попытка
			Набор.Записать(Истина);
		Исключение
			СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(
		ДанныеОперации.Подразделение);
	Если ПараметрыПодразделения.ИспользоватьСменныеЗадания Тогда
		
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.РассчитатьОперации(Этап);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#Область Последовательность

Функция ПредыдущиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерСледующейОперации", Курсор.НомерОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция СледующиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерОперации", Курсор.НомерСледующейОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция ОкружениеОперацииВОчереди(КлючОперации, ВсеПоследующиеОперации = Ложь)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТекущаяОперация.Подразделение          КАК Подразделение,
		|	ТекущаяОперация.Операция               КАК Операция,
		|	ТекущаяОперация.ИдентификаторОперации  КАК ИдентификаторОперации,
		|	ТекущаяОперация.НомерОперации          КАК НомерОперации,
		|	ТекущаяОперация.НомерСледующейОперации КАК НомерСледующейОперации,
		|	ТекущаяОперация.Требуется              КАК Требуется,
		|	ТекущаяОперация.Запланировано          КАК КоличествоНаПартию,
		|	ТекущаяОперация.ВремяЕдИзм             КАК ВремяЕдИзм
		|ПОМЕСТИТЬ ВТТекущаяОперация
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ТекущаяОперация
		|ГДЕ
		|	ТекущаяОперация.Этап = &Этап
		|	И ТекущаяОперация.Операция = &Операция
		|	И ТекущаяОперация.ИдентификаторОперации = &ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СледующиеОперации.Подразделение          КАК Подразделение,
		|	СледующиеОперации.Операция               КАК Операция,
		|	СледующиеОперации.ИдентификаторОперации  КАК ИдентификаторОперации,
		|	СледующиеОперации.НомерОперации          КАК НомерОперации,
		|	СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
		|	СледующиеОперации.Требуется              КАК Требуется,
		|	СледующиеОперации.Запланировано          КАК КоличествоНаПартию,
		|	СледующиеОперации.ВремяЕдИзм             КАК ВремяЕдИзм
		|ПОМЕСТИТЬ ВТСледующиеОперации
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК СледующиеОперации
		|
		|	ПОЛНОЕ СОЕДИНЕНИЕ ВТТекущаяОперация КАК ТекущаяОперация
		|	ПО ИСТИНА
		|
		|ГДЕ
		|	СледующиеОперации.Этап = &Этап
		|	И (СледующиеОперации.НомерОперации = ТекущаяОперация.НомерСледующейОперации
		|		ИЛИ &ВсеПоследующиеОперации
		|			И СледующиеОперации.НомерОперации >= ТекущаяОперация.НомерСледующейОперации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Подразделение              КАК Подразделение,
		|	Операции.Операция                   КАК Операция,
		|	Операции.ИдентификаторОперации      КАК ИдентификаторОперации,
		|	Операции.НомерОперации              КАК НомерОперации,
		|	Операции.НомерСледующейОперации     КАК НомерСледующейОперации,
		|	Операции.Требуется                  КАК Требуется,
		|	Операции.КоличествоНаПартию         КАК КоличествоНаПартию,
		|	Операции.Операция.Количество        КАК Количество,
		|	Операции.ВремяЕдИзм                 КАК ВремяЕдИзм,
		|
		|	&ТекстРеквизитыИсполнителяОперации,
		|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
		|ИЗ
		|	(ВЫБРАТЬ
		|		СледующиеОперации.Подразделение          КАК Подразделение,
		|		СледующиеОперации.Операция               КАК Операция,
		|		СледующиеОперации.ИдентификаторОперации  КАК ИдентификаторОперации,
		|		СледующиеОперации.НомерОперации          КАК НомерОперации,
		|		СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
		|		СледующиеОперации.Требуется              КАК Требуется,
		|		СледующиеОперации.КоличествоНаПартию     КАК КоличествоНаПартию,
		|		СледующиеОперации.ВремяЕдИзм             КАК ВремяЕдИзм
		|	ИЗ
		|		ВТСледующиеОперации КАК СледующиеОперации
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПредыдущиеОперации.Подразделение,
		|		ПредыдущиеОперации.Операция,
		|		ПредыдущиеОперации.ИдентификаторОперации,
		|		ПредыдущиеОперации.НомерОперации,
		|		ПредыдущиеОперации.НомерСледующейОперации,
		|		ПредыдущиеОперации.Требуется,
		|		ПредыдущиеОперации.Запланировано,
		|		ПредыдущиеОперации.ВремяЕдИзм
		|	ИЗ
		|		РегистрСведений.ОчередьПроизводственныхОпераций КАК ПредыдущиеОперации
		|	ГДЕ
		|		ПредыдущиеОперации.Этап = &Этап
		|		И ПредыдущиеОперации.НомерСледующейОперации В
		|				(ВЫБРАТЬ
		|					ТекущаяОперация.НомерОперации
		|				ИЗ
		|					ВТТекущаяОперация КАК ТекущаяОперация
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					СледующиеОперации.НомерОперации
		|				ИЗ
		|					ВТСледующиеОперации КАК СледующиеОперации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТекущаяОперация.Подразделение,
		|		ТекущаяОперация.Операция,
		|		ТекущаяОперация.ИдентификаторОперации,
		|		ТекущаяОперация.НомерОперации,
		|		ТекущаяОперация.НомерСледующейОперации,
		|		ТекущаяОперация.Требуется,
		|		ТекущаяОперация.КоличествоНаПартию,
		|		ТекущаяОперация.ВремяЕдИзм
		|	ИЗ
		|		ВТТекущаяОперация КАК ТекущаяОперация) КАК Операции");
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("Операции.Операция"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("Операции.Операция"));
		
	Запрос.УстановитьПараметр("Этап", КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	Запрос.УстановитьПараметр("ВсеПоследующиеОперации", ВсеПоследующиеОперации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиОперациюПоКлючу(СписокОпераций, КлючОперации)
	
	ОтборОперация = Новый Структура("Операция,ИдентификаторОперации");
	ЗаполнитьЗначенияСвойств(ОтборОперация, КлючОперации);
	
	НайденныеСтроки = СписокОпераций.НайтиСтроки(ОтборОперация);
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

// Добавляет и заполняет служебные реквизиты для списка операций.
// 
// Параметры:
//  Операции  - ТаблицаЗначений - список операций
Процедура ДобавитьЗаполнитьСлужебныеРеквизитыОпераций(Операции)
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный));
	Операции.Колонки.Добавить("ИдентификаторКонтрольнойОперации", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	Операции.Колонки.Добавить("Требуется", ОписаниеТипов);
	
	Для Индекс1 = 0 По Операции.Количество() - 1 Цикл
		
		СтрокаОперация = Операции[Индекс1];
		
		СтрокаОперация.Требуется = СтрокаОперация.КоличествоНаПартию;
		
		Если СтрокаОперация.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.НеТребуется Тогда
			Продолжить;
		ИначеЕсли СтрокаОперация.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется Тогда
			СтрокаОперация.ИдентификаторКонтрольнойОперации = СтрокаОперация.ИдентификаторОперации;
		ИначеЕсли СтрокаОперация.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих Тогда
			Для Индекс2 = Индекс1+1 По Операции.Количество()-1 Цикл
				СтрокаКонтрольнаяОперация = Операции[Индекс2];
				Если СтрокаКонтрольнаяОперация.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется Тогда
					СтрокаОперация.ИдентификаторКонтрольнойОперации = СтрокаКонтрольнаяОперация.ИдентификаторОперации;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОпераций

Процедура ДополнитьОперацииРезультатомВыполнения(Этап, Операции)
	
	ВыполнениеОпераций = РезультатВыполненияОпераций(
		Этап, 
		Операции.ВыгрузитьКолонку("ИдентификаторОперации"));
	ВыполнениеОпераций.Индексы.Добавить("Операция,ИдентификаторОперации");
	
	ОписаниеТипов = Новый ОписаниеТипов(
		"Число", 
		Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	Операции.Колонки.Добавить("Создано",           ОписаниеТипов);
	Операции.Колонки.Добавить("Выполняется",       ОписаниеТипов);
	Операции.Колонки.Добавить("Выполнено",         ОписаниеТипов);
	Операции.Колонки.Добавить("ТребуетПовторения", ОписаниеТипов);
	Операции.Колонки.Добавить("Пропущено",         ОписаниеТипов);
	Операции.Колонки.Добавить("НаКонтроле",        ОписаниеТипов);
	Операции.Колонки.Добавить("НаДоработке",       ОписаниеТипов);
	Операции.Колонки.Добавить("Брак",              ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов(
		"Число", 
		Новый КвалификаторыЧисла(10, 1, ДопустимыйЗнак.Неотрицательный));
	
	Операции.Колонки.Добавить("ВремяСозданныхОпераций", ОписаниеТипов);
	
	ОтборОперация = Новый Структура("Операция,ИдентификаторОперации");
	
	Для каждого ДанныеОперации Из Операции Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОперация, ДанныеОперации);
		НайденныеСтроки = ВыполнениеОпераций.НайтиСтроки(ОтборОперация);
		
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОперации,
				НайденныеСтроки[0],
				"Создано,
				|Выполняется,
				|Выполнено,
				|ТребуетПовторения,
				|Пропущено,
				|НаКонтроле,
				|НаДоработке,
				|Брак,
				|ВремяСозданныхОпераций");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатВыполненияОпераций(Этап, ИдентификаторыОпераций)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Операция КАК Операция,
		|	ВложенныйЗапрос.ИдентификаторОперации КАК ИдентификаторОперации,
		|	СУММА(ВложенныйЗапрос.Создано) КАК Создано,
		|	СУММА(ВложенныйЗапрос.Выполняется) КАК Выполняется,
		|	СУММА(ВложенныйЗапрос.Выполнено) КАК Выполнено,
		|	СУММА(ВложенныйЗапрос.ТребуетПовторения) КАК ТребуетПовторения,
		|	СУММА(ВложенныйЗапрос.Пропущено) КАК Пропущено,
		|	СУММА(ВложенныйЗапрос.НаКонтроле) КАК НаКонтроле,
		|	СУММА(ВложенныйЗапрос.НаДоработке) КАК НаДоработке,
		|	СУММА(ВложенныйЗапрос.Брак) КАК Брак,
		|	СУММА(ВложенныйЗапрос.ВремяСозданныхОпераций) КАК ВремяСозданныхОпераций
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ПроизводственнаяОперация.Операция КАК Операция,
		|		ПроизводственнаяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусСоздана, &СтатусВыполняется, &СтатусПропущена)
		|				ТОГДА ПроизводственнаяОперация.Количество
		|						- ПроизводственнаяОперация.КоличествоОтменено
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполнена
		|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
		|						+ ПроизводственнаяОперация.КоличествоНаКонтроле
		|						+ ПроизводственнаяОперация.КоличествоНаДоработке
		|						+ ПроизводственнаяОперация.КоличествоБрак
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Создано,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполняется
		|				ТОГДА ПроизводственнаяОперация.Количество
		|						- ПроизводственнаяОперация.КоличествоНаКонтроле
		|						- ПроизводственнаяОперация.КоличествоНаДоработке
		|						- ПроизводственнаяОперация.КоличествоБрак
		|						- ПроизводственнаяОперация.КоличествоФакт
		|						- ПроизводственнаяОперация.КоличествоОтменено
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Выполняется,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусВыполняется, &СтатусВыполнена)
		|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Выполнено,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполнена
		|					И ПроизводственнаяОперация.ТребуетПовторения
		|				ТОГДА ПроизводственнаяОперация.КоличествоФакт
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ТребуетПовторения,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусПропущена
		|				ТОГДА ПроизводственнаяОперация.Количество
		|						- ПроизводственнаяОперация.КоличествоОтменено
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Пропущено,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусВыполняется, &СтатусВыполнена)
		|				ТОГДА ПроизводственнаяОперация.КоличествоНаКонтроле
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаКонтроле,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусВыполняется, &СтатусВыполнена)
		|				ТОГДА ПроизводственнаяОперация.КоличествоНаДоработке
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НаДоработке,
		|		ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусВыполняется, &СтатусВыполнена)
		|				ТОГДА ПроизводственнаяОперация.КоличествоБрак
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Брак,
		|		ВЫБОР ПроизводственнаяОперация.ВремяВыполненияЕдИзм
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|				ТОГДА 60
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|				ТОГДА 3600
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|				ТОГДА 86400
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|				ТОГДА 86400
		|			ИНАЧЕ 1
		|		КОНЕЦ * ПроизводственнаяОперация.ВремяВыполнения КАК ВремяСозданныхОпераций
		|	ИЗ
		|		Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация
		|	ГДЕ
		|		ПроизводственнаяОперация.Этап = &Этап
		|		И ПроизводственнаяОперация.ИдентификаторОперации В (&ИдентификаторыОпераций)
		|		И ПроизводственнаяОперация.Статус <> &СтатусНеВыполнена
		|		И ПроизводственнаяОперация.Проведен
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		РеквизитыДеления.ПоследняяОперация КАК Операция,
		|		РеквизитыДеления.ИдентификаторПоследнейОперации КАК ИдентификаторОперации,
		|		РеквизитыДеления.ОтмененоПоследняяОперация КАК Создано,
		|		0 КАК Выполняется,
		|		0 КАК Выполнено,
		|		0 КАК ТребуетПовторения,
		|		РеквизитыДеления.ОтмененоПоследняяОперация КАК Пропущено,
		|		0 КАК НаКонтроле,
		|		0 КАК НаДоработке,
		|		0 КАК Брак,
		|		0 КАК ВремяСозданныхОпераций
		|	ИЗ
		|		РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
		|	ГДЕ
		|		РеквизитыДеления.Этап = &Этап
		|		И РеквизитыДеления.ИдентификаторПоследнейОперации В (&ИдентификаторыОпераций)
		|		И РеквизитыДеления.ОтмененоПоследняяОперация <> 0
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Операция,
		|	ВложенныйЗапрос.ИдентификаторОперации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ИдентификаторыОпераций", ИдентификаторыОпераций);
	Запрос.УстановитьПараметр("СтатусСоздана", Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Запрос.УстановитьПараметр("СтатусВыполняется", Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	Запрос.УстановитьПараметр("СтатусВыполнена", Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	Запрос.УстановитьПараметр("СтатусПропущена", Перечисления.СтатусыПроизводственныхОпераций.Пропущена);
	Запрос.УстановитьПараметр("СтатусНеВыполнена", Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РассчитатьПоказателиВыполненияОперации(Операция, ДанныеОперации)
	
	ЗаполнитьЗначенияСвойств(
		Операция,
		ДанныеОперации,
		"Создано,
		|Выполняется,
		|Выполнено,
		|ТребуетПовторения,
		|Пропущено,
		|НаКонтроле,
		|НаДоработке,
		|Брак");
	
	Операция.ОжиданиеПредшествующих = 0;
	Операция.НачатыПредшествующие   = 0;
	Операция.МожноВыполнять         = 0;
	
	ПредыдущиеОперации = ПредыдущиеОперации(ДанныеОперации);
	
	Если ПредыдущиеОперации.ВГраница() <> -1 Тогда
		
		ЗапланированоКоэффициент = 1;
		Для каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
			Если ПредыдущаяОперация.Требуется > 0 Тогда
				ЗапланированоКоэффициент = Мин(ЗапланированоКоэффициент,
					(ПредыдущаяОперация.КоличествоНаПартию - ПредыдущаяОперация.Брак) / ПредыдущаяОперация.Требуется);
			КонецЕсли;
		КонецЦикла;
		Операция.Запланировано            = ЗапланированоКоэффициент * Операция.Требуется;
		ДанныеОперации.КоличествоНаПартию = Операция.Запланировано;
		
		МожноВыполнятьРасчетное       = -1;
		НачатыПредшествующиеРасчетное = -1;
		
		Если Операция.Запланировано > 0 Тогда
		
			Для каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
				
				РасчетноеКоличество = (ПредыдущаяОперация.Выполнено - ПредыдущаяОперация.ТребуетПовторения + ПредыдущаяОперация.Пропущено)
										/(ПредыдущаяОперация.Требуется/Операция.Требуется);
				
				МожноВыполнятьРасчетное = ?(МожноВыполнятьРасчетное > -1,
													Мин(МожноВыполнятьРасчетное,
														РасчетноеКоличество),
													РасчетноеКоличество);
			КонецЦикла;
			
			Для каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
				
				РасчетноеКоличество = (ПредыдущаяОперация.Выполняется + ПредыдущаяОперация.НаКонтроле + ПредыдущаяОперация.НаДоработке)
										/(ПредыдущаяОперация.Требуется/Операция.Требуется)
									+ Макс((ПредыдущаяОперация.Выполнено - ПредыдущаяОперация.ТребуетПовторения + ПредыдущаяОперация.Пропущено)
											/(ПредыдущаяОперация.Требуется/Операция.Требуется) 
										- МожноВыполнятьРасчетное, 0);
				
				НачатыПредшествующиеРасчетное = ?(НачатыПредшествующиеРасчетное > -1,
														Мин(НачатыПредшествующиеРасчетное,
															РасчетноеКоличество), 
														РасчетноеКоличество);
				
			КонецЦикла;
		
		КонецЕсли;
		
		НачатыПредшествующиеРасчетное = Макс(НачатыПредшествующиеРасчетное, 0);
		МожноВыполнятьРасчетное       = Макс(МожноВыполнятьРасчетное, 0);
		
		ОжидаетВыполнения = Макс(Операция.Запланировано + Операция.ТребуетПовторения, Операция.Создано)
			- (Операция.Выполняется
					+ Операция.Выполнено
					+ Операция.НаКонтроле
					+ Операция.НаДоработке
					+ Операция.Брак
					+ Операция.Пропущено);
		
		Если МожноВыполнятьРасчетное < Макс(Операция.Запланировано + Операция.ТребуетПовторения, Операция.Создано) Тогда
			Операция.МожноВыполнять = МожноВыполнятьРасчетное
				- (Операция.Выполняется
						+ Операция.Выполнено
						+ Операция.НаКонтроле
						+ Операция.НаДоработке
						+ Операция.Брак
						+ Операция.Пропущено
						- Операция.ТребуетПовторения);
		Иначе
			Операция.МожноВыполнять = ОжидаетВыполнения;
		КонецЕсли;
		
		Операция.НачатыПредшествующие = Мин(НачатыПредшествующиеРасчетное, ОжидаетВыполнения);
		Операция.ОжиданиеПредшествующих = ОжидаетВыполнения - Операция.МожноВыполнять - Операция.НачатыПредшествующие;
		
	Иначе
		
		Операция.МожноВыполнять = Макс(Операция.Запланировано + Операция.ТребуетПовторения, Операция.Создано)
			- (Операция.Выполняется
					+ Операция.Выполнено
					+ Операция.НаКонтроле
					+ Операция.НаДоработке
					+ Операция.Брак
					+ Операция.Пропущено);
		
	КонецЕсли;
	
	ОбщееВремяВыполнения = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
	ЗаполнитьЗначенияСвойств(ОбщееВремяВыполнения, ДанныеОперации);
	
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
		ОбщееВремяВыполнения,
		Операция.Запланировано / ДанныеОперации.Количество);
	
	Операция.ВремяЕдИзм = ОбщееВремяВыполнения.ВремяВыполненияЕдИзм;
		
	Если ДанныеОперации.ВремяСозданныхОпераций > 0 Тогда
		
		ВремяСозданныхОпераций = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				ДанныеОперации.ВремяСозданныхОпераций,
				Операция.ВремяЕдИзм);
		
		Если (Операция.Запланировано + Операция.ТребуетПовторения) > Операция.Создано
			И ДанныеОперации.Количество > 0 Тогда
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
					ОбщееВремяВыполнения,
					(Операция.Запланировано + Операция.ТребуетПовторения - Операция.Создано) / ДанныеОперации.Количество);
			
			Операция.ВремяОбщее = ОбщееВремяВыполнения.ВремяВыполнения + ВремяСозданныхОпераций;
			
		Иначе
			
			Операция.ВремяОбщее = ВремяСозданныхОпераций;
			
		КонецЕсли;
		
	Иначе
		
		Операция.ВремяОбщее = ОбщееВремяВыполнения.ВремяВыполнения;
		
	КонецЕсли;
	
	Если ДанныеОперации.ВремяШтучное > 0 Тогда
		
		Если ДанныеОперации.ВремяШтучноеЕдИзм = Операция.ВремяЕдИзм Тогда
			Операция.ВремяШтучное = ДанныеОперации.ВремяШтучное;
		Иначе
			Операция.ВремяШтучное = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
					ДанныеОперации.ВремяШтучное,
					ДанныеОперации.ВремяШтучноеЕдИзм),
				Операция.ВремяЕдИзм);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОперации.ВремяПЗ > 0 Тогда
		
		Если ДанныеОперации.ВремяПЗЕдИзм = Операция.ВремяЕдИзм Тогда
			Операция.ВремяПЗ = ДанныеОперации.ВремяПЗ;
		Иначе
			Операция.ВремяПЗ = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
					ДанныеОперации.ВремяПЗ,
					ДанныеОперации.ВремяПЗЕдИзм),
				Операция.ВремяЕдИзм);
		КонецЕсли;
		
	КонецЕсли; 
	
	Операция.Порядок = ?(Операция.Выполнено > 0 ИЛИ Операция.Пропущено > 0, 5, 
						?(Операция.Выполняется > 0 ИЛИ Операция.НаКонтроле > 0 ИЛИ Операция.НаДоработке > 0, 4,
						?(Операция.МожноВыполнять > 0, 3,
						?(Операция.НачатыПредшествующие > 0, 2,
						?(Операция.ОжиданиеПредшествующих > 0, 1, 0)))));
	
КонецПроцедуры

#КонецОбласти

Процедура СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ)
	
	ТекстСообщения = НСтр("ru = 'Не удалось рассчитать очередь производственных операций.';
							|en = 'Cannot calculate the routing operation queue.'");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			,
			, 
			Отказ);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ОчередьПроизводственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.13.40";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("833b3f93-6c82-4ec3-805d-fc4f9f10a11a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОчередьПроизводственныхОпераций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет в регистре ""Очередь производственных операций"" ресурс ""Требуется""';
									|en = 'Fills the ""Required"" resource in the ""Queue of routing operations"" register'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ОчередьПроизводственныхОпераций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ТехнологическиеОперации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОчередьПроизводственныхОпераций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОчередьПроизводственныхОпераций.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ТехнологическиеОперации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.ОчередьПроизводственныхОпераций";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Этап.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Этап");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.ОчередьПроизводственныхОпераций");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Очередь.Подразделение    КАК Подразделение,
		|	Очередь.Этап             КАК Этап
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|ГДЕ
		|	(Очередь.Запланировано = 0
		|			ИЛИ Очередь.Требуется = 0)
		|	И НЕ Очередь.ВАрхиве
		|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить(),
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ОчередьПроизводственныхОпераций";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Этапы = Новый Массив;
	Для каждого Выборка Из ОбновляемыеДанные Цикл
		Этапы.Добавить(Выборка.Этап);
	КонецЦикла;
	
	РеквизитыЭтапов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Этапы, "Распоряжение,ПартияПроизводства");
	
	Для каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Подразделение", Выборка.Подразделение);
			ЭлементБлокировки.УстановитьЗначение("Этап", Выборка.Этап);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Подразделение.Установить(Выборка.Подразделение);
			НаборЗаписей.Отбор.Этап.Установить(Выборка.Этап);
			НаборЗаписей.Прочитать();
			
			НаборИзменен = Ложь;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				Для каждого Запись из НаборЗаписей Цикл
					
					Если Запись.Требуется = 0 ИЛИ Запись.Запланировано = 0 Тогда
						
						Если Запись.Запланировано > 0 Тогда
							
							Запись.Требуется = Запись.Запланировано;
							НаборИзменен = Истина;
							
						Иначе
							
							Этап = Запись.Этап;
							РеквизитыЭтапа = РеквизитыЭтапов.Получить(Этап);
							
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЭтапПроизводства2_2");
							ЭлементБлокировки.УстановитьЗначение("Распоряжение", РеквизитыЭтапа.Распоряжение);
							ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", РеквизитыЭтапа.ПартияПроизводства);
							ЭлементБлокировки.УстановитьЗначение("Ссылка", Этап);
							ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
							БлокировкаДанных.Заблокировать();
							
							ДанныеЭтапа = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(Этап)[Этап];
							
							Очередь = ОчередьОпераций(Этап, ДанныеЭтапа);
							НаборЗаписей.Загрузить(Очередь);
							
							НаборИзменен = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = 
				СтрШаблон(
					НСтр("ru = 'Не удалось записать данные в регистр ""Очередь производственных операций"" по этапу ""%1"", по причине: %2';
						|en = 'Cannot save the ""%1"" stage data to the ""Queue of routing operations"" register. Reason: %2'"),
					Выборка.Этап,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ОчередьПроизводственныхОпераций, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
