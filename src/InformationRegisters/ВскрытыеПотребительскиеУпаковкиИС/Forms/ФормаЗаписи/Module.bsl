#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьНачальныеПараметрыПриСоздании();
	УстановитьУсловноеОформление();
	НастроитьЭлементыФормы();
	СброситьРазмерыИПоложениеОкна();
	
	ОбщегоНазначенияИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Остаток");
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ОбщегоНазначенияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВладелецФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено.
			                      |Открытие формы производится из документа Подключение к оборудованию розлива ИС МП.';
			                      |en = 'Непосредственное открытие этой формы не предусмотрено.
			                      |Открытие формы производится из документа Подключение к оборудованию розлива ИС МП.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоПиво                       = (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво);
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЭтоИндивидуальныйПредприниматель
		Или Не ЭтоПиво Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АдресПодключенияСтрокой");
		МассивНепроверяемыхРеквизитов.Добавить("КодФИАС");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокРеализации) И ЗначениеЗаполнено(ДатаПодключения)
		И СрокРеализации < ДатаПодключения И ЭтоПиво Тогда
		ТекстСообщения = Нстр("ru = 'Дата истечения срока годности не может быть ранее даты подключения';
								|en = 'Дата истечения срока годности не может быть ранее даты подключения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "СрокРеализации", Отказ);
	КонецЕсли;
	
	Если ТипЗнч(ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад")) = Тип("Строка") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Не ЭтоПиво Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	КонецЕсли;
	
	Если ЭтоРедактированиеЗаписи Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Остаток");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Комментарий)
		И ЗначениеЗаполнено(КодМаркировкиОтключить)
		И НЕ ОтключитьОтОборудования Тогда
		ПроверяемыеРеквизиты.Добавить("Комментарий");
	КонецЕсли;
	
	ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		МодульИнтеграцияИСМППереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМППереопределяемый");
		МодульИнтеграцияИСМППереопределяемый.ПриОпределенииОбработкиПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И ИмяПодсистемы = "ИСМП" И ПравоИзменения Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Поле ""Организация"" не заполнено';
					|en = 'Поле ""Организация"" не заполнено'"),,
				"Организация");
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Источник, Событие, Данные, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененоСостояние(ОбщегоНазначенияИСМПКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Документ Тогда
		
		ОбновитьСтатусИСМП();
		
	КонецЕсли;
	
	Если ИмяСобытия = ОбменДаннымиИСКлиентСервер.ИмяСобытияВыполненОбмен(ОбщегоНазначенияИСМПКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьСтатусИСМП();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОстаток" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ВидПродукции", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
		ПараметрыОткрытияФормы.Вставить("Организация",  Организация);
		ПараметрыОткрытияФормы.Вставить("Штрихкоды",    КодМаркировкиОтключить);
		
		ОткрытьФорму(
			"Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор());
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Документ);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьКодМаркировкиОтключитьВБуферОбмена" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, Строка(КодМаркировкиОтключить));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПервоеПодключение Тогда
		Отказ                = Истина;
		ЭтоПервоеПодключение = Ложь;
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресПодключенияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	АдресПодключенияСтрокой = ВыбранноеЗначение.Представление;
	АдресПодключения        = ВыбранноеЗначение.КонтактнаяИнформация;
	КомментарийАдресаПодключения = ВыбранноеЗначение.Комментарий;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		КодФИАС = ИдентификаторФИАСПоДаннымАдреса(АдресПодключения);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	АдресПодключенияСтрокой = "";
	АдресПодключения        = "";
	КомментарийАдресаПодключения   = "";
КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		АдресПодключения        = "";
		АдресПодключенияСтрокой = "";
		КомментарийАдресаПодключения   = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	АдресПодключенияСтрокой = Текст;
	АдресПодключения = ИнтеграцияИСВызовСервера.ЗначенияПолейКонтактнойИнформации(
		Текст, ВидКонтактнойИнформацииАдресаПодключения);

КонецПроцедуры

&НаКлиенте
Процедура АдресПодключенияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> АдресПодключенияСтрокой Тогда
		АдресПодключенияСтрокой = Элемент.ТекстРедактирования;
		АдресПодключения        = "";
	КонецЕсли;
	
	ВидКонтактнойИнформацииАдресаПодключения.НастройкиПроверки.ПроверятьКорректность   = Истина;
	ВидКонтактнойИнформацииАдресаПодключения.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииАдресаПодключения,
		АдресПодключения,
		АдресПодключенияСтрокой,
		КомментарийАдресаПодключения);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	КомментарийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодМаркировкиПриИзменении(Элемент)
	
	КодМаркировкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура СрокРеализацииПриИзменении(Элемент)
	
	ПриИзмененииСрокаРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтОборудованияПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКОборудованию(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПиво        = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
	ДанныеСоздания = СоздатьПодключениеКегаКОборудованиюНаСервере();
	
	Если ЗначениеЗаполнено(ДанныеСоздания.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеСоздания.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Статус   = ПредопределенноеЗначение("Перечисление.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено");
	Документ = ДанныеСоздания.Документ;
	
	ОтключитьОтОборудования                    = Ложь;
	Элементы.ОтключитьОтОборудования.Видимость = Ложь;
	
	СохранитьПолныйКодМаркировкиПриВскрытииПотребительскойУпаковки();
	ОповеститьОбИзмененииОстаткаВПотребительскойУпаковке();
	
	Если ЕстьДоступныеСертификаты И ЭтоПиво И ИспользуетсяИнтерактивнаяПередачаДанных Тогда
		ЭтоПервоеПодключение = Истина;
		ПередатьДанныеВСервис();
	Иначе
		ЭтоПервоеПодключение = Ложь;
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзменения = ИзменитьВскрытиеПотребительскойУпаковкиНаСервере();
	
	Если ЗначениеЗаполнено(ДанныеИзменения.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеИзменения.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзмененииОстаткаВПотребительскойУпаковке();
	ПередатьДанныеВСервис();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзменения = ИзменитьВскрытиеПотребительскойУпаковкиНаСервере(Истина);
	
	Если ЗначениеЗаполнено(ДанныеИзменения.ТекстОшибки) Тогда
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеИзменения.ТекстОшибки);
	Иначе
		СохранитьПолныйКодМаркировкиПриВскрытииПотребительскойУпаковки();
		ОповеститьОбИзмененииОстаткаВПотребительскойУпаковке();
		ЭтоПервоеПодключение = Ложь;
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодФИАС(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьМестаОсуществленияДеятельностиЗавершение = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнитьМестаОсуществленияДеятельностиЗавершение",
		ЭтотОбъект);
		
	ПараметрыЗапросаДанных = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапросаДанных.Организация           = Организация;
	ПараметрыЗапросаДанных.ОповещениеОЗавершении = ЗаполнитьМестаОсуществленияДеятельностиЗавершение;
	ПараметрыЗапросаДанных.Параметры             = Новый Структура();
	ПараметрыЗапросаДанных.Параметры.Вставить("ВидПродукции", ВидПродукции);
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.СписокМестОсуществленияДеятельности(ПараметрыЗапросаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Архивировать(Команда)
	
	АрхивитроватьДокументЗавершение = Новый ОписаниеОповещения("АрхивитроватьДокументЗавершение", ЭтотОбъект);
	ОбщегоНазначенияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Документ, ОбщегоНазначенияИСМПКлиент, АрхивитроватьДокументЗавершение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьПолныйКодМаркировкиПриВскрытииПотребительскойУпаковки()
	
	Если Не СохранитьПолныйКод
		Или Не ЭтоРасширеннаяВерсияГосИС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУточнения = ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ОповещениеПоЗавершениюУточненияДанных.ДополнительныеПараметры;
	ДанныеШтрихкода    = ПараметрыУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	Если ДанныеШтрихкода.ЕстьВПулеКодовМаркировки Тогда
		Возврат;
	КонецЕсли;
	
	МодульШтрихкодированиеИСМПВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПВызовСервера");
	МодульШтрихкодированиеИСМПВызовСервера.СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыУточнения.ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииОстаткаВПотребительскойУпаковке()
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("ШтрихкодУпаковки", КодМаркировки);
	ПараметрОповещения.Вставить("Остаток",          Остаток);
	
	Оповестить("ИзменилсяОстатокВскрытойПотребительскойУпаковки", ПараметрОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Остаток.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭтоРедактированиеЗаписи");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеВСервис()
	
	ПараметрыОбработкиДокументов = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Ссылка             = Документ;
	ПараметрыОбработкиДокументов.Организация        = Организация;
	ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперацииПодключенияКега", ЭтотОбъект);
		
	ОбменДаннымиИСМПКлиент.ПодготовитьКПередаче(
		ЭтотОбъект,
		ПараметрыОбработкиДокументов,
		ОписаниеПриЗавершении);
	
	ОбновитьСтатусИСМП();
	НастроитьЭлементыФормы();
	
	Оповестить(
		ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененОбъект(ОбщегоНазначенияИСМПКлиентСервер.ИмяПодсистемы(), ВладелецФормы),,
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОбновитьПредставлениеСтатуса();
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Документ);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Документ);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ОбменДаннымиИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
		
		КонецЕсли;
		
	КонецЕсли;

	ОбновитьПредставлениеСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатуса()

	ЗначениеСтатуса = Статус;
	Если СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПустаяСсылка() Тогда
		ЗначениеСтатуса = НСтр("ru = 'К подключению';
								|en = 'К подключению'");
	КонецЕсли;
	
	ДанныеСтатуса = Новый Массив();
	ДанныеСтатуса.Добавить(НСтр("ru = 'Статус:';
								|en = 'Статус:'"));
	ДанныеСтатуса.Добавить(" ");
	ДанныеСтатуса.Добавить(Строка(ЗначениеСтатуса));
	
	Если Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СтатусыОшибок().Найти(СтатусИСМП) <> Неопределено Тогда
		ДанныеСтатуса.Добавить(
			Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					НСтр("ru = ', ошибка передачи';
						|en = ', ошибка передачи'"),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина';
						|en = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")"));
	КонецЕсли;
	
	Элементы.СтатусПредставление.Заголовок = Новый ФорматированнаяСтрока(ДанныеСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивитроватьДокументЗавершение(Изменения, ДополнительныеПараметры) Экспорт
	
	Если Изменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изменение Из Изменения Цикл
		Если Изменение.Объект = Документ Тогда
			ЭтоПервоеПодключение = Ложь;
			Закрыть(Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперацииПодключенияКега(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЕстьОшибка = Ложь;
		Для Каждого СтрокаДанных Из Результат Цикл
			Если СтрокаДанных.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи")
				Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОшибка Тогда
			ЭтоПервоеПодключение = Ложь;
			Закрыть(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПодключениеКегаКОборудованиюНаСервере()
	
	ЭтоАлкоголь       = (ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная);
	ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
	Если ЭтоАлкоголь И ЭтоРасширеннаяВерсияГосИС Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект,, "Остаток");
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект);
	КонецЕсли;
	ДанныеПодключения.Статус        = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено;
	ДанныеПодключения.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ОтключитьОтОборудования И ЗначениеЗаполнено(КодМаркировкиОтключить) Тогда
		
		ДанныеОтключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
		ДанныеОтключения.КодМаркировки = КодМаркировкиОтключить;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбщегоНазначенияИС.ВскрытьПотребительскуюУпаковку(
		ДанныеПодключения,
		ДанныеОтключения);
	
	ОбщегоНазначенияИСМППереопределяемый.ПриСохраненииНоменклатурыШтрихкодаУпаковки(
		КодМаркировки, Номенклатура, Характеристика, Серия);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ИзменитьВскрытиеПотребительскойУпаковкиНаСервере(ТолькоРегистрСведений = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	СохраненныеДанные         = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(КодМаркировки)[КодМаркировки];
	ДанныеПодключения         = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
	ЭтоАлкоголь               = (ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная);
	
	Если ТолькоРегистрСведений Тогда
		
		МожноРедактироватьПоля         = МожноРедактироватьПоля();
		ДанныеПодключения.Комментарий  = Комментарий;
		ДанныеПодключения.Склад        = Склад;
		ДанныеПодключения.ОбъемСлива   = ОбъемСлива;
		ДанныеПодключения.Организация  = Организация;
		ДанныеПодключения.ВидПродукции = ВидПродукции;
		Если Не ЭтоАлкоголь Или Не ЭтоРасширеннаяВерсияГосИС Тогда
			ДанныеПодключения.Остаток = Остаток;
		КонецЕсли;
		
		Если МожноРедактироватьПоля Тогда
			ДанныеПодключения.Подразделение = Подразделение;
		КонецЕсли;
		Если Не ЭтоИндивидуальныйПредприниматель Или МожноРедактироватьПоля Тогда
			ДанныеПодключения.АдресПодключения        = АдресПодключения;
			ДанныеПодключения.АдресПодключенияСтрокой = АдресПодключенияСтрокой;
		КонецЕсли;
		
		ДанныеПодключения.ПолныйКодМаркировки = ПолныйКодМаркировки;
		
	Иначе
		
		Если ЭтоАлкоголь Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект,, "Остаток");
		Иначе
			ЗаполнитьЗначенияСвойств(ДанныеПодключения, ЭтотОбъект);
		КонецЕсли;
		ДанныеПодключения.Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("КодМаркировки", КодМаркировки);
	
	Если Не ТолькоРегистрСведений Тогда
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПодключениеКегаКОборудованиюРозливаИСМП");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ);
	КонецЕсли;
	
	Если ЭтоАлкоголь И ЭтоРасширеннаяВерсияГосИС Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.АкцизныеМаркиЕГАИС");
		ЭлементБлокировки.УстановитьЗначение("АкцизнаяМарка", КодМаркировки);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Если Не ТолькоРегистрСведений Тогда
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеПодключения);
			ДокументОбъект.КодМаркировки = КодМаркировки;
			ДокументОбъект.Дата          = ТекущаяДатаСеанса();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ЗаписатьВскрытиеПотребительскойУпаковки(ДанныеПодключения, СохраненныеДанные);
		
		ОбщегоНазначенияИСМППереопределяемый.ПриСохраненииНоменклатурыШтрихкодаУпаковки(
			КодМаркировки, Номенклатура, Характеристика, Серия);
		
		Если ЭтоАлкоголь И ЭтоРасширеннаяВерсияГосИС Тогда
			
			МенеджерРегистраАкцизныеМаркиЕГАИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.АкцизныеМаркиЕГАИС");
			
			НаборЗаписей = МенеджерРегистраАкцизныеМаркиЕГАИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АкцизнаяМарка.Установить(КодМаркировки);
			НаборЗаписей.Прочитать();
			ДанныеНабора = НаборЗаписей.Выгрузить();
			ДанныеНабора.Сортировать("КоличествоЧастичногоВыбытия Убыв, Статус Убыв");
			
			Для Каждого СтрокаТаблицы Из ДанныеНабора Цикл
				
				Если СтрокаТаблицы.Статус = Перечисления["СтатусыАкцизныхМарок"]["ВНаличии"]
					Или СтрокаТаблицы.Статус = Перечисления["СтатусыАкцизныхМарок"]["ВскрытаяБутылка"] Тогда
						
					ДанныеЗаписиСтатуса = МенеджерРегистраАкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
					ЗаполнитьЗначенияСвойств(ДанныеЗаписиСтатуса, СтрокаТаблицы);
					ДанныеЗаписиСтатуса.КоличествоЧастичногоВыбытия = ЕмкостьПотребительскойУпаковки - Остаток;
					МенеджерРегистраАкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса, Истина);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
				
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка записи данных вскрытия потребительской упаковки %1:
				       |%2';
				       |en = 'Ошибка записи данных вскрытия потребительской упаковки %1:
				       |%2'"),
			КодМаркировки,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Ошибка записи данных вскрытия потребительской упаковки %1:
				       |%2';
				       |en = 'Ошибка записи данных вскрытия потребительской упаковки %1:
				       |%2'"),
			КодМаркировки,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиПодробно);
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
&НаСервере
Процедура НастроитьЭлементыФормы()
	
	МожноРедактироватьПоля    = МожноРедактироватьПоля();
	ТребуетсяПередачаДанных   = ТребуетсяПередачаДанных(ЭтотОбъект);
	ПодключенВоВнешнейСистеме = (Статус = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.ПодключеноВоВнешнейСистеме);
	ЭтоИСМП                   = (ИмяПодсистемы = "ИСМП");
	ЭтоПиво                   = ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	
	Элементы.АдресПодключенияСтрокой.ТолькоПросмотр = (ЭтоРедактированиеЗаписи И ЭтоИндивидуальныйПредприниматель Или Не ПравоИзменения);
	Элементы.Подразделение.ТолькоПросмотр           = (Не МожноРедактироватьПоля Или Не ПравоИзменения);
	Элементы.ДатаПодключения.ТолькоПросмотр         = (Не МожноРедактироватьПоля Или Не ПравоИзменения);
	Элементы.СрокРеализации.ТолькоПросмотр          = (Не МожноРедактироватьПоля Или Не ПравоИзменения);
	Элементы.КодФИАС.ТолькоПросмотр                 = (Не МожноРедактироватьПоля Или Не ПравоИзменения);
	Элементы.ПолучитьКодФИАС.Доступность            = (МожноРедактироватьПоля И ПравоИзменения);
	Элементы.КодМаркировки.ТолькоПросмотр           = (Не ЭтоРасширеннаяВерсияГосИС Или ЭтоРедактированиеЗаписи Или Не ПравоИзменения);
	Элементы.Комментарий.ТолькоПросмотр             = (Не ПравоИзменения);
	Элементы.Остаток.ТолькоПросмотр                 = (Не ПравоИзменения);
	Элементы.ОбъемСлива.ТолькоПросмотр              = (Не ПравоИзменения);
	Элементы.Склад.ТолькоПросмотр                   = (Не ПравоИзменения);
	Элементы.Архивировать.Доступность               = ПравоИзменения;
	
	Элементы.ПоискПоШтрихкоду.Видимость        = Не ЭтоРедактированиеЗаписи;
	Элементы.ОтключитьОтОборудования.Видимость = ЗначениеЗаполнено(КодМаркировкиОтключить);
	Элементы.КодФИАС.Видимость                 = ЭтоИндивидуальныйПредприниматель И ЭтоПиво;
	Элементы.ПолучитьКодФИАС.Видимость         = ЭтоИндивидуальныйПредприниматель И ЭтоПиво;
	Элементы.Архивировать.Видимость            = ЗначениеЗаполнено(Документ);
	Элементы.Комментарий.Видимость             = Не ПодключенВоВнешнейСистеме И ЭтоПиво;
	Элементы.ОбъемСлива.Видимость              = Не ПодключенВоВнешнейСистеме И ЭтоПиво И ЭтоРасширеннаяВерсияГосИС;
	Элементы.Организация.Видимость             = ЭтоИСМП;
	Элементы.СрокРеализации.Видимость          = ЭтоПиво;
	Элементы.АдресПодключенияСтрокой.Видимость = ЭтоПиво;
	
	Элементы.АдресПодключенияСтрокой.РедактированиеТекста = Не ЭтоИндивидуальныйПредприниматель;
	
	Если ЭтоПиво Тогда
		Элементы.ДатаПодключения.Заголовок     = НСтр( "ru = 'Дата подключения';
														|en = 'Дата подключения'");
		Элементы.СтатусПредставление.Видимость = Истина;
		Элементы.Организация.ПодсказкаВвода    = Неопределено;
		Если (ЭтоРедактированиеЗаписи И Не ТребуетсяПередачаДанных) Или Не ПравоИзменения Тогда
			Элементы.Организация.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ОтключитьОтОборудования.ТолькоПросмотр = ЗначениеЗаполнено(КодМаркировкиОтключить) И ЗначениеЗаполнено(Комментарий);
	Иначе
		Элементы.ДатаПодключения.Заголовок             = НСтр( "ru = 'Дата вскрытия';
																|en = 'Дата вскрытия'");
		Элементы.СтатусПредставление.Видимость         = Ложь;
		Элементы.Организация.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Организация.ПодсказкаВвода            = НСтр( "ru = 'Для всех организаций';
																|en = 'Для всех организаций'");
		Элементы.Организация.ТолькоПросмотр            = (Не ПравоИзменения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Элементы.ОбщаяКомандаПротоколОбменаИСМП.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ПодключитьКОборудованию.Видимость = Ложь;
	Элементы.ПередатьДанные.Видимость          = Ложь;
	Элементы.Записать.Видимость                = Ложь;
	
	Если ЭтоИСМП Тогда
		Элементы.КодМаркировки.ПодсказкаВвода = НСтр( "ru = 'Считайте код маркировки сканером штрихкода или выберите из списка.';
														|en = 'Считайте код маркировки сканером штрихкода или выберите из списка.'");
	Иначе
		Элементы.КодМаркировки.ПодсказкаВвода = НСтр( "ru = 'Считайте акцизную марку сканером штрихкода или выберите из списка.';
														|en = 'Считайте акцизную марку сканером штрихкода или выберите из списка.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ)
		И Не ЗначениеЗаполнено(Статус) Тогда
		Элементы.ПодключитьКОборудованию.Видимость         = Истина;
		Элементы.ПодключитьКОборудованию.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТребуетсяПередачаДанных И ЕстьДоступныеСертификаты И ИспользуетсяИнтерактивнаяПередачаДанных Тогда
		Элементы.ПередатьДанные.Видимость         = Истина;
		Элементы.ПередатьДанные.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Записать.Видимость         = Истина;
		Элементы.Записать.КнопкаПоУмолчанию = Истина;
		Элементы.Записать.Доступность       = ПравоИзменения;
	КонецЕсли;
	
	Если ЕстьДоступныеСертификаты И ЭтоПиво И ИспользуетсяИнтерактивнаяПередачаДанных Тогда
		Элементы.ПодключитьКОборудованию.Заголовок = НСтр( "ru = 'Подключить к оборудованию';
															|en = 'Подключить к оборудованию'");
	Иначе
		Элементы.ПодключитьКОборудованию.Заголовок = НСтр( "ru = 'Готово';
															|en = 'Готово'");
	КонецЕсли;
	
	ДанныеЗаголовка = Новый Массив();
	ДанныеЗаголовка.Добавить(НСтр( "ru = 'Отключить код маркировки';
									|en = 'Отключить код маркировки'"));
	ДанныеЗаголовка.Добавить(" ");
	//@skip-check new-font
	ДанныеЗаголовка.Добавить(
		Новый ФорматированнаяСтрока(
			Строка(КодМаркировкиОтключить),
			Новый Шрифт(,,,, Истина),
			ЦветаСтиля.ЦветГиперссылкиГосИС,,
			"СкопироватьКодМаркировкиОтключитьВБуферОбмена"));
	ДанныеЗаголовка.Добавить(" ");
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		ДанныеЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр( "ru = 'Показать остаток';
																	|en = 'Показать остаток'"),,,, "ПоказатьОстаток"));
	КонецЕсли;
	
	Элементы.ОтключитьОтОборудования.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеЗаголовка);
	
	Элементы.Подразделение.Видимость                           = Ложь;
	Элементы.АдресПодключенияСтрокой.АвтоОтметкаНезаполненного = Неопределено;
	
	Если Не ЭтоИндивидуальныйПредприниматель И ЭтоПиво Тогда
		Элементы.Подразделение.Видимость                           = ИспользоватьОбособленныеПодразделения;
		Элементы.АдресПодключенияСтрокой.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Не ПравоИзменения Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		Элементы.Остаток.РасширеннаяПодсказка.Заголовок = ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(
			ВидПродукции);
		Элементы.ОбъемСлива.РасширеннаяПодсказка.Заголовок = ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(
			ВидПродукции);
	Иначе
		Элементы.Остаток.РасширеннаяПодсказка.Заголовок = ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(
			Перечисления.ВидыПродукцииИС.Пиво);
		Элементы.ОбъемСлива.РасширеннаяПодсказка.Заголовок = ОбщегоНазначенияИСКлиентСервер.ПредставлениеЕдиницыЧастичногоВыбытия(
			Перечисления.ВидыПродукцииИС.Пиво);
	КонецЕсли;
	
	Элементы.Комментарий.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Комментарий)
		И ЗначениеЗаполнено(КодМаркировкиОтключить)
		И НЕ ОтключитьОтОборудования;
	ОбщегоНазначенияИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Комментарий");
	
	ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПараметрыПриСоздании()
	
	ПравоИзменения      = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС);
	Организация         = Параметры.Организация;
	КодМаркировки       = Параметры.КодМаркировки;
	Номенклатура        = Параметры.Номенклатура;
	Характеристика      = Параметры.Характеристика;
	Серия               = Параметры.Серия;
	Склад               = Параметры.Склад;
	ИмяПодсистемы       = Параметры.ИмяПодсистемы;
	СохранитьПолныйКод  = Параметры.СохранитьПолныйКод;
	ПолныйКодМаркировки = Параметры.ПолныйКодМаркировки;
	ЭтоРасширеннаяВерсияГосИС = ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС();
	
	Заголовок = ОбщегоНазначенияИСПовтИсп.ПредставленияВскрытыхПотребительскихУпаковок(ИмяПодсистемы).ЗаголовокЗаписи;
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект);
	ИспользуетсяИнтерактивнаяПередачаДанных = ОбщегоНазначенияИСМП.ИнтерактиванаяПередачаДанныхОПодключенииКегаКОборудованиюРозливаРазрешена();
	
	Если ТипЗнч(ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад")) = Тип("Строка") Тогда
		Элементы.Склад.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодуУпаковки();
	ПриИзмененииОрганизации();
	ПриИзмененииВидаПродукции();
	ОбновитьСтатусИСМП();
	
	Если Не ЭтоРедактированиеЗаписи Тогда
		ДатаПодключения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	РеквизитыОрганизации = ОбщегоНазначенияИС.ИННКППGLNОрганизации(Организация, Подразделение);
	ЭтоИндивидуальныйПредприниматель = (СтрДлина(РеквизитыОрганизации.ИНН) > 10);
	
	СертификатыПользователя = ОбщегоНазначенияИС.СертификатыПользователяДляПодписиПоОрганизации(Организация, Истина);
	Если СертификатыПользователя.Количество() Тогда
		ЕстьДоступныеСертификаты = Истина;
	Иначе
		СертификатыДляПодписанияНаСервере = ОбщегоНазначенияИС.СертификатыДляПодписанияНаСервере();
		СтруктураПоиска = Новый Структура("Организация", Организация);
		Если СертификатыДляПодписанияНаСервере <> Неопределено
			И СертификатыДляПодписанияНаСервере.Сертификаты.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			ЕстьДоступныеСертификаты = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаПродукции()
	
	ИспользоватьОбособленныеПодразделения = Ложь;
	
	Если ИмяПодсистемы = "ИСМП"
		И (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках) Тогда
		ИспользоватьОбособленныеПодразделения = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСрокаРеализации()
	
	Если ЗначениеЗаполнено(СрокРеализации) Тогда
		
		ДанныеПредставленияСрока = ОбщегоНазначенияИСКлиентСервер.ДанныеПредставленияСрокаГодности(
			СрокРеализации, ТекущаяДатаСеанса());
		
		Если ДанныеПредставленияСрока.ОсталосьДней < 0 Тогда
			Элементы.СрокРеализации.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеПредставленияСрока.Представление,, ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		ИначеЕсли ДанныеПредставленияСрока.ОсталосьДней = 0 Тогда
			Элементы.СрокРеализации.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеПредставленияСрока.Представление,, ЦветаСтиля.ЦветТекстаПроблемаГосИС);
		Иначе
			Элементы.СрокРеализации.РасширеннаяПодсказка.Заголовок = ДанныеПредставленияСрока.Представление;
		КонецЕсли;
		
	Иначе
		Элементы.СрокРеализации.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоШтрихкодуУпаковки(ДанныеШтрихкода = Неопределено)
	
	ЭтоПервоеПодключение = Ложь;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		
		ДанныеВскрытия  = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(
			КодМаркировки, Истина)[КодМаркировки];
		ЗаполнитьЗначенияРеквизитовПоКодуМаркировки(ДанныеШтрихкода);
		
		ОписаниеНоменклаутры           = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура)[Номенклатура];
		ЕмкостьПотребительскойУпаковки = ОписаниеНоменклаутры.ЕмкостьПотребительскойУпаковки;
		
		Если ДанныеВскрытия = Неопределено Тогда
			
			Остаток = ЕмкостьПотребительскойУпаковки;
			
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				МенеджерДокументаПодключения = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ПодключениеКегаКОборудованиюРозливаИСМП");
				ДанныеЗаполнения = МенеджерДокументаПодключения.ДанныеЗаполненияПоСтатистике(Организация);
				Если ДанныеЗаполнения <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				Если ЭтоРасширеннаяВерсияГосИС Тогда
					МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
					Специфика = МодульШтрихкодированиеЕГАИС.СпецификаАкцизныхМарок(КодМаркировки, ПараметрыСканирования);
					Для Каждого СтрокаТаблицы Из Специфика Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоЧастичногоВыбытия) Тогда
							Остаток = ЕмкостьПотребительскойУпаковки - СтрокаТаблицы.КоличествоЧастичногоВыбытия;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ЭтоРедактированиеЗаписи = Истина;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеВскрытия,, "ВидПродукции");
			
			Если ЗначениеЗаполнено(ДанныеВскрытия.ВидПродукции) Тогда
				ВидПродукции = ДанныеВскрытия.ВидПродукции;
			КонецЕсли;
			
			ОбщегоНазначенияИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Остаток");
			
		КонецЕсли;
		
	Иначе
		
		КодМаркировки                  = Неопределено;
		Номенклатура                   = Неопределено;
		Характеристика                 = Неопределено;
		Серия                          = Неопределено;
		ВидПродукции                   = Неопределено;
		ЭтоИСМП                        = (ИмяПодсистемы = "ИСМП");
		ЕмкостьПотребительскойУпаковки = Неопределено;
		ВидыПродукции = ОбщегоНазначенияИСВызовСервера.ВидыПродукцииИспользующиеВскрытыеПотребительскихУпаковок(ЭтоИСМП, Не ЭтоИСМП);
		
		Если ВидыПродукции.Количество() = 1 Тогда
			ВидПродукции = ВидыПродукции[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ОписаниеНоменклаутры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура)[Номенклатура];
			Остаток = ОписаниеНоменклаутры.ЕмкостьПотребительскойУпаковки;
		Иначе
			Остаток = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСрокаРеализации();
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПередачаДанных(Форма)
	
	Возврат (ЗначениеЗаполнено(Форма.Документ)
		И (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.Черновик")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи")));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеКомментарии()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 30
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий КАК Комментарий,
		|	МАКСИМУМ(ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения) КАК ДатаПодключения
		|ИЗ
		|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК ВскрытыеПотребительскиеУпаковкиИС
		|ГДЕ
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий <> """"
		|	И ВскрытыеПотребительскиеУпаковкиИС.Склад = &Склад
		|	И ВскрытыеПотребительскиеУпаковкиИС.Организация = &Организация
		|СГРУППИРОВАТЬ ПО
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПодключения УБЫВ";
	
	Запрос.УстановитьПараметр("Склад",       Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Элементы.Комментарий.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комментарий"));
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС.Форма.ФормаПодключенияКегаКОборудованию", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКегОтключенияОтОборудования()
	
	ОтключитьОтОборудования = Ложь;
	КодМаркировкиОтключить   = Неопределено;
	
	Если ЭтоРедактированиеЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки КАК КодМаркировки,
	|	&ИмяПоляНоменклатураШтрихкода                   КАК Номенклатура,
	|	&ИмяПоляХарактеристикаШтрихкода                 КАК Характеристика,
	|	&ИмяПоляСерияШтрихкода                          КАК Серия
	|ИЗ
	|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ПутьКИсточникуДанныхШтрихкода КАК ШтрихкодыУпаковок
	|	ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = &ПолеСвязиКодМаркировки
	|ГДЕ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки <> &КодМаркировки
	|	И ВскрытыеПотребительскиеУпаковкиИС.Комментарий = &Комментарий
	|	И ВскрытыеПотребительскиеУпаковкиИС.Склад       = &Склад
	|	И ВскрытыеПотребительскиеУпаковкиИС.Организация = &Организация
	|	И ВскрытыеПотребительскиеУпаковкиИС.Статус      = ЗНАЧЕНИЕ(Перечисление.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено)";
	
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСДаннымиНоменклатурыПоКодуМаркировки(
		Запрос.Текст,
		"ШтрихкодыУпаковок");
	
	Запрос.УстановитьПараметр("Комментарий",   Комментарий);
	Запрос.УстановитьПараметр("КодМаркировки", КодМаркировки);
	Запрос.УстановитьПараметр("Склад",         Склад);
	Запрос.УстановитьПараметр("Документ",      Документ);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			КодМаркировкиОтключить  = Выборка.КодМаркировки;
			ОтключитьОтОборудования = Истина;
			Прервать;
		ИначеЕсли (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
			Или Не ЗначениеЗаполнено(ВидПродукции))
			И Выборка.Номенклатура = Номенклатура
			И Выборка.Характеристика = Характеристика
			И Выборка.Серия = Серия Тогда
			КодМаркировкиОтключить  = Выборка.КодМаркировки;
			ОтключитьОтОборудования = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъемСливаПоСтатистике()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПодключениеКегаКОборудованиюРозливаИСМП.ОбъемСлива,
		|	ПодключениеКегаКОборудованиюРозливаИСМП.Дата КАК Дата
		|ИЗ
		|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК ПодключениеКегаКОборудованиюРозливаИСМП
		|ГДЕ
		|	ПодключениеКегаКОборудованиюРозливаИСМП.Проведен
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Организация = &Организация
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Склад = &Склад
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Комментарий = &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Комментарий", Комментарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъемСлива = ВыборкаДетальныеЗаписи.ОбъемСлива;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КодМаркировкиПриИзмененииНаСервере()
	
	ВывестиСообщениеОбОшибке(ЭтотОбъект);
	
	ЗаполнитьДанныеПоШтрихкодуУпаковки();
	ПриИзмененииВидаПродукции();
	ЗаполнитьКегОтключенияОтОборудования();
	
	ТекстОшибки = Неопределено;
	
	ВидыПродукции = ОбщегоНазначенияИСВызовСервера.ВидыПродукцииИспользующиеВскрытыеПотребительскихУпаковок(
		ИмяПодсистемы = "ИСМП", ИмяПодсистемы = "ЕГАИС");
		
	Если ВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда

		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Вид продукции ""%1"" выбранного кода маркировки не поддерживает вскрытие потребительской упаковки.';
			|en = 'Вид продукции ""%1"" выбранного кода маркировки не поддерживает вскрытие потребительской упаковки.'"),
			ВидПродукции);

	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда

		ОписаниеНоменклаутры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура)[Номенклатура];

		Если Не ЗначениеЗаполнено(ОписаниеНоменклаутры.ВариантЧастичногоВыбытия) Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				ТекстОшибки = СтрШаблон(НСтр(
					"ru = 'Для номенклатуры ""%1"" не настроена продажа на разлив';
					|en = 'Для номенклатуры ""%1"" не настроена продажа на разлив'"),
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
			Иначе
				ТекстОшибки = СтрШаблон(НСтр(
					"ru = 'Для номенклатуры ""%1"" не настроено частичное выбытие';
					|en = 'Для номенклатуры ""%1"" не настроено частичное выбытие'"),
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
			КонецЕсли;
		
		КонецЕсли;
	
	Иначе
		
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Выбранный код маркировки ""%1"" не сопоставлен с номенклатурой.';
			|en = 'Выбранный код маркировки ""%1"" не сопоставлен с номенклатурой.'"),
			КодМаркировки);
		
	КонецЕсли;

	Если ТекстОшибки <> Неопределено Тогда

		КодМаркировки = Неопределено;
		ЗаполнитьДанныеПоШтрихкодуУпаковки();
		ПриИзмененииВидаПродукции();
		ЗаполнитьКегОтключенияОтОборудования();
		ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
		ВывестиСообщениеОбОшибке(ЭтотОбъект, ТекстОшибки);
		Возврат;

	КонецЕсли;
	
	ОбновитьСтатусИСМП();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	НастроитьЭлементыФормы();
	
	Если ЭтоРасширеннаяВерсияГосИС
		И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
		МодульСобытияФормИСМП = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
		МодульСобытияФормИСМП.ПриИзмененииЭлемента(ЭтотОбъект, Элементы.Склад, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомментарийПриИзмененииНаСервере()
	
	ЗаполнитьКегОтключенияОтОборудования();
	ЗаполнитьОбъемСливаПоСтатистике();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияРеквизитовПоКодуМаркировки(ДанныеШтрихкода)
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		
		РеквизитыКодаМаркировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодМаркировки, "Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКодаМаркировки);
		ВидПродукции = ОбщегоНазначенияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
		
	ИначеЕсли ДанныеШтрихкода <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШтрихкода, "Номенклатура,Характеристика,Серия,ВидПродукции");
		
	Иначе
		
		Запрос       = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	&ИмяПоляНоменклатураШтрихкода   КАК Номенклатура,
		|	&ИмяПоляХарактеристикаШтрихкода КАК Характеристика,
		|	&ИмяПоляСерияШтрихкода          КАК Серия
		|ИЗ
		|	&ПутьКИсточникуДанныхШтрихкода КАК ШтрихкодыУпаковок
		|ГДЕ
		|	&ПолеСвязиКодМаркировки = &КодМаркировки";
		
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСДаннымиНоменклатурыПоКодуМаркировки(
			Запрос.Текст,
			"ШтрихкодыУпаковок");
		
		Запрос.УстановитьПараметр("КодМаркировки", КодМаркировки);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			Номенклатура   = Выборка.Номенклатура;
			Характеристика = Выборка.Характеристика;
			Серия          = Выборка.Серия;
			ВидПродукции = ОбщегоНазначенияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноРедактироватьПоля()
	Возврат (Не ЗначениеЗаполнено(Документ)
		Или СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ОшибкаПередачи)
КонецФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".';
								|en = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".';
								|en = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкоды

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Организация) И ИмяПодсистемы = "ИСМП" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено';
				|en = 'Поле ""Организация"" не заполнено'"),,
			"Организация");
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(ДанныеШтрихкода.Штрихкод, ВидПродукции);
	
	Если ДанныеРазбора <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(
					ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) = Неопределено Тогда
				ДанныеШтрихкода.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
				ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр(
					"ru = 'Штрихкод не является штрихкодом потребительской упаковки';
					|en = 'Штрихкод не является штрихкодом потребительской упаковки'"));
				ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
				Возврат;
			КонецЕсли;
		Иначе
			ВозможнаПотребительскаяУпаковка = Ложь;
			Для Каждого КлючИЗначение Из ДанныеРазбора.ВидыУпаковокПоВидамПродукции Цикл
				Если КлючИЗначение.Значение.Найти(
					ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) <> Неопределено Тогда
					ВозможнаПотребительскаяУпаковка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ВозможнаПотребительскаяУпаковка Тогда
				ДанныеШтрихкода.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
				ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр(
					"ru = 'Штрихкод не является штрихкодом потребительской упаковки';
					|en = 'Штрихкод не является штрихкодом потребительской упаковки'"));
				ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияШтрихкода()

	ПараметрыСканирования.Организация = Организация;
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		ПараметрыСканирования.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
	КонецЕсли;
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
КонецФункции

//@skip-warning
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ОповещениеОЗавершении = ОписаниеОповещенияОбработкиКодаМаркировки();
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		МодульШтрихкодированиеИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиент");
		МодульШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОповещениеОЗавершении);
	Иначе
		ШтрихкодированиеИСКлиентПереопределяемый.ПриУточненииДанныхПослеСканированияШтрихкода(ЭтотОбъект, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

// @skip-warning
// 
// Параметры:
//  Результат - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗавершенияОбработки
//  ДополнительныеПараметры - Произвольный
&НаКлиенте
Процедура Подключаемый_ЗаполнитьМестаОсуществленияДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СписокВыбора            = Новый СписокЗначений;
	ДанныеАдресовПоКодуФИАС = Новый Соответствие();
	КоличествоЭлементов     = 0;
	
	Для Каждого СтрокаДанных Из Результат.Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.КодФИАС) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
		ПредставлениеАдреса = СтрокаДанных.КодФИАС;
		Если ЗначениеЗаполнено(СтрокаДанных.ПредставлениеАдреса) Тогда
			ПредставлениеАдреса = СтрокаДанных.ПредставлениеАдреса;
		КонецЕсли;
		
		ДанныеАдресаПоКодуФИАС = Новый Структура("ПредставлениеАдреса, ДанныеАдреса");
		ЗаполнитьЗначенияСвойств(ДанныеАдресаПоКодуФИАС, СтрокаДанных);
		ДанныеАдресовПоКодуФИАС.Вставить(СтрокаДанных.КодФИАС, ДанныеАдресаПоКодуФИАС);
		
		СписокВыбора.Добавить(СтрокаДанных.КодФИАС, ПредставлениеАдреса);
			
	КонецЦикла;
	
	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоЭлементов = 1 Тогда
		
		КодФИАС                 = Результат.Результат[0].КодФИАС;
		АдресПодключения        = ДанныеАдресовПоКодуФИАС[КодФИАС].ДанныеАдреса;
		АдресПодключенияСтрокой = ДанныеАдресовПоКодуФИАС[КодФИАС].ПредставлениеАдреса;
		
	Иначе
		
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения(
				"Подключаемый_ВыборКодаФИАСЗавершение", ЭтотОбъект, ДанныеАдресовПоКодуФИАС),
			СписокВыбора,
			Элементы.КодФИАС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ВывестиСообщениеОбОшибке(ЭтотОбъект, ДанныеШтрихкода.ТекстОшибки);
	
	Если ДанныеШтрихкода = Неопределено
		Или ДанныеШтрихкода.ОбработанСОшибками Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Отказ = Не ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода);
	
	Иначе
		ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода';
							|en = 'Недопустимый формат штрихкода'");
		Отказ = Истина;
		ДанныеШтрихкода.ОбработанСОшибками = Истина;
		ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
		ВывестиСообщениеОбОшибке(ЭтотОбъект,
			ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	Иначе
		ВывестиСообщениеОбОшибке(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода)
	
	Если ЭтоРедактированиеЗаписи Тогда
		Если ДанныеШтрихкода.ШтрихкодУпаковки <> КодМаркировки Тогда
			ВывестиСообщениеОбОшибке(
				ЭтотОбъект,
				СтрШаблон(
					НСтр("ru = 'Отсканированный код маркировки %1 отличается от редактируемого %2';
						|en = 'Отсканированный код маркировки %1 отличается от редактируемого %2'"),
					ДанныеШтрихкода.Штрихкод,
					КодМаркировки));
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли ЭтоРасширеннаяВерсияГосИС Тогда
		КодМаркировки = ДанныеШтрихкода.ШтрихкодУпаковки;
	Иначе
		КодМаркировки       = ДанныеШтрихкода.ПолныйКодМаркировки;
		ПолныйКодМаркировки = ДанныеШтрихкода.ПолныйКодМаркировки;
		//@skip-check bsl-legacy-check-expression-type
		КодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(КодМаркировки);
		ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЭкранированнииПолногоКодаМаркировки(КодМаркировки);
	КонецЕсли;
	
	ОбработатьШтрихкодКодаМаркировкиНаСервере(ДанныеШтрихкода);
	
	ОбновитьПредставленияНоменклатуры(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкодКодаМаркировкиНаСервере(ДанныеШтрихкода)
	
	ЗаполнитьДанныеПоШтрихкодуУпаковки(ДанныеШтрихкода);
	ОбновитьСтатусИСМП();
	ЗаполнитьДоступныеКомментарии();
	ЗаполнитьКегОтключенияОтОборудования();
	НастроитьЭлементыФормы();
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		МодульШтрихкодированиеИСВызовСервера = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСВызовСервера");
		МодульШтрихкодированиеИСВызовСервера.ОчиститьКэшМаркируемойПродукции(КэшМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуВводаШтрихкода(ДанныеШтрихкода)
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		
		МодульШтрихкодированиеИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСКлиент");
		ПараметрыОткрытия = МодульШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеШтрихкода);
	
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, ЭтотОбъект);
	
	Иначе
		
		ПоказатьПредупреждение(, ДанныеШтрихкода.ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОбОшибке(Форма, Знач ТекстСообщения = "")
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Заголовок = ТекстСообщения;
	Форма.Элементы.ИнформацияВводаКодаМаркировки.Видимость = ЗначениеЗаполнено(ТекстСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияНоменклатуры(Форма)
	
	ПараметрыПредставленияНоменклатуры = ОбщегоНазначенияИСКлиентСервер.ПараметрыПредставленияНоменклатуры();
	ПараметрыПредставленияНоменклатуры.Номенклатура   = Форма.Номенклатура;
	ПараметрыПредставленияНоменклатуры.Характеристика = Форма.Характеристика;
	ПараметрыПредставленияНоменклатуры.Серия          = Форма.Серия;
	ПараметрыПредставленияНоменклатуры.ТолькоПросмотр = Истина;
	ПараметрыПредставленияНоменклатуры.ДляОтображения = Истина;
	
	Форма.Представление = ОбщегоНазначенияИСКлиентСервер.ПредставлениеНоменклатурыФорматированнойСтрокой(
		ПараметрыПредставленияНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

// @skip-warning
// 
// Параметры:
//  Результат - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗавершенияОбработки
//  ДанныеАдресовПоКодуФИАС - Структура
&НаКлиенте
Процедура Подключаемый_ВыборКодаФИАСЗавершение(Результат, ДанныеАдресовПоКодуФИАС) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодФИАС = Результат.Значение;
	
	ДанныеАдресаПоКодуФИАС = ДанныеАдресовПоКодуФИАС[КодФИАС];
	Если ДанныеАдресаПоКодуФИАС <> Неопределено Тогда
		АдресПодключения        = ДанныеАдресаПоКодуФИАС.ДанныеАдреса;
		АдресПодключенияСтрокой = ДанныеАдресаПоКодуФИАС.ПредставлениеАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторФИАСПоДаннымАдреса(АдресПодключения)
	
	Возврат ОбщегоНазначенияИСМП.ИдентификаторФИАСПоДаннымАдреса(АдресПодключения).Идентификатор;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииАдресаПодключения = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	АдресПодключенияСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		АдресПодключения);
	КомментарийАдресаПодключения = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
		АдресПодключения);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
