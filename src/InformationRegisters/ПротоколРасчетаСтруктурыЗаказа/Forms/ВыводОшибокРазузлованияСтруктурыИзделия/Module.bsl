
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не Параметры.Свойство("ЗаказНаПроизводство", ЗаказНаПроизводство) Тогда
		ТекстИсключения = НСтр("ru = 'Не переданы обязательные параметры';
								|en = 'Required parameters are not passed'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ПроверитьИВывестиОшибкиРазузлованияИзделий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		АдресРасшифровки, ИсточникНастроек);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РезультатОбработкаРасшифровкиЗавершение", ЭтотОбъект);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(
		ОписаниеОповещения,
		Расшифровка,
		ДоступныеДействия,
		,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПроверитьИВывестиОшибкиРазузлованияИзделийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	ПересчитатьНаСервере();
	
	Оповестить("Запись_ЗаказНаПроизводство", Новый Структура("ЗаказНаПроизводство", ЗаказНаПроизводство));
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныйРасчет(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказа(ЗаказНаПроизводство);
	
	Оповестить("Запись_ЗаказНаПроизводство", Новый Структура("ЗаказНаПроизводство", ЗаказНаПроизводство));
	
	Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверитьИВывестиОшибки

&НаКлиенте
Процедура ПроверитьИВывестиОшибкиРазузлованияИзделийНаКлиенте() Экспорт
	
	ПроверитьИВывестиОшибкиРазузлованияИзделий();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИВывестиОшибкиРазузлованияИзделий()
	
	ТабличныйДокумент.Очистить();
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Проверка и вывод ошибок подбора ресурсных спецификаций';
			|en = 'Check and display errors of picking of bills of materials'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПроверитьИВывестиОшибкиРазузлованияИзделий",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = ОбработчикПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно();
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработчикПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно()
	
	Возврат "ПроверитьИВывестиОшибкиРазузлованияИзделийЗавершение";
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИВывестиОшибкиРазузлованияИзделийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ОчиститьТабличныйДокумент();
		Возврат;
	КонецЕсли;
	
	ПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно(Результат)
	
	ОчиститьТабличныйДокумент();
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ТабличныйДокумент = ДанныеЗаполнения.ТабличныйДокумент;
	
			АдресСхемы       = ПоместитьВоВременноеХранилище(ДанныеЗаполнения.СхемаКомпоновкиДанных, УникальныйИдентификатор);
			АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеЗаполнения.ДанныеРасшифровки, УникальныйИдентификатор);
			
			Элементы.ТабличныйДокумент.РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Обычный;
			
			НастроитьКоманднуюПанельФормы(ДанныеЗаполнения.ТипыОшибок);
			
		КонецЕсли;
	
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Пересчитать

&НаСервере
Процедура ПересчитатьНаСервере()
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
			НСтр("ru = 'Перерасчет ресурсных спецификаций в заказах на производство';
				|en = 'Recalculation of bills of materials in production orders'");
		
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПересчитатьСпецификацииОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОчиститьТабличныйДокумент()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент, "НеИспользовать");
	ТабличныйДокумент.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДлительнуюОперацию()
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ОбработчикОжиданияДлительнойОперации, ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	Если ОбработчикОжиданияДлительнойОперации = ОбработчикПроверитьИВывестиОшибкиРазузлованияИзделийОтложенно() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент, "ФормированиеОтчета");
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ПараметрыОжидания);
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрВыполненногоДействия) И ЭтоСсылкаСправочникаДокумента(ПараметрВыполненногоДействия) Тогда
		
		ПоказатьЗначение(, ПараметрВыполненногоДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСсылкаСправочникаДокумента(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗначения);
	
КонецФункции

&НаСервере
Процедура НастроитьКоманднуюПанельФормы(ТипыОшибок)
	
	НуженПолныйРасчет = Ложь;
	
	Если ТипыОшибок.Найти(Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования) <> Неопределено Тогда
		НуженПолныйРасчет = Истина
	КонецЕсли;
	
	Элементы.ФормаПересчитать.Видимость = Не НуженПолныйРасчет;
	Элементы.ФормаПересчитать.КнопкаПоУмолчанию = Не НуженПолныйРасчет;
	Элементы.ФормаПолныйРасчет.КнопкаПоУмолчанию = НуженПолныйРасчет;
	Элементы.ФормаПолныйРасчет.ПоложениеВКоманднойПанели = ?(НуженПолныйРасчет,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю, ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
