
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет сообщения об ошибках в протокол расчета.
// 
// Параметры:
//  СтруктураОшибок - Структура - Параметры регистрации ошибок:
//		* Ошибки - Массив - список найденных ошибок.
//		* ТипОшибки - ПеречислениеСсылка.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство - тип ошибки.
//
Процедура ЗарегистрироватьОшибки(СтруктураОшибок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОшибки = СтруктураОшибок.ТипОшибки;
	Ошибки    = СтруктураОшибок.Ошибки;
	
	НаборЗаписей = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
	
	Для каждого Ошибка Из Ошибки Цикл
		
		НаборЗаписей.Отбор.ТипОшибки.Установить(ТипОшибки); // служебный отбор - уточняем поля в пространстве блокировок
		НаборЗаписей.Отбор.ИдентификаторОшибки.Установить(Ошибка.ИдентификаторОшибки);
		
		ЕстьЗаписиВПротоколе = ЗначениеЗаполнено(Ошибка.Протокол);
		
		Если ЕстьЗаписиВПротоколе Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Ошибка);
			НоваяЗапись.ТипОшибки = ТипОшибки;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
		Если ЕстьЗаписиВПротоколе Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаление записи об ошибках из протокола расчета.
// 
// Параметры:
//  СтруктураОшибок - Структура - Параметры регистрации ошибок:
//		* Ошибки - Массив - список идентификаторов ошибок.
//		* ТипОшибки - ПеречислениеСсылка.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство - тип ошибки.
//
Процедура УдалитьОшибки(СтруктураОшибок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОшибки = СтруктураОшибок.ТипОшибки;
	Ошибки    = СтруктураОшибок.Ошибки;
	
	НаборЗаписей = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
	
	Для каждого ИдентификаторОшибки Из Ошибки Цикл
		
		НаборЗаписей.Отбор.ТипОшибки.Установить(ТипОшибки); // служебный отбор - уточняем поля в пространстве блокировок
		НаборЗаписей.Отбор.ИдентификаторОшибки.Установить(ИдентификаторОшибки);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает протокол по заказу на производство
// 
// Параметры:
// 	ЗаказыНаПроизводство - Массив, ДокументСсылка.ЗаказНаПроизводство2_2	- заказ на производство или список заказов на производство.
//
Процедура ОчиститьПротокол(Знач ЗаказыНаПроизводство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЗаказыНаПроизводство) = Тип("Массив") Тогда
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаказыНаПроизводство);
	Иначе
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказыНаПроизводство);
	КонецЕсли;
	
	Для каждого ЗаказНаПроизводство Из ЗаказыНаПроизводство Цикл
		
		НаборЗаписей = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор протокола.
// 
// Возвращаемое значение:
//  Структура - Протокол макет:
// * Код - Число - код ошибки
// * Данные - ТаблицаЗначений, Структура -  данные в произвольном формате
// * ТекстОшибки - Строка - подробное описание ошибки
Функция ПротоколМакет() Экспорт

	Макет = Новый Структура();
	
	Макет.Вставить("Код", 0);
	Макет.Вставить("Данные"); // данные в произвольном формате
	Макет.Вставить("ТекстСообщения", "");
	
	Возврат Макет;
	
КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

#Область ВсеОшибки

Функция ПроверитьОшибкиОчередиЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ПротоколРасчетаСтруктурыЗаказа
	|ГДЕ
	|	ПротоколРасчетаСтруктурыЗаказа.ТипОшибки В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов))";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ПересчитатьОшибкиИзОчередиЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	
	#Область ОшибкаРазузлования
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПротоколРасчетаСтруктурыЗаказа.Протокол КАК Протокол,
	|	ПротоколРасчетаСтруктурыЗаказа.ИдентификаторОшибки КАК ИдентификаторОшибки
	|ИЗ
	|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ПротоколРасчетаСтруктурыЗаказа
	|ГДЕ
	|	ПротоколРасчетаСтруктурыЗаказа.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтруктураОшибок = Новый Структура();
		СтруктураОшибок.Вставить("ТипОшибки", Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования);
		СтруктураОшибок.Вставить("Ошибки", Новый Массив());
		
		Таблица = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		Пока ЕстьЗаписиВВыборке Цикл
			
			СтруктураОшибок.Ошибки.Добавить(Выборка.ИдентификаторОшибки);
			
			ХранилищеПротокола = Выборка.Протокол; //ХранилищеЗначения
			Протокол = ХранилищеПротокола.Получить();
			
			Если Не ТипЗнч(Протокол) = Тип("Структура") Или Не Протокол.Свойство("Данные") Тогда
				ВызватьИсключение НСтр("ru = 'Не правильный формат хранения данных в протоколе.';
										|en = 'Incorrect format of data storage in the protocol.'");
			КонецЕсли;
			
			Для каждого ТекущаяСтрока Из Протокол.Данные Цикл
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ТекущаяСтрока, "ЗаказНаПроизводство");
			КонецЦикла;
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
			Если ЕстьЗаписиВВыборке Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа.ДобавитьЗадания(ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Таблица, "ЗаказНаПроизводство"));
			
			УдалитьОшибки(СтруктураОшибок);
			
			Таблица.Очистить();
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОшибкаРаспределенияЗапасов
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПротоколРасчетаСтруктурыЗаказа.Протокол КАК Протокол,
	|	ПротоколРасчетаСтруктурыЗаказа.ИдентификаторОшибки КАК ИдентификаторОшибки
	|ИЗ
	|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ПротоколРасчетаСтруктурыЗаказа
	|ГДЕ
	|	ПротоколРасчетаСтруктурыЗаказа.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтруктураОшибок = Новый Структура();
		СтруктураОшибок.Вставить("ТипОшибки", Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов);
		СтруктураОшибок.Вставить("Ошибки", Новый Массив());
		
		Таблица = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		Пока ЕстьЗаписиВВыборке Цикл
			
			СтруктураОшибок.Ошибки.Добавить(Выборка.ИдентификаторОшибки);
			
			ХранилищеПротокола = Выборка.Протокол; //ХранилищеЗначения
			Протокол = ХранилищеПротокола.Получить();
			
			Если Не ТипЗнч(Протокол) = Тип("Структура") Или Не Протокол.Свойство("Данные") Тогда
				ВызватьИсключение НСтр("ru = 'Не правильный формат хранения данных в протоколе.';
										|en = 'Incorrect format of data storage in the protocol.'");
			КонецЕсли;
			
			Для каждого ТекущаяСтрока Из Протокол.Данные Цикл
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ТекущаяСтрока, "Номенклатура,Характеристика,Склад,Назначение");
			КонецЦикла;
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
			Если ЕстьЗаписиВВыборке Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗадания(Таблица, Истина);
			
			УдалитьОшибки(СтруктураОшибок);
			
			Таблица.Очистить();
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	СтруктураЗаказа.ЗапуститьРасчет();
	
КонецПроцедуры

#КонецОбласти

#Область ОшибкиПодбораСпецификацийВЗаказахНаПроизводство

Процедура ПодобратьСпецификацииОтложенно(Параметры, АдресХранилища) Экспорт
	
	ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыЗапросаСпецификаций.ИмяВходнойТаблицы            = "СпецификацииЗаказа";
	ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы           = "ДействующиеСпецификации";
	ПараметрыЗапросаСпецификаций.ТолькоПриоритетные           = Истина;
	ПараметрыЗапросаСпецификаций.УничтожитьВременныеТаблицы   = Истина;
	ПараметрыЗапросаСпецификаций.РазделительИтоговогоПакета   = Истина;
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Параметры.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|
	|	АвтоНомерЗаписи() КАК ИндексДанных,
	|
	|	КэшНСИ.Номенклатура   КАК Номенклатура,
	|	КэшНСИ.Характеристика КАК Характеристика,
	|	КэшНСИ.Склад          КАК Склад,
	|	КэшНСИ.Назначение     КАК Назначение,
	|
	|	КэшНСИ.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|
	|	КэшНСИ.ЗаказНаПроизводство.Подразделение           КАК ПодразделениеДиспетчер,
	|	КэшНСИ.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КэшНСИ.ЗаказНаПроизводство.НачатьНеРанее           КАК НачалоПроизводства,
	|	
	|	КэшНСИ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|ПОМЕСТИТЬ СпецификацииЗаказа
	|ИЗ
	|	РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|
	|ГДЕ
	|
	|	КэшНСИ.ИдентификаторОшибки В (
	|		ВЫБРАТЬ
	|			Ошибки.ИдентификаторОшибки КАК ИдентификаторОшибки
	|		ИЗ
	|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Ошибки
	|		ГДЕ
	|			Ошибки.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|			И Ошибки.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций))
	|
	|	И КэшНСИ.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексДанных
	|;
	|
	|" + УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(ПараметрыЗапросаСпецификаций, ПараметрыВыбораСпецификаций)
	 + "
	|ВЫБРАТЬ
	|
	|	СпецификацииЗаказа.Номенклатура        КАК Номенклатура,
	|	СпецификацииЗаказа.Характеристика      КАК Характеристика,
	|	СпецификацииЗаказа.Склад               КАК Склад,
	|	СпецификацииЗаказа.Назначение          КАК Назначение,
	|	СпецификацииЗаказа.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ДействующиеСпецификации.Спецификация   КАК Спецификация
	|
	|ИЗ
	|	СпецификацииЗаказа КАК СпецификацииЗаказа
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеСпецификации КАК ДействующиеСпецификации
	|		ПО СпецификацииЗаказа.ИндексДанных = ДействующиеСпецификации.ИндексДанных
	|";
	УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	ДанныеЗамены = Запрос.Выполнить().Выгрузить();
	КоличествоОбработанных = СтруктураЗаказаСлужебный.ЗаменитьСпецификации(ДанныеЗамены);
	Результат = Новый Структура("КоличествоОбработанных", КоличествоОбработанных);
	СтруктураЗаказа.ЗапуститьРасчет();
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверитьИВывестиОшибкиПодбораСпецификаций(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Параметры.ЗаказНаПроизводство);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ошибки.Протокол КАК Протокол
	|ИЗ
	|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Ошибки
	|ГДЕ
	|	Ошибки.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И Ошибки.ТипОшибки = ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций)
	|";
	
	Ошибки = Новый ТаблицаЗначений();

	Ошибки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Ошибки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Ошибки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Ошибки.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Ошибки.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Ошибки.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ХранилищеПротокола = Выборка.Протокол; //ХранилищеЗначения
		ЗаполнитьЗначенияСвойств(Ошибки.Добавить(), ХранилищеПротокола.Получить());
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ошибки", Ошибки);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|
	|	Ошибки.Номенклатура        КАК Номенклатура,
	|	Ошибки.Характеристика      КАК Характеристика,
	|	Ошибки.Склад               КАК Склад,
	|	Ошибки.Назначение          КАК Назначение,
	|	Ошибки.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|ПОМЕСТИТЬ Ошибки
	|ИЗ 
	|	&Ошибки КАК Ошибки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение,
	|	ЗаказНаПроизводство
	|;
	|
	|ВЫБРАТЬ
	|
	|	Ошибки.Номенклатура        КАК Номенклатура,
	|	Ошибки.Характеристика      КАК Характеристика,
	|	Ошибки.Склад               КАК Склад,
	|	Ошибки.Назначение          КАК Назначение,
	|	Ошибки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Движения.СпецификацияПолуфабриката) > 1 ТОГДА &Т2
	|		ИНАЧЕ &Т1
	|	КОНЕЦ КАК Причина
	|
	|ИЗ
	|	Ошибки КАК Ошибки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Движения.Номенклатура        = Ошибки.Номенклатура
	|	 И Движения.Характеристика      = Ошибки.Характеристика
	|	 И Движения.Склад               = Ошибки.Склад
	|	 И Движения.Назначение          = Ошибки.Назначение
	|	 И Движения.ЗаказНаПроизводство = Ошибки.ЗаказНаПроизводство
	|	 И Движения.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ошибки.Номенклатура,
	|	Ошибки.Характеристика,
	|	Ошибки.Склад,
	|	Ошибки.Назначение,
	|	Ошибки.ЗаказНаПроизводство
	|";
	
	Запрос.УстановитьПараметр("Т1", НСтр("ru = 'Не найдена спецификация';
										|en = 'Bill of materials is not found'"));
	Запрос.УстановитьПараметр("Т2", НСтр("ru = 'Не допускается указание различных спецификаций для одной аналитики учета номенклатуры';
										|en = 'You cannot specify different bills of materials for the same inventory location attributes'"));

	НаборыДанных = Новый Структура("ЖурналОшибок", Запрос.Выполнить().Выгрузить());

	СхемаКомпоновкиДанных = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПолучитьМакет("МакетКомпоновкиДляВыводаОшибокПодбораСпецификаций");
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной").Настройки; // НастройкиКомпоновкиДанных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрМакетОформления = НастройкиКомпоновкиДанных.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
	ПараметрМакетОформления.Использование = Истина;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		НаборыДанных,
		ДанныеРасшифровки,
		Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных);
	Результат.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ОшибкиРазузлованияИзделий

Процедура ПересчитатьСпецификацииОтложенно(Параметры, АдресХранилища) Экспорт
	
	Ошибки = ОшибкиРазузлованияИзделий(Параметры.ЗаказНаПроизводство);
	
	Задания = Ошибки.Скопировать(,"Спецификация,ЗаказНаПроизводство");
	Задания.Свернуть("Спецификация,ЗаказНаПроизводство");
	
	РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданияПолныйРасчет(Задания);
	
	СтруктураЗаказа.ЗапуститьРасчет();
	
КонецПроцедуры

Процедура ПроверитьИВывестиОшибкиРазузлованияИзделий(Параметры, АдресХранилища) Экспорт

	ЖурналОшибок = ОшибкиРазузлованияИзделий(Параметры.ЗаказНаПроизводство);
	
	НаборыДанных = Новый Структура("ЖурналОшибок", ЖурналОшибок);

	СхемаКомпоновкиДанных = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПолучитьМакет("МакетКомпоновкиДляВыводаОшибокРазузлованияСтруктурыИзделий");
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной").Настройки; // НастройкиКомпоновкиДанных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрМакетОформления = НастройкиКомпоновкиДанных.ПараметрыВывода.Элементы.Найти("МакетОформления");
	ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
	ПараметрМакетОформления.Использование = Истина;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		НаборыДанных,
		ДанныеРасшифровки,
		Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТипыОшибок", ОбщегоНазначенияУТ.УникальныеЗначенияИзКолонкиТаблицы(ЖурналОшибок, "ТипОшибки"));
	
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных);
	Результат.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОшибкиРазузлованияИзделий(ЗаказНаПроизводство)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ошибки.ТипОшибки КАК ТипОшибки,
	|	Ошибки.Протокол КАК Протокол,
	|	Ошибки.КраткоеОписание КАК КраткоеОписание
	|ИЗ
	|	РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Ошибки
	|ГДЕ
	|	Ошибки.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И Ошибки.ТипОшибки В (ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования),
	|						  ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации))
	|";
	
	ЖурналОшибок = Новый ТаблицаЗначений();
	ЖурналОшибок.Колонки.Добавить("ТипОшибки", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство"));
	ЖурналОшибок.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ЖурналОшибок.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	ЖурналОшибок.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ХранилищеПротокола = Выборка.Протокол; //ХранилищеЗначения
		Протокол = ХранилищеПротокола.Получить();
		
		Если Не ТипЗнч(Протокол) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТипОшибки = Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования Тогда
		
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Протокол.Данные[0], "Спецификация") Тогда
		
				Шаблон = НСтр("ru = 'При разузловании спецификации %1 возникла неразрешимая ошибка по причине: %2';
								|en = 'An irresolvable error occurred when exploding the %1 bill of materials due to: %2'");
				НоваяСтрока = ЖурналОшибок.Добавить();
				НоваяСтрока.ТипОшибки = Выборка.ТипОшибки;
				НоваяСтрока.Спецификация = Протокол.Данные[0].Спецификация;
				НоваяСтрока.ЗаказНаПроизводство = Протокол.Данные[0].ЗаказНаПроизводство;
				НоваяСтрока.ТекстСообщения = СтрШаблон(Шаблон, НоваяСтрока.Спецификация, Выборка.КраткоеОписание);
			
			Иначе
				
				Шаблон = НСтр("ru = 'При разузловании заказа возникла неразрешимая ошибка по причине: %1';
								|en = 'An irresolvable error occurred when exploding the order due to: %1'");
				НоваяСтрока = ЖурналОшибок.Добавить();
				НоваяСтрока.ТипОшибки = Выборка.ТипОшибки;
				НоваяСтрока.Спецификация = Неопределено;
				НоваяСтрока.ЗаказНаПроизводство = Протокол.Данные[0].ЗаказНаПроизводство;
				НоваяСтрока.ТекстСообщения = СтрШаблон(Шаблон, Выборка.КраткоеОписание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ТипОшибки = Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации Тогда
			
			ТекстыСообщений = СтрРазделить(Протокол.ТекстСообщения, ";");
			
			Для каждого ТекстСообщения Из ТекстыСообщений Цикл
				
				НоваяСтрока = ЖурналОшибок.Добавить();
				НоваяСтрока.ТипОшибки = Выборка.ТипОшибки;
				НоваяСтрока.Спецификация = Протокол.Данные.Спецификация;
				НоваяСтрока.ЗаказНаПроизводство = Протокол.Данные.ЗаказНаПроизводство;
				НоваяСтрока.ТекстСообщения = ТекстСообщения;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЖурналОшибок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли