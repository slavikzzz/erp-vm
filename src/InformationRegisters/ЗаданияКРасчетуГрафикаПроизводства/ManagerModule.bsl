#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр.
//
// Параметры:
//  Этапы - ДокументСсылка.ЭтапПроизводства2_2, Массив - этапы, для которых необходимо добавить записи.
//		По этапам с ручным размещением в графике задания не добавляются.
//
Процедура ДобавитьЗадания(Этапы) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуГрафикаПроизводства");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		РазделительЗаписи = Строка(Новый УникальныйИдентификатор);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Этапы.Распоряжение    КАК Распоряжение,
			|	Этапы.Ссылка          КАК ЭтапПроизводства,
			|	НомерЗадания.Значение КАК НомерЗадания,
			|	&РазделительЗаписи    КАК РазделительЗаписи
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы,
			|	Константа.НомерЗаданияКРасчетуГрафикаПроизводства КАК НомерЗадания
			|ГДЕ
			|	Этапы.Ссылка В(&Этапы)
			|	И НЕ Этапы.РучноеРазмещениеВГрафике
			|	И НЕ Этапы.ДинамическаяСтруктура");
		Запрос.УстановитьПараметр("Этапы", Этапы);
		Запрос.УстановитьПараметр("РазделительЗаписи", РазделительЗаписи);
		
		Набор = РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Добавление заданий к расчету графика производства';
							|en = 'Add jobs to the production schedule calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
  		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет записи в регистр.
//
// Параметры:
//  Этапы - ТаблицаЗначений - таблица, содержащая этапы для которых необходимо добавить записи.
//		По этапам с ручным размещением в графике задания не добавляются:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//		* ЭтапПроизводстваИнициатор - ДокументСсылка.ЭтапПроизводства2_2 - этап инициатор задания.
//
Процедура ДобавитьЗаданияСИнициаторами(Этапы) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуГрафикаПроизводства");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		РазделительЗаписи = Строка(Новый УникальныйИдентификатор);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Этапы.ЭтапПроизводства          КАК ЭтапПроизводства,
			|	Этапы.ЭтапПроизводстваИнициатор КАК ЭтапПроизводстваИнициатор
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ &Этапы КАК Этапы
			|
			|;
			|
			|ВЫБРАТЬ
			|	Документы.Распоряжение          КАК Распоряжение,
			|	Документы.Ссылка                КАК ЭтапПроизводства,
			|	НомерЗадания.Значение           КАК НомерЗадания,
			|	&РазделительЗаписи              КАК РазделительЗаписи,
			|	Этапы.ЭтапПроизводстваИнициатор КАК ЭтапПроизводстваИнициатор
			|ИЗ
			|	ВТЭтапы КАК Этапы
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документы
			|	ПО Этапы.ЭтапПроизводства = Документы.Ссылка
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Константа.НомерЗаданияКРасчетуГрафикаПроизводства КАК НомерЗадания
			|	ПО ИСТИНА
			|ГДЕ
			|	НЕ Документы.РучноеРазмещениеВГрафике");
		Запрос.УстановитьПараметр("Этапы", Этапы);
		Запрос.УстановитьПараметр("РазделительЗаписи", РазделительЗаписи);
		
		Набор = РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Добавление заданий к расчету графика производства';
							|en = 'Add jobs to the production schedule calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи из регистра.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - распоряжение,
//		которому принадлежат этапы (см. параметр Этапы).
//  Этапы - ДокументСсылка.ЭтапПроизводства2_2, Массив - этапы,
//		записи по которым необходимо удалить.
//  НомерЗадания - Число - при очистке будут удалены записи с номерами заданий, меньше либо равными
//		значению параметра. Если параметр не задан, то будут удалены все записи.
//
Процедура УдалитьЗадания(Распоряжение, Этапы, НомерЗадания = Неопределено) Экспорт
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = Константы.НомерЗаданияКРасчетуГрафикаПроизводства.Получить();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Задания.Распоряжение              КАК Распоряжение,
			|	Задания.ЭтапПроизводства          КАК ЭтапПроизводства,
			|	Задания.ЭтапПроизводстваИнициатор КАК ЭтапПроизводстваИнициатор,
			|	Задания.НомерЗадания              КАК НомерЗадания
			|ИЗ
			|	РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК Задания
			|ГДЕ
			|	Задания.Распоряжение = &Распоряжение
			|	И Задания.НомерЗадания > &НомерЗадания
			|	И НЕ ИСТИНА В
			|		(
			|			ВЫБРАТЬ
			|				ПЕРВЫЕ 1 ИСТИНА
			|			ИЗ
			|				РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтапа
			|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикИнициатора
			|					ПО (ИСТИНА)
			|			ГДЕ
			|				ГрафикЭтапа.Распоряжение            = Задания.Распоряжение
			|				И ГрафикЭтапа.ЭтапПроизводства      = Задания.ЭтапПроизводства
			|				И ГрафикИнициатора.ЭтапПроизводства = Задания.ЭтапПроизводстваИнициатор
			|				И ГрафикЭтапа.СтатусГрафика      = &РабочийГрафик
			|				И ГрафикИнициатора.СтатусГрафика = &РабочийГрафик
			|				И ГрафикИнициатора.ОкончаниеЭтапа <= ГрафикЭтапа.НачалоЭтапа
			|		)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Задания.Распоряжение              КАК Распоряжение,
			|	Задания.ЭтапПроизводства          КАК ЭтапПроизводства,
			|	Задания.ЭтапПроизводстваИнициатор КАК ЭтапПроизводстваИнициатор,
			|	Задания.НомерЗадания              КАК НомерЗадания
			|ИЗ
			|	РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК Задания
			|ГДЕ
			|	Задания.Распоряжение = &Распоряжение
			|	И Задания.ЭтапПроизводства НЕ В (&Этапы)
			|	И НЕ ИСТИНА В
			|		(
			|			ВЫБРАТЬ
			|				ПЕРВЫЕ 1 ИСТИНА
			|			ИЗ
			|				РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтапа
			|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикИнициатора
			|					ПО (ИСТИНА)
			|			ГДЕ
			|				ГрафикЭтапа.Распоряжение            = Задания.Распоряжение
			|				И ГрафикЭтапа.ЭтапПроизводства      = Задания.ЭтапПроизводства
			|				И ГрафикИнициатора.ЭтапПроизводства = Задания.ЭтапПроизводстваИнициатор
			|				И ГрафикЭтапа.СтатусГрафика      = &РабочийГрафик
			|				И ГрафикИнициатора.СтатусГрафика = &РабочийГрафик
			|				И ГрафикИнициатора.ОкончаниеЭтапа <= ГрафикЭтапа.НачалоЭтапа
			|		)");
		Запрос.УстановитьПараметр("Распоряжение",  Распоряжение);
		Запрос.УстановитьПараметр("Этапы",         Этапы);
		Запрос.УстановитьПараметр("НомерЗадания",  НомерЗадания);
		Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
		
		Набор = РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Удаление заданий к расчету графика производства';
							|en = 'Delete jobs to the production schedule calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
  		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает флаг актуальности графика этапа производства.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - этап,
//		актуальность графика которого необходимо проверить.
// 
// Возвращаемое значение:
//  Булево - актуальность графика этапа.
//
Функция ГрафикЭтапаАктуален(ЭтапПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаданияКРасчетуГрафикаПроизводства.ЭтапПроизводства
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК ЗаданияКРасчетуГрафикаПроизводства
	|ГДЕ
	|	ЗаданияКРасчетуГрафикаПроизводства.ЭтапПроизводства = &ЭтапПроизводства");
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли