#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляНезависимогоРегистра(Настройки, "Позиция");
КонецПроцедуры

#КонецОбласти

Процедура УдалитьЛишниеЗаписиДляГруппыПозицийПодразделения(ПараметрыОбновления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	МестоПозиции.Позиция КАК Позиция,
		|	МестоПозиции.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО (ШтатноеРасписание.Ссылка = МестоПозиции.Позиция)
		|			И (ШтатноеРасписание.ГруппаПозицийПодразделения)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
				   
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Не НачатьОбновлениеНабораЗаписей(ПараметрыОбновления, Выборка.Позиция) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ЗавершитьОбновлениеНабораЗаписей(ПараметрыОбновления);
	КонецЦикла;
															  
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПринадлежностиОбъекта() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Подразделение");
КонецФункции

Процедура ПринадлежностьНабораПередЗаписью(Источник) Экспорт
	
	Если Источник.Отбор["Позиция"].Использование = Ложь Или Не ЗначениеЗаполнено(Источник.Отбор.Позиция.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиция", Источник.Отбор.Позиция.Значение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция,
	|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
	|ГДЕ
	|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция = &Позиция";
	
	Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначенияПринадлежности", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#Область ФизическиеЛица

Процедура ПодразделенияФизическихЛицПриЗаписиРегистра(Источник) Экспорт
	
	// Зарегистрируем утраченные принадлежности физических лиц к подразделениям старого набора
	Если Не Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначенияПринадлежности") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	
	ПрежнийНабор = Источник.ДополнительныеСвойства["ПрежниеЗначенияПринадлежности"];
	
	// Зарегистрируем принадлежности физических лиц к подразделениям нового набора
	Если Источник.Количество() > 0 Тогда
		ЗаписьНабора = Источник[0];
		Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И ЗначениеЗаполнено(ЗаписьНабора.Позиция) Тогда
			
			МассивФизическихЛиц = ФизическиеЛицаПоПозиции(ЗаписьНабора.Позиция);
			
			МодульСинхронизацияДанных.ЗарегистрироватьПринадлежностьФизическихЛиц(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаписьНабора.Подразделение),
				МассивФизическихЛиц,
				МодульСинхронизацияДанных.МетаданныеРегистраСведенийПодразделенийФизическихЛиц(), "Подразделение");
		
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.КоллекцииИдентичны(ПрежнийНабор, Источник) Тогда
		// Не регистрируем принадлежности физических лиц к подразделениям
		Возврат;
	КонецЕсли;
	
	Если ПрежнийНабор.Количество() > 0 Тогда
		ЗаписьНабора = ПрежнийНабор[0];
		
		Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И ЗначениеЗаполнено(ЗаписьНабора.Позиция) Тогда
			
			МассивФизическихЛицУтраченные = ФизическиеЛицаПоПозиции(ЗаписьНабора.Позиция);
			
			МодульСинхронизацияДанных.ЗарегистрироватьУтраченныхФизическихЛиц(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаписьНабора.Подразделение),
				МассивФизическихЛицУтраченные,
				МодульСинхронизацияДанных.МетаданныеРегистраСведенийУтраченныхПодразделенийФизическихЛиц(), "Подразделение");
				
			Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И МассивФизическихЛицУтраченные.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьПодразделенияФизическихЛицУтраченные", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

Процедура ПодразделенияСотрудниковПриЗаписиРегистра(Источник) Экспорт
	
	// Зарегистрируем утраченные подразделения сотрудников из старого набора
	Если Не Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначенияПринадлежности") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Возврат;
	КонецЕсли;
	МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
	
	ПрежнийНабор = Источник.ДополнительныеСвойства["ПрежниеЗначенияПринадлежности"];
	
	// Зарегистрируем подразделениям сотрудников из нового набора
	Если Источник.Количество() > 0 Тогда
		ЗаписьНабора = Источник[0];
		Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И ЗначениеЗаполнено(ЗаписьНабора.Позиция) Тогда
			
			МассивСотрудников = СотрудникиПоПозиции(ЗаписьНабора.Позиция);
			
			МодульСинхронизацияДанных.ЗарегистрироватьПодразделенияСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаписьНабора.Подразделение), МассивСотрудников);
		
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.КоллекцииИдентичны(ПрежнийНабор, Источник) Тогда
		// Не регистрируем подразделения сотрудников
		Возврат;
	КонецЕсли;
	
	Если ПрежнийНабор.Количество() > 0 Тогда
		ЗаписьНабора = ПрежнийНабор[0];
		
		Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И ЗначениеЗаполнено(ЗаписьНабора.Позиция) Тогда
			
			МассивУтраченных = СотрудникиПоПозиции(ЗаписьНабора.Позиция);
			
			МодульСинхронизацияДанных.ЗарегистрироватьУтраченныхСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаписьНабора.Подразделение),
				МассивУтраченных,
				МодульСинхронизацияДанных.МетаданныеРегистраСведенийПодразделенийСотрудниковУтраченные(), "Подразделение");
				
			Если ЗначениеЗаполнено(ЗаписьНабора.Подразделение) И МассивУтраченных.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьПодразделенияСотрудниковУтраченные", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФизическиеЛицаПоПозиции(Позиция)
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "ДолжностьПоШтатномуРасписанию", "В", Позиция);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМеста.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

Функция СотрудникиПоПозиции(Позиция)
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыЗапроса.Отборы, "ДолжностьПоШтатномуРасписанию", "В", Позиция);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМеста.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция НачатьОбновлениеНабораЗаписей(ПараметрыОбновления, Позиция)
	
	Возврат ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
		ПараметрыОбновления, 
		"РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия", 
		"Позиция", 
		Позиция);
	
КонецФункции

Процедура ЗавершитьОбновлениеНабораЗаписей(ПараметрыОбновления)
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
КонецПроцедуры

#КонецОбласти

#КонецЕсли