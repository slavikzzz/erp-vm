#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ГоловнаяОрганизация - ОпределяемыйТип.Организация    - Значение отбора по соответствующему измерению.
//   ФизическоеЛицо     - СправочникСсылка.ФизическиеЛица - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо, СНИЛС) Экспорт
	ЕстьГоловнаяОрганизация = ЗначениеЗаполнено(ГоловнаяОрганизация);
	ЕстьФизическоеЛицо      = ЗначениеЗаполнено(ФизическоеЛицо);
	ЕстьСНИЛС               = ЗначениеЗаполнено(СНИЛС);
	Если Не ЕстьГоловнаяОрганизация Или (Не ЕстьФизическоеЛицо И Не ЕстьСНИЛС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС");
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизическоеЛицо);
		ЭлементБлокировки.УстановитьЗначение("СНИЛС", СНИЛС);
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Отбор.СНИЛС.Установить(СНИЛС);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить %1 %2 о сотруднике %3 СНИЛС %4 по причине: %5';
				|en = 'Cannot change %1 %2 about employee %3 SNILS %4 due to: %5'"),
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.Представление(),
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			СНИЛС,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СЭДОФСС.ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС,
			?(ЕстьФизическоеЛицо, ФизическоеЛицо, СНИЛС),
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Получает первую запись набора. В случае отсутствия - добавляет запись и заполняет значения измерений из отборов.
//
// Параметры:
//   Набор - РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС - См. НачатьЗаписьНабора.
//
// Возвращаемое значение:
//   РегистрСведенийЗапись.ЗастрахованныеЛицаСЭДО
//
Функция ЕдинственнаяЗаписьНабора(Набор) Экспорт
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Для Каждого ЭлементОтбора Из Набор.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				Запись[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Возврат Запись;
КонецФункции

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПустаяТаблицаОбновления() Экспорт
	ТаблицаОбновления = Новый ТаблицаЗначений;
	ТаблицаОбновления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОбновления.Колонки.Добавить("СНИЛС", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Измерения.СНИЛС.Тип);
	ТаблицаОбновления.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Возврат ТаблицаОбновления;
КонецФункции

Процедура ЗапланироватьОбновлениеПоТаблице(Таблица) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	
	Таблица.Свернуть("ФизическоеЛицо, СНИЛС, ГоловнаяОрганизация");
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ГоловнаяОрганизация, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.СНИЛС);
		Если Набор <> Неопределено Тогда
			Запись = ЕдинственнаяЗаписьНабора(Набор);
			ЗапланироватьОбработкуЗаписи(Запись);
			ЗавершитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЦикла;
	
	ВключитьЗадание();
	
КонецПроцедуры

Процедура ЗапланироватьОбновлениеПоФизическимЛицам(ФизическиеЛица = Неопределено, СНИЛС = Неопределено) Экспорт
	Если ФизическиеЛица = Неопределено Тогда
		ФизическиеЛица = Новый Массив;
	КонецЕсли;
	Если СНИЛС = Неопределено Тогда
		СНИЛС = Новый Массив;
	КонецЕсли;
	УдалитьПустыеЗначенияИзМассива(ФизическиеЛица, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдалитьПустыеЗначенияИзМассива(СНИЛС,          Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Фрагменты = Новый Массив;
	Если ФизическиеЛица.Количество() > 0 Тогда
		Фрагмент =
		"ВЫБРАТЬ
		|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗастрахованныеЛицаСЭДО.СНИЛС КАК СНИЛС,
		|	ЗастрахованныеЛицаСЭДО.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
		|ГДЕ
		|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо В(&ФизическиеЛица)";
		Фрагменты.Добавить(Фрагмент);
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли;
	Если СНИЛС.Количество() > 0 Тогда
		Фрагмент =
		"ВЫБРАТЬ
		|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗастрахованныеЛицаСЭДО.СНИЛС КАК СНИЛС,
		|	ЗастрахованныеЛицаСЭДО.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
		|ГДЕ
		|	ЗастрахованныеЛицаСЭДО.СНИЛС В(&СНИЛС)";
		Фрагменты.Добавить(Фрагмент);
		Запрос.УстановитьПараметр("СНИЛС", СНИЛС);
	КонецЕсли;
	Если Фрагменты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Соединитель = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС + Символы.ПС;
	Запрос.Текст = СтрСоединить(Фрагменты, Соединитель);
	
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	Таблица = Запрос.Выполнить().Выгрузить();
	ЗапланироватьОбновлениеПоТаблице(Таблица);
КонецПроцедуры

Процедура ЗапланироватьОбработкуЗаписи(Запись)
	Запись.ОбработкаНачата         = Ложь;
	Запись.ДатаНачалаОбработки     = '00010101';
	Запись.ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(Запись.ДатаПервогоИзменения) Тогда
		Запись.ДатаПервогоИзменения = Запись.ДатаПоследнегоИзменения;
	КонецЕсли;
КонецПроцедуры

Процедура ВключитьЗадание()
	ДатаОчередногоЗапуска = Константы.ДатаОбработкиКадровыхДанныхФСС.Получить();
	Если ДатаОчередногоЗапуска + 3600*12 < ТекущаяДатаСеанса() Тогда
		// Если дата прошлого запуска пустая, значит задание отключено.
		// Если с даты прошлого запуска прошло более 12 часов, значит задание не смогло запуститься.
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ДатаНачала = ТекущаяДата() + 5*60; // После завершения транзакции.
		Расписание.ПериодПовтораВТечениеДня = 3600;    // Каждый час вплоть до отключения.
		МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС;
		ОбщегоНазначенияБЗК.ВключитьПредопределенноеЗадание(МетаданныеЗадания, Расписание);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработчикФоновогоЗадания() Экспорт
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	
	СброситьДатуОбработкиНачалаСтарыхЗаданий();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Очередь.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Очередь.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Очередь.СНИЛС КАК СНИЛС,
	|	Очередь.ОбработкаНачата КАК ОбработкаНачата,
	|	Очередь.ДатаПервогоИзменения КАК ДатаПервогоИзменения,
	|	Очередь.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	Очередь.ДатаНачалаОбработки КАК ДатаНачалаОбработки
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		Очередь.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Очередь.СНИЛС КАК СНИЛС,
	|		Очередь.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		Очередь.ОбработкаНачата КАК ОбработкаНачата,
	|		Очередь.ДатаПервогоИзменения КАК ДатаПервогоИзменения,
	|		Очередь.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|		Очередь.ДатаНачалаОбработки КАК ДатаНачалаОбработки
	|	ИЗ
	|		РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС КАК Очередь
	|	ГДЕ
	|		Очередь.ОбработкаНачата = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ДатаПоследнегоИзменения) КАК Очередь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	ФизическоеЛицо";
	
	ТаблицаОбновленияКД = ПустаяТаблицаОбновления();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		ТаблицаОбновленияКД.Очистить();
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Пока Выборка.Следующий() Цикл
			Если ДатаГотовностиКОбновлению(Выборка) <= ТекущаяДатаСеанса Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаОбновленияКД.Добавить(), Выборка);
			КонецЕсли;
		КонецЦикла;
		ОбновитьПоТаблице(ТаблицаОбновленияКД, Истина);
	КонецЦикла;
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначенияБЗК.ОтключитьПредопределенноеЗадание(
			Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС);
		Константы.ДатаОбработкиКадровыхДанныхФСС.Установить('00010101'); // Задание отключено.
	Иначе
		Константы.ДатаОбработкиКадровыхДанныхФСС.Установить(ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаГотовностиКОбновлению(Запись)
	// Обработка должна начинаться после завершения транзакции изменения кадровых данных.
	Возврат Запись.ДатаПоследнегоИзменения + 60*5;
КонецФункции

Процедура СброситьДатуОбработкиНачалаСтарыхЗаданий()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОчередьОбработкиКадровыхДанныхФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОчередьОбработкиКадровыхДанныхФСС.СНИЛС КАК СНИЛС,
	|	ОчередьОбработкиКадровыхДанныхФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС КАК ОчередьОбработкиКадровыхДанныхФСС
	|ГДЕ
	|	ОчередьОбработкиКадровыхДанныхФСС.ОбработкаНачата = ИСТИНА
	|	И ОчередьОбработкиКадровыхДанныхФСС.ДатаНачалаОбработки > ДАТАВРЕМЯ(1, 1, 1)
	|	И ОчередьОбработкиКадровыхДанныхФСС.ДатаНачалаОбработки < &ДваЧасаНазад";
	Запрос.УстановитьПараметр("ДваЧасаНазад", ТекущаяДата() - 3600*2);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо, Выборка.СНИЛС);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = Набор[0];
		Запись.ОбработкаНачата     = Ложь;
		Запись.ДатаНачалаОбработки = '00010101';
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьПоТаблице(ТаблицаОбновления, ОтмечатьВОчереди) Экспорт
	ГоловныеОрганизации = КоллекцииБЗК.УникальныеЗначенияКолонки(ТаблицаОбновления, "ГоловнаяОрганизация");
	Если ГоловныеОрганизации.Количество() = 1 Тогда
		ОбновитьПоТаблицеСлужебный(ГоловныеОрганизации[0], ТаблицаОбновления, ОтмечатьВОчереди);
	Иначе
		Фильтр = Новый Структура("ГоловнаяОрганизация");
		Для Каждого ГоловнаяОрганизация Из ГоловныеОрганизации Цикл
			Фильтр.ГоловнаяОрганизация = ГоловнаяОрганизация;
			ТаблицаФизическихЛиц = ТаблицаОбновления.Скопировать(Фильтр, "СНИЛС, ФизическоеЛицо");
			ОбновитьПоТаблицеСлужебный(ГоловнаяОрганизация, ТаблицаФизическихЛиц, ОтмечатьВОчереди);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьПоТаблицеСлужебный(ГоловнаяОрганизация, ИсходнаяТаблицаОбновления, ОтмечатьВОчереди)
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ЗапросТаблицыОбновления = Новый Запрос;
	ЗапросТаблицыОбновления.Текст =
	"ВЫБРАТЬ
	|	ИсходнаяТаблицаОбновления.СНИЛС КАК СНИЛС,
	|	ИсходнаяТаблицаОбновления.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ИсходнаяТаблицаОбновления
	|ИЗ
	|	&ИсходнаяТаблицаОбновления КАК ИсходнаяТаблицаОбновления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблицаОбновления.СНИЛС КАК Очередь_СНИЛС,
	|	ИсходнаяТаблицаОбновления.ФизическоеЛицо КАК Очередь_ФизическоеЛицо,
	|	ЕСТЬNULL(ФизическиеЛицаПоСсылке.СтраховойНомерПФР, ИсходнаяТаблицаОбновления.СНИЛС) КАК СНИЛС,
	|	ЕСТЬNULL(ФизическиеЛицаПоСНИЛС.Ссылка, ИсходнаяТаблицаОбновления.ФизическоеЛицо) КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ТаблицаОбновления
	|ИЗ
	|	ИсходнаяТаблицаОбновления КАК ИсходнаяТаблицаОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаПоСНИЛС
	|		ПО (ИсходнаяТаблицаОбновления.СНИЛС <> """")
	|			И ИсходнаяТаблицаОбновления.СНИЛС = ФизическиеЛицаПоСНИЛС.СтраховойНомерПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаПоСсылке
	|		ПО (ИсходнаяТаблицаОбновления.СНИЛС = """")
	|			И ИсходнаяТаблицаОбновления.ФизическоеЛицо = ФизическиеЛицаПоСсылке.Ссылка
	|			И (ФизическиеЛицаПоСсылке.СтраховойНомерПФР <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбновления.Очередь_СНИЛС КАК Очередь_СНИЛС,
	|	ТаблицаОбновления.Очередь_ФизическоеЛицо КАК Очередь_ФизическоеЛицо,
	|	ТаблицаОбновления.СНИЛС КАК СНИЛС,
	|	ТаблицаОбновления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НЕ РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL КАК ЗаписьПрисутствуетВРегистре,
	|	ЕСТЬNULL(Отправленные.Сотрудник, НЕОПРЕДЕЛЕНО) КАК ОтправленныеСведенияСотрудник,
	|	ЕСТЬNULL(Отправленные.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтправленныеСведенияДатаУвольнения,
	|	ЕСТЬNULL(Отправленные.НеЧислилсяВОрганизации, ЛОЖЬ) КАК ОтправленныеСведенияНеЧислилсяВОрганизации,
	|	ЕСТЬNULL(РегистрЗастрахованных.Страхователь, НЕОПРЕДЕЛЕНО) КАК Страхователь,
	|	ЕСТЬNULL(РегистрЗастрахованных.ПоследниеСведения, НЕОПРЕДЕЛЕНО) КАК ПоследниеСведения,
	|	ЕСТЬNULL(РегистрЗастрахованных.ОтправленныеСведения, НЕОПРЕДЕЛЕНО) КАК ОтправленныеСведения
	|ИЗ
	|	ТаблицаОбновления КАК ТаблицаОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК РегистрЗастрахованных
	|		ПО ТаблицаОбновления.СНИЛС = РегистрЗастрахованных.СНИЛС
	|			И (РегистрЗастрахованных.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованномЛицеФСС КАК Отправленные
	|		ПО (РегистрЗастрахованных.ОтправленныеСведения = Отправленные.Ссылка)";
	ЗапросТаблицыОбновления.УстановитьПараметр("ИсходнаяТаблицаОбновления", ИсходнаяТаблицаОбновления);
	ЗапросТаблицыОбновления.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	ТаблицаОбновления = ЗапросТаблицыОбновления.Выполнить().Выгрузить();
	ФизическиеЛица = КоллекцииБЗК.УникальныеЗначенияКолонки(ТаблицаОбновления, "ФизическоеЛицо");
	УдалитьПустыеЗначенияИзМассива(ФизическиеЛица, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ИменаПолейТребуемыхКадровыхДанныхФЛ = Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанныхФЛ();
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Ложь,
		ФизическиеЛица,
		ИменаПолейТребуемыхКадровыхДанныхФЛ,
		ТекущаяДатаСеанса);
	
	Запрос = РегистрыСведений.ЗастрахованныеЛицаСЭДО.ЗапросКадровыхДанныхПоСтрахователям(
		ГоловнаяОрганизация,
		Неопределено,
		ФизическиеЛица,
		Ложь);
	ФильтрКДС = Новый Структура("ФизическоеЛицо, Страхователь");
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	КадровыеДанныеСотрудников.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаОбновления Из ТаблицаОбновления Цикл
		
		ДатаПоследнегоИзменения = ТекущаяДатаСеанса;
		Если ОтмечатьВОчереди Тогда
			ОтметитьНачалоОбработки(
				ГоловнаяОрганизация,
				СтрокаОбновления.Очередь_ФизическоеЛицо,
				СтрокаОбновления.Очередь_СНИЛС,
				ДатаПоследнегоИзменения);
		КонецЕсли;
		
		КадровыеДанныеФизическогоЛица = КадровыеДанныеФизическихЛиц.Найти(СтрокаОбновления.СНИЛС, "СтраховойНомерПФР");
		
		КадровыеДанныеСотрудника = Неопределено;
		ЗаполнитьЗначенияСвойств(ФильтрКДС, СтрокаОбновления);
		Найденные = КадровыеДанныеСотрудников.НайтиСтроки(ФильтрКДС);
		Если Найденные.Количество() = 1 Тогда
			КадровыеДанныеСотрудника = Найденные[0];
		КонецЕсли;
		Для Каждого СтрокаТаблицыКадровыеДанныеСотрудников Из Найденные Цикл
			СтрокаТаблицыКадровыеДанныеСотрудников.Обработана = Истина;
		КонецЦикла;
		
		Если СтрокаОбновления.ЗаписьПрисутствуетВРегистре Тогда
			ПерезаполненаСсылкаСотрудника = ЗначениеЗаполнено(СтрокаОбновления.ОтправленныеСведенияСотрудник)
				И ?(КадровыеДанныеСотрудника = Неопределено Или Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.Сотрудник),
					Истина,
					СтрокаОбновления.ОтправленныеСведенияСотрудник <> КадровыеДанныеСотрудника.Сотрудник)
				И Не ЗначениеЗаполнено(СтрокаОбновления.ОтправленныеСведенияДатаУвольнения)
				И Не СтрокаОбновления.ОтправленныеСведенияНеЧислилсяВОрганизации;
			РегистрыСведений.ЗастрахованныеЛицаСЭДО.ОбновитьТребованияПоАктуализации(
				СтрокаОбновления,
				ДатаПоследнегоИзменения,
				КадровыеДанныеСотрудника,
				КадровыеДанныеФизическогоЛица,
				ПерезаполненаСсылкаСотрудника);
		ИначеЕсли КадровыеДанныеСотрудника <> Неопределено Тогда
			РегистрыСведений.ЗастрахованныеЛицаСЭДО.ДобавитьСведенияОНовомСотруднике(
				СтрокаОбновления,
				КадровыеДанныеСотрудника,
				Ложь);
		КонецЕсли;
		
		Если ОтмечатьВОчереди Тогда
			ОтметитьЗавершениеОбработки(
				ГоловнаяОрганизация,
				СтрокаОбновления.Очередь_ФизическоеЛицо,
				СтрокаОбновления.Очередь_СНИЛС);
		КонецЕсли;
		
	КонецЦикла;
	
	ФильтрНеобработанных = Новый Структура("Обработана, УволенДоНачалаПроактива", Ложь, Ложь);
	Необработанные = КадровыеДанныеСотрудников.НайтиСтроки(ФильтрНеобработанных);
	Для Каждого КадровыеДанныеСотрудника Из Необработанные Цикл
		ЗаполнитьЗначенияСвойств(ФильтрКДС, КадровыеДанныеСотрудника);
		Найденные = ТаблицаОбновления.НайтиСтроки(ФильтрКДС);
		Если Найденные.Количество() = 1 Тогда
			РегистрыСведений.ЗастрахованныеЛицаСЭДО.ДобавитьСведенияОНовомСотруднике(
				Найденные[0],
				КадровыеДанныеСотрудника,
				Ложь);
		ИначеЕсли Найденные.Количество() = 0 Тогда
			РегистрыСведений.ЗастрахованныеЛицаСЭДО.ДобавитьСведенияОНовомСотруднике(
				КадровыеДанныеСотрудника,
				КадровыеДанныеСотрудника,
				Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Включает флажок ОбработкаНачата.
Процедура ОтметитьНачалоОбработки(ГоловнаяОрганизация, ФизическоеЛицо, СНИЛС, ДатаПоследнегоИзменения)
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо, СНИЛС);
	Если Набор <> Неопределено Тогда
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
		Иначе
			Запись = Набор[0];
			Запись.ОбработкаНачата     = Истина;
			Запись.ДатаНачалаОбработки = ТекущаяДата();
			ДатаПоследнегоИзменения = Запись.ДатаПоследнегоИзменения;
			ЗавершитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Удаляет запись в регистре.
Процедура ОтметитьЗавершениеОбработки(ГоловнаяОрганизация, ФизическоеЛицо, СНИЛС)
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо, СНИЛС);
	Если Набор <> Неопределено Тогда
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
		Иначе
			Набор.Очистить();
			ЗавершитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ОбщегоНазначения

Процедура УдалитьПустыеЗначенияИзМассива(Массив, ОписаниеДопустимыхТипов)
	ОбратныйИндекс = Массив.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		Значение = Массив[ОбратныйИндекс];
		Если Не ЗначениеЗаполнено(Значение) Или Не ОписаниеДопустимыхТипов.СодержитТип(ТипЗнч(Значение)) Тогда
			Массив.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли