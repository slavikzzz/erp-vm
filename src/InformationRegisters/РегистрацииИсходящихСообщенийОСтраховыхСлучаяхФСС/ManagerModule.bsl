///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ИсходящийДокумент)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ИсходящийДокумент)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИсходящийДокумент - ДокументСсылка.ИсходящееСообщениеОСтраховомСлучаеФСС - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИсходящийДокумент) Экспорт
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС");
		ЭлементБлокировки.УстановитьЗначение("ИсходящийДокумент", ИсходящийДокумент);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходящийДокумент.Установить(ИсходящийДокумент);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить регистрацию исходящего сообщения о стра для расчета пособия ФСС %1 по причине: %2';
				|en = 'Cannot change the registration of an outgoing message about an insured event to calculate SSF allowance %1 due to: %2'"),
			ИсходящийДокумент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС,
			ИсходящийДокумент,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументу(ИсходящийДокументОбъект, РезультатОтправки = Неопределено) Экспорт
	// Регистрация является продолжением текущего документа.
	// Но если документ - новый, то поле "Ссылка" может быть не заполнено.
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИсходящийДокументОбъект.Ссылка);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	Запись.ИсходящийДокумент = ИсходящийДокументОбъект.Ссылка;
	Запись.ФизическоеЛицо    = ИсходящийДокументОбъект.ФизическоеЛицо;
	
	Если РезультатОтправки <> Неопределено Тогда
		Запись.Страхователь                = РезультатОтправки.Страхователь;
		Запись.ГоловнаяОрганизация         = РезультатОтправки.ГоловнаяОрганизация;
		Запись.ОтправленОператору          = РезультатОтправки.ОтправленоОператору;
		Запись.Доставлен                   = РезультатОтправки.ДоставленоФонду;
		Запись.ДатаОтправкиОператору       = РезультатОтправки.ДатаОтправкиОператору;
		Запись.ДатаОтправки                = РезультатОтправки.ДатаОтправкиФонду;
		Запись.ДоставкаТекстОшибки         = РезультатОтправки.ТекстОшибки;
		Запись.ДоставкаИдентификатор       = РезультатОтправки.ИдентификаторСообщения;
		Запись.ДоставкаИдентификаторПакета = РезультатОтправки.ИдентификаторПакета;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

#Область СЭДО

Функция НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, РезультатБРО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент КАК ИсходящийДокумент,
	|	Регистрация.Страхователь КАК Страхователь,
	|	Регистрация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС КАК Регистрация
	|ГДЕ
	|	Регистрация.ДоставкаИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент,
	|	Регистрация.Страхователь,
	|	Регистрация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС КАК Регистрация
	|ГДЕ
	|	Регистрация.РегистрацияИдентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Таблица = Запрос.Выполнить().Выгрузить();
	Найденные = Таблица.Скопировать(Новый Структура("Страхователь", Страхователь));
	Если Найденные.Количество() = 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Найденные = Таблица.Скопировать(Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
		Если Найденные.Количество() = 0 Тогда
			Найденные = Таблица;
		КонецЕсли;
	КонецЕсли;
	Если Найденные.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""';
				|en = 'No %2 with message ID ""%3"" was found for insurant ""%1""'"),
			Страхователь,
			Метаданные.РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.ПредставлениеЗаписи,
			ИдентификаторСообщения);
		СЭДОФСС.ОшибкаОбработки(РезультатБРО, ТекстОшибки);
	КонецЕсли;
	Возврат Найденные;
КонецФункции

Процедура ЗаполнитьПоРезультатуДоставки(ИсходящийДокумент, Сообщение) Экспорт
	Набор = НачатьЗаписьНабора(ИсходящийДокумент);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.ИсходящийДокумент = ИсходящийДокумент;
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	Запись.Доставлен           = Сообщение.ДоставленоФонду;
	Запись.ДатаОтправки        = Сообщение.ДатаОтправкиФонду;
	Запись.ДоставкаТекстОшибки = Сообщение.ТекстОшибки;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

// Загружает ошибку логического контроля (тип 14) полученную в ответ на документ СЭДО 109.
Процедура ЗагрузитьОшибкуСообщения109(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Таблица = НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИсходящийДокумент);
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = Набор[0];
		Если СтрНайти(Запись.ОшибкиЛогическогоКонтроля, ТекстОшибки) = 0 Тогда
			Если ПустаяСтрока(Запись.ОшибкиЛогическогоКонтроля) Тогда
				Запись.ОшибкиЛогическогоКонтроля = ТекстОшибки;
			Иначе
				Запись.ОшибкиЛогическогоКонтроля = Запись.ОшибкиЛогическогоКонтроля + Символы.ПС + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Запись.ЕстьОшибкиЛогическогоКонтроля = Истина;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

// Загружает сообщение СЭДО 112, которое является ответом ФСС на сообщение 109.
Процедура ЗагрузитьСообщение112(Страхователь, РегистрацияИдентификатор, ТекстXML, Результат, Кэш) Экспорт
	// Пример:
	//<n1:eventLifeResult xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:n1="urn:ru:fss:integration:types:information:EventLife:v01" responseOn="String" xsi:schemaLocation="urn:ru:fss:integration:types:information:EventLife:v01 EventLife.xsd">
	//	<n1:status>PROCESSED</n1:status>
	//</n1:eventLifeResult>
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "eventLifeResult");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'status']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM;
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "eventLifeResult");
		Возврат;
	КонецЕсли;
	
	АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
	ДоставкаИдентификатор = АтрибутыКорня.responseOn;
	Если ДоставкаИдентификатор = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаАтрибута(Результат, "responseOn");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиАтрибута(Результат, "responseOn");
		Возврат;
	КонецЕсли;
	
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "socialAssistNum, status, errorList");
	РегистрацияДата          = СЭДОФСС.ДатаСообщения(РегистрацияИдентификатор, Кэш);
	РегистрацияСтатус        = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.status);
	РегистрацияНомерПроцесса = СериализацияБЗК.ЧислоИзXML(РеквизитыКорня.socialAssistNum);
	РегистрацияПротокол      = СЭДОФСС.ПредставлениеСпискаОшибокXML(РеквизитыКорня.errorList);
	СведенияОСтатусе         = СведенияОСтатусеРегистрации(РегистрацияСтатус);
	
	Если Не ЗначениеЗаполнено(СведенияОСтатусе.Вес) Тогда
		РегистрацияПротокол = СокрЛП(СведенияОСтатусе.Расшифровка + Символы.ПС + Символы.ПС + РегистрацияПротокол);
		СЭДОФСС.ОшибкаОбработки(Результат, РегистрацияПротокол);
	КонецЕсли;
	
	ИсходящийДокумент = НайтиИсходящийДокумент(Страхователь, ДоставкаИдентификатор);
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		ДокументПредставление = Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.Представление();
		ТекстОшибки = НСтр("ru = 'Не удалось найти %1 с идентификатором ""%2""';
							|en = 'Cannot find %1 with ""%2"" ID'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументПредставление, ДоставкаИдентификатор);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Протокол:';
																	|en = 'Protocol:'") + Символы.ПС + РегистрацияПротокол;
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(ИсходящийДокумент);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ИсходящийДокумент);
		Запись.ИсходящийДокумент = ИсходящийДокумент;
	Иначе
		Запись = Набор[0];
		Если ЗначениеЗаполнено(Запись.РегистрацияСтатус)
			И РегистрацияИдентификатор <> Запись.РегистрацияИдентификатор Тогда
			СуществующийСтатус = СведенияОСтатусеРегистрации(Запись.РегистрацияСтатус);
			Если СведенияОСтатусе.Вес < СуществующийСтатус.Вес Тогда
				ОтменитьЗаписьНабора(Набор);
				Возврат; // Неактуальный (старый) статус.
			ИначеЕсли СведенияОСтатусе.Вес = СуществующийСтатус.Вес
				И РегистрацияДата < Запись.РегистрацияДата Тогда
				ОтменитьЗаписьНабора(Набор);
				Возврат; // Более старая регистрация.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запись.Зарегистрирован          = СведенияОСтатусе.Зарегистрирован;
	Запись.РегистрацияДата          = РегистрацияДата;
	Запись.РегистрацияСтатус        = РегистрацияСтатус;
	Запись.РегистрацияПротокол      = РегистрацияПротокол;
	Запись.РегистрацияИдентификатор = РегистрацияИдентификатор;
	
	УстановитьЗначениеЕслиЗаполнено(Запись.РегистрацияНомерПроцесса, РегистрацияНомерПроцесса);
	
	ЗавершитьЗаписьНабора(Набор);
	
	Результат.Обработано = Истина;
КонецПроцедуры

Процедура УстановитьЗначениеЕслиЗаполнено(ИзменяемоеЗначение, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		ИзменяемоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

Функция НайтиИсходящийДокумент(Страхователь, ИдентификаторСообщения)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныйДокумент.Ссылка КАК Ссылка,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.ИсходящееСообщениеОСтраховомСлучаеФСС КАК НайденныйДокумент
	|ГДЕ
	|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения
	|	И НайденныйДокумент.Страхователь = &Страхователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НайденныйДокумент.Ссылка,
	|	3
	|ИЗ
	|	Документ.ИсходящееСообщениеОСтраховомСлучаеФСС КАК НайденныйДокумент
	|ГДЕ
	|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СведенияОСтатусеРегистрации(Статус) Экспорт
	Результат = Новый Структура("Вес, Зарегистрирован, Расшифровка");
	
	СтатусВРег = ВРег(СокрЛП(Статус));
	
	Если СтатусВРег = "PROCESSED" Тогда
		Результат.Вес             = 1;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Успешно зарегистрировано, сообщение принято Фондом';
										|en = 'Successfully registered, the message is accepted by the Fund'");
		
	ИначеЕсли СтатусВРег = "ERROR" Тогда
		Результат.Вес             = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Обнаружены ошибки, сообщение отклонено Фондом';
										|en = 'Errors are found, the message is rejected by the Fund'");
		
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		Результат.Вес             = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = СтрШаблон(НСтр("ru = 'Неизвестный статус: ""%1"". Несоответствие спецификации СЭДО: неизвестный ""status"" входящего сообщения типа 112.';
													|en = 'Unknown status: ""%1"". EDI specification mismatch: unknown ""status"" of the incoming message with type 112.'"), Статус);
		
	Иначе
		Результат.Вес             = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Не заполнен статус регистрации. Несоответствие спецификации СЭДО: не заполнен ""status"" входящего сообщения типа 112.';
										|en = 'Registration status is not filled. EDI specification mismatch: the ""status"" of the incoming message with type 112 is not filled.'");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокВыбораСтатусов(ПолеВвода, Статус) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		Ключи = СтрРазделить("PROCESSED,ERROR", ",");
		Для Каждого Ключ Из Ключи Цикл
			СведенияОСтатусе = СведенияОСтатусеРегистрации(Ключ);
			СписокВыбора.Добавить(Ключ, СведенияОСтатусе.Расшифровка + " (" + Ключ + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) И СписокВыбора.НайтиПоЗначению(Статус) = Неопределено Тогда
		СведенияОСтатусе = СведенияОСтатусеРегистрации(Статус);
		СписокВыбора.Добавить(Статус, СведенияОСтатусе.Расшифровка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли