
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		Организация = Параметры.Отбор.Организация;
	КонецЕсли;
	
	Элементы.Обновить.Видимость = ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СнятьОтметкуНовое(Команда)
	
	ВыделенныеСтроки = Новый Массив;
	Для каждого ИдСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		Строка = Элементы.Список.ДанныеСтроки(ИдСтроки);
		Если Строка.Новое Тогда
			ВыделеннаяСтрока = Новый Структура(
				"Организация, Идентификатор, ДатаСоздания",
				Строка.Организация, Строка.Идентификатор, Строка.ДатаСоздания);
			ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		СнятьОтметкуНовоеНаСервере(ВыделенныеСтроки);
	КонецЕсли;
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Оповещение = Новый ОписаниеОповещения("ОбновитьПослеОбновления", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(
		Оповещение,
		Организации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПовторно(Команда)
	
	Организации = Новый Соответствие;
	Для каждого ИдСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		Строка = Элементы.Список.ДанныеСтроки(ИдСтроки);
		ТипСтрахователь = ДокументооборотСФССКлиентСервер.ТипВзаимодействияСтраховательСЭДО();
		Если НЕ Строка.ТипВзаимодействия = ТипСтрахователь Тогда
			Шаблон = НСтр("ru = 'Исключаем сообщение %1 с типом взаимодействия %2. Из списка допускается загрузка только сообщений с типом %3.';
							|en = 'Исключаем сообщение %1 с типом взаимодействия %2. Из списка допускается загрузка только сообщений с типом %3.'");
			ОписаниеОшибки = СтрШаблон(Шаблон, Строка.Идентификатор, Строка.ТипВзаимодействия, ТипСтрахователь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		Организация = Строка.Организация;
		Если Организации[Организация] = Неопределено Тогда
			Идентификаторы = Новый Массив;
		КонецЕсли;
		Идентификаторы.Добавить(Строка.Идентификатор);
		Организации[Организация] = Идентификаторы;
	КонецЦикла;
	
	Если Организации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючЗначение Из Организации Цикл
		Оповещение = Новый ОписаниеОповещения("ПолучитьССервераПослеПолучения", ЭтотОбъект);
		ЭлектронныйДокументооборотСФССКлиент.ПолучитьСообщенияСЭДО(
			Оповещение,
			КлючЗначение.Ключ,
			КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьПослеОбновления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.БылиОшибки Тогда
		Для каждого ОшибкиПоОрганизации Из Результат.ОшибкиПоОрганизациям Цикл
			Для каждого ОписаниеОшибки Из ОшибкиПоОрганизации.Значение Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Получено = 0;
	Для каждого РезультатыПоОрганизации Из Результат.РезультатыПоОрганизациям Цикл
		Для каждого РезультатПоОрганизации Из РезультатыПоОрганизации.Значение Цикл
			Если РезультатПоОрганизации.Выполнено Тогда
				Получено = Получено + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если Получено > 0 ИЛИ НЕ Результат.БылиОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Успешно получено сообщений СЭДО: %1';
				|en = 'Успешно получено сообщений СЭДО: %1'"),
			Строка(Получено)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьССервераПослеПолучения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.БылиОшибки Тогда
		Ошибки = СтрСоединить(Результат.Ошибки, Символы.ПС);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибки);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Сообщения были успешно получены с сервера СЭДО.';
							|en = 'Сообщения были успешно получены с сервера СЭДО.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьОтметкуНовоеНаСервере(ВыделенныеСтроки)
	
	БылиОшибки	= Ложь;
	Ошибки		= Новый Массив;
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		НаборЗаписей = РегистрыСведений.ВходящиеСообщенияСЭДОФСС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Идентификатор.Установить(Строка.Идентификатор);
		НаборЗаписей.Отбор.Организация.Установить(Строка.Организация);
		НаборЗаписей.Прочитать();
		Для каждого Запись из НаборЗаписей Цикл
			Если Запись.ДатаСоздания = Строка.ДатаСоздания Тогда
				Попытка
					Запись.Новое = Ложь;
					НаборЗаписей.Записать();
				Исключение
					БылиОшибки = Истина;
					ОписаниеОшибки = ОписаниеОшибки();
					Ошибки.Добавить(ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Ошибки = СтрСоединить(Ошибки, Символы.ПС);
		ОбщегоНазначения.СообщитьПользователю(Ошибки);
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Сообщения были успешно обработаны.';
								|en = 'Сообщения были успешно обработаны.'");
		ОбщегоНазначения.
			СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти