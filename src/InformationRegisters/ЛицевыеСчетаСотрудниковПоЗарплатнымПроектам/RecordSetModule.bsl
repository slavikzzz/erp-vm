#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОтменаРегистрацииЛицевыхСчетов")
		И ДополнительныеСвойства.ОтменаРегистрацииЛицевыхСчетов = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка того, что не меняются лицевые счета, введенные документом.
	ТекущийНабор = Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
	Для Каждого ЭлементОтбора Из Отбор Цикл
		НаборЗаписей.Отбор[ЭлементОтбора.ПутьКДанным].Установить(ЭлементОтбора.Значение);
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(ЗаписьНабора.ДокументОснование) Тогда
			
			ИзменениеЗапрещено = Ложь;
			СтрокиТекущегоНабора = ТекущийНабор.НайтиСтроки(Новый Структура("ФизическоеЛицо,ЗарплатныйПроект",ЗаписьНабора.ФизическоеЛицо, ЗаписьНабора.ЗарплатныйПроект));
			Если СтрокиТекущегоНабора.Количество() > 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокиТекущегоНабора[0].ДокументОснование)
					И ЗначениеЗаполнено(ЗаписьНабора.ДокументОснование)
					И СтрокиТекущегоНабора[0].ДатаОткрытияЛицевогоСчета < ЗаписьНабора.ДатаОткрытияЛицевогоСчета Тогда
					
					ИзменениеЗапрещено = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИзменениеЗапрещено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя изменять лицевые счета, введенные документом %1.';
						|en = 'Cannot change personal accounts entered by document %1.'"),
					ЗаписьНабора.ДокументОснование);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЗаписьНабора.ДокументОснование, , , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущийНабор", Выгрузить(, "ЗарплатныйПроект, НомерЛицевогоСчета, ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущийНабор.ЗарплатныйПроект КАК ЗарплатныйПроект,
		|	ТекущийНабор.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	ТекущийНабор.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	&ТекущийНабор КАК ТекущийНабор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛицевыеСчетаСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
		|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	ТекущийНабор.ФизическоеЛицо КАК ФизическоеЛицоТекущегоНабора,
		|	ЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущийНабор КАК ТекущийНабор
		|		ПО ЛицевыеСчетаСотрудников.ЗарплатныйПроект = ТекущийНабор.ЗарплатныйПроект
		|			И ЛицевыеСчетаСотрудников.НомерЛицевогоСчета = ТекущийНабор.НомерЛицевогоСчета
		|ГДЕ
		|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛицевыеСчетаСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
		|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета КАК НомерЛицевогоСчета
		|ПОМЕСТИТЬ ВТЗадвоенныеЛицевыеСчета
		|ИЗ
		|	ВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицевыеСчетаСотрудников.ЗарплатныйПроект,
		|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицевыеСчетаСотрудников.ФизическоеЛицо) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадвоенныеЛицевыеСчета.ЗарплатныйПроект КАК ЗарплатныйПроект
		|ИЗ
		|	ВТЗадвоенныеЛицевыеСчета КАК ЗадвоенныеЛицевыеСчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Отказ = Истина;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗадвоенныеЛицевыеСчета.ЗарплатныйПроект КАК ЗарплатныйПроект,
			|	ЗадвоенныеЛицевыеСчета.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
			|	ЛицевыеСчетаСотрудников.ФизическоеЛицоТекущегоНабора КАК ФизическоеЛицоТекущегоНабора,
			|	ЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТЗадвоенныеЛицевыеСчета КАК ЗадвоенныеЛицевыеСчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудников
			|		ПО ЗадвоенныеЛицевыеСчета.ЗарплатныйПроект = ЛицевыеСчетаСотрудников.ЗарплатныйПроект
			|			И ЗадвоенныеЛицевыеСчета.НомерЛицевогоСчета = ЛицевыеСчетаСотрудников.НомерЛицевогоСчета
			|ГДЕ
			|	ЛицевыеСчетаСотрудников.ФизическоеЛицоТекущегоНабора <> ЛицевыеСчетаСотрудников.ФизическоеЛицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗарплатныйПроект,
			|	НомерЛицевогоСчета,
			|	ФизическоеЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ЗарплатныйПроект") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("НомерЛицевогоСчета") Цикл
				
				Сотрудники = Новый Массив;
				Пока Выборка.Следующий() Цикл
					Сотрудники.Добавить(Выборка.ФизическоеЛицо);
				КонецЦикла;
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Лицевой счет %1 (%2) сотрудника %3 не уникален - он уже назначен сотруднику %4';
						|en = 'Personal account %1 (%2) of employee %3 is not unique: it is already assigned to employee %4'"),
					Выборка.НомерЛицевогоСчета,
					Выборка.ЗарплатныйПроект,
					Выборка.ФизическоеЛицоТекущегоНабора,
					СтрСоединить(Сотрудники, ", "));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.ЗарплатныйПроект, , , Отказ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Для Каждого Запись Из ЭтотОбъект Цикл
		Если Запись.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоЛицевомуСчету 
			Или Не ЗначениеЗаполнено(Запись.СпособЗачисления) Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскийСчет");
			НепроверяемыеРеквизиты.Добавить("БанковскаяКарта");
			НепроверяемыеРеквизиты.Добавить("Телефон");
			НепроверяемыеРеквизиты.Добавить("СпособЗачисления");
		ИначеЕсли Запись.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоНомеруКарты Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскийСчет");
			НепроверяемыеРеквизиты.Добавить("НомерЛицевогоСчета");
			НепроверяемыеРеквизиты.Добавить("Телефон");
		ИначеЕсли Запись.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоНомеруСчетаВБанк Тогда
			НепроверяемыеРеквизиты.Добавить("НомерЛицевогоСчета");
			НепроверяемыеРеквизиты.Добавить("БанковскаяКарта");
			НепроверяемыеРеквизиты.Добавить("Телефон");
		ИначеЕсли Запись.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоНомеруТелефона Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскийСчет");
			НепроверяемыеРеквизиты.Добавить("НомерЛицевогоСчета");
			НепроверяемыеРеквизиты.Добавить("БанковскаяКарта");
		ИначеЕсли Запись.СпособЗачисления = Перечисления.СпособыЗачисленияВыплат.ПоСНИЛС Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскийСчет");
			НепроверяемыеРеквизиты.Добавить("НомерЛицевогоСчета");
			НепроверяемыеРеквизиты.Добавить("Телефон");
			НепроверяемыеРеквизиты.Добавить("БанковскаяКарта");
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли