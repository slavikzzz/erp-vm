#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляНезависимогоРегистра(Настройки, "ФизическоеЛицо",
		"РегламентированныеДанные");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьРольФизическогоЛица(КоллекцияФизическихЛиц, Организация, Роль, Установить = Истина) Экспорт
	
	Если ТипЗнч(КоллекцияФизическихЛиц) <> Тип("Массив") Тогда
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КоллекцияФизическихЛиц);
	Иначе
		ФизическиеЛица = КоллекцияФизическихЛиц;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
		|		ПО РолиФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|			И РолиФизическихЛиц.Организация = &Организация
		|			И РолиФизическихЛиц.Роль = &Роль
		|ГДЕ
		|	ФизическиеЛица.Ссылка В (&ФизическиеЛица)
		|	И ВЫБОР
		|			КОГДА &Установить
		|				ТОГДА РолиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
		|			ИНАЧЕ НЕ РолиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
		|		КОНЕЦ";
		
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Роль", Роль);
	Запрос.УстановитьПараметр("Установить", Установить);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
		Набор.Отбор.ФизическоеЛицо.Установить(Выборка.Ссылка);
		Набор.Отбор.Организация.Установить(Организация);
		Набор.Отбор.Роль.Установить(Роль);
		
		Если Установить Тогда
			Запись = Набор.Добавить();
			Запись.ФизическоеЛицо = Выборка.Ссылка;
			Запись.Организация = Организация;
			Запись.Роль = Роль;
		КонецЕсли; 
		
		Набор.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьРольФизическогоЛица(ФизическоеЛицо, Организация, РольФизическогоЛица) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
	
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Роль.Установить(РольФизическогоЛица);
	
	Набор.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьРолиФизическогоЛица(ФизическоеЛицо, ОписаниеРолей) Экспорт
	
	ТаблицаНабораФормы = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
	ТаблицаНабораФормы.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	
	Для каждого СтруктураРоли Из ОписаниеРолей Цикл
		НоваяСтрокаРоли = ТаблицаНабораФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРоли, СтруктураРоли);
		НоваяСтрокаРоли.ФизическоеЛицо = ФизическоеЛицо;
	КонецЦикла;
	
	Набор = РегистрыСведений.РолиФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Набор.Прочитать();
	
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(Набор.Выгрузить(), ТаблицаНабораФормы) Тогда
		
		Набор.Загрузить(ТаблицаНабораФормы.Выгрузить());
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
