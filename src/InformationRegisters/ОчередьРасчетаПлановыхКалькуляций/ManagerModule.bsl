#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Записывает данные в регистр.
//
// Параметры:
//  Очередь	- ТаблицаЗначений - данные для записи.
//  Калькуляция - ДокументСсылка.ПлановаяКалькуляция2_2 - документ, которому принадлежит очередь.
//
Процедура ЗаписатьОчередь(Очередь, Калькуляция) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
	
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаПлановыхКалькуляций");
		ЭлементБлокировки.УстановитьЗначение("Калькуляция", Калькуляция);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Разделитель = РазделительОчереди(Калькуляция);
		
		Очередь.Колонки.Добавить("Разделитель");
		Очередь.ЗаполнитьЗначения(Разделитель, "Разделитель");
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПлановыхКалькуляций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Калькуляция.Установить(Калькуляция);
		НаборЗаписей.Отбор.Разделитель.Установить(Разделитель);
		НаборЗаписей.Загрузить(Очередь);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПлановыхКалькуляций.СоздатьНаборЗаписей();
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать очередь расчета плана: %Ссылка% по причине: %Причина%';
								|en = 'Cannot save plan calculation queue: %Ссылка%. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Калькуляция);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НаборЗаписей.Метаданные(),
			,
			ТекстСообщения);
		
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

// Очищает данные регистра по заданным измерениям.
//
// Параметры:
//  Очередь	- ТаблицаЗначений - данные измерений для очистки.
//  Калькуляция - ДокументСсылка.ПлановаяКалькуляция2_2 - документ, которому принадлежит очередь.
//
Процедура ОчиститьОчередь(Очередь, Калькуляция) Экспорт
	
	Для каждого Строка Из Очередь Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПлановыхКалькуляций.СоздатьНаборЗаписей();
		
		Для каждого Колонка Из Очередь.Колонки Цикл
			
			Измерение = НаборЗаписей.Отбор[Колонка.Имя]; // ЭлементОтбора
			Измерение.Установить(Строка[Колонка.Имя]);
			
		КонецЦикла;
		
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			
			НаборЗаписей = РегистрыСведений.ОчередьРасчетаПлановыхКалькуляций.СоздатьНаборЗаписей();
			
			ТекстСообщения = НСтр("ru = 'Не удалось очистить очередь расчета плана: %Ссылка% по причине: %Причина%';
									|en = 'Cannot clear plan calculation queue: %Ссылка%. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Калькуляция);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				НаборЗаписей.Метаданные(),
				,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Прочее

Функция РазделительОчереди(Калькуляция)
	
	Разделитель = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Калькуляция);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(МАКСИМУМ(Очередь.Разделитель), 0) КАК Разделитель
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПлановыхКалькуляций КАК Очередь
		|ГДЕ
		|	Очередь.Калькуляция = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Разделитель = ВыборкаДетальныеЗаписи.Разделитель + 1;
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Запись очереди расчета калькуляции продукции';
				|en = 'Save product costing calculation queue'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецЕсли
