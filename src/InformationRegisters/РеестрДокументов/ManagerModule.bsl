#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.РеестрДокументов);
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеестрДокументов = Неопределено;
	Если НЕ ТаблицыДляДвижений.Свойство("Таблица" + "РеестрДокументов", ТаблицаРеестрДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Набор.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Набор.Отбор.Ссылка.Установить(Документ);
	Набор.ЗагрузитьСОбработкой(ТаблицаРеестрДокументов);
	Набор.Записать();
	
	ОбновлениеИнформационнойБазыУТ.ОтметитьВыполнениеОбработкиИнтерактивно(Набор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает в регистр данные по переданному разделителю записи.
//
// Параметры:
//  ТаблицыДляДвижений		 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  	имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений).
//  РазделительЗаписи		 - Строка - измерение, по которому необходимо выполнить запись
//  ЗамещатьЗаписи			 - Булево - определяет режим замещения существующих записей разделителя. Истина - перед записью существующие
//		записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//
Процедура ЗаписатьДанныеРазделителя(ТаблицыДляДвижений, РазделительЗаписи, ЗамещатьЗаписи = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
	Набор.ЗагрузитьСОбработкой(ТаблицыДляДвижений["Таблица" + "РеестрДокументов"]);
	Набор.Записать(ЗамещатьЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак, того отражаются ли данные полученного объекта в реестре сведений или нет.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект, ДокументСсылка, ДанныеФормыСтруктура, ОбъектМетаданных - 
//
// Возвращаемое значение:
//	Булево - Истина, если данные полученного объекта, отражаются в реестре сведений.
//
Функция ОбъектВключенВСоставДанныхРеестра(ПроверяемыйОбъект) Экспорт
	
	ТипЗначения = ТипЗнч(ПроверяемыйОбъект);
	Если ТипЗначения = Тип("ДанныеФормыСтруктура") Тогда
		Если Не ПроверяемыйОбъект.Свойство("Ссылка") Тогда
			Возврат Ложь;
		КонецЕсли;
		ТипСсылки = ТипЗнч(ПроверяемыйОбъект.Ссылка);
	Иначе	
		Если ТипЗначения = Тип("ОбъектМетаданных") Тогда
			МетаданныеЗначения = ПроверяемыйОбъект; // ОбъектМетаданныхДокумент
		Иначе
			МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗначения); // ОбъектМетаданныхДокумент
			
			Если МетаданныеЗначения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения) Тогда
			Возврат Ложь;
		КонецЕсли;

		ТипСсылки = ТипЗнч(МетаданныеЗначения.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
	КонецЕсли;

	Возврат Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.СодержитТип(ТипСсылки);
	
КонецФункции

// Инициализирует и записывает данные документов, полученных объектов метаданных, в регистр сведений.
//
// Параметры:
//	ОбъектыМетаданных - Соответствие - объекты метаданных:
//		* Ключ		- ОбъектМетаданныхДокумент	- объект метаданных документа.
//		* Значение	- Неопределено				- пустое значение.
//
Процедура ОтразитьДанныеДокументовВРеестре(ОбъектыМетаданных) Экспорт
	
	ИменаОбъектов		= Новый Массив;
	СсылкиДокументов	= Новый Массив;
	
	Для Каждого ЭлементДанных Из ОбъектыМетаданных Цикл
		ОбъектДанных		= ЭлементДанных.Ключ;
		ПолноеИмяОбъекта	= ОбъектДанных.ПолноеИмя();
		
		ИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	КонецЦикла;
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Дополнительно");
	НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
	
	Для Каждого ПолноеИмяОбъекта Из ИменаОбъектов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
							РезультатАдаптацииЗапроса,
							"РегистрСведений.РеестрДокументов",
							ПолноеИмяОбъекта,
							НеиспользуемыеПоля);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиДокументов, Регистраторы.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиДокументов Цикл
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Ссылка, Неопределено, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию типов, которые включены в измерение 'Ссылка'.
//
// Возвращаемое значение:
//	Массив Из Тип - коллекция типов, которые включены в измерение 'Ссылка'.
//
Функция ТипыДокументовРеестра() Экспорт
	
	ТипыСсылки = Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.Типы();
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	//++ Локализация
	ИсключаемыеТипы.Очистить();
	//-- Локализация
	
	Если ИсключаемыеТипы.Количество() Тогда
		ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыСсылки, ИсключаемыеТипы);
	Иначе
		ТипыДокументов = ТипыСсылки;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(Ссылка)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.13.40";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5c13bb21-4407-473a-81c4-e16b8693e7bb");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзменения";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = 
		НСтр("ru = 'Корректировка суммы в реестре документов по документу ""Авансовый отчет""';
			|en = 'Adjust the amount in the document registry for the ""Expense report"" document'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АвансовыйОтчет.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	//++ НЕ УТКА
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЭтапПроизводства2_2";
	Обработчик.Версия = "11.5.17.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("30fa79a9-5bff-4796-8395-4554aac27301");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияЭтапПроизводства2_2";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Заполнение ""Место хранения"" в реестре документов по документу ""Этап производства""';
									|en = 'Fill ""Storage location"" in the document registry for the ""Production stage"" document'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	//-- НЕ УТКА
	
	//++ НЕ УТ
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюПроизводствоБезЗаказа";
	Обработчик.Версия = "11.5.17.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e8a7d655-2ac3-4934-b61f-f0c9d946e4af");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияПроизводствоБезЗаказа";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Обновляет записи в реестре документов по документу ""Производство без заказа"".';
									|en = 'Updates records in the document registry for the ""Backflush production"" document.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	//-- НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеРегистраДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.14.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9c1e7dc9-56a1-416e-ae77-c731378a17bc");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДокументыВводаОстатковДляИзменения";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = 
		НСтр("ru = 'Корректировка суммы и валюты в реестре документов по документу ""Ввод остатков денежных средств"" и ""Ввод остатков с подотчетниками""';
			|en = 'Adjust the amount and the currency in the document registry by the ""OB entry: cash balance"" and ""OB entry: AR/AP advance holders"" documents'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковСПодотчетниками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюУдалениеДублей";
	Обработчик.Версия = "11.5.14.21";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("11aa59cc-66d9-4c45-9da8-97300054c565");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияУдалениеДублей";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Удаление дублей записей реестра документов';
									|en = 'Delete duplicates of document registry records'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочиеДоходыРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	//++ НЕ УТКА
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЭтапПроизводства2_2";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТКА
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеРегистраДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюОбновлениеЗаписейДокументов";
	НоваяСтрока.Порядок = "До";
	//++ НЕ УТ
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюДокументыПоАренде";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюПроизводствоБезЗаказа";
	НоваяСтрока.Порядок = "До";
	//-- НЕ УТ
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюОтчетБанкаПоОперациямЭквайринга";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеАвтора";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаявкаНаРасходованиеДенежныхСредств";
	НоваяСтрока.Порядок = "До";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	
	Для Каждого ТипРегистратора Из Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.Типы() Цикл
		
		МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
		
		Если Метаданные.ПланыОбмена.ОбновлениеИнформационнойБазы.Состав.Найти(МетаданныеРегистратора) <> Неопределено Тогда
			Читаемые.Добавить(МетаданныеРегистратора.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюОбновлениеЗаписейДокументов";
	Обработчик.Версия = "11.5.14.21";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a920830-2fe5-4eb1-b25b-cb288e58d9ed");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияОбновлениеЗаписейДокументов";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Обновление записей документов';
									|en = 'Update document records'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	//++ НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюДокументыПоАренде";
	Обработчик.Версия = "11.5.17.89";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fdce9b5c-ffef-421a-adac-71a97cca5c4d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияДокументыПоАренде";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значений ""Партнер, Договор, Сумма, Валюта"" в реестре документов по документам ""Ввод остатков взаиморасчетов по аренде""
										|Заполнение значений ""Контрагент"" в реестре документов по документам ""Возврат ОС из аренды""
										|Обработка документов ""Обесценение ВНА"" с двумя основными записями в реестре документов';
										|en = 'Fill the ""Partner, Contract, Amount, Currency"" values in the document registry for the ""OB entry: rental AR/AP"" documents
										|Fill the ""Counterparty"" values in the document registry for the ""Return assets from lessee"" documents
										|Process the ""Fixed assets impairment"" documents with two main records in the document registry'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковВзаиморасчетовПоАренде.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	//-- НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюОтчетБанкаПоОперациямЭквайринга";
	Обработчик.Версия = "11.5.16.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3c732f0a-dd9c-4ac3-b4c3-7142f054e9aa");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеДляИзмененияСуммыОтчетаБанкаПоОперациямЭквайринга";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий =
		НСтр("ru = 'Корректировка суммы в реестре документов по документу ""Отчет банка по операциям эквайринга"",
		|Заполнение ""Статус"" в реестре документов по документу ""Внутреннее потребление""';
		|en = 'Adjust the amount in the document registry for the ""Merchant statement"" document,
		|Fill ""Status"" in the document registry for the ""Inventory consumption"" document'");
	Обработчик.Многопоточный = Истина;

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ОтчетБанкаПоОперациямЭквайринга.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеАвтора";
	Обработчик.Версия = "11.5.16.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c68b119-bca9-4995-9c32-2c59b0047ace");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляЗаполненияАвтора";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий =
		НСтр("ru = 'Заполнение ""Автора"" в реестре документов по документам:
		|""Заказ клиента"", ""Заявка на возврат товаров от клиента"", ""Отчет комиссионера (агента) о продажах"", 
		|""Отчет комиссионера о списании"", ""Отчет комитенту о продажах"", ""Отчет комитенту о списании"".';
		|en = 'Fill the ""Author"" in the document registry for the following documents:
		|""Sales order"", ""Sales return request"", ""Consignment issue notification"", 
		|""Consignment stock adjustment"", ""Consignment settlement notification"", and ""Vendor consignment stock adjustment"".'");
	Обработчик.Многопоточный = Истина;

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомиссионера.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомиссионераОСписании.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитентуОСписании.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеКазначействаДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26f1cd1b-f817-4769-ae2f-4e5f9b1923f4");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКазначействаКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Описания = Новый Массив;
	Описания.Добавить(НСтр("ru = 'Обработка записей регистра сведений ""Реестр документов"" по документам раздела ""Казначейство"":';
							|en = 'Process records of the ""Document registry"" information register for the documents of the ""Treasury"" section:'"));
	Описания.Добавить(НСтр("ru = '- добавление записей по документу ""Заявка на расходование денежных средств"" с операциями ""Выплата по ведомости на лицевые счета"" и ""Выплата по ведомости по зарплатному проекту"";';
							|en = '- Add records of the ""Payment request"" document with the ""Payroll payment to bank accounts"" and ""Payroll payment by payroll card program"" transactions.'"));
	
	//++ Локализация
	Описания.Добавить(НСтр("ru = '- изменение операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"";';
							|en = '- Change the ""Payment to self-employed person"" transaction to ""Payment to vendor"" transaction.'"));
	Описания.Добавить(НСтр("ru = '- добавление записей по документу ""Заявка на расходование денежных средств"" с операцией ""Оплата поставщику"" с флагом ""Оплата самозанятому"";';
							|en = '- Add records for the ""Payment request"" document with the ""Payment to vendor"" transaction with the ""Payment to self-employed person"" checkbox.'"));
	//-- Локализация

	Обработчик.Комментарий = СтрСоединить(Описания, Символы.ПС);
	Обработчик.Многопоточный = Истина;

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюУдалениеДублей";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя());
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
																			"РегистрСведений.РеестрДокументов",
																			Параметры.Очередь,
																			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзменения(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументАвансовыйОтчет.Ссылка КАК Ссылка,
		|	ДокументАвансовыйОтчет.СуммаИзрасходовано КАК СуммаИзрасходовано,
		|	ДокументАвансовыйОтчет.Мультивалютный КАК Мультивалютный
		|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДокументАвансовыйОтчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
		|	СУММА(ПриобретениеТоваровУслуг.СуммаДокумента) КАК Сумма
		|ПОМЕСТИТЬ ПриобретениеТоваровУслугРасходовано
		|ИЗ
		|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПриобретениеТоваровУслуг.АвансовыйОтчет
		|			И (ПриобретениеТоваровУслуг.Проведен)
		|			И (НЕ ДанныеАвансовогоОтчета.Мультивалютный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАвансовогоОтчета.Ссылка
		|;
		|
		//++ Локализация

		//++ НЕ УТ
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
		|	СУММА(ПоступлениеДенежныхДокументов.СуммаДокумента) КАК Сумма
		|ПОМЕСТИТЬ ПоступлениеДенежныхДокументовРасходовано
		|ИЗ
		|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеДенежныхДокументов КАК ПоступлениеДенежныхДокументов
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПоступлениеДенежныхДокументов.АвансовыйОтчет
		|			И (ПоступлениеДенежныхДокументов.Проведен)
		|			И (НЕ ДанныеАвансовогоОтчета.Мультивалютный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАвансовогоОтчета.Ссылка
		|;
		//-- НЕ УТ

		//-- Локализация
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
		|	ДанныеАвансовогоОтчета.СуммаИзрасходовано 
		//++ Локализация

		//++ НЕ УТ
		|	+ ЕСТЬNULL(ПоступлениеДенежныхДокументовРасходовано.Сумма, 0) 
		//-- НЕ УТ

		//-- Локализация
		|	+ ЕСТЬNULL(ПриобретениеТоваровУслугРасходовано.Сумма, 0) КАК Сумма
		|ПОМЕСТИТЬ ИтогоИзрасходованоПоДокументу
		|ИЗ
		|	ДанныеАвансовогоОтчета КАК ДанныеАвансовогоОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриобретениеТоваровУслугРасходовано КАК ПриобретениеТоваровУслугРасходовано
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПриобретениеТоваровУслугРасходовано.Ссылка
		//++ Локализация

		//++ НЕ УТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеДенежныхДокументовРасходовано КАК ПоступлениеДенежныхДокументовРасходовано
		|		ПО ДанныеАвансовогоОтчета.Ссылка = ПоступлениеДенежныхДокументовРасходовано.Ссылка
		//-- НЕ УТ

		//-- Локализация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогоИзрасходованоПоДокументу КАК ИтогоИзрасходованоПоДокументу
		|		ПО РеестрДокументов.Ссылка = ИтогоИзрасходованоПоДокументу.Ссылка
		|ГДЕ
		|	РеестрДокументов.Сумма <> ИтогоИзрасходованоПоДокументу.Сумма";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

//++ НЕ УТКА

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияЭтапПроизводства2_2(Параметры) Экспорт 
	
	ПолноеИмяРегистра  = "РегистрСведений.РеестрДокументов";
	ПолноеИмяДокумента = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПолныеИменаОбъектов  = ПолноеИмяДокумента;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
						Документы.ЭтапПроизводства2_2.АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов"),
						ПолноеИмяРегистра, 
						ПолноеИмяДокумента);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЭтапПроизводства2_2(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
								Параметры.Очередь,
								ОбъектМетаданных.Ключ.ПолноеИмя());
								
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений       = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора               = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции          = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные                   = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
					Неопределено,
					"РегистрСведений.РеестрДокументов",
					Параметры.Очередь,
					ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры
//-- НЕ УТКА

//++ НЕ УТ

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияПроизводствоБезЗаказа(Параметры) Экспорт 
	
	ПолноеИмяРегистра  = "РегистрСведений.РеестрДокументов";
	ПолноеИмяДокумента = "Документ.ПроизводствоБезЗаказа";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПолныеИменаОбъектов  = ПолноеИмяДокумента;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
	
	Регистраторы =
		ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
			Документы.ПроизводствоБезЗаказа.АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов"),
			ПолноеИмяРегистра,
			ПолноеИмяДокумента,
			НеиспользуемыеПоля);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюПроизводствоБезЗаказа(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЕстьЗаблокированные =
			ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
				Параметры.Очередь,
				ОбъектМетаданных.Ключ.ПолноеИмя());
		
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений       = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора               = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции          = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные                   = Параметры.ОбновляемыеДанные;
	
	ВсеСделано =
		ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
			Неопределено,
			"РегистрСведений.РеестрДокументов",
			Параметры.Очередь,
			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры
//-- НЕ УТ

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияУдалениеДублей(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РеестрДокументов
	|ГДЕ
	|	Ссылка <> НЕОПРЕДЕЛЕНО
	|	И НЕ ДополнительнаяЗапись
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюУдалениеДублей(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя()
		);
		
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	СтрокаРеестрДокументов = ДополнительныеПараметры.ОбновляемыеДанные.НаборДанных.Найти("РегистрСведений.РеестрДокументов", "ТабличныйОбъект");
	Если СтрокаРеестрДокументов <> Неопределено
		И ДополнительныеПараметры.ОбновляемыеДанные.НаборДанных.Колонки.Найти("Данные") <> Неопределено Тогда
		
		ТаблицаДокументов = СтрокаРеестрДокументов.Данные;
		Если ТипЗнч(ТаблицаДокументов) = Тип("ТаблицаЗначений")
			И ТаблицаДокументов.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			Для Индекс = 1 По ТаблицаДокументов.Количество() Цикл
				
				Если ТипЗнч(ТаблицаДокументов.Получить(Индекс - 1).Ссылка) = Тип("ДокументСсылка.Сторно") Тогда
					ТаблицаДокументов.Сдвинуть(Индекс - 1, ТаблицаДокументов.Количество() - Индекс);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
		"РегистрСведений.РеестрДокументов",
		Параметры.Очередь,
		ДополнительныеПараметры
	);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;

КонецПроцедуры

Процедура ОбработатьДанныеРегистраДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияОбновлениеЗаписейДокументов(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРеестрДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыДляИсправления
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК ТаблицаРеестрДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров КАК ДанныеДокумента
	|		ПО (ТаблицаРеестрДокументов.Ссылка = ДанныеДокумента.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров.Товары КАК ДанныеТабличнойЧастиТовары
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ТаблицаКонстантаВалютаУправленческогоУчета
	|		ПО (ИСТИНА)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ТаблицаРеестрДокументов.Ссылка,
	|	ТаблицаРеестрДокументов.Сумма,
	|	ТаблицаРеестрДокументов.Валюта,
	|	ТаблицаКонстантаВалютаУправленческогоУчета.Значение
	|ИМЕЮЩИЕ
	|	(ТаблицаРеестрДокументов.Сумма <> ВЫБОР
	|		КОГДА ДанныеДокумента.Ссылка.ОтражатьВБУиНУ
	|			ТОГДА ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ОтражатьВУУ
	|				ИЛИ ДанныеДокумента.Ссылка.ОтражатьСебестоимость
	|					ТОГДА 0
	|				КОГДА ДанныеДокумента.Ссылка.ОтражатьВОперативномУчете
	|					ТОГДА СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиТовары.Сумма, 0))
	|				ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиТовары.СуммаРегл, 0))
	|			КОНЕЦ
	|		КОГДА ДанныеДокумента.Ссылка.ОтражатьВУУ
	|		ИЛИ ДанныеДокумента.Ссылка.ОтражатьСебестоимость
	|			ТОГДА СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиТовары.Сумма, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	ИЛИ ТаблицаРеестрДокументов.Валюта <> ВЫБОР
	|		КОГДА ДанныеДокумента.Ссылка.ОтражатьВБУиНУ
	|			ТОГДА ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ОтражатьВУУ
	|				ИЛИ ДанныеДокумента.Ссылка.ОтражатьСебестоимость
	|					ТОГДА ДанныеДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|				КОГДА ДанныеДокумента.Ссылка.ОтражатьВОперативномУчете
	|					ТОГДА ТаблицаКонстантаВалютаУправленческогоУчета.Значение
	|				ИНАЧЕ ДанныеДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			КОНЕЦ
	|		КОГДА ДанныеДокумента.Ссылка.ОтражатьВУУ
	|		ИЛИ ДанныеДокумента.Ссылка.ОтражатьСебестоимость
	|			ТОГДА ТаблицаКонстантаВалютаУправленческогоУчета.Значение
	|		ИНАЧЕ ДанныеДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|	КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаРеестрДокументов.Ссылка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК ТаблицаРеестрДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ДанныеДокумента
	|		ПО ТаблицаРеестрДокументов.Ссылка = ДанныеДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ОптовыеПродажи КАК
	|			ДанныеТабличнойЧастиОптовыеПродажи
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиОптовыеПродажи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.РозничныеПродажи КАК
	|			ДанныеТабличнойЧастиРозничныеПродажи
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРозничныеПродажи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ПодарочныеСертификаты КАК
	|			ДанныеТабличнойЧастиПодарочныеСертификаты
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиПодарочныеСертификаты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатРасходы КАК
	|			ДанныеТабличнойЧастиФинансовыйРезультатРасходы
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатРасходы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатДоходы КАК
	|			ДанныеТабличнойЧастиФинансовыйРезультатДоходы
	|		ПО (ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатДоходы.Ссылка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ТаблицаРеестрДокументов.Ссылка,
	|	ТаблицаРеестрДокументов.Сумма,
	|	ТаблицаРеестрДокументов.Валюта
	|ИМЕЮЩИЕ
	|	ТаблицаРеестрДокументов.Сумма <> ВЫБОР
	|		КОГДА ТаблицаРеестрДокументов.Валюта = ДанныеДокумента.Ссылка.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатРасходы.СуммаРасходов, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатДоходы.СуммаДоходов, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиПодарочныеСертификаты.СуммаРегл, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиОптовыеПродажи.СуммаРегл, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиРозничныеПродажи.СуммаРегл, 0))
	|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатРасходы.СуммаРасходов, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатДоходы.СуммаДоходов, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиПодарочныеСертификаты.СуммаВВалютеСертификата, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиОптовыеПродажи.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиРозничныеПродажи.Сумма, 0))
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ВТИсправляемыеДокументы
	|ИЗ
	|	ВТДокументыДляИсправления КАК ДокументыДляИсправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ДокументыДляИсправления.Ссылка = РеестрДокументов.СторнируемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсправляемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыДляИсправления.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДокументыДляИсправления КАК ВТДокументыДляИсправления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ВТИсправляемыеДокументы КАК ИсправляемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюОбновлениеЗаписейДокументов(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя()
		);
		
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
		"РегистрСведений.РеестрДокументов",
		Параметры.Очередь,
		ДополнительныеПараметры
	);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДокументыВводаОстатковДляИзменения(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ИНАЧЕ ДанныеДокумента.Валюта
		|	КОНЕЦ КАК Валюта,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиКассы.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиБанковскиеСчета.Сумма, 0) +
		|			ЕСТЬNULL(ДанныеТабличнойЧастиКассыККМ.Сумма, 0))
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ДанныеВводаОстатков
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.Кассы КАК ДанныеТабличнойЧастиКассы
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ДанныеТабличнойЧастиБанковскиеСчета
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиБанковскиеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ДанныеТабличнойЧастиКассыККМ
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассыККМ.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Валюта
		|ИМЕЮЩИЕ
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ИНАЧЕ ДанныеДокумента.Валюта
		|	КОНЕЦ = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|	И ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиКассы.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиБанковскиеСчета.Сумма, 0) +
		|			ЕСТЬNULL(ДанныеТабличнойЧастиКассыККМ.Сумма, 0))
		|	КОНЕЦ = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиРасчетыСПодотчетниками.Валюта) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ИНАЧЕ ДанныеДокумента.Валюта
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиРасчетыСПодотчетниками.Валюта) > 1
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыСПодотчетниками.Сумма, 0))
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводОстатковСПодотчетниками КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковСПодотчетниками.РасчетыСПодотчетниками КАК
		|			ДанныеТабличнойЧастиРасчетыСПодотчетниками
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРасчетыСПодотчетниками.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Валюта
		|ИМЕЮЩИЕ
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиРасчетыСПодотчетниками.Валюта) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ИНАЧЕ ДанныеДокумента.Валюта
		|	КОНЕЦ = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|	И ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиРасчетыСПодотчетниками.Валюта) > 1
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыСПодотчетниками.Сумма, 0))
		|	КОНЕЦ = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВводаОстатков.Ссылка КАК Ссылка
		|	ИЗ
		|		ДанныеВводаОстатков КАК ДанныеВводаОстатков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
		|	ГДЕ
		|		ДанныеВводаОстатков.Сумма <> РеестрДокументов.Сумма
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДанныеВводаОстатков.Ссылка
		|	ИЗ
		|		ДанныеВводаОстатков КАК ДанныеВводаОстатков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
		|	ГДЕ
		|		ДанныеВводаОстатков.Валюта <> РеестрДокументов.Валюта) КАК ВложенныйЗапрос";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

//++ НЕ УТ

// Регистрирует документы к обработке для изменения.
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияДокументыПоАренде(Параметры) Экспорт 
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РеестрДокументов.ДополнительнаяЗапись) КАК КоличествоОсновныхЗаписей
	|ПОМЕСТИТЬ ВТ_СписокОбесценений
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка ССЫЛКА Документ.ОбесценениеВНА
	|	И РеестрДокументов.ДополнительнаяЗапись = ЛОЖЬ
	|СГРУППИРОВАТЬ ПО
	|	РеестрДокументов.Ссылка
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РеестрДокументов.ДополнительнаяЗапись) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеВводаОстатков.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ВводОстатковВзаиморасчетовПоАренде КАК ДанныеВводаОстатков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ДанныеВводаОстатков.Договор <> РеестрДокументов.Договор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеВводаОстатков.Ссылка
	|	ИЗ
	|		Документ.ВводОстатковВзаиморасчетовПоАренде КАК ДанныеВводаОстатков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ДанныеВводаОстатков.Договор.ВалютаВзаиморасчетов <> РеестрДокументов.Валюта
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеВводаОстатков.Ссылка
	|	ИЗ
	|		Документ.ВводОстатковВзаиморасчетовПоАренде КАК ДанныеВводаОстатков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ДанныеВводаОстатков.СуммаДокумента <> РеестрДокументов.Сумма
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеВводаОстатков.Ссылка
	|	ИЗ
	|		Документ.ВводОстатковВзаиморасчетовПоАренде КАК ДанныеВводаОстатков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеВводаОстатков.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ДанныеВводаОстатков.Партнер <> РеестрДокументов.Партнер
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеВозврата.Ссылка
	|	ИЗ
	|		Документ.ВозвратОСИзАренды2_4 КАК ДанныеВозврата
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ДанныеВозврата.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ДанныеВозврата.Арендатор <> ЕСТЬNULL(РеестрДокументов.Контрагент.Ключ, НЕОПРЕДЕЛЕНО)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		СписокОбесценений.Ссылка
	|	ИЗ
	|		ВТ_СписокОбесценений КАК СписокОбесценений
	|
	|	) КАК ДокументыКОбработке
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюДокументыПоАренде(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры
//-- НЕ УТ

// Регистрирует документы к обработке для изменения.
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьДанныеДляИзмененияСуммыОтчетаБанкаПоОперациямЭквайринга(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетБанкаПоОперациямЭквайринга.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТДокументыДляИсправления
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетБанкаПоОперациямЭквайринга КАК ОтчетБанкаПоОперациямЭквайринга
		|		ПО РеестрДокументов.Ссылка = ОтчетБанкаПоОперациямЭквайринга.Ссылка
		|ГДЕ
		|	ОтчетБанкаПоОперациямЭквайринга.СуммаДокумента <> РеестрДокументов.Сумма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутреннееПотребление.Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотребление КАК ВнутреннееПотребление
		|		ПО РеестрДокументов.Ссылка = ВнутреннееПотребление.Ссылка
		|ГДЕ
		|	ВнутреннееПотребление.Статус <> РеестрДокументов.Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
		|ПОМЕСТИТЬ ВТИсправляемыеДокументы
		|ИЗ
		|	ВТДокументыДляИсправления КАК ДокументыДляИсправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ДокументыДляИсправления.Ссылка = РеестрДокументов.СторнируемыйДокумент
		|		И НЕ РеестрДокументов.ДополнительнаяЗапись
		|ГДЕ
		|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
		|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИсправляемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДокументыДляИсправления.Ссылка КАК Ссылка
		|ИЗ
		|	ВТДокументыДляИсправления КАК ВТДокументыДляИсправления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Регистратор
		|ИЗ
		|	ВТИсправляемыеДокументы КАК ИсправляемыеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
		|		И НЕ РеестрДокументов.ДополнительнаяЗапись
		|ГДЕ
		|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюОтчетБанкаПоОперациямЭквайринга(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// Регистрирует документы к обработке для изменения.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляЗаполненияАвтора(Параметры) Экспорт 
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыДляИсправления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ЗаказКлиента.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ЗаказКлиента.Автор <> РеестрДокументов.Автор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Автор <> РеестрДокументов.Автор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Ссылка
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ОтчетКомиссионера.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ОтчетКомиссионера.Автор <> РеестрДокументов.Автор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОСписании.Ссылка
	|	ИЗ
	|		Документ.ОтчетКомиссионераОСписании КАК ОтчетКомиссионераОСписании
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ОтчетКомиссионераОСписании.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ОтчетКомиссионераОСписании.Автор <> РеестрДокументов.Автор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Ссылка
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ОтчетКомитенту.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ОтчетКомитенту.Автор <> РеестрДокументов.Автор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Ссылка
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ОтчетКомитентуОСписании.Ссылка = РеестрДокументов.Ссылка
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Автор <> РеестрДокументов.Автор) КАК ВложенныйЗапрос
	|;
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ВТИсправляемыеДокументы
	|ИЗ
	|	ВТДокументыДляИсправления КАК ДокументыДляИсправления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		ДокументыДляИсправления.Ссылка = РеестрДокументов.СторнируемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсправляемыйДокумент
	|;
	|
	|ВЫБРАТЬ
	|	ВТДокументыДляИсправления.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДокументыДляИсправления КАК ВТДокументыДляИсправления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ВТИсправляемыеДокументы КАК ИсправляемыеДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов 
	|	ПО
	|		ИсправляемыеДокументы.ИсправляемыйДокумент = РеестрДокументов.ИсправляемыйДокумент
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	НЕ РеестрДокументов.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеАвтора(Параметры) Экспорт

	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);

КонецПроцедуры

// Регистрирует к обработке: документы "Зяавка на расходование ДС" с операциями "Выплата по ведомости на лицевые счета"
// и "Выплата по ведомости по зарплатному проекту" для добавления; документы с операцией "Оплата самозанятому"; 
// документы с операцией "Оплата поставщику", которых нет в регистре.
// 
// Параметры:
//  Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки.
//
Процедура ЗарегистрироватьДанныеКазначействаКОбработке(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокЗаявок
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперацияПоЗарплате В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту), 
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
		|

		//++ Локализация

		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
		|	И ЗаявкаНаРасходованиеДенежныхСредств.ОперацияССамозанятым
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен

		//-- Локализация

		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокЗаявок.Ссылка КАК Ссылка
		|ИЗ
		|	СписокЗаявок КАК СписокЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО СписокЗаявок.Ссылка = РеестрДокументов.Ссылка
		|ГДЕ
		|	РеестрДокументов.Ссылка ЕСТЬ NULL
		|

		//++ Локализация

		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)

		//-- Локализация
		|";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеКазначействаДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
