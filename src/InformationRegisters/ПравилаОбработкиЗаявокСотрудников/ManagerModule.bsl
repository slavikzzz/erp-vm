#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает количество дней на выполнение конкретного этапа бизнес-процесса
//	Параметры:
//		РольИсполнителя - СправочникСсылка.РолиИсполнителей - роль исполнителя заявки;
//		Подразделение - СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.СтруктураПредприятия,
//						СправочникСсылка.Организации - подразделение для которого требуется получить срок выполнения;
//		Этап - СправочникСсылка.ЭтапыЗаявки - этап на котором находится заявка
//	Возвращаемое значение:
//		Число - плановый срок на выполнение задачи
Функция СрокЗадачи(РольИсполнителя, Подразделение, Этап) Экспорт
	
	РезультатЗапроса = РезультатЗапросаПоИзмерениям(РольИсполнителя, Подразделение, Этап);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 7;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СрокЗадачи;
	КонецЕсли;
	
КонецФункции

// Возвращает необходимость подписания заявки сотрудника на конкретном этапе бизнес-процесса
//	Параметры:
//		РольИсполнителя - СправочникСсылка.РолиИсполнителей - роль исполнителя заявки;
//		Подразделение - СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.СтруктураПредприятия,
//						СправочникСсылка.Организации - подразделение для которого требуется получить информацию о необходимости ЭП;
//		Этап - СправочникСсылка.ЭтапыЗаявки - этап на котором находится заявка
//	Возвращаемое значение:
//		Булево - необходима ли ЭП на данном этапе
Функция ТребуетсяПодпись(РольИсполнителя, Подразделение, Этап) Экспорт
	
	РезультатЗапроса = РезультатЗапросаПоИзмерениям(РольИсполнителя, Подразделение, Этап);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТребуетсяПодпись И ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	КонецЕсли;
	
КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция РезультатЗапросаПоИзмерениям(РольИсполнителя, Подразделение, Этап)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПравилаОбработкиЗаявокСотрудников.ТребуетсяПодпись КАК ТребуетсяПодпись,
				   |	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи,
	               |	ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения) КАК ПодразделениеЗаполнено,
	               |	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка) КАК РольИсполнителяЗаполнено
	               |ИЗ
	               |	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	               |ГДЕ
	               |	ПравилаОбработкиЗаявокСотрудников.Этап = &Этап
	               |	И (ПравилаОбработкиЗаявокСотрудников.Подразделение = &Подразделение
	               |			ИЛИ ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения))
	               |	И (ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = &РольИсполнителя
	               |			ИЛИ ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РольИсполнителяЗаполнено ВОЗР,
	               |	ПодразделениеЗаполнено ВОЗР";
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустыеПодразделения", БизнесПроцессыЗаявокСотрудников.ПараметрЗапросаПустыеПодразделения());
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ОбработчикиОбновленияИнформационнойБазы

#Область ЗаполнитьЭтапыИТребуемуюПодпись

Процедура ЗаполнитьЭтапыИТребуемуюПодпись(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя КАК РольИсполнителя,
	               |	ПравилаОбработкиЗаявокСотрудников.Подразделение КАК Подразделение,
	               |	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи
	               |ИЗ
	               |	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	               |ГДЕ
	               |	ПравилаОбработкиЗаявокСотрудников.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыЗаявокСотрудников.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	РольИсполнителя";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ТаблицаАктивныхЭтаповИРолейИсполнителя = ТаблицаАктивныхЭтаповИРолейИсполнителяОбновление();
	ПодписыватьЗаявкиСотрудника = Константы.УдалитьПодписыватьЗаявкиСотрудника.Получить();
	
	ОбработкаЗавершена = Истина;
	ВыборкаРольИсполнителя = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РольИсполнителя");
	Пока ВыборкаРольИсполнителя.Следующий() Цикл
		
		СтрокиАктивныхЭтапов = ТаблицаАктивныхЭтаповИРолейИсполнителя.НайтиСтроки(
			Новый Структура("РольИсполнителя", ВыборкаРольИсполнителя.РольИсполнителя));
				
		Выборка = ВыборкаРольИсполнителя.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаОбработкиЗаявокСотрудников");
				ЭлементБлокировки.УстановитьЗначение("РольИсполнителя", Выборка.РольИсполнителя);
				ЭлементБлокировки.УстановитьЗначение("Подразделение", Выборка.Подразделение);
				
				Попытка 
					Блокировка.Заблокировать();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Обновление информационной базы.Ошибка блокировки';
							|en = 'Updating the infobase.Lock error'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Предупреждение,
						,
						,
						НСтр("ru = 'РегистрСведений.ПравилаОбработкиЗаявокСотрудников';
							|en = 'РегистрСведений.ПравилаОбработкиЗаявокСотрудников'"));
					Продолжить;
				КонецПопытки;
				
				НаборЗаписей = РегистрыСведений.ПравилаОбработкиЗаявокСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.РольИсполнителя.Установить(Выборка.РольИсполнителя);
				НаборЗаписей.Отбор.Подразделение.Установить(Выборка.Подразделение);
				НаборЗаписей.Записать(Истина);
				
				Для Каждого СтрокаЭтапа Из СтрокиАктивныхЭтапов Цикл
					
					НаборЗаписей.Отбор.Этап.Установить(СтрокаЭтапа.Этап);
					
					ЗаписьНабораЗаписей = НаборЗаписей.Добавить();
					ЗаписьНабораЗаписей.РольИсполнителя = Выборка.РольИсполнителя;
					ЗаписьНабораЗаписей.Подразделение = Выборка.Подразделение;
					ЗаписьНабораЗаписей.Этап = СтрокаЭтапа.Этап;
					ЗаписьНабораЗаписей.СрокЗадачи = Выборка.СрокЗадачи;
					ЗаписьНабораЗаписей.ТребуетсяПодпись = ПодписыватьЗаявкиСотрудника;
					
					НаборЗаписей.Записать(Истина);
					НаборЗаписей.Очистить();
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОбработкаЗавершена = Ложь;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление информационной базы.Ошибка заполнения регистра Правила обработки заявок сотрудников';
						|en = 'Infobase update.Error when filling the Rules for processing employee requests register'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					Выборка.Ссылка,
					ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Если Не ОбработкаЗавершена И ПараметрыОбновления <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка заполнения правил обработки заявок сотрудников.';
								|en = 'An error occurred when filling the rules for processing employee requests.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаАктивныхЭтаповИРолейИсполнителяОбновление() Экспорт
	
	ТаблицаАктивныхЭтаповИРолейИсполнителя = Новый ТаблицаЗначений;
	ТаблицаАктивныхЭтаповИРолейИсполнителя.Колонки.Добавить("РольИсполнителя");
	ТаблицаАктивныхЭтаповИРолейИсполнителя.Колонки.Добавить("Этап");
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыЗаявокСотрудников.Ссылка КАК Ссылка,
	               |	ЭтапыЗаявокСотрудников.ТипЗаявки КАК ТипЗаявки,
	               |	ЭтапыЗаявокСотрудников.ВнешнийСервис КАК ВнешнийСервис
	               |ИЗ
	               |	Справочник.ЭтапыЗаявокСотрудников КАК ЭтапыЗаявокСотрудников
	               |ГДЕ
	               |	ЭтапыЗаявокСотрудников.Активен = ИСТИНА
	               |	И ЭтапыЗаявокСотрудников.ВнешнийСервис = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипЗаявки = Выборка.ТипЗаявки;
		Если Выборка.ВнешнийСервис Тогда
			ТипЗаявки = БизнесПроцессыЗаявокСотрудников.СоответствиеЗаявкиИТипаЗаявки()[ТипЗаявки];		
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаАктивныхЭтаповИРолейИсполнителя.Добавить();
		СтрокаТаблицы.РольИсполнителя = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗаявокПоТипамЗапросов()[ТипЗаявки];
		СтрокаТаблицы.Этап = Выборка.Ссылка;
		
	КонецЦикла;
	
	Возврат ТаблицаАктивныхЭтаповИРолейИсполнителя;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли