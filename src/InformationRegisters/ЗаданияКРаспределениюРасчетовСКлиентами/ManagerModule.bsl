#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Метод выводит в табличный документ предупреждение,
// если отчет формируетя по неактуальным данным
// Параметры:
//	Макет - ТабличныйДокумент - Макет, в который выводится предупреждение
//	ПараметрыРасчета - Структура - Свойства, в которых указаны данные о границах расчета.
Процедура ВывестиАктуальностьРасчета(Макет, ПараметрыРасчета) Экспорт
	Если ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ГраницаВзаиморасчетов") Тогда
		Если ЗначениеЗаполнено(ПараметрыРасчета.ГраницаВзаиморасчетов) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			Если Константы.АктуализироватьВзаиморасчетыПриФормированииОтчетов.Получить() Тогда
				ТекстПредупреждения = НСтр("ru = 'Распределение расчетов выполнено до %ДатаАктуальности%. 
										|Запущено задание по распределению расчетов с %ДатаНачалаРаспределения% (требуется распределить расчеты для %КоличествоДокументов%). 
										|После распределения Вам будет предложено переформировать отчет.';
										|en = 'Settlements are allocated up to %ДатаАктуальности%.
										|Settlements allocation job runs from %ДатаНачалаРаспределения% (settlements should be allocated for %КоличествоДокументов%). 
										|After that, you will be prompted to rebuild the report.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Распределение расчетов выполнено до %ДатаАктуальности%. 
										|Необходимо восстановить взаиморасчеты из формы закрытия месяца (пункт ""Формирование движений по расчетам с партнерами (контрагентами)"",
										|либо запустить регламентное задание ""Выполнение отложенных движений по расчетам с клиентами\поставщиками"".';
										|en = 'Settlements are allocated up to %ДатаАктуальности%.
										|Restore settlements from the month-end closing form (the ""Generate movements of settlements with partners (counterparties)"" item) 
										|or run the ""Execute deferred movements of with customers/vendors AR/AP"" scheduled job.'");
			КонецЕсли;
			ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаВзаиморасчетов - 1);
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения%", Формат(ПараметрыРасчета.ГраницаВзаиморасчетов, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов%", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КРасчету));
			ОбластьПредупреждение.Текст = ТекстПредупреждения;
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ПараметрыРасчета.Удалить("ГраницаВзаиморасчетов");
			ПараметрыРасчета.Удалить("НомерЗадания");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Метод возвращает значение константы "Номер задания",
// считанной при разделяемой блокировке.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к распределению расчетов с клиентами".
Функция ПолучитьНомерЗадания() Экспорт
	Возврат Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
КонецФункции

// Метод создает запись регистра на указанный период по всем аналитикам за месяц.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету.
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - организации, по которым необходимо зарегистрировать задание
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, МассивОрганизаций = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КРасчету.Организация КАК Организация,
	|	КРасчету.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И (&ВсеОрганизации
	|			ИЛИ Ключи.Организация В (&МассивОрганизаций))
	|		И Расчеты.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыОфлайн.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыОфлайн
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО РасчетыОфлайн.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		РасчетыОфлайн.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И (&ВсеОрганизации
	|			ИЛИ Ключи.Организация В (&МассивОрганизаций))
	|		И РасчетыОфлайн.Активность
	|	) КАК КРасчету
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодЗадания));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодЗадания));
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	Запрос.УстановитьПараметр("МассивОрганизаций", ?(ЗначениеЗаполнено(МассивОрганизаций), МассивОрганизаций, Новый Массив));

	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	
	// Запишем задания
	НачатьТранзакцию();
	Попытка
		НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
		Для Каждого ТекущаяАналитика Из ТаблицаАналитик Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьМенеджерЗаписи();
			НаборЗаписей.Месяц = НачалоМесяца(ПериодЗадания);
			НаборЗаписей.Организация = ТекущаяАналитика.Организация;
			НаборЗаписей.АналитикаУчетаПоПартнерам = ТекущаяАналитика.АналитикаУчетаПоПартнерам;
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать задания к распределению расчетов с клиентами';
				|en = 'Cannot save jobs for allocating customer AR/AP'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"АналитикаУчетаПоПартнерам.Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"АналитикаУчетаПоПартнерам.Организация");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНеактуальныхДокументов(НачалоРасчета, КонецРасчета, АналитикиРасчета = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КОЛИЧЕСТВО(Расчеты.Регистратор) КАК Количество
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоРасчета И &КонецРасчета
	|		И (Расчеты.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ИЛИ &ПоВсемАналитикам)
	|		И Расчеты.Активность
	|");
	
	Запрос.УстановитьПараметр("НачалоРасчета", НачалоРасчета);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикиРасчета.АналитикиУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", НЕ Значениезаполнено(АналитикиРасчета.АналитикиУчетаПоПартнерам));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	Возврат КоличествоДокументов;
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.14.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9712e912-d0b9-11e1-b37b-0050568458ce");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет задания к распределению расчетов с клиентами по части записей.';
									|en = 'Refills jobs for allocating customer AR/AP by some records.'");
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКРаспределениюРасчетовСКлиентами.Месяц КАК Месяц,
		|	ЗаданияКРаспределениюРасчетовСКлиентами.НомерЗадания КАК НомерЗадания,
		|	ЗаданияКРаспределениюРасчетовСКлиентами.Организация КАК Организация,
		|	ЗаданияКРаспределениюРасчетовСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ЗаданияКРаспределениюРасчетовСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ЗаданияКРаспределениюРасчетовСКлиентами.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК ЗаданияКРаспределениюРасчетовСКлиентами
		|ГДЕ
		|	ЗаданияКРаспределениюРасчетовСКлиентами.УдалитьОбъектРасчетов <> НЕОПРЕДЕЛЕНО";
		
	РегистрируемыеКортежи = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеКортежи, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Для каждого ЗаписьРегистра Из ОбновляемыеДанные Цикл
			
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(ЗаписьРегистра.Месяц);
		НаборЗаписей.Отбор.НомерЗадания.Установить(ЗаписьРегистра.НомерЗадания);
		НаборЗаписей.Отбор.Организация.Установить(ЗаписьРегистра.Организация);
		НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(ЗаписьРегистра.АналитикаУчетаПоПартнерам);
		НаборЗаписей.Отбор.ОбъектРасчетов.Установить(ЗаписьРегистра.ОбъектРасчетов);
		НаборЗаписей.Отбор.Документ.Установить(ЗаписьРегистра.Документ);
		
		НачатьТранзакцию();
		
		Попытка
				
			Блокировка = Новый БлокировкаДанных;
				
			// Блокировка регистра "Задания к распределению расчетов с клиентами".
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
			ЭлементБлокировки.УстановитьЗначение("Месяц", ЗаписьРегистра.Месяц);
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ЗаписьРегистра.НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("Организация", ЗаписьРегистра.Организация);
			ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", ЗаписьРегистра.АналитикаУчетаПоПартнерам);
			ЭлементБлокировки.УстановитьЗначение("ОбъектРасчетов", ЗаписьРегистра.ОбъектРасчетов);
			ЭлементБлокировки.УстановитьЗначение("Документ", ЗаписьРегистра.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
			Блокировка.Заблокировать();
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьРегистра, ЗаписьРегистра);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			ЗафиксироватьТранзакцию();
				
		Исключение
				
			ОтменитьТранзакцию();
				
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ЗаписьРегистра.ОбъектРасчетов);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
