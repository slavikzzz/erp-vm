#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр заданий.
//
// Параметры:
//  Сценарий	 - СправочникСсылка.СценарииТоварногоПланирования
//  ПланПроизводства	 - ДокументСсылка.ПланПроизводства	 - документ, для которого необходимо добавить задание.
//  Автозапуск		 - Булево							 - автоматический запуск расчет фоновым заданием.
//
Процедура ДобавитьЗадание(Сценарий, ПланПроизводства, Автозапуск = Истина) Экспорт
	
	Задания = Новый Массив();
	
	НовоеЗадание = Новый Структура();
	НовоеЗадание.Вставить("Состояние", Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяРасчет);
	НовоеЗадание.Вставить("Сценарий", Сценарий);
	НовоеЗадание.Вставить("ПланПроизводства", ПланПроизводства);
	Задания.Добавить(НовоеЗадание);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		НовоеЗадание = Новый Структура();
		НовоеЗадание.Вставить("Состояние", Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяОтражениеВБюджетировании);
		НовоеЗадание.Вставить("Сценарий", Сценарий);
		НовоеЗадание.Вставить("ПланПроизводства", ПланПроизводства);
		Задания.Добавить(НовоеЗадание);
	КонецЕсли;
	
	Идентификаторы = ПроизводствоСервер.ДобавитьЗаданиеВОчередь("ОчередьРасчетаПланаПроизводства", Задания);
	
	Если Автозапуск Тогда
		Приоритет = Новый Структура("ПланПроизводства", ПланПроизводства);
		ПроизводствоСервер.ЗапуститьЗаданиеОбработкиОчереди("ОчередьРасчетаПланаПроизводства", Приоритет, Идентификаторы);
	КонецЕсли;
	
КонецПроцедуры

// Запускает в фоновом режиме планирование производства
//
Процедура ЗапуститьЗадание() Экспорт
	
	ПроизводствоСервер.ЗапуститьЗаданиеОбработкиОчереди("ОчередьРасчетаПланаПроизводства");
	
КонецПроцедуры

// Проверяет активность расчета плана производства
// 
// Возвращаемое значение:
//  Булево - Истина, если обработка очереди заданий выполняется
//
Функция ВыполняетсяОбработкаОчереди() Экспорт
	
	Результат = ПроизводствоСервер.ВыполняетсяОбработкаОчереди("ОчередьРасчетаПланаПроизводства");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОбработки() Экспорт
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Обработчик", "РегистрыСведений.ОчередьРасчетаПланаПроизводства.ОбработатьЗадания");
	ПараметрыОбработки.Вставить("НеЗапускатьВФоне", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	ПараметрыОбработки.Вставить("ДополнительныеДанные", Новый Структура);
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ОчередьЗаданий(Отбор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчета.Состояние КАК Состояние,
	|	ОчередьРасчета.ПланПроизводства КАК ПланПроизводства,
	|	ОчередьРасчета.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ОчередьРасчета
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчета
	|ГДЕ
	|	ОчередьРасчета.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПланаПроизводства.ТребуетсяРасчет),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПланаПроизводства.ТребуетсяОтражениеВБюджетировании)
	|		)
	|	И &Отбор
	|	И НЕ ОчередьРасчета.ЕстьОшибки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКРасчету.Состояние        КАК Состояние,
	|	ЗаданияКРасчету.ПланПроизводства КАК ПланПроизводства,
	|	ЗаданияКРасчету.Сценарий КАК Сценарий,
	|	ЗаданияКРасчету.Идентификатор    КАК Идентификатор,
	|	ЗаданияКРасчету.ДеньРегистрации  КАК ДеньРегистрации,
	|	ЗаданияКРасчету.ЕстьОшибки       КАК ЕстьОшибки
	|ПОМЕСТИТЬ ОбрабатываемыеЗадания
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ЗаданияКРасчету
	|ГДЕ
	|	(ЗаданияКРасчету.Состояние, ЗаданияКРасчету.ПланПроизводства) В
	|			(ВЫБРАТЬ
	|				ОчередьРасчета.Состояние,
	|				ОчередьРасчета.ПланПроизводства
	|			ИЗ
	|				ОчередьРасчета КАК ОчередьРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетаПланаПроизводства.ТребуетсяОчисткаНеиспользуемыхДанных),
	|	ОчередьРасчета.ПланПроизводства,
	|	ОчередьРасчета.Сценарий,
	|	&ПустойИдентификатор,
	|	ДАТАВРЕМЯ(1,1,1),
	|	ЛОЖЬ
	|ИЗ
	|	ОчередьРасчета КАК ОчередьРасчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОчередьРасчета
	|");
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Отбор <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "ОчередьРасчета.ПланПроизводства = &ПланПроизводства");
		Запрос.УстановитьПараметр("ПланПроизводства", Отбор.ПланПроизводства);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивРезультатов[1].Выгрузить()[0].Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ВыбратьИзОчереди(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРасчета.Состояние               КАК Состояние,
	|	ОчередьРасчета.ПланПроизводства        КАК ПланПроизводства,
	|	ОчередьРасчета.Сценарий                КАК Сценарий,
	|	МАКСИМУМ(ОчередьРасчета.Идентификатор) КАК Идентификатор
	|ИЗ
	|	ОбрабатываемыеЗадания КАК ОчередьРасчета
	|ГДЕ 
	|	НЕ ОчередьРасчета.ЕстьОшибки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчета.Сценарий,
	|	ОчередьРасчета.ПланПроизводства,
	|	ОчередьРасчета.Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланПроизводства,
	|	Состояние");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Задание = Новый Структура("ПланПроизводства,Сценарий,Состояние,Идентификатор");
		ЗаполнитьЗначенияСвойств(Задание, Выборка);
		Результат.Добавить(Задание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьЗадания(Задание, ПропуститьЗадание = Ложь, ДополнительныеДанные = Неопределено) Экспорт
	
	НачалоРасчета = ЗаписатьНачалоОкончаниеРасчета(Задание.ПланПроизводства);
	
	Если Задание.Состояние = Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяРасчет Тогда
		
		ИмяОперации = НСтр("ru = 'Расчет (корректировка) плана производства';
							|en = 'Production plan calculation (adjustment)'");
		РасчетПланаПроизводства.Рассчитать(Задание.ПланПроизводства);
		
	ИначеЕсли Задание.Состояние = Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяОтражениеВБюджетировании Тогда
		
		ИмяОперации = НСтр("ru = 'Отражение в бюджетировании';
							|en = 'Record in budgeting'");
		Документы.ПланПроизводства.ОтразитьВБюджетировании(Задание.ПланПроизводства);
		
	ИначеЕсли Задание.Состояние = Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяОчисткаНеиспользуемыхДанных Тогда
		
		ИмяОперации = НСтр("ru = 'Очистка неиспользуемых данных';
							|en = 'Clear unused data'");
		РасчетПланаПроизводства.ОчиститьНеиспользуемыеДанные(Задание.ПланПроизводства);
		
	КонецЕсли;
	
	ОкончаниеРасчета = ЗаписатьНачалоОкончаниеРасчета(Задание.ПланПроизводства, Истина);
	
	ЗаписатьПротоколРасчетаВЖурналРегистрации(Задание.ПланПроизводства, ИмяОперации, НачалоРасчета, ОкончаниеРасчета);
	
КонецПроцедуры

Процедура ЗаписатьПротоколРасчетаВЖурналРегистрации(ПланПроизводства, ИмяОперации, НачалоРасчета, ОкончаниеРасчета)
	
	ИмяСобытия = РасчетПланаПроизводства.СобытиеЖурналаРегистрации();
	
	ВремяВСекундах = ОкончаниеРасчета - НачалоРасчета;
	
	Часы = Цел(ВремяВСекундах/3600);
	Минуты = Цел((ВремяВСекундах - Часы * 3600) / 60);
	Секунды = Макс(ВремяВСекундах - Часы * 3600 - Минуты * 60, 1);
	
	ПродолжительностьЧасы = ?(Часы = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 час';
																										|en = '%1 hour'"), Часы));
	ПродолжительностьМинуты = ?(Минуты = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 мин';
																											|en = '%1 min'"), Минуты));
	ПродолжительностьСекунды = ?(Секунды = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 сек';
																												|en = '%1 sec'"), Секунды));
	ПродолжительностьРасчета = ПродолжительностьЧасы + " " + ПродолжительностьМинуты + " " + ПродолжительностьСекунды;
	ПродолжительностьРасчета = СокрЛП(ПродолжительностьРасчета);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Завершено выполнение операции ""%1"", продолжительность %2';
									|en = 'Operation completed ""%1"", duration %2'"), ИмяОперации, ПродолжительностьРасчета);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.ОчередьРасчетаПланаПроизводства,
		ПланПроизводства,
		ТекстСообщения);

КонецПроцедуры

Процедура УдалитьЗадание(Задание, МенеджерВременныхТаблиц) Экспорт
	
	Если ЭтоВиртуальноеЗадание(Задание) Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводствоСервер.УдалитьЗадание("ОчередьРасчетаПланаПроизводства", Задание, МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Записать ошибку.
// 
// Параметры:
//  Задание - Структура - из:
//   * Состояние - ПеречислениеСсылка.СостоянияРасчетаПланаПроизводства
//   * ПланПроизводства - ДокументСсылка.ПланПроизводства
//   * Идентификатор - УникальныйИдентификатор
//   * Сценарий - СправочникСсылка.СценарииТоварногоПланирования
//  ПропуститьЗадание - Булево
//  ИнформацияОбОшибке - ИнформацияОбОшибке
Процедура ЗаписатьОшибку(Задание, ПропуститьЗадание, ИнформацияОбОшибке) Экспорт
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Не ЭтоВиртуальноеЗадание(Задание) Тогда
		
		Попытка
			
			Набор = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
			
			Набор.Отбор.Состояние.Установить(Задание.Состояние);
			Набор.Отбор.ПланПроизводства.Установить(Задание.ПланПроизводства);
			Набор.Отбор.Идентификатор.Установить(Задание.Идентификатор);
			
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				Запись.ЕстьОшибки = Истина;
				Запись.ТекстОшибки = ТекстОшибки;
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			ПропуститьЗадание = Истина;
			
		Исключение
			// дополнительных действий не требуется, сообщение об ошибке будет записано в журнал регистрации
		КонецПопытки;
		
	Иначе
		ПропуститьЗадание = Истина;
	КонецЕсли;
	
	ПроизводствоСервер.ЗаписатьОшибкуОбработкиОчередиЗаданий("ОчередьРасчетаПланаПроизводства", ТекстОшибки, Задание, Задание.ПланПроизводства);
	
КонецПроцедуры

Функция ЗаписатьНачалоОкончаниеРасчета(ПланПроизводства, РасчетЗавершен = Ложь)
	
	Набор = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияРасчетаПланаПроизводства.Рассчитывается);
	
	Если НЕ РасчетЗавершен Тогда
		Запись = Набор.Добавить();
		Запись.Состояние = Перечисления.СостоянияРасчетаПланаПроизводства.Рассчитывается;
		Запись.ПланПроизводства = ПланПроизводства;
	КонецЕсли;
	
	Набор.ОбменДанными.Загрузка = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	Набор.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция ЭтоВиртуальноеЗадание(Задание)
	
	Возврат (Задание.Состояние = Перечисления.СостоянияРасчетаПланаПроизводства.ТребуетсяОчисткаНеиспользуемыхДанных); // задание в базу данных не записывается
	
КонецФункции

#КонецОбласти

#КонецЕсли
