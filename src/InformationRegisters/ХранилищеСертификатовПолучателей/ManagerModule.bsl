#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет сертификат в хранилище сертификатов.
// 
// Параметры:
//   Сертификат - ДвоичныеДанные - файл сертификата.
//              - Строка - адрес файла сертификата во временном хранилище.
//   ТипХранилища - Строка - тип хранилища, в которое необходимо добавить сертификат, варианты: MY, AddressBook, CA, ROOT.
//   ПараметрыОперации - Структура, Неопределено - может содержать дополнительные сведения об выполняемой операции
//
// Возвращаемое значение
//	Строка, Неопределено - отпечаток сертификата в случае успеха
//
Функция ДобавитьСертификат(Сертификат, ТипХранилища, ПараметрыОперации = Неопределено) Экспорт

	Результат = Неопределено;
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		СертификатДвоичныеДанные = ПолучитьИзВременногоХранилища(Сертификат);
	Иначе
		СертификатДвоичныеДанные = Сертификат;
	КонецЕсли;
		
	СвойстваСертификата = ПолучитьСвойстваСертификата(СертификатДвоичныеДанные);
	
	НаборЗаписей = РегистрыСведений.ХранилищеСертификатовПолучателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипХранилища.Установить(ТипХранилища);
	НаборЗаписей.Отбор.Идентификатор.Установить(СвойстваСертификата.Идентификатор);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ТипХранилища  = ТипХранилища;
	НоваяЗапись.Идентификатор = СвойстваСертификата.Идентификатор;	
	НоваяЗапись.ДатаНачала    = СвойстваСертификата.ДатаНачала;
	НоваяЗапись.ДатаОкончания = СвойстваСертификата.ДатаОкончания;
	НоваяЗапись.СерийныйНомер = НРег(СтрЗаменить(СвойстваСертификата.СерийныйНомер, " ", ""));
	НоваяЗапись.Отпечаток     = НРег(СтрЗаменить(СвойстваСертификата.Отпечаток, " ", ""));
	Если СвойстваСертификата.Субъект.Свойство("CN") Тогда
		НоваяЗапись.Наименование  = СвойстваСертификата.Субъект.CN;
	КонецЕсли;

	НоваяЗапись.Сертификат = Новый ХранилищеЗначения(СвойстваСертификата, Новый СжатиеДанных(9));
	
	НаборЗаписей.Записать();
	
	Результат = НоваяЗапись.Идентификатор;
	
	Возврат Результат;
	
КонецФункции

// Получает сертификаты из хранилища.
// 
// Параметры:
//   ТипХранилища - Строка, ПеречислениеСсылка.ТипХранилищаСертификатов - тип хранилища, из которого необходимо получить
//                                                                сертификаты.
//                                                                Если не заполнено, то будут получены все сертификаты.
//   ПараметрыОперации - Структура, Неопределено - может содержать дополнительные сведения об выполняемой операции
//
// Возвращаемое значение:
//	 Массив - Массив из ФиксированнаяСтруктура - свойства сертификатов:
//    * Версия - Строка - версия сертификата.
//    * ДатаНачала - Дата - дата начала действия сертификата.
//    * ДатаОкончания - Дата - дата окончания действия сертификата.
//    * Издатель - ФиксированнаяСтруктура - информация об издателе сертификата:
//        ** CN - Строка - commonName 
//        ** O - Строка - organizationName 
//        ** OU - Строка - organizationUnitName 
//        ** C - Строка - countryName 
//        ** ST - Строка - stateOrProvinceName 
//        ** L - Строка - localityName 
//        ** E - Строка - emailAddress 
//        ** SN - Строка - surname 
//        ** GN - Строка - givenName 
//        ** T - Строка - title
//        ** STREET - Строка - streetAddress
//        ** OGRN - Строка - ОГРН
//        ** OGRNIP - Строка - ОГРНИП
//        ** INN - Строка - ИНН
//        ** SNILS - Строка - СНИЛС
//    * ИспользоватьДляПодписи - Булево - указывает, можно ли использовать данный сертификат для подписи.
//    * ИспользоватьДляШифрования - Булево - указывает, можно ли использовать данный сертификат для шифрования.
//    * Отпечаток - ДвоичныеДанные - содержит данные отпечатка. Вычисляется динамически, по алгоритму SHA-1.
//    * РасширенныеСвойства - ФиксированнаяСтруктура - расширенные свойства сертификата:
//        ** EKU - ФиксированныйМассив - Enhanced Key Usage.
//    * СерийныйНомер - ДвоичныеДанные - серийный номер сертификата.
//    * Субъект - ФиксированнаяСтруктура - информацию о субъекте сертификата. Состав см. Издатель.
//    * Сертификат - ДвоичныеДанные - файл сертификата в кодировке DER.
//    * Идентификатор - Строка - вычисляется по ключевым свойствам Издателя и серийному номеру по алгоритму SHA1.
//                               Используется для идентификации сертификата в сервисе криптографии.
//
Функция ПолучитьСертификаты(ТипХранилища = Неопределено, ПараметрыОперации = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеСертификатовПолучателей.Сертификат,
	|	ХранилищеСертификатовПолучателей.ТипХранилища
	|ИЗ
	|	РегистрСведений.ХранилищеСертификатовПолучателей КАК ХранилищеСертификатовПолучателей
	|ГДЕ
	|	(НЕ &ИспользоватьОтборПоТипуХранилища
	|			ИЛИ ХранилищеСертификатовПолучателей.ТипХранилища = &ТипХранилища)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТипХранилища", ТипХранилища);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоТипуХранилища", ЗначениеЗаполнено(ТипХранилища));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();	
	УстановитьПривилегированныйРежим(Ложь);
	
	Сертификаты = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Сертификаты.Добавить(Выборка.Сертификат.Получить());
	КонецЦикла;
		
	Возврат Сертификаты;
		
КонецФункции

// Выполняет поиск сертификата в хранилище получателей.
//
// Параметры:
//   ОтборСертификата - Структура - ключевые параметры сертификата, используемые для поиска:
//                            Отпечаток или пара СерийныйНомер и Издатель.
//     * Отпечаток - ДвоичныеДанные - отпечаток сертификат.
//                 - Строка - строковое представление отпечатка.
//     * СерийныйНомер - ДвоичныеДанные - серийный номер сертификата.
//                     - Строка - строковое представление серийного номера.
//     * Издатель - Структура - свойства издателя
//                - Строка - строковое представление издателя.
//   ПараметрыОперации - Структура, Неопределено - может содержать дополнительные сведения об выполняемой операции
//
// Возвращаемое значение: 
//   Неопределено, ФиксированнаяСтруктура - сертификат не найден или свойства найденного сертификата:
//    * Наименование - Строка - наименование сертификата.
//    * Версия - Строка - версия сертификата.
//    * ДатаНачала - Дата - дата начала действия сертификата.
//    * ДатаОкончания - Дата - дата окончания действия сертификата.
//    * Издатель - ФиксированнаяСтруктура - информация об издателе сертификата:
//        ** CN - Строка - commonName; 
//        ** O - Строка - organizationName; 
//        ** OU - Строка - organizationUnitName; 
//        ** C - Строка - countryName; 
//        ** ST - Строка - stateOrProvinceName; 
//        ** L - Строка - localityName; 
//        ** E - Строка - emailAddress; 
//        ** SN - Строка - surname; 
//        ** GN - Строка - givenName; 
//        ** T - Строка - title;
//        ** STREET - Строка - streetAddress;
//        ** OGRN - Строка - ОГРН;
//        ** OGRNIP - Строка - ОГРНИП;
//        ** INN - Строка -  ИНН;
//        ** SNILS - Строка - СНИЛС;
//           ...
//    * ИспользоватьДляПодписи - Булево - указывает, можно ли использовать данный сертификат для подписи.
//    * ИспользоватьДляШифрования - Булево - указывает, можно ли использовать данный сертификат для шифрования.
//    * Отпечаток - ДвоичныеДанные - содержит данные отпечатка. Вычисляется динамически, по алгоритму SHA-1.
//    * РасширенныеСвойства - ФиксированнаяСтруктура -  расширенные свойства сертификата:
//        ** EKU - ФиксированныйМассив - Enhanced Key Usage.
//    * СерийныйНомер - ДвоичныеДанные - серийный номер сертификата.
//    * Субъект - ФиксированнаяСтруктура - информацию о субъекте сертификата. Состав см. Издатель.
//    * Сертификат - ДвоичныеДанные - файл сертификата в кодировке DER.
//    * Идентификатор - Строка - вычисляется по ключевым свойствам Издателя и серийному номеру по алгоритму SHA1.
//                               Используется для идентификации сертификата в сервисе криптографии.
//
Функция НайтиСертификат(ОтборСертификата, ПараметрыОперации = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеСертификатовПолучателей.Сертификат КАК Сертификат,
	|	ХранилищеСертификатовПолучателей.ТипХранилища КАК ТипХранилища
	|ИЗ
	|	РегистрСведений.ХранилищеСертификатовПолучателей КАК ХранилищеСертификатовПолучателей
	|{ГДЕ
	|	ХранилищеСертификатовПолучателей.ТипХранилища КАК ТипХранилища,
	|	ХранилищеСертификатовПолучателей.Идентификатор КАК Идентификатор,
	|	ХранилищеСертификатовПолучателей.Наименование КАК Наименование,
	|	ХранилищеСертификатовПолучателей.ДатаНачала КАК ДатаНачала,
	|	ХранилищеСертификатовПолучателей.ДатаОкончания КАК ДатаОкончания,
	|	ХранилищеСертификатовПолучателей.Отпечаток КАК Отпечаток,
	|	ХранилищеСертификатовПолучателей.СерийныйНомер КАК СерийныйНомер}";
	
	ЗапросПоиска = Новый ПостроительОтчета;
	ЗапросПоиска.Текст = ТекстЗапроса;
	ЗапросПоиска.ЗаполнитьНастройки();
	
	Для Каждого СтрокаКлюча Из ОтборСертификата Цикл
		ИмяОтбора = СтрокаКлюча.Ключ;
		ЗначениеОтбора = СтрокаКлюча.Значение;
		
		Если ИмяОтбора = "Отпечаток" Тогда
			ЗначениеОтбора = НРег(СтрЗаменить(ЗначениеОтбора, " ", ""));
			
		ИначеЕсли ИмяОтбора = "СерийныйНомер" Тогда
			ЗначениеОтбора = НРег(СтрЗаменить(ЗначениеОтбора, " ", ""));
			
		ИначеЕсли ИмяОтбора = "Издатель" Тогда
			Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
				Издатель = РазобратьСтрокуИздателя(ЗначениеОтбора);
			Иначе
				Издатель = ЗначениеОтбора;
			КонецЕсли;
			
			СписокOID = Новый СписокЗначений;
			Для Каждого КлючЗначение Из Издатель Цикл
				СписокOID.Добавить(КлючЗначение.Значение, КлючЗначение.Ключ);
			КонецЦикла;
			
			ЗначениеОтбора = ВычислитьИдентификаторСертификата(ОтборСертификата.СерийныйНомер, СписокOID);
			ИмяОтбора = "Идентификатор";
		КонецЕсли;
		
		НовыйОтборЗапроса(ЗапросПоиска, ИмяОтбора, ЗначениеОтбора);
		
	КонецЦикла;
	
	Запрос = ЗапросПоиска.ПолучитьЗапрос();
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ОписаниеСертификата = Выборка.Сертификат.Получить();
		
		Если ТипЗнч(ОписаниеСертификата) = Тип("ФиксированнаяСтруктура") Тогда
			ОписаниеСертификата = Новый Структура(ОписаниеСертификата);
			ОписаниеСертификата.Вставить("Хранилище", Выборка.ТипХранилища);
			ОписаниеСертификата = Новый ФиксированнаяСтруктура(ОписаниеСертификата);
		ИначеЕсли ТипЗнч(ОписаниеСертификата) = Тип("Структура") Тогда
			ОписаниеСертификата.Вставить("Хранилище", Выборка.ТипХранилища);
			ОписаниеСертификата = Новый ФиксированнаяСтруктура(ОписаниеСертификата);
		Иначе
			ОписаниеСертификата = Неопределено;
		КонецЕсли;
		
		Возврат ОписаниеСертификата;
	КонецЕсли;
	
КонецФункции

// Получает основные свойства переданного сертификата.
// 
// Параметры:
//   Сертификат - ДвоичныеДанные - сертификат, свойства которого необходимо получить.
//
// Возвращаемое значение:
//	 ФиксированнаяСтруктура - свойства сертификата:
//    * Версия - Строка - версия сертификата.
//    * ДатаНачала - Дата - дата начала действия сертификата (UTC).
//    * ДатаОкончания - Дата - дата окончания действия сертификата (UTC).
//    * Издатель - ФиксированнаяСтруктура - информация об издателе сертификата:
//        ** CN - Строка - commonName 
//        ** O - Строка - organizationName; 
//        ** OU - Строка - organizationUnitName; 
//        ** C - Строка - countryName; 
//        ** ST - Строка - stateOrProvinceName; 
//        ** L - Строка - localityName; 
//        ** E - Строка - emailAddress; 
//        ** SN - Строка - surname; 
//        ** GN - Строка - givenName; 
//        ** T - Строка - title;
//        ** STREET - Строка - streetAddress;
//        ** OGRN - Строка - ОГРН;
//        ** OGRNIP - Строка - ОГРНИП;
//        ** INN - Строка - ИНН;
//        ** SNILS - Строка - СНИЛС;
//           ...
//    * ИспользоватьДляПодписи - Булево - указывает, можно ли использовать данный сертификат для подписи.
//    * ИспользоватьДляШифрования - Булево - указывает, можно ли использовать данный сертификат для шифрования.
//    * ОткрытыйКлюч - ДвоичныеДанные - содержит данные открытого ключа.
//    * Отпечаток - ДвоичныеДанные - содержит данные отпечатка. Вычисляется динамически, по алгоритму SHA-1.
//    * РасширенныеСвойства - ФиксированнаяСтруктура -  расширенные свойства сертификата:
//        ** EKU - ФиксированныйМассив - Enhanced Key Usage.
//    * СерийныйНомер - ДвоичныеДанные - серийный номер сертификата.
//    * Субъект - ФиксированнаяСтруктура - информацию о субъекте сертификата. Состав см. Издатель.
//    * Сертификат - ДвоичныеДанные - файл сертификата в кодировке DER.
//    * Идентификатор - Строка - вычисляется по ключевым свойствам Издателя и серийному номеру по алгоритму SHA1.
//                               Используется для идентификации сертификата в сервисе криптографии.
//
Функция ПолучитьСвойстваСертификата(Сертификат) Экспорт
	
	ДанныеСертификата = СертификатВКодировкеDER(Сертификат);

	Результат = Новый СертификатКриптографии(ДанныеСертификата);
	
	Свойства = Новый Структура;
	Свойства.Вставить("Версия"                   , Результат.Версия);
	Свойства.Вставить("ДатаНачала"            	 , Результат.ДатаНачала);
	Свойства.Вставить("ДатаОкончания"            , Результат.ДатаОкончания);
	Свойства.Вставить("Издатель"                 , ПреобразоватьOID(Результат.Издатель));
	Свойства.Вставить("ИспользоватьДляПодписи"   , Результат.ИспользоватьДляПодписи);
	Свойства.Вставить("ИспользоватьДляШифрования", Результат.ИспользоватьДляШифрования);
	Свойства.Вставить("ОткрытыйКлюч"             , Результат.ОткрытыйКлюч);
	Свойства.Вставить("Отпечаток"                , НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Результат.Отпечаток)));
	Свойства.Вставить("РасширенныеСвойства"      , РасширенныеСвойстваСертификата(Результат.РасширенныеСвойства));
	Свойства.Вставить("СерийныйНомер"            , НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Результат.СерийныйНомер)));
	Свойства.Вставить("Субъект"                  , ПреобразоватьOID(Результат.Субъект));
	Свойства.Вставить("Наименование"             , НаименованиеСертификата(Результат.Субъект));
	Свойства.Вставить("Сертификат"               , ДанныеСертификата);
	Свойства.Вставить("Идентификатор"            , ВычислитьИдентификаторСертификата(Результат.СерийныйНомер, Результат.Издатель));
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
		
КонецФункции

// Обработчик обновления БРО 1.2.2.0
Процедура ПеренестиОблачныеСертификаты(ПараметрыОбновления = Неопределено) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
	
	Если МодульЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно() Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеСертификатов.Сертификат КАК Сертификат,
		|	ХранилищеСертификатов.ТипХранилища КАК ТипХранилища
		|ИЗ
		|	РегистрСведений.ХранилищеСертификатов КАК ХранилищеСертификатов
		|ГДЕ
		|	ХранилищеСертификатов.ТипХранилища <> &ТипХранилища";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТипХранилища", Перечисления.ТипХранилищаСертификатов.ПерсональныеСертификаты);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();	
		УстановитьПривилегированныйРежим(Ложь);
		
		Сертификаты = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СвойстваСертификата = Выборка.Сертификат.Получить();
			ТипХранилища = "AddressBook";
			Если Выборка.ТипХранилища = Перечисления.ТипХранилищаСертификатов.КорневыеСертификаты Тогда
				ТипХранилища = "ROOT";
			ИначеЕсли Выборка.ТипХранилища = Перечисления.ТипХранилищаСертификатов.СертификатыПолучателей Тогда
				ТипХранилища = "AddressBook";
			ИначеЕсли Выборка.ТипХранилища = Перечисления.ТипХранилищаСертификатов.СертификатыУдостоверяющихЦентров Тогда
				ТипХранилища = "CA";
			КонецЕсли;
			КриптографияЭДКО.ДобавитьСертификатПолучателя(СвойстваСертификата.Сертификат, ТипХранилища);
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные сертификата в кодировке DER
// 
// Параметры:
// 	Сертификат - ДвоичныеДанные - данные сертификата
// 	ПроверочныйСимвол - Строка - 
// Возвращаемое значение:
// 	ДвоичныеДанные - данные сертификата в кодировке DER
// 
Функция СертификатВКодировкеDER(Сертификат, ПроверочныйСимвол = "") Экспорт
	
	Попытка
		СертификатТекст = ПолучитьСтрокуИзДвоичныхДанных(Сертификат);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Хранилище сертификатов получателей.Преобразование кодировки';
				|en = 'Хранилище сертификатов получателей.Преобразование кодировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если СтрНайти(СертификатТекст, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		СертификатТекст = СтрЗаменить(СертификатТекст, "-----BEGIN CERTIFICATE-----" + ПроверочныйСимвол, "");
		СертификатТекст = СтрЗаменить(СертификатТекст, ПроверочныйСимвол + "-----END CERTIFICATE-----", "");
		Возврат Base64Значение(СертификатТекст);
	Иначе		
		Возврат Сертификат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НовыйОтборЗапроса(ЗапросПоиска, ОписаниеОтбора, ЗначениеОтбора)
	
	НашлиПоле = ЗапросПоиска.ДоступныеПоля.Найти(ОписаниеОтбора);
	Если НашлиПоле = Неопределено ИЛИ НЕ НашлиПоле.Отбор Тогда
		Возврат;
	КонецЕсли;
	
	НашлиОтбор = ЗапросПоиска.Отбор.Найти(ОписаниеОтбора);
	Если НашлиОтбор = Неопределено Тогда
		НовыйОтбор = ЗапросПоиска.Отбор.Добавить(ОписаниеОтбора);
	Иначе
		НовыйОтбор = НашлиОтбор;
	КонецЕсли;
	НовыйОтбор.Использование = Истина;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
	Иначе
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли;
	НовыйОтбор.Значение = ЗначениеОтбора;
	
КонецПроцедуры

Функция РазобратьСтрокуИздателя(ИздательСтрокой)
	
	Составляющие = Новый Соответствие;
	
	ПодстрокаДляРазбора = ИздательСтрокой;
	
	ИндексРавно = СтрНайти(ПодстрокаДляРазбора, "=", НаправлениеПоиска.СКонца);
	Пока ИндексРавно Цикл
		Значение = Сред(ПодстрокаДляРазбора, ИндексРавно + 1);
		Если Прав(Значение, 1) = "," Тогда
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Значение);
		КонецЕсли;
		
		ПодстрокаДляРазбора = Лев(ПодстрокаДляРазбора, ИндексРавно - 1);
		
		ИндексЗапятая = СтрНайти(ПодстрокаДляРазбора, ",", НаправлениеПоиска.СКонца);
		Если ИндексЗапятая Тогда
			Ключ = Сред(ПодстрокаДляРазбора, ИндексЗапятая + 1);
			ПодстрокаДляРазбора = Лев(ПодстрокаДляРазбора, ИндексЗапятая);
		Иначе
			Ключ = ПодстрокаДляРазбора;	
		КонецЕсли;
		ИндексРавно = СтрНайти(ПодстрокаДляРазбора, "=", НаправлениеПоиска.СКонца);
		
		Составляющие.Вставить(СокрЛП(Ключ), СокрЛП(Значение));
	КонецЦикла;
	
	Возврат Составляющие;	
	
КонецФункции

Функция РасширенныеСвойстваСертификата(СписокOID)
	
	EKU = Новый Массив;
	Для Каждого OID Из СписокOID Цикл
		Имя = ПолучитьИмяПоOID(OID, "");
		Если ЗначениеЗаполнено(Имя) Тогда
			EKU.Добавить(СтрШаблон("%1 (%2)", Имя, OID));
		Иначе
			EKU.Добавить(OID);
		КонецЕсли;
	КонецЦикла;

	EKU = Новый ФиксированныйМассив(EKU);
	
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("EKU", EKU));
	
КонецФункции

Функция НаименованиеСертификата(СписокOID)
	
	Для Каждого ЭлементOID Из СписокOID Цикл
		Если ЭлементOID.Ключ = "OID2_5_4_3" Тогда
			Возврат ЭлементOID.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции

Функция ПреобразоватьOID(СписокOID)
	
	Свойства = Новый Структура;
	Для Каждого СтрокаКлюча Из СписокOID Цикл
		Если СтрНайти(СтрокаКлюча.Ключ, "OID") = 1 Тогда
			ПредставлениеИД = Сред(СтрокаКлюча.Ключ, 4);
			ПредставлениеИД = СтрЗаменить(ПредставлениеИД, "_", ".");
			Свойства.Вставить(ПолучитьИмяПоOID(ПредставлениеИД), СтрокаКлюча.Значение);
		Иначе
			Свойства.Вставить(СтрокаКлюча.Ключ, СтрокаКлюча.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ПолучитьИмяПоOID(OID, ИмяПоУмолчанию = Неопределено)
	
	Имя = СоответствиеOIDИмя().Получить(OID);
	Если Имя = Неопределено Тогда
		Если ИмяПоУмолчанию <> Неопределено Тогда
			Имя = ИмяПоУмолчанию;
		Иначе
			Имя = "_" + СтрЗаменить(OID, ".", "_");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция СоответствиеOIDИмя()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("2.5.4.3", "CN"); // commonName
	СоответствиеOID.Вставить("2.5.4.6", "C"); // countryName
	СоответствиеOID.Вставить("2.5.4.8", "ST"); // stateOrProvinceName
	СоответствиеOID.Вставить("2.5.4.7", "L"); // localityName
	СоответствиеOID.Вставить("2.5.4.9", "STREET"); // streetAddress
	СоответствиеOID.Вставить("2.5.4.10", "O"); // organizationName
	СоответствиеOID.Вставить("2.5.4.11", "OU"); // organizationUnitName
	СоответствиеOID.Вставить("2.5.4.12", "T"); // title
	СоответствиеOID.Вставить("1.2.643.100.1", "OGRN"); // ОГРН
	СоответствиеOID.Вставить("1.2.643.100.5", "OGRNIP"); // ОГРНИП
	СоответствиеOID.Вставить("1.2.643.100.3", "SNILS"); // СНИЛС
	СоответствиеOID.Вставить("1.2.643.3.131.1.1", "INN"); // ИНН
	СоответствиеOID.Вставить("1.2.840.113549.1.9.1", "E"); // emailAddress	
	СоответствиеOID.Вставить("2.5.4.4", "SN"); // surname
	СоответствиеOID.Вставить("2.5.4.42", "GN"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Функция СоответствиеИмяOID()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("CN", "2.5.4.3"); // commonName
	СоответствиеOID.Вставить("C", "2.5.4.6"); // countryName
	СоответствиеOID.Вставить("ST", "2.5.4.8"); // stateOrProvinceName
	СоответствиеOID.Вставить("L", "2.5.4.7"); // localityName
	СоответствиеOID.Вставить("STREET", "2.5.4.9"); // streetAddress
	СоответствиеOID.Вставить("O", "2.5.4.10"); // organizationName
	СоответствиеOID.Вставить("OU", "2.5.4.11"); // organizationUnitName
	СоответствиеOID.Вставить("T", "2.5.4.12"); // title
	СоответствиеOID.Вставить("OGRN", "1.2.643.100.1"); // ОГРН
	СоответствиеOID.Вставить("OGRNIP", "1.2.643.100.5"); // ОГРНИП
	СоответствиеOID.Вставить("SNILS", "1.2.643.100.3"); // СНИЛС
	СоответствиеOID.Вставить("INN", "1.2.643.3.131.1.1"); // ИНН
	СоответствиеOID.Вставить("E", "1.2.840.113549.1.9.1"); // emailAddress	
	СоответствиеOID.Вставить("SN", "2.5.4.4"); // surname
	СоответствиеOID.Вставить("GN", "2.5.4.42"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Функция ВычислитьИдентификаторСертификата(СерийныйНомер, Издатель)
	
	СоответствиеИмяOID = СоответствиеИмяOID();
	НовыйИздатель = Новый Соответствие;
	
	Для Каждого Элемент Из Издатель Цикл
		Если ТипЗнч(Издатель) = Тип("СписокЗначений") Тогда
			КлючСтроки = Элемент.Представление;
			ЗначениеСтроки = Элемент.Значение;
		Иначе	
			КлючСтроки = Элемент.Ключ;
			ЗначениеСтроки = Элемент.Значение;
		КонецЕсли;
		
		Если СтрНайти(КлючСтроки, "OID") = 1 Тогда
			ПредставлениеИД = Сред(КлючСтроки, 4);
		Иначе
			ПредставлениеИД = КлючСтроки;
		КонецЕсли;	
		Если СоответствиеИмяOID.Получить(ПредставлениеИД) <> Неопределено Тогда
			НовыйИздатель.Вставить(СоответствиеИмяOID.Получить(ПредставлениеИД), ЗначениеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(СерийныйНомер, НовыйИздатель);
	
КонецФункции

Функция ИдентификаторСертификата(СерийныйНомер, СписокOID)
	
	Ключи = СтрРазделить("2.5.4.3,2.5.4.4,2.5.4.6,2.5.4.7,2.5.4.8,2.5.4.10,2.5.4.11,2.5.4.12,2.5.4.42,1.2.840.113549.1.9.1", ",");
	Свойства = Новый СписокЗначений;
	Для Каждого Элемент Из СписокOID Цикл
		Если Ключи.Найти(Элемент.Ключ) <> Неопределено Тогда
			Свойства.Добавить(Элемент.Значение, Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	СерийныйНомерСтрока = НРег(СтрЗаменить(СерийныйНомер, " ", ""));
	
	Свойства.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Свойства.ВыгрузитьЗначения();
	
	МассивЗначений.Добавить(СерийныйНомерСтрока);
	
	ИздательИСерийныйНомер = СтрСоединить(МассивЗначений, "#");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ИздательИСерийныйНомер);
	
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));	
	
КонецФункции

#КонецОбласти

#КонецЕсли