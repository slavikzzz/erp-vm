#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		ОтборОрганизация = Параметры.Отбор.Организация;
		ЭлементОтбораОрганизация = ЭлементОтбораСпискаПоИмени(Список, "Организация");
		Если ЭлементОтбораОрганизация <> Неопределено Тогда
			ЭлементОтбораОрганизация.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		Элементы.ОтборОрганизация.Видимость = Истина;
	Иначе
		ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
		Элементы.ОтборОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	// Настроим элементы отбора по региону
	// Не используем отбор через пользовательские настройки, т.к. список выбора региона настраивается специальной процедурой 
	Если Параметры.Отбор.Свойство("КодРегиона") Тогда
		ОтборКодРегиона              = Параметры.Отбор.КодРегиона;
		ОтборКодРегионаИспользование = Истина;
	КонецЕсли;
	Справочники.РегистрацииВНалоговомОргане.ЗаполнитьСписокВыбораРегиона(Элементы.ОтборКодРегиона.СписокВыбора, Истина);
		
	Если НЕ ОтборКодРегионаИспользование Тогда
		
		// Устанавливаем значение отбора, но не включаем сам отбор
		КодРегионаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОрганизация, "РегистрацияВНалоговомОргане.КодРегиона");
		Если ЗначениеЗаполнено(КодРегионаОрганизации) Тогда
			ОтборКодРегиона = КодРегионаОрганизации;
		ИначеЕсли ЗначениеЗаполнено(Элементы.ОтборКодРегиона.СписокВыбора) Тогда
			ОтборКодРегиона = Элементы.ОтборКодРегиона.СписокВыбора[0];
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПослеУдаления(Элемент)
	
	ПараметрыОповещения = Новый Структура;
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыОповещения.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;	
	Оповестить("Запись_НастройкиНалогаНаПрибыльГруппыОбособленныхПодразделений", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКодРегионаИспользованиеПриИзменении(Элемент)
	
	УстановитьОтборПоРегиону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКодРегионаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборКодРегиона) Тогда
		ОтборКодРегионаИспользование = Истина;
	КонецЕсли;
	
	УстановитьОтборПоРегиону();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтборПоРегиону()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"КодРегиона",
		ОтборКодРегиона,
		,
		,
		ОтборКодРегионаИспользование);
				
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Настроим видимость колонки региона в списке
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаименованиеРегиона");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборКодРегионаИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Возвращает элемент пользовательского отбора динамического списка, 
// соответствующий отбору, заданному в конфигураторе с указанным именем.
// Соответствие определяется по совпадению идентификаторов настройки.
//
// Параметры
//  Список - ДинамическийСписок - динамический список, для которого ищется элемент отбора.
//  ИмяОтбора - Строка - имя отбора, заданное в конфигураторе для элемента настроек динамического списка.
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - найденный элемент пользовательского отбора.
//  Неопределено - если элемент пользовательского отбора не найден.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭлементОтбораСпискаПоИмени(Список, ИмяОтбора)

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отборы[0];
	КонецЕсли;
	
КонецФункции

#КонецОбласти
