#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// При записи аналитики учета (см. тип значения соответствующего измерения регистра), проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету и аналитике записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		Аналитика учета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//		ВидыСчета - Массив - ПеречислениеСсылка.ВидыСчетовРеглУчета - массив счетов, записи по которым очищаются;
//		Организация - СправочникСсылка.Организации - организация, записи по которой очищаются (если задана);
//		МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады)- место учета, записи по которому очищаются (если задано).
//
Процедура ОчиститьПриЗаписиАналитикиУчета(АналитикаУчета, ВидыСчета, Организация = Неопределено, МестоУчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("АналитикаУчета", АналитикаУчета);
	СтруктураИзмерений.Вставить("Организация", Организация);
	СтруктураИзмерений.Вставить("МестоУчета", МестоУчета);
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
		Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
			Если ЗначениеЗаполнено(ЭлементИзмерения.Значение) Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|ГДЕ
		|	(&Организация = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.Организация = &Организация)
		|	И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = &АналитикаУчета
		|	И (&МестоУчета = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.МестоУчета = &МестоУчета)
		|	И СчетаРеглУчетаТребующиеНастройки.ВидСчета В(&ВидыСчета)";
		Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
			Запрос.УстановитьПараметр(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыСчета", ВидыСчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
				НаборЗаписей.Отбор[ЭлементИзмерения.Ключ].Установить(Выборка[ЭлементИзмерения.Ключ]);
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// При записи регистра порядка отражения счетов учета, проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету, аналитике, организации и месту учета записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		ВременнаяТаблицаНовыхДанныхРегистра - МенеджерВременныхТаблиц, содержит таблицу:
//			* ДанныеЗаполненныхСчетовРегистра со следующими данными:
//				** Организация - СправочникСсылка.Организации - организация, записи по которой очищаются;
//				** МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады) - место учета, записи по которому очищаются;
//				** АналитикаУчета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//				** ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи по которому очищаются;
//
Процедура ОчиститьПриЗаписиРегистра(ВременнаяТаблицаНовыхДанныхРегистра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаНовыхДанныхРегистра;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.Организация = ДанныеЗаполненныхСчетовРегистра.Организация
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.МестоУчета = ДанныеЗаполненныхСчетовРегистра.МестоУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.Организация = ДанныеЗаполненныхСчетовРегистра.Организация
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|			И ДанныеЗаполненныхСчетовРегистра.МестоУчета = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО ДанныеЗаполненныхСчетовРегистра.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|			И ДанныеЗаполненныхСчетовРегистра.МестоУчета = НЕОПРЕДЕЛЕНО";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("АналитикаУчета", Выборка.АналитикаУчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", Выборка.ВидСчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировкиДанных.УстановитьЗначение("МестоУчета", Выборка.МестоУчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналитикаУчета.Установить(Выборка.АналитикаУчета);
			НаборЗаписей.Отбор.ВидСчета.Установить(Выборка.ВидСчета);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.МестоУчета.Установить(Выборка.МестоУчета);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Очистка записей регистра счетов регл. учета, требующих настройки';
							|en = 'Clear register records of compl. accounting accounts requiring configuration'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, НаборЗаписей.Метаданные(), , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Для каждого из вида счета соответствия, очищает текущие записи регистра по данному счету и записывает новые,
// находящиеся в соответствующем значении соответствия.
//
//	Параметры:
//		СоответствиеВидовСчетовИРезультатовЗапроса - Соответствие из КлючИЗначение - Соответствие, со следующими значениями:
//			* Ключ - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи которого будут очищаться;
//			* Значение - РезультатЗапроса - записи, которыми будет заполняться набор с отбором по виду счета (колонки должны соответствовать измерениям регистра);
//		ИмяСобытия - Строка - если в процессе заполнения возникнет ошибка, в журнал регистрации она запишется с этим именем события.
//
Процедура ЗаполнитьЗаписиРегистраПоВидамСчетов(ВременнаяТаблицаВидовСчетовТребующихНастройки, ИмяСобытия = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаВидовСчетовТребующихНастройки;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыСчетовРеглУчета.Ссылка КАК ВидСчета,
		|	ВидыСчетовТребующиеНастройки.Организация КАК Организация,
		|	ВидыСчетовТребующиеНастройки.АналитикаУчета КАК АналитикаУчета,
		|	ВидыСчетовТребующиеНастройки.МестоУчета КАК МестоУчета,
		|	НЕ ВидыСчетовТребующиеНастройки.ВидСчета ЕСТЬ NULL КАК Требуется
		|ИЗ
		|	Перечисление.ВидыСчетовРеглУчета КАК ВидыСчетовРеглУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСчетовТребующиеНастройки КАК ВидыСчетовТребующиеНастройки
		|		ПО ВидыСчетовРеглУчета.Ссылка = ВидыСчетовТребующиеНастройки.ВидСчета
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организация),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитикаУчета),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МестоУчета),
		|	МАКСИМУМ(Требуется)
		|ПО
		|	Ссылка";
		ВыборкаВидаСчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидаСчета.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", ВыборкаВидаСчета.ВидСчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписейРегистра = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.ВидСчета.Установить(ВыборкаВидаСчета.ВидСчета);
			
			Выборка = ВыборкаВидаСчета.Выбрать();
			
			Если ВыборкаВидаСчета.Требуется Тогда
				Пока Выборка.Следующий() Цикл
					
					НоваяЗапись = НаборЗаписейРегистра.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
					
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписейРегистра.Записать();
			
		КонецЦикла;
			
			ЗафиксироватьТранзакцию();
	
	Исключение
	
		ОтменитьТранзакцию();
		Если ИмяСобытия = Неопределено Тогда
			ИмяСобытия = НСтр("ru = 'Заполнение записей регистра счетами регл. учета, требующих настройки';
								|en = 'Fill out register records with compl. accounting accounts which require setting'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

// Возвращает список требующихся измерений регистра для указанного вида счета,
// некоторые виды счетов не зависят от места учета или от аналитиики.
//	Параметры:
//		ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета для которого необходимо получить список измерений;
//		ТолькоОбязательные - Булево - содержит признак, определяющий возвращать все измерения возможные
//		или только те, которые требуют обязательного заполнения.
//	Возвращаемое значение:
//		Массив - массив с типом значений "Строка" - список имен измерений.
//
Функция СписокИзмеренийРегистраПоВидуСчета(ВидСчета, ТолькоОбязательные = Ложь) Экспорт
	
	ИмяВидаСчета = XMLСтрока(ВидСчета);
	РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяВидаСчета);
	
	МассивВозврата = Новый Массив;
	
	Если НастройкаСчетовУчетаКлиентСервер.РазделыУчетаНеЗависящиеОтОрганизации().Найти(РазделУчета) = Неопределено Тогда
		МассивВозврата.Добавить("Организация");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета).Используется
		И (Не ТолькоОбязательные ИЛИ НастройкаСчетовУчетаКлиентСервер.РазделыУчетаСОбязательнойАналитикой().Найти(РазделУчета) <> Неопределено) Тогда
		МассивВозврата.Добавить("АналитикаУчета");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаСервер.НастройкиМестаУчетаПоРазделуУчета(РазделУчета).Используется И Не ТолькоОбязательные Тогда
		МассивВозврата.Добавить("МестоУчета");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаКлиентСервер.ИспользуетсяДолгосрочныйСчет(ИмяВидаСчета) Тогда
		МассивВозврата.Добавить("Долгосрочный");
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция возвращает список всех настраиваемых видов счетов.
//
// Возвращаемое значение:
//	Массив - массив значений типа ПеречислениеСсылка.ВидыСчетовРеглУчета;
//
Функция НастраиваемыеВидыСчетов(Знач РазделыУчета = Неопределено) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если РазделыУчета = Неопределено Тогда
		СписокВсехРазделов = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета();
		РазделыУчета = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокВсехРазделов);
	ИначеЕсли ТипЗнч(РазделыУчета) = Тип("Строка") Тогда
		РазделыУчета = СтрРазделить(РазделыУчета, ",");
	КонецЕсли;
	
	Если ТипЗнч(РазделыУчета) <> Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Передан не верный параметр';
								|en = 'An invalid parameter was transfered'");
	КонецЕсли;
	
	Для каждого РазделУчета Из РазделыУчета Цикл
		ВидыСчетов = НастройкаСчетовУчетаСервер.ВидыСчетовРеглУчетаПоРазделуУчета(РазделУчета, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ВидыСчетов);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
