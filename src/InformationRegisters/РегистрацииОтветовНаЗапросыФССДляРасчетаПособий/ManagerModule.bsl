///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ИсходящийДокумент)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ИсходящийДокумент)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИсходящийДокумент - ДокументСсылка.ОтветНаЗапросФССДляРасчетаПособия - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИсходящийДокумент) Экспорт
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий");
		ЭлементБлокировки.УстановитьЗначение("ИсходящийДокумент", ИсходящийДокумент);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходящийДокумент.Установить(ИсходящийДокумент);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить регистрацию сведений для расчета пособия ФСС %1 по причине: %2';
				|en = 'Cannot change registration of the information for SSF allowance calculation %1 due to: %2'"),
			ИсходящийДокумент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий,
			ИсходящийДокумент,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.РегистрацииОтветовНаЗапросыФССДляРасчетаПособия
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.163";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("19260316-4630-11ed-810e-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьНомераРеестровВСлучаеНесколькихОтветов";
	Обработчик.Комментарий     = НСтр("ru = 'Проверка наличия информации необходимой для перерасчета проактивно назначенного пособия в случае наличия нескольких ответов ФСС (и заполнение, при нобходимости).';
										|en = 'Проверка наличия информации необходимой для перерасчета проактивно назначенного пособия в случае наличия нескольких ответов ФСС (и заполнение, при нобходимости).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.196";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9149a676-08cb-11f0-8151-a842a16ef6f5");
	Обработчик.Процедура       = "РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьИнформациюОПриеме";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение информации о приеме в регистрациях ответов на запросы СФР для расчета пособий (СЭДО).';
										|en = 'Заполнение информации о приеме в регистрациях ответов на запросы СФР для расчета пособий (СЭДО).'");
	
КонецПроцедуры

// Заполнение информации о перерасчете в документах ""Входящий запрос ФСС для расчета пособия"".
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьНомераРеестровВСлучаеНесколькихОтветов(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК ИдентификаторСообщения,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Страхователь,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВЫБОР
	|		КОГДА Регистрации.Страхователь ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Регистрации.Страхователь = ВходящиеСообщенияСЭДОФСС.Организация
	|			ТОГДА 1
	|		КОГДА Регистрации.ГоловнаяОрганизация = Страхователи.ГоловнаяОрганизация
	|			ТОГДА 2
	|		КОГДА Регистрации.Страхователь > ВходящиеСообщенияСЭДОФСС.Организация
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет,
	|	ЕСТЬNULL(Регистрации.ИсходящийДокумент, НЕОПРЕДЕЛЕНО) КАК РегистрацияИсходящийДокумент,
	|	ЕСТЬNULL(Регистрации.РегистрацияНомерРеестра, """") КАК РегистрацияНомерРеестра
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрации
	|		ПО ВходящиеСообщенияСЭДОФСС.Идентификатор = Регистрации.РегистрацияИдентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Страхователи
	|		ПО ВходящиеСообщенияСЭДОФСС.Организация = Страхователи.Ссылка
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Тип = 105
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь КАК Страхователь,
	|	МИНИМУМ(ИсходныеДанные.Приоритет) КАК МинимальныйПриоритет
	|ПОМЕСТИТЬ МинимальныеПриоритеты
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь КАК Страхователь,
	|	ИсходныеДанные.Содержимое КАК Содержимое,
	|	ИсходныеДанные.РегистрацияИсходящийДокумент КАК РегистрацияИсходящийДокумент
	|ИЗ
	|	МинимальныеПриоритеты КАК МинимальныеПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеДанные КАК ИсходныеДанные
	|		ПО МинимальныеПриоритеты.ИдентификаторСообщения = ИсходныеДанные.ИдентификаторСообщения
	|			И МинимальныеПриоритеты.Страхователь = ИсходныеДанные.Страхователь
	|			И МинимальныеПриоритеты.МинимальныйПриоритет = ИсходныеДанные.Приоритет
	|ГДЕ
	|	ИсходныеДанные.РегистрацияНомерРеестра = """"""""";
	
	НовыеИдентификаторы = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстXML = Выборка.Содержимое.Получить();
		Если Не ЗначениеЗаполнено(ТекстXML) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
		УзелНомерРеестра = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "registryNum");
		НомерРеестраНайденный = СериализацияБЗК.СтрокаИзXML(УзелНомерРеестра);
		Если Не ЗначениеЗаполнено(НомерРеестраНайденный) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.РегистрацияИсходящийДокумент) Тогда
			НовыеИдентификаторы.Добавить(Выборка.ИдентификаторСообщения);
			Продолжить;
		КонецЕсли;
		Набор = НачатьЗаписьНабора(Выборка.РегистрацияИсходящийДокумент);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			НовыеИдентификаторы.Добавить(Выборка.ИдентификаторСообщения);
			Продолжить;
		КонецЕсли;
		Набор[0].РегистрацияНомерРеестра = НомерРеестраНайденный;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
	
	Если НовыеИдентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(Неопределено, , НовыеИдентификаторы);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполнение информации о приеме.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьИнформациюОПриеме(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания >= ДАТАВРЕМЯ(2024, 12, 1)
	|	И ВходящиеСообщенияСЭДОФСС.Тип = 105";
	
	НовыеИдентификаторы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстXML = Выборка.Содержимое.Получить();
		Если ТипЗнч(ТекстXML) <> Тип("Строка") Или ПустаяСтрока(ТекстXML) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ТекстXML, "responseInfo") = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовыеИдентификаторы.Добавить(Выборка.ИдентификаторСообщения);
	КонецЦикла;
	
	Если НовыеИдентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(Неопределено, , НовыеИдентификаторы);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументу(ИсходящийДокументОбъект, РезультатОтправки = Неопределено) Экспорт
	// Регистрация является продолжением текущего документа.
	// Но если документ - новый, то поле "Ссылка" может быть не заполнено.
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИсходящийДокументОбъект.Ссылка);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	Запись.ИсходящийДокумент = ИсходящийДокументОбъект.Ссылка;
	Запись.ФизическоеЛицо    = ИсходящийДокументОбъект.ФизическоеЛицо;
	
	Если РезультатОтправки <> Неопределено Тогда
		Запись.Страхователь                = РезультатОтправки.Страхователь;
		Запись.ГоловнаяОрганизация         = РезультатОтправки.ГоловнаяОрганизация;
		Запись.ОтправленОператору          = РезультатОтправки.ОтправленоОператору;
		Запись.Доставлен                   = РезультатОтправки.ДоставленоФонду;
		Запись.ДатаОтправкиОператору       = РезультатОтправки.ДатаОтправкиОператору;
		Запись.ДатаОтправки                = РезультатОтправки.ДатаОтправкиФонду;
		Запись.ДоставкаТекстОшибки         = РезультатОтправки.ТекстОшибки;
		Запись.ДоставкаИдентификатор       = РезультатОтправки.ИдентификаторСообщения;
		Запись.ДоставкаИдентификаторПакета = РезультатОтправки.ИдентификаторПакета;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

#Область СЭДО

Функция НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, РезультатБРО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент КАК ИсходящийДокумент,
	|	Регистрация.Страхователь КАК Страхователь,
	|	Регистрация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрация
	|ГДЕ
	|	Регистрация.ДоставкаИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.ИсходящийДокумент,
	|	Регистрация.Страхователь,
	|	Регистрация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрация
	|ГДЕ
	|	Регистрация.РегистрацияИдентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Таблица = Запрос.Выполнить().Выгрузить();
	Найденные = Таблица.Скопировать(Новый Структура("Страхователь", Страхователь));
	Если Найденные.Количество() = 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Найденные = Таблица.Скопировать(Новый Структура("ГоловнаяОрганизация", ГоловнаяОрганизация));
		Если Найденные.Количество() = 0 Тогда
			Найденные = Таблица;
		КонецЕсли;
	КонецЕсли;
	Если Найденные.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""';
				|en = 'No %2 with message ID ""%3"" was found for insurant ""%1""'"),
			Страхователь,
			Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ПредставлениеЗаписи,
			ИдентификаторСообщения);
		СЭДОФСС.ОшибкаОбработки(РезультатБРО, ТекстОшибки);
	КонецЕсли;
	Возврат Найденные;
КонецФункции

Процедура ЗаполнитьПоРезультатуДоставки(ИсходящийДокумент, Сообщение) Экспорт
	Набор = НачатьЗаписьНабора(ИсходящийДокумент);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.ИсходящийДокумент = ИсходящийДокумент;
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	Запись.Доставлен           = Сообщение.ДоставленоФонду;
	Запись.ДатаОтправки        = Сообщение.ДатаОтправкиФонду;
	Запись.ДоставкаТекстОшибки = Сообщение.ТекстОшибки;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

// Загружает ошибку логического контроля (тип 14) полученную в ответ на документ СЭДО 101.
Процедура ЗагрузитьОшибкуСообщения101(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	Таблица = НайтиПоИдентификаторуСообщения(Страхователь, ИдентификаторСообщения, Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИсходящийДокумент);
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = Набор[0];
		Запись.ОшибкиЛогическогоКонтроля = СокрЛП(ТекстОшибки);
		Запись.ЕстьОшибкиЛогическогоКонтроля = Истина;
		ЗавершитьЗаписьНабора(Набор);
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЦикла;
КонецПроцедуры

// Загружает результат ответа на запрос сведений для расчета и выплаты пособия ФСС.
Процедура ЗагрузитьСообщение105(Страхователь, РегистрацияИдентификатор, ТекстXML, Результат, Кэш) Экспорт
	// Пример:
	//<pr:approveSocialAssistResult
	//		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//		xmlns:pr="urn:ru:fss:integration:types:proactive:v01"
	//		responseOn="jebce3d6-0a45-4ecc-835f-866640c48d20"
	//		xsi:schemaLocation="urn:ru:fss:integration:types:proactive:v01 Confirmation.xsd">
	//	<pr:socialAssistNum>0000</pr:socialAssistNum>
	//	<pr:status>ERROR</pr:status>
	//</pr:approveSocialAssistResult>
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = КореньDOMСообщения105(СтруктураDOM);
	Если КореньDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "approveSocialAssistResult");
		Возврат;
	КонецЕсли;
	
	АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
	ДоставкаИдентификатор = АтрибутыКорня.responseOn;
	ТекстОшибки = "";
	Если ДоставкаИдентификатор = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаАтрибута(Результат, "responseOn");
	ИначеЕсли Не ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
		СЭДОФСС.ЗаписатьОшибкуЗаполненностиАтрибута(Результат, "responseOn");
	КонецЕсли;
	
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "socialAssistNum, status, registryNum, errorList, warnList, responseInfo");
	РегистрацияДата          = СЭДОФСС.ДатаСообщения(РегистрацияИдентификатор, Кэш);
	РегистрацияСтатус        = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.status);
	РегистрацияНомерПроцесса = СериализацияБЗК.ЧислоИзXML(РеквизитыКорня.socialAssistNum);
	РегистрацияНомерРеестра  = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.registryNum);
	РегистрацияИнформация    = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.responseInfo);
	СведенияОСтатусе         = СведенияОСтатусеРегистрации(РегистрацияСтатус);
	ТекстыОшибок             = ПредставлениеСпискаОшибок(РеквизитыКорня.errorList, НСтр("ru = 'Ошибки';
																						|en = 'Errors'"));
	ТекстыПредупреждений     = ПредставлениеСпискаОшибок(РеквизитыКорня.warnList, НСтр("ru = 'Предупреждения';
																						|en = 'Warnings'"));
	
	Если ТекстыПредупреждений = "" Тогда
		РегистрацияПротокол = ТекстыОшибок;
	ИначеЕсли ТекстыОшибок = "" Тогда
		РегистрацияПротокол = ТекстыПредупреждений;
	Иначе
		РегистрацияПротокол = ТекстыОшибок + Разделитель() + ТекстыПредупреждений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РегистрацияПротокол = СокрЛП(РегистрацияПротокол + Разделитель() + ТекстОшибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(РегистрацияСтатус) И Не ЗначениеЗаполнено(СведенияОСтатусе.Расшифровка) Тогда
		Текст = СтрШаблон(НСтр("ru = 'Неизвестный статус: ""%1"".';
								|en = 'Unknown status: ""%1"".'"), РегистрацияСтатус);
		РегистрацияПротокол = СокрЛП(Текст + Разделитель() + РегистрацияПротокол);
	КонецЕсли;
	
	ОтветНаЗапрос = НайтиОтветНаЗапрос(Страхователь, ДоставкаИдентификатор, РегистрацияНомерПроцесса);
	Если Не ЗначениеЗаполнено(ОтветНаЗапрос) Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось найти %1 с идентификатором ""%2"" и номером процесса ""%3"".%4';
				|en = 'Cannot find %1 with the %2 ID and process number %3.%4'"),
			Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия.Представление(),
			ДоставкаИдентификатор,
			Формат(РегистрацияНомерПроцесса, "ЧГ="),
			Разделитель() + РегистрацияПротокол);
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СообщениеАктуальное = Истина;
	
	Набор = НачатьЗаписьНабора(ОтветНаЗапрос);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ОтветНаЗапрос);
		Запись.ИсходящийДокумент = ОтветНаЗапрос;
	Иначе
		Запись = Набор[0];
		Если ЗначениеЗаполнено(Запись.РегистрацияСтатус)
			И РегистрацияИдентификатор <> Запись.РегистрацияИдентификатор
			И (Не ЗначениеЗаполнено(РегистрацияНомерРеестра) Или ЗначениеЗаполнено(Запись.РегистрацияНомерРеестра)) Тогда
			СуществующийСтатус = СведенияОСтатусеРегистрации(Запись.РегистрацияСтатус);
			Если СведенияОСтатусе.Вес < СуществующийСтатус.Вес Тогда
				СообщениеАктуальное = Ложь; // Неактуальный (старый) статус.
			ИначеЕсли СведенияОСтатусе.Вес = СуществующийСтатус.Вес
				И РегистрацияДата < Запись.РегистрацияДата Тогда
				СообщениеАктуальное = Ложь; // Более старая регистрация.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Если СообщениеАктуальное Тогда
		
		ЕстьИзменения = Истина;
		
		Запись.Зарегистрирован          = СведенияОСтатусе.Зарегистрирован;
		Запись.РегистрацияДата          = РегистрацияДата;
		Запись.РегистрацияСтатус        = РегистрацияСтатус;
		Запись.РегистрацияПротокол      = РегистрацияПротокол;
		Запись.РегистрацияИдентификатор = РегистрацияИдентификатор;
		
		УстановитьЗначениеЕслиЗаполнено(Запись.РегистрацияНомерПроцесса, РегистрацияНомерПроцесса);
		УстановитьЗначениеЕслиЗаполнено(Запись.РегистрацияНомерРеестра,  РегистрацияНомерРеестра);
		УстановитьЗначениеЕслиЗаполнено(Запись.РегистрацияИнформация,    РегистрацияИнформация);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Запись.РегистрацияНомерПроцесса) И ЗначениеЗаполнено(РегистрацияНомерПроцесса) Тогда
			ЕстьИзменения = Истина;
			Запись.РегистрацияНомерПроцесса = РегистрацияНомерПроцесса;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.РегистрацияНомерРеестра) И ЗначениеЗаполнено(РегистрацияНомерРеестра) Тогда
			ЕстьИзменения = Истина;
			Запись.РегистрацияНомерРеестра = РегистрацияНомерРеестра;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.РегистрацияИнформация) И ЗначениеЗаполнено(РегистрацияИнформация) Тогда
			ЕстьИзменения = Истина;
			Запись.РегистрацияИнформация = РегистрацияИнформация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ЗавершитьЗаписьНабора(Набор);
	Иначе
		ОтменитьЗаписьНабора(Набор);
	КонецЕсли;
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция КореньDOMСообщения105(СтруктураDOM)
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'approveSocialAssistResult']");
	Если КореньDOM <> Неопределено Тогда
		Возврат КореньDOM;
	КонецЕсли;
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'socialAssistNum']/..");
	Если КореньDOM <> Неопределено Тогда
		Возврат КореньDOM;
	КонецЕсли;
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'status']/..");
	Если КореньDOM <> Неопределено Тогда
		Возврат КореньDOM;
	КонецЕсли;
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'registryNum']/..");
	Если КореньDOM <> Неопределено Тогда
		Возврат КореньDOM;
	КонецЕсли;
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'errorList']/..");
	Если КореньDOM <> Неопределено Тогда
		Возврат КореньDOM;
	КонецЕсли;
	Возврат СтруктураDOM.ДокументDOM;
КонецФункции

Процедура УстановитьЗначениеЕслиЗаполнено(ИзменяемоеЗначение, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		ИзменяемоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

Функция НайтиОтветНаЗапрос(Страхователь, ИдентификаторСообщения, НомерПроцесса = Неопределено)
	// Формирование набора запросов.
	
	Тексты = Новый ТаблицаЗначений;
	Тексты.Колонки.Добавить("Приоритет");
	Тексты.Колонки.Добавить("Текст");
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Если ЗначениеЗаполнено(Страхователь) Тогда
			ЭлементСписка = Тексты.Добавить();
			ЭлементСписка.Приоритет = 1;
			ЭлементСписка.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НайденныйДокумент.Ссылка КАК Ссылка,
			|	1 КАК Приоритет
			|ИЗ
			|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК НайденныйДокумент
			|ГДЕ
			|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения
			|	И НайденныйДокумент.Страхователь = &Страхователь";
		КонецЕсли;
		ЭлементСписка = Тексты.Добавить();
		ЭлементСписка.Приоритет = 3;
		ЭлементСписка.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НайденныйДокумент.Ссылка КАК Ссылка,
		|	3 КАК Приоритет
		|ИЗ
		|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК НайденныйДокумент
		|ГДЕ
		|	НайденныйДокумент.ИдентификаторСообщения = &ИдентификаторСообщения";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерПроцесса) Тогда
		Если ЗначениеЗаполнено(Страхователь) Тогда
			ЭлементСписка = Тексты.Добавить();
			ЭлементСписка.Приоритет = 2;
			ЭлементСписка.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НайденныйДокумент.Ссылка КАК Ссылка,
			|	2 КАК Приоритет
			|ИЗ
			|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК НайденныйДокумент
			|ГДЕ
			|	НайденныйДокумент.НомерПроцесса = &НомерПроцесса
			|	И НайденныйДокумент.Страхователь = &Страхователь";
		КонецЕсли;
		ЭлементСписка = Тексты.Добавить();
		ЭлементСписка.Приоритет = 4;
		ЭлементСписка.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НайденныйДокумент.Ссылка КАК Ссылка,
		|	4 КАК Приоритет
		|ИЗ
		|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК НайденныйДокумент
		|ГДЕ
		|	НайденныйДокумент.НомерПроцесса = &НомерПроцесса";
	КонецЕсли;
	
	Если Тексты.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Страхователь) Тогда
			ЭлементСписка = Тексты.Добавить();
			ЭлементСписка.Приоритет = 5;
			ЭлементСписка.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Регистр.ИсходящийДокумент КАК Ссылка,
			|	5 КАК Приоритет
			|ИЗ
			|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистр
			|ГДЕ
			|	Регистр.Доставлен = ИСТИНА
			|	И Регистр.РегистрацияИдентификатор = """"
			|	И Регистр.Страхователь = &Страхователь";
		КонецЕсли;
		ЭлементСписка = Тексты.Добавить();
		ЭлементСписка.Приоритет = 6;
		ЭлементСписка.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистр.ИсходящийДокумент КАК Ссылка,
		|	6 КАК Приоритет
		|ИЗ
		|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистр
		|ГДЕ
		|	Регистр.Доставлен = ИСТИНА
		|	И Регистр.РегистрацияИдентификатор = """"";
	КонецЕсли;
	
	Тексты.Сортировать("Приоритет");
	
	Отступ = Символы.ПС + Символы.ПС;
	Разделитель = Отступ + "ОБЪЕДИНИТЬ ВСЕ" + Отступ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(Тексты.ВыгрузитьКолонку("Текст"), Разделитель) + Отступ + "УПОРЯДОЧИТЬ ПО Приоритет";
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Запрос.УстановитьПараметр("НомерПроцесса", НомерПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПредставлениеСпискаОшибок(СписокОшибок, ЗаголовокСписка = "")
	Результат = СЭДОФСС.ПредставлениеСпискаОшибокXML(СписокОшибок);
	Если ПустаяСтрока(Результат) Тогда
		Возврат "";
	КонецЕсли;
	Если ЗаголовокСписка = "" Тогда
		Возврат Результат;
	Иначе
		Возврат ЗаголовокСписка + " (" + СтрЧислоСтрок(Результат) + "): " + Результат;
	КонецЕсли;
КонецФункции

Функция СведенияОСтатусеРегистрации(Статус)
	Результат = Новый Структура("Вес, Зарегистрирован, Расшифровка");
	
	СтатусВРег = ВРег(СокрЛП(Статус));
	
	// Статусы из актуальной спецификации.
	Если СтатусВРег = "RECEIVED" Тогда
		Результат.Вес             = 1;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Документ получен и проверяется Фондом';
										|en = 'The document is received and sent for verification by the Social Security Fund'");
		
	ИначеЕсли СтатусВРег = "ERROR" Тогда
		Результат.Вес             = 4;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Выявлены ошибки, документ отклонен Фондом';
										|en = 'Errors are found. The document is rejected by the Social Security Fund'");
		
	ИначеЕсли СтатусВРег = "PROCESSED" Тогда
		Результат.Вес             = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Документ принят Фондом';
										|en = 'The document is accepted by the Social Security Fund'");
		
	Иначе
		Результат.Вес             = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = "";
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокВыбораСтатусов(ПолеВвода, Статус) Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		Ключи = СтрРазделить("RECEIVED,ERROR,PROCESSED", ",");
		Для Каждого Ключ Из Ключи Цикл
			СведенияОСтатусе = СведенияОСтатусеРегистрации(Ключ);
			СписокВыбора.Добавить(Ключ, СведенияОСтатусе.Расшифровка + " (" + Ключ + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Статус) И СписокВыбора.НайтиПоЗначению(Статус) = Неопределено Тогда
		СведенияОСтатусе = СведенияОСтатусеРегистрации(Статус);
		СписокВыбора.Добавить(Статус, СведенияОСтатусе.Расшифровка);
	КонецЕсли;
КонецПроцедуры

Функция Разделитель()
	Возврат Символы.ПС + "----" + Символы.ПС;
КонецФункции

#КонецОбласти

#Область УведомлениеОСтатусеВыплатыПособия

Процедура ПриЗаписиУведомленияОСтатусеВыплатыПособия(Документ, УдалитьСсылки = Неопределено) Экспорт
	Если Не Документ.Загружен Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторРеестраЗаполнен = ЗначениеЗаполнено(Документ.ИдентификаторРеестра);
	НомерПроцессаЗаполнен = ЗначениеЗаполнено(Документ.НомерПроцесса);
	Если УдалитьСсылки = Неопределено Тогда
		УдалитьСсылки = Документ.ПометкаУдаления
			Или Не ЗначениеЗаполнено(Документ.СтатусВыплаты)
			Или Не ЗначениеЗаполнено(Документ.ГоловнаяОрганизация)
			Или (Не ИдентификаторРеестраЗаполнен И Не НомерПроцессаЗаполнен);
	КонецЕсли;
	Если УдалитьСсылки Тогда
		УдалитьСсылкиНаУведомленияОСтатусеВыплатыПособия(Документ.Ссылка);
		Возврат;
	КонецЕсли;
	Если Не ИдентификаторРеестраЗаполнен И Не НомерПроцессаЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Документ.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СтатусВыплаты", Документ.СтатусВыплаты);
	ТекстыЗапроса = Новый Массив;
	Если ИдентификаторРеестраЗаполнен Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.ИсходящийДокумент КАК ИсходящийДокумент,
		|	0 КАК Приоритет
		|ИЗ
		|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистр
		|ГДЕ
		|	Регистр.РегистрацияНомерРеестра = &ИдентификаторРеестра
		|	И Регистр.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Регистр.ВыплатаСтатус <= &СтатусВыплаты";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ИдентификаторРеестра", Документ.ИдентификаторРеестра);
	КонецЕсли;
	Если НомерПроцессаЗаполнен Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Регистр.ИсходящийДокумент КАК ИсходящийДокумент,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистр
		|ГДЕ
		|	Регистр.РегистрацияНомерПроцесса = &НомерПроцесса
		|	И Регистр.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Регистр.ВыплатаСтатус <= &СтатусВыплаты";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("НомерПроцесса", Документ.НомерПроцесса);
	КонецЕсли;
	Соединитель =
	"
	|
	|ОБЪЕДИНИТЬ
	|
	|";
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Соединитель);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Таблица.Количество() > 1 Тогда
		Таблица.Сортировать("Приоритет Возр");
		Таблица = Таблица.Скопировать(Новый Структура("Приоритет", Таблица[0].Приоритет));
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИсходящийДокумент);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.ВыплатаСсылка = Документ.Ссылка;
			Запись.ВыплатаСтатус = Документ.СтатусВыплаты;
			Запись.ВыплатаУспех = (Запись.ВыплатаСтатус = 3);
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСсылкиНаУведомленияОСтатусеВыплатыПособия(ВыплатаСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.ИсходящийДокумент КАК ИсходящийДокумент
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Шапка
	|ГДЕ
	|	Шапка.ВыплатаСсылка = &ВыплатаСсылка";
	Запрос.УстановитьПараметр("ВыплатаСсылка", ВыплатаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИсходящийДокумент);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.ВыплатаСсылка = Неопределено;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененииРасчетаПособия

Процедура ПриЗаписиДокументаУведомлениеОбИзмененииРасчетаПособия(Документ, УдалитьСсылки = Неопределено) Экспорт
	НомерПроцессаЗаполнен = ЗначениеЗаполнено(Документ.НомерПроцесса);
	Если УдалитьСсылки = Неопределено Тогда
		УдалитьСсылки = Документ.ПометкаУдаления
			Или Не ЗначениеЗаполнено(Документ.ВидУведомления)
			Или Не ЗначениеЗаполнено(Документ.ГоловнаяОрганизация)
			Или Не НомерПроцессаЗаполнен;
	КонецЕсли;
	Если УдалитьСсылки Тогда
		УдалитьСсылкиНаУведомлениеОбИзмененииРасчетаПособия(Документ.Ссылка);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Документ.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НомерПроцесса", Документ.НомерПроцесса);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистр.ИсходящийДокумент КАК ИсходящийДокумент
		|ИЗ
		|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистр
		|ГДЕ
		|	Регистр.РегистрацияНомерПроцесса = &НомерПроцесса
		|	И Регистр.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИсходящийДокумент);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.УведомлениеОбИзменении = Документ.Ссылка;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСсылкиНаУведомлениеОбИзмененииРасчетаПособия(ДокументСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.ИсходящийДокумент КАК ИсходящийДокумент
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Шапка
	|ГДЕ
	|	Шапка.УведомлениеОбИзменении = &УведомлениеОбИзменении";
	Запрос.УстановитьПараметр("УведомлениеОбИзменении", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИсходящийДокумент);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Запись.УведомлениеОбИзменении = Неопределено;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли