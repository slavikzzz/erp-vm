#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Имя;
	
КонецФункции

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(Метаданные.Константы.НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Имя);
	
КонецФункции

// Возвращает номер задания из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к закрытию месяца".
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.ТекущийНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Блокирует регистр по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
КонецПроцедуры

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	ОкончаниеПериода - Период - Конец периода выборки данных.
//	Организации - Массив, СправочникСсылка.Организации - Фильтр по организации.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерПакета,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//  ПериодЗадания	 - Дата						 	- Начало периода, для которого необходимо зарегистрировать задание к расчету
//  ДокументЗадания	 - ДокументСсылка			 	- Документ регистратор создавший движение в зависимых регистрах
//  Организация		 - СправочникСсылка.Организации	- Организация, по которой необходим перерасчет
//  НомерПакета		 - Число					 	- Номер пакета партий ТМЦ
//  НомерЗадания	 - Число					 	- Номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				НомерПакета = Неопределено, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = РасчетСебестоимостиПрикладныеАлгоритмы.СвязиОрганизацийПоСхемеИнтеркампани();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем задания
	НачатьТранзакцию();
	Попытка
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьМенеджерЗаписи();
			НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
			НаборЗаписей.НомерПакета  = НомерПакета;
			НаборЗаписей.Организация  = ТекущаяОрганизация;
			НаборЗаписей.Документ     = ДокументЗадания;
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, НомерПакета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, СтруктураПолей.НомерПакета, НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать задание к погашению стоимости ТМЦ за %1 в организации %2 по причине: %3';
				|en = 'Cannot generate a job to reimburse value of inventory for %1 in company %2. Reason: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца';
				|en = 'Month-end closing'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// В РИБ закрытие месяца выполняется только в главном узле, при этом из подчиненных узлов
// записи регистра отправляются в главный узел. При получении в ГУ записей от ПУ,
// они регистрируются с текущим номером задания ГУ. Когда в ПУ приходит квитанция о получении
// данных в ГУ, в ПУ записи регистра снимаются с регистрации к обмену и удаляются, т.к. штатными
// средствами (после закрытия месяца, либо при получении удаления от ГУ) в ПУ они не могут быть удалены.
//
Процедура УдалитьЗаписиВПодчиненномУзлеРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Месяц КАК Месяц,
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НомерПакета КАК НомерПакета,
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Организация КАК Организация,
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Документ КАК Документ,
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НомерЗадания КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Изменения КАК ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения
		|		ПО ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Месяц = ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.Месяц
		|			И ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Организация = ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.Организация
		|			И ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НомерПакета = ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.НомерПакета
		|			И ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Документ = ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.Документ
		|			И ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НомерЗадания = ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.НомерЗадания
		|ГДЕ
		|	ЗаданияКПогашениюСтоимостиТМЦВЭксплуатацииИзменения.Месяц ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
	Для Сч = 1-ТаблицаЗаписей.Количество() По 0 Цикл
		Выборка = ТаблицаЗаписей[-Сч];
		НаборЗаписей = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Фиксирует удачный пересчет данных. Вызывается когда выполнен пересчет данных для очистки записей, указывавших на
// необходимость пересчета.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода, за который был произведен пересчет;
//	ОкончаниеПериода - Дата - Конец периода, за который был произведен пересчет;
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//						запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ДанныеКРаспределению - Структура - Формируется в методе ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(Организация, НачалоРасчета, ВыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистка записей по которым был выполнен расчет.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерПакета,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ВыполненныеЗадания.ВременныеТаблицы;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); 
	КонецЦикла;
	
	// Добавление записей на следующий период
	СледующийМесяц = КонецМесяца(НачалоРасчета) + 1;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация,
	|	Задания.Период
	|ПОМЕСТИТЬ ЗаданияНаСледующийПериод
	|ИЗ
	|	&ЗаданияНаСледующийПериод КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация               КАК Организация,
	|	Задания.Период                    КАК Месяц,
	|	ВыполненныеЗадания.НомерПакета    КАК НомерПакета,
	|	&НомерЗадания                     КАК НомерЗадания
	|ИЗ
	|	ЗаданияНаСледующийПериод КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ КэшГраниц КАК ВыполненныеЗадания
	|		ПО ВыполненныеЗадания.Организация = Задания.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ВыполненныеЗадания.ВременныеТаблицы;
	Запрос.УстановитьПараметр("НомерЗадания", ПолучитьНомерЗадания());
	
	ЗаданияНаСледующийПериод = ЗаданияНаСледующийПериод(Организация, СледующийМесяц);
	Запрос.УстановитьПараметр("ЗаданияНаСледующийПериод", ЗаданияНаСледующийПериод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	КонецРасчета - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	СписокОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
Функция НачалоРасчета(КонецРасчета, СписокОрганизаций = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(Задания.Месяц) ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(СписокОрганизаций));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданияНаСледующийПериод(Организации, НачалоПериода)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПартииТМЦ
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦ
	|ГДЕ
	|	(ПартииТМЦ.ДатаЗавершенияЭксплуатации >= &НачалоМесяца
	|			ИЛИ ПартииТМЦ.ДатаЗавершенияЭксплуатации = ДАТАВРЕМЯ(1, 1, 1))
	|
	|	И ПартииТМЦ.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТМЦВЭксплуатации.Организация КАК Организация,
	|	ТМЦВЭксплуатации.Партия КАК Партия,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ КАК СпособПогашенияСтоимостиБУ
	|ПОМЕСТИТЬ ТМЦВЭксплуатации
	|ИЗ
	|	РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|			&НачалоМесяца,
	|			(Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|			И Партия В
	|				(ВЫБРАТЬ
	|					ПартииТМЦ.Ссылка
	|				ИЗ
	|					ПартииТМЦ КАК ПартииТМЦ)) КАК ТМЦВЭксплуатации
	|ГДЕ
	|	ТМЦВЭксплуатации.КоличествоОстаток > 0
	|	И &НачалоМесяца < &НачалоПримененияФСБУ5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(Партии.Ссылка, ЗНАЧЕНИЕ(Справочник.ПартииТМЦВЭксплуатации.ПустаяСсылка)) КАК Партия,
	|	ЕСТЬNULL(Партии.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ, ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПустаяСсылка)) КАК СпособПогашенияСтоимостиБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоМесяца, 
	|			Счет В (&ДоступныеСчетаУчета),, 
	|			(Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)) КАК ХозрасчетныйОстатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииТМЦВЭксплуатации КАК Партии
	|		ПО ХозрасчетныйОстатки.Субконто2 = Партии.Ссылка
	|
	|ГДЕ
	|	&НачалоМесяца >= &НачалоПримененияФСБУ5
	|	И Партии.Ссылка В
	|				(ВЫБРАТЬ
	|					ПартииТМЦ.Ссылка
	|				ИЗ
	|					ПартииТМЦ КАК ПартииТМЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособПогашенияСтоимостиБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТМЦВЭксплуатации.Организация КАК Организация,
	|	ТМЦВЭксплуатации.Партия.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТМЦВЭксплуатации.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ), ДАТАВРЕМЯ(1, 1, 1)) = &НачалоПрошлогоМесяца КАК ПартияПолученаПрошлымМесяцем
	|ПОМЕСТИТЬ ТМЦ_ПоНаработке
	|ИЗ
	|	ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|ГДЕ
	|	ТМЦВЭксплуатации.СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоНаработке)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИнвентарныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТМЦ_ПоНаработке.Организация КАК Организация
	|ПОМЕСТИТЬ ТМЦ_ПоНаработке_ЕстьНаработка
	|ИЗ
	|	ТМЦ_ПоНаработке КАК ТМЦ_ПоНаработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиТМЦВЭксплуатации.СрезПоследних(
	|				&НачалоМесяца,
	|				ИнвентарныйНомер В
	|					(ВЫБРАТЬ
	|						ТМЦ_ПоНаработке.ИнвентарныйНомер
	|					ИЗ
	|						ТМЦ_ПоНаработке КАК ТМЦ_ПоНаработке)) КАК НаработкиНачалоПериода
	|		ПО ТМЦ_ПоНаработке.ИнвентарныйНомер = НаработкиНачалоПериода.ИнвентарныйНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиТМЦВЭксплуатации.СрезПоследних(
	|				&НачалоПрошлогоМесяца,
	|				ИнвентарныйНомер В
	|					(ВЫБРАТЬ
	|						ТМЦ_ПоНаработке.ИнвентарныйНомер
	|					ИЗ
	|						ТМЦ_ПоНаработке КАК ТМЦ_ПоНаработке
	|					ГДЕ
	|						ТМЦ_ПоНаработке.ПартияПолученаПрошлымМесяцем)) КАК НаработкиНачалоПрошлогоМесяца
	|		ПО ТМЦ_ПоНаработке.ИнвентарныйНомер = НаработкиНачалоПрошлогоМесяца.ИнвентарныйНомер
	|			И (ТМЦ_ПоНаработке.ПартияПолученаПрошлымМесяцем)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиТМЦВЭксплуатации.СрезПоследних(
	|				&КонецМесяца,
	|				ИнвентарныйНомер В
	|					(ВЫБРАТЬ
	|						ТМЦ_ПоНаработке.ИнвентарныйНомер
	|					ИЗ
	|						ТМЦ_ПоНаработке КАК ТМЦ_ПоНаработке)) КАК НаработкиОкончаниеПериода
	|		ПО ТМЦ_ПоНаработке.ИнвентарныйНомер = НаработкиОкончаниеПериода.ИнвентарныйНомер
	|ГДЕ
	|	ЕСТЬNULL(НаработкиОкончаниеПериода.Значение, 0) - ВЫБОР
	|			КОГДА ТМЦ_ПоНаработке.ПартияПолученаПрошлымМесяцем
	|				ТОГДА ЕСТЬNULL(НаработкиНачалоПрошлогоМесяца.Значение, 0)
	|			ИНАЧЕ ЕСТЬNULL(НаработкиНачалоПериода.Значение, 0)
	|		КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация,
	|	&НачалоМесяца КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТМЦВЭксплуатации.Организация КАК Организация
	|	ИЗ
	|		ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|	ГДЕ
	|		ТМЦВЭксплуатации.СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоСроку)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТМЦВЭксплуатации.Организация КАК Организация
	|	ИЗ
	|		ТМЦ_ПоНаработке_ЕстьНаработка КАК ТМЦВЭксплуатации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ВозвратИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НЕ ВозвратИзЭксплуатации.ПометкаУдаления
	|		И ВозвратИзЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И ВозвратИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ВозвратИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НЕ ВозвратИзЭксплуатации.ПометкаУдаления
	|		И ВозвратИзЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И ВозвратИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ПеремещениеВЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НЕ ПеремещениеВЭксплуатации.ПометкаУдаления
	|		И ПеремещениеВЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И ПеремещениеВЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ПеремещениеВЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НЕ ПеремещениеВЭксплуатации.ПометкаУдаления
	|		И ПеремещениеВЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И ПеремещениеВЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(СписаниеИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И СписаниеИзЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И СписаниеИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(СписаниеИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И СписаниеИзЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации, МЕСЯЦ)
	|		И СписаниеИзЭксплуатацииТовары.Партия.ДатаНачалаЭксплуатации < &НачалоПримененияФСБУ5
	|
	|	) КАК Задания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПрошлогоМесяца", НачалоМесяца(НачалоМесяца(НачалоПериода)-1));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.УстановитьПараметр("НачалоПримененияФСБУ5", РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019());
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаТМЦВЭксплуатации();
	Запрос.УстановитьПараметр("ДоступныеСчетаУчета", СтруктураСчетовУчета.СчетаУчетаТМЦВЭксплуатации);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

#КонецОбласти

#КонецЕсли
