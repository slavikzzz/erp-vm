//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает в регистр ПооперационноеРасписание данные операций, которые подлежат удалению при последующем
//	сохранении расписания по команде пользователя.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  Операции - ТаблицаЗначений - данные операций, колонки:
//		* ИдентификаторОперации - УникальныйИдентификатор - идентификатор операции.
//		* РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры - рабочий центр, на котором выполняется операция.
//		* Начало - Дата - начало интервала выполнения операции.
//		* Окончание - Дата - окончание интервала выполнения операции.
//		* МаршрутныйЛист - ДокументСсылка.МаршрутныйЛистПроизводства - маршрутный лист, которому принадлежит операция.
//
Процедура ЗаписатьОперацииДляУдаления(Знач МодельРасписания, Знач Операции) Экспорт
	
	Если ЗначениеЗаполнено(МодельРасписания) И ЗначениеЗаполнено(Операции) Тогда
		
		Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
		Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
		Набор.Отбор.ЭтоУдалениеОперации.Установить(Истина);
		Набор.Загрузить(Операции);
		
		Для каждого Запись Из Набор Цикл
			
			Запись.МодельРасписания = МодельРасписания;
			Запись.Моделирование = Истина;
			Запись.ЭтоУдалениеОперации = Истина;
			
		КонецЦикла;
	    	
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает вариант расписания в ИБ. Под вариантом понимается расписание,
//	до его сохранения по команде пользователя (см. процедуру ЗаписатьРасписание).
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель планирования,
//		в соответствии с настройками которой выполнен расчет.
//  Расписание - ТаблицаЗначений - структура таблицы аналогична структуре регистра ПооперационноеРасписание.
//
Процедура ЗаписатьВариантРасписания(Знач МодельРасписания, Знач МодельПланирования, Знач Расписание) Экспорт
	
	Если ЗначениеЗаполнено(МодельРасписания) И ЗначениеЗаполнено(Расписание) Тогда
		
		Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
		Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
		Набор.Отбор.МодельПланирования.Установить(МодельПланирования);
		Набор.Отбор.ЭтоУдалениеОперации.Установить(Ложь);
		Набор.Загрузить(Расписание);
		
		Для каждого Запись Из Набор Цикл
			
			Запись.МодельРасписания = МодельРасписания;
			Запись.МодельПланирования = МодельПланирования;
			Запись.Моделирование = Истина;
			
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует расписание производства - сохраняет выбранный вариант расписания и очищает временные данные моделирования.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//  МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель планирования,
//		которой принадлежит записываемое расписание.
//  ЗаписьВыполнена	- Булево - флаг успешного выполнения записи.
//
Процедура ЗаписатьРасписание(Знач МодельРасписания, Знач МодельПланирования, ЗаписьВыполнена) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если ЗначениеЗаполнено(МодельРасписания) Тогда
			АктуализироватьРасписание(МодельРасписания, МодельПланирования);
			ОчиститьРасписаниеМодельРасписания(МодельРасписания);
		КонецЕсли;
		
		ЗаписьВыполнена = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись пооперационного расписания';
				|en = 'Save operation timetable'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьВыполнена = Ложь;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает минмальную дату начала и максимальную дату окончания операций маршрутных листов.
//
// Параметры:
//  МаршрутныеЛисты	- Массив - маршрутные листы, для которых необходимо получить границы расписания.
//
// Возвращаемое значение:
//  Структура - струкутра с элементами "Начало" и "Окончание".
//
Функция ГраницыРасписанияМаршрутныхЛистов(Знач МаршрутныеЛисты) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МаршрутныйЛист В(&МаршрутныеЛисты)");
	
	Запрос.УстановитьПараметр("МаршрутныеЛисты", МаршрутныеЛисты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Начало) Тогда
		Результат = Новый Структура("Начало, Окончание", НачалоДня(Выборка.Начало), КонецДня(Выборка.Окончание));
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет количество размещенных операций, принадлежащих модели расписания.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта) расписания.
//
// Возвращаемое значение:
//  Число - количество операций.
//
Функция КоличествоУникальныхОперацийМоделиРасписания(Знач МодельРасписания) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.МодельПланирования,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПооперационноеРасписание.ИдентификаторОперации) КАК КоличествоОпераций
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.Моделирование = ИСТИНА
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.МодельПланирования
	|ИТОГИ
	|	СУММА(КоличествоОпераций)
	|ПО
	|	ОБЩИЕ");
	
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоОпераций) Тогда
		Результат = Выборка.КоличествоОпераций;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Очищает данные моделирования пооперационного расписания.
//
// Параметры:
//  МодельРасписания - УникальныйИдентификатор - идентификатор модели (варианта), расписание которой необходимо очистить.
//
Процедура ОчиститьРасписаниеМодельРасписания(Знач МодельРасписания) Экспорт
	
	Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
	Набор.Отбор.МодельРасписания.Установить(МодельРасписания);
	Набор.Записать();
	
КонецПроцедуры

// Очищает пооперационное расписание производства маршрутного листа.
//
// Параметры:
//  МаршрутныйЛист - ДокументСсылка.МаршрутныйЛистПроизводства - документ, расписание
//		операций которого необходимо очистить.
//
Процедура ОчиститьРасписаниеМаршрутныйЛист(МаршрутныйЛист) Экспорт
	
	Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
	Набор.Отбор.МаршрутныйЛист.Установить(МаршрутныйЛист);
	Набор.Записать();
	
	МаршрутныеЛисты = Новый Массив;
	МаршрутныеЛисты.Добавить(МаршрутныйЛист);
	РегистрыСведений.ОперацииДляДиспетчирования.ЗаполнитьОперацииДляДиспетчирования(МаршрутныеЛисты);
	
КонецПроцедуры

// Изменяет статус выполнения операций расписания.
//
// Параметры:
//  Операции - Массив - содержит идентификаторы операций, статус которых необходимо изменить.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыВыполненияОпераций - статус, назначаемый операциям.
//
Процедура ИзменитьСтатусОпераций(Знач Операции, Знач НовыйСтатус) Экспорт
	
	Подразделения = ПодразделенияОперацийДляБлокировки(Операции);
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.БлокировкиПооперационногоРасписания.ЗаблокироватьКоллекциюПодразделений(
			Подразделения, "Подразделение", РежимБлокировкиДанных.Разделяемый);
		ДанныеЗаблокированы = РегистрыСведений.БлокировкиПооперационногоРасписания.ОперацииЗаблокированы(Операции);
		
		Если ДанныеЗаблокированы Тогда
			
			ТекстИсключения = НСтр("ru = 'Действие не может быть выполнено по причине: %1 в процессе пересчета';
									|en = 'The action cannot be executed due to: %1 during recalculation '");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстИсключения, ?(Операции.Количество()=1, НСтр("ru = 'операция находится';
																|en = 'transaction is situated'"), НСтр("ru = 'операции находятся';
																									|en = 'transactions belong to'")));
			
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			Для каждого Операция Из Операции Цикл
				УстановитьСтатусОперации(Операция, НовыйСтатус);
			КонецЦикла;
			
			ИзменитьСтатусСвязанныхОпераций(Операции, НовыйСтатус);
			
			МаршрутныеЛисты = МаршрутныеЛистыОпераций(Операции);
			РегистрыСведений.ОперацииДляДиспетчирования.ЗаполнитьОперацииДляДиспетчирования(МаршрутныеЛисты);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
 		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операций';
				|en = 'Operations Management'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
 		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Генерирует и назначает штрихкоды полученному множеству операций.
//
// Параметры:
//	Операции - ТаблицаЗначений - Содержит операции, которым необходимо назначить штрихкоды. Колонки:
//		* ИдентификаторОперации - Число.
//		* Начало - Дата.
//		* Окончание - Дата.
//		* РабочийЦентр - СправочникСсылка.РабочиеЦентры.
//
Процедура НазначитьШтрихкоды(Операции) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПооперационноеРасписание");
		БлокировкаДанных.Заблокировать();
		
		ТекущийКод = МаксимальныйЗанятыйШтрихкод();
		
		Для каждого Операция Из Операции Цикл
			
			НаборЗаписей = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторОперации.Установить(Операция);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Выбран() Тогда
				
				ТекущийКод = ТекущийКод + 1;
				Штрихкод = СформироватьШтрихкодEAN13(ТекущийКод);
				
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.Штрихкод = Штрихкод;
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Данные.Изменение';
				|en = 'Data.Change'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	МаршрутныеЛисты = МаршрутныеЛистыОпераций(Операции);
	РегистрыСведений.ОперацииДляДиспетчирования.ЗаполнитьОперацииДляДиспетчирования(МаршрутныеЛисты);
	
КонецПроцедуры

// Возвращает статусы выполнения операций расписания, в т.ч. рассчитанные с учетом
//	отметки времени. Учет отметки времени актуален для операций со способом управления операциями
//	"Регистрация отклонений" (настраивается в справочнике СтруктураПредприятия).
//
// Параметры:
//  Операции - Массив - содержит идентификаторы операций.
//  ОтметкаНаДату - Дата - момент расчета статусов операций
//		со спобсобом управления "Регистрация отклонений".
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Операция - УникальныйИдентификатор - идентификатор операции.
//		* СтатусВыполнения - ПеречислениеСсылка.СтатусыВыполненияОпераций - актуальный статус операции.
//
Функция СтатусыВыполненияОпераций(Знач Операции, Знач ОтметкаНаДату = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтметкаНаДату) Тогда
		ОтметкаНаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("СтатусВыполнения", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыВыполненияОпераций"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Подразделение,
	|	ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления КАК СпособУправления,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК Операция,
	|	ПооперационноеРасписание.СтатусВыполнения,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.ИдентификаторОперации В(&Операции)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.Подразделение,
	|	ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления,
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.СтатусВыполнения");
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СтатусВыполнения) Тогда
			СтатусВыполнения = Выборка.СтатусВыполнения;
		Иначе
			Если Выборка.СпособУправления = Перечисления.СпособыУправленияОперациями.РегистрацияФакта Тогда
				СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.НеНачато;
			Иначе
				Если ЗначениеЗаполнено(Выборка.Начало) И ЗначениеЗаполнено(Выборка.Окончание) Тогда
					Если Выборка.Начало > ОтметкаНаДату Тогда
						СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.НеНачато;
					ИначеЕсли Выборка.Начало <= ОтметкаНаДату
						И Выборка.Окончание > ОтметкаНаДату Тогда
						СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Начато;
					Иначе
						СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено;
					КонецЕсли;
				Иначе
					СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.НеНачато;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Операция = Выборка.Операция;
		НоваяСтрока.СтатусВыполнения = СтатусВыполнения;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет регламентные действия с расписанием при изменении способа управления операциями в подразделении.
//
// Параметры:
//  ПараметрыЗадания - Структура - содержит значения:
//		* Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение,
//			у которого был изменен способ управления операциями.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище,
//			для передачи результатов работы в вызывающий сеанс.
//
Процедура ПриПереходеСРегистрацииОтклоненийНаРегистрациюФакта(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	Подразделение = ПараметрыЗадания.Подразделение;
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.БлокировкиПооперационногоРасписания.ЗаблокироватьПодразделение(
			Подразделение, РежимБлокировкиДанных.Исключительный);
		
		Запрос = Новый Запрос(ТекстЗапросаИзмененСпособУправления());
		Запрос.УстановитьПараметр("Подразделение", ПараметрыЗадания.Подразделение);
		РезультатПакет = Запрос.ВыполнитьПакет();
		
		Операции = РезультатПакет[1].Выгрузить().ВыгрузитьКолонку("Операция");
		ДанныеЗаблокированы = РегистрыСведений.БлокировкиПооперационногоРасписания.ОперацииЗаблокированы(Операции);
		
		Если ДанныеЗаблокированы Тогда
			
			ТекстИсключения = НСтр("ru = 'При попытке изменения способа управления операциями возникала ошибка:
				|операции расписания подразделения находятся в процессе пересчета';
				|en = 'An error occurred while trying to change the operation management method:
				|business unit timetable operations are under recalculation'");
			
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ОперативнаяОтметка = ТекущаяДатаСеанса();
			МаршрутныеЛисты = РезультатПакет[2].Выгрузить().ВыгрузитьКолонку("МаршрутныйЛист");
			
			Для каждого МаршрутныйЛист Из МаршрутныеЛисты Цикл
				
				Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
				Набор.Отбор.МаршрутныйЛист.Установить(МаршрутныйЛист);
				Набор.Прочитать();
				
				Для каждого Запись Из Набор Цикл
					Если НЕ ЗначениеЗаполнено(Запись.СтатусВыполнения) Тогда
						Если Запись.Начало <= ОперативнаяОтметка Тогда
							
							Запись.ДатаИзмененияСтатуса = ОперативнаяОтметка;
							Если Запись.Окончание <= ОперативнаяОтметка Тогда
								Запись.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено;
							Иначе
								Запись.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Начато;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Набор.Записать();
				
			КонецЦикла;
			
			РегистрыСведений.БлокировкиПооперационногоРасписания.РазблокироватьИзмененСпособУправления(Подразделение);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение способа управления операциями';
				|en = 'Change the method of operation management'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АктуализироватьРасписание(Знач МодельРасписания, Знач МодельПланирования)
	
	ТекстЗапроса = ТекстЗапросаАктуализацияРасписания();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МодельРасписания", МодельРасписания);
	Запрос.УстановитьПараметр("МодельПланирования", МодельПланирования);
	
	МаршрутныеЛисты = Новый Массив;
	
	ВыборкаМЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМЛ.Следующий() Цикл
		
		Набор = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
		Набор.Отбор.МаршрутныйЛист.Установить(ВыборкаМЛ.МаршрутныйЛист);
		
		Выборка = ВыборкаМЛ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
		КонецЦикла;
		
		Набор.Записать();
		
		МаршрутныеЛисты.Добавить(ВыборкаМЛ.МаршрутныйЛист);
		
	КонецЦикла;
	
	ЗаписьРасписаниеВМаршрутныеЛисты(МаршрутныеЛисты);
	РегистрыСведений.ОперацииДляДиспетчирования.ЗаполнитьОперацииДляДиспетчирования(МаршрутныеЛисты);
	
КонецПроцедуры

Функция ТекстЗапросаАктуализацияРасписания()
	
	Результат = 
	"ВЫБРАТЬ
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ПооперационноеРасписание.РабочийЦентр
	|ПОМЕСТИТЬ ОперацииУдалить
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.*
	|ПОМЕСТИТЬ ВариантРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.МодельПланирования = &МодельПланирования
	|	И ПооперационноеРасписание.Моделирование = ИСТИНА
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.МаршрутныйЛист КАК МаршрутныйЛист
	|ПОМЕСТИТЬ МаршрутныеЛисты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацииУдалить.МаршрутныйЛист КАК МаршрутныйЛист
	|	ИЗ
	|		ОперацииУдалить КАК ОперацииУдалить
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВариантРасписания.МаршрутныйЛист
	|	ИЗ
	|		ВариантРасписания КАК ВариантРасписания) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.МодельРасписания,
	|	ПооперационноеРасписание.МодельПланирования,
	|	ПооперационноеРасписание.Моделирование,
	|	ПооперационноеРасписание.*
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МаршрутныйЛист В
	|			(ВЫБРАТЬ
	|				МаршрутныеЛисты.МаршрутныйЛист
	|			ИЗ
	|				МаршрутныеЛисты)
	|	И НЕ (ПооперационноеРасписание.ИдентификаторОперации) В
	|				(ВЫБРАТЬ
	|					ОперацииУдалить.ИдентификаторОперации
	|				ИЗ
	|					ОперацииУдалить)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ВариантРасписания.*
	|ИЗ
	|	ВариантРасписания КАК ВариантРасписания
	|ИТОГИ ПО
	|	МаршрутныйЛист";
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальныйЗанятыйШтрихкод()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ПОДСТРОКА(ПооперационноеРасписание.Штрихкод, 2, 11)) КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Штрихкод <> """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
		Возврат Число(Выборка.Штрихкод);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СформироватьШтрихкодEAN13(Код)

	Штрихкод = "2" + Формат(Код, "ЧЦ=11; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + РегистрыСведений.ШтрихкодыНоменклатуры.КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;
	
КонецФункции

Процедура ЗаписьРасписаниеВМаршрутныеЛисты(МаршрутныеЛисты)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПооперационноеРасписание.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК КлючСвязи,
	|	ПооперационноеРасписание.РабочийЦентр,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МаршрутныйЛист В(&МаршрутныеЛисты)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.Вспомогательная = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.РабочийЦентр
	|ИТОГИ ПО
	|	МаршрутныйЛист");
	Запрос.УстановитьПараметр("МаршрутныеЛисты", МаршрутныеЛисты);
	
	Расписание = Новый Соответствие;
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Операции = Новый ТаблицаЗначений;
		Операции.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("УникальныйИдентификатор"));
		Операции.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
		Операции.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		Операции.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	 
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Операции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
		Расписание.Вставить(ВыборкаИтоги.МаршрутныйЛист, Новый Структура("Операции", Операции));
		
	КонецЦикла;
	
	Документы.МаршрутныйЛистПроизводства.ЗаписатьПооперационноеРасписание(Расписание);
	
КонецПроцедуры

Функция ПодразделенияОперацийДляБлокировки(Операции)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПооперационноеРасписание.Подразделение
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.ИдентификаторОперации В(&Операции)");
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура УстановитьСтатусОперации(ИдентификаторОперации, Статус)
	
	НаборЗаписей = РегистрыСведений.ПооперационноеРасписание.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОперации.Установить(ИдентификаторОперации);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() Тогда
		
		ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			Запись.СтатусВыполнения = Статус;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусСвязанныхОпераций(Операции, НовыйСтатус)
	
	ЗависимостиОпераций = ЗависимостиОперацийМаршрутныхЛистов(Операции);
	ОбработанныеОперации = СкопироватьМассив(Операции);
	
	Если НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.НеНачато Тогда
		
		СтатусПоследующих = Перечисления.СтатусыВыполненияОпераций.НеНачато;
		ИзменитьСтатусПоследующихОперацийРекурсивно(Операции, ЗависимостиОпераций, СтатусПоследующих, ОбработанныеОперации);
		
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Начато Тогда
		
		СтатусПредшествующих = Перечисления.СтатусыВыполненияОпераций.Завершено;
		ИзменитьСтатусПредшествующихОперацийРекурсивно(Операции, ЗависимостиОпераций, СтатусПредшествующих, ОбработанныеОперации);
		
		СтатусПоследующих = Перечисления.СтатусыВыполненияОпераций.НеНачато;
		ИзменитьСтатусПоследующихОперацийРекурсивно(Операции, ЗависимостиОпераций, СтатусПоследующих, ОбработанныеОперации);
		
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
		
		СтатусПредшествующих = Перечисления.СтатусыВыполненияОпераций.Завершено;
		ИзменитьСтатусПредшествующихОперацийРекурсивно(Операции, ЗависимостиОпераций, СтатусПредшествующих, ОбработанныеОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусПоследующихОперацийРекурсивно(Операции, ЗависимостиОпераций, НовыйСтатус, ОбработанныеОперации)
	
	ПоследующиеОперации = ПоследующиеОперации(Операции, ЗависимостиОпераций);
	СтатусыВыполнения = СтатусыВыполненияОпераций(ПоследующиеОперации);
	
	ИзмененныеОперации = Новый Массив;
	
	Для каждого Операция Из ПоследующиеОперации Цикл
		
		СтрокаСтатус = СтатусыВыполнения.Найти(Операция, "Операция");
		Если НЕ СтрокаСтатус = Неопределено И СтрокаСтатус.СтатусВыполнения = НовыйСтатус Тогда
			СтатусПрисвоен = Истина;
		Иначе
			СтатусПрисвоен = Ложь;
		КонецЕсли;
		
		Если ОбработанныеОперации.Найти(Операция) = Неопределено И НЕ СтатусПрисвоен Тогда
			УстановитьСтатусОперации(Операция, НовыйСтатус);
			ОбработанныеОперации.Добавить(Операция);
			ИзмененныеОперации.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИзмененныеОперации) Тогда
		ИзменитьСтатусПоследующихОперацийРекурсивно(
			ИзмененныеОперации, ЗависимостиОпераций, НовыйСтатус, ОбработанныеОперации)
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусПредшествующихОперацийРекурсивно(Операции, ЗависимостиОпераций, НовыйСтатус, ОбработанныеОперации)
	
	ПредшествующиеОперации = ПредшествующиеОперации(Операции, ЗависимостиОпераций);
	СтатусыВыполнения = СтатусыВыполненияОпераций(ПредшествующиеОперации);
	
	ИзмененныеОперации = Новый Массив;
	
	Для каждого Операция Из ПредшествующиеОперации Цикл
		
		СтрокаСтатус = СтатусыВыполнения.Найти(Операция, "Операция");
		Если НЕ СтрокаСтатус = Неопределено И СтрокаСтатус.СтатусВыполнения = НовыйСтатус Тогда
			СтатусПрисвоен = Истина;
		Иначе
			СтатусПрисвоен = Ложь;
		КонецЕсли;
		
		Если ОбработанныеОперации.Найти(Операция) = Неопределено И НЕ СтатусПрисвоен Тогда
			УстановитьСтатусОперации(Операция, НовыйСтатус);
			ОбработанныеОперации.Добавить(Операция);
			ИзмененныеОперации.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИзмененныеОперации) Тогда
		ИзменитьСтатусПредшествующихОперацийРекурсивно(
			ИзмененныеОперации, ЗависимостиОпераций, НовыйСтатус, ОбработанныеОперации)
	КонецЕсли;
	
КонецПроцедуры

Функция ЗависимостиОперацийМаршрутныхЛистов(Операции)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист
	|ПОМЕСТИТЬ МаршрутныеЛисты
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|ГДЕ
	|	ОперацииМаршрутовПроизводства.ИдентификаторОперации В(&Операции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ОперацииМаршрутовПроизводства.ИдентификаторОперации,
	|	ОперацииМаршрутовПроизводства.НомерОперации КАК НомерОперации,
	|	ОперацииМаршрутовПроизводства.НомерСледующейОперации КАК НомерСледующейОперации
	|ПОМЕСТИТЬ ОперацииМаршрутов
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|ГДЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист В
	|			(ВЫБРАТЬ
	|				МаршрутныеЛисты.МаршрутныйЛист
	|			ИЗ
	|				МаршрутныеЛисты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист,
	|	НомерОперации,
	|	НомерСледующейОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииМаршрутовПредш.ИдентификаторОперации КАК ОперацияПредшествующая,
	|	ОперацииМаршрутовСлед.ИдентификаторОперации КАК ОперацияПоследующая
	|ИЗ
	|	ОперацииМаршрутов КАК ОперацииМаршрутовПредш
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОперацииМаршрутов КАК ОперацииМаршрутовСлед
	|		ПО ОперацииМаршрутовПредш.МаршрутныйЛист = ОперацииМаршрутовСлед.МаршрутныйЛист
	|			И ОперацииМаршрутовПредш.НомерСледующейОперации = ОперацииМаршрутовСлед.НомерОперации");
	
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ОперацияПредшествующая");
	Результат.Индексы.Добавить("ОперацияПоследующая");
	
	Возврат Результат;
	
КонецФункции

Функция ПоследующиеОперации(Операции, ЗависимостиОпераций)
	
	Результат = Новый Массив;
	Отбор = Новый Структура("ОперацияПредшествующая");
	
	Для каждого Операция Из Операции Цикл
		
		Отбор.ОперацияПредшествующая = Операция;
		НайденныеСтроки = ЗависимостиОпераций.НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			Результат.Добавить(Строка.ОперацияПоследующая);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредшествующиеОперации(Операции, ЗависимостиОпераций)
	
	Результат = Новый Массив;
	Отбор = Новый Структура("ОперацияПоследующая");
	
	Для каждого Операция Из Операции Цикл
		
		Отбор.ОперацияПоследующая = Операция;
		НайденныеСтроки = ЗависимостиОпераций.НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			Результат.Добавить(Строка.ОперацияПредшествующая);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкопироватьМассив(Источник)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Источник Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаИзмененСпособУправления()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	ПооперационноеРасписание.ИдентификаторОперации
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Подразделение = &Подразделение
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расписание.ИдентификаторОперации КАК Операция
	|ИЗ
	|	Расписание КАК Расписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расписание.МаршрутныйЛист
	|ИЗ
	|	Расписание КАК Расписание";
	
	Возврат Результат;
	
КонецФункции

Функция МаршрутныеЛистыОпераций(Операции)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|ГДЕ
	|	ОперацииМаршрутовПроизводства.ИдентификаторОперации В(&Операции)");
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МаршрутныйЛист");
	
КонецФункции

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21