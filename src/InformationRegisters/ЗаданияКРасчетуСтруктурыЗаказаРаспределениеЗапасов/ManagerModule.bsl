#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Временное хранилище
// - следует использовать для добавления заданий вне процесса расчета

// Добавляет задания к расчету структуры заказа на производство
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц
// 	ИмяВременнойТаблицы - Строка - имя временной таблице в менеджере
// 	УничтожитьВременнуюТаблицу - Булево - признак, нужно удалить временную
Процедура ДобавитьЗаданияИзМенеджераВременныхТаблиц(МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов", УничтожитьВременнуюТаблицу = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	&Очередь               КАК Очередь,
	|	&Разделитель           КАК Разделитель,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Назначение     КАК Назначение,
	|	&ЗаказНаПроизводство   КАК ЗаказНаПроизводство
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Таблица
	|ГДЕ
	|	Таблица.Склад НЕ В (
	|		Неопределено,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|";
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Неопределено);
	Запрос.УстановитьПараметр("Разделитель", Новый УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Очередь", Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов", ИмяВременнойТаблицы);
	
	Если МенеджерВременныхТаблиц.Таблицы[ИмяВременнойТаблицы].Колонки.Найти("ЗаказНаПроизводство") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказНаПроизводство", "Таблица" + "." + "ЗаказНаПроизводство");
	КонецЕсли;
	
	Если УничтожитьВременнуюТаблицу Тогда
		ТекстЗапроса = ТекстЗапроса + ";" + " " + "УНИЧТОЖИТЬ" + " " + ИмяВременнойТаблицы;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

// Добавляет задания к расчету структуры заказа на производство
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - задания к расчету.
// 	СвернутьТаблицу - Булево - признак, необходимо свернуть таблицу перед записью заданий.
//
Процедура ДобавитьЗадания(Таблица, СвернутьТаблицу = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	НаборЗаписей = РегистрыСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
	
	Если СвернутьТаблицу Тогда
		ПоляГруппировки = "Номенклатура,Характеристика,Склад,Назначение"
			+ ?(Таблица.Колонки.Найти("ЗаказНаПроизводство") <> Неопределено, ",ЗаказНаПроизводство", "");
		Таблица.Свернуть(ПоляГруппировки); // сохранение ресурсов не поддерживается
	КонецЕсли;
	
	КолонкиПоЗначению = Новый Структура();
	КолонкиПоЗначению.Вставить("Очередь", Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь());
	
	СтруктураЗаказа.ЗаполнитьИЗаписатьНаборЗаписей(
		НаборЗаписей,
		Таблица,
		Ложь,
		Истина,
		КолонкиПоЗначению);

КонецПроцедуры

// Добавляет задание к расчету (структуры заказа на производство
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры
// 	Склад - СправочникСсылка.Склады - склад
// 	Назначение - СправочникСсылка.Назначения - назначение
//
Процедура ДобавитьЗадание(Номенклатура, Характеристика, Склад, Назначение) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	НаборЗаписей = РегистрыСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();

	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Очередь = Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь();
	
	НоваяЗапись.Номенклатура   = Номенклатура;
	НоваяЗапись.Характеристика = Характеристика;
	НоваяЗапись.Склад          = Склад;
	НоваяЗапись.Назначение     = Назначение;
	
	НоваяЗапись.Разделитель = Новый УникальныйИдентификатор();
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Итоговая очередь заданий к расчету
// - может использоваться для добавления заданий в процессе расчета

// Добавляет задания к расчету структуры заказа на производство в следующую очередь (только для добавления заданий в процессе расчета)
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - задания к расчету.
// 	СвернутьТаблицу - Булево - признак, необходимо свернуть таблицу перед записью заданий.
//
Процедура ДобавитьЗаданияВСледующуюОчередь(Таблица, СвернутьТаблицу = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
	
	Если СвернутьТаблицу Тогда
		ПоляГруппировки = "Номенклатура,Характеристика,Склад,Назначение" 
			+ ?(Таблица.Колонки.Найти("ЗаказНаПроизводство") <> Неопределено, ",ЗаказНаПроизводство", "");
		Таблица.Свернуть(ПоляГруппировки);
	КонецЕсли;
	
	КолонкиПоЗначению = Новый Структура();
	КолонкиПоЗначению.Вставить("Очередь", Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь() + 1);
	
	СтруктураЗаказа.ЗаполнитьИЗаписатьНаборЗаписей(
		НаборЗаписей,
		Таблица,
		Ложь,
		Истина,
		КолонкиПоЗначению);
	
КонецПроцедуры

// Добавляет задания к расчету структуры заказа на производство в следующую очередь (только для добавления заданий в процессе расчета)
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры
// 	Склад - СправочникСсылка.Склады - склад
// 	Назначение - СправочникСсылка.Назначения - назначение
//
Процедура ДобавитьЗаданиеВСледующуюОчередь(Номенклатура, Характеристика, Склад, Назначение) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Очередь = Константы.ГраницаРасчетаСтруктурыЗаказов.ТекущаяОчередь() + 1;
	
	НоваяЗапись.Номенклатура   = Номенклатура;
	НоваяЗапись.Характеристика = Характеристика;
	НоваяЗапись.Склад          = Склад;
	НоваяЗапись.Назначение     = Назначение;
	
	НоваяЗапись.Разделитель = Новый УникальныйИдентификатор();
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выбирает изменения из очереди и возращает номер очереди, в котором есть необработанные задания
// 
// Возвращаемое значение:
// 	Число - номер очереди
Функция ВыбратьИзменения(ГраницаРасчета) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Граница               КАК Очередь,
	|	&Разделитель           КАК Разделитель,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Назначение     КАК Назначение
	|ИЗ
	|	РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Таблица
	|ГДЕ 
	|	Таблица.Очередь <= &Граница
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Очередь КАК Очередь
	|ИЗ
	|	РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Таблица
	|ГДЕ
	|	Таблица.Очередь <= &Граница
	|;
	|";
	Запрос.УстановитьПараметр("Граница", ГраницаРасчета);
	Запрос.УстановитьПараметр("Разделитель", Новый УникальныйИдентификатор);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов");
		ЭлементБлокировки.УстановитьЗначение("Очередь", Новый Диапазон(, ГраницаРасчета));
		Блокировка.Заблокировать();
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Не Результат[0].Пустой() Тогда
			
			Таблица = Результат[0].Выгрузить();
			
			Набор = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
			Набор.Загрузить(Таблица);
			Набор.Записать(Ложь);
			
			СписокОчередей = Результат[1].Выгрузить().ВыгрузитьКолонку(0);
			
			Для каждого Очередь Из СписокОчередей Цикл
			
				Набор = РегистрыСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
				Набор.Отбор.Очередь.Установить(Очередь);
				Набор.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Очередь КАК Очередь
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Таблица
	|ГДЕ
	|	Таблица.Очередь <= &Граница
	|УПОРЯДОЧИТЬ ПО
	|	Очередь ВОЗР";
	РезультатЗапроса = Запрос.Выполнить();
	
	НомерОчереди = ?(РезультатЗапроса.Пустой(), 0, РезультатЗапроса.Выгрузить()[0].Очередь);
	
	Возврат НомерОчереди;
	
КонецФункции

// Удаляет задания по номеру очереди
// 
// Параметры:
// 	Очередь - Число - номер очереди
Процедура УдалитьЗадания(Очередь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.СоздатьНаборЗаписей();
	Набор.Отбор.Очередь.Установить(Очередь);
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмя() Экспорт

	ПолноеИмя = Метаданные.РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ПолноеИмя();

	Возврат ПолноеИмя;

КонецФункции

#КонецОбласти

#КонецЕсли