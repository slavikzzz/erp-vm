#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеТОГС = "";
	
	ИмяРегистра = СтрРазделить(ИмяФормы, ".")[1];
	АдресСервераСбораОтчетностиРосстата = РегистрыСведений[ИмяРегистра].АдресСервераССОРосстата(НазваниеТОГС);
	
	Если ЗначениеЗаполнено(НазваниеТОГС) Тогда
		АдресСервераСбораОтчетностиРосстата = АдресСервераСбораОтчетностиРосстата + "{" + НазваниеТОГС + "}";
		Элементы.АдресСервераССО.Заголовок =
			Элементы.АдресСервераССО.Заголовок + " (" + НазваниеТОГС + ")";
	КонецЕсли;
	
	УправлениеДоступностьюЭУ();
	ЗагрузитьНастройкиОтображенияШаблоновВДереве();
	Элементы.ФормаСериализацияТаблицыФорматов.Видимость = (Метаданные.Имя = "БиблиотекаРегламентированнойОтчетности");
	Элементы.АдресСервераССО.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОтображатьВДеревеРеализованныеПриИзмененииНаСервере(ОтображатьВДеревеРеализованные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображатьВДеревеРеализованныеПриИзменении(Элемент)
	
	ОтображатьВДеревеРеализованныеПриИзмененииНаСервере(ОтображатьВДеревеРеализованные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаСайтРосстатаНажатие(Элемент)
	Попытка
		ПерейтиПоНавигационнойСсылке(РегламентированнаяОтчетностьКлиентСервер.ПолучитьАдресСтраницыСШаблонамиРосстата());
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось открыть страницу!';
										|en = 'Не удалось открыть страницу!'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаСайтССОНажатие(Элемент)
	Попытка
		ПерейтиПоНавигационнойСсылке(АдресСервераССОРосстата());
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось открыть страницу!';
										|en = 'Не удалось открыть страницу!'"));
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ДобавитьШаблоны();
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьШаблоныНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если НЕ ВебКлиент Тогда
		
		ДополнительныеПараметры = Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'XML-шаблон будет выгружен на диск и открыт. Продолжить?';
							|en = 'XML-шаблон будет выгружен на диск и открыт. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Элементы.СписокКонтекстноеМенюСоздатьОтчет.Доступность = (Неопределено <> Элементы.Список.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	ДобавитьШаблоны();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоны(Команда)
	
	ОбновитьШаблоныИзКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ТекСтроки = Элементы.Список.ВыделенныеСтроки;
		
	Если ТекСтроки.Количество() <> 0 Тогда
		
		КоличествоОшибок = 0;
		
		#Если НЕ ВебКлиент Тогда
			
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			Диалог.Заголовок = "Выберите каталог для сохранения";
			
			Если Диалог.Выбрать() Тогда
				
				КаталогСохранения = ?(Прав(Диалог.Каталог, 1) = ПолучитьРазделительПути(),
					Диалог.Каталог, Диалог.Каталог + ПолучитьРазделительПути());
				
				ШаблоныЭВФ = ПолучитьИзВременногоХранилища(ПолучитьШаблоны(ТекСтроки, КоличествоОшибок));
				
				СписокСуществующихОбъектов = Новый СписокЗначений;
		
				Для Каждого ШаблонЭВФ Из ШаблоныЭВФ Цикл
					
					КороткоеИмяФайла = ШаблонЭВФ.ИмяФайлаШаблона;
					ПолноеИмяСохраняемогоФайла = КаталогСохранения + КороткоеИмяФайла;
					ОбъектСохраняемыйФайл = Новый Файл(ПолноеИмяСохраняемогоФайла);
					
					Если ОбъектСохраняемыйФайл.Существует() Тогда
						СписокСуществующихОбъектов.Добавить(ШаблонЭВФ, КороткоеИмяФайла);
					Иначе
						Попытка
							ШаблонЭВФ.Шаблон.Записать(ПолноеИмяСохраняемогоФайла);
						Исключение
							КоличествоОшибок = КоличествоОшибок + 1;
							ОбщегоНазначенияКлиент.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Во время сохранения файла %1 возникла ошибка:%2';
																							|en = 'Во время сохранения файла %1 возникла ошибка:%2'"), КороткоеИмяФайла, Символы.ПС + ОписаниеОшибки()));
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Если СписокСуществующихОбъектов.Количество() = 1 Тогда
					ШаблонЭВФ = СписокСуществующихОбъектов[0].Значение;
					КороткоеИмяФайла = ШаблонЭВФ.ИмяФайлаШаблона;
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В выбранном каталоге уже существует файл %1.%2Заменить указанный файл?';
																								|en = 'В выбранном каталоге уже существует файл %1.%2Заменить указанный файл?'"),
						КороткоеИмяФайла, Символы.ПС);
					ДополнительныеПараметры = Новый Структура("КаталогСохранения, КороткоеИмяФайла, ТекСтроки, ШаблонЭВФ, КоличествоОшибок", КаталогСохранения, КороткоеИмяФайла, ТекСтроки, ШаблонЭВФ, КоличествоОшибок);
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаменитьСуществующийФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				ИначеЕсли СписокСуществующихОбъектов.Количество() > 1 Тогда
					ДополнительныеПараметры = Новый Структура("КаталогСохранения, ТекСтроки, СписокСуществующихОбъектов, КоличествоОшибок", КаталогСохранения, ТекСтроки, СписокСуществующихОбъектов, КоличествоОшибок);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьЭлементыДляЗаменыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					СписокСуществующихОбъектов.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Файлы существуют. Отметьте файлы для замены.';
																								|en = 'Файлы существуют. Отметьте файлы для замены.'"));
				Иначе
					ПоказатьПредупреждениПослеВыгрузкиШаблонов(КоличествоОшибок, ТекСтроки);
				КонецЕсли;
			КонецЕсли;
			
		#Иначе
			ШаблоныЭВФ = ПолучитьИзВременногоХранилища(ПолучитьШаблоны(ТекСтроки, КоличествоОшибок, Истина));
			
			Для Каждого ШаблонЭВФ Из ШаблоныЭВФ Цикл
				КороткоеИмяФайла = ШаблонЭВФ.ИмяФайлаШаблона;
				НачатьПолучениеФайлаССервера(ШаблонЭВФ.Шаблон, ШаблонЭВФ.ИмяФайлаШаблона);
			КонецЦикла;
		#КонецЕсли
		
	Иначе
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выберите XML-шаблоны, которые следует сохранить на диск, и повторите попытку.%1Для множественного выбора используйте клавишу Ctrl.';
																							|en = 'Выберите XML-шаблоны, которые следует сохранить на диск, и повторите попытку.%1Для множественного выбора используйте клавишу Ctrl.'"), Символы.ПС));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьШаблоныНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныЧерезВебСервис(Элемент)
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбновитьШаблоныЧерезВебСервисНаКлиенте", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ПроверитьОбновления", Истина);
	ОткрытьФормуВыбораШаблоновДляОбновления(ПараметрыФормы, ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресаСервера(Команда)
	ИмяФормыНастройки = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6) + "Настройка";
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаАдресаСервераЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыНастройки, , ЭтотОбъект, Ложь, , , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчет(Команда)
	ТД = Элементы.Список.ТекущиеДанные;
	Если ТД = Неопределено Или Не ЗначениеЗаполнено(ТД.ИмяФайлаШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатОткрытияФормыНаСервере = ОткрытьФормуУниверсальногоОтчетаНаСервере(ТД.ИмяФайлаШаблона, Неопределено);
	
	Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Недостаточно прав.';
														|en = 'Недостаточно прав.'"));
		Возврат;
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Универсальный отчет не найден.';
														|en = 'Универсальный отчет не найден.'"));
		Возврат;
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось открыть отчет.';
														|en = 'Не удалось открыть отчет.'"));
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
		ИмяФормыОтчета = "Отчет." + РезультатОткрытияФормыНаСервере.ИсточникОтчета + ".Форма.ОсновнаяФорма";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОтчета, РезультатОткрытияФормыНаСервере, ВладелецФормы, ИмяФормыОтчета,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СериализацияТаблицыФорматов(Команда)
	ТаблицаФорматов = ПолучитьТекущуюТаблицуФорматов();
	Если Не ЗначениеЗаполнено(ТаблицаФорматов) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить таблицу форматов';
														|en = 'Не удалось получить таблицу форматов'"));
		Возврат;
	КонецЕсли;
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВФ.Заголовок = НСтр("ru = 'Укажите каталог для выгрузки файла';
						|en = 'Укажите каталог для выгрузки файла'");
	ДВФ.МножественныйВыбор = Ложь;
	ДВФ.Показать(Новый ОписаниеОповещения("СериализацияТаблицыФорматовПродолжение", ЭтотОбъект, ТаблицаФорматов));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Асинх Процедура ДобавитьШаблоны()
	Если Не Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда 
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите XML-шаблоны";
	ДиалогВыбораФайла.МножественныйВыбор =  Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.Фильтр = "Файлы XML-шаблонов ЭВФ статистики (*.xml)|*.xml";
	ВыбранныеФайлы = Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	Если ТипЗнч(ВыбранныеФайлы) <> Тип("Массив") Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = ВыбранныеФайлы.Количество();
	РежимОдногоФайла = (КоличествоФайлов = 1);
	
	ОбъектыФайл = Новый Массив;
	КороткиеИменаФайлов = Новый Массив;
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		ОбъектФайл = Новый Файл(ВыбранныйФайл);
		ОбъектыФайл.Добавить(ОбъектФайл);
		КороткиеИменаФайлов.Добавить(ОбъектФайл.Имя);
	КонецЦикла;
	
	Если ХотяБыОдинШаблонПрисутствуетВИБ(КороткиеИменаФайлов) Тогда
		Если РежимОдногоФайла Тогда
			ТекстВопроса = "XML-шаблон с аналогичным именем уже загружен в информационную базу.
				|Заменить существующий XML-шаблон?";
		Иначе
			ТекстВопроса = "Некоторые из выбранных XML-шаблонов уже присутствуют в информационной базе.
				|Продолжить загрузку с заменой XML-шаблонов в информационной базе на XML-шаблоны с диска?";
		КонецЕсли;
		
		Если КодВозвратаДиалога.Да <> Ждать ВопросАсинх(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьШаблоны(КоличествоФайлов, ОбъектыФайл, РежимОдногоФайла);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаписатьШаблоны(КоличествоФайлов, ОбъектыФайл, РежимОдногоФайла)
	КоличествоНезагруженныхШаблонов = 0;
	ШаблоныЭВФ = Новый Массив;
	НеЗагруженныеШаблоны = Новый Массив;
	
	Для Каждого ОбъектФайл Из ОбъектыФайл Цикл
		Если Ждать ОбъектФайл.СуществуетАсинх() Тогда
			ШаблонЭВФ = Новый Структура;
			ШаблонЭВФ.Вставить("ИмяФайлаШаблона", НРег(ОбъектФайл.Имя));
			ШаблонЭВФ.Вставить("Размер", Ждать ОбъектФайл.РазмерАсинх());
			ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ОбъектФайл.ПолноеИмя, УникальныйИдентификатор);
			Если ТипЗнч(ОписаниеПомещенногоФайла) = Тип("ОписаниеПомещенногоФайла") Тогда
				ШаблонЭВФ.Вставить("Шаблон", ПолучитьИзВременногоХранилища(ОписаниеПомещенногоФайла.Адрес));
				ШаблоныЭВФ.Добавить(ШаблонЭВФ);
			Иначе
				Если РежимОдногоФайла тогда
					ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось загрузить XML-шаблон ""%1"":%2';
							|en = 'Не удалось загрузить XML-шаблон ""%1"":%2'"), ОбъектФайл.Имя, ОписаниеОшибки()));
					Возврат;
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось загрузить XML-шаблон ""%1"":%2';
							|en = 'Не удалось загрузить XML-шаблон ""%1"":%2'"), ОбъектФайл.Имя, Символы.ПС + Символы.ПС + ОписаниеОшибки());
					НеЗагруженныеШаблоны.Добавить(ТекстСообщения);
				КонецЕсли;
				
				КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекстСообщения Из НеЗагруженныеШаблоны Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Запись XML-шаблонов...';
					|en = 'Запись XML-шаблонов...'"), , , БиблиотекаКартинок.Записать);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШаблоныЭВФ, Новый УникальныйИдентификатор);
	ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов);
	ПоказатьПредупрежденияПослеЗагрузкиШаблонов(КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупрежденияПослеЗагрузкиШаблонов(КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла)
	
	Если КоличествоНезагруженныхШаблонов = КоличествоФайлов Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось загрузить ни один из указанных XML-шаблонов.';
									|en = 'Не удалось загрузить ни один из указанных XML-шаблонов.'"));
	Иначе
		Если РежимОдногоФайла Тогда
			ТекстПредупреждения = "XML-шаблон успешно загружен.";
		ИначеЕсли КоличествоНезагруженныхШаблонов = 0 Тогда
			ТекстПредупреждения = "Все XML-шаблоны успешно загружены.";
		Иначе
			ТекстПредупреждения = "Загружены " + (КоличествоФайлов - КоличествоНезагруженныхШаблонов) + " из " + КоличествоФайлов + " XML-шаблонов.
			|Остальные XML-шаблоны загрузить на удалось.";
		КонецЕсли;
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), ТекстПредупреждения));
		Оповестить("ИзменениеДанныхРегистраШаблоныЭВФОтчетовСтатистики");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныИзКонфигурации(Интерактивно = Истина) Экспорт
	
	Перем АдресВременногоХранилища;
	Перем КороткиеИменаФайлов;
	
	КоличествоНезагруженныхШаблонов = 0;
	
	Попытка
		ДобавитьШаблоныИзКонфигурации(АдресВременногоХранилища, КороткиеИменаФайлов, КоличествоНезагруженныхШаблонов);
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	КоличествоФайлов = КороткиеИменаФайлов.Количество();
	РежимОдногоФайла = (КоличествоФайлов = 1);
	
	Если Интерактивно И ХотяБыОдинШаблонПрисутствуетВИБ(КороткиеИменаФайлов) Тогда
		
		Если РежимОдногоФайла Тогда
			ТекстВопроса = "XML-шаблон с аналогичным именем уже загружен в информационную базу.
							|Заменить существующий XML-шаблон?";
		Иначе
			ТекстВопроса = "Некоторые из выбранных XML-шаблонов уже присутствуют в информационной базе.
							|Продолжить загрузку с заменой XML-шаблонов в информационной базе на XML-шаблоны из конфигурации (если версия шаблона выше текущей)?";
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла", АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаменитьШаблоныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																										|en = '%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьШаблоныИзКонфигурации(АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменитьШаблоныЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	АдресВременногоХранилища = ДополнительныеПараметры.АдресВременногоХранилища;
	Интерактивно = ДополнительныеПараметры.Интерактивно;
	КоличествоНезагруженныхШаблонов = ДополнительныеПараметры.КоличествоНезагруженныхШаблонов;
	КоличествоФайлов = ДополнительныеПараметры.КоличествоФайлов;
	РежимОдногоФайла = ДополнительныеПараметры.РежимОдногоФайла;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагрузитьШаблоныИзКонфигурации(АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблоныИзКонфигурации(АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла)
	Состояние(НСтр("ru = 'Запись XML-шаблонов...';
					|en = 'Запись XML-шаблонов...'"), , , БиблиотекаКартинок.Записать);
	ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов);
	
	Если Интерактивно Тогда
		Если КоличествоНезагруженныхШаблонов = КоличествоФайлов Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось загрузить ни один из указанных XML-шаблонов.';
										|en = 'Не удалось загрузить ни один из указанных XML-шаблонов.'"));
		Иначе
			ОповеститьМножественныеШаблоны(РежимОдногоФайла, КоличествоНезагруженныхШаблонов, КоличествоФайлов);
		КонецЕсли;
	Иначе
		Состояние();
		Оповестить("ИзменениеДанныхРегистраШаблоныЭВФОтчетовСтатистики");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОповеститьМножественныеШаблоны(РежимОдногоФайла, КоличествоНезагруженныхШаблонов, КоличествоФайлов)
	Если РежимОдногоФайла Тогда
		ТекстПредупреждения = "XML-шаблон успешно загружен.";
	ИначеЕсли КоличествоНезагруженныхШаблонов = 0 Тогда
		ТекстПредупреждения = "Все XML-шаблоны успешно загружены.";
	Иначе
		ТекстПредупреждения = "Загружены " + (КоличествоФайлов - КоличествоНезагруженныхШаблонов) + " из " + КоличествоФайлов + " XML-шаблонов.
		|Остальные XML-шаблоны загрузить на удалось.";
	КонецЕсли;
	
	Ждать ПредупреждениеАсинх(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), ТекстПредупреждения));
	Состояние();
	Оповестить("ИзменениеДанныхРегистраШаблоныЭВФОтчетовСтатистики");
КонецПроцедуры

&НаСервере
Процедура ДобавитьШаблоныИзКонфигурации(АдресВременногоХранилища, КороткиеИменаФайлов, КоличествоНезагруженныхШаблонов)
	
	ВремФайлАрхиваШаблонов = ПолучитьИмяВременногоФайла("zip");
	АрхивШаблоновЭВФДвоичныеДанные = РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.ПолучитьМакет("ШаблоныЭВФ");
	Попытка
		АрхивШаблоновЭВФДвоичныеДанные.Записать(ВремФайлАрхиваШаблонов);
	Исключение
		УдалитьФайлы(ВремФайлАрхиваШаблонов);
		ВызватьИсключение "Не удалось сохранить архив шаблонов ЭВФ во временный файл." + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ВремКаталог = ПолучитьИмяВременногоФайла("");
	ВремКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВремКаталог);
	СоздатьКаталог(ВремКаталог);
	
	Попытка
		ЗИП = Новый ЧтениеZipФайла(ВремФайлАрхиваШаблонов);
		ЗИП.ИзвлечьВсе(ВремКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЗИП.Закрыть();
	Исключение
		УдалитьФайлы(ВремКаталог);
		ВызватьИсключение "Не удалось распаковать архив шаблонов ЭВФ.
				|" + ИнформацияОбОшибке().Описание;
		Возврат;
	КонецПопытки;
	
	ОбъектыФайл = НайтиФайлы(ВремКаталог, "*.xml", Ложь);
	
	КороткиеИменаФайлов = Новый Массив;
	
	ШаблоныЭВФ = Новый Массив;
	
	Для Каждого ОбъектФайл Из ОбъектыФайл Цикл
		Если ОбъектФайл.Существует() Тогда
			
			ШаблонЭВФ = Новый Структура;
			ШаблонЭВФ.Вставить("ИмяФайлаШаблона", НРег(ОбъектФайл.Имя));
			ШаблонЭВФ.Вставить("Размер", ОбъектФайл.Размер());
			
			Попытка
				
				ШаблонЭВФ.Вставить("Шаблон", Новый ДвоичныеДанные(ОбъектФайл.ПолноеИмя));
				ШаблоныЭВФ.Добавить(ШаблонЭВФ);
				
				КороткиеИменаФайлов.Добавить(ОбъектФайл.Имя);
				
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось загрузить XML-шаблон ""%1"":%2';
																				|en = 'Не удалось загрузить XML-шаблон ""%1"":%2'"), ОбъектФайл.Имя, Символы.ПС + ОписаниеОшибки()));
				КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШаблоныЭВФ, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ВремФайлАрхиваШаблонов);
	Попытка
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ХотяБыОдинШаблонПрисутствуетВИБ(КороткиеИменаФайлов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
	                      |ГДЕ
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона В(&ВыбранныеФайлы)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона");
	Запрос.УстановитьПараметр("ВыбранныеФайлы", КороткиеИменаФайлов);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ПроверкаНаличияШаблонаВБазе(ШаблонЭВФ)
	Если СтрДлина(ШаблонЭВФ.ОКУД) = 6 Тогда 
		ОКУД = "0" + ШаблонЭВФ.ОКУД;
	ИначеЕсли СтрДлина(ШаблонЭВФ.ОКУД) = 7 Тогда 
		ОКУД = ШаблонЭВФ.ОКУД;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона КАК ИмяФайлаШаблона
		|ИЗ
		|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
		|ГДЕ
		|	ШаблоныЭВФОтчетовСтатистики.ОКУД = &ОКУД
		|	И ШаблоныЭВФОтчетовСтатистики.КодШаблона = &КодШаблона
		|	И ШаблоныЭВФОтчетовСтатистики.Версия = &Версия
		|	И ШаблоныЭВФОтчетовСтатистики.Размер = &Размер
		|	И ШаблоныЭВФОтчетовСтатистики.КодПериодичности = &КодПериодичности";
	
	Запрос.УстановитьПараметр("Версия", ШаблонЭВФ.Версия);
	Запрос.УстановитьПараметр("КодПериодичности", ШаблонЭВФ.КодПериодичности);
	Запрос.УстановитьПараметр("КодШаблона", ШаблонЭВФ.КодШаблона);
	Запрос.УстановитьПараметр("ОКУД", ОКУД);
	Запрос.УстановитьПараметр("Размер", ШаблонЭВФ.Размер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать().Следующий();
КонецФункции

&НаСервере
Процедура ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов)
	ШаблоныЭВФ = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для Каждого ШаблонЭВФ Из ШаблоныЭВФ Цикл
		
		Если НЕ ДобавитьРеквизитыИзФайлаШаблона(ШаблонЭВФ) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не распознан формат XML-шаблона ""%1""';
					|en = 'Не распознан формат XML-шаблона ""%1""'"), ШаблонЭВФ.ИмяФайлаШаблона));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ШаблонЭВФ.ВерсияФормата, "1.3") = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия формата XML-шаблона ""%1"" не соответствует версии ""1.3""';
					|en = 'Версия формата XML-шаблона ""%1"" не соответствует версии ""1.3""'"), ШаблонЭВФ.ИмяФайлаШаблона));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			Продолжить;
		КонецЕсли;
		
		Если ПроверкаНаличияШаблонаВБазе(ШаблонЭВФ) Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаШаблона = ШаблонЭВФ.ОКУД + "_" + ШаблонЭВФ.КодШаблона + ".xml";
		МенеджерЗаписи = РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Если ДатаВерсии(МенеджерЗаписи.Версия) > ДатаВерсии(ШаблонЭВФ.Версия) Тогда
				КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		
		МенеджерЗаписи.ОКУД             = ШаблонЭВФ.ОКУД;
		МенеджерЗаписи.КодШаблона       = ШаблонЭВФ.КодШаблона;
		МенеджерЗаписи.Наименование     = ШаблонЭВФ.Наименование;
		МенеджерЗаписи.КодПериодичности = ШаблонЭВФ.КодПериодичности;
		МенеджерЗаписи.КодФормы         = ШаблонЭВФ.КодФормы;
		МенеджерЗаписи.Шифр             = ШаблонЭВФ.Шифр;
		МенеджерЗаписи.Версия           = ШаблонЭВФ.Версия;
		
		МенеджерЗаписи.Размер           = ШаблонЭВФ.Размер;
		МенеджерЗаписи.ДатаДобавления   = ТекущаяДатаСеанса();
		
		Попытка
			МенеджерЗаписи.Шаблон = Новый ХранилищеЗначения(ШаблонЭВФ.Шаблон, Новый СжатиеДанных(8));
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать XML-шаблон ""%1"":%2';
					|en = 'Не удалось записать XML-шаблон ""%1"":%2'"), ШаблонЭВФ.ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки()));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьРеквизитыИзФайлаШаблона(РеквизитыШаблона)
	
	Если ТипЗнч(РеквизитыШаблона) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВремФайлШаблона = ПолучитьИмяВременногоФайла("." + РеквизитыШаблона.ИмяФайлаШаблона);
	
	Попытка
		РеквизитыШаблона.Шаблон.Записать(ВремФайлШаблона);
	Исключение
		УдалитьФайлы(ВремФайлШаблона);
		Возврат Ложь;
	КонецПопытки;

	АтрибутыШаблона = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ВремФайлШаблона);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если НРег(ОбъектЧтениеXML.Имя) = "metaform" Тогда
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если АтрибутыШаблона[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							АтрибутыШаблона.Вставить(СтрЗаменить(ОбъектЧтениеXML.Имя, "-", "_"), ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АтрибутыШаблона["OKUD"])
			И ТипЗнч(АтрибутыШаблона["OKUD"]) = Тип("Строка")
			И СтрДлина(АтрибутыШаблона["OKUD"]) < 7
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АтрибутыШаблона["OKUD"]) Тогда 
			
			АтрибутыШаблона["OKUD"] = Прав("0000000" + АтрибутыШаблона["OKUD"], 7);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
		УдалитьФайлы(ВремФайлШаблона);
		
	Исключение
		
		УдалитьФайлы(ВремФайлШаблона);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если АтрибутыШаблона.Количество() = 0 Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	РеквизитыШаблона.Вставить("ОКУД",             АтрибутыШаблона["OKUD"]);
	РеквизитыШаблона.Вставить("КодШаблона",       АтрибутыШаблона["code"]);
	РеквизитыШаблона.Вставить("Наименование",     ВРег(Лев(АтрибутыШаблона["name"], 1)) + Сред(АтрибутыШаблона["name"], 2));
	РеквизитыШаблона.Вставить("КодПериодичности", Число("0" + АтрибутыШаблона["idp"]));
	РеквизитыШаблона.Вставить("КодФормы",         Число("0" + АтрибутыШаблона["idf"]));
	РеквизитыШаблона.Вставить("Шифр",             АтрибутыШаблона["shifr"]);
	РеквизитыШаблона.Вставить("Версия",           АтрибутыШаблона["version"]);
	РеквизитыШаблона.Вставить("ВерсияФормата",    АтрибутыШаблона["format_version"]);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаВерсии(СтрДата)
	
	Разделители = "-.,/";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если СтрНайти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли СтрНайти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	День  = Макс(1, Число("0" + СокрЛП(МассивПолей[0])));
	Месяц = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Год   = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

&НаКлиенте
Процедура ОтметитьЭлементыДляЗаменыЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ТекСтроки = ДополнительныеПараметры.ТекСтроки;
	СписокСуществующихОбъектов = ДополнительныеПараметры.СписокСуществующихОбъектов;
	КоличествоОшибок = ДополнительныеПараметры.КоличествоОшибок;
	
	Для Каждого ЭлементСписка ИЗ СписокСуществующихОбъектов Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ШаблонМашиночитаемойФормы = ЭлементСписка.Значение;
		КороткоеИмяФайла = ШаблонМашиночитаемойФормы.ИмяФайлаШаблона;
		ПолноеИмяСохраняемогоФайла = КаталогСохранения + КороткоеИмяФайла;
		Попытка
			ШаблонМашиночитаемойФормы.Шаблон.Записать(ПолноеИмяСохраняемогоФайла);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Во время сохранения файла %1 возникла ошибка:%2';
																			|en = 'Во время сохранения файла %1 возникла ошибка:%2'"), КороткоеИмяФайла, Символы.ПС + ОписаниеОшибки()));
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	ПоказатьПредупреждениПослеВыгрузкиШаблонов(КоличествоОшибок, ТекСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменитьСуществующийФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КороткоеИмяФайла = ДополнительныеПараметры.КороткоеИмяФайла;
	ТекСтроки = ДополнительныеПараметры.ТекСтроки;
	ШаблонЭВФ = ДополнительныеПараметры.ШаблонЭВФ;
	КоличествоОшибок = ДополнительныеПараметры.КоличествоОшибок;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			ПолноеИмяСохраняемогоФайла = КаталогСохранения + КороткоеИмяФайла;
			ШаблонЭВФ.Шаблон.Записать(ПолноеИмяСохраняемогоФайла);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Во время сохранения файла %1 возникла ошибка:%2';
																			|en = 'Во время сохранения файла %1 возникла ошибка:%2'"), КороткоеИмяФайла, Символы.ПС + ОписаниеОшибки()));
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЕсли;
	
	ПоказатьПредупреждениПослеВыгрузкиШаблонов(КоличествоОшибок, ТекСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениПослеВыгрузкиШаблонов(Знач КоличествоОшибок, Знач ТекСтроки)
	
	Если ТекСтроки.Количество() = 1 Тогда
		Если КоличествоОшибок = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'XML-шаблон успешно выгружен.';
										|en = 'XML-шаблон успешно выгружен.'"));
		КонецЕсли;
	Иначе
		Если КоличествоОшибок = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'XML-шаблоны успешно выгружены.';
										|en = 'XML-шаблоны успешно выгружены.'"));
		Иначе
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Во время сохранения произошли ошибки. Не удалось сохранить XML-шаблонов: %1.';
																								|en = 'Во время сохранения произошли ошибки. Не удалось сохранить XML-шаблонов: %1.'"), КоличествоОшибок));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьШаблоны(ТекСтроки, КоличествоОшибок, ВозвращатьВСтруктуреСсылкуНаШаблонВоВременномХранилище = Ложь)
	
	ИменаФайловШаблонов = Новый Массив;
	
	Для Каждого ТекСтрока Из ТекСтроки Цикл
		ИменаФайловШаблонов.Добавить(ТекСтрока.ИмяФайлаШаблона);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона КАК ИмяФайлаШаблона,
	|	ШаблоныЭВФОтчетовСтатистики.Шаблон
	|ИЗ
	|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
	|ГДЕ
	|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона В(&ИменаФайловШаблона)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяФайлаШаблона");
	
	Запрос.УстановитьПараметр("ИменаФайловШаблона", ИменаФайловШаблонов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблоныЭВФ = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонЭВФ = Новый Структура;
		ШаблонЭВФ.Вставить("ИмяФайлаШаблона", Выборка.ИмяФайлаШаблона);
			
		Попытка
			Если ВозвращатьВСтруктуреСсылкуНаШаблонВоВременномХранилище Тогда
				ШаблонЭВФ.Вставить("Шаблон", ПоместитьВоВременноеХранилище(Выборка.Шаблон.Получить(), УникальныйИдентификатор));
			Иначе
				ШаблонЭВФ.Вставить("Шаблон", Выборка.Шаблон.Получить());
			КонецЕсли;
			
			ШаблоныЭВФ.Добавить(ШаблонЭВФ);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Во время получения XML-шаблона %1 возникла ошибка:%2';
																			|en = 'Во время получения XML-шаблона %1 возникла ошибка:%2'"), Выборка.ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки()));
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ШаблоныЭВФ, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УдалитьШаблоныНаКлиенте()
	
	ТекСтроки = Элементы.Список.ВыделенныеСтроки;
	
	КоличествоСтрок = ТекСтроки.Количество();
	
	Если КоличествоСтрок <> 0 Тогда
		
		ТекстВопроса = ?(КоличествоСтрок = 1, "Удалить XML-шаблон?", "Удалить выбранные XML-шаблоны?");
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьШаблоныНаКлиентеЗавершение", ЭтотОбъект, Новый Структура("ТекСтроки", ТекСтроки));
		ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																										|en = '%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выберите XML-шаблоны, которые следует удалить, и повторите попытку.%1Для множественного выбора используйте клавишу Ctrl.';
																							|en = 'Выберите XML-шаблоны, которые следует удалить, и повторите попытку.%1Для множественного выбора используйте клавишу Ctrl.'"), Символы.ПС));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьШаблоныНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекСтроки = ДополнительныеПараметры.ТекСтроки;

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьШаблоныНаСервере(ТекСтроки);
	
	Оповестить("ИзменениеДанныхРегистраШаблоныЭВФОтчетовСтатистики");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШаблоныНаСервере(ТекСтроки)
	
	ИменаФайловШаблонов = Новый Массив;
	Для Каждого ТекСтрока Из ТекСтроки Цикл
		ИменаФайловШаблонов.Добавить(ТекСтрока.ИмяФайлаШаблона);
	КонецЦикла;
	
	МенеджерЗаписи = РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.СоздатьМенеджерЗаписи();
	Для Каждого ИмяФайлаШаблона Из ИменаФайловШаблонов Цикл
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюЭУ()
	
	ЕстьДоступНаЗапись = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШаблоныЭВФОтчетовСтатистики);
	
	Если НЕ ЕстьДоступНаЗапись Тогда
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ФормаЗагрузить.Доступность = Ложь;
		Элементы.ФормаУдалить.Доступность = Ложь;
		Элементы.ОтображатьВДеревеРеализованные.Доступность = Ложь;
		Элементы.ГруппаОбновитьЧерезВебСервис.Доступность = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСервераСбораОтчетностиРосстата) Тогда
		Элементы.АдресСервераССО.Доступность = Ложь;
	Иначе
		Элементы.АдресСервераССО.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтображенияШаблоновВДереве()
	
	ОтображатьВДеревеРеализованные = Истина;
	
	Попытка
		ТекущиеНастройки = ХранилищеСистемныхНастроек.Загрузить("СтатистическаяОтчетность.ОтображатьВДеревеРеализованные", "ОтображатьВДеревеРеализованные");
		Если ТипЗнч(ТекущиеНастройки) = Тип("Булево") Тогда 
			ОтображатьВДеревеРеализованные = ТекущиеНастройки;
		КонецЕсли;
	Исключение
		ОтображатьВДеревеРеализованные = Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтображатьВДеревеРеализованныеПриИзмененииНаСервере(ОтображатьВДеревеРеализованные)
	
	ХранилищеСистемныхНастроек.Сохранить("СтатистическаяОтчетность.ОтображатьВДеревеРеализованные", "ОтображатьВДеревеРеализованные", ОтображатьВДеревеРеализованные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
		ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
		
		Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		АдресВременногоХранилища = ПолучитьШаблонНаСервере(ВыбраннаяСтрока);
		
		Если НЕ АдресВременногоХранилища = Неопределено Тогда
			ШаблонЭВФ = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
			ВремФайл = ПолучитьИмяВременногоФайла("." + ШаблонЭВФ.ИмяФайлаШаблона);
			
			Попытка
				ШаблонЭВФ.Шаблон.Записать(ВремФайл);
			Исключение
				УдалитьФайлы(ВремФайл);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось выгрузить XML-шаблон во временный файл на диске:%1';
																				|en = 'Не удалось выгрузить XML-шаблон во временный файл на диске:%1'"), Символы.ПС + ОписаниеОшибки()));
				Возврат;
			КонецПопытки;
			
			ЗапуститьПриложение(ВремФайл, , Истина);
			УдалитьФайлы(ВремФайл);
		КонецЕсли;
		
	#КонецЕсли
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонНаСервере(ВыбраннаяСтрока)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныЭВФОтчетовСтатистики.Шаблон,
	|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона
	|ИЗ
	|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
	|ГДЕ
	|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона = &ИмяФайлаШаблона");
	Запрос.УстановитьПараметр("ИмяФайлаШаблона", ВыбраннаяСтрока.ИмяФайлаШаблона);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ШаблонЭВФ = Новый Структура("ИмяФайлаШаблона, Шаблон");
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Если Выборка.Следующий() Тогда
		ШаблонЭВФ.Вставить("ИмяФайлаШаблона", Выборка.ИмяФайлаШаблона);
		
		Попытка
			ШаблонЭВФ.Вставить("Шаблон", Выборка.Шаблон.Получить());
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить XML-шаблон из хранилища:%1';
																			|en = 'Не удалось получить XML-шаблон из хранилища:%1'"), Символы.ПС + ОписаниеОшибки()));
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ШаблонЭВФ, Новый УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ОбновитьШаблоныЧерезВебСервисНаКлиенте(РезультатВыбораШаблонов, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбораШаблонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Активизировать();
	
	РезультатДлительнойОперации = ОбновитьШаблоныЧерезВебСервисНаСервере(РезультатВыбораШаблонов);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется загрузка шаблонов с сайта';
											|en = 'Выполняется загрузка шаблонов с сайта'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьШаблоныЧерезВебСервисНаКлиентеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатДлительнойОперации, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныЧерезВебСервисНаКлиентеЗавершение(РезультатОбновления, ДополнительныеПараметры) Экспорт
	
	Если РезультатОбновления = Неопределено
		ИЛИ РезультатОбновления.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженоШаблонов = ПолучитьИзВременногоХранилища(РезультатОбновления.АдресДополнительногоРезультата);
	КоличествоНезагруженныхШаблонов = 0;
	КоличествоШаблонов = 0;
	Если ТипЗнч(ЗагруженоШаблонов) = Тип("Структура") Тогда
		ЗагруженоШаблонов.Свойство("Незагружено", КоличествоНезагруженныхШаблонов);
		ЗагруженоШаблонов.Свойство("Всего", КоличествоШаблонов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШаблоныИзКонфигурации(
		РезультатОбновления.АдресРезультата,
		Истина,
		КоличествоНезагруженныхШаблонов,
		КоличествоШаблонов,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьШаблоныЧерезВебСервисНаСервере(СвойстваШаблонов)
	
	УправлениеДоступностьюЭУ();
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = РегламентированнаяОтчетностьПовтИсп.ПолучитьНаименованиеЗаданияОбновленияШаблонов();
	ПараметрыЗапуска.КлючФоновогоЗадания = РегламентированнаяОтчетностьПовтИсп.ПолучитьКлючЗаданияОбновленияШаблонов();
	ПараметрыЗапуска.ДополнительныйРезультат = Истина;
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("СвойстваШаблонов", СвойстваШаблонов.Выгрузить());
	
	ИмяПроцедуры = "РегистрыСведений." + СтрРазделить(ИмяФормы, ".")[1] + ".ЗагрузитьШаблоныЧерезСервисВебСбора";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораШаблоновДляОбновления(ПараметрыФормы, ОписаниеОповещенияОЗакрытии = Неопределено)
	ИмяФормыВыбораШаблонов = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6) + "ВыборШаблонов";
	ОткрытьФорму(ИмяФормыВыбораШаблонов, ПараметрыФормы, ЭтотОбъект, Ложь, , , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресаСервераЗавершение(АдресСервера, ДополнительныеПараметры) Экспорт
	
	Если АдресСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.АдресСервераССО.Заголовок = "Перейти на сайт сервиса сбора отчетности";
	
	Если ЗначениеЗаполнено(АдресСервера) Тогда
		НазваниеТОГС = "";
		АдресСервераСбораОтчетностиРосстата = АдресСервера;
		Элементы.АдресСервераССО.Доступность = Истина;
		АдресСервераССО = АдресСервераССОРосстата(НазваниеТОГС);
		
		Если ЗначениеЗаполнено(НазваниеТОГС) Тогда
			Элементы.АдресСервераССО.Заголовок =
				Элементы.АдресСервераССО.Заголовок + " (" + НазваниеТОГС + ")";
		КонецЕсли;
	Иначе
		АдресСервераСбораОтчетностиРосстата = "";
		Элементы.АдресСервераССО.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АдресСервераССОРосстата(НазваниеТОГС = "") Экспорт
	
	АдресСервера = АдресСервераСбораОтчетностиРосстата;
	
	НазваниеТОГС = "";
	
	НачПозиция = СтрНайти(АдресСервера, "{");
	Если НачПозиция > 0 Тогда
		КонПозиция = СтрНайти(АдресСервера, "}", , НачПозиция);
		Если КонПозиция > НачПозиция Тогда
			НазваниеТОГС = Сред(АдресСервера, НачПозиция + 1, КонПозиция - НачПозиция - 1);
		Иначе
			НазваниеТОГС = Сред(АдресСервера, НачПозиция + 1);
		КонецЕсли;
		АдресСервера = Лев(АдресСервера, НачПозиция - 1);
	КонецЕсли;
	
	Возврат АдресСервера;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытьФормуУниверсальногоОтчетаНаСервере(ИмяФайлаШаблона, ОрганизацияОтчета = Неопределено)
	
	ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы";
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация", ОрганизацияОтчета);
	ПараметрыТекФормы.Вставить("ИмяФайлаШаблона", ИмяФайлаШаблона);
	ПараметрыТекФормы.Вставить("ИсточникОтчета", ИсточникОтчета);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаКлиенте
Процедура СериализацияТаблицыФорматовПродолжение(Каталог, ТаблицаФорматов) Экспорт
	Если ТипЗнч(Каталог) = Тип("Массив")
		И Каталог.Количество() > 0 
		И ТипЗнч(Каталог[0]) = Тип("Строка")
		И ЗначениеЗаполнено(Каталог[0]) Тогда 
		
		Путь = Каталог[0] + ПолучитьРазделительПути();
	ИначеЕсли ТипЗнч(Каталог) = Тип("Строка")
		И ЗначениеЗаполнено(Каталог) Тогда
		
		Путь = Каталог[0] + ПолучитьРазделительПути();
	Иначе
		Возврат;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТаблицаФорматов.МетаданныеТФ);
	ТД.НачатьЗапись(Новый ОписаниеОповещения("СериализацияТаблицыФорматовЗавершение", ЭтотОбъект, Новый Структура("Путь, Имя, Зиповать", Путь, "stat_meta.xml", Ложь)), Путь + "stat_meta.xml");
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТаблицаФорматов.ДанныеТФ);
	ТД.НачатьЗапись(Новый ОписаниеОповещения("СериализацияТаблицыФорматовЗавершение", ЭтотОбъект, Новый Структура("Путь, Имя, Зиповать", Путь, ТаблицаФорматов.ИмяФайла, Истина)), Путь + ТаблицаФорматов.ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СериализацияТаблицыФорматовЗавершение(Результат, ДП) Экспорт
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Файл с форматами сохранен в ';
													|en = 'Файл с форматами сохранен в '") + ДП.Путь + ДП.Имя);
	Если ДП.Зиповать Тогда 
#Если (Не ВебКлиент) И (Не МобильныйКлиент) Тогда
		ИмяАрхива = ДП.Путь + "stat_" + СтрЗаменить(ДП.Имя, ".xml", ".zip");
		ЗЗФ = Новый ЗаписьZipФайла(ИмяАрхива,,,МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
		ЗЗФ.Добавить(ДП.Путь + ДП.Имя, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
		ЗЗФ.Записать();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Файл с форматами сохранен в ';
														|en = 'Файл с форматами сохранен в '") + ИмяАрхива);
#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Арихив может быть сохранен только в тонком/толстом клиенте. Необходимо заархиивировать самостоятельно';
														|en = 'Арихив может быть сохранен только в тонком/толстом клиенте. Необходимо заархиивировать самостоятельно'"));
#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюТаблицуФорматов()
	Попытка
		ШаблоныЭВФОтчетовСтатистики = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ШаблоныЭВФОтчетовСтатистики");
		Если ШаблоныЭВФОтчетовСтатистики = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		СвойстваМодуля = Неопределено;
		ТаблицаФорматов = ШаблоныЭВФОтчетовСтатистики.СписокШаблоновСервисаВебСбора(СвойстваМодуля, Истина, Ложь);
		ТаблицаФорматов.Сортировать("ОКУД,Код,Версия");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.Отступ = Истина;
		ЗаписьXML.УстановитьСтроку("utf-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("format_table_meta");
		
		ДатаПолучения = ТекущаяДатаСеанса();
		РазностьДат = ДатаПолучения - НачалоДня(Дата("20000101"));
		РазностьДат16Стр = "";
		Пока РазностьДат <> 0 Цикл
			РазностьДат16Стр = Сред("0123456789abcdef", РазностьДат % 16 + 1, 1) + РазностьДат16Стр;
			РазностьДат = Цел(РазностьДат / 16);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьАтрибут("FName", РазностьДат16Стр);
		ЗаписьXML.ЗаписатьАтрибут("RefreshDate", Формат(ДатаПолучения, "ДФ=dd-MM-yyyy; ДП=01-01-0001"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		МетаданныеТФ = ЗаписьXML.Закрыть();
		ИмяФайла = РазностьДат16Стр + ".xml";
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.Отступ = Истина;
		ЗаписьXML.УстановитьСтроку("utf-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("format_table");
		
		Для Каждого Стр Из ТаблицаФорматов Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("form");
			ЗаписьXML.ЗаписатьАтрибут("Code", Стр["Код"]);
			ЗаписьXML.ЗаписатьАтрибут("OKUD", Прав("00000000" + Стр["ОКУД"], 7));
			ЗаписьXML.ЗаписатьАтрибут("Version", Стр["Версия"]);
			ЗаписьXML.ЗаписатьАтрибут("RefreshDate", Формат(Стр["ДатаОбновления"], "ДФ=dd-MM-yyyy; ДП=01-01-0001"));
			ЗаписьXML.ЗаписатьАтрибут("Actual", ?(Стр["ЭтоАрхив"], "0", "1"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ДанныеТФ = ЗаписьXML.Закрыть();
		Возврат Новый Структура("МетаданныеТФ, ИмяФайла, ДанныеТФ", МетаданныеТФ, ИмяФайла, ДанныеТФ);
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

#КонецОбласти
