#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи)
		ИЛИ Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		ЗаполнитьПорядокПримененияНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ЕстьДополнительныйОтборДт Тогда
		КомпоновщикНастроекОтборОбъектУчетаДт.ЗагрузитьНастройки(ТекущийОбъект.ДополнительныйОтборДт.Получить());
	КонецЕсли;
	Если ТекущийОбъект.ЕстьДополнительныйОтборКт Тогда
		КомпоновщикНастроекОтборОбъектУчетаКт.ЗагрузитьНастройки(ТекущийОбъект.ДополнительныйОтборКт.Получить());
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УстановитьОпределениеСчетаУчетаНастройкойОбъекта("Дт");
	УстановитьОпределениеСчетаУчетаНастройкойОбъекта("Кт");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиОтборовВЗаписьРегистра(ТекущийОбъект, "Дт");
	НастройкиОтборовВЗаписьРегистра(ТекущийОбъект, "Кт");
	НастройкиЗаполненияСубконтоВЗаписьРегистра(ТекущийОбъект, "Дт");
	НастройкиЗаполненияСубконтоВЗаписьРегистра(ТекущийОбъект, "Кт");
	
	УстановитьЗначениеДолгосрочный(ТекущийОбъект, "Дт");
	УстановитьЗначениеДолгосрочный(ТекущийОбъект, "Кт");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьСсылкуНастройкиПоКорреспонденции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	ПланСчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПроводокПриИзменении(Элемент)
	НастройкаФормированияПроводокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантПримененияПоследующихНастроекПриИзменении(Элемент)
	Запись.ПрименятьПоследующиеНастройки = ?(ВариантПримененияПоследующихНастроек = 1, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НеОтражаетсяНаСчетахПриИзменении(Элемент)
	НеОтражаетсяНаСчетахУчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьЗнакРесурсовПриИзменении(Элемент)
	ИнвертироватьЗнакРесурсовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаДтДополнительныйОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаДтДополнительныйОтборПослеУдаления(Элемент)
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаКтДополнительныйОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаКтДополнительныйОтборПослеУдаления(Элемент)
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаДтПриИзменении(Элемент)
	ОбъектУчетаПриИзмененииСервер("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбъектУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаКтПриИзменении(Элемент)
	ОбъектУчетаПриИзмененииСервер("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбъектУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ДолгосрочныйДтПриИзменении(Элемент)
	ДолгосрочныйПриИзмененииНаСервере("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ДолгосрочныйКтПриИзменении(Элемент)
	ДолгосрочныйПриИзмененииНаСервере("Кт");
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаИзНастройкиОбъектаДтПриИзменении(Элемент)
	СчетУчетаИзНастройкиОбъектаПриИзмененииНаСервере("Дт");
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаИзНастройкиОбъектаКтПриИзменении(Элемент)
	СчетУчетаИзНастройкиОбъектаПриИзмененииНаСервере("Кт");
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаДтПриИзменении(Элемент)
	СчетУчетаПриИзмененииСервер("Дт");
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаКтПриИзменении(Элемент)
	СчетУчетаПриИзмененииСервер("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскаяНастройкаЗаполненияСубконтоДтПриИзменении(Элемент)
	ПользовательскаяНастройкаЗаполненияСубконтоПриИзмененииСервер("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскаяНастройкаЗаполненияСубконтоКтПриИзменении(Элемент)
	ПользовательскаяНастройкаЗаполненияСубконтоПриИзмененииСервер("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ДтКт)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТекущаяСтрока", Запись["ОбъектУчета" + ДтКт]);
	ПараметрыФормы.Вставить("СкрыватьНесобственныеЦенности", Истина);
	ПараметрыФормы.Вставить("НастройкаФормированияПроводок", Запись.НастройкаФормированияПроводок);
	
	ОткрытьФорму("Перечисление.ОбъектыФинансовогоУчета.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаполнениеСубконтоДт

&НаКлиенте
Процедура ЗаполнениеСубконтоДтПриАктивизацииСтроки(Элемент)
	ЗаполнениеСубконтоПриАктивизацииСтроки(Элемент, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоДтПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьЗаголовокГруппыНастройкиСубконто("Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоДтПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоДтПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	ПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоДтПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоДтСпособЗаполненияСубконтоПриИзменении(Элемент)
	СпособЗаполненияПриИзменении(Элемент,  "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненияСубконтоДтУказанноеЗначениеСубконтоПриИзменении(Элемент)
	УказанноеЗначениеПриИзменении(Элемент, "Дт");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаполнениеСубконтоКт

&НаКлиенте
Процедура ЗаполненияСубконтоКтПриАктивизацииСтроки(Элемент)
	ЗаполнениеСубконтоПриАктивизацииСтроки(Элемент, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьЗаголовокГруппыНастройкиСубконто("Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	ПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтУказанноеЗначениеСубконтоПриИзменении(Элемент)
	УказанноеЗначениеПриИзменении(Элемент, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСубконтоКтСпособЗаполненияСубконтоПриИзменении(Элемент)
	СпособЗаполненияПриИзменении(Элемент, "Кт");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализКорреспонденции(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализКорреспонденцийПоДокументам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрОтбор = Новый Структура();
	ПараметрОтбор.Вставить("ДолгосрочныйДт", Ложь);
	ПараметрОтбор.Вставить("ДолгосрочныйКт", Ложь);
	УстановитьЗначениеДолгосрочный(ПараметрОтбор, "Дт");
	УстановитьЗначениеДолгосрочный(ПараметрОтбор, "Кт");
	Если ЗначениеЗаполнено(Запись.ПланСчетов) Тогда
		ПараметрОтбор.Вставить("ПланСчетов", Запись.ПланСчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.НастройкаФормированияПроводок) Тогда
		ПараметрОтбор.Вставить("НастройкаФормированияПроводок", Запись.НастройкаФормированияПроводок);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", ПараметрОтбор);
	
	ЗначенияПользовательскихНастроек = Новый Структура();
	Если ЗначениеЗаполнено(Запись.ОбъектУчетаДт) Тогда
		ЗначенияПользовательскихНастроек.Вставить("ОбъектУчетаДт", Запись.ОбъектУчетаДт);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.ОбъектУчетаКт) Тогда
		ЗначенияПользовательскихНастроек.Вставить("ОбъектУчетаКт", Запись.ОбъектУчетаКт);
	КонецЕсли;
	Если ЗначенияПользовательскихНастроек.Количество() > 0 Тогда
		ПользовательскиеНастройки = ПользовательскиеНастройкиОтчетаАнализКорреспонденций(
			"АнализКорреспонденцийОперативногоУчета", ЗначенияПользовательскихНастроек);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	КонецЕсли;
	
	НастройкиДополнительныхОтборов = НастройкиДополнительныхОтборовОбъектовУчета();
	Если НастройкиДополнительныхОтборов.Отбор.Элементы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиДополнительныхОтборов);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.АнализКорреспонденцийОперативногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиОтчетаАнализКорреспонденций(ИмяОтчета, ЗначенияПользовательскихНастроек)
	
	Возврат МеждународныйУчетПоДаннымФинансовыхРегистровВызовСервера.ПользовательскиеНастройкиАнализаОперативногоУчета(
		ИмяОтчета, ЗначенияПользовательскихНастроек);
	
КонецФункции

&НаСервере
Функция НастройкиДополнительныхОтборовОбъектовУчета()
	
	НастройкиДополнительныхОтборов = Новый НастройкиКомпоновкиДанных();
	
	МеждународныйУчетПоДаннымФинансовыхРегистров.СкопироватьОтборКомпоновкиДанных(
		НастройкиДополнительныхОтборов.Отбор, КомпоновщикНастроекОтборОбъектУчетаДт.Настройки.Отбор, "Дт");
	МеждународныйУчетПоДаннымФинансовыхРегистров.СкопироватьОтборКомпоновкиДанных(
		НастройкиДополнительныхОтборов.Отбор, КомпоновщикНастроекОтборОбъектУчетаКт.Настройки.Отбор, "Кт");
	
	Возврат НастройкиДополнительныхОтборов;
	
КонецФункции

&НаКлиенте
Процедура НастройкиПоКорреспонденции(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПланСчетов", Запись.ПланСчетов);
	Отбор.Вставить("НастройкаФормированияПроводок", Запись.НастройкаФормированияПроводок);
	Отбор.Вставить("ОбъектУчетаДт", Запись.ОбъектУчетаДт);
	Отбор.Вставить("ОбъектУчетаКт", Запись.ОбъектУчетаКт);
	Отбор.Вставить("ДолгосрочныйДт", Ложь);
	Отбор.Вставить("ДолгосрочныйКт", Ложь);
	
	УстановитьЗначениеДолгосрочный(Отбор, "Дт");
	УстановитьЗначениеДолгосрочный(Отбор, "Кт");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("КлючЗаписи", Запись.ИсходныйКлючЗаписи);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.ФормаСписка", 
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ТаблицыНастройкиСубконто = Новый Массив;
	ТаблицыНастройкиСубконто.Добавить(Элементы.ЗаполнениеСубконтоДт.Имя);
	ТаблицыНастройкиСубконто.Добавить(Элементы.ЗаполнениеСубконтоКт.Имя);
	
	ФлагиПользовательскаяНастройка = Новый Структура();
	ФлагиПользовательскаяНастройка.Вставить(Элементы.ЗаполнениеСубконтоДт.Имя, Элементы.ПользовательскаяНастройкаЗаполненияСубконтоДт.ПутьКДанным);
	ФлагиПользовательскаяНастройка.Вставить(Элементы.ЗаполнениеСубконтоКт.Имя, Элементы.ПользовательскаяНастройкаЗаполненияСубконтоКт.ПутьКДанным);
	
	ПоляТаблицНастройки = Новый Структура;
	
	ИменаПолейТаблицыЗаполнениеСубконтоДт = Новый Структура;
	ИменаПолейТаблицыЗаполнениеСубконтоДт.Вставить("СпособЗаполненияСубконто", Элементы.ЗаполнениеСубконтоДтСпособЗаполненияСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоДт.Вставить("УказанноеЗначениеСубконто", Элементы.ЗаполнениеСубконтоДтУказанноеЗначениеСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоДт.Вставить("ЕстьПроблемыУказанногоЗначенияСубконто", Элементы.ЗаполнениеСубконтоДтУказанноеЗначениеЕстьПроблемыЗаполненияСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоДт.Вставить("ПредставлениеВыражения", Элементы.ЗаполнениеСубконтоДтПредставлениеВыражения.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоДт.Вставить("ЕстьПроблемыЗаполненияСубконтоИзРегистра", Элементы.ЗаполнениеСубконтоДтИзРегистраЕстьПроблемыЗаполненияСубконто.Имя);
	ПоляТаблицНастройки.Вставить(Элементы.ЗаполнениеСубконтоДт.Имя, ИменаПолейТаблицыЗаполнениеСубконтоДт);
	
	ИменаПолейТаблицыЗаполнениеСубконтоКт = Новый Структура;
	ИменаПолейТаблицыЗаполнениеСубконтоКт.Вставить("СпособЗаполненияСубконто", Элементы.ЗаполнениеСубконтоКтСпособЗаполненияСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоКт.Вставить("УказанноеЗначениеСубконто", Элементы.ЗаполнениеСубконтоКтУказанноеЗначениеСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоКт.Вставить("ЕстьПроблемыУказанногоЗначенияСубконто", Элементы.ЗаполнениеСубконтоКтУказанноеЗначениеЕстьПроблемыЗаполненияСубконто.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоКт.Вставить("ПредставлениеВыражения", Элементы.ЗаполнениеСубконтоКтПредставлениеВыражения.Имя);
	ИменаПолейТаблицыЗаполнениеСубконтоКт.Вставить("ЕстьПроблемыЗаполненияСубконтоИзРегистра", Элементы.ЗаполнениеСубконтоКтИзРегистраЕстьПроблемыЗаполненияСубконто.Имя);
	ПоляТаблицНастройки.Вставить(Элементы.ЗаполнениеСубконтоКт.Имя, ИменаПолейТаблицыЗаполнениеСубконтоКт);
	
	Для каждого ТаблицаНастройкиСубконто Из ТаблицыНастройкиСубконто Цикл
		
		ИменаПолейТаблицыНастройки = ПоляТаблицНастройки[ТаблицаНастройкиСубконто];
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.УказанноеЗначениеСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".СпособЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.УказанноеЗначениеСубконто);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ЕстьПроблемыУказанногоЗначенияСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".СпособЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокСпособов = Новый СписокЗначений;
		СписокСпособов.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение);
		СписокСпособов.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
		ОтборЭлемента.ПравоеЗначение = СписокСпособов;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ПредставлениеВыражения);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".СпособЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".ВыражениеЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ЕстьПроблемыЗаполненияСубконтоИзРегистра);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ПредставлениеВыражения);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".СпособЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.УказанноеЗначениеСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".СпособЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".УказанноеЗначениеСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ЕстьПроблемыЗаполненияСубконтоИзРегистра);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".ВыражениеЗаполненияСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//

		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаПолейТаблицыНастройки.ЕстьПроблемыУказанногоЗначенияСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаНастройкиСубконто + ".УказанноеЗначениеСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Для каждого КлючИЗначение Из ИменаПолейТаблицыНастройки Цикл
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КлючИЗначение.Значение);
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных(ФлагиПользовательскаяНастройка[ТаблицаНастройкиСубконто]);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",  Истина);
		
	КонецЦикла;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОбъектНастройкиДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаДт.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Общая';
																|en = 'General'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОбъектНастройкиДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаДт.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указан(а)';
																|en = 'Not specified'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОрганизацияДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаДт.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаМестоУчетаДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаДт.МестоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОбъектНастройкиКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаКт.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Общая';
																|en = 'General'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОбъектНастройкиКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаКт.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указан(а)';
																|en = 'Not specified'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаОрганизацияКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаКт.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаОбъектаУчетаМестоУчетаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаОбъектаУчетаКт.МестоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Запись.ПланСчетов)
	 ИЛИ НЕ ЗначениеЗаполнено(Запись.НастройкаФормированияПроводок) Тогда
		Элементы.ГруппаИзмерения.Видимость = Истина;
		
		СвязиПараметровВыбора = Новый Массив();
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Запись.ПланСчетов", РежимИзмененияСвязанногоЗначения.Очищать));
		Элементы.НастройкаФормированияПроводок.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	Иначе
		Элементы.ГруппаИзмерения.Видимость = Ложь;
	КонецЕсли;
	
	СчетУчетаДт = Запись.СчетУчетаДт;
	СчетУчетаКт = Запись.СчетУчетаКт;
	
	ОписаниеОбъектаУчетаДт = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектаФинансовогоУчета(Запись.ОбъектУчетаДт, Истина);
	ОписаниеОбъектаУчетаКт = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектаФинансовогоУчета(Запись.ОбъектУчетаКт, Истина);
	
	ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Запись.НастройкаФормированияПроводок, "ИспользоватьВыделениеДолгосрочныхАктивовОбязательств");
	
	ИнициализироватьВариантПримененияПоследующихНастроек();
	СформироватьСсылкуНастройкиПоКорреспонденции();

	ИнициализироватьЧисловыеРеквизитыПоБулевымПолям("Дт");
	ИнициализироватьЧисловыеРеквизитыПоБулевымПолям("Кт");
	
	ЗаполнитьСчетаОбъектаУчета("Дт");
	ЗаполнитьСчетаОбъектаУчета("Кт");
	
	ИнициализироватьКомпоновщикиОтбораПоОбъектуУчета("Дт");
	ИнициализироватьКомпоновщикиОтбораПоОбъектуУчета("Кт");
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Дт");
	УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(ЭтотОбъект, "Кт");
	
	ЗаполнитьНастройкиЗаполненияСубконто("Дт");
	ЗаполнитьНастройкиЗаполненияСубконто("Кт");
	ИнициализироватьКомпоновщикНастроекЗаполненияСубконто();
	
	УстановитьДоступныеСпособыЗаполненияСубконто("Дт");
	УстановитьДоступныеСпособыЗаполненияСубконто("Кт");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеСпособыЗаполненияСубконто(ДтКт)
	
	Если ДтКт = "Дт" Тогда
		СписокВыбора = Элементы.ЗаполнениеСубконтоДтСпособЗаполненияСубконто.СписокВыбора;
	Иначе
		СписокВыбора = Элементы.ЗаполнениеСубконтоКтСпособЗаполненияСубконто.СписокВыбора;
	КонецЕсли;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра);
	СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение);
	СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеДолгосрочный(ТекущийОбъект, ДтКт)
	
	Если ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
		ТекущийОбъект["Долгосрочный" + ДтКт] = Булево(ЭтотОбъект["Долгосрочный" + ДтКт]);
	Иначе
		ТекущийОбъект["Долгосрочный" + ДтКт] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОпределениеСчетаУчетаНастройкойОбъекта(ДтКт)
	
	Если Запись.НеОтражаетсяНаСчетах Тогда
		Запись["СчетУчетаОпределяетсяНастройкойОбъекта" + ДтКт] = Ложь;
	Иначе
		Запись["СчетУчетаОпределяетсяНастройкойОбъекта" + ДтКт] = Булево(ЭтотОбъект["СчетУчетаИзНастройкиОбъекта" + ДтКт]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	
	ПрочиеАктивыПассивыДт = ЭтоПрочиеАктивыПассивы(Запись, "Дт");
	ПрочиеАктивыПассивыКт = ЭтоПрочиеАктивыПассивы(Запись, "Кт");
	
	СчетОпределяетсяНастройкойПоОбъектам = НСтр("ru = 'Определяется настройкой по объектам';
												|en = 'Determined by object setup'");
	СчетОпределяетсяНастройкамиДокументов = НСтр("ru = 'Определяется настройками в документах';
												|en = 'Depends on the document settings'");
	
	Элементы.СчетУчетаИзНастройкиОбъектаДт.СписокВыбора[1].Представление = ?(
		ПрочиеАктивыПассивыДт,
		СчетОпределяетсяНастройкамиДокументов,
		СчетОпределяетсяНастройкойПоОбъектам);
	
	Элементы.СчетУчетаИзНастройкиОбъектаКт.СписокВыбора[1].Представление = ?(
		ПрочиеАктивыПассивыКт,
		СчетОпределяетсяНастройкамиДокументов,
		СчетОпределяетсяНастройкойПоОбъектам);
	
	Элементы.ПорядокПрименения.Доступность = ЗначениеЗаполнено(Запись.ОбъектУчетаДт) И ЗначениеЗаполнено(Запись.ОбъектУчетаКт);
	
	Элементы.СчетУчетаИзНастройкиОбъектаДт.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	Элементы.СчетУчетаИзНастройкиОбъектаКт.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	
	Элементы.ГруппаНастройкаУчетаДт.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	Элементы.ГруппаНастройкаУчетаКт.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	
	Элементы.РучноеУточнениеПроводки.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	Элементы.ИнвертироватьЗнакРесурсов.Доступность = НЕ Запись.НеОтражаетсяНаСчетах;
	
	Элементы.ГруппаСчетУчетаДт.Видимость = НЕ Форма.СчетУчетаИзНастройкиОбъектаДт;
	Элементы.ГруппаСчетУчетаКт.Видимость = НЕ Форма.СчетУчетаИзНастройкиОбъектаКт;
	
	Элементы.ГруппаСчетаОбъектаУчетаДт.Видимость = Форма.СчетУчетаИзНастройкиОбъектаДт И НЕ ПрочиеАктивыПассивыДт;
	Элементы.ГруппаСчетаОбъектаУчетаКт.Видимость = Форма.СчетУчетаИзНастройкиОбъектаКт И НЕ ПрочиеАктивыПассивыКт;
	
	Элементы.СчетаПрочихОперацийДт.Видимость = Форма.СчетУчетаИзНастройкиОбъектаДт И ПрочиеАктивыПассивыДт;
	Элементы.СчетаПрочихОперацийКт.Видимость = Форма.СчетУчетаИзНастройкиОбъектаКт И ПрочиеАктивыПассивыКт;
	
	Элементы.ГруппаДолгосрочныйДт.Видимость = Форма.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств;
	Элементы.ГруппаДолгосрочныйКт.Видимость = Форма.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств;
	
	Если Форма.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
		Если ТипЗнч(Форма.ОписаниеОбъектаУчетаДт) = Тип("Структура") Тогда
			ВыделениеДолгосрочныхАктивовОбязательствДт = Форма.ОписаниеОбъектаУчетаДт.ВыделениеДолгосрочныхАктивовОбязательств;
		Иначе
			ВыделениеДолгосрочныхАктивовОбязательствДт = Ложь;
		КонецЕсли;
		
		Элементы.ДолгосрочныйДт.Видимость = ВыделениеДолгосрочныхАктивовОбязательствДт;
		Элементы.ДекорацияНетДеленияНаДолгосрочныйДт.Видимость = НЕ ВыделениеДолгосрочныхАктивовОбязательствДт;
		
		Если ТипЗнч(Форма.ОписаниеОбъектаУчетаКт) = Тип("Структура") Тогда
			ВыделениеДолгосрочныхАктивовОбязательствКт = Форма.ОписаниеОбъектаУчетаКт.ВыделениеДолгосрочныхАктивовОбязательств;
		Иначе
			ВыделениеДолгосрочныхАктивовОбязательствКт = Ложь;
		КонецЕсли;
		
		Элементы.ДолгосрочныйКт.Видимость = ВыделениеДолгосрочныхАктивовОбязательствКт;
		Элементы.ДекорацияНетДеленияНаДолгосрочныйКт.Видимость = НЕ ВыделениеДолгосрочныхАктивовОбязательствКт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПрочиеАктивыПассивы(Запись, ДтКт)
	
	Возврат Запись["ОбъектУчета" + ДтКт] = ПредопределенноеЗначение("Перечисление.ОбъектыФинансовогоУчета.ПрочиеАктивыПассивы");
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВариантПримененияПоследующихНастроек()
	
	ВариантПримененияПоследующихНастроек = ?(Запись.ПрименятьПоследующиеНастройки, 1, 0);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЧисловыеРеквизитыПоБулевымПолям(ДтКт)
	
	СоответствиеРеквизитовПолям = Новый Структура();
	СоответствиеРеквизитовПолям.Вставить("Долгосрочный" + ДтКт, "Долгосрочный" + ДтКт);
	СоответствиеРеквизитовПолям.Вставить("СчетУчетаИзНастройкиОбъекта" + ДтКт, "СчетУчетаОпределяетсяНастройкойОбъекта" + ДтКт);
	
	Для Каждого РеквизитИПоле Из СоответствиеРеквизитовПолям Цикл
		ЭтотОбъект[РеквизитИПоле.Ключ] = Число(Запись[РеквизитИПоле.Значение]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСсылкуНастройкиПоКорреспонденции()
	
	ПараметрыПолученияДанных = РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПараметрыПолученияДанныхНастройки();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, Запись,, "ДолгосрочныйДт,ДолгосрочныйКт");
	
	УстановитьЗначениеДолгосрочный(ПараметрыПолученияДанных, "Дт");
	УстановитьЗначениеДолгосрочный(ПараметрыПолученияДанных, "Кт");
	
	КоличествоНастроекПоКорреспонденции = РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.КоличествоНастроекКорренспонденции(ПараметрыПолученияДанных);
	
	Если КоличествоНастроекПоКорреспонденции = 0 Тогда
		Элементы.НастройкиПоКорреспонденции.Заголовок = НСтр("ru = 'Все настройки по корреспонденции';
															|en = 'All correspondence settings'");
		Элементы.НастройкиПоКорреспонденции.Видимость = Ложь;
	Иначе
		Элементы.НастройкиПоКорреспонденции.Заголовок = СтрШаблон(НСтр("ru = 'Все настройки по корреспонденции (%1)';
																		|en = 'All settings for correspondence (%1)'"), КоличествоНастроекПоКорреспонденции);
		Элементы.НастройкиПоКорреспонденции.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокПримененияНастройки()
	
	ПараметрыПолученияДанных = РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПараметрыПолученияДанныхНастройки();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, Запись,, "ДолгосрочныйДт,ДолгосрочныйКт");
	
	УстановитьЗначениеДолгосрочный(ПараметрыПолученияДанных, "Дт");
	УстановитьЗначениеДолгосрочный(ПараметрыПолученияДанных, "Кт");
	
	Запись.ПорядокПрименения = РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПорядокПримененияНастройки(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаОбъектаУчета(ДтКт)
	
	ОбъектУчета = Запись["ОбъектУчета" + ДтКт];
	Долгосрочный = ЭтотОбъект["Долгосрочный" + ДтКт];
	СчетаОбъектаУчета = ЭтотОбъект["СчетаОбъектаУчета" + ДтКт];
	
	СчетаОбъектаУчета.Очистить();
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	НастройкиСчетовПоОбъектам.ТипНастройки КАК ТипНастройки,
		|	НастройкиСчетовПоОбъектам.ОбъектНастройки КАК ОбъектНастройки,
		|	НастройкиСчетовПоОбъектам.Организация КАК Организация,
		|	НастройкиСчетовПоОбъектам.МестоУчета КАК МестоУчета,
		|	ВЫБОР
		|		КОГДА &Долгосрочный
		|			ТОГДА НастройкиСчетовПоОбъектам.СчетУчетаДолгосрочный
		|		ИНАЧЕ НастройкиСчетовПоОбъектам.СчетУчета
		|	КОНЕЦ КАК СчетУчета
		|ИЗ
		|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
		|ГДЕ
		|	НастройкиСчетовПоОбъектам.ПланСчетов = &ПланСчетов
		|	И НастройкиСчетовПоОбъектам.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
		|	И НастройкиСчетовПоОбъектам.ОбъектУчета = &ОбъектУчета
		|УПОРЯДОЧИТЬ ПО
		|	ТипНастройки,
		|	ОбъектНастройки
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПланСчетов", Запись.ПланСчетов);
		Запрос.УстановитьПараметр("НастройкаФормированияПроводок", Запись.НастройкаФормированияПроводок);
		Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
		Запрос.УстановитьПараметр("Долгосрочный", Долгосрочный);
		Результат = Запрос.Выполнить();
		
		СчетаОбъектаУчета.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
	УправлениеЭлементамиФормыСчетовОбъектаУчета(ДтКт);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыСчетовОбъектаУчета(ДтКт)
	
	ОбъектУчета = Запись["ОбъектУчета" + ДтКт];
	ОписаниеОбъектаУчета = ЭтотОбъект["ОписаниеОбъектаУчета" + ДтКт];
	
	ГруппаСчетаОбъектаУчета = Элементы["ГруппаСчетаОбъектаУчета" + ДтКт];
	СчетаОбъектаУчетаМестоУчета = Элементы["СчетаОбъектаУчетаМестоУчета" + ДтКт];
	СчетаОбъектаУчетаОбъектНастройки = Элементы["СчетаОбъектаУчетаОбъектНастройки" + ДтКт];
	
	СчетаОбъектаУчета = ЭтотОбъект["СчетаОбъектаУчета" + ДтКт].Выгрузить(, "СчетУчета");
	СчетаОбъектаУчета.Свернуть("СчетУчета");
	СчетаОбъектаУчета.Сортировать("СчетУчета");
	
	Если НЕ ЗначениеЗаполнено(ОбъектУчета) Тогда
		СчетаОбъектаУчетаМестоУчета.Видимость = Истина;
		СчетаОбъектаУчетаМестоУчета.Заголовок = "";
		
		СчетаОбъектаУчетаОбъектНастройки.Видимость = Истина;
		СчетаОбъектаУчетаОбъектНастройки.Заголовок = "";
		
		ГруппаСчетаОбъектаУчета.Доступность = Ложь;
		ГруппаСчетаОбъектаУчета.Заголовок = НСтр("ru = 'Не выбран объект учета';
												|en = 'Accounting object is not selected'");
		ГруппаСчетаОбъектаУчета.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаПредупреждение;
	Иначе
		СчетаОбъектаУчетаМестоУчета.Видимость = ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета.Типы().Количество() > 0;
		СчетаОбъектаУчетаМестоУчета.Заголовок = Перечисления.ОбъектыФинансовогоУчета.ЗаголовокМестаУчета(
			ОписаниеОбъектаУчета.ОписаниеТиповМестоУчета);
		
		СчетаОбъектаУчетаОбъектНастройки.Видимость = ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки.Типы().Количество() > 0;
		СчетаОбъектаУчетаОбъектНастройки.Заголовок = Перечисления.ОбъектыФинансовогоУчета.ЗаголовокОбъектаНастройкиПоОписаниюТипов(
			ОписаниеОбъектаУчета.ОписаниеТиповОбъектНастройки);
		
		ГруппаСчетаОбъектаУчета.Доступность = Истина;
		
		Если СчетаОбъектаУчета.Количество() = 0 Тогда
			ГруппаСчетаОбъектаУчета.Заголовок = НСтр("ru = 'Не настроены счета учета по объекту';
													|en = 'Object ledger accounts are not set up'");
			ГруппаСчетаОбъектаУчета.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаПредупреждение;
		Иначе
			СтрокиЗаголовка = Новый Массив();
			КоличествоСчетов = СчетаОбъектаУчета.Количество();
			СчетовВЗаголовке = 3;
			ИндексСчета = 0;
			
			Пока ИндексСчета < СчетовВЗаголовке Цикл
				Если ИндексСчета = КоличествоСчетов Тогда
					Прервать;
				КонецЕсли;
				Если ИндексСчета > 0 Тогда
					СтрокиЗаголовка.Добавить(", ");
				КонецЕсли;
				СтрокиЗаголовка.Добавить(СчетаОбъектаУчета[ИндексСчета]["СчетУчета"]["Код"]);
				ИндексСчета = ИндексСчета + 1;
			КонецЦикла;
			
			Если КоличествоСчетов > СчетовВЗаголовке Тогда
				ЕщеСчета = Новый Массив();
				ЕщеСчета.Добавить("");
				ЕщеСчета.Добавить(НСтр("ru = 'и еще';
										|en = 'and'"));
				Если ТекущийЯзык().КодЯзыка = "ru" Тогда
					ЕщеСчета.Добавить(ПолучитьСклоненияСтрокиПоЧислу(НСтр("ru = 'счет';
																			|en = 'account'", "ru"), КоличествоСчетов - СчетовВЗаголовке,, "L=ru_RU")[0]);
				Иначе
					ЕщеСчета.Добавить(Строка(КоличествоСчетов - СчетовВЗаголовке));
				КонецЕсли;
				СтрокиЗаголовка.Добавить(СтрСоединить(ЕщеСчета, " "));
			КонецЕсли;
			
			ГруппаСчетаОбъектаУчета.Заголовок = СтрСоединить(СтрокиЗаголовка);
			ГруппаСчетаОбъектаУчета.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область СерверныеОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ПланСчетовПриИзмененииНаСервере()
	
	ЗаполнитьСчетаОбъектаУчета("Дт");
	ЗаполнитьСчетаОбъектаУчета("Кт");
	
	ЗаполнитьПорядокПримененияНастройки();
		
	СформироватьСсылкуНастройкиПоКорреспонденции();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаФормированияПроводокПриИзмененииНаСервере()
	
	ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Запись.НастройкаФормированияПроводок, "ИспользоватьВыделениеДолгосрочныхАктивовОбязательств");
		
	Если НЕ ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
		ДолгосрочныйДт = Ложь;
		ДолгосрочныйКт = Ложь;
	КонецЕсли;
	
	ЗаполнитьСчетаОбъектаУчета("Дт");
	ЗаполнитьСчетаОбъектаУчета("Кт");
	
	ЗаполнитьПорядокПримененияНастройки();
		
	СформироватьСсылкуНастройкиПоКорреспонденции();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбъектУчетаПриИзмененииСервер(ДтКт)
	
	ЭтотОбъект["ОписаниеОбъектаУчета" + ДтКт] = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектаФинансовогоУчета(
		Запись["ОбъектУчета" + ДтКт], Истина);
	
	Если НЕ ИспользоватьВыделениеДолгосрочныхАктивовОбязательств
	 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект["ОписаниеОбъектаУчета" + ДтКт])
	 ИЛИ НЕ ЭтотОбъект["ОписаниеОбъектаУчета" + ДтКт].ВыделениеДолгосрочныхАктивовОбязательств Тогда
		ЭтотОбъект["Долгосрочный" + ДтКт] = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись["ОбъектУчета" + ДтКт])
	   И ЭтотОбъект["СчетУчетаИзНастройкиОбъекта" + ДтКт] Тогда
		ЭтотОбъект["СчетУчетаИзНастройкиОбъекта" + ДтКт] = Ложь;
	КонецЕсли;
	
	ЗаполнитьСчетаОбъектаУчета(ДтКт);
	ЗаполнитьПорядокПримененияНастройки();
	
	СформироватьСсылкуНастройкиПоКорреспонденции();
	ИнициализироватьКомпоновщикиОтбораПоОбъектуУчета(ДтКт);
	ИнициализироватьКомпоновщикНастроекЗаполненияСубконто();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДолгосрочныйПриИзмененииНаСервере(ДтКт)
	
	ЗаполнитьСчетаОбъектаУчета(ДтКт);
	ЗаполнитьПорядокПримененияНастройки();
		
	СформироватьСсылкуНастройкиПоКорреспонденции();

КонецПроцедуры

&НаСервере
Процедура СчетУчетаИзНастройкиОбъектаПриИзмененииНаСервере(ДтКт)
	
	Если ЭтотОбъект["СчетУчетаИзНастройкиОбъекта" + ДтКт] Тогда
		Запись["СчетУчета" + ДтКт] = Неопределено;
		СчетУчетаПриИзмененииСервер(ДтКт);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПриИзмененииСервер(ДтКт)
	
	ОбновитьНастройкиЗаполненияСубконто = Ложь;
	Если ДтКт = "Дт" Тогда
		Если Запись.СчетУчетаДт <> СчетУчетаДт Тогда
			Запись.ПользовательскаяНастройкаЗаполненияСубконтоДт = Ложь;
			ОбновитьНастройкиЗаполненияСубконто = Истина;
			СчетУчетаДт = Запись.СчетУчетаДт;
		КонецЕсли;
	Иначе
		Если Запись.СчетУчетаКт <> СчетУчетаКт Тогда
			Запись.ПользовательскаяНастройкаЗаполненияСубконтоКт = Ложь;
			ОбновитьНастройкиЗаполненияСубконто = Истина;
			СчетУчетаКт = Запись.СчетУчетаКт;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьНастройкиЗаполненияСубконто Тогда
		ЗаполнитьНастройкиЗаполненияСубконто(ДтКт);
		ЗаполнитьСостояниеНастроекЗаполненияСубконто(ДтКт);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПользовательскаяНастройкаЗаполненияСубконтоПриИзмененииСервер(ДтКт)
	ЗаполнитьСостояниеНастроекЗаполненияСубконто(ДтКт);
КонецПроцедуры

&НаСервере
Процедура НеОтражаетсяНаСчетахУчетаПриИзмененииНаСервере()
	
	Если Запись.НеОтражаетсяНаСчетах Тогда
		СчетУчетаИзНастройкиОбъектаДт = 0;
		СчетУчетаИзНастройкиОбъектаКт = 0;
		Запись.СчетУчетаДт = Неопределено;
		Запись.СчетУчетаКт = Неопределено;
		СчетУчетаПриИзмененииСервер("Дт");
		СчетУчетаПриИзмененииСервер("Кт");
		Запись.РучноеУточнениеПроводки = Ложь;
		Запись.ИнвертироватьЗнакРесурсов = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ИнвертироватьЗнакРесурсовПриИзмененииНаСервере()
	ЗаполнитьСостояниеНастроекЗаполненияСубконто("Дт");
	ЗаполнитьСостояниеНастроекЗаполненияСубконто("Кт");
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыДополнительногоОтбора

&НаСервере
Процедура НастройкиОтборовВЗаписьРегистра(ЗаписьРегистра, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		КомпоновщикНастроек = КомпоновщикНастроекОтборОбъектУчетаДт;
	Иначе
		КомпоновщикНастроек = КомпоновщикНастроекОтборОбъектУчетаКт;
	КонецЕсли;
	
	ЗаписьРегистра["ЕстьДополнительныйОтбор" + ДтКт] = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0;
	Если ЗаписьРегистра["ЕстьДополнительныйОтбор" + ДтКт] Тогда
		ЗаписьРегистра["ДополнительныйОтбор" + ДтКт] = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	Иначе
		ЗаписьРегистра["ДополнительныйОтбор" + ДтКт] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикиОтбораПоОбъектуУчета(ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ОбъектУчета = Запись.ОбъектУчетаДт;
		КомпоновщикНастроек = КомпоновщикНастроекОтборОбъектУчетаДт;
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаДт;
	Иначе
		ОбъектУчета = Запись.ОбъектУчетаКт;
		КомпоновщикНастроек = КомпоновщикНастроекОтборОбъектУчетаКт;
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчетаКт;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	ПоляОтбораДвижений = ПоляОтбораДвижений(ОписаниеОбъектаУчета.ИсточникДанных);
	
	Если ЗначениеЗаполнено(ОписаниеОбъектаУчета.ИсточникДанных) Тогда
		ТекстЗапроса = ТекстЗапросаДанныхРегистра(ОписаниеОбъектаУчета.ИсточникДанных, ПоляОтбораДвижений);
		НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
		НаборДанных.Запрос = ТекстЗапроса;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ПоляОтбораДвижений Цикл
		ОписаниеПоля = КлючИЗначение.Значение; // см. МеждународныйУчетПоДаннымФинансовыхРегистров.ОписаниеПоляРегистра
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = КлючИЗначение.Ключ;
		НовоеПоле.ПутьКДанным = ОписаниеПоля.ПутьКДанным;
		НовоеПоле.Заголовок = ОписаниеПоля.Заголовок;
	КонецЦикла;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Отбор = КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Отбор.Элементы.Очистить();
	
	Если ТипЗнч(ОписаниеОбъектаУчета.ОтборДанных) = Тип("Массив") Тогда
		
		ГруппаИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
					Отбор.Элементы,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		Для каждого ЭлементОтбораИЛИ Из ОписаниеОбъектаУчета.ОтборДанных Цикл
			
			Если ЭлементОтбораИЛИ.Количество() > 1 Тогда
				ГруппаДобавленияОтборов = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
					ГруппаИЛИ.Элементы,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			Иначе
				ГруппаДобавленияОтборов = ГруппаИЛИ;
			КонецЕсли;
			
			Для каждого ЭлементОтбора Из ЭлементОтбораИЛИ Цикл
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаДобавленияОтборов, 
					ЭлементОтбора.Ключ,
					ЭлементОтбора.Значение);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОписаниеОбъектаУчета.ОтборДанных) = Тип("Соответствие") Тогда
		Для каждого ЭлементОтбора Из ОписаниеОбъектаУчета.ОтборДанных Цикл
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				Отбор, 
				ЭлементОтбора.Ключ,
				ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		ИсточникДанныхОбъектУчетаДт = "";
		ПредставлениеФиксированногоОтбораОбъектУчетаДт = "";
		ОбъектМетаданных = Метаданные.РегистрыНакопления.Найти(ОписаниеОбъектаУчета.ИсточникДанных);
		Если ОбъектМетаданных <> Неопределено Тогда
			ИсточникДанныхОбъектУчетаДт = ОбъектМетаданных.Синоним;
			ПредставлениеФиксированногоОтбораОбъектУчетаДт = Строка(КомпоновщикНастроек.ФиксированныеНастройки.Отбор);
		КонецЕсли;
	Иначе
		ИсточникДанныхОбъектУчетаКт = "";
		ПредставлениеФиксированногоОтбораОбъектУчетаКт = "";
		ОбъектМетаданных = Метаданные.РегистрыНакопления.Найти(ОписаниеОбъектаУчета.ИсточникДанных);
		Если ОбъектМетаданных <> Неопределено Тогда
			ИсточникДанныхОбъектУчетаКт = ОбъектМетаданных.Синоним;
			ПредставлениеФиксированногоОтбораОбъектУчетаКт = Строка(КомпоновщикНастроек.ФиксированныеНастройки.Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсточникиСубконто(ИмяРегистра) 
	
	Если Не ЗначениеЗаполнено(ИмяРегистра) Тогда
		Возврат Новый Структура()
	КонецЕсли;
	
	МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер -
	ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. МеждународныйУчетПоДаннымФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Возврат ПараметрыОтраженияВУчете.ИсточникиСубконто;
	
КонецФункции

&НаСервере
Функция ПоляОтбораДвижений(ИмяРегистра)
	
	Если Не ЗначениеЗаполнено(ИмяРегистра) Тогда
		Возврат Новый Структура()
	КонецЕсли;
	
	МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер -
	ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. МеждународныйУчетПоДаннымФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Возврат ПараметрыОтраженияВУчете.ПоляОтбораДвижений;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДанныхРегистра(ИмяРегистра, ПоляОтбораДвижений = Неопределено)
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПоляОтбораДвижений = Неопределено Тогда
		ПоляОтбораДвижений = ПоляОтбораДвижений(ИмяРегистра);
	КонецЕсли;
	
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПоляВыборки
	|ИЗ
	|	&ИмяТаблицыРегистра КАК ТаблицаРегистра
	|{ГДЕ
	|	&ПоляОтбора
	|}";
	
	ПоляВыборки = Новый Массив();
	ПоляОтбора = Новый Массив;
	ПримитивныеТипы = Новый ОписаниеТипов("Строка, Число, Дата, Булево, Тип, Неопределено, УникальныйИдентификатор");
	
	Для каждого КлючИЗначение Из ПоляОтбораДвижений Цикл
		ИмяПоля = КлючИЗначение.Ключ;
		ОписаниеПоля = КлючИЗначение.Значение; 
		ТипПримитивный = ПримитивныеТипы.СодержитТип(ОписаниеПоля.Тип.Типы()[0]);
		ПоляВыборки.Добавить(ОписаниеПоля.ПутьКДанным + " КАК " + ИмяПоля); //@query-part
		ПоляОтбора.Добавить(ОписаниеПоля.ПутьКДанным + ?(ТипПримитивный, "", ".*") + " КАК " + ИмяПоля); //@query-part
		Если ИмяПоля = "Регистратор" Тогда
			ПоляВыборки.Добавить("ТИПЗНАЧЕНИЯ(" + ОписаниеПоля.ПутьКДанным + ") КАК ТипРегистратора"); //@query-part
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = "," + Символы.ПС +Символы.Таб;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, Разделитель));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОтбора", СтрСоединить(ПоляОтбора, Разделитель));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыРегистра", ПолноеИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыДополнительныйОтборОбъектУчета(Форма, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		Элемент = Форма.Элементы.ГруппаДополнительныйОтборОбъектУчетаДт;
		КомпоновщикНастроек = Форма.КомпоновщикНастроекОтборОбъектУчетаДт;
	Иначе
		Элемент = Форма.Элементы.ГруппаДополнительныйОтборОбъектУчетаКт;
		КомпоновщикНастроек = Форма.КомпоновщикНастроекОтборОбъектУчетаКт;
	КонецЕсли;
	
	ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	Если ПредставлениеОтбора = "" Тогда
		Элемент.Заголовок = НСтр("ru = 'Без дополнительного отбора';
								|en = 'Without additional filter'");
	Иначе
		Элемент.Заголовок = ПредставлениеОтбора;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыЗаполненияСубконто

&НаКлиенте
Процедура ЗаполнениеСубконтоПриАктивизацииСтроки(Элемент, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоДт.ТекущиеДанные;
		УказанноеЗначениеСубконто = Элементы.ЗаполнениеСубконтоДтУказанноеЗначениеСубконто;
	Иначе
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоКт.ТекущиеДанные;
		УказанноеЗначениеСубконто = Элементы.ЗаполнениеСубконтоКтУказанноеЗначениеСубконто;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		УказанноеЗначениеСубконто.ОграничениеТипа = ТекущиеДанные.ТипЗначенияСубконто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоДт.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоКт.ТекущиеДанные;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресКомпоновкиДанныхЗаполненияСубконто);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.ВыражениеЗаполненияСубконто);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка, ДтКт)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ЭлементТаблицаНастройки = Элементы.ЗаполнениеСубконтоДт;
	Иначе
		ЭлементТаблицаНастройки = Элементы.ЗаполнениеСубконтоКт;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементТаблицаНастройки.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	ТекущиеДанные.ВыражениеЗаполненияСубконто = ВыбранноеЗначение;
	ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
	
	ЗаполнитьПредставлениеВыраженияВСтрокеНаКлиенте(ТекущиеДанные);
	
	ЭлементТаблицаНастройки.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УказанноеЗначениеПриИзменении(Элемент, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоДт.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоКт.ТекущиеДанные;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.УказанноеЗначениеСубконто) Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Истина;
	ИначеЕсли Не ТекущиеДанные.ТипЗначенияСубконто.СодержитТип(ТипЗнч(ТекущиеДанные.УказанноеЗначениеСубконто)) Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Истина;
	Иначе
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоДт.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ЗаполнениеСубконтоКт.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные.СпособЗаполненияСубконто 
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Не ЗначениеЗаполнено(ТекущиеДанные.ВыражениеЗаполненияСубконто);
		ТекущиеДанные.УказанноеЗначениеСубконто = Неопределено;
	ИначеЕсли ТекущиеДанные.СпособЗаполненияСубконто 
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Не ЗначениеЗаполнено(ТекущиеДанные.УказанноеЗначениеСубконто);
		ТекущиеДанные.ВыражениеЗаполненияСубконто = "";
		ТекущиеДанные.ПредставлениеВыражения = "";
	ИначеЕсли ТекущиеДанные.СпособЗаполненияСубконто
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
		ТекущиеДанные.УказанноеЗначениеСубконто = Неопределено;
		ТекущиеДанные.ВыражениеЗаполненияСубконто = "";
		ТекущиеДанные.ПредставлениеВыражения = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыНастройкиЗаполненияСубконто

&НаСервере
Процедура НастройкиЗаполненияСубконтоВЗаписьРегистра(ЗаписьРегистра, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТаблицаНастроек = ЗаполнениеСубконтоДт;
		ПользовательскаяНастройкаЗаполненияСубконто = ЗаписьРегистра.ПользовательскаяНастройкаЗаполненияСубконтоДт;
	Иначе
		ТаблицаНастроек = ЗаполнениеСубконтоКт;
		ПользовательскаяНастройкаЗаполненияСубконто = ЗаписьРегистра.ПользовательскаяНастройкаЗаполненияСубконтоКт;
	КонецЕсли;
	
	НомерСубконто = 1;
	Если ПользовательскаяНастройкаЗаполненияСубконто Тогда
		Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
			ЗаписьРегистра["ВидСубконто" + ДтКт + НомерСубконто] = СтрокаТаблицы.ВидСубконто;
			ЗаписьРегистра["СпособЗаполненияСубконто" + ДтКт + НомерСубконто] = СтрокаТаблицы.СпособЗаполненияСубконто;
			Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра Тогда
				ЗаписьРегистра["ВыражениеЗаполненияСубконто" + ДтКт + НомерСубконто] = СтрокаТаблицы.ВыражениеЗаполненияСубконто;
			КонецЕсли;
			Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение Тогда
				ЗаписьРегистра["УказанноеЗначениеСубконто" + ДтКт + НомерСубконто] = СтрокаТаблицы.УказанноеЗначениеСубконто;
			КонецЕсли;
			НомерСубконто = НомерСубконто + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для НомераСубконтоДляОчистки = НомерСубконто По 3 Цикл
		ЗаписьРегистра["ВидСубконто" + ДтКт + НомерСубконто] = Неопределено;
		ЗаписьРегистра["СпособЗаполненияСубконто" + ДтКт + НомерСубконто] = Неопределено;
		ЗаписьРегистра["ВыражениеЗаполненияСубконто"+ ДтКт + НомерСубконто] = Неопределено;
		ЗаписьРегистра["УказанноеЗначениеСубконто"+ ДтКт + НомерСубконто] = Неопределено;
		НомераСубконтоДляОчистки = НомераСубконтоДляОчистки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекЗаполненияСубконто()
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	Если ЗначениеЗаполнено(ОписаниеОбъектаУчетаДт) Тогда
		ИсточникиСубконтоОбъектУчетаДт = ИсточникиСубконто(ОписаниеОбъектаУчетаДт.ИсточникДанных);
		НаборДанныхОбъектУчетаДт = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			                          СхемаКомпоновкиДанных,
			                          Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			                          "ОбъектУчетаДт");
		
		ПапкаОбъектУчетаДт = НаборДанныхОбъектУчетаДт.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
		ПапкаОбъектУчетаДт.ПутьКДанным = "ОбъектУчетаДт";
		ПапкаОбъектУчетаДт.Заголовок = НСтр("ru = 'Объект учета Дт';
											|en = 'Dr accounting object'");
		Для каждого КлючИЗначение Из ИсточникиСубконтоОбъектУчетаДт Цикл
			ОписаниеИсточникаСубконто = КлючИЗначение.Значение;
			Поле = НаборДанныхОбъектУчетаДт.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = КлючИЗначение.Ключ;
			Поле.ПутьКДанным = "ОбъектУчетаДт." + КлючИЗначение.Ключ;
			Поле.Заголовок = ПапкаОбъектУчетаДт.Заголовок + "." + ОписаниеИсточникаСубконто.Заголовок;
			Поле.ТипЗначения = ОписаниеИсточникаСубконто.Тип;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОбъектаУчетаКт) Тогда
		ИсточникиСубконтоОбъектУчетаКт = ИсточникиСубконто(ОписаниеОбъектаУчетаКт.ИсточникДанных);
		НаборДанныхОбъектУчетаКт = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			                           СхемаКомпоновкиДанных, 
			                           Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			                           "ОбъектУчетаКт");
		ПапкаОбъектУчетаКт = НаборДанныхОбъектУчетаКт.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
		ПапкаОбъектУчетаКт.ПутьКДанным = "ОбъектУчетаКт";
		ПапкаОбъектУчетаКт.Заголовок = НСтр("ru = 'Объект учета Кт';
											|en = 'Cr accounting object'");
		Для каждого КлючИЗначение Из ИсточникиСубконтоОбъектУчетаКт Цикл
			ОписаниеИсточникаСубконто = КлючИЗначение.Значение;
			Поле = НаборДанныхОбъектУчетаКт.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = КлючИЗначение.Ключ;
			Поле.ПутьКДанным = "ОбъектУчетаКт." + КлючИЗначение.Ключ;
			Поле.Заголовок = ПапкаОбъектУчетаКт.Заголовок + "." + ОписаниеИсточникаСубконто.Заголовок;
			Поле.ТипЗначения = ОписаниеИсточникаСубконто.Тип;
		КонецЦикла;
	КонецЕсли;
	
	АдресКомпоновкиДанныхЗаполненияСубконто = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроекЗаполнениеСубконто.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновкиДанныхЗаполненияСубконто));
	
	ЗаполнитьСостояниеНастроекЗаполненияСубконто("Дт");
	ЗаполнитьСостояниеНастроекЗаполненияСубконто("Кт");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиЗаполненияСубконто(ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТаблицаЗаполнениеСубконто = ЗаполнениеСубконтоДт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоДт;
		СчетУчета = Запись.СчетУчетаДт;
	Иначе
		ТаблицаЗаполнениеСубконто = ЗаполнениеСубконтоКт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоКт;
		СчетУчета = Запись.СчетУчетаКт;
	КонецЕсли;
	
	ТаблицаЗаполнениеСубконто.Очистить();
	
	СвойстваСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(СчетУчета);
	
	Если ПользовательскаяНастройкаЗаполненияСубконто Тогда
	
		Для НомерСубконто = 1 По 3 Цикл
			
			Если НЕ ЗначениеЗаполнено(Запись["ВидСубконто" + ДтКт + НомерСубконто]) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаНастроек = ТаблицаЗаполнениеСубконто.Добавить();
			НоваяСтрокаНастроек.ВидСубконто = Запись["ВидСубконто" + ДтКт + НомерСубконто];
			НоваяСтрокаНастроек.ТипЗначенияСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			НоваяСтрокаНастроек.СпособЗаполненияСубконто = Запись["СпособЗаполненияСубконто" + ДтКт + НомерСубконто];
			НоваяСтрокаНастроек.ВыражениеЗаполненияСубконто = Запись["ВыражениеЗаполненияСубконто" + ДтКт + НомерСубконто];
			НоваяСтрокаНастроек.УказанноеЗначениеСубконто = Запись["УказанноеЗначениеСубконто" + ДтКт + НомерСубконто];
			
		КонецЦикла;
	
	Иначе
		
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			НоваяСтрокаНастроек = ТаблицаЗаполнениеСубконто.Добавить();
			НоваяСтрокаНастроек.ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
			НоваяСтрокаНастроек.ТипЗначенияСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			НоваяСтрокаНастроек.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеНастроекЗаполненияСубконто(ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТаблицаНастроекЗаполненияСубконто = ЗаполнениеСубконтоДт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоДт;
	Иначе
		ТаблицаНастроекЗаполненияСубконто = ЗаполнениеСубконтоКт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоКт;
	КонецЕсли;
	
	Для каждого СтрокаНастроек Из ТаблицаНастроекЗаполненияСубконто Цикл
		Если ПользовательскаяНастройкаЗаполненияСубконто Тогда
			ЗаполнитьСостояниеРучнойНастройкиЗаполненияСубконто(СтрокаНастроек);
		Иначе
			ЗаполнитьСостояниеАвтоматическогоЗаполненияСубконто(СтрокаНастроек, ДтКт);
		КонецЕсли;
		ЗаполнитьПредставлениеВыраженияВСтрокеНаСервере(СтрокаНастроек);
	КонецЦикла;
	
	УстановитьЗаголовокГруппыНастройкиСубконто(ДтКт);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеАвтоматическогоЗаполненияСубконто(СтрокаНастроек, ДтКт)
	
	СтрокаНастроек.ВыражениеЗаполненияСубконто = "";
	СтрокаНастроек.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
	
	ОписанияОбъектовУчета = Новый СписокЗначений;
	Если ДтКт = "Дт" Тогда
		Если ЗначениеЗаполнено(ОписаниеОбъектаУчетаДт) И НЕ ПустаяСтрока(ОписаниеОбъектаУчетаДт.ИсточникДанных) Тогда
			ОписанияОбъектовУчета.Добавить(ОписаниеОбъектаУчетаДт, "ОбъектУчетаДт");
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОбъектаУчетаКт) Тогда
			ОписанияОбъектовУчета.Добавить(ОписаниеОбъектаУчетаКт, "ОбъектУчетаКт");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОбъектаУчетаКт) И НЕ ПустаяСтрока(ОписаниеОбъектаУчетаКт.ИсточникДанных) Тогда
		ОписанияОбъектовУчета.Добавить(ОписаниеОбъектаУчетаКт, "ОбъектУчетаКт");
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОбъектаУчетаДт) Тогда
		ОписанияОбъектовУчета.Добавить(ОписаниеОбъектаУчетаДт, "ОбъектУчетаДт");
	КонецЕсли;
	
	Для каждого ЭлементСписка Из ОписанияОбъектовУчета Цикл
		ВозможныеПоля = МеждународныйУчетПоДаннымФинансовыхРегистров.ВозможныеПоляЗаполненияСубконто(
			               СтрокаНастроек.ТипЗначенияСубконто, ЭлементСписка.Значение, ЭлементСписка.Представление);
		Если ВозможныеПоля.Количество() > 0 Тогда
			СтрокаНастроек.ВыражениеЗаполненияСубконто = ВозможныеПоля[0].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаНастроек.ЕстьПроблемыЗаполненияСубконто = НЕ ЗначениеЗаполнено(СтрокаНастроек.ВыражениеЗаполненияСубконто);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеРучнойНастройкиЗаполненияСубконто(СтрокаНастроек)
	
	ВыражениеЗаполненияСубконто = СтрокаНастроек.ВыражениеЗаполненияСубконто;
	УказанноеЗначениеСубконто = СтрокаНастроек.УказанноеЗначениеСубконто;
	
	Если СтрокаНастроек.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра Тогда
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ВыражениеЗаполненияСубконто);
		ДоступноеПолеВыбора = КомпоновщикНастроекЗаполнениеСубконто.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновкиДанных);
		Если ДоступноеПолеВыбора = Неопределено Тогда
			СтрокаНастроек.ЕстьПроблемыЗаполненияСубконто = Истина;
		КонецЕсли;
	ИначеЕсли СтрокаНастроек.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение Тогда
		ОписаниеТиповСубконто = СтрокаНастроек.ТипЗначенияСубконто; // ОписаниеТипов - 
		Если Не ЗначениеЗаполнено(СтрокаНастроек.УказанноеЗначениеСубконто) Тогда
			СтрокаНастроек.ЕстьПроблемыЗаполненияСубконто = Истина;
		ИначеЕсли  Не ОписаниеТиповСубконто.СодержитТип(ТипЗнч(УказанноеЗначениеСубконто)) Тогда
			СтрокаНастроек.ЕстьПроблемыЗаполненияСубконто = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеВыраженияВСтрокеНаКлиенте(СтрокаНастройки)
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(СтрокаНастройки.ВыражениеЗаполненияСубконто);
	ДоступноеПоле = КомпоновщикНастроекЗаполнениеСубконто.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновкиДанных);
	Если ДоступноеПоле = Неопределено Тогда
		СтрокаНастройки.ПредставлениеВыражения = СтрокаНастройки.ВыражениеЗаполненияСубконто;
	Иначе
		СтрокаНастройки.ПредставлениеВыражения = ДоступноеПоле.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВыраженияВСтрокеНаСервере(СтрокаНастройки)
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(СтрокаНастройки.ВыражениеЗаполненияСубконто);
	ДоступноеПоле = КомпоновщикНастроекЗаполнениеСубконто.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновкиДанных);
	Если ДоступноеПоле = Неопределено Тогда
		СтрокаНастройки.ПредставлениеВыражения = СтрокаНастройки.ВыражениеЗаполненияСубконто;
	Иначе
		СтрокаНастройки.ПредставлениеВыражения = ДоступноеПоле.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыНастройкиСубконто(ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ТаблицаНастройки = ЗаполнениеСубконтоДт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоДт;
		ГруппаНастройкиЗаполненияСубконто = Элементы.ГруппаНастройкиЗаполненияСубконтоДт;
	Иначе
		ТаблицаНастройки = ЗаполнениеСубконтоКт;
		ПользовательскаяНастройкаЗаполненияСубконто = Запись.ПользовательскаяНастройкаЗаполненияСубконтоКт;
		ГруппаНастройкиЗаполненияСубконто = Элементы.ГруппаНастройкиЗаполненияСубконтоКт;
	КонецЕсли;
	
	РезультатПоиска = ТаблицаНастройки.НайтиСтроки(Новый Структура("ЕстьПроблемыЗаполненияСубконто", Истина));
	ЕстьПроблемыЗаполненияСубконто = (РезультатПоиска.Количество() > 0);
	
	Если ПользовательскаяНастройкаЗаполненияСубконто Тогда
		Если ЕстьПроблемыЗаполненияСубконто Тогда
			ГруппаНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Пользовательская настройка субконто (есть ошибки)';
																|en = 'Extra dimension user setting (there are errors)'");
			ГруппаНастройкиЗаполненияСубконто.ЦветТекстаЗаголовка = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Иначе
			ГруппаНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Пользовательская настройка субконто';
																|en = 'Extra dimension user setting'");
			ГруппаНастройкиЗаполненияСубконто.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		КонецЕсли;
	Иначе
		Если ЕстьПроблемыЗаполненияСубконто Тогда
			ГруппаНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Требуется пользовательская настройка';
																|en = 'User setting is required'");
			ГруппаНастройкиЗаполненияСубконто.ЦветТекстаЗаголовка = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Иначе
			ГруппаНастройкиЗаполненияСубконто.Заголовок = НСтр("ru = 'Субконто заполняются автоматически';
																|en = 'Extra dimensions are populated automatically'");
			ГруппаНастройкиЗаполненияСубконто.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

