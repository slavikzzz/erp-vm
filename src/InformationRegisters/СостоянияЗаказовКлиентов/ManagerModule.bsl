#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа.
//
//	Параметры:
//		Заказы - ДокументСсылка - документ, в рамках проведения которого перерасчитывается состояние
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения.
//
Процедура ОтразитьСостояниеЗаказа(Заказы, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(Заказы) = Тип("Массив") Тогда
		ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(Заказы);
		Для Каждого Элемент Из ЗаказыПоТипам Цикл	
			ТипЗаказа = Элемент.Ключ;
			ЗаказыПоТипу = Элемент.Значение;
			
			Если ТипЗаказа = "Документ.ЗаказКлиента"
				//++ НЕ УТКА
				
				//++ Устарело_Переработка24
				Или ТипЗаказа = "Документ.ЗаказДавальца"
				//-- Устарело_Переработка24
				Или ТипЗаказа = "Документ.ЗаказДавальца2_5"
				//-- НЕ УТКА
				Или ТипЗаказа = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок, ЗаказыПоТипу, Истина);
					
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаказКлиента")
		//++ НЕ УТКА

		//++ Устарело_Переработка24
		Или ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаказДавальца")
		//-- Устарело_Переработка24
		Или ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаказДавальца2_5")
		//-- НЕ УТКА
		Или ТипЗнч(Заказы) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")Тогда
		
		МассивСсылок.Добавить(Заказы);
		
	КонецЕсли;
	
	Если МассивСсылок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		
		Для Каждого СтрокаСсылка Из МассивСсылок Цикл
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаСсылка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Заказ, Состояние, ДатаСобытия, 
		|СуммаОплаты, ПроцентОплаты, СуммаОтгрузки, ПроцентОтгрузки, СуммаДолга, ПроцентДолга, ЕстьРасхожденияОрдерНакладная");
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийЗаказов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаПредыдущихСостоянийЗаказов.НайтиСтроки(СтруктураПоиска);
		
		СостояниеИзменено = НЕ Булево(МассивДействующихСостояний.Количество());
		Если СостояниеИзменено Тогда
			
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
			
			СтрокаНабора = Набор.Добавить();
			
			ПроцентДолгаОплатыДоОкругления = СтрокаТаблицы.ПроцентОплаты + СтрокаТаблицы.ПроцентДолга;
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОтгрузки);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОплаты);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентДолга);
			ОстатокПослеОкругления = ПроцентДолгаОплатыДоОкругления - СтрокаТаблицы.ПроцентОплаты - СтрокаТаблицы.ПроцентДолга;
			ОкруглитьПроценты(ПроцентДолгаОплатыДоОкругления);
			// Если оплата и долг в сумме 100%, хвосты от округления добавим, по возможности, к долгу, 
			// чтобы оплата сходилась с текстом гиперссылки "Состояние расчетов"
			Если ОстатокПослеОкругления <> 0 
				И ПроцентДолгаОплатыДоОкругления = СтрокаТаблицы.ПроцентОтгрузки 
				И СтрокаТаблицы.ПроцентОплаты > 0
				И СтрокаТаблицы.ПроцентДолга > 0
				И СтрокаТаблицы.СуммаДолга > 0 Тогда
				Если СтрокаТаблицы.ПроцентДолга + ОстатокПослеОкругления < 1 Тогда
					СтрокаТаблицы.ПроцентОплаты = СтрокаТаблицы.ПроцентОплаты + ОстатокПослеОкругления;
				Иначе
					СтрокаТаблицы.ПроцентДолга = СтрокаТаблицы.ПроцентДолга + ОстатокПослеОкругления;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			
			Попытка
				Набор.Записать(Истина);
			Исключение
				Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заказа клиента: %Ссылка% по причине: %Причина%';
											|en = 'Cannot record state of sales order: %Ссылка%. Reason: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаказКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заявки на возврат: %Ссылка% по причине: %Причина%';
											|en = 'Cannot record a state of the return request: %Ссылка%. Reason: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				//++ НЕ УТКА

				//++ Устарело_Переработка24
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заказа давальца: %Ссылка% по причине: %Причина%';
											|en = 'Cannot record state of material provider order: %Ссылка%. Reason: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				//-- Устарело_Переработка24
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
					
					ТекстСообщения = СтрШаблон(
										НСтр("ru = 'Не удалось отразить состояние заказа давальца: %1 по причине: %2';
											|en = 'Cannot record the state of the subcontracting sales order: %1. Reason: %2'"),
										СтрокаТаблицы.Заказ,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаказДавальца2_5,
						СтрокаТаблицы.Заказ,
						ТекстСообщения);
				//-- НЕ УТКА
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицы состояний заказов клиентов и давальцев
//
//	Параметры:
//		МассивСсылок - Массив - массив заказов, таблицы состояний которых требуется получить
// Возвращаемое значение:
//	Структура - структура состояний содержащая значения:
//		ТаблицаСостоянийЗаказов
//		ТаблицаПредыдущихСостоянийЗаказов
//
Функция ТаблицыСостоянийЗаказов(МассивСсылок) Экспорт
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Возврат Новый Структура("ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов",
		ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов);
	
КонецФункции

// Отражает изменения состояний заказов в регистре.
//
// Параметры:
//  ДокументИсточник - ДокументОбъект - записываемый документ.
//  МассивЗаказов - Массив из ДокументСсылка - массив отражаемых заказов.
//
Процедура ОтразитьСостоянияЗаказов(ДокументИсточник, МассивЗаказов) Экспорт
	
	Если МассивЗаказов.Найти(ДокументИсточник.Ссылка) = Неопределено Тогда
		МассивЗаказов.Добавить(ДокументИсточник.Ссылка);
	КонецЕсли;
	ОтразитьСостояниеЗаказа(МассивЗаказов, Ложь, Ложь);
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос) Экспорт

	СоответствиеЗаданий = Новый Соответствие();
	СоответствиеЗаданий.Вставить("ДвиженияЗаказыКлиентовИзменение", ТекстЗапросаЗаказыКлиентов(Запрос));
	СоответствиеЗаданий.Вставить("РасчетыСКлиентамиИзменения", ТекстЗапросаРасчетыСКлиентами(Запрос));
	СоответствиеЗаданий.Вставить("ДвиженияТоварыКОтгрузкеИзменение", ТекстЗапросаТоварыКОтгрузке(Запрос));
	СоответствиеЗаданий.Вставить("ТоварыКПоступлениюИзменение", ТекстЗапросаТоварыКПоступлению(Запрос));
	Если Не РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием() Тогда
		СоответствиеЗаданий.Вставить("СостоянияЗаказовКлиентовИзменение",
			ТекстЗапросаСостоянияЗаказовКлиентовИзменение(Запрос));
	КонецЕсли;
	Возврат СоответствиеЗаданий;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыАктуализацииСостоянийЗаказов() Экспорт
	
	Результат = Новый Структура("ПравилоОтбораЗаписей,ФункцияСравненияЗаписей,ФункцияСравненияЗаписейВоВременнуюТаблицу");
	
	Результат.ПравилоОтбораЗаписей =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	ФильтрПереопределяемый КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.Номенклатура  = Товары.Номенклатура
		|		И РаспределениеЗапасов.Характеристика = Товары.Характеристика
		|		И РаспределениеЗапасов.Склад          = Товары.Склад
		|		И РаспределениеЗапасов.Назначение     = Товары.Назначение
		|		И РаспределениеЗапасов.Состояние В(
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|				ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате))
		|			
		|ГДЕ
		|	НЕ РаспределениеЗапасов.Номенклатура ЕСТЬ NULL
		|		И ТИПЗНАЧЕНИЯ(РаспределениеЗапасов.ЗаказНаОтгрузку) В(
		|			ТИП(Документ.ЗаказКлиента),
		//++ НЕ УТКА

		//++ Устарело_Переработка24
		|			ТИП(Документ.ЗаказДавальца),
		//-- Устарело_Переработка24
		|			ТИП(Документ.ЗаказДавальца2_5),
		//-- НЕ УТКА
		|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку";
		
	Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу =
		"ВЫБРАТЬ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ПОМЕСТИТЬ ИзменениеПереопределяемый
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		ПО ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|ГДЕ
		|		ПриЗаписи.ЗаказНаОтгрузку ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|		ПО ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|ГДЕ
		|	ПередЗаписью.ЗаказНаОтгрузку ЕСТЬ NULL";
	
	Результат.ФункцияСравненияЗаписей = СтрЗаменить(Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу,
		"ПОМЕСТИТЬ ИзменениеПереопределяемый", "");

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Округляет проценты отгрузки, оплаты, долга
//
// Параметры:
//	ОкругляемоеЧисло - Число - округляемое число.
//
Процедура ОкруглитьПроценты(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
	ОкругляемоеЧисло = Окр(ОкругляемоеЧисло);
	
КонецПроцедуры

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаСостоянийЗаказов(МассивСсылок)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ПервыйЗапрос = Истина;
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
		+ ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
		+ ТекстЗапросаЧастичноВНаличии()
		+ ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
		//++ НЕ УТКА
		+ ТекстЗапросаДляРасчетаУслугДавальцуКОформлению()
		//-- НЕ УТКА
		+ ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов);
	
	Если НоваяАрхитектураВзаиморасчетов Тогда
		ТекстЗапросаСостояниеВзаиморасчетов = ТекстЗапросаСостояниеВзаиморасчетов();
	Иначе
		ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц
			+ ТекстЗапросаРасчетов()
			+ ТекстЗапросаОстатковРасчетов();
		ТекстЗапросаСостояниеВзаиморасчетов = "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для Каждого ТипДокумента Из СоотвествиеТипов Цикл
		
		Если Не ПервыйЗапрос Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			" ОБЪЕДИНИТЬ ВСЕ ";
			Если Не НоваяАрхитектураВзаиморасчетов Тогда
				ТекстЗапросаСостояниеВзаиморасчетов = ТекстЗапросаСостояниеВзаиморасчетов + 
				" ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
		КонецЕсли;
		Если ТипДокумента.Ключ = "Документ.ЗаказКлиента"
			//++ НЕ УТКА

			//++ Устарело_Переработка24
			Или ТипДокумента.Ключ = "Документ.ЗаказДавальца"
			//-- Устарело_Переработка24
			Или ТипДокумента.Ключ = "Документ.ЗаказДавальца2_5"
			//-- НЕ УТКА
			Или ТипДокумента.Ключ = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			МенеджерОбъекта             = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
			ТекстЗапроса                = ТекстЗапроса + МенеджерОбъекта.ТекстЗапросаДляРасчетаСостоянийЗаказов();
			
			Если Не НоваяАрхитектураВзаиморасчетов Тогда
				Если ПервыйЗапрос Тогда
					ТекстЗапросаСостояниеВзаиморасчетов = ТекстЗапросаСостояниеВзаиморасчетов + 
						ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокумента.Ключ);
				Иначе
					ТекстЗапросаСостояниеВзаиморасчетов = ТекстЗапросаСостояниеВзаиморасчетов + 
						СтрЗаменить(ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокумента.Ключ), "ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов", "");
				КонецЕсли;
			КонецЕсли;
			
			ПервыйЗапрос = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаВременныхТаблиц 
	               + ТекстЗапросаСостояниеВзаиморасчетов
	               + ОбщегоНазначения.РазделительПакетаЗапросов()
	               + ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказов", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера", Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки"));
				
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказаДавальца", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОплаты")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОтработки"));
	//-- Устарело_Переработка24
	
	Запрос.УстановитьПараметр(
			"КонтролироватьЗакрытиеЗаказаДавальца2_5",
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОплаты2_5")
			Или ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыДавальцевБезПолнойОтработки2_5"));
	//-- НЕ УТКА
	
	Запрос.УстановитьПараметр("МерныеТипыВеличин", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);
	Запрос.УстановитьПараметр("ДанныеОтчета", 4);

	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Функция возвращает текст запроса для расчета даты актуальности состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК ЗаказКлиента
		|ПОМЕСТИТЬ ВтОбъектыРасчетов
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&МассивЗаказов)
		|;
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.Период, ДЕНЬ) КАК Период,
		|	СУММА(РасчетыСКлиентами.КОплате) КАК КОплатеПриход,
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ЭтапыРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов В (
		|		ВЫБРАТЬ ОбъектРасчетов ИЗ ВтОбъектыРасчетов)
		|	И РасчетыСКлиентами.Активность
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = ОбъектРасчетов.Организация
		|	И РасчетыСКлиентами.КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.ОбъектРасчетов,
		|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
		|	СУММА(РасчетыСКлиентами.КОплате) КАК КОплатеРасход
		|ПОМЕСТИТЬ ОплаченоПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов В (
		|		ВЫБРАТЬ ОбъектРасчетов ИЗ ВтОбъектыРасчетов)
		|	И РасчетыСКлиентами.Активность
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = ОбъектРасчетов.Организация
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.ОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыРасчетов.Период КАК Период,
		|	ЭтапыРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ РезультатРасчетов
		|ИЗ
		|	ЭтапыРасчетов КАК ЭтапыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыРасчетов КАК РасчетыСКлиентами
		|		ПО (РасчетыСКлиентами.Период <= ЭтапыРасчетов.Период)
		|			И (РасчетыСКлиентами.ОбъектРасчетов = ЭтапыРасчетов.ОбъектРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК Оплачено
		|		ПО ЭтапыРасчетов.ОбъектРасчетов = Оплачено.ОбъектРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыРасчетов.Период,
		|	ЭтапыРасчетов.ОбъектРасчетов,
		|	Оплачено.КОплатеРасход
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентами.КОплатеПриход) - ЕСТЬNULL(Оплачено.КОплатеРасход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РезультатРасчетов.Период) КАК ДатаАктуальности,
		|	РезультатРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДатыАктуальностиЗаказовКлиентов
		|ИЗ
		|	РезультатРасчетов КАК РезультатРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатРасчетов.ОбъектРасчетов";
		
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ЗапасыИПотребности.ДатаСобытия) КАК МинимальнаяДатаОтгрузки,
		|	ЗапасыИПотребности.Заказ КАК ЗаказКлиента
		|ПОМЕСТИТЬ ДатыОтгрузкиЗаказовКлиентов
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(, Заказ В(&МассивЗаказов)) КАК ЗапасыИПотребности
		|ГДЕ
		|	ЗапасыИПотребности.РезервироватьНаСкладеОстаток > 0
		|		ИЛИ ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток > 0
		|		ИЛИ ЗапасыИПотребности.ОтложитьРезервированиеОстаток > 0
		|		ИЛИ ЗапасыИПотребности.КОбеспечениюОстаток > 0
		|		ИЛИ ЗапасыИПотребности.НеОбеспечиватьОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыИПотребности.Заказ";
	
	Тексты.Добавить(ТекстЗапроса);
	
	Тексты.Добавить(
		"УНИЧТОЖИТЬ ЭтапыРасчетов;
		|УНИЧТОЖИТЬ РезультатРасчетов;
		|");
	
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса для расчета состояний обеспечения заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|				И Таблица.Номенклатура.ТипНоменклатуры В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЕстьКОбеспечению,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))) КАК ЕстьТребующиеРаспределенияЗапасов,
		|	
		|	МИНИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)) КАК ВсеОтгрузить
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказа
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|		И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|				И Таблица.Номенклатура.ТипНоменклатуры В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЕстьКОбеспечению,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))) КАК ЕстьТребующиеРаспределенияЗапасов,
		|	
		|	МИНИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)) КАК ВсеОтгрузить
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|		И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		//++ НЕ УТКА

		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|				И Таблица.Номенклатура.ТипНоменклатуры В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЕстьКОбеспечению,
		|	
		|	МАКСИМУМ(Таблица.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))) КАК ЕстьТребующиеРаспределенияЗапасов,
		|	
		|	МИНИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)) КАК ВсеОтгрузить
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		//-- Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|				И Таблица.Номенклатура.ТипНоменклатуры В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЕстьКОбеспечению,
		|	
		|	МАКСИМУМ(Таблица.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления))) КАК ЕстьТребующиеРаспределенияЗапасов,
		|	
		|	МИНИМУМ(ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ) КАК ВсеОтгрузить
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И НЕ Таблица.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка
		//-- НЕ УТКА
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

//++ НЕ УТКА

// Функция возвращает текст запроса для получения данных об услугах давальцу к оформлению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаУслугДавальцуКОформлению()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлению,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента       КАК Заказ
	|ПОМЕСТИТЬ ВТУслугиДавальцуКОформлению
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|		,
	|		ЗаказКлиента В (&МассивЗаказов)
	|		И ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказДавальца2_5)) КАК ЗаказыКлиентовОстатки
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЗаказыОстатки.КОформлениюОстаток,0)) КАК КОформлению,
	|	ЗаказыОстатки.ЗаказДавальца КАК Заказ
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки(,ЗаказДавальца В (&МассивЗаказов)) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказДавальца
	//-- Устарело_Переработка24
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции
//-- НЕ УТКА

// Функция возвращает текст запроса для расчета расхождений ордер-накладная.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
	
	ТекстЗапроса = ТекстЗапросаДляРасчетаЕстьОрдер() + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТоварыКОтгрузке.КОформлениюПриход > 0 
		|			И ТоварыКОтгрузке.КОформлениюРасход <> (ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ЕстьРасхожденияОрдерНакладная,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА &МенеджерСоздаетОрдера
		|			И (ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)))
		|			И ВТЕстьОрдер.ЕстьОрдер ЕСТЬ NULL ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ТребуетсяОрдер
		|ПОМЕСТИТЬ ВТРасхожденияОрдерНакладная
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьОрдер КАК ВТЕстьОрдер
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТЕстьОрдер.ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
		|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для поиска расходных ордеров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаЕстьОрдер()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	ИСТИНА КАК ЕстьОрдер
		|ПОМЕСТИТЬ ВТЕстьОрдер
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , Регистратор, , ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СостоянияЗаказовКлиентов.Заказ КАК Заказ,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	СостоянияЗаказовКлиентов.ДатаСобытия КАК ДатаСобытия,
	|	СостоянияЗаказовКлиентов.СуммаОплаты КАК СуммаОплаты,
	|	СостоянияЗаказовКлиентов.ПроцентОплаты КАК ПроцентОплаты,
	|	СостоянияЗаказовКлиентов.СуммаОтгрузки КАК СуммаОтгрузки,
	|	СостоянияЗаказовКлиентов.ПроцентОтгрузки КАК ПроцентОтгрузки,
	|	СостоянияЗаказовКлиентов.СуммаДолга КАК СуммаДолга,
	|	СостоянияЗаказовКлиентов.ПроцентДолга КАК ПроцентДолга,
	|	СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|ГДЕ
	|	СостоянияЗаказовКлиентов.Заказ В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстЗапросаЧастичноВНаличии()
	
	ТекстЗапроса =
		"
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЧастичноВНаличии
		|ИЗ
		|	ВТОбеспечениеЗаказа КАК Заказы
		|ГДЕ
		|	Заказы.ЕстьТребующиеРаспределенияЗапасов
		|	И (ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ГДЕ
		|			Сведения.ЗаказНаОтгрузку = Заказы.Ссылка
		|				И Сведения.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)))
		// документ не был проведен
		|		ИЛИ НЕ ИСТИНА В(
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЕстьЗаписи
		|				ИЗ
		|					РегистрСведений.РаспределениеЗапасов КАК Сведения
		|				ГДЕ
		|					Сведения.ЗаказНаОтгрузку = Заказы.Ссылка))
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для расчета допустимых отклонения мерных товаров.
Функция ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
	
	Если НЕ СоотвествиеТипов["Документ.ЗаказКлиента"] = Неопределено
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаявкаНаВозвратТоваровОтКлиента"] = Неопределено
		//++ НЕ УТКА

		//++ Устарело_Переработка24
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаказДавальца"] = Неопределено
		//-- Устарело_Переработка24
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаказДавальца2_5"] = Неопределено
		//-- НЕ УТКА
		Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказКлиента                           КАК ЗаказКлиента,
		|	СУММА(ЗаказыОстатки.КОформлениюКонечныйОстаток)      КАК КОформлениюКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.ЗаказаноКонечныйОстаток)         КАК ЗаказаноКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаКонечныйОстаток)            КАК СуммаКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаРасходСУчетомМерныхТоваров) КАК СуммаРасходСУчетомМерныхТоваров,
		|	СУММА(ЗаказыОстатки.СуммаРасход)                     КАК СуммаРасход
		|	
		|ПОМЕСТИТЬ ВТЗаказыКлиентовОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента   КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.Номенклатура   КАК Номенклатура,
		|		ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
		|		ЗаказыКлиентовОстатки.Склад          КАК Склад,
		|		ЗаказыКлиентовОстатки.Серия          КАК Серия,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК КОформлениюКонечныйОстаток,
		|	
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК ЗаказаноКонечныйОстаток,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток,
		|		
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.СуммаКонечныйОстаток <= 
		|								ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.СуммаКонечныйОстаток >= 
		|								-ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							ТОГДА ЗаказыКлиентовОстатки.СуммаПриход
		|						ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|					КОНЕЦ
		|			ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|		КОНЕЦ                                                    КАК СуммаРасходСУчетомМерныхТоваров,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасход, 0) КАК СуммаРасход
		|		
		|	ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
		|		,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки) КАК ЗаказыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	СУММА(ТоварыОстатки.КОтгрузкеОстаток) КАК КОтгрузкеОстаток
		|
		|ПОМЕСТИТЬ ВТТоварыКОтгрузкеОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента,
		|		ТоварыКОтгрузкеОстатки.Номенклатура     КАК Номенклатура,
		|		ТоварыКОтгрузкеОстатки.Характеристика   КАК Характеристика,
		|		ТоварыКОтгрузкеОстатки.Склад            КАК Склад,
		|		ТоварыКОтгрузкеОстатки.Серия            КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток <= ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток >= -(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|		КОНЕЦ                                   КАК КОтгрузкеОстаток
		|
		|ИЗ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(&НачПериодТоварыКОтгрузке, &КонПериодТоварыКОтгрузке,
		|	,, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	
КонецФункции

Функция ТекстЗапросаРасчетов()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная,
	|	ВтОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетовЗаказ,
	|	ВтОбъектыРасчетов.ЗаказКлиента КАК ЗаказКлиента,
	|	СУММА(ВЫБОР
	|			КОГДА ОбъектыРасчетов.Сумма = 0
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСКлиентамиОбороты.КОтгрузкеПриход / ОбъектыРасчетов.Сумма
	|		КОНЕЦ) КАК ДоляЗаказа
	|ПОМЕСТИТЬ ВтСвязьЗаказовНакладных
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , Регистратор, ОбъектРасчетов В (ВЫБРАТЬ Т.ОбъектРасчетов ИЗ ВтОбъектыРасчетов КАК Т)) КАК РасчетыСКлиентамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО РасчетыСКлиентамиОбороты.Регистратор = ОбъектыРасчетов.Объект
	|			И НЕ ОбъектыРасчетов.ПометкаУдаления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ПО РасчетыСКлиентамиОбороты.ОбъектРасчетов = ВтОбъектыРасчетов.ОбъектРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыРасчетов.Ссылка,
	|	ВтОбъектыРасчетов.ОбъектРасчетов,
	|	ВтОбъектыРасчетов.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЕСТЬNULL(СУММА(ДанныеПоРасчетам.ОплатаФакт), 0) КАК ОплатаФакт,
	|	ЕСТЬNULL(СУММА(ДанныеПоРасчетам.КОплате), 0) КАК КОплатеКонечныйОстаток
	|ПОМЕСТИТЬ ВтДанныеПоРасчетамСКлиентами
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента) 
	|				ТОГДА ВЫБОР
	|					КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|						ТОГДА ВЫБОР 
	|								КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|									ТОГДА -РасчетыСКлиентами.Сумма
	|								ИНАЧЕ РасчетыСКлиентами.Сумма
	|							КОНЕЦ
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|				И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					ТОГДА 0
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|		КОНЕЦ КАК ОплатаФакт,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыСКлиентами.КОплате
	|			ИНАЧЕ -РасчетыСКлиентами.КОплате
	|		КОНЕЦ КАК КОплате
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.ОбъектРасчетов.Объект В (&МассивЗаказов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтСвязьЗаказовНакладных.ОбъектРасчетовЗаказ КАК ОбъектРасчетов,
	|		0 КАК ОплатаФакт,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыСКлиентами.КОплате
	|			ИНАЧЕ -РасчетыСКлиентами.КОплате
	|		КОНЕЦ КАК КОплате
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСвязьЗаказовНакладных КАК ВтСвязьЗаказовНакладных
	|			ПО РасчетыСКлиентами.ОбъектРасчетов = ВтСвязьЗаказовНакладных.ОбъектРасчетовНакладная
	|	ГДЕ
	|		РасчетыСКлиентами.ОбъектРасчетов В
	|				(ВЫБРАТЬ
	|					Т.ОбъектРасчетовНакладная
	|				ИЗ
	|					ВтСвязьЗаказовНакладных КАК Т)) КАК ДанныеПоРасчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоРасчетам.ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

Функция ТекстЗапросаОстатковРасчетов()
	
	Возврат "
	|ВЫБРАТЬ
	|		РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|				И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|			ТОГДА РасчетыСКлиентами.КОплате
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК КОплатеРасход,
	|		ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА - РасчетыСКлиентами.КОплате
	|			ИНАЧЕ РасчетыСКлиентами.КОплате
	|		КОНЕЦ), 0) КАК КОплатеКонечныйОстаток,
	|		ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСКлиентами.КОтгрузке
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК КОтгрузкеПриход,
	|		ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА - РасчетыСКлиентами.Сумма
	|			ИНАЧЕ РасчетыСКлиентами.Сумма
	|		КОНЕЦ), 0) КАК СуммаКонечныйОстаток
	|ПОМЕСТИТЬ ВтРасчетыСКлиентамиОстатки
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.ОбъектРасчетов В (ВЫБРАТЬ Т.ОбъектРасчетов ИЗ ВтОбъектыРасчетов КАК Т)
	|		И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = ОбъектРасчетов.Организация
	|		И РасчетыСКлиентами.Активность
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

Функция ТекстЗапросаСостояниеВзаиморасчетов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Ссылка                КАК ОбъектРасчетовНакладная,
		|	ОбъектыРасчетовЗаказ.Ссылка           КАК ОбъектРасчетовЗаказ,
		|	ОбъектыРасчетовЗаказ.Объект           КАК Заказ,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ОбъектыРасчетов.СуммаВзаиморасчетов = 0
		|				ТОГДА ВЫБОР
		|						КОГДА ОбъектыРасчетов.Сумма = 0
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыСКлиентамиОбороты.КОтгрузкеПриход / ОбъектыРасчетов.Сумма
		|					КОНЕЦ
		|			ИНАЧЕ РасчетыСКлиентамиОбороты.КОтгрузкеПриход / ОбъектыРасчетов.СуммаВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(20,10))) КАК ДоляЗаказа,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ОбъектыРасчетовЗаказ.СуммаВзаиморасчетов = 0
		|				ТОГДА ОбъектыРасчетовЗаказ.Сумма
		|			ИНАЧЕ ОбъектыРасчетовЗаказ.СуммаВзаиморасчетов
		|		КОНЕЦ) КАК СуммаЗаказа
		|ПОМЕСТИТЬ ВтСвязьЗаказовНакладных
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты( , , Регистратор, ) КАК РасчетыСКлиентамиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовЗаказ
		|		ПО РасчетыСКлиентамиОбороты.ОбъектРасчетов = ОбъектыРасчетовЗаказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСКлиентамиОбороты.Регистратор = ОбъектыРасчетов.Объект
		|		И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	ОбъектыРасчетовЗаказ.Объект В (&МассивЗаказов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Ссылка,
		|	ОбъектыРасчетовЗаказ.Ссылка,
		|	ОбъектыРасчетовЗаказ.Объект
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРасчетовНакладная
		|
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.Заказ КАК Заказ,
		|	МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК СуммаЗаказа,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаОплат), 0) КАК ЧИСЛО(31,2)) КАК СуммаОплаты,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаОплатПоЗаказу), 0) КАК ЧИСЛО(31,2)) КАК ОплаченоПоЗаказу,
		|	
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) - СУММА(Расчеты.СуммаОплат) + СУММА(Расчеты.СуммаСписаний), 0) КАК ЧИСЛО(31,2)) <= 0
		|		ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) - СУММА(Расчеты.СуммаОплат) + СУММА(Расчеты.СуммаСписаний), 0) КАК ЧИСЛО(31,2))
		|	КОНЕЦ КАК ОсталосьОплатить,
		|	
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаОтгрузок), 0) КАК ЧИСЛО(31,2)) КАК СуммаОтгрузки,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) КАК ЧИСЛО(31,2)) КАК СуммаДолга,
		|	
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаОплат), 0) КАК ЧИСЛО(31,2)) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(Расчеты.СуммаОплат) КАК ЧИСЛО(31,2)) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ КАК ПроцентОплаты,
		|	
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаОтгрузок), 0) КАК ЧИСЛО(31,2)) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(Расчеты.СуммаОтгрузок) КАК ЧИСЛО(31,2)) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ КАК ПроцентОтгрузки,
		|	
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) КАК ЧИСЛО(31,2)) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0 
		|		КОГДА ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) > 0
		|			ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(Расчеты.СуммаЗадолженности) КАК ЧИСЛО(31,2)) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ - ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(Расчеты.СуммаЗадолженности) КАК ЧИСЛО(31,2)) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ КАК ПроцентДолга
		|	
		|ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов
		|ИЗ (ВЫБРАТЬ
		|		ОбъектыРасчетов.Объект КАК Заказ,
		|		&ШаблонПоляОплачено    КАК СуммаОплат,
		|		&ШаблонПоляОплачено    КАК СуммаОплатПоЗаказу,
		|		&ШаблонПоляСписание    КАК СуммаСписаний,
		|		&ШаблонПоляОтгружено   КАК СуммаОтгрузок,
		|		
		|		ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Долг - РасчетыПоСрокам.Предоплата
		|			ИНАЧЕ РасчетыПоСрокам.Предоплата - РасчетыПоСрокам.Долг
		|		КОНЕЦ                  КАК СуммаЗадолженности,
		|		
		|		ВЫБОР КОГДА ОбъектыРасчетов.СуммаВзаиморасчетов = 0
		|			ТОГДА ОбъектыРасчетов.Сумма
		|			ИНАЧЕ ОбъектыРасчетов.СуммаВзаиморасчетов
		|		КОНЕЦ                  КАК СуммаПервоначальныхВзаиморасчетов
		|		
		|	ИЗ
		|			РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|				ПО РасчетыПоСрокам.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|		ГДЕ
		|			ОбъектыРасчетов.Объект В (&МассивЗаказов)
		|			И РасчетыПоСрокам.АналитикаУчетаПоПартнерам.Организация = ОбъектыРасчетов.Организация
		|			И РасчетыПоСрокам.Активность
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВтСвязьЗаказовНакладных.Заказ                                                           КАК Заказ,
		|		ВЫРАЗИТЬ((&ШаблонПоляОплачено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(20, 10))  КАК СуммаОплат,
		|		ВЫРАЗИТЬ((&ШаблонПоляОплачено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(20, 10))  КАК СуммаОплатПоЗаказу,
		|		ВЫРАЗИТЬ((&ШаблонПоляСписание) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(20, 10))  КАК СуммаСписаний,
		|		ВЫРАЗИТЬ((&ШаблонПоляОтгружено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(20, 10)) КАК СуммаОтгрузок,
		|		
		|		ВЫРАЗИТЬ(ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Долг - РасчетыПоСрокам.Предоплата
		|			ИНАЧЕ РасчетыПоСрокам.Предоплата - РасчетыПоСрокам.Долг
		|		КОНЕЦ * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(20, 10))                           КАК СуммаЗадолженности,
		|		
		|		ВтСвязьЗаказовНакладных.СуммаЗаказа                                                     КАК СуммаПервоначальныхВзаиморасчетов
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСвязьЗаказовНакладных КАК ВтСвязьЗаказовНакладных
		|			ПО РасчетыПоСрокам.ОбъектРасчетов = ВтСвязьЗаказовНакладных.ОбъектРасчетовНакладная 
		|	ГДЕ
		|		РасчетыПоСрокам.ОбъектРасчетов В (ВЫБРАТЬ
		|							Т.ОбъектРасчетовНакладная
		|						ИЗ
		|							ВтСвязьЗаказовНакладных КАК Т)
		|		И РасчетыПоСрокам.АналитикаУчетаПоПартнерам.Организация = РасчетыПоСрокам.ОбъектРасчетов.Организация
		|		И РасчетыПоСрокам.Активность
		|	) КАК Расчеты
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.Заказ
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|";
	
	ШаблонПоляСуммаКорректировок = "
		|ВЫБОР 
		|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.КорректировкаРеализации)
		|		И НЕ РасчетыПоСрокам.Сторно
		|		ТОГДА 
		|			ВЫБОР
		|				КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ВЫБОР КОГДА Предоплата - Долг > 0 
		|							ТОГДА Предоплата - Долг
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР КОГДА Долг - Предоплата > 0 
		|						ТОГДА Долг - Предоплата
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	ИНАЧЕ 0
		|КОНЕЦ
		|";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ШаблонПоляОплачено",
		СтрШаблон(
			"%1 + %2 + %3",
			ВзаиморасчетыСервер.ШаблонПоляОплаченоКлиентом(),
			ВзаиморасчетыСервер.ШаблонПоляЗачтеноКлиенту(),
			ШаблонПоляСуммаКорректировок)); 
	ШаблонПоляСуммаКорректировок = "
		|ВЫБОР 
		|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.КорректировкаРеализации)
		|		И НЕ РасчетыПоСрокам.Сторно
		|		ТОГДА 
		|			ВЫБОР
		|				КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА Предоплата - Долг 
		|				ИНАЧЕ Долг - Предоплата
		|			КОНЕЦ
		|	ИНАЧЕ 0
		|КОНЕЦ
		|";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ШаблонПоляОтгружено",
		СтрШаблон(
			"%1 + %2",
			ВзаиморасчетыСервер.ШаблонПоляОтгруженоКлиенту(),
			ШаблонПоляСуммаКорректировок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонПоляСписание", ВзаиморасчетыСервер.ШаблонПоляСписаниеПереоценкаЗадолженности());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокументаСтрокой)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	ДокументЗаказ.Ссылка                            КАК Заказ,
		|	ДокументЗаказ.СуммаДокумента                    КАК СуммаЗаказа,
		|	РасчетыСКлиентамиОстатки.КОплатеРасход          КАК ОплаченоПоЗаказу,
		|	ВтДанныеПоРасчетамСКлиентами.КОплатеКонечныйОстаток КАК ОсталосьОплатить,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ТОГДА ВЫРАЗИТЬ (ЕСТЬNULL(ОплаченоПоЗаказам.КОплатеРасход, 0) КАК ЧИСЛО(31,2))
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					ТОГДА ВЫРАЗИТЬ (ЕСТЬNULL(ВтДанныеПоРасчетамСКлиентами.ОплатаФакт, 0) КАК ЧИСЛО(31,2))
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаОплаты,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ТОГДА ВЫРАЗИТЬ ((ЕСТЬNULL(ОплаченоПоЗаказам.КОплатеРасход, 0)) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					ТОГДА ВЫРАЗИТЬ ((ЕСТЬNULL(ВтДанныеПоРасчетамСКлиентами.ОплатаФакт, 0)) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентОплаты,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаОтгрузки,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентОтгрузки,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаДолга,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ((ВЫБОР 
		|				КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0 
		|					ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|				ИНАЧЕ ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|			КОНЕЦ * 100 / ДокументЗаказ.СуммаДокумента) КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентДолга
		|
		|ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов
		|ИЗ
		|	#ИмяДокумента КАК ДокументЗаказ
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетыСКлиентамиОстатки КАК РасчетыСКлиентамиОстатки
		|		ПО ДокументЗаказ.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов 
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК ОплаченоПоЗаказам
		|		ПО ДокументЗаказ.ОбъектРасчетов = ОплаченоПоЗаказам.ОбъектРасчетов
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоРасчетамСКлиентами КАК ВтДанныеПоРасчетамСКлиентами
		|		ПО ДокументЗаказ.ОбъектРасчетов = ВтДанныеПоРасчетамСКлиентами.ОбъектРасчетов
		|ГДЕ
		|	ДокументЗаказ.Ссылка В (&МассивЗаказов)
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", ТипДокументаСтрокой);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область СлужебныеМетодыФормированияСостояний

#Область ТекстыЗапросовПоКонтрольнымРегистрам

Функция ТекстЗапросаЗаказыКлиентов(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказКлиента КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыКлиентовИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК ОтражаемыйДокумент
	|ИЗ
	|	РасчетыСКлиентамиИзменения КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Ссылка = Таблица.ОбъектРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСКлиентами.ПродажаПоЗаказу КАК ОтражаемыйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСКлиентами.ПродажаПоЗаказу
	|		И НЕ ОбъектыРасчетов.ПометкаУдаления
	|ГДЕ
	|	(РасчетыСКлиентами.АналитикаУчетаПоПартнерам, РасчетыСКлиентами.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ РасчетыСКлиентамиИзменения КАК Т)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКОтгрузке(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияТоварыКОтгрузкеИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументОтгрузки) В (ТИП(Документ.ЗаказКлиента),
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	|	ТИП(Документ.ЗаказДавальца),
	//-- Устарело_Переработка24
	|	ТИП(Документ.ЗаказДавальца2_5),
	//-- НЕ УТКА
	|	ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКПоступлению(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументПоступления КАК ОтражаемыйДокумент
	|ИЗ
	|	ТоварыКПоступлениюИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументПоступления) В (ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаСостоянияЗаказовКлиентовИзменение(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Заказ КАК ОтражаемыйДокумент
	|ИЗ
	|	СостоянияЗаказовКлиентовИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
