#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Сохраняем идентификаторы ошибок перед записью для последующего удаления неактуальных ошибок
	
	ИдентификаторыОшибок = Неопределено; 
	Если Замещение
		И НЕ ДополнительныеСвойства.Свойство("ПолныйРасчет") И УстановленныйОтборСоответствуетПравилам() Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ПустойИдентификаторОшибки", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|
		|	КэшНСИ.ИдентификаторОшибки КАК ИдентификаторОшибки
		|ИЗ
		|	РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
		|ГДЕ
		|	&Условие
		|	И КэшНСИ.ИдентификаторОшибки <> &ПустойИдентификаторОшибки
		|";
		
		УстановитьОтборыВТекстЗапроса(Запрос, "КэшНСИ", "Условие");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ИдентификаторыОшибок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ИдентификаторыОшибокПередЗаписью", ИдентификаторыОшибок);

	// Заполняем служебные данные
	
	РазделителиЗаписи  = Новый Соответствие;
	
	ТекущийРазделитель = Неопределено;
	ТекущийЗаказ       = Неопределено;
	
	Для каждого Запись Из ЭтотОбъект Цикл
		
		Если ТекущийЗаказ <> Запись.ЗаказНаПроизводство Тогда
			
			ТекущийЗаказ = Запись.ЗаказНаПроизводство;
			ТекущийРазделитель = РазделителиЗаписи[ТекущийЗаказ];
			
			Если ТекущийРазделитель = Неопределено Тогда
				ТекущийРазделитель = Новый УникальныйИдентификатор();
				РазделителиЗаписи.Вставить(ТекущийЗаказ, ТекущийРазделитель);
			КонецЕсли;
			
		КонецЕсли;
		
		Запись.Разделитель = ТекущийРазделитель;
		
		Если Запись.Запланировать
			И Запись.ТипОбеспечения = Перечисления.ТипыОбеспечения.Производство Тогда
			
			Запись.ГруппаИзделий = СтруктураЗаказа.ГруппаИзделийКонтрольнаяСумма(Запись);
			
		Иначе
			
			Запись.ГруппаИзделий = "";
			
		КонецЕсли;
		
		Запись.ИдентификаторОшибки = Неопределено;
		
		Если Запись.Запланировать
			И Запись.Спецификация.Пустая() И Запись.ТипОбеспечения = Перечисления.ТипыОбеспечения.Производство Тогда
			
			Запись.ИдентификаторОшибки = Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем неактуальные ошибки
	
	ИдентификаторыОшибок = ДополнительныеСвойства.ИдентификаторыОшибокПередЗаписью; // Массив
	
	Если ЗначениеЗаполнено(ИдентификаторыОшибок) Тогда
		
		УдаляемыеОшибки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИдентификаторыОшибок, ВыгрузитьКолонку("ИдентификаторОшибки"));
		
		СтруктураОшибок = Новый Структура();
		СтруктураОшибок.Вставить("ТипОшибки", Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций);
		СтруктураОшибок.Вставить("Ошибки", УдаляемыеОшибки);
		
		РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.УдалитьОшибки(СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановленныйОтборСоответствуетПравилам()
	
	ЕстьОшибки = Ложь;
	
	СтруктураПолей = Метаданные.РегистрыСведений.КэшНСИСтруктурыЗаказа.Измерения;
	
	Для каждого Поле Из СтруктураПолей Цикл
		
		Если Не ЭтотОбъект.Отбор[Поле.Имя].Использование Или ЭтотОбъект.Отбор[Поле.Имя].ВидСравнения = ВидСравнения.Равно Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		СписокОтборов = Новый Массив();
		
		Для каждого Элемент Из Отбор Цикл
			Шаблон = НСтр("ru = '""%1"" ""%2"" ""%3""';
							|en = '""%1"" ""%2"" ""%3""'");
			ТекстСообщения = СтрШаблон(Шаблон, Элемент.Имя, Элемент.ВидСравнения, Элемент.Значение)
				+ ?(Элемент.Использование, "", " " + НСтр("ru = '(не используется)';
															|en = '(not used)'"));
			СписокОтборов.Добавить(ТекстСообщения);
		КонецЦикла;
		
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Установленный отбор не поддерживается %1';
										|en = 'The set filter is not supported %1'"), СтрСоединить(СписокОтборов, "; "));
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура УстановитьОтборыВТекстЗапроса(Запрос, ИмяТаблицы, ИмяПараметра)
	
	УстановленныеОтборы = УстановленныеОтборы();
	
	Список = Новый Массив();
	
	Для каждого Элемент Из УстановленныеОтборы Цикл
		Список.Добавить(ИмяТаблицы + "." + Элемент.Имя + " = &" + Элемент.Имя);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&" + ИмяПараметра, СтрСоединить(Список, " " + "И" + " "));
	
	Для каждого Элемент Из УстановленныеОтборы Цикл
		Запрос.УстановитьПараметр(Элемент.Имя, Элемент.Значение);
	КонецЦикла;

КонецПроцедуры

Функция УстановленныеОтборы()

	Отборы = Новый Массив();

	Для каждого Элемент Из Отбор Цикл
		
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		Отборы.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Отборы;

КонецФункции

#КонецОбласти

#КонецЕсли
