#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет замену спецификаций в структуре заказов на производство
//
// Параметры:
//  Замена - Структура - содержит структуру параметров замены:
//  	* ЗаказНаПроизводство	 - ДокументСсылка.ЗаказНаПроизводство2_2		 - заказ на производство.
//  	* Номенклатура			 - СправочникСсылка.Номенклатура				 - номенклатура.
//  	* Характеристика		 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры.
//  	* Склад					 - СправочникСсылка.Склады						 - склад.
//  	* Назначение			 - СправочникСсылка.Назначения					 - назначение.
//  	* Спецификация			 - СправочникСсылка.РесурсныеСпецификации		 - новая спецификация.
//  Задания - ТаблицаЗначений - если параметр передан, задания добавляются в переданную таблицу, а не записываются в базу данных.
// Возвращаемое значение:
//   Булево - результат замены.
//
Функция ЗаменитьСпецификацию(Замена, Задания = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшНСИСтруктурыЗаказа");
		
		ЭлементБлокировки.УстановитьЗначение("Номенклатура",        Замена.Номенклатура);
		ЭлементБлокировки.УстановитьЗначение("Характеристика",      Замена.Характеристика);
		ЭлементБлокировки.УстановитьЗначение("Склад",               Замена.Склад);
		ЭлементБлокировки.УстановитьЗначение("Назначение",          Замена.Назначение);
		ЭлементБлокировки.УстановитьЗначение("ЗаказНаПроизводство", Замена.ЗаказНаПроизводство);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.КэшНСИСтруктурыЗаказа.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(Замена.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Замена.Характеристика);
		НаборЗаписей.Отбор.Склад.Установить(Замена.Склад);
		НаборЗаписей.Отбор.Назначение.Установить(Замена.Назначение);
		НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(Замена.ЗаказНаПроизводство);
		
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			
			Спецификация = Запись.Спецификация; // исходная спецификация
			
			Запись.Спецификация = Замена.Спецификация;
			
			Если Запись.ТипОбеспечения <> Перечисления.ТипыОбеспечения.Производство Тогда
				Запись.Запланировать     = Истина;
				Запись.ТипОбеспечения    = Перечисления.ТипыОбеспечения.Производство;
				Запись.СпособОбеспечения = Справочники.СпособыОбеспеченияПотребностей.ПустаяСсылка();
			КонецЕсли;
			
			Если Спецификация <> Справочники.РесурсныеСпецификации.ПустаяСсылка() Тогда
				РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданиеПолныйРасчет(
					Спецификация,
					Запись.ЗаказНаПроизводство,
					Задания);
			КонецЕсли;
			
		КонецЦикла;
		
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданиеПолныйРасчет(
			Замена.Спецификация,
			Замена.ЗаказНаПроизводство,
			Задания);
			
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись кэша в структуре заказов на производство
//
// Параметры:
//  КэшДанных - ТаблицаЗначений - содержит параметры замены:
//  	* ЗаказНаПроизводство	 - ДокументСсылка.ЗаказНаПроизводство2_2			 - заказ на производство.
//  	* Номенклатура			 - СправочникСсылка.Номенклатура					 - номенклатура.
//  	* Характеристика		 - СправочникСсылка.ХарактеристикиНоменклатуры		 - характеристика номенклатуры.
//  	* Склад					 - СправочникСсылка.Склады							 - склад.
//  	* Назначение			 - СправочникСсылка.Назначения						 - назначение.
//  	* Запланировать 		 - Булево											 - признак "запланировать обеспечение".
//  	* ТипОбеспечения		 - ПеречислениеСсылка.ТипыОбеспечения				 - тип обеспечения.
//  	* СпособОбеспечения		 - СправочникСсылка.СпособыОбеспеченияПотребностей	 - способ обеспечения.
//  	* Спецификация			 - СправочникСсылка.РесурсныеСпецификации			 - спецификация.
//
Процедура ЗаписатьКэшируемыеЗначения(КэшДанных) Экспорт
	
	СтруктураЗаказа.ЗаполнитьИЗаписатьНаборЗаписей(РегистрыСведений.КэшНСИСтруктурыЗаказа.СоздатьНаборЗаписей(), КэшДанных);
	
КонецПроцедуры

// Выполняет замену кэша в структуре заказов на производство
//
// Параметры:
//  Замены - ТаблицаЗначений - содержит параметры замены:
//  	* ЗаказНаПроизводство	 - ДокументСсылка.ЗаказНаПроизводство2_2			 - заказ на производство.
//  	* Номенклатура			 - СправочникСсылка.Номенклатура					 - номенклатура.
//  	* Характеристика		 - СправочникСсылка.ХарактеристикиНоменклатуры		 - характеристика номенклатуры.
//  	* Склад					 - СправочникСсылка.Склады							 - склад.
//  	* Назначение			 - СправочникСсылка.Назначения						 - назначение.
//  	* Запланировать 		 - Булево											 - признак "запланировать обеспечение".
//  	* ТипОбеспечения		 - ПеречислениеСсылка.ТипыОбеспечения				 - тип обеспечения.
//  	* СпособОбеспечения		 - СправочникСсылка.СпособыОбеспеченияПотребностей	 - способ обеспечения.
//  	* Спецификация			 - СправочникСсылка.РесурсныеСпецификации			 - спецификация.
//  Задания - ТаблицаЗначений - если параметр передан, задания добавляются в переданную таблицу, а не записываются в базу данных.
//
Процедура ЗаменитьКэшируемыеЗначения(Замены, Задания = Неопределено) Экспорт
	
	СписокСвойств = "Запланировать,ТипОбеспечения,СпособОбеспечения,Спецификация,Предопределенная";
	
	Для каждого Замена Из Замены Цикл

		ТранзакцияАктивна = ТранзакцияАктивна();
		
		Если Не ТранзакцияАктивна Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшНСИСтруктурыЗаказа");
			
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",        Замена.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика",      Замена.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",               Замена.Склад);
			ЭлементБлокировки.УстановитьЗначение("Назначение",          Замена.Назначение);
			ЭлементБлокировки.УстановитьЗначение("ЗаказНаПроизводство", Замена.ЗаказНаПроизводство);
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
			НаборЗаписей = РегистрыСведений.КэшНСИСтруктурыЗаказа.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Номенклатура.Установить(Замена.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Замена.Характеристика);
			НаборЗаписей.Отбор.Склад.Установить(Замена.Склад);
			НаборЗаписей.Отбор.Назначение.Установить(Замена.Назначение);
			НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(Замена.ЗаказНаПроизводство);
			
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				
				Спецификация = Запись.Спецификация; // исходная спецификация
				
				ЗаполнитьЗначенияСвойств(Запись, Замена, СписокСвойств);
				
				Если Спецификация <> Справочники.РесурсныеСпецификации.ПустаяСсылка() Тогда
					РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданиеПолныйРасчет(
						Спецификация,
						Запись.ЗаказНаПроизводство,
						Задания);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Замена.Спецификация <> Справочники.РесурсныеСпецификации.ПустаяСсылка() Тогда
				РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданиеПолныйРасчет(
					Замена.Спецификация,
					Запись.ЗаказНаПроизводство,
					Задания);
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
			Если Не ТранзакцияАктивна Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			Если Не ТранзакцияАктивна Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

// Удаляет кэшируемые значения.
// 
// Параметры:
// 	ЗаказыНаПроизводство - Массив, ДокументСсылка.ЗаказНаПроизводство2_2	- заказ на производство или список заказов на производство.
Процедура ОчиститьКэшируемыеЗначения(Знач ЗаказыНаПроизводство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЗаказыНаПроизводство) = Тип("Массив") Тогда
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаказыНаПроизводство);
	Иначе
		ЗаказыНаПроизводство = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказыНаПроизводство);
	КонецЕсли;
	
	Для каждого ЗаказНаПроизводство Из ЗаказыНаПроизводство Цикл
		
		НаборЗаписей = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(ЗаказНаПроизводство);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет кэшируемые значения по ключам (разделителям записи).
// 
// Параметры:
//  Список - ТаблицаЗначений - содержит параметры замены:
//  	* ЗаказНаПроизводство	 - ДокументСсылка.ЗаказНаПроизводство2_2	 - заказ на производство.
//  	* Разделитель			 - УникальныйИдентификатор					 - разделитель записи.
Процедура УдалитьКэшПоКлючам(Список) Экспорт
	
	КоличествоПопытокЗаписи = СтруктураЗаказаСлужебный.КоличествоПопытокЗаписи();
	
	Всего = Список.Количество();
	Индекс = 0;
	
	СчетчикОшибок = 1;
	
	Пока Всего > Индекс Цикл
		
		Ключ = Список[Индекс];
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей = РегистрыСведений.КэшНСИСтруктурыЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказНаПроизводство.Установить(Ключ.ЗаказНаПроизводство);
			НаборЗаписей.Отбор.Разделитель.Установить(Ключ.Разделитель);
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СчетчикОшибок < КоличествоПопытокЗаписи Тогда
				СтруктураЗаказа.ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Индекс = Индекс + 1;
		СчетчикОшибок = 1;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли