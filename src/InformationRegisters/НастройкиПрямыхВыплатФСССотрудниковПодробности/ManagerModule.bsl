#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ГоловнаяОрганизация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НаборЗаписей

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ГоловнаяОрганизация - ОпределяемыйТип.Организация     - Значение отбора по соответствующему измерению.
//   ФизическоеЛицо      - СправочникСсылка.ФизическиеЛица - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.НастройкиПрямыхВыплатФСССотрудниковПодробности - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПроверитьПраво(Истина);
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПрямыхВыплатФСССотрудниковПодробности");
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизическоеЛицо);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения о способе прямых выплат %1 физического лица %2 по причине: %3';
				|en = 'Cannot change direct payments method details %1 of individual %2. Reason: %3'"),
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СпособыПрямыхВыплатФСС.ЗаписатьОшибку(
			Метаданные.РегистрыСведений.НастройкиПрямыхВыплатФСССотрудниковПодробности,
			ФизическоеЛицо,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.НастройкиПрямыхВыплатФСССотрудниковПодробности
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.НастройкиПрямыхВыплатФСССотрудниковПодробности
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие прав на регистр. Бросает исключение в случае отсутствия.
//
// Параметры:
//   Изменение - Булево - Истина, если необходимо проверить и чтение и изменение.
//       Ложь, если надо проверить только чтение.
//
Процедура ПроверитьПраво(Изменение)
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ИмяПрава = ?(Изменение, "Изменение", "Чтение");
		Если Не ПравоДоступа(ИмяПрава, Метаданные.РегистрыСведений.НастройкиПрямыхВыплатФСССотрудниковПодробности) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
					|en = 'Insufficient rights to change register ""%1"".'"),
				Метаданные.РегистрыСведений.НастройкиПрямыхВыплатФСССотрудниковПодробности.Представление());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработчик длительной операции формы "НастройкиСотрудников".
//
// Параметры:
//   МассивСотрудников - Массив
//
// Возвращаемое значение:
//   ТаблицаЗначений - См. СпособыПрямыхВыплатФСС.НастройкиСотрудников.
//
Процедура РассчитатьСпособыОпределяемыеАвтоматически(Знач Организация, Знач ФизическиеЛица = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Если ФизическиеЛица = Неопределено Тогда
		Сотрудники = СпособыПрямыхВыплатФСС.СотрудникиОрганизации(Организация);
		Сотрудники.Свернуть("ФизическоеЛицо");
		МассивФизическихЛиц = Сотрудники.ВыгрузитьКолонку("ФизическоеЛицо");
	ИначеЕсли ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		МассивФизическихЛиц = ФизическиеЛица;
	ИначеЕсли ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"РассчитатьСпособыОпределяемыеАвтоматически",
			"ФизическиеЛица",
			ФизическиеЛица,
			Новый ОписаниеТипов("Массив, Неопределено, СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
	Способы = СпособыПрямыхВыплатФСС.НастройкиСотрудников(
		Организация,
		МассивФизическихЛиц,
		ТекущаяДатаСеанса());
	
	СпособыПрямыхВыплатФСС.ЗаполнитьСведенияОбАдресах(Способы.ТаблицаРезультат);
	
	ТипыСпособов = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	
	Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		
		СтрокаРезультат = Способы.ТаблицаРезультат.Найти(ФизическоеЛицо, "ФизическоеЛицо");
		Если СтрокаРезультат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Строка(СтрокаРезультат.Значение);
		ПредставлениеСпособаВыплаты = СпособыПрямыхВыплатФСС.ПредставлениеСпособаВыплаты(СтрокаРезультат);
		Если ЗначениеЗаполнено(ПредставлениеСпособаВыплаты) Тогда
			Представление = Представление + ": " + ПредставлениеСпособаВыплаты;
		КонецЕсли;
		Если СтрокаРезультат.ОпределеноАвтоматически Тогда
			ТипСпособа = ТипыСпособов.Найти(ТипЗнч(СтрокаРезультат.Значение), "Тип");
			Если ТипСпособа <> Неопределено Тогда
				Представление = ТипСпособа.Заголовок + ": " + Представление;
			КонецЕсли;
			Если СтрокаРезультат.ОпределеноПоОрганизации Тогда
				Представление = Представление + " " + НСтр("ru = '(определено автоматически)';
															|en = '(determined automatically)'");
			ИначеЕсли СтрокаРезультат.ОпределеноПоОсновномуМестуРаботы Тогда
				Представление = Представление + " " + СтрШаблон(
					НСтр("ru = '(определено по месту работы в %1)';
						|en = '(determined by place of work in %1)'"),
					СтрокаРезультат.ОрганизацияПоОсновномуМестуРаботы);
			КонецЕсли;
		КонецЕсли;
		
		Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
			Запись.ФизическоеЛицо      = ФизическоеЛицо;
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		Запись.Значение      = СтрокаРезультат.Значение;
		Запись.Представление = Представление;
		ЗавершитьЗаписьНабора(Набор);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли