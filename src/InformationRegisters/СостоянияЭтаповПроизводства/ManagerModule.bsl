#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Расчитывает и записывает состояния этапов.
//
// Параметры:
//  ЭтапыКОбновлению			 - Массив	 - список этапов к обновлению состояния
//  ЭтапыКОчистке				 - Массив	 - список этапов к очистке состояния.
//
Процедура ОтразитьСостояниеЭтапов(ЭтапыКОбновлению, ЭтапыКОчистке = Неопределено) Экспорт
	
	МассивСсылокКОчистке = УправлениеПроизводствомКлиентСервер.МассивЗначений(ЭтапыКОчистке);
	
	Если МассивСсылокКОчистке.Количество() > 0 Тогда
		
		ОчиститьСостояниеЭтапов(МассивСсылокКОчистке);
		
	КонецЕсли;
	
	МассивСсылокКОбновлению = УправлениеПроизводствомКлиентСервер.МассивЗначений(ЭтапыКОбновлению);
	
	Если МассивСсылокКОбновлению.Количество() > 0 Тогда
		
		ПараметрыРасчета = ПараметрыРасчетаКонструктор(
			МассивСсылокКОбновлению,
			МассивСсылокКОчистке);
		
		ВыборкаИзменений = ВыборкаИзмененийСостояния(ПараметрыРасчета);
		
		Если ПараметрыРасчета.ЗаписыватьНаборами Тогда
			ЗаписатьСостоянияПоРаспоряжениям(ВыборкаИзменений);
		Иначе
			ЗаписатьСостоянияПоЭтапам(ВыборкаИзменений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет состояния обеспечения этапов при изменении обособленного обеспечения.
//
// Параметры:
//  Этапы	 - Массив	 - список этапов к обновлению состояния.
//  Ошибки   - Неопределено, Соответствие из КлючИЗначение - со структурой:
//                            *Ключ     - ДокументСсылка.ЭтапПроизводства2_2 -
//                            *Значение - Строка - Подробное представление ошибки.
// 
// Возвращаемое значение:
//	Массив - список этапов по которым выполнено обновление состояния.
//	
Функция ОбновитьСостояниеОбеспечения(Этапы, Ошибки = Неопределено) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Этапы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Показатели = Новый Массив;
	Показатели.Добавить("ТребуетОбеспечения");
	Показатели.Добавить("СостояниеОбеспечения");
	
	ПараметрыРасчета = ПараметрыРасчетаКонструктор(
		МассивСсылок,
		,
		Показатели);
	
	ОбработанныеРаспоряжения = Новый Массив;
	ОбработанныеЭтапы = Новый Массив;
	
	Выборка = ВыборкаИзмененийСостояния(ПараметрыРасчета);
	ЗаписатьСостоянияПоЭтапамВыборочно(Выборка, Показатели, ОбработанныеРаспоряжения, ОбработанныеЭтапы, Ошибки);
	
	Если ОбработанныеРаспоряжения.Количество() > 0 Тогда
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(ОбработанныеРаспоряжения);
	КонецЕсли;
	
	Возврат ОбработанныеЭтапы;
	
КонецФункции

// Обновляет состояния операций.
//
// Параметры:
//  Этапы	 - Массив	 - список этапов к обновлению состояния.
//
Процедура ОбновитьСостояниеОпераций(Этапы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Этапы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = Новый Массив;
	Показатели.Добавить("СостояниеОпераций");
	
	ПараметрыРасчета = ПараметрыРасчетаКонструктор(
		МассивСсылок,
		,
		Показатели);
	
	Выборка = ВыборкаИзмененийСостояния(ПараметрыРасчета);
	ЗаписатьСостоянияПоЭтапамВыборочно(Выборка, Показатели);
	
КонецПроцедуры

// Обновляет состояния оформления выработки этапов при изменении параметров выработки.
//
// Параметры:
//  Этапы	 - Массив	 - список этапов к обновлению состояния.
//
Процедура ОбновитьСостояниеОформленияВыработки(Этапы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Этапы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = Новый Массив;
	Показатели.Добавить("ТребуетОформленияВыработки");
	
	ПараметрыРасчета = ПараметрыРасчетаКонструктор(
		МассивСсылок,
		,
		Показатели);
	
	Выборка = ВыборкаИзмененийСостояния(ПараметрыРасчета);
	ЗаписатьСостоянияПоЭтапамВыборочно(Выборка, Показатели);
	
КонецПроцедуры

// Удаляет текущее состояние обеспечения этапов
//
// Параметры:
//  Этапы - ДокументСсылка.ЭтапПроизводства2_2, Массив - этапы производства.
//
Процедура ОчиститьСостояниеЭтапов(Этапы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Этапы);
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		Набор = РегистрыСведений.СостоянияЭтаповПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.Этап.Установить(Ссылка);
		Набор.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос) Экспорт

	СоответствиеЗаданий = Новый Соответствие();
	Если Не РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием() Тогда
		СоответствиеЗаданий.Вставить("СостоянияЭтаповПроизводстваИзменение",
			ТекстЗапросаСостоянияЭтаповПроизводстваИзменение(Запрос));
	КонецЕсли;
	Возврат СоответствиеЗаданий;
	
КонецФункции

// Отражает изменения состояний заказов в регистре.
//
// Параметры:
//  ДокументИсточник - ДокументОбъект - записываемый документ.
//  МассивЗаказов - Массив из ДокументСсылка - массив отражаемых заказов.
//
Процедура ОтразитьСостоянияЗаказов(ДокументИсточник, МассивЗаказов) Экспорт
	
	ОбеспечениеПроизводства.ПриИзмененииОбеспечения(МассивЗаказов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыАктуализацииСостоянийЗаказов() Экспорт
	
	// Изменения отслеживаются для решения двух задач:
	//	Пересчет состояния обеспечения этапов - см. ОбновитьСостояниеОбеспечения
	//	Контроль соответствия сроков обеспечения и дат начала этапов по графику производства
	//		- см. УправлениеПроизводством.ПроверитьСрокиОбеспеченияЭтапов
	
	Результат = Новый Структура("ПравилоОтбораЗаписей,ФункцияСравненияЗаписей,ФункцияСравненияЗаписейВоВременнуюТаблицу");
	
	Результат.ПравилоОтбораЗаписей =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспределениеЗапасов.Состояние            КАК Состояние,
		|	РаспределениеЗапасов.ЗаказНаОтгрузку      КАК ЗаказНаОтгрузку,
		|	РаспределениеЗапасов.ЗаказНаПоступление   КАК ЗаказНаПоступление,
		|	РаспределениеЗапасов.Номенклатура         КАК Номенклатура,
		|	РаспределениеЗапасов.Характеристика       КАК Характеристика,
		|	РаспределениеЗапасов.Склад                КАК Склад,
		|	РаспределениеЗапасов.Назначение           КАК Назначение,
		|	РаспределениеЗапасов.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	РаспределениеЗапасов.ДатаПоступления      КАК ДатаПоступления
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате))
		|	И РаспределениеЗапасов.ЗаказНаОтгрузку ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ФильтрПереопределяемый КАК Товары
		|				ГДЕ
		|					Товары.Номенклатура = РаспределениеЗапасов.Номенклатура
		|					И Товары.Характеристика = РаспределениеЗапасов.Характеристика
		|					И Товары.Склад = РаспределениеЗапасов.Склад
		|					И Товары.Назначение = РаспределениеЗапасов.Назначение)";
	
	Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу =
		"// ПередЗаписью - Обеспечить
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ПОМЕСТИТЬ ИзменениеПереопределяемый
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|ГДЕ
		|	ПередЗаписью.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПриЗаписиПереопределяемый КАК ПриЗаписи
		|					ГДЕ
		|						ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|						И ПриЗаписи.Состояние = ПередЗаписью.Состояние
		|						И ПриЗаписи.Номенклатура = ПередЗаписью.Номенклатура
		|						И ПриЗаписи.Характеристика = ПередЗаписью.Характеристика
		|						И ПриЗаписи.Склад = ПередЗаписью.Склад
		|					)
		|
		|ОБЪЕДИНИТЬ
		|
		|// ПередЗаписью - ОбеспеченКДате
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|ГДЕ
		|	ПередЗаписью.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПриЗаписиПереопределяемый КАК ПриЗаписи
		|					ГДЕ
		|						ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|						И ПриЗаписи.Состояние = ПередЗаписью.Состояние
		|						И ПриЗаписи.ЗаказНаПоступление = ПередЗаписью.ЗаказНаПоступление
		|						И ПриЗаписи.ДатаПоступления = ПередЗаписью.ДатаПоступления
		|						И ПриЗаписи.ЖелаемаяДатаОтгрузки = ПередЗаписью.ЖелаемаяДатаОтгрузки
		|					)
		|
		|ОБЪЕДИНИТЬ
		|
		|// ПередЗаписью - ОжидаетсяПоНеподтвержденномуЗаказу
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПередЗаписью.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|ГДЕ
		|	ПередЗаписью.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПриЗаписиПереопределяемый КАК ПриЗаписи
		|					ГДЕ
		|						ПриЗаписи.ЗаказНаОтгрузку = ПередЗаписью.ЗаказНаОтгрузку
		|						И ПриЗаписи.Состояние = ПередЗаписью.Состояние
		|						И ПриЗаписи.ЗаказНаПоступление = ПередЗаписью.ЗаказНаПоступление
		|						И ПриЗаписи.ДатаПоступления = ПередЗаписью.ДатаПоступления
		|						И ПриЗаписи.ЖелаемаяДатаОтгрузки = ПередЗаписью.ЖелаемаяДатаОтгрузки
		|					)
		|
		|ОБЪЕДИНИТЬ
		|
		|// ПриЗаписи - Обеспечить
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|ГДЕ
		|	ПриЗаписи.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|					ГДЕ
		|						ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|						И ПередЗаписью.Состояние = ПриЗаписи.Состояние
		|						И ПередЗаписью.Номенклатура = ПриЗаписи.Номенклатура
		|						И ПередЗаписью.Характеристика = ПриЗаписи.Характеристика
		|						И ПередЗаписью.Склад = ПриЗаписи.Склад
		|					)
		|
		|ОБЪЕДИНИТЬ
		|
		|// ПриЗаписи - ОбеспеченКДате
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|ГДЕ
		|	ПриЗаписи.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|					ГДЕ
		|						ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|						И ПередЗаписью.Состояние = ПриЗаписи.Состояние
		|						И ПередЗаписью.ЗаказНаПоступление = ПриЗаписи.ЗаказНаПоступление
		|						И ПередЗаписью.ДатаПоступления = ПриЗаписи.ДатаПоступления
		|						И ПередЗаписью.ЖелаемаяДатаОтгрузки = ПриЗаписи.ЖелаемаяДатаОтгрузки
		|					)
		|
		|ОБЪЕДИНИТЬ
		|
		|// ПриЗаписи - ОжидаетсяПоНеподтвержденномуЗаказу
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриЗаписи.ЗаказНаОтгрузку КАК Заказ
		|ИЗ
		|	ПриЗаписиПереопределяемый КАК ПриЗаписи
		|ГДЕ
		|	ПриЗаписи.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
		|	И НЕ ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПередЗаписьюПереопределяемый КАК ПередЗаписью
		|					ГДЕ
		|						ПередЗаписью.ЗаказНаОтгрузку = ПриЗаписи.ЗаказНаОтгрузку
		|						И ПередЗаписью.Состояние = ПриЗаписи.Состояние
		|						И ПередЗаписью.ЗаказНаПоступление = ПриЗаписи.ЗаказНаПоступление
		|						И ПередЗаписью.ДатаПоступления = ПриЗаписи.ДатаПоступления
		|						И ПередЗаписью.ЖелаемаяДатаОтгрузки = ПриЗаписи.ЖелаемаяДатаОтгрузки
		|					)";
	
	Результат.ФункцияСравненияЗаписей = СтрЗаменить(Результат.ФункцияСравненияЗаписейВоВременнуюТаблицу,
		"ПОМЕСТИТЬ ИзменениеПереопределяемый", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеВсехСостояний

Функция ВыборкаИзмененийСостояния(ПараметрыРасчета)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("МассивСсылок",         ПараметрыРасчета.МассивСсылокКОбновлению);
	Запрос.УстановитьПараметр("МассивСсылокКОчистке", ПараметрыРасчета.МассивСсылокКОчистке);
	
	Запрос.УстановитьПараметр("СтатусФормируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Запрос.УстановитьПараметр("СтатусСформирован", Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	Запрос.УстановитьПараметр("СтатусКВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	Запрос.УстановитьПараметр("СтатусНачат",       Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	Запрос.УстановитьПараметр("СтатусЗавершен",    Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Запрос.УстановитьПараметр("НетПредшественников",      Перечисления.СостоянияПредшественниковЭтапа.НетПредшественников);
	Запрос.УстановитьПараметр("НеНачатыПредшественники",  Перечисления.СостоянияПредшественниковЭтапа.НеНачатыПредшественники);
	Запрос.УстановитьПараметр("НачатыПредшественники",    Перечисления.СостоянияПредшественниковЭтапа.НачатыПредшественники);
	Запрос.УстановитьПараметр("ЗавершеныПредшественники", Перечисления.СостоянияПредшественниковЭтапа.ЗавершеныПредшественники);
	
	Запрос.УстановитьПараметр("ПустоеСостояниеНаМежцеховомУровне",    Перечисления.СостоянияЭтаповНаМежцеховомУровне.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСостояниеНаВнутрицеховомУровне", Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях",
		ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	
	Запрос.Текст = ТекстЗапросаРасчетаСостояния(ПараметрыРасчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	Если ПараметрыРасчета.ОпределитьСпособЗаписи Тогда
		ВыборкаИзменений = РезультатЗапроса[КоличествоПакетов-2].Выбрать();
		ПараметрыРасчета.ЗаписыватьНаборами = НЕ РезультатЗапроса[КоличествоПакетов-1].Пустой();
	Иначе
		ВыборкаИзменений = РезультатЗапроса[КоличествоПакетов-1].Выбрать();
		ПараметрыРасчета.ЗаписыватьНаборами = Ложь;
	КонецЕсли;
	
	Возврат ВыборкаИзменений;

КонецФункции

Функция ТекстЗапросаРасчетаСостояния(ПараметрыРасчета)
	
	ВременныеТаблицыДокумента = Документы.ЭтапПроизводства2_2.ВременныеТаблицыДляРасчетаСостояния();
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.Реквизиты);
	
	Если ПараметрыРасчета.РассчитатьОбеспечение Тогда
		ТекстЗапроса = ТекстЗапросаВТОбеспечение();
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если ПараметрыРасчета.РассчитатьОформлениеВыработки Тогда
		ТекстЗапроса = ТекстЗапросаВТТрудозатратыКОформлению();
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если ПараметрыРасчета.РассчитатьСостояниеЭтапов Тогда
		ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.СостоянияПредшественников);
	КонецЕсли;
	
	Если ПараметрыРасчета.РассчитатьСостояниеОпераций Тогда
		ТекстЗапроса = ТекстЗапросаВТСостоянияОпераций();
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаСостоянияЭтаповПроизводства(ПараметрыРасчета);
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если ПараметрыРасчета.ОпределитьСпособЗаписи Тогда
		ТекстЗапроса = ТекстЗапросаЗаписыватьНаборами();
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Возврат УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
КонецФункции

Процедура ЗаписатьСостоянияПоРаспоряжениям(Выборка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	Пока ЕстьЗаписиВВыборке Цикл
		
		ТекущееРаспоряжение = Выборка.Распоряжение;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭтаповПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", ТекущееРаспоряжение);
			
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.СостоянияЭтаповПроизводства.СоздатьНаборЗаписей();
			Набор.Отбор.Распоряжение.Установить(ТекущееРаспоряжение);
			
			Набор.Прочитать();
			
			СоответствиеЗаписей = Новый Соответствие;
			Для каждого Запись Из Набор Цикл
				СоответствиеЗаписей.Вставить(Запись.Этап,Запись);
			КонецЦикла;
			
			Пока ЕстьЗаписиВВыборке
				И Выборка.Распоряжение = ТекущееРаспоряжение Цикл
				
				Запись = СоответствиеЗаписей[Выборка.Этап];
				Если Выборка.СтатусЗавершен И Не Выборка.ТребуетОформленияВыработки Тогда
					
					Если Запись <> Неопределено Тогда
						Набор.Удалить(Запись);
					КонецЕсли;
					
				ИначеЕсли Запись = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				Иначе
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
				КонецЕсли;
				
				ЕстьЗаписиВВыборке = Выборка.Следующий();
				
			КонецЦикла;
			
			Набор.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние этапа по распоряжению: %Ссылка% по причине: %Причина%';
									|en = 'Cannot record state of stage by reference: %Ссылка%. Reason: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ТекущееРаспоряжение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение, ТекущееРаспоряжение.Метаданные(), ТекущееРаспоряжение, ТекстСообщения);
				
			Пока ЕстьЗаписиВВыборке
				И Выборка.Распоряжение = ТекущееРаспоряжение Цикл
				ЕстьЗаписиВВыборке = Выборка.Следующий();
				Продолжить;
			КонецЦикла;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСостоянияПоЭтапам(Выборка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.СостоянияЭтаповПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
		Набор.Отбор.Этап.Установить(Выборка.Этап);
		
		Если Не Выборка.СтатусЗавершен Или Выборка.ТребуетОформленияВыработки Тогда
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЕсли;
		
		Попытка
			
			Набор.Записать(Истина);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние этапа: %Ссылка% по причине: %Причина%';
									|en = 'Cannot record state of stage: %Ссылка%. Reason: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Этап);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				УровеньЖурналаРегистрации.Предупреждение, Выборка.Этап.Метаданные(), Выборка.Этап, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеПоПоказателям

Процедура ЗаписатьСостоянияПоЭтапамВыборочно(
			Выборка,
			Показатели,
			ОбработанныеРаспоряжения = Неопределено,
			ОбработанныеЭтапы = Неопределено,
			Ошибки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокПоказателей = СтрСоединить(Показатели, ",");
	РассчитатьОформлениеВыработки = Показатели.Найти("ТребуетОформленияВыработки") <> Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭтаповПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Этап", Выборка.Этап);
			Блокировка.Заблокировать();
			
			ЗаписатьНабор = Ложь;
			
			Набор = РегистрыСведений.СостоянияЭтаповПроизводства.СоздатьНаборЗаписей();
			Набор.Отбор.Этап.Установить(Выборка.Этап);
		
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				Запись = Набор[0];
				
				Если Выборка.СтатусЗавершен
					И (РассчитатьОформлениеВыработки И Не Выборка.ТребуетОформленияВыработки
						Или Не РассчитатьОформлениеВыработки И Не Запись.ТребуетОформленияВыработки) Тогда
					
					Набор.Удалить(Запись);
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(Запись, Выборка, СписокПоказателей);
					
				КонецЕсли;
				
				ЗаписатьНабор = Истина;
				
			ИначеЕсли Выборка.Проведен
					И (Не Выборка.СтатусЗавершен
						Или РассчитатьОформлениеВыработки И Выборка.ТребуетОформленияВыработки) Тогда
				
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				
				ЗаписатьНабор = Истина;
				
			КонецЕсли;
			
			Если ЗаписатьНабор Тогда
				Набор.Записать(Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Если ОбработанныеЭтапы <> Неопределено Тогда
				ОбработанныеЭтапы.Добавить(Выборка.Этап);
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние обеспечения этапа: %Ссылка% по причине: %Причина%';
									|en = 'Cannot record stage supply forecast: %Ссылка%. Reason: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Этап);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Этап.Метаданные(),
				Выборка.Этап,
				ТекстСообщения);
			
			Если Ошибки <> Неопределено Тогда
				Ошибки.Вставить(Выборка.Этап, ТекстСообщения);
			КонецЕсли;
			
			Продолжить;
			
		КонецПопытки;
		
		Если ОбработанныеРаспоряжения <> Неопределено 
			И ОбработанныеРаспоряжения.Найти(Выборка.Распоряжение) = Неопределено Тогда
			ОбработанныеРаспоряжения.Добавить(Выборка.Распоряжение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаВТОбеспечение()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Заказ КАК Ссылка
		|ПОМЕСТИТЬ ЭтапыТребующиеРаспределенияЗапасов
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Заказ В(
		|			ВЫБРАТЬ
		|				РеквизитыДокумента.Ссылка КАК Заказ
		|			ИЗ
		|				ВТРеквизитыДокумента КАК РеквизитыДокумента
		|			ГДЕ
		|				НЕ РеквизитыДокумента.ДинамическаяСтруктура)) КАК Остатки
		|ГДЕ
		|	Остатки.РезервироватьПоМереПоступленияОстаток > 0
		|		ИЛИ Остатки.ОтложитьРезервированиеОстаток > 0
		|		ИЛИ Остатки.КОбеспечениюОстаток > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////
		// Проведенные этапы, для которых еще не выполнялось задание по распределению запасов, поэтому по ним нет записей в регистре сведений.
		|ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка,
		// Считаем, что безусловно требуют обеспечения.
		|	ИСТИНА КАК ТребуетОбеспечения
		|ПОМЕСТИТЬ ЭтапыОжидаетсяОбеспечение
		|ИЗ
		|	ЭтапыТребующиеРаспределенияЗапасов КАК Этапы
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО РаспределениеЗапасов.ЗаказНаОтгрузку = Этапы.Ссылка
		|		И РаспределениеЗапасов.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе))
		|ГДЕ
		|	РаспределениеЗапасов.ЗаказНаОтгрузку ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Этапы, для которых задание по распределению запасов выполнено и не все количество распределилось в складском остатке.
		|ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка,
		// Нужна проверка, реально требуют ли обеспечения.
		|	ЛОЖЬ КАК ТребуетОбеспечения
		|ИЗ
		|	ЭтапыТребующиеРаспределенияЗапасов КАК Этапы
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ОжидаетсяОбеспечение
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ГДЕ
		|			РаспределениеЗапасов.ЗаказНаОтгрузку = Этапы.Ссылка
		|				И РаспределениеЗапасов.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)))
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////
		// Проведенные этапы, для которых еще не выполнялось задание по распределению запасов, поэтому по ним нет записей в регистре сведений.
		|ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка,
		|	ИСТИНА КАК ТребуетОбеспечения
		|ПОМЕСТИТЬ ЭтапыТребуютОбеспечения
		|ИЗ
		|	ЭтапыОжидаетсяОбеспечение КАК Этапы
		|ГДЕ
		|	НЕ Этапы.ТребуетОбеспечения
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ТребуетОбеспечения
		|		ИЗ
		|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ГДЕ
		|			РаспределениеЗапасов.ЗаказНаОтгрузку = Этапы.Ссылка
		|				И (РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)
		|					ИЛИ РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
		|						И НЕ РаспределениеЗапасов.ЗаказНаПоступление ССЫЛКА Документ.ЭтапПроизводства2_2
		|					ИЛИ РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|						И РаспределениеЗапасов.ДатаПоступления > РаспределениеЗапасов.ЖелаемаяДатаОтгрузки))
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Этапы.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ЭтапыТребуютОбеспечения.ТребуетОбеспечения, Этапы.ТребуетОбеспечения) КАК ТребуетОбеспечения,
		|	ИСТИНА ОжидаетсяОбеспечение
		|ПОМЕСТИТЬ ВТОбеспечение
		|ИЗ
		|	ЭтапыОжидаетсяОбеспечение КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыТребуютОбеспечения КАК ЭтапыТребуютОбеспечения
		|		ПО ЭтапыТребуютОбеспечения.Ссылка = Этапы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(
		|		ВЫБОР
		|			КОГДА СтруктураЗаказа.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|				ТОГДА СтруктураЗаказа.Этап
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ) КАК Ссылка,
		|	ЛОЖЬ КАК ТребуетОбеспечения, // Ресурс не рассчитывается для этапов динамической структуры
		|	ИСТИНА КАК ОжидаетсяОбеспечение
		|ИЗ
		|	РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
		|ГДЕ
		|	(СтруктураЗаказа.Номенклатура,
		|	 СтруктураЗаказа.Характеристика,
		|	 СтруктураЗаказа.Склад,
		|	 СтруктураЗаказа.Назначение,
		|	 СтруктураЗаказа.ЗаказНаПроизводство,
		|	 СтруктураЗаказа.КлючНоменклатура) В (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Обеспечение.Номенклатура КАК Номенклатура,
		|			Обеспечение.Характеристика КАК Характеристика,
		|			Обеспечение.Склад КАК Склад,
		|			Обеспечение.Назначение КАК Назначение,
		|			Обеспечение.Ссылка.Распоряжение КАК ЗаказНаПроизводство,
		|			Обеспечение.КлючНоменклатура КАК КлючНоменклатура
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|		ГДЕ
		|			Обеспечение.Ссылка В (
		|				ВЫБРАТЬ
		|					РеквизитыДокумента.Ссылка КАК Ссылка
		|				ИЗ
		|					ВТРеквизитыДокумента КАК РеквизитыДокумента
		|				ГДЕ
		|					РеквизитыДокумента.ДинамическаяСтруктура)
		|			И НЕ Обеспечение.Отменено)
		|	И СтруктураЗаказа.ВидСтроки В (
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано))
		|	И СтруктураЗаказа.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураЗаказа.КлючНоменклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(СтруктураЗаказа.РаспределеноИзЗапасов
		|		+ СтруктураЗаказа.РаспределеноИзЗапасовОбособленно) < СУММА(СтруктураЗаказа.Требуется)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|///////////////////////////////
		|УНИЧТОЖИТЬ ЭтапыТребующиеРаспределенияЗапасов;
		|УНИЧТОЖИТЬ ЭтапыОжидаетсяОбеспечение;
		|УНИЧТОЖИТЬ ЭтапыТребуютОбеспечения";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТСостоянияОпераций()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВЫБОР МАКСИМУМ(ВложенныйЗапрос.Состояние)
		|		КОГДА 3
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетЗавершения)
		|		КОГДА 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетНазначения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.Выполнено)
		|	КОНЕЦ КАК Состояние
		|	ПОМЕСТИТЬ ВТСостоянияОпераций
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеквизитыДокумента.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(МИНИМУМ(ВЫБОР
		|							КОГДА ОчередьПроизводственныхОпераций.Создано >= ОчередьПроизводственныхОпераций.Запланировано + ОчередьПроизводственныхОпераций.ТребуетПовторения
		|									И ОчередьПроизводственныхОпераций.Создано = ОчередьПроизводственныхОпераций.Выполнено
		|																					+ ОчередьПроизводственныхОпераций.Брак
		|																					+ ОчередьПроизводственныхОпераций.Пропущено
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ), ЛОЖЬ) = ИСТИНА
		|				ТОГДА 1
		|				КОГДА ЕСТЬNULL(МАКСИМУМ(ВЫБОР
		|						КОГДА ОчередьПроизводственныхОпераций.Создано > ОчередьПроизводственныхОпераций.Выполнено
		|																			+ ОчередьПроизводственныхОпераций.Брак
		|																			+ ОчередьПроизводственныхОпераций.Пропущено
		|									ИЛИ ОперацииНазначенныеСЗ.СменноеЗадание ЕСТЬ НЕ NULL
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ), ЛОЖЬ) = ИСТИНА
		|				ТОГДА 3
		|			ИНАЧЕ 2
		|		КОНЕЦ                     КАК Состояние
		|	ИЗ
		|		ВТРеквизитыДокумента КАК РеквизитыДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
		|			ПО РеквизитыДокумента.Ссылка = ОчередьПроизводственныхОпераций.Этап
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК ОперацииНазначенныеСЗ
		|			ПО РеквизитыДокумента.Ссылка = ОперацииНазначенныеСЗ.Этап
		|				И ОперацииНазначенныеСЗ.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)
		|	ГДЕ
		|		ВЫБОР
		|			КОГДА (ЕСТЬNULL(РеквизитыДокумента.Ссылка.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ)
		|				ИЛИ ЕСТЬNULL(РеквизитыДокумента.Ссылка.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ))
		|					И РеквизитыДокумента.Статус В (
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат))
		|				ТОГДА ИСТИНА
		|			КОГДА ЕСТЬNULL(РеквизитыДокумента.Ссылка.Подразделение.ИспользоватьПооперационноеУправление, ЛОЖЬ)
		|					И РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат) 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|		И НЕ РеквизитыДокумента.ПроизводствоНаСтороне
		|		И ВЫБОР
		|			КОГДА &ХранитьОперацииВРесурсныхСпецификациях
		|					И РеквизитыДокумента.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|				ТОГДА ИСТИНА В (
		|							ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								Справочник.ТехнологическиеОперации КАК Т
		|							ГДЕ
		|								Т.Владелец = РеквизитыДокумента.Этап И НЕ Т.ПометкаУдаления)
		|			ИНАЧЕ РеквизитыДокумента.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|		КОНЕЦ
		|
		|	СГРУППИРОВАТЬ ПО
		|		РеквизитыДокумента.Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПроизводственнаяОперация.Этап КАК Ссылка,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ПроизводственнаяОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана)
		|						ИЛИ ПроизводственнаяОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется)
		|					ТОГДА 3
		|				ИНАЧЕ 1
		|			КОНЕЦ)                    КАК Состояние
		|	ИЗ
		|		Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация
		|	ГДЕ
		|		ПроизводственнаяОперация.Этап В
		|				(ВЫБРАТЬ
		|					ВТРеквизитыДокумента.Ссылка
		|				ИЗ
		|					ВТРеквизитыДокумента)
		|		И ПроизводственнаяОперация.Проведен
		|		И НЕ ПроизводственнаяОперация.НаОснованииНСИ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПроизводственнаяОперация.Этап) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТрудозатратыКОформлению()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТрудозатратыКОформлениюОстатки.Распоряжение КАК Ссылка
		|ПОМЕСТИТЬ ВТТрудозатратыКОформлению
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
		|				,
		|				Распоряжение В
		|					(ВЫБРАТЬ
		|						Т.Ссылка КАК Распоряжение
		|					ИЗ
		|						ВТРеквизитыДокумента КАК Т)) КАК ТрудозатратыКОформлениюОстатки";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаСостоянияЭтаповПроизводства(ПараметрыРасчета)
	
	ТекстЗапроса = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусФормируется ТОГДА
			|			ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения)
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусСформирован
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению)
			|					ИНАЧЕ &ПустоеСостояниеНаМежцеховомУровне
			|				КОНЕЦ
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусКВыполнению
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетНачала)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетПредшественников)
			|				КОНЕЦ
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетЗавершения)
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.Завершен)
			|		ИНАЧЕ &ПустоеСостояниеНаМежцеховомУровне
			|
			|	КОНЕЦ                               КАК СостояниеНаМежцеховомУровне,
			|
			|	ВЫБОР
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Завершен)
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Начат)
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.МожноВыполнять)
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НачатыПредшественники
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие)
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НеНачатыПредшественники
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих)
			|		ИНАЧЕ &ПустоеСостояниеНаВнутрицеховомУровне
			|
			|	КОНЕЦ                               КАК СостояниеНаВнутрицеховомУровне,
			|
			|	ВЫБОР
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
			|			ТОГДА 5
			|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
			|			ТОГДА 4
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
			|			ТОГДА 3
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НачатыПредшественники
			|			ТОГДА 2
			|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НеНачатыПредшественники
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|
			|	КОНЕЦ                               КАК КодСостоянияНаВнутрицеховомУровне,
			|
			|	ВЫБОР
			|		КОГДА НЕ СостоянияОпераций.Ссылка ЕСТЬ NULL
			|			ТОГДА СостоянияОпераций.Состояние
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ПустаяСсылка)
			|
			|	КОНЕЦ                               КАК СостояниеОпераций,
			|
			|	ЕСТЬNULL(Обеспечение.ТребуетОбеспечения, ЛОЖЬ) КАК ТребуетОбеспечения,
			|
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Обеспечение.ОжидаетсяОбеспечение, ЛОЖЬ)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОжидаетсяОбеспечение)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОбеспеченПолностью)
			|	КОНЕЦ КАК СостояниеОбеспечения,
			|
			|	ВЫБОР
			|		КОГДА ТрудозатратыКОформлению.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ 								КАК ТребуетОформленияВыработки,
			|
			|	ВТРеквизитыДокумента.Распоряжение   КАК Распоряжение,
			|	ВТРеквизитыДокумента.Ссылка         КАК Этап,
			|	ВТРеквизитыДокумента.СтатусЗавершен КАК СтатусЗавершен,
			|	ВТРеквизитыДокумента.Проведен       КАК Проведен
			|ИЗ
			|	ВТРеквизитыДокумента КАК ВТРеквизитыДокумента
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбеспечение КАК Обеспечение
			|		ПО Обеспечение.Ссылка = ВТРеквизитыДокумента.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТрудозатратыКОформлению КАК ТрудозатратыКОформлению
			|		ПО ТрудозатратыКОформлению.Ссылка = ВТРеквизитыДокумента.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияОпераций КАК СостоянияОпераций
			|		ПО СостоянияОпераций.Ссылка = ВТРеквизитыДокумента.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияПредшественников КАК СостоянияПредшественников
			|		ПО СостоянияПредшественников.Ссылка = ВТРеквизитыДокумента.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Распоряжение";
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьСостояниеЭтапов, ТекстЗапроса, СтрЗаменить(ТекстЗапроса,"
		|	ВЫБОР
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусФормируется ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения)
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусСформирован
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению)
		|					ИНАЧЕ &ПустоеСостояниеНаМежцеховомУровне
		|				КОНЕЦ
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусКВыполнению
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетНачала)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетПредшественников)
		|				КОНЕЦ
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.ОжидаетЗавершения)
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.Завершен)
		|		ИНАЧЕ &ПустоеСостояниеНаМежцеховомУровне
		|
		|	КОНЕЦ                               КАК СостояниеНаМежцеховомУровне,
		|
		|	ВЫБОР
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Завершен)
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Начат)
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.МожноВыполнять)
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НачатыПредшественники
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие)
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НеНачатыПредшественники
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих)
		|		ИНАЧЕ &ПустоеСостояниеНаВнутрицеховомУровне
		|
		|	КОНЕЦ                               КАК СостояниеНаВнутрицеховомУровне,
		|
		|	ВЫБОР
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусЗавершен
		|			ТОГДА 5
		|		КОГДА ВТРеквизитыДокумента.Статус = &СтатусНачат
		|			ТОГДА 4
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) В (&НетПредшественников, &ЗавершеныПредшественники)
		|			ТОГДА 3
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НачатыПредшественники
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(СостоянияПредшественников.Состояние, &НетПредшественников) = &НеНачатыПредшественники
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|
		|	КОНЕЦ                               КАК КодСостоянияНаВнутрицеховомУровне,", ""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьСостояниеОпераций, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
		|	ВЫБОР
		|		КОГДА НЕ СостоянияОпераций.Ссылка ЕСТЬ NULL
		|			ТОГДА СостоянияОпераций.Состояние
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ПустаяСсылка)
		|
		|	КОНЕЦ                               КАК СостояниеОпераций,",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьОбеспечение, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|	ЕСТЬNULL(Обеспечение.ТребуетОбеспечения, ЛОЖЬ) КАК ТребуетОбеспечения,",""));
			
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьОбеспечение, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Обеспечение.ОжидаетсяОбеспечение, ЛОЖЬ)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОжидаетсяОбеспечение)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОбеспеченПолностью)
			|	КОНЕЦ КАК СостояниеОбеспечения,",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьОформлениеВыработки, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ТрудозатратыКОформлению.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ 								КАК ТребуетОформленияВыработки,",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьОбеспечение, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбеспечение КАК Обеспечение
			|		ПО Обеспечение.Ссылка = ВТРеквизитыДокумента.Ссылка",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьОформлениеВыработки, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТрудозатратыКОформлению КАК ТрудозатратыКОформлению
			|		ПО ТрудозатратыКОформлению.Ссылка = ВТРеквизитыДокумента.Ссылка",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьСостояниеОпераций, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияОпераций КАК СостоянияОпераций
			|		ПО СостоянияОпераций.Ссылка = ВТРеквизитыДокумента.Ссылка",""));
	
	ТекстЗапроса = ?(ПараметрыРасчета.РассчитатьСостояниеЭтапов, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияПредшественников КАК СостоянияПредшественников
			|		ПО СостоянияПредшественников.Ссылка = ВТРеквизитыДокумента.Ссылка",""));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаписыватьНаборами()
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТРеквизитыДокумента КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Таблица.Ссылка) > 100";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаСостоянияЭтаповПроизводстваИзменение(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Заказ КАК ОтражаемыйДокумент
	|ИЗ
	|	СостоянияЭтаповПроизводстваИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Межцеховое управление';
				|en = 'Production scheduling and controlling'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Ошибка отражения состояния обеспечения этапов';
					|en = 'Error recording stage supply forecast'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПараметрыРасчетаКонструктор(МассивСсылокКОбновлению = Неопределено, МассивСсылокКОчистке = Неопределено, Показатели = Неопределено)
	
	ПараметрыРасчета = Новый Структура;
	
	Если МассивСсылокКОбновлению <> Неопределено Тогда
		ПараметрыРасчета.Вставить("МассивСсылокКОбновлению", МассивСсылокКОбновлению);
	Иначе
		ПараметрыРасчета.Вставить("МассивСсылокКОбновлению", Новый Массив);
	КонецЕсли;
	
	Если МассивСсылокКОчистке <> Неопределено Тогда
		ПараметрыРасчета.Вставить("МассивСсылокКОчистке", МассивСсылокКОчистке);
	Иначе
		ПараметрыРасчета.Вставить("МассивСсылокКОчистке", Новый Массив);
	КонецЕсли;
	
	Если Показатели = Неопределено Тогда
		Показатели = ПоказателиКонструктор();
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("РассчитатьОбеспечение", 
		Показатели.Найти("ТребуетОбеспечения") <> Неопределено
		ИЛИ Показатели.Найти("СостояниеОбеспечения") <> Неопределено);
	ПараметрыРасчета.Вставить("РассчитатьОформлениеВыработки", Показатели.Найти("ТребуетОформленияВыработки") <> Неопределено);
	ПараметрыРасчета.Вставить("РассчитатьСостояниеЭтапов", Показатели.Найти("СостояниеНаМежцеховомУровне") <> Неопределено);
	ПараметрыРасчета.Вставить("РассчитатьСостояниеОпераций", Показатели.Найти("СостояниеОпераций") <> Неопределено);
	
	ПараметрыРасчета.Вставить("Показатели", Показатели);
	
	Если МассивСсылокКОбновлению <> Неопределено
		И МассивСсылокКОбновлению.Количество() > 100 Тогда
		ПараметрыРасчета.Вставить("ОпределитьСпособЗаписи", Истина);
	Иначе
		ПараметрыРасчета.Вставить("ОпределитьСпособЗаписи", Ложь);
	КонецЕсли;

	ПараметрыРасчета.Вставить("ЗаписыватьНаборами", Ложь);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ПоказателиКонструктор()
	
	Показатели = Новый Массив;
	
	Показатели.Добавить("ТребуетОбеспечения");
	Показатели.Добавить("СостояниеОбеспечения");
	Показатели.Добавить("ТребуетОформленияВыработки");
	Показатели.Добавить("СостояниеНаМежцеховомУровне");
	Показатели.Добавить("СостояниеНаВнутрицеховомУровне");
	Показатели.Добавить("СостояниеОпераций");
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ для всех поддерживаемых версий библиотеки или
// конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СостоянияЭтаповПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0f84572-cce8-46ba-859d-658292e5e4d4");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЭтаповПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Удаляет записи регистра сведений ""Состояния этапов производства"" по завершенным этапам, для которых не требуется оформления выработки.
										|Удаляет записи регистра сведений ""Состояния этапов производства"" по не проведенным этапам.';
										|en = 'Deletes the records of the ""Production stage states"" information register for completed stages, for which no output registration is required.
										|Deletes the records of the ""Production stage states"" information register for the unposted stages.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостоянияЭтаповПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияЭтаповПроизводства.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СостоянияЭтаповПроизводства";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра",			  ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭтаповПроизводства.Этап         КАК Этап,
	|	СостоянияЭтаповПроизводства.Распоряжение КАК Распоряжение
	|ИЗ
	|	РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО СостоянияЭтаповПроизводства.Этап = ЭтапПроизводства2_2.Ссылка
	|ГДЕ
	|	ЭтапПроизводства2_2.Проведен
	|	И ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И НЕ СостоянияЭтаповПроизводства.ТребуетОформленияВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияЭтаповПроизводства.Этап         КАК Этап,
	|	СостоянияЭтаповПроизводства.Распоряжение КАК Распоряжение
	|ИЗ
	|	РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО СостоянияЭтаповПроизводства.Этап = ЭтапПроизводства2_2.Ссылка
	|ГДЕ
	|	НЕ ЭтапПроизводства2_2.Проведен
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СостоянияЭтаповПроизводства";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ДанныеДляОбработки";
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
					Параметры.Очередь,
					ПолноеИмяРегистра,
					МенеджерВременныхТаблиц,
					ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Или Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.Этап         КАК Этап,
	|	ДанныеДляОбработки.Распоряжение КАК Распоряжение,
	|
	|	ЭтапПроизводства2_2.Проведен
	|		И ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|		И НЕ ЕСТЬNULL(СостоянияЭтаповПроизводства.ТребуетОформленияВыработки, ИСТИНА) 
	|	ИЛИ
	|	НЕ ЭтапПроизводства2_2.Проведен КАК УдалитьЗапись
	|
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО ДанныеДляОбработки.Этап = ЭтапПроизводства2_2.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|		ПО ДанныеДляОбработки.Этап         = СостоянияЭтаповПроизводства.Этап
	|		 И ДанныеДляОбработки.Распоряжение = СостоянияЭтаповПроизводства.Распоряжение
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборИзменен = Ложь;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Этап",         Выборка.Этап);
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СостоянияЭтаповПроизводства.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Этап.Установить(Выборка.Этап);
			НаборЗаписей.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписей.Прочитать();
			
			Если Выборка.УдалитьЗапись И НаборЗаписей.Количество() > 0 Тогда
				
				НаборЗаписей.Очистить();
				
				НаборИзменен = Истина;
				
			КонецЕсли;
			
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Этап);
			
			ШаблонОшибки = НСтр("ru = 'Не удалось удалить запись регистра ""Состояния этапов производства"" по этапу ""%1"":
									   |
									   |%2';
									   |en = 'Cannot delete the record of the ""Production stage states"" register for the ""%1"" stage:
									   |
									   |%2'");
			
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
										ПолноеИмяРегистра,
										Выборка.Этап,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.СостоянияЭтаповПроизводства,
				Выборка.Этап,
				ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
										Параметры.Очередь,
										ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
