#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Верх;
	КонецЕсли;
	
	ДокументыИсключения = ДокументыИсключения();
	ИменаПроверяемыхДокументов = ИменаПроверяемыхДокументов();
	
	СписокВыбора = СписокВыбораЗначенияПроверки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокВыбора, Элементы.ДеревоПроверяемыхДокументовЗначениеПроверки.СписокВыбора);
	Элементы.ДеревоПроверяемыхДокументовЗначениеПоУмолчанию.Заголовок = СписокВыбора.Получить(3);
	
	ТолькоПросмотр = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиИсключенийПроверкиДокументов);
	СпособГруппировкиОбъектов = "ПоВидам";
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьДеревоДокументов();
	
	СобытияФормКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстПредупреждения = 
		НСтр("ru = 'Настройки исключений проверяемых документов были изменены, но не сохранены. Для того, чтобы изменения вступили в силу следует сохранить настройки.';
			|en = 'The exception settings of documents under check were changed but not saved. To apply the changes, save the settings.'");
		Возврат;
	КонецЕсли;
		
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Настройки исключений проверяемых документов были изменены. Сохранить изменения?';
							|en = 'The exception settings of documents under check were changed. Do you want to save the changes?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПриПометкеЭлементаДерева(ТекущийЭлемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ДокументыИсключения.Очистить();
		ОбновитьДокументыИсключенияРекурсивно(ДеревоПроверяемыхДокументов.ПолучитьЭлементы());
	КонецЕсли;
	
	Элементы.Представление.Заголовок = ?(СпособГруппировкиОбъектов = "ПоРазделам", НСтр("ru = 'Раздел / Вид документа';
																						|en = 'Section / Document kind'"), НСтр("ru = 'Вид документа';
																																|en = 'Document kind'"));
	ЗаполнитьДеревоДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьЗапись(Команда)
	
	Если Модифицированность Тогда
		ДокументыИсключения.Очистить();
		ОбновитьДокументыИсключенияРекурсивно(ДеревоПроверяемыхДокументов.ПолучитьЭлементы());
		СохранитьНастройкиИсключений(ДокументыИсключения);
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если Команда.Имя = "ЗаписатьИЗакрыть" Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПроверки(Команда)
	
	Для каждого ИдентификаторСтроки Из Элементы.ДеревоПроверяемыхДокументов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПроверяемыхДокументов.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.ЗначениеПроверки = Пометка(Команда.Имя);
		ПриПометкеЭлементаДерева(ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ДеревоПроверяемыхДокументов"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ДеревоПроверяемыхДокументов.ЭтоПодраздел", Истина, ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРазделаПанелиФункций);
	
	СписокВыбора = СписокВыбораЗначенияПроверки();
	Для каждого ЭлементВыбора Из СписокВыбора Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ДеревоПроверяемыхДокументовЗначениеПроверки"].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ДеревоПроверяемыхДокументов.ЗначениеПроверки", ЭлементВыбора.Значение, ВидСравненияКомпоновкиДанных.Равно);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементВыбора.Представление);
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ДеревоПроверяемыхДокументовЗначениеПроверки"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ДеревоПроверяемыхДокументов.ЗначениеПроверки", 5, ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Несколько вариантов';
																|en = 'Several options'"));
	
КонецПроцедуры

#Область ЗаполнениеДерева

&НаКлиенте
Процедура ЗаполнитьДеревоДокументов()
	
	ИдентификаторыРазворачиваемыхСтрок = Новый Массив;
	ЗаполнитьДеревоДокументовНаСервере(ИдентификаторыРазворачиваемыхСтрок);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыРазворачиваемыхСтрок Цикл
		Элементы.ДеревоПроверяемыхДокументов.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДокументовНаСервере(ИдентификаторыРазворачиваемыхСтрок)
	
	Если СпособГруппировкиОбъектов = "ПоРазделам" Тогда
		ДеревоПроверяемыхДокументовЗаполнитьПоРазделам();
	Иначе
		ДеревоПроверяемыхДокументовЗаполнить();
	КонецЕсли;
	
	Если ДеревоПроверяемыхДокументов.ПолучитьЭлементы().Количество() < 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторКорня = ДеревоПроверяемыхДокументов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	ИдентификаторыРазворачиваемыхСтрок.Добавить(ИдентификаторКорня);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПроверяемыхДокументовЗаполнить()
	
	ДеревоПроверяемыхДокументов.ПолучитьЭлементы().Очистить();
	
	ПроверяемыеДокументы = ДеревоПроверяемыхДокументов.ПолучитьЭлементы().Добавить();
	ПроверяемыеДокументы.Имя = "ПроверяемыеДокументы";
	ПроверяемыеДокументы.ПолноеИмя = НСтр("ru = 'Проверяемые документы';
											|en = 'Documents under check'");
	ПроверяемыеДокументы.Представление = ПроверяемыеДокументы.ПолноеИмя;
	ПроверяемыеДокументы.Картинка = БиблиотекаКартинок.Документ;
	
	ВывестиКоллекцию(ПроверяемыеДокументы, ИменаПроверяемыхДокументов.ВыгрузитьЗначения());
	
	ПроверяемыеДокументы.ЗначениеПроверки = ЗначениеПометкиОтносительноВложенныхЭлементов(ПроверяемыеДокументы);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПроверяемыхДокументовЗаполнитьПоРазделам()
	
	ДеревоПроверяемыхДокументов.ПолучитьЭлементы().Очистить();
	
	Ветка = ДеревоПроверяемыхДокументов.ПолучитьЭлементы().Добавить();
	Ветка.Имя = "ПроверяемыеДокументы";
	Ветка.Представление = НСтр("ru = 'Проверяемые документы';
								|en = 'Documents under check'");
	
	ДокументыВДереве = Новый Массив;
	
	ВывестиКоллекцию(Ветка, Метаданные.Подсистемы, ДокументыВДереве);
	
	ОтсутствующиеПроверяемыеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИменаПроверяемыхДокументов.ВыгрузитьЗначения(), ДокументыВДереве);
	
	Если ОтсутствующиеПроверяемыеДокументы.Количество() Тогда
		
		// Некоторые документы могут не войти ни в один из разделов (так как раздел не выведен в командный интерфейс), выведем их отдельно:
		НоваяВетка = Ветка.ПолучитьЭлементы().Добавить();
		НоваяВетка.Имя = "ДокументыБезРаздела";
		НоваяВетка.ПолноеИмя = НСтр("ru = 'Документы без раздела';
									|en = 'Documents without a section'");
		НоваяВетка.Представление = НоваяВетка.ПолноеИмя;
		НоваяВетка.Картинка = БиблиотекаКартинок.Вопрос;
		
		ВывестиКоллекцию(НоваяВетка, ОтсутствующиеПроверяемыеДокументы);
		
		НоваяВетка.ЗначениеПроверки = ЗначениеПометкиОтносительноВложенныхЭлементов(НоваяВетка);
		
	КонецЕсли;
	
	Ветка.ЗначениеПроверки = ЗначениеПометкиОтносительноВложенныхЭлементов(Ветка);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКоллекцию(Знач Ветка, Знач КоллекцияОбъектовМетаданных, ВыбранныеДокументы = Неопределено)
	
	Для Каждого ЭлементКоллекции Из КоллекцияОбъектовМетаданных Цикл
		
		ОбъектМетаданных = ?(ТипЗнч(ЭлементКоллекции) = Тип("Строка"), Документы[ЭлементКоллекции].ПустаяСсылка().Метаданные(), ЭлементКоллекции);
		
		Если ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева") И ОбъектМетаданных.ПолноеИмя() = Ветка.ПолноеИмя Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбранныеДокументы <> Неопределено Тогда
			Если Не ОбъектМетаданныхДоступен(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяВетка = Ветка.ПолучитьЭлементы().Добавить();
		НоваяВетка.Имя = ОбъектМетаданных.Имя;
		НоваяВетка.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		НоваяВетка.Представление = ОбъектМетаданных.Представление();
		НоваяВетка.Картинка = КартинкаВИнтерфейсе(ОбъектМетаданных);
		
		Если ЭтоПодсистема(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Состав, ВыбранныеДокументы);
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Подсистемы, ВыбранныеДокументы);
			НоваяВетка.ЭтоПодраздел = КоллекцияОбъектовМетаданных <> Метаданные.Подсистемы;
		ИначеЕсли ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.РегистрируемыеДокументы, ВыбранныеДокументы);
		КонецЕсли;
		
		Если ЭтоПодсистема(ОбъектМетаданных) И НоваяВетка.ПолучитьЭлементы().Количество() = 0 Тогда
			Индекс = Ветка.ПолучитьЭлементы().Индекс(НоваяВетка);
			Ветка.ПолучитьЭлементы().Удалить(Индекс);
		ИначеЕсли ЭтоПодсистема(ОбъектМетаданных) Тогда
			НоваяВетка.ЗначениеПроверки = ЗначениеПометкиОтносительноВложенныхЭлементов(НоваяВетка);
		Иначе
			НоваяВетка.ЗначениеПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокументыИсключения, НоваяВетка.Имя, Пометка("ПоУмолчанию"));
			Если ВыбранныеДокументы <> Неопределено Тогда
				ВыбранныеДокументы.Добавить(НоваяВетка.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаЭлементов

&НаКлиентеНаСервереБезКонтекста
Процедура ПриПометкеЭлементаДерева(ЭлементДерева)
	
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Если ВложенныеЭлементы.Количество() Тогда
		ПометитьВложенныеЭлементыРекурсивно(ВложенныеЭлементы, ЭлементДерева.ЗначениеПроверки);
	КонецЕсли;
	
	ПометитьЭлементыРодителейРекурсивно(ЭлементДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Пометка(ТекстЗначения)
	
	СоответствиеПометок = Новый Соответствие;
	СоответствиеПометок.Вставить("НеПроверяется", 0);
	СоответствиеПометок.Вставить("ПроверяетсяСЗапретом", 1);
	СоответствиеПометок.Вставить("ПроверяетсяБезЗапрета", 2);
	СоответствиеПометок.Вставить("ПоУмолчанию", 3);
	СоответствиеПометок.Вставить("НесколькоВариантов", 5);
	
	Возврат СоответствиеПометок.Получить(ТекстЗначения);
	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьЭлементыРодителейРекурсивно(ЭлементДерева)
	
	Родитель = ЭлементДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.ЗначениеПроверки = Пометка("НеПроверяется");
	ИначеЕсли ЭлементДерева.ЗначениеПроверки = Пометка("НесколькоВариантов") Тогда
		Родитель.ЗначениеПроверки = Пометка("НесколькоВариантов");
	Иначе
		Родитель.ЗначениеПроверки = ЗначениеПометкиОтносительноВложенныхЭлементов(Родитель);
	КонецЕсли;
	
	ПометитьЭлементыРодителейРекурсивно(Родитель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПометкиОтносительноВложенныхЭлементов(ЭлементДерева)
	
	ЗначениеВозврата = -1;
	
	Для каждого ВложенныйЭлемент Из ЭлементДерева.ПолучитьЭлементы() Цикл
		
		Если ЗначениеВозврата = -1 Тогда
			ЗначениеВозврата = ВложенныйЭлемент.ЗначениеПроверки;
		ИначеЕсли ВложенныйЭлемент.ЗначениеПроверки = Пометка("НесколькоВариантов") Тогда
			ЗначениеВозврата = Пометка("НесколькоВариантов");
			Прервать;
		ИначеЕсли ЗначениеВозврата <> ВложенныйЭлемент.ЗначениеПроверки Тогда
			ЗначениеВозврата = Пометка("НесколькоВариантов");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеВозврата = -1 Тогда
		ЗначениеВозврата = Пометка("НеПроверяется");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьВложенныеЭлементыРекурсивно(ЭлементыДерева, ЗначениеПроверки)
	
	Для каждого ВложенныйЭлемент Из ЭлементыДерева Цикл
		
		ВложенныйЭлемент.ЗначениеПроверки = ЗначениеПроверки;
		ПометитьВложенныеЭлементыРекурсивно(ВложенныйЭлемент.ПолучитьЭлементы(), ВложенныйЭлемент.ЗначениеПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция КартинкаВИнтерфейсе(ОбъектМетаданных)
	
	СвойстваОбъекта = Новый Структура("Картинка");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СвойстваОбъекта.Картинка) Тогда
		Возврат СвойстваОбъекта.Картинка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат СтрНачинаетсяС(ОбъектМетаданных.ПолноеИмя(), "Подсистема");
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхДоступен(ОбъектМетаданных)
	
	ЭтоПодсистема = ЭтоПодсистема(ОбъектМетаданных);
	
	Если Не ЭтоПодсистема И Не Метаданные["Документы"].Содержит(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЭтоПодсистема Тогда
		ТипОбъектаМетаданных = Тип("ДокументСсылка." + ОбъектМетаданных.Имя);
		Если Не РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей().Метаданные().Измерения.Документ.Тип.СодержитТип(ТипОбъектаМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДоступенПоПравам = ПравоДоступа("Просмотр", ОбъектМетаданных);
	ДоступенПоФункциональнымОпциям = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
	
	ДоступенВИнтерфейсе = ?(ЭтоПодсистема, ОбъектМетаданных.ВключатьВКомандныйИнтерфейс, ОбъектМетаданных.ПолнотекстовыйПоиск = 
		Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать);
	
	Возврат ДоступенПоПравам И ДоступенПоФункциональнымОпциям И ДоступенВИнтерфейсе;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДокументыИсключенияРекурсивно(ЭлементыДерева)
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыДерева.Количество() Тогда
			ОбновитьДокументыИсключенияРекурсивно(ПодчиненныеЭлементыДерева);
		ИначеЕсли ЭлементДерева.ЗначениеПроверки <> Пометка("ПоУмолчанию") Тогда
			ДокументыИсключения.Вставить(ЭлементДерева.Имя, ЭлементДерева.ЗначениеПроверки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораЗначенияПроверки()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(0, НСтр("ru = 'Не проверяется';
									|en = 'Not under check'"));
	СписокВыбора.Добавить(1, НСтр("ru = 'Проверяется с запретом редактирования';
									|en = 'Under check with editing restriction'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Уведомительная проверка';
									|en = 'Notification check'"));
	ЗначениеПоУмолчанию = ?(ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеФинансовыеДокументы"), НСтр("ru = 'уведомительная';
																												|en = 'notification'"), НСтр("ru = 'запрет редактирования';
																																				|en = 'editing restriction'"));
	СписокВыбора.Добавить(3, НСтр("ru = 'По умолчанию';
									|en = 'Default'") + " " + "(" + ЗначениеПоУмолчанию + ")");
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаПроверяемыхДокументов()
	
	ИменаПроверяемыхДокументов = Новый СписокЗначений;
	
	ТипыПроверяемыхДокументов = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей().Метаданные().Измерения.Документ.Тип.Типы();
	
	Для Каждого ТипПроверяемогоДокумента Из ТипыПроверяемыхДокументов Цикл
		
		ЭлементКоллекцииМетаданных = Метаданные.НайтиПоТипу(ТипПроверяемогоДокумента);
		
		Если ОбъектМетаданныхДоступен(ЭлементКоллекцииМетаданных) Тогда
			ИменаПроверяемыхДокументов.Добавить(ЭлементКоллекцииМетаданных.Имя, ЭлементКоллекцииМетаданных.Представление());
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаПроверяемыхДокументов.СортироватьПоЗначению();
	
	Возврат ИменаПроверяемыхДокументов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбработатьЗапись(Команды.ЗаписатьИЗакрыть);		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыИсключения()
	
	СтруктураВозврата = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИсключенийПроверкиДокументов.ВидДокумента.Имя КАК Имя,
	|	ВЫБОР
	|		КОГДА НастройкиИсключенийПроверкиДокументов.Проверяется
	|				И НастройкиИсключенийПроверкиДокументов.УведомительнаяПроверка
	|			ТОГДА 2
	|		КОГДА НастройкиИсключенийПроверкиДокументов.Проверяется
	|				И НЕ НастройкиИсключенийПроверкиДокументов.УведомительнаяПроверка
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеПроверки
	|ИЗ
	|	РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК НастройкиИсключенийПроверкиДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Вставить(Выборка.Имя, Выборка.ЗначениеПроверки);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиИсключений(ДокументыИсключения)
	
	СтарыеИсключения = ДокументыИсключения();
	СтрокаДокументовСтарыхИсключений = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(СтарыеИсключения);
	СтрокаДокументовНовыхИсключений = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ДокументыИсключения);
	МассивДокументовСтарыхИсключений = ?(ЗначениеЗаполнено(СтрокаДокументовСтарыхИсключений), 
										СтрРазделить(СтрокаДокументовСтарыхИсключений, ","), 
										Новый Массив);
	ОчищаемыеДокументыИсключений = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивДокументовСтарыхИсключений, СтрРазделить(СтрокаДокументовНовыхИсключений, ","));
	
	Если ДокументыИсключения.Количество() = 0 И ОчищаемыеДокументыИсключений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменМетаданных = Новый Массив;
	Для каждого ДокументИсключения Из ДокументыИсключения Цикл
		МассивИменМетаданных.Добавить("Документ."+ДокументИсключения.Ключ);
	КонецЦикла;
	Для каждого ДокументИсключения Из ОчищаемыеДокументыИсключений Цикл
		Если ЗначениеЗаполнено(ДокументИсключения) Тогда
			МассивИменМетаданных.Добавить("Документ."+ДокументИсключения);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиИсключений = РегистрыСведений.НастройкиИсключенийПроверкиДокументов.СоздатьНаборЗаписей();
	ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "НастройкиИсключенийПроверкиДокументов");
	
	НачатьТранзакцию();
	
	Попытка
		
		Ссылки = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(МассивИменМетаданных);
		
		Для каждого ИдМетаданных Из Ссылки Цикл
			
			ЗначениеПроверки = Неопределено;
			КлючПоиска = СтрЗаменить(ИдМетаданных.Ключ, "Документ.", "");
			ДокументыИсключения.Свойство(КлючПоиска, ЗначениеПроверки);
			
			ЗначенияБлокировки = Новый Структура("ВидДокумента", ИдМетаданных.Значение);
			ОбщегоНазначенияУТ.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
			
			ЗаблокироватьДанныеДляРедактирования(ИдМетаданных.Значение);
			
			НастройкиИсключений.Очистить();
			НастройкиИсключений.Отбор.ВидДокумента.Установить(ИдМетаданных.Значение);
			
			Если ЗначениеПроверки <> Неопределено Тогда
				ЗаписьРегистра = НастройкиИсключений.Добавить();
				ЗаписьРегистра.ВидДокумента = ИдМетаданных.Значение;
				ЗаписьРегистра.Проверяется = ЗначениеПроверки <> Пометка("НеПроверяется");
				ЗаписьРегистра.УведомительнаяПроверка = ЗначениеПроверки = Пометка("ПроверяетсяБезЗапрета");
			КонецЕсли;
			
			НастройкиИсключений.Записать();
			
			РазблокироватьДанныеДляРедактирования(ИдМетаданных.Значение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось сохранить настройки исключений проверки финансовых документов по причине: %1';
										|en = 'Cannot save the settings of financial document check exceptions. Reason: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Настройка исключений проверки документов';
				|en = 'Set up document check exceptions'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		ВызватьИсключение НСтр("ru = 'Не удалось сохранить настройки исключений. Подробнее см. в Журнале регистрации';
								|en = 'Cannot save the exception settings. For more information, see the Event log'");
	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
