#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает типы  документов, которые не должны учитываться как проверяемые. По ним данные могут храниться в инф. базе,
// но более они не учитываются.
// 
// Параметры:
// 	ТолькоБезВозможностиИзменения - Булево - принак того, что необходимо вернуть только те документы,
// 		настройки по которым не задаются вручную пользователем (нужно, когда результат функции используется в запросе
// 		с отдельным получением данных по таблице исключений). Значение по умолчанию - Ложь.
//
// Возвращаемое значение:
//	Массив Из Тип - Типы документов, которые не должны проверяться.
//
Функция ИсключаемыеТипыДокументовДляПроверки(ТолькоБезВозможностиИзменения = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если Не ТолькоБезВозможностиИзменения Тогда
		
		МассивВозврата = ТаблицаИсключаемыхДокументов().ВыгрузитьКолонку("Тип");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ИсключаемыеТипыДляПроверкиБезВозможностиИзменения());
	
	Возврат МассивВозврата;
	
КонецФункции

// Получает имена  документов, которые не должны учитываться как проверяемые. По ним данные могут храниться в инф. базе,
// но более они не учитываются.
// 
// Параметры:
// 	ТолькоБезВозможностиИзменения - Булево - принак того, что необходимо вернуть только те документы,
// 	настройки по которым не задаются вручную пользователем (нужно, когда результат функции используется в запросе
// 	с отдельным получением данных по таблице исключений). Значение по умолчанию - Ложь.
//
// Возвращаемое значение:
//	Массив Из Строка - Имена документов, которые не должны проверяться.
//
Функция ИсключаемыеДокументыДляПроверки(ТолькоБезВозможностиИзменения = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если Не ТолькоБезВозможностиИзменения Тогда
		
		МассивВозврата = ТаблицаИсключаемыхДокументов().ВыгрузитьКолонку("ИмяДокумента");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ИсключаемыеДокументыДляПроверкиБезВозможностиИзменения());
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиИсключенийПроверкиДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.59";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc287a94-cb93-4bfa-ae87-cf3580744667");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиИсключенийПроверкиДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет исключения по проверке документов в новом регистре сведений';
									|en = 'Fills document check exceptions in a new information register'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(МетаданныеРегистра.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(МетаданныеРегистра.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(МетаданныеРегистра.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	ИсключаемыеТипыДляПроверки = ИсключаемыеТипыДляПроверкиСВозможностьюИзмененения(Параметры.ВерсияПодсистемыНаНачалоОбновления);
	СоответствиеИд = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ИсключаемыеТипыДляПроверки);
	МассивИдентификаторовИсключаемыхДокументов = Новый Массив;
	Для каждого Идентификатор Из ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ИсключаемыеТипыДляПроверки) Цикл
		МассивИдентификаторовИсключаемыхДокументов.Добавить(Идентификатор.Значение);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыДокументов.Ссылка КАК ВидДокумента
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК Настройки
	|		ПО Настройки.ВидДокумента = ИдентификаторыДокументов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК К
	|		ПО ИСТИНА
	|ГДЕ
	|	ИдентификаторыДокументов.Ссылка В (&МассивИдентификаторовИсключаемыхДокументов)
	|	И К.ИспользоватьПроверкуФинансовыхДокументов
	|	И Настройки.ВидДокумента ЕСТЬ NULL
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивИдентификаторовИсключаемыхДокументов", МассивИдентификаторовИсключаемыхДокументов);
	Результат = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат.Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("ВидДокумента", Выборка.ВидДокумента);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидДокумента.Установить(Выборка.ВидДокумента);
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.ВидДокумента = Выборка.ВидДокумента;
			ЗаписьРегистра.УведомительнаяПроверка = ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеФинансовыеДокументы");
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по причине: %2';
							|en = 'Cannot save the data to the %1 register. Reason: %2'");
			
			ТекстСообщения = 	СтрШаблон(
				Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

Функция ИсключаемыеТипыДляПроверкиБезВозможностиИзменения()
	
	МассивВозврата = Новый Массив;
	
	Для каждого ИмяИсключаемогоДокумента Из ИсключаемыеДокументыДляПроверкиБезВозможностиИзменения() Цикл
		МассивВозврата.Добавить(Тип("ДокументСсылка." + ИмяИсключаемогоДокумента));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ИсключаемыеДокументыДляПроверкиБезВозможностиИзменения()
	
	МассивВозврата = Новый Массив;
	МДокументы = Метаданные.Документы;
	
	МассивВозврата.Добавить(МДокументы.ВводОстатков.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковВзаиморасчетов.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковДенежныхСредств.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковОПродажахЗаПрошлыеПериоды.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковПоФинансовымИнструментам.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковПрочиеРасходы.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковПрочихАктивовПассивов.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковРасчетовПоЭквайрингу.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковСПодотчетниками.Имя);
	МассивВозврата.Добавить(МДокументы.ВводОстатковТоваров.Имя);
	МассивВозврата.Добавить(МДокументы.ИсправлениеРазвернутогоСальдоТоваровОрганизаций.Имя);
	МассивВозврата.Добавить(МДокументы.РаспределениеДоходовПоНаправлениямДеятельности.Имя);
	МассивВозврата.Добавить(МДокументы.РаспределениеНДС.Имя);
	МассивВозврата.Добавить(МДокументы.РаспределениеПрочихЗатрат.Имя);
	МассивВозврата.Добавить(МДокументы.РасчетКурсовыхРазниц.Имя);
	МассивВозврата.Добавить(МДокументы.РасчетПроцентныхРасходовДисконтирования.Имя);
	МассивВозврата.Добавить(МДокументы.РасчетСебестоимостиТоваров.Имя);
	МассивВозврата.Добавить(МДокументы.РегистраторРасчетов.Имя);
	//++ НЕ УТ
	МассивВозврата.Добавить(МДокументы.АмортизацияНМА2_4.Имя);
	МассивВозврата.Добавить(МДокументы.АмортизацияОС2_4.Имя);
	МассивВозврата.Добавить(МДокументы.НачислениеПроцентовПоАренде.Имя);
	МассивВозврата.Добавить(МДокументы.НачислениеСписаниеРезервовПоСомнительнымДолгам.Имя);
	МассивВозврата.Добавить(МДокументы.РасчетРезервовПодОбесценениеЗапасов.Имя);
	//-- НЕ УТ

	//++ НЕ УТКА
	МассивВозврата.Добавить(МДокументы.РегламентнаяОперацияМеждународныйУчет.Имя);
	//-- НЕ УТКА
	
	ПроверкаДокументовЛокализация.ДополнитьИсключаемыеДокументыДляПроверки(МассивВозврата);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ИсключаемыеТипыДляПроверкиСВозможностьюИзмененения(ВерсияДоОбновления = "")
	
	МассивВозврата = Новый Массив;
	СоответствиеДокументовИсключенийВерсиям = Новый Соответствие;
	//++ НЕ УТКА
	СоответствиеДокументовИсключенийВерсиям.Вставить("ОтладкаОбработчика", Тип("ДокументСсылка.ЭтапПроизводства2_2"));
	//-- НЕ УТКА

	Для каждого СоответствиеВерсииИДокумента Из СоответствиеДокументовИсключенийВерсиям Цикл
		Если ВерсияДоОбновления = "" ИЛИ СоответствиеВерсииИДокумента.Ключ = "ОтладкаОбработчика"
			Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СоответствиеВерсииИДокумента.Ключ, ВерсияДоОбновления) > 0 Тогда
			МассивВозврата.Добавить(СоответствиеВерсииИДокумента.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ТаблицаИсключаемыхДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Имя КАК ИмяДокумента,
	|	ТИПЗНАЧЕНИЯ(Данные.ЗначениеПустойСсылки) КАК Тип
	|ИЗ
	|	РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК НастройкиИсключений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК Данные
	|	ПО НастройкиИсключений.ВидДокумента = Данные.Ссылка
	|	И НЕ Данные.ПометкаУдаления
	|ГДЕ
	|	НЕ НастройкиИсключений.Проверяется";
	
	ТаблицаВозврата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВозврата;
	
КонецФункции

#КонецОбласти

#КонецЕсли