#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ПособияСоциальногоСтрахования") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетПособийСоциальногоСтрахованияНебольшихОрганизаций");
		Модуль.СведенияОЗастрахованныхЛицахФССПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Умолчания.
	СостояниеСведений                      = "";
	СостояниеСотрудниковДляВсехСведений    = "Работающие";
	СостояниеСотрудниковДляСведенийВРаботе = "";
	
	Если ЗначениеЗаполнено(Параметры.СостояниеСведений) Тогда
		СостояниеСведений = Параметры.СостояниеСведений;
	КонецЕсли;
	
	Команда = Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Команды.ФормаСписка;
	НавигационнаяСсылка = "e1cib/command/" + Команда.ПолноеИмя();
	Заголовок           = Команда.Представление();
	
	УстановитьТекущуюДату();
	
	Элементы.ОтметитьСведенияКакПринятыеФондом.Видимость = СЭДОФСС.ДоступенОбменЧерезСЭДО();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.СведенияОЗастрахованномЛицеФСС");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодключаемыеКомандыСведений;
	ПараметрыРазмещения.ПрефиксГрупп = "Сведения";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПоказыватьОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая");
	Если ПоказыватьОрганизации Тогда
		Организация = Параметры.Организация;
		ЗаполнитьСписокВыбораГоловныхОрганизаций();
		Количество = Элементы.ГоловнаяОрганизация.СписокВыбора.Количество();
		ПоказыватьГоловныеОрганизации = (Количество > 1);
	Иначе
		Элементы.СостояниеСведенийФильтрГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Организации.Добавить(ОрганизацияПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	Элементы.ОтборГоловнаяОрганизацияГруппа.Видимость = ПоказыватьГоловныеОрганизации;
	Элементы.ОтборОрганизацияГруппа.Видимость         = ПоказыватьОрганизации;
	Элементы.ОтборОрганизацииГруппа.Видимость         = ПоказыватьОрганизации;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Подразделение));
	ПоказыватьПодразделения = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
	Если ПоказыватьПодразделения Тогда
		Подразделение = Параметры.Подразделение;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Подразделения.Добавить(Подразделение);
		КонецЕсли;
	Иначе
		Элементы.ОтборПодразделениеГруппа.Видимость = Ложь;
		Элементы.ОтборПодразделенияГруппа.Видимость = Ложь;
	КонецЕсли;
	
	СЭДОФСС.ПеренестиОтборыВПользовательскиеНастройки(ЭтотОбъект, Список);
	
	Если Не ОбщегоНазначенияБЗК.ЕстьСохраненныеНастройкиФормы(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ЗначенияДляЗаполнения = Новый Структура("Организация", "Организация");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		ПослеЗагрузкиВсехНастроекФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("УстановитьТекущуюДатуНаКлиенте", КонецДня(ТекущаяДата) - ТекущаяДата + 60);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	// Организации загружаются только в том случае, если они видны и отсутствуют в предустановленных (контекстных) фильтрах.
	ОтборыОтсутствуют = Не ЗначениеЗаполнено(ГоловнаяОрганизация)
		И Организации.Количество() = 0
		И Подразделения.Количество() = 0;
	Если ПоказыватьОрганизации И ОтборыОтсутствуют Тогда
		Если ПоказыватьГоловныеОрганизации Тогда
			ГоловнаяОрганизация = Настройки["ГоловнаяОрганизация"];
		КонецЕсли;
		ИспользоватьСписокОрганизаций = Настройки["ИспользоватьСписокОрганизаций"];
		// Представления могли измениться, поэтому в список загружаются только значения.
		ОрганизацииИзНастроек = Настройки["Организации"];
		Если ОрганизацииИзНастроек = Неопределено Тогда
			ОрганизацииИзНастроек = Настройки["ОтборПоОрганизациям"];
		КонецЕсли;
		Если ОрганизацииИзНастроек = Неопределено Тогда
			ОрганизацииИзНастроек = Настройки["СписокОрганизаций"];
		КонецЕсли;
		Если ТипЗнч(ОрганизацииИзНастроек) = Тип("СписокЗначений") Тогда
			Организации.ЗагрузитьЗначения(ОрганизацииИзНастроек.ВыгрузитьЗначения());
		КонецЕсли;
		СписокОрганизацийДляВыбораИзНастроек = Настройки["СписокОрганизацийДляВыбора"];
		Если ТипЗнч(СписокОрганизацийДляВыбораИзНастроек) = Тип("СписокЗначений") Тогда
			СписокОрганизацийДляВыбора.ЗагрузитьЗначения(СписокОрганизацийДляВыбораИзНастроек.ВыгрузитьЗначения());
		КонецЕсли;
		Если Не ИспользоватьСписокОрганизаций И Организации.Количество() > 0 Тогда
			Организация = Организации[0].Значение;
		КонецЕсли;
	КонецЕсли;
	// Загрузка отбора по подразделениям.
	Если ПоказыватьПодразделения И ОтборыОтсутствуют Тогда
		ПодразделенияИзНастроек = Настройки["Подразделения"];
		Если ПодразделенияИзНастроек = Неопределено Тогда
			ПодразделенияИзНастроек = Настройки["ОтборПоПодразделениям"];
		КонецЕсли;
		Если ТипЗнч(ПодразделенияИзНастроек) = Тип("СписокЗначений") Тогда
			Подразделения.ЗагрузитьЗначения(ПодразделенияИзНастроек.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	Настройки.Удалить("Организация");
	Настройки.Удалить("Организации");
	Настройки.Удалить("ОтборПоОрганизациям");
	Настройки.Удалить("СписокОрганизаций");
	Настройки.Удалить("СписокОрганизацийДляВыбора");
	Настройки.Удалить("ГоловнаяОрганизация");
	Настройки.Удалить("ИспользоватьСписокОрганизаций");
	Настройки.Удалить("Подразделения");
	Настройки.Удалить("ОтборПоПодразделениям");
	Если ЗначениеЗаполнено(Параметры.СостояниеСведений) Тогда
		Настройки.Удалить("СостояниеСведений");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПослеЗагрузкиВсехНастроекФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СведенияОЗастрахованномЛицеФСС" // Сведения.
		Или ИмяСобытия = "Запись_ЗастрахованныеЛицаФСС" // Регистр (устаревший вариант).
		Или ИмяСобытия = "Запись_ЗастрахованныеЛицаСЭДО" // Регистр (актуальный вариант).
		Или ИмяСобытия = "Запись_НесоответствиеСведенийОЗастрахованномЛицеСЭДО" // Несоответствие.
		Или ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		Или ИмяСобытия = "Запись_ФизическиеЛица"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения()
		Или ИмяСобытия = "Запись_РезультатыРегистрацииСведенийОЗастрахованномЛицеФСС" Тогда
		
		ПодключитьОбработчикОбновленияФормы(1);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		// Очистка представлений организаций.
		Организации.ЗагрузитьЗначения(Организации.ВыгрузитьЗначения());
		СписокОрганизацийДляВыбора.ЗагрузитьЗначения(СписокОрганизацийДляВыбора.ВыгрузитьЗначения());
		ПодключитьОбработчикОбновленияФормы(2);
		
	ИначеЕсли ИмяСобытия = "Запись_ПодразделенияОрганизаций" Тогда
		
		// Очистка представлений подразделений.
		Подразделения.ЗагрузитьЗначения(Подразделения.ВыгрузитьЗначения());
		ПодключитьОбработчикОбновленияФормы(2);
		
	ИначеЕсли ИмяСобытия = "Запись_ПриемНаРаботу"
		Или ИмяСобытия = "Запись_ПриемНаРаботуСписком"
		Или ИмяСобытия = "Запись_Увольнение"
		Или ИмяСобытия = "Запись_УвольнениеСписком" Тогда
		
		ПодключитьОбработчикОбновленияФормы(10);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	ГоловнаяОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Организации.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Подразделения.Очистить();
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Подразделения.Добавить(Подразделение);
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПредставлениеНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	ВыбратьПодразделения();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеСведенийФильтрПриИзменении(Элемент)
	ОбновитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеСотрудниковПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(СостояниеСведений) Тогда
		СостояниеСотрудниковДляВсехСведений    = СостояниеСотрудников;
	Иначе
		СостояниеСотрудниковДляСведенийВРаботе = СостояниеСотрудников;
	КонецЕсли;
	ОбновитьПараметрыСписка();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ПолеФормы, СтандартнаяОбработка)
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если (ПолеФормы = Элементы.СписокСотрудник Или ПолеФормы = Элементы.СписокСНИЛС)
		И ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		
		Значение = ТекущаяСтрока.Сотрудник;
		
	ИначеЕсли (ПолеФормы = Элементы.СписокФизическоеЛицо Или ПолеФормы = Элементы.СписокСНИЛС)
		И ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
		
		Значение = ТекущаяСтрока.ФизическоеЛицо;
		
	ИначеЕсли ПолеФормы = Элементы.СписокКоличествоВходящихДокументов Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("СНИЛС", ТекущаяСтрока.СНИЛС);
		Отбор.Вставить("Страхователь", ТекущаяСтрока.Страхователь);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("РегистрСведений.СНИЛСВходящихСообщенийСЭДО.ФормаСписка", ПараметрыФормы, , Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	ИначеЕсли ПолеФормы = Элементы.СписокНесоответствие
		И ЗначениеЗаполнено(ТекущаяСтрока.Несоответствие) Тогда
		
		Значение = ТекущаяСтрока.Несоответствие;
		
	ИначеЕсли ПолеФормы = Элементы.СписокСостояниеСведений
		И ЗначениеЗаполнено(ТекущаяСтрока.Несоответствие)
		И ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.Несоответствие") Тогда
		
		Значение = ТекущаяСтрока.Несоответствие;
		
	ИначеЕсли ПолеФормы = Элементы.СписокСостояниеСведений
		И (ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать")
			Или ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ТребуетсяАктуализировать")
			Или ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ТребуетсяАннулировать")) Тогда
		
		СоздатьСведенияОЗастрахованномЛице(Неопределено);
		Возврат;
		
	ИначеЕсли (ТекущаяСтрока.Доставлен Или ТекущаяСтрока.ОтправленОператору)
		И ЗначениеЗаполнено(ТекущаяСтрока.РегистрацияСведений)
		И (ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.НеПринят")
			Или ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ОшибкаПриОтправке")
			Или ТекущаяСтрока.СостояниеСведений = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСЭДОФСС.ОшибкаЛогическогоКонтроля")
		) Тогда
		
		Значение = ТекущаяСтрока.РегистрацияСведений;
		
	ИначеЕсли ПолеФормы = Элементы.СписокОтправленныеСведения
		Или ПолеФормы = Элементы.СостояниеОтправкиИндексКартинки
		Или ПолеФормы = Элементы.СостояниеОтправки
		Или ПолеФормы = Элементы.СписокОтправленныеСведенияНомер
		Или ПолеФормы = Элементы.СписокДатаОтправки Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОтправленныеСведения) Тогда
			Значение = ТекущаяСтрока.ОтправленныеСведения;
		Иначе
			Значение = ТекущаяСтрока.ПоследниеСведения;
		КонецЕсли;
		
	Иначе
		
		Значение = ТекущаяСтрока.ПоследниеСведения;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение(, Значение);
	Иначе
		СоздатьСведенияОЗастрахованномЛице(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиОрганизации(Команда)
	УчетПособийСоциальногоСтрахованияКлиент.ОткрытьНастройкиПрямыхВыплатОрганизации(
		Организация,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНасколькоФилиалов(Команда)
	Организации.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ВыбратьОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНесколькоПодразделений(Команда)
	Подразделения.Очистить();
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Подразделения.Добавить(Подразделение);
	КонецЕсли;
	ВыбратьПодразделения();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокФилиалов(Команда)
	Организации.Очистить();
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокПодразделений(Команда)
	Подразделения.Очистить();
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуОдногоФилиала(Команда)
	ИспользоватьСписокОрганизаций = Ложь;
	Если Организации.Количество() > 0 Тогда
		Организация = Организации[0].Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	ОрганизацияПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуОдногоПодразделения(Команда)
	ИспользоватьСписокПодразделений = Ложь;
	Если Подразделения.Количество() > 0 Тогда
		Подразделение = Подразделения[0].Значение;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	ПодразделениеПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСведенияОЗастрахованномЛице(Команда)
	ИменаКолонок = "СНИЛС, Страхователь, ГоловнаяОрганизация, ФизическоеЛицо, Организация, Сотрудник, ПоследниеСведения, ОтправленныеСведения, ДатаОтправки, ФИО";
	Обработчик = Новый ОписаниеОповещения("СоздатьСведенияОЗастрахованномЛицеПослеВыбораСтрок", ЭтотОбъект);
	ВыбратьЗаписи(Обработчик, ИменаКолонок, НСтр("ru = 'Создание сведений о застрахованных лицах';
												|en = 'Create insured person details'"));
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеСведения(Команда)
	Обработчик = Новый ОписаниеОповещения("ПометитьНаУдалениеСведенияПослеВыбораСведений", ЭтотОбъект);
	ВыбратьСведения(Обработчик, НСтр("ru = 'Пометка на удаление сведений о застрахованных лицах';
									|en = 'Mark insured person details for deletion'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСведенияКакПринятыеФондом(Команда)
	ИменаКолонок = "Страхователь, СНИЛС";
	Обработчик   = Новый ОписаниеОповещения("ОтметитьСведенияКакПринятыеФондомПослеВыбораСтрок", ЭтотОбъект);
	ВыбратьЗаписи(Обработчик, ИменаКолонок, НСтр("ru = 'Сведения уже отправлены в СЭДО СФР';
												|en = 'The information is already sent to Social Insurance Fund EDI'"));
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСведения(Команда)
	Контекст        = Новый Структура("Скрыть", Истина);
	Обработчик      = Новый ОписаниеОповещения("ИзменитьФлажокСкрытьПослеВыбораСтрок", ЭтотОбъект, Контекст);
	ИменаКолонок    = "Страхователь, СНИЛС";
	ЗаголовокВыбора = НСтр("ru = 'Не показывать (скрыть) в списке застрахованных лиц СЭДО';
							|en = 'Hide from the list of insured persons of EDI'");
	ВыбратьЗаписи(Обработчик, ИменаКолонок, ЗаголовокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСведения(Команда)
	Контекст        = Новый Структура("Скрыть", Ложь);
	Обработчик      = Новый ОписаниеОповещения("ИзменитьФлажокСкрытьПослеВыбораСтрок", ЭтотОбъект, Контекст);
	ИменаКолонок    = "Страхователь, СНИЛС";
	ЗаголовокВыбора = НСтр("ru = 'Показывать (отменить скрытие) в списке застрахованных лиц СЭДО';
							|en = 'Show in the list of insured persons of EDI'");
	ВыбратьЗаписи(Обработчик, ИменаКолонок, ЗаголовокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРегистра(Команда)
	ИменаКолонок = "Страхователь, СНИЛС, ГоловнаяОрганизация, ФизическоеЛицо";
	Обработчик   = Новый ОписаниеОповещения("ОбновитьДанныеРегистраПослеВыбораСтрок", ЭтотОбъект);
	ВыбратьЗаписи(Обработчик, ИменаКолонок, НСтр("ru = 'Обновление сведений о застрахованных лицах СЭДО';
												|en = 'Update information on insured persons of EDI'"));
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытыеСведения(Команда)
	ПоказатьСкрытыеСведенияНаСервере();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область РасширениеСобытийФормы

&НаСервере
Процедура ПослеЗагрузкиВсехНастроекФормыНаСервере()
	Если ЗначениеЗаполнено(Организация) И Организации.НайтиПоЗначению(Организация) = Неопределено Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ЗаполнитьФлажокЕстьФилиалы();
	ОбновитьФорму();
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МассивСсылок = Новый Массив;
	ПроиндексироватьВыделенныеСтроки("ПоследниеСведения", МассивСсылок);
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МассивСсылок = Новый Массив;
	ПроиндексироватьВыделенныеСтрокиНаСервере("ПоследниеСведения", МассивСсылок);
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ИнформационнаяПанельБРО

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	ПараметрыОтображения = ЭлектронныйДокументооборотСФСС.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = ВыбранныйСтрахователь();
	ПараметрыОтображения.Группа      = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма       = ЭтотОбъект;
	ПараметрыОтображения.ЭтоСЭДО     = Истина;
	ЭлектронныйДокументооборотСФСС.ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ЭлектронныйДокументооборотСФССКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Функция ВыбранныйСтрахователь()
	Если Не ПоказыватьОрганизации Тогда
		Если Организации.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Организации[0].Значение;
		КонецЕсли;
	КонецЕсли;
	Если Организации.Количество() = 0 Тогда
		Если ПоказыватьГоловныеОрганизации И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
			Возврат ГоловнаяОрганизация;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Страхователи = СЭДОФСС.СтрахователиОрганизаций(Организации.ВыгрузитьЗначения());
	Количество = Страхователи.Количество();
	Если Количество = 1 Тогда
		Возврат Страхователи[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПодключитьОбработчикОбновленияФормы(Ожидание = 0.2)
	ОтключитьОбработчикОжидания("ОбновитьФормуНаКлиенте");
	ПодключитьОбработчикОжидания("ОбновитьФормуНаКлиенте", Ожидание, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуНаКлиенте()
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораГоловныхОрганизаций()
	СписокВыбора = Элементы.ГоловнаяОрганизация.СписокВыбора;
	СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Значение,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = Организации.ГоловнаяОрганизация";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	ОбновитьЭлементыФормы();
	ОбновитьПараметрыСписка();
	ОбновитьНадписьСообщенияОжидаемыеОтФСС();
	ОбновитьИнформационнуюПанельБРО();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	ОбновитьЭлементыОрганизаций();
	ОбновитьЭлементыПодразделений();
	Элементы.Страхователь.Видимость = ПоказыватьОрганизации И Не ЗначениеЗаполнено(Организация);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСообщенияОжидаемыеОтФСС()
	КоличествоОжидаемыхСообщений = РегистрыСведений.ЗастрахованныеЛицаСЭДО.КоличествоОжидаемыхСообщений(
		ГоловнаяОрганизация,
		Организации.ВыгрузитьЗначения());
	Если КоличествоОжидаемыхСообщений = 0 Тогда
		Элементы.ГруппаСообщенияОжидаемыеОтФСС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСообщенияОжидаемыеОтФСС.Видимость = Истина;
		Если КоличествоОжидаемыхСообщений = 1 Тогда
			ЗаголовокКнопки = НСтр("ru = 'Проверить наличие ответа ФСС';
									|en = 'Check for SSF response'");
			Текст = НСтр("ru = 'Ожидается 1 сообщение ФСС о регистрации сведений о застрахованном лице';
						|en = 'Expecting 1 message from SSF about the insured person details registration'");
			Элементы.НадписьСообщенияОжидаемыеОтФСС.Заголовок = Текст;
		Иначе
			ЗаголовокКнопки = НСтр("ru = 'Проверить наличие ответов ФСС';
									|en = 'Check for SSF responses'");
			ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 сообщение;;%1 сообщения;%1 сообщений;';
					|en = ';%1 message;;%1 messages;%1 messages;'"), 
				КоличествоОжидаемыхСообщений);
			Элементы.НадписьСообщенияОжидаемыеОтФСС.Заголовок = СтрШаблон(
				НСтр("ru = 'Ожидается %1 ФСС о регистрации сведений о застрахованных лицах';
					|en = 'Expecting %1 from SSF about registration of insured persons details'"),
				ПредставлениеКоличества);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПолучитьНовыеСообщенияСЭДОФСС",
			"Заголовок",
			ЗаголовокКнопки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Список

&НаСервере
Процедура ОбновитьПараметрыСписка()
	Если Не ЗначениеЗаполнено(СостояниеСведений) Тогда
		СостояниеСотрудников = СостояниеСотрудниковДляВсехСведений;
	Иначе
		СостояниеСотрудников = СостояниеСотрудниковДляСведенийВРаботе;
	КонецЕсли;
	
	ОтборКД = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	Если ПоказыватьГоловныеОрганизации Тогда
		Если ИдентификаторОтбораГоловнаяОрганизация = Неопределено Тогда
			ЭлементОтбораКД = Неопределено;
		Иначе
			ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораГоловнаяОрганизация);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
			Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ГоловнаяОрганизация") <> 0 Тогда
			ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ГоловнаяОрганизация", "=", ГоловнаяОрганизация);
			ИдентификаторОтбораГоловнаяОрганизация = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
		КонецЕсли;
		ЭлементОтбораКД.Использование  = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементОтбораКД.ПравоеЗначение = ГоловнаяОрганизация;
		Элементы.СписокГоловнаяОрганизация.Видимость = Не ЭлементОтбораКД.Использование;
	КонецЕсли;
	
	Если ПоказыватьОрганизации Тогда
		Если ИдентификаторОтбораОрганизация = Неопределено Тогда
			ЭлементОтбораКД = Неопределено;
		Иначе
			ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораОрганизация);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
			Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Организация") <> 0 Тогда
			ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Организация", "=", Организация);
			ИдентификаторОтбораОрганизация = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
		КонецЕсли;
		Количество = ?(ЕстьФилиалы, Организации.Количество(), 0);
		Если Количество = 0 Тогда
			ЭлементОтбораКД.Использование  = Ложь;
			Элементы.СписокОрганизация.Видимость = Истина;
		ИначеЕсли Количество = 1 Тогда
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораКД.ПравоеЗначение = Организации[0].Значение;
			Элементы.СписокОрганизация.Видимость         = Ложь;
			Элементы.СписокГоловнаяОрганизация.Видимость = Ложь;
		Иначе
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораКД.ПравоеЗначение = Организации;
			Элементы.СписокОрганизация.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьПодразделения Тогда
		Если ИдентификаторОтбораПодразделение = Неопределено Тогда
			ЭлементОтбораКД = Неопределено;
		Иначе
			ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораПодразделение);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
			Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Подразделение") <> 0 Тогда
			ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Подразделение", "=", Подразделение);
			ИдентификаторОтбораПодразделение = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
		КонецЕсли;
		Количество = Подразделения.Количество();
		Если Количество = 0 Тогда
			ЭлементОтбораКД.Использование  = Ложь;
			Элементы.СписокПодразделение.Видимость = Истина;
		ИначеЕсли Количество = 1 Тогда
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораКД.ПравоеЗначение = Подразделения[0].Значение;
			Элементы.СписокПодразделение.Видимость       = Ложь;
			Элементы.СписокОрганизация.Видимость         = Ложь;
			Элементы.СписокГоловнаяОрганизация.Видимость = Ложь;
		Иначе
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораКД.ПравоеЗначение = Подразделения;
			Элементы.СписокПодразделение.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ИдентификаторОтбораНаОформлении = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораНаОформлении);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "НаОформлении") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "НаОформлении", "=", Истина);
		ИдентификаторОтбораНаОформлении = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСведений = "НаОформлении");
	
	Если ИдентификаторОтбораКОтправке = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораКОтправке);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "КОтправке") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "КОтправке", "=", Истина);
		ИдентификаторОтбораКОтправке = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСведений = "КОтправке");
	
	Если ИдентификаторОтбораВРаботе = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораВРаботе);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ВРаботе") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ВРаботе", "=", Истина);
		ИдентификаторОтбораВРаботе = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСведений = "ВРаботе");
	
	
	Если ИдентификаторОтбораРаботающие = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораРаботающие);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Работает") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Работает", "=", Истина);
		ИдентификаторОтбораРаботающие = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСотрудников = "Работающие");
	
	Если ИдентификаторОтбораУволенные = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораУволенные);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Уволен") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Уволен", "=", Истина);
		ИдентификаторОтбораУволенные = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСотрудников = "Уволенные");
	
	Если ИдентификаторОтбораНеЧислились = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораНеЧислились);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ЕстьКадровыеДанныеСотрудника") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ЕстьКадровыеДанныеСотрудника", "=", Ложь);
		ИдентификаторОтбораНеЧислились = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = (СостояниеСотрудников = "НеЧислились");
	
	
	Если ИдентификаторОтбораСкрыть = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораСкрыть);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Скрыть") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Скрыть", "=", Ложь);
		ИдентификаторОтбораСкрыть = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = Истина;
	ЭлементОтбораКД.ПравоеЗначение = Элементы.ПоказатьСкрытыеСведения.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметра(Имя, Значение)
	ПараметрКД = Новый ПараметрКомпоновкиДанных(Имя);
	Если Список.Параметры.ДоступныеПараметры.НайтиПараметр(ПараметрКД) <> Неопределено Тогда
		Список.Параметры.УстановитьЗначениеПараметра(Имя, Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроиндексироватьВыделенныеСтроки(КлючеваяКолонка, МассивКлючей, ИменаКолонокТаблицы = "", ДанныеСтрок = Неопределено)
	ЗаполнятьИменаКолонок = ЗначениеЗаполнено(ИменаКолонокТаблицы);
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		СтрокаСписка = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Ключ = ?(КлючеваяКолонка = "", ИдентификаторСтроки, СтрокаСписка[КлючеваяКолонка]);
		Если Не ЗначениеЗаполнено(Ключ) Или МассивКлючей.Найти(Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКлючей.Добавить(Ключ);
		Если ЗаполнятьИменаКолонок Тогда
			СтруктураСтроки = Новый Структура(ИменаКолонокТаблицы);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСписка);
			ДанныеСтрок.Вставить(Ключ, СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроиндексироватьВыделенныеСтрокиНаСервере(КлючеваяКолонка, ЗначенияКлючевойКолонки, ИменаКолонокТаблицы = "", ДанныеСтрок = Неопределено)
	ЗаполнятьИменаКолонок = ЗначениеЗаполнено(ИменаКолонокТаблицы);
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		СтрокаСписка = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		Ключ = ?(КлючеваяКолонка = "", ИдентификаторСтроки, СтрокаСписка[КлючеваяКолонка]);
		Если Не ЗначениеЗаполнено(Ключ) Или ЗначенияКлючевойКолонки.Найти(Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначенияКлючевойКолонки.Добавить(Ключ);
		Если ЗаполнятьИменаКолонок Тогда
			СтруктураСтроки = Новый Структура(ИменаКолонокТаблицы);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСписка);
			ДанныеСтрок.Вставить(Ключ, СтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаписи(ОбработчикРезультата, ИменаКолонокТаблицы, ЗаголовокФормыСФлажками)
	Если Не ЗначениеЗаполнено(Элементы.Список.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	СписокВыбора = Новый СписокЗначений;
	ДанныеСтрок = Новый Соответствие;
	Для Каждого Идентификатор Из Элементы.Список.ВыделенныеСтроки Цикл
		СтрокаСписка = Элементы.Список.ДанныеСтроки(Идентификатор);
		Если СтрокаСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Идентификатор) Или ДанныеСтрок[Идентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаСписка.Сотрудник) Тогда
			Представление = СтрокаСписка.Сотрудник;
		Иначе
			Представление = СтрокаСписка.ФИО + ", " + СтрокаСписка.СНИЛС;
		КонецЕсли;
		ЭлементСписка = СписокВыбора.Добавить(Идентификатор, Представление, Истина);
		СтруктураСтроки = Новый Структура(ИменаКолонокТаблицы);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСписка);
		ДанныеСтрок.Вставить(Идентификатор, СтруктураСтроки);
	КонецЦикла;
	
	Количество = СписокВыбора.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура("СписокВыбора, ДанныеСтрок, ВыбранныеДанные", СписокВыбора, ДанныеСтрок, Новый Массив);
	Если Количество = 1 Тогда
		Для Каждого КлючИЗначение Из ДанныеСтрок Цикл
			Контекст.ВыбранныеДанные.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Контекст);
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СписокВыбора[0].Значение));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отмеченные", СписокВыбора);
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокВыбора);
		ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("Представление", ЗаголовокФормыСФлажками);
		ПараметрыФормы.Вставить("ОписаниеТипов", ОписаниеТипов);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораЗаписей", ЭтотОбъект, Контекст);
		
		ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗаписей(СписокСсылок, Контекст) Экспорт
	Если ТипЗнч(СписокСсылок) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если ЭлементСписка.Пометка Тогда
			Контекст.ВыбранныеДанные.Добавить(Контекст.ДанныеСтрок[ЭлементСписка.Значение]);
		КонецЕсли;
	КонецЦикла;
	// Обработчики см. в низлежащих процедурах.
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст);
КонецПроцедуры

#КонецОбласти

#Область Даты

&НаКлиенте
Процедура УстановитьТекущуюДатуНаКлиенте()
	УстановитьТекущуюДату();
	ПодключитьОбработчикОжидания("УстановитьТекущуюДатуНаКлиенте", КонецДня(ТекущаяДата) - ТекущаяДата + 60);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюДату()
	ТекущаяДата = ТекущаяДатаСеанса();
	УстановитьЗначениеПараметра("ТекущаяДатаСеанса", НачалоДня(ТекущаяДата));
	УстановитьЗначениеПараметра("МаксимальнаяДатаУвольнения", НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -2)));
КонецПроцедуры

#КонецОбласти

#Область Организации

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	Организация = Неопределено;
	Организации.Очистить();
	ЗаполнитьФлажокЕстьФилиалы();
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажокЕстьФилиалы()
	Если Не ПоказыватьОрганизации Тогда
		Возврат;
	КонецЕсли;
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ЕстьФилиалы = ЗарплатаКадрыПовтИсп.УОрганизацииЕстьФилиалы(ГоловнаяОрганизация);
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизация"));
	Иначе
		ЕстьФилиалы = ПоказыватьГоловныеОрганизации;
	КонецЕсли;
	Элементы.Организация.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОрганизации()
	ПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ГоловнаяОрганизация", ГоловнаяОрганизация));
	КонецЕсли;
	Для Каждого ЭлементСписка Из Организации Цикл
		Если СписокОрганизацийДляВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СписокОрганизацийДляВыбора.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", Организации);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокОрганизацийДляВыбора);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ПараметрыФормы.Вставить("БыстрыйВыбор", Ложь);
	ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Организации';
													|en = 'Companies'"));
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОписаниеТипов", Организации.ТипЗначения);
	
	Если СписокОрганизацийДляВыбора.Количество() = 0 Тогда
		ПараметрыФормы.БыстрыйВыбор = Истина;
		ПараметрыФормы.ЗначенияДляВыбораЗаполнены = Ложь;
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораОрганизаций", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизаций(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	СписокОрганизацийДляВыбора = РезультатВыбора;
	ИспользоватьСписокОрганизаций = Истина;
	Организации.Очистить();
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		Если ЭлементСписка.Пометка Тогда
			ЗаполнитьЗначенияСвойств(Организации.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОрганизаций()
	Если Не ПоказыватьОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьФилиалы Тогда
		ИспользоватьСписокОрганизаций = Ложь;
	КонецЕсли;
	
	Если ИспользоватьСписокОрганизаций Тогда
		ПредставлениеСписка = СЭДОФСС.ПредставлениеСписка(Организации, 100);
		Если ПустаяСтрока(ПредставлениеСписка) Тогда
			ПредставлениеСписка = НСтр("ru = '<Все>';
										|en = '<All>'");
			Элементы.ОчиститьСписокФилиалов.Видимость = Ложь;
		Иначе
			Элементы.ОчиститьСписокФилиалов.Видимость = Истина;
		КонецЕсли;
	Иначе
		ПредставлениеСписка = "";
	КонецЕсли;
	Элементы.ФилиалыПредставление.Заголовок = ПредставлениеСписка;
	
	Элементы.ОтборОрганизацияГруппа.Видимость = ЕстьФилиалы И Не ИспользоватьСписокОрганизаций;
	Элементы.ОтборОрганизацииГруппа.Видимость = ЕстьФилиалы И ИспользоватьСписокОрганизаций;
КонецПроцедуры

#КонецОбласти

#Область Подразделения

&НаКлиенте
Процедура ВыбратьПодразделения()
	ПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ГоловнаяОрганизация", ГоловнаяОрганизация));
	КонецЕсли;
	Если Организации.Количество() > 0 Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Организации));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", Подразделения);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", Новый СписокЗначений);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Ложь);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ПараметрыФормы.Вставить("БыстрыйВыбор", Истина);
	ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Подразделения';
													|en = 'Business units'"));
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОписаниеТипов", Подразделения.ТипЗначения);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораПодразделений", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПодразделений(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	ИспользоватьСписокПодразделений = Истина;
	Подразделения.Очистить();
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		Если ЭлементСписка.Пометка Тогда
			ЗаполнитьЗначенияСвойств(Подразделения.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПодразделений()
	Если Не ПоказыватьПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизация"));
	КонецЕсли;
	Если Организации.Количество() > 0 Тогда
		Если ИспользоватьСписокОрганизаций Тогда
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "ОтборПоОрганизациям"));
		Иначе
			СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		КонецЕсли;
	КонецЕсли;
	Элементы.Подразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	Если ИспользоватьСписокПодразделений Тогда
		Элементы.ОтборПодразделениеГруппа.Видимость  = Ложь;
		Элементы.ОтборПодразделенияГруппа.Видимость = Истина;
		ПредставлениеСписка = СЭДОФСС.ПредставлениеСписка(Подразделения, 100);
		Если ПустаяСтрока(ПредставлениеСписка) Тогда
			ПредставлениеСписка = НСтр("ru = '<Все>';
										|en = '<All>'");
			Элементы.ОчиститьСписокПодразделений.Видимость = Ложь;
		Иначе
			Элементы.ОчиститьСписокПодразделений.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.ОтборПодразделениеГруппа.Видимость  = Истина;
		Элементы.ОтборПодразделенияГруппа.Видимость = Ложь;
		ПредставлениеСписка = "";
	КонецЕсли;
	Элементы.ПодразделенияПредставление.Заголовок = ПредставлениеСписка;
КонецПроцедуры

#КонецОбласти

#Область КнопкиСписка

&НаКлиенте
Процедура СоздатьСведенияОЗастрахованномЛицеПослеВыбораСтрок(РезультатВыбора, ПустойПараметр) Экспорт
	Количество = РезультатВыбора.ВыбранныеДанные.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		СтрокаТаблицы = РезультатВыбора.ВыбранныеДанные[0];
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтрокаТаблицы);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПоследниеСведения)
			И СтрокаТаблицы.ПоследниеСведения <> СтрокаТаблицы.ОтправленныеСведения Тогда
			Сведения = СтрокаТаблицы.ПоследниеСведения; // Сведения уже созданы и еще не отправлены.
			ПараметрыФормы.Вставить("Ключ", Сведения);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыФормы);
			ПоказатьВопрос(Оповещение,
				СтрШаблон(НСтр("ru = 'У сотрудника уже есть документ %1, сформировать новые сведения?';
								|en = 'У сотрудника уже есть документ %1, сформировать новые сведения?'"), Сведения),
				РежимДиалогаВопрос.ДаНет,,,
				НСтр("ru = 'Сформировать новые документы';
					|en = 'Сформировать новые документы'"));
			Возврат;
		Иначе
			Сведения = Неопределено; // Требуется создать новые сведения.
		КонецЕсли;
		ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.ФормаОбъекта", ПараметрыФормы);
	Иначе
		МассивСведений = Новый Массив;
		МассивДляСоздания = Новый Массив;
		Для Каждого СтрокаТаблицы Из РезультатВыбора.ВыбранныеДанные Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПоследниеСведения)
				И СтрокаТаблицы.ПоследниеСведения <> СтрокаТаблицы.ОтправленныеСведения Тогда
				МассивСведений.Добавить(СтрокаТаблицы); // Сведения уже созданы и еще не отправлены.
			Иначе
				МассивДляСоздания.Добавить(СтрокаТаблицы); // Требуется создать новые сведения.
			КонецЕсли;
		КонецЦикла;
		Если МассивСведений.Количество() > 0 Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("МассивСведений", МассивСведений);
			СтруктураПараметров.Вставить("МассивДляСоздания", МассивДляСоздания);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоДокументам", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(Оповещение,
				НСтр("ru = 'Выбраны сотрудники у которых уже есть созданные документы, сформировать для них новые сведения?';
					|en = 'Выбраны сотрудники у которых уже есть созданные документы, сформировать для них новые сведения?'"),
				РежимДиалогаВопрос.ДаНетОтмена,,,
				НСтр("ru = 'Сформировать новые документы';
					|en = 'Сформировать новые документы'"));
		Иначе
			СоздатьДокументыСведенияОЗастрахованномЛице(МассивДляСоздания, МассивСведений);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ПараметрыФормы) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы.Ключ = Неопределено;
	КонецЕсли;
	ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоДокументам(Результат, СтруктураПараметров) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураПараметров.МассивДляСоздания, СтруктураПараметров.МассивСведений, Истина);
	Иначе
		Для Каждого СтрокаДанных Из СтруктураПараметров.МассивСведений Цикл
			МассивСсылок.Добавить(СтрокаДанных.ПоследниеСведения);
		КонецЦикла;
	КонецЕсли;
	СоздатьДокументыСведенияОЗастрахованномЛице(СтруктураПараметров.МассивДляСоздания, МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыСведенияОЗастрахованномЛице(МассивДляСоздания, МассивСведений)
	Если МассивДляСоздания.Количество() > 0 Тогда
		МассивДокументов = СоздатьДокументыСведений(МассивДляСоздания);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСведений, МассивДокументов, Истина);
		ОповеститьОбИзменении(Тип("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
		Оповестить("Запись_СведенияОЗастрахованномЛицеФСС");
		СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	КонецЕсли;
	Отбор = Новый Структура("Ссылка", МассивСведений);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.ФормаСписка", ПараметрыФормы, , Истина, , , , Блокировать);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДокументыСведений(Знач МассивДляСоздания)
	Возврат Документы.СведенияОЗастрахованномЛицеФСС.СоздатьДокументыПоДаннымДляЗаполнения(МассивДляСоздания);
КонецФункции

&НаСервере
Процедура ПоказатьСкрытыеСведенияНаСервере()
	Элементы.ПоказатьСкрытыеСведения.Пометка = Не Элементы.ПоказатьСкрытыеСведения.Пометка;
	Если Элементы.ПоказатьСкрытыеСведения.Пометка Тогда
		Элементы.ПоказатьСкрытыеСведения.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
		Элементы.ПоказыватьСведения.Видимость = Истина;
		Элементы.СкрытьСведения.Видимость = Ложь;
	Иначе
		Элементы.ПоказатьСкрытыеСведения.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
		Элементы.ПоказыватьСведения.Видимость = Ложь;
		Элементы.СкрытьСведения.Видимость = Истина;
	КонецЕсли;
	ОбновитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСведения(ОбработчикРезультата, ЗаголовокФормыСФлажками, ИменаКолонокТаблицы = "")
	Если Не ЗначениеЗаполнено(Элементы.Список.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	ДанныеСтрок = Новый Соответствие;
	ПроиндексироватьВыделенныеСтроки("ПоследниеСведения", МассивСсылок, ИменаКолонокТаблицы, ДанныеСтрок);
	
	Количество = МассивСсылок.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура("МассивСсылок, ДанныеСтрок", МассивСсылок, ДанныеСтрок);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивСсылок);
	СписокЗначений.ЗаполнитьПометки(Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", СписокЗначений);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокЗначений);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыФормы.Вставить("Представление", ЗаголовокФормыСФлажками);
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораСведений", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСведений(СписокСсылок, Контекст) Экспорт
	Если ТипЗнч(СписокСсылок) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если ЭлементСписка.Пометка И МассивСсылок.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			МассивСсылок.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	Контекст.МассивСсылок = МассивСсылок;
	// Обработчики см. в низлежащих процедурах.
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеСведенияПослеВыбораСведений(РезультатВыбора, ПустойПараметр) Экспорт
	ОчиститьСообщения();
	ПометитьНаУдалениеНаСервере(РезультатВыбора.МассивСсылок);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
	Оповестить("Запись_СведенияОЗастрахованномЛицеФСС");
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(МассивСсылок)
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если Документы.СведенияОЗастрахованномЛицеФСС.ОбъектЗафиксирован(ДокументОбъект) Тогда
			Текст = СтрШаблон(НСтр("ru = '%1 не может быть помечен на удаление, поскольку отправлен в ФСС.';
									|en = 'Cannot mark %1 for deletion as it is sent to SSF.'"), Ссылка);
			СообщенияБЗК.СообщитьОПроблеме(Текст, ДокументОбъект, "ДатаОтправки");
			Продолжить;
		КонецЕсли;
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСведенияКакПринятыеФондомПослеВыбораСтрок(РезультатВыбора, ПустойПараметр) Экспорт
	Если РезультатВыбора.ВыбранныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОтметитьСведенияКакПринятыеФондомНаСервере(РезультатВыбора.ВыбранныеДанные);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
	Оповестить("Запись_СведенияОЗастрахованномЛицеФСС");
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьСведенияКакПринятыеФондомНаСервере(МассивСтрок)
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		РегистрыСведений.ЗастрахованныеЛицаСЭДО.ОтметитьСведенияКакПринятыеФондом(
			СтрокаТаблицы.Страхователь,
			СтрокаТаблицы.СНИЛС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажокСкрытьПослеВыбораСтрок(РезультатВыбора, Контекст) Экспорт
	Если РезультатВыбора.ВыбранныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИзменитьФлажокСкрытьНаСервереБезКонтекста(РезультатВыбора.ВыбранныеДанные, Контекст.Скрыть);
	ОповеститьОбИзменении(Тип("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
	Оповестить("Запись_СведенияОЗастрахованномЛицеФСС");
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьФлажокСкрытьНаСервереБезКонтекста(МассивСтрок, Скрыть)
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		РегистрыСведений.ЗастрахованныеЛицаСЭДО.ИзменитьФлажокСкрыть(
			СтрокаТаблицы.Страхователь,
			СтрокаТаблицы.СНИЛС,
			Скрыть);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбновитьДанныеРегистра

&НаКлиенте
Процедура ОбновитьДанныеРегистраПослеВыбораСтрок(РезультатВыбора, ПустойПараметр) Экспорт
	ОбновитьДанныеРегистраНаСервере(РезультатВыбора.ВыбранныеДанные);
	ОжидатьЗавершенияОбновленияДанныхРегистра();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРегистраНаСервере(ВыбранныеДанные)
	
	Если ДлительнаяОперация <> Неопределено И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ИмяМетода = "РегистрыСведений.ЗастрахованныеЛицаСЭДО.ФоновыйОбработчикКнопкиОбновитьДанныеРегистра";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ВыбранныеДанные", ВыбранныеДанные);
	
	ПредставлениеОперации = НСтр("ru = 'Обновление сведений о застрахованных лицах (%1) по кнопке';
								|en = 'Click to update information on insured persons (%1)'");
	ПредставлениеОперации = СтрШаблон(ПредставлениеОперации, Формат(ВыбранныеДанные.Количество(), "ЧГ="));
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыЗапуска.ОжидатьЗавершение           = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = ПредставлениеОперации;
	ПараметрыЗапуска.ЗапуститьВФоне              = (ВыбранныеДанные.Количество() > 1);
	ПараметрыЗапуска.ЗапуститьНеВФоне            = Не ПараметрыЗапуска.ЗапуститьВФоне;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыЗапуска);
	
	Элементы.КартинкаДанныеРегистраОбновляются.Видимость = (ДлительнаяОперация <> Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияОбновленияДанныхРегистра()
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияОбновленияДанныхРегистраКлиент", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияОбновленияДанныхРегистраКлиент(Задание, ДополнительныеПараметры) Экспорт
	// Задание - Неопределено - Если задание было отменено;
	//         - Структура - Результат выполнения фонового задания:
	//   * Статус - Строка - "Выполнено", если задание завершено успешно; "Ошибка", если возникло исключение.
	//   * АдресРезультата - Строка - адрес временного хранилища, в которое помещен результат работы процедуры.
	//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат,
	//       содержит адрес дополнительного временного хранилища, в которое помещен результат работы процедуры.
	//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
	//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
	//   * Сообщения - Неопределено, ФиксированныйМассив из СообщениеПользователю
	ДлительнаяОперация = Неопределено;
	Элементы.КартинкаДанныеРегистраОбновляются.Видимость = Ложь;
	Оповестить("Запись_ЗастрахованныеЛицаФСС", Неопределено, ЭтотОбъект);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	Если Задание <> Неопределено И ЗначениеЗаполнено(Задание.КраткоеПредставлениеОшибки) Тогда
		ИнформированиеПользователяКлиент.Предупредить(Задание.КраткоеПредставлениеОшибки, Задание.ПодробноеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
