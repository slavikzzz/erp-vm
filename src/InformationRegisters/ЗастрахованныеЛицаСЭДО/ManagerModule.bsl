#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", Метаданные.Документы.СведенияОЗастрахованномЛицеФСС) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ЕстьДелаПоОтправке = (Требования.КоличествоКОтправке > 0) И СЭДОФСС.ЕстьПравоОтправки();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗастрахованныеЛицаСЭДО_ВРаботе_" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.КоличествоВРаботе > 0);
		Дело.Важное         = (Требования.КоличествоСегодня > 0);
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Передать в СФР сведения о сотрудниках через СЭДО';
									|en = 'Send employee information to the Social Insurance Fund via EDI'");
		Дело.Количество     = Требования.КоличествоВРаботе;
		Дело.Подсказка      = НСтр("ru = 'Сведениях о застрахованных лицах необходимо передать в СФР в течении 3 рабочих дней (как при трудоустройстве, так и при изменении).';
									|en = 'Send information on insured persons to the Social Insurance Fund within three workdays (both upon employment and upon changes).'");
		Дело.ПараметрыФормы = Новый Структура("СостояниеСведений", "ВРаботе");
		Дело.Форма          = "РегистрСведений.ЗастрахованныеЛицаСЭДО.ФормаСписка";
		
		ИдентификаторРодителя = Дело.Идентификатор;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗастрахованныеЛицаСЭДО_НаОформлении_" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.КоличествоНаОформлении > 0);
		Дело.Важное         = (Требования.КоличествоНаОформленииСегодня > 0);
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'На оформлении';
									|en = 'Registering'");
		Дело.Количество     = Требования.КоличествоНаОформлении;
		Дело.Подсказка      = НСтр("ru = 'Подготовить и отправить сведения о застрахованных лицах в СФР через СЭДО.';
									|en = 'Prepare and send information on insured persons to the Social Insurance Fund via EDI.'");
		Дело.ПараметрыФормы = Новый Структура("СостояниеСведений", "НаОформлении");
		Дело.Форма          = "РегистрСведений.ЗастрахованныеЛицаСЭДО.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗастрахованныеЛицаСЭДО_КОтправке_" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = ЕстьДелаПоОтправке;
		Дело.Важное         = (Требования.КоличествоКОтправкеСегодня > 0);
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'К отправке';
									|en = 'Scheduled'");
		Дело.Количество     = Требования.КоличествоКОтправке;
		Дело.Подсказка      = НСтр("ru = 'Отправить в СФР сведения о застрахованных лицах через СЭДО.';
									|en = 'Send information on insured persons to the Social Insurance Fund via EDI.'");
		Дело.ПараметрыФормы = Новый Структура("СостояниеСведений", "КОтправке");
		Дело.Форма          = "РегистрСведений.ЗастрахованныеЛицаСЭДО.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//   СНИЛС+Страхователь идентифицирует запись в учете Фонда.
//
// Параметры:
//   Страхователь - ОпределяемыйТип.Организация             - Значение отбора по соответствующему измерению.
//   СНИЛС        - Строка, СправочникСсылка.ФизическиеЛица - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.ЗастрахованныеЛицаСЭДО - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(Страхователь, СНИЛС) Экспорт
	Если Не ЗначениеЗаполнено(Страхователь) Или Не ЗначениеЗаполнено(СНИЛС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗастрахованныеЛицаСЭДО");
		ЭлементБлокировки.УстановитьЗначение("СНИЛС", СНИЛС);
		ЭлементБлокировки.УстановитьЗначение("Страхователь", Страхователь);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СНИЛС.Установить(СНИЛС);
		НаборЗаписей.Отбор.Страхователь.Установить(Страхователь);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения для ФСС о сотруднике (СНИЛС: %1, Страхователь: %2) по причине: %3';
				|en = 'Cannot change the employee information for SSF (SNILS: %1, Insurant: %2) due to: %3'"),
			СНИЛС,
			Страхователь,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО,
			Страхователь,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ЗастрахованныеЛицаСЭДО
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ЗастрахованныеЛицаСЭДО
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Возвращает строку - имена требуемых реквизитов документа "Сведения о застрахованном лице ФСС".
Функция ТребуемыеРеквизитыСведений() Экспорт
	Возврат "Проведен, РегистрацияСведений, ДатаОтправки, НеЧислилсяВОрганизации";
КонецФункции

// Получает первую запись набора. В случае отсутствия - добавляет запись и заполняет значения измерений из отборов.
//
// Параметры:
//   Набор - РегистрСведенийНаборЗаписей.ЗастрахованныеЛицаСЭДО - См. НачатьЗаписьНабора.
//
// Возвращаемое значение:
//   РегистрСведенийЗапись.ЗастрахованныеЛицаСЭДО
//
Функция ЕдинственнаяЗаписьНабора(Набор, ФизическоеЛицо) Экспорт
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.ФизическоеЛицо = ФизическоеЛицо;
		Для Каждого ЭлементОтбора Из Набор.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				Запись[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Возврат Запись;
КонецФункции

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.6";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f7da94e0-813b-11ed-8110-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.ЗастрахованныеЛицаСЭДО.АдаптироватьКУчетуСтрахователей";
	Обработчик.Комментарий     = НСтр("ru = 'Адаптация сведений о застрахованных лицах ФСС к ведению учета в разрезе страхователей.';
										|en = 'Customize information on SSF insured persons for accounting by insurants.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("af44c192-82b0-11ed-8110-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.ЗастрахованныеЛицаСЭДО.ДобавитьПринятыхДо2022ГодаНеТребующихОтправки";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация застрахованных лиц ФСС принятых на работу до начала 2022 года.';
										|en = 'Register SSF insured persons hired before 2022.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.28.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("153f49d1-6393-11ee-8118-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.ЗастрахованныеЛицаСЭДО.ДобавитьПринятыхС2022ГодаТребующихОтправки";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация застрахованных лиц ФСС принятых на работу с 2022 года.';
										|en = 'Register SSF insured persons hired since 2022.'");
	
КонецПроцедуры

// Добавляет в регистр сведения о сотрудниках принятых до 01.01.2022, по которым нет сведений в регистре
//   (значит кадровые данные не менялись, а сведения не были отправлены
//   и не требуют отправки, т.к. закон обратной силы не имеет).
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьПринятыхДо2022ГодаНеТребующихОтправки(ПараметрыОбновления = Неопределено) Экспорт
	КлючОбъекта     = "ЗастрахованныеЛицаСЭДО";
	КлючНастроек    = "СпособДобавленияПринятыхДо2022ГодаНеТребующихОтправки";
	ИмяПользователя = "";
	ПредыдущийСпособ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, , , ИмяПользователя);
	Если Не ЗначениеЗаполнено(ПредыдущийСпособ) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, 1, , ИмяПользователя);
		ДобавитьПринятыхДо2022ГодаНеТребующихОтправкиПоФизическимЛицам(Неопределено);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ИспользованныеФизлица
		|ИЗ
		|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдалитьСведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОЗастрахованныхЛицахФСС КАК УдалитьСведенияОЗастрахованныхЛицахФСС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованныеФизлица КАК ИспользованныеФизлица
		|		ПО ИспользованныеФизлица.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	ИспользованныеФизлица.ФизическоеЛицо ЕСТЬ NULL";
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, 2, , ИмяПользователя);
		ВыборкаФизлиц = Запрос.Выполнить().Выбрать();
		Пока ВыборкаФизлиц.Следующий() Цикл
			ДобавитьПринятыхДо2022ГодаНеТребующихОтправкиПоФизическимЛицам(ВыборкаФизлиц.Ссылка);
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьПринятыхДо2022ГодаНеТребующихОтправкиПоФизическимЛицам(ФизическиеЛица)
	Запрос = ЗапросКадровыхДанныхПоСтрахователям(Неопределено, Неопределено, ФизическиеЛица, Истина, ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗаписьПрисутствуетВРегистре Или Выборка.УволенДоНачалаПроактива Тогда
			Продолжить;
		КонецЕсли;
		Набор = НачатьЗаписьНабора(Выборка.Страхователь, Выборка.СНИЛС);
		Если Набор = Неопределено Тогда
			Продолжить;
		ИначеЕсли Набор.Количество() > 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = ЕдинственнаяЗаписьНабора(Набор, Выборка.ФизическоеЛицо);
		Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

// Адаптация к ведению учета в разрезе страхователей.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура АдаптироватьКУчетуСтрахователей(ПараметрыОбновления = Неопределено) Экспорт
	Страхователи = СЭДОФСС.ВсеСтрахователи();
	Страхователи.Индексы.Добавить("Организация");
	
	// 1. Заполнение поля Страхователь в документах регистрации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистрация.Ссылка КАК Ссылка,
	|	ДокСведения.Организация КАК ДокСведенияОрганизация,
	|	ЕСТЬNULL(Входящие.Организация, ЕСТЬNULL(ЖурналЗапросов.Организация, НЕОПРЕДЕЛЕНО)) КАК Страхователь
	|ИЗ
	|	Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК Регистрация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК Входящие
	|		ПО Регистрация.РегистрацияИдентификатор = Входящие.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованномЛицеФСС КАК ДокСведения
	|		ПО Регистрация.ДокументОснование = ДокСведения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросов
	|		ПО Регистрация.ДоставкаИдентификатор = ЖурналЗапросов.Идентификатор
	|ГДЕ
	|	Регистрация.Страхователь = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РегистрацияОбъект.Страхователь = Выборка.Страхователь;
		Если Не ЗначениеЗаполнено(РегистрацияОбъект.Страхователь) И ЗначениеЗаполнено(Выборка.ДокСведенияОрганизация) Тогда
			СведенияОбОрганизации = ВсеСтрахователиСведенияОбОрганизации(Страхователи, Выборка.ДокСведенияОрганизация);
			РегистрацияОбъект.Страхователь        = СведенияОбОрганизации.Страхователь;
			РегистрацияОбъект.ГоловнаяОрганизация = СведенияОбОрганизации.ГоловнаяОрганизация;
		Иначе
			СведенияОСтрахователе = ВсеСтрахователиСведенияОбОрганизации(Страхователи, РегистрацияОбъект.Страхователь);
			РегистрацияОбъект.ГоловнаяОрганизация = СведенияОСтрахователе.ГоловнаяОрганизация;
		КонецЕсли;
		СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект);
	КонецЦикла;
	
	ТаблицаОбновленияСведений = ПустаяТаблицаОбновления();
	ТаблицаОбновленияСведений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));

	// 2. Заполнение поля Страхователь в документах сведений.
	РеквизитыСведений = Новый Структура(ТребуемыеРеквизитыСведений());
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сведения.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Регистрация.Страхователь, НЕОПРЕДЕЛЕНО) КАК РегистрацияСтрахователь,
	|	ЕСТЬNULL(Регистрация.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО) КАК РегистрацияГоловнаяОрганизация,
	|	ЕСТЬNULL(Регистрация.Зарегистрирован, ЛОЖЬ) КАК РегистрацияЗарегистрирован,
	|	ЕСТЬNULL(Регистрация.Состояние, НЕОПРЕДЕЛЕНО) КАК РегистрацияСостояние
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК Регистрация
	|		ПО Сведения.РегистрацияСведений = Регистрация.Ссылка
	|ГДЕ
	|	Сведения.Страхователь = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗначенияДо = Новый Структура("Страхователь, СНИЛС, ГоловнаяОрганизация, Организация, Сотрудник, ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(ЗначенияДо, СведенияОбъект);
		СведенияОбОрганизации = ВсеСтрахователиСведенияОбОрганизации(Страхователи, СведенияОбъект.Организация);
		СтрокаОбновления = ТаблицаОбновленияСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбновления, СведенияОбъект);
		ЗаполнитьЗначенияСвойств(СтрокаОбновления, СведенияОбОрганизации, "Страхователь, ГоловнаяОрганизация");
		Если ЗначениеЗаполнено(Выборка.РегистрацияСтрахователь) Тогда
			СведенияОбъект.Страхователь        = Выборка.РегистрацияСтрахователь;
			СведенияОбъект.ГоловнаяОрганизация = Выборка.РегистрацияГоловнаяОрганизация;
		Иначе
			СведенияОбъект.Страхователь        = СведенияОбОрганизации.Страхователь;
			СведенияОбъект.ГоловнаяОрганизация = СведенияОбОрганизации.ГоловнаяОрганизация;
		КонецЕсли;
		Если СведенияОбъект.Страхователь = ЗначенияДо.Страхователь
			И СведенияОбъект.ГоловнаяОрганизация = ЗначенияДо.ГоловнаяОрганизация Тогда
			Продолжить; // Ничего не изменилось.
		КонецЕсли;
		Если СведенияОбъект.ОбъектЗафиксирован() Тогда
			// Определение сотрудника и организации.
			СведенияОбъект.Организация = СведенияОбъект.Страхователь;
			СведенияОбъект.Сотрудник   = Справочники.Сотрудники.ПустаяСсылка();
			ДатаСреза = ?(ЗначениеЗаполнено(СведенияОбъект.ДатаОтправки), СведенияОбъект.ДатаОтправки, ТекущаяДатаСеанса());
			ЗапросКДС = ЗапросКадровыхДанныхПоСтрахователям(Неопределено, СведенияОбъект.Страхователь, СведенияОбъект.ФизическоеЛицо, Ложь, ДатаСреза);
			ТаблицаКДС = ЗапросКДС.Выполнить().Выгрузить();
			Если ТаблицаКДС.Количество() > 0 Тогда
				КадровыеДанные = ТаблицаКДС[0];
				Если КадровыеДанные.Страхователь = СведенияОбъект.Страхователь Тогда
					СведенияОбъект.Организация = КадровыеДанные.Организация;
					СведенияОбъект.Сотрудник   = КадровыеДанные.Сотрудник;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СведенияОбъект.ОбновитьВторичныеДанные();
		КонецЕсли;
		СЭДОФСС.ЗаписатьДокумент(СведенияОбъект);
		// Регистрация набора измерений для обновления регистра.
		ЗаполнитьЗначенияСвойств(ТаблицаОбновленияСведений.Добавить(), СведенияОбъект);
	КонецЦикла;
	
	// 3. Обновление данных регистра ЗастрахованныеЛицаСЭДО.
	ОбновитьПоТаблице(ТаблицаОбновленияСведений.Скопировать(), Ложь);
	
	// 4. Перенос полей Скрыть, ДатаСкрытия из регистра УдалитьСведенияОЗастрахованныхЛицахФСС в регистр ЗастрахованныеЛицаСЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗастрахованныеЛицаСЭДО.СНИЛС КАК СНИЛС,
	|	ЗастрахованныеЛицаСЭДО.Страхователь КАК Страхователь,
	|	УдалитьСведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьСведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	УдалитьСведенияОЗастрахованныхЛицахФСС.Скрыть КАК Скрыть,
	|	УдалитьСведенияОЗастрахованныхЛицахФСС.ДатаСкрытия КАК ДатаСкрытия
	|ИЗ
	|	РегистрСведений.УдалитьСведенияОЗастрахованныхЛицахФСС КАК УдалитьСведенияОЗастрахованныхЛицахФСС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
	|		ПО УдалитьСведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо = ЗастрахованныеЛицаСЭДО.ФизическоеЛицо
	|			И УдалитьСведенияОЗастрахованныхЛицахФСС.Скрыть > ЗастрахованныеЛицаСЭДО.Скрыть
	|			И УдалитьСведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация = ЗастрахованныеЛицаСЭДО.ГоловнаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	ФизическоеЛицо,
	|	СНИЛС,
	|	Страхователь";
	Выборка = Запрос.Выполнить().Выбрать();
	// На верхнем уровне обход по ГоловнаяОрганизация, ФизическоеЛицо - для целостного удаления старых записей.
	Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			// Перенос значений ресурсов Скрыть и ДатаСкрытия.
			Пока Выборка.Следующий() Цикл
				Набор = НачатьЗаписьНабора(Выборка.Страхователь, Выборка.СНИЛС);
				Если Набор = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЕстьИзменения = Ложь;
				Для Каждого Запись Из Набор Цикл
					Если Не Запись.Скрыть И Выборка.Скрыть Тогда
						ЕстьИзменения = Истина;
						Запись.Скрыть      = Выборка.Скрыть;
						Запись.ДатаСкрытия = Выборка.ДатаСкрытия;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьИзменения Тогда
					ЗавершитьЗаписьНабора(Набор);
				Иначе
					ОтменитьЗаписьНабора(Набор);
				КонецЕсли;
			КонецЦикла;
			// Удаление старых записей.
			НаборКУдалению = РегистрыСведений.УдалитьСведенияОЗастрахованныхЛицахФСС.НачатьЗаписьНабора(
				Выборка.ГоловнаяОрганизация,
				Выборка.ФизическоеЛицо);
			Если НаборКУдалению <> Неопределено Тогда
				Если НаборКУдалению.Количество() > 0 Тогда
					НаборКУдалению.Очистить();
					ЗавершитьЗаписьНабора(НаборКУдалению);
				Иначе
					ОтменитьЗаписьНабора(НаборКУдалению);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// 5. Обновление состояния записи в регистре.
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ОбновитьПоТаблице(ТаблицаОбновленияСведений, Ложь);
	
КонецПроцедуры

// Добавляет в регистр сведения о сотрудниках принятых с 01.01.2022, по которым нет сведений в регистре.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьПринятыхС2022ГодаТребующихОтправки(ПараметрыОбновления = Неопределено) Экспорт
	// Получение списка отсутствующих в регистре физлиц в разрезе страхователей.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
	|	ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) КАК Страхователь
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
	|		ПО ФизическиеЛица.Ссылка = ЗастрахованныеЛицаСЭДО.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
	|		ПО ФизическиеЛица.Ссылка = КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо
	|			И (КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ДатаНачалаПроактива)
	|			И (КадроваяИсторияСотрудниковИнтервальный.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизаций
	|		ПО (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизации
	|		ПО (КадроваяИсторияСотрудниковИнтервальный.Организация = ОтчитывающиесяПоВзносамОрганизации.Организация)
	|			И (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|ГДЕ
	|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо ЕСТЬ NULL
	|	И ФизическиеЛица.СтраховойНомерПФР <> """"
	|	И НЕ КадроваяИсторияСотрудниковИнтервальный.Организация ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ДатаНачалаПроактива", СЭДОФСС.ДатаНачалаПроактивныхВыплат());
	
	КлючОбъекта     = "ЗастрахованныеЛицаСЭДО";
	КлючНастроек    = "СпособДобавленияПринятыхС2022ГодаТребующихОтправки";
	ИмяПользователя = "";
	ПредыдущийСпособ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, , , ИмяПользователя);
	Если Не ЗначениеЗаполнено(ПредыдущийСпособ) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, 1, , ИмяПользователя);
		// Обновление по всем сотрудникам сразу.
		ТаблицаОбновления = Запрос.Выполнить().Выгрузить();
		ОбновитьПоТаблице(ТаблицаОбновления, Ложь);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, 2, , ИмяПользователя);
		// Если предыдущий сеанс завис - обновление по каждому сотруднику в отдельности.
		ТаблицаОбновления = ПустаяТаблицаОбновления();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОбновления.Добавить(), Выборка);
			ОбновитьПоТаблице(ТаблицаОбновления, Ложь);
			ТаблицаОбновления.Очистить();
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня  = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня  = НачалоДня(СЭДОФСС.БлижайшийРабочийДень(НачалоТекущегоДня));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.ВРаботе
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВРаботе,
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.КОтправке
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКОтправке,
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.НаОформлении
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНаОформлении,
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.МаксимальнаяДатаОтправки <= &НачалоРабочегоДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСегодня,
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.КОтправке
	|					И ЗастрахованныеЛицаСЭДО.МаксимальнаяДатаОтправки <= &НачалоРабочегоДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКОтправкеСегодня,
	|	СУММА(ВЫБОР
	|			КОГДА ЗастрахованныеЛицаСЭДО.НаОформлении
	|					И ЗастрахованныеЛицаСЭДО.МаксимальнаяДатаОтправки <= &НачалоРабочегоДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНаОформленииСегодня
	|ИЗ
	|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
	|ГДЕ
	|	ЗастрахованныеЛицаСЭДО.ВРаботе
	|	И НЕ ЗастрахованныеЛицаСЭДО.Скрыть";
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	
	Пакет = Запрос.ВыполнитьПакет();
	Таблица = Пакет[0].Выгрузить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Результат.Вставить(Колонка.Имя, 0);
	КонецЦикла;
	Если Таблица.Количество() > 0 Тогда
		СтрокаТаблицы = Таблица[0];
		Если СтрокаТаблицы.КоличествоВРаботе <> Null Тогда
			ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КоличествоОжидаемыхСообщений(ГоловнаяОрганизация, Организации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК Сведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Сведения.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Сведения.СостояниеОтправки В (&Отправлен, &ОтправленОператору)
	|	И Сведения.ДатаОтправки > &ДатаНачалаАктуальности
	|	И Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Отправлен", Перечисления.СостоянияДокументаСЭДОФСС.Отправлен);
	Запрос.УстановитьПараметр("ОтправленОператору", Перечисления.СостоянияДокументаСЭДОФСС.ОтправленОператору);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДатаНачалаАктуальности());
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сведения.ГоловнаяОрганизация = Организации.Ссылка", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ДатаНачалаАктуальности() Экспорт
	Возврат НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
КонецФункции

#КонецОбласти

#Область ДокументыСведений

Процедура ПриЗаписиСведений(Документ, ЗначенияРеквизитовДоЗаписи) Экспорт
	Таблица = ПустаяТаблицаОбновления();
	Если ЗначенияРеквизитовДоЗаписи.СНИЛС <> Документ.СНИЛС
		Или ЗначенияРеквизитовДоЗаписи.Страхователь <> Документ.Страхователь Тогда
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ЗначенияРеквизитовДоЗаписи);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Документ);
	ОбновитьПоТаблице(Таблица, Истина, ЗначенияРеквизитовДоЗаписи.ЭтоНовый, Документ);
КонецПроцедуры

Процедура ПриЗаписиРегистрацииСведений(Регистрация, РеквизитыСведений) Экспорт
	Если ЗначениеЗаполнено(Регистрация.ДатаОтправкиОператору) И Регистрация.ОтправленОператору Тогда
		ДатаОтправки = Регистрация.ДатаОтправкиОператору;
	Иначе
		ДатаОтправки = Регистрация.ДатаОтправки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		Возврат; // В регистре индексируется последняя отправленная регистрация.
	КонецЕсли;
	Страхователь        = Регистрация.Страхователь;
	ГоловнаяОрганизация = Регистрация.ГоловнаяОрганизация;
	ФизическоеЛицо      = Регистрация.ФизическоеЛицо;
	СНИЛС               = Регистрация.СНИЛС;
	Если Не ЗначениеЗаполнено(Страхователь) Или Не ЗначениеЗаполнено(СНИЛС) Тогда
		Возврат; // Регистрацию не к чему "прицепить" в учете.
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияРесурсов = ЗначенияРесурсов(Страхователь, СНИЛС);
	Если ЗначенияРесурсов.РегистрацияСведений <> Регистрация.Ссылка
		И ЗначенияРесурсов.ДатаОтправки >= ДатаОтправки Тогда
		Возврат; // Повторная загрузка данных старой (неактуальной) регистрации.
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(Страхователь, СНИЛС);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Запись = ЕдинственнаяЗаписьНабора(Набор, ФизическоеЛицо);
	
	Если Запись.ДатаОтправки < ДатаОтправки
		И Запись.ДатаОтправки <= Запись.МаксимальнаяДатаОтправки Тогда
		Запись.МаксимальнаяДатаОтправки = '00010101';
	КонецЕсли;
	
	Запись.ГоловнаяОрганизация  = ГоловнаяОрганизация;
	Запись.ДатаОтправки         = ДатаОтправки;
	Запись.ОтправленныеСведения = Регистрация.ДокументОснование;
	Запись.РегистрацияСведений  = Регистрация.Ссылка;
	
	// Очистка несоответствия в связи с изменением оснований для заполнения (дата отправки).
	Если ЗначениеЗаполнено(Запись.Несоответствие)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Несоответствие, "ВходящаяДата") < Запись.ДатаОтправки Тогда
		Запись.Несоответствие = Неопределено;
		Запись.НесоответствиеСотрудникНеЧислится = Ложь;
	КонецЕсли;
	
	Запись.СостояниеОтправки = СостояниеОтправленныхСведений(Запись, Регистрация.Состояние);
	
	Если Запись.ПоследниеСведения = Запись.ОтправленныеСведения Тогда
		Запись.СостояниеСведений = СостояниеПоследнихСведений(Запись, РеквизитыСведений, Регистрация.Состояние);
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Функция ЗначенияРесурсов(Страхователь, СНИЛС)
	Если Не ЗначениеЗаполнено(Страхователь)
		Или Не ЗначениеЗаполнено(СНИЛС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПривилегированныйРежим()
		И Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Фильтр = Новый Структура;
	Фильтр.Вставить("СНИЛС",        СНИЛС);
	Фильтр.Вставить("Страхователь", Страхователь);
	Возврат Получить(Фильтр);
КонецФункции

#КонецОбласти

#Область Обновление

Функция ПустаяТаблицаОбновления() Экспорт
	ТаблицаОбновления = Новый ТаблицаЗначений;
	ТаблицаОбновления.Колонки.Добавить("СНИЛС", Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО.Измерения.СНИЛС.Тип);
	ТаблицаОбновления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОбновления.Колонки.Добавить("Страхователь",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Возврат ТаблицаОбновления;
КонецФункции

// Обновляет сведения в регистре по страхователям и СНИЛС.
Процедура ОбновитьПоТаблице(ТаблицаОбновления, ЗапланироватьОбновлениеПоКадровымДанным, ОтключитьФлажокСкрыть = Ложь, Основание = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ЗапланироватьОбновлениеПоКадровымДанным Тогда
		ТаблицаОбновленияКД = РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ПустаяТаблицаОбновления();
	Иначе
		ТаблицаОбновленияКД = Неопределено;
	КонецЕсли;
	
	ТаблицаОбновления.Свернуть("СНИЛС, ФизическоеЛицо, Страхователь");
	КоллекцииБЗК.УдалитьСтрокиТаблицыПоЗначению(ТаблицаОбновления, "Страхователь", Справочники.Организации.ПустаяСсылка());
	Фильтр = Новый Структура("СНИЛС, ФизическоеЛицо", "", Справочники.ФизическиеЛица.ПустаяСсылка());
	Найденные = ТаблицаОбновления.НайтиСтроки(Фильтр);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ТаблицаОбновления.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Количество = ТаблицаОбновления.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество > 1000 Тогда
		МассивыСтрок = РазбитьТаблицуПо1000Строк(ТаблицаОбновления);
		Для Каждого МассивСтрок Из МассивыСтрок Цикл
			ВложеннаяТаблица = ТаблицаОбновления.Скопировать(МассивСтрок);
			ОбновитьПоТаблицеСлужебный(ВложеннаяТаблица, ОтключитьФлажокСкрыть, Основание, ТаблицаОбновленияКД);
		КонецЦикла;
	Иначе
		ОбновитьПоТаблицеСлужебный(ТаблицаОбновления, ОтключитьФлажокСкрыть, Основание, ТаблицаОбновленияКД);
	КонецЕсли;
	
	Если ЗапланироватьОбновлениеПоКадровымДанным Тогда
		РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоТаблице(ТаблицаОбновленияКД);
	КонецЕсли;
КонецПроцедуры

// Добавляет в регистр информацию о новых сотрудниках, которые приняты после даты вступления закона в силу.
Функция ДобавитьСведенияОНовыхСотрудниках(Страхователь, ФизическиеЛица, ОбнулятьСуществующиеЗаписи = Ложь)
	Запрос = ЗапросКадровыхДанныхПоСтрахователям(Неопределено, Страхователь, ФизическиеЛица, Ложь);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если ОбнулятьСуществующиеЗаписи Тогда
		Найденные = Таблица;
	Иначе
		Найденные = Таблица.НайтиСтроки(Новый Структура("ЗаписьПрисутствуетВРегистре", Ложь));
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ДобавитьСведенияОНовомСотруднике(СтрокаТаблицы, СтрокаТаблицы, ОбнулятьСуществующиеЗаписи);
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Процедура ДобавитьСведенияОНовомСотруднике(СтрокаТаблицы, КадровыеДанныеСотрудника, ОбнулятьСуществующиеЗаписи = Ложь) Экспорт
	УволенДоНачалаПроактива = (КадровыеДанныеСотрудника <> Неопределено И КадровыеДанныеСотрудника.УволенДоНачалаПроактива);
	Набор = НачатьЗаписьНабора(СтрокаТаблицы.Страхователь, СтрокаТаблицы.СНИЛС);
	Если Набор = Неопределено Тогда
		Возврат;
	ИначеЕсли Набор.Количество() > 0 Тогда
		Если ОбнулятьСуществующиеЗаписи Тогда
			ТаблицаДоОчистки = Набор.Выгрузить(, "ПоследниеСведения, ОтправленныеСведения, Скрыть, ДатаСкрытия, КоличествоВходящихДокументов");
			ЗаписьДоОчистки  = ТаблицаДоОчистки[0];
			Набор.Очистить();
			Если УволенДоНачалаПроактива
				И ЗаписьДоОчистки.КоличествоВходящихДокументов = 0
				И Не ЗначениеЗаполнено(ЗаписьДоОчистки.ПоследниеСведения) Тогда
				ЗавершитьЗаписьНабора(Набор);
				Возврат;
			КонецЕсли;
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьДоОчистки, , "ПоследниеСведения, ОтправленныеСведения");
		Иначе
			ОтменитьЗаписьНабора(Набор);
			Возврат;
		КонецЕсли;
	ИначеЕсли УволенДоНачалаПроактива Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	Иначе
		Запись = Набор.Добавить();
	КонецЕсли;
	Запись.СНИЛС               = СтрокаТаблицы.СНИЛС;
	Запись.Страхователь        = СтрокаТаблицы.Страхователь;
	Запись.ФизическоеЛицо      = СтрокаТаблицы.ФизическоеЛицо;
	Запись.ГоловнаяОрганизация = СтрокаТаблицы.ГоловнаяОрганизация;
	Если Не УволенДоНачалаПроактива Тогда
		Запись.ТребуетсяСоздать  = Истина;
		Запись.СостояниеСведений = Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать;
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаУвольнения) Тогда
			ДатаИзменения = КадровыеДанныеСотрудника.ДатаУвольнения;
		ИначеЕсли КадровыеДанныеСотрудника.ОкончаниеДействия < ТекущаяДатаСеанса() Тогда
			ДатаИзменения = КадровыеДанныеСотрудника.ОкончаниеДействия;
		Иначе
			ДатаИзменения = КадровыеДанныеСотрудника.НачалоДействия;
		КонецЕсли;
		ОбновитьМаксимальнуюДатуОтправки(Запись, ДатаИзменения);
	КонецЕсли;
	
	СкрытьВоеннослужащих(КадровыеДанныеСотрудника, Запись);
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ОбновитьМаксимальнуюДатуОтправки(Запись, Дата)
	Если Не ЗначениеЗаполнено(Запись.МаксимальнаяДатаОтправки) Тогда
		Запись.МаксимальнаяДатаОтправки = МаксимальнаяДатаОтправки(Дата);
	КонецЕсли;
КонецПроцедуры

Функция ЗапросКадровыхДанныхПоСтрахователям(ГоловнаяОрганизация, Страхователь, ФизическиеЛица, ТолькоОтсутствующиеВРегистре, ДатаСреза = Неопределено) Экспорт
	// Для выбора последней записи используются два ключевых поля - дата начала действия и дата окончания действия записи.
	// Т.к. может быть такое что в один период кадровой истории входят две записи видов занятости.
	// И в таком случае получается две независимые записи с периодами действия, соответствующими периодам видов занятости.
	// И выбирать в таком случае необходимо 
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат ЗапросКадровыхДанныхДляВложенныхПериодическихСобытий(ГоловнаяОрганизация, Страхователь, ФизическиеЛица, ТолькоОтсутствующиеВРегистре, ДатаСреза);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
	|	НЕ РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL КАК ЗаписьПрисутствуетВРегистре,
	|	ЕСТЬNULL(РегистрЗастрахованных.ПоследниеСведения, НЕОПРЕДЕЛЕНО) КАК ПоследниеСведения,
	|	ЕСТЬNULL(РегистрЗастрахованных.ОтправленныеСведения, НЕОПРЕДЕЛЕНО) КАК ОтправленныеСведения,
	|	ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) КАК Страхователь,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала >= ВидыЗанятостиИнтервальный.ДатаНачала
	|			ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала
	|		ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаНачала
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ВидыЗанятостиИнтервальный.ДатаОкончания
	|			ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
	|		ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаОкончания
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудниковИнтервальный.Организация КАК Организация,
	|	КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВидыЗанятостиИнтервальный.ВидЗанятости КАК ВидЗанятости,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1)
	|		КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|				И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1)
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1) < &ДатаНачалаПроактива
	|		КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|				И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1) < &ДатаНачалаПроактива
	|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1) < &ДатаНачалаПроактива
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УволенДоНачалаПроактива,
	|	"""" КАК ВидДоговора
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиИнтервальный
	|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ВидыЗанятостиИнтервальный.Сотрудник
	|			И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= ВидыЗанятостиИнтервальный.ДатаНачала
	|			И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= ВидыЗанятостиИнтервальный.ДатаОкончания
	|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))
	|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка))
	|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизаций
	|		ПО (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизации
	|		ПО КадроваяИсторияСотрудниковИнтервальный.Организация = ОтчитывающиесяПоВзносамОрганизации.Организация
	|			И (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК РегистрЗастрахованных
	|		ПО КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = РегистрЗастрахованных.ФизическоеЛицо
	|			И (ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = РегистрЗастрахованных.Страхователь)
	|ГДЕ
	|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В(&ФизическиеЛица)
	|	И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = &Страхователь
	|	И РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL
	|	И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ДатаСреза
	|	И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &ДатаСреза
	|	И (ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала >= ВидыЗанятостиИнтервальный.ДатаНачала
	|				ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала
	|			ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаНачала
	|		КОНЕЦ, ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ВидыЗанятостиИнтервальный.ДатаОкончания
	|				ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
	|			ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаОкончания
	|		КОНЕЦ, ВЫБОР
	|			КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1)
	|			КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|					И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1)
	|			КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1)
	|			ИНАЧЕ ДАТАВРЕМЯ(3999, 12, 31)
	|		КОНЕЦ) В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ВЫБОР
	|						КОГДА КадроваяИсторияВложенный.ДатаНачала >= ВидыЗанятостиВложенный.ДатаНачала
	|							ТОГДА КадроваяИсторияВложенный.ДатаНачала
	|						ИНАЧЕ ВидыЗанятостиВложенный.ДатаНачала
	|					КОНЕЦ),
	|				МАКСИМУМ(ВЫБОР
	|						КОГДА КадроваяИсторияВложенный.ДатаОкончания < ВидыЗанятостиВложенный.ДатаОкончания
	|							ТОГДА КадроваяИсторияВложенный.ДатаОкончания
	|						ИНАЧЕ ВидыЗанятостиВложенный.ДатаОкончания
	|					КОНЕЦ),
	|				МАКСИМУМ(ВЫБОР
	|						КОГДА КадроваяИсторияВложенный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|							ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаНачала, ДЕНЬ, -1)
	|						КОГДА ВидыЗанятостиВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|								И ВидыЗанятостиВложенный.ДатаОкончания < КадроваяИсторияВложенный.ДатаОкончания
	|							ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиВложенный.ДатаОкончания, ДЕНЬ, -1)
	|						КОГДА КадроваяИсторияВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
	|							ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаОкончания, ДЕНЬ, -1)
	|						ИНАЧЕ ДАТАВРЕМЯ(3999, 12, 31)
	|					КОНЕЦ)
	|			ИЗ
	|				РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияВложенный
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиВложенный
	|					ПО
	|						КадроваяИсторияВложенный.Сотрудник = ВидыЗанятостиВложенный.Сотрудник
	|							И (КадроваяИсторияВложенный.ДатаОкончания МЕЖДУ ВидыЗанятостиВложенный.ДатаНачала И ВидыЗанятостиВложенный.ДатаОкончания)
	|							И НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|							И НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка)
	|							И НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
	|					ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный
	|					ПО
	|						ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный.Значение = ИСТИНА
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизацииВложенный
	|					ПО
	|						КадроваяИсторияВложенный.Организация = ОтчитывающиесяПоВзносамОрганизацииВложенный.Организация
	|							И ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный.Значение = ИСТИНА
	|			ГДЕ
	|				КадроваяИсторияВложенный.ФизическоеЛицо = КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо
	|				И КадроваяИсторияВложенный.ГоловнаяОрганизация = КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация
	|				И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизацииВложенный.ОтчитывающаясяОрганизация, КадроваяИсторияВложенный.Организация) = ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация)
	|				И КадроваяИсторияВложенный.ДатаОкончания >= &ДатаСреза
	|				И КадроваяИсторияВложенный.ДатаНачала <= &ДатаСреза)";
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = &ГоловнаяОрганизация",
			"");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Страхователь) Тогда
		Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = &Страхователь",
			"");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В(&ФизическиеЛица)",
			"ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСреза) Тогда
		Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаСреза + 86400));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияВложенный.ДатаОкончания >= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияВложенный.ДатаНачала <= &ДатаСреза", "");
	КонецЕсли;
	
	Если Не ТолькоОтсутствующиеВРегистре Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL",
			"");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			""""" КАК ВидДоговора", "КадроваяИсторияСотрудниковИнтервальный.ВидДоговора КАК ВидДоговора");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаПроактива", СЭДОФСС.ДатаНачалаПроактивныхВыплат());
	Возврат Запрос;
КонецФункции

Функция ЗапросКадровыхДанныхДляВложенныхПериодическихСобытий(ГоловнаяОрганизация, Страхователь, ФизическиеЛица, ТолькоОтсутствующиеВРегистре, ДатаСреза = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КадроваяИсторияВложенный.ДатаНачала >= ВидыЗанятостиВложенный.ДатаНачала
		|				ТОГДА КадроваяИсторияВложенный.ДатаНачала
		|			ИНАЧЕ ВидыЗанятостиВложенный.ДатаНачала
		|		КОНЕЦ) КАК ДатаНачала,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КадроваяИсторияВложенный.ДатаОкончания < ВидыЗанятостиВложенный.ДатаОкончания
		|				ТОГДА КадроваяИсторияВложенный.ДатаОкончания
		|			ИНАЧЕ ВидыЗанятостиВложенный.ДатаОкончания
		|		КОНЕЦ) КАК ДатаОкончания,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КадроваяИсторияВложенный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаНачала, ДЕНЬ, -1)
		|			КОГДА ВидыЗанятостиВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|					И ВидыЗанятостиВложенный.ДатаОкончания < КадроваяИсторияВложенный.ДатаОкончания
		|				ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиВложенный.ДатаОкончания, ДЕНЬ, -1)
		|			КОГДА КадроваяИсторияВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаОкончания, ДЕНЬ, -1)
		|			ИНАЧЕ ДАТАВРЕМЯ(3999, 12, 31)
		|		КОНЕЦ) КАК ДатаОкончанияСобытия,
		|	КадроваяИсторияВложенный.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияВложенный.Организация КАК Организация,
		|	КадроваяИсторияВложенный.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КадроваяИсторияВложенный.ВидСобытия ЕСТЬ NULL
		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|			КОГДА КадроваяИсторияВложенный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаНачала, ДЕНЬ, -1)
		|			КОГДА ВидыЗанятостиВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|					И ВидыЗанятостиВложенный.ДатаОкончания < КадроваяИсторияВложенный.ДатаОкончания
		|				ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиВложенный.ДатаОкончания, ДЕНЬ, -1)
		|			КОГДА КадроваяИсторияВложенный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|				ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияВложенный.ДатаОкончания, ДЕНЬ, -1)
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТ_Интервалы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияВложенный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиВложенный
		|		ПО КадроваяИсторияВложенный.Сотрудник = ВидыЗанятостиВложенный.Сотрудник
		|			И (КадроваяИсторияВложенный.ДатаОкончания МЕЖДУ ВидыЗанятостиВложенный.ДатаНачала И ВидыЗанятостиВложенный.ДатаОкончания)
		|			И (НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))
		|			И (НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка))
		|			И (НЕ ВидыЗанятостиВложенный.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный
		|		ПО (ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный.Значение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизацииВложенный
		|		ПО КадроваяИсторияВложенный.Организация = ОтчитывающиесяПоВзносамОрганизацииВложенный.Организация
		|			И (ВестиУчетОтчитывающихсяПоВзносамОрганизацийВложенный.Значение = ИСТИНА)
		|ГДЕ
		|	КадроваяИсторияВложенный.ФизическоеЛицо В(&ФизическиеЛица)
		|	И КадроваяИсторияВложенный.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизацииВложенный.ОтчитывающаясяОрганизация, КадроваяИсторияВложенный.Организация) = &Страхователь
		|	И КадроваяИсторияВложенный.ДатаОкончания >= &ДатаСреза
		|	И КадроваяИсторияВложенный.ДатаНачала <= &ДатаСреза
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияВложенный.Сотрудник,
		|	КадроваяИсторияВложенный.Организация,
		|	КадроваяИсторияВложенный.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Интервалы.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИНАЧЕ Интервалы.ДатаУвольнения
		|		КОНЕЦ) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТ_МаксДатаУвольнения
		|ИЗ
		|	ВТ_Интервалы КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Интервалы.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(Интервалы.ДатаОкончания) КАК ДатаОкончания,
		|	МАКСИМУМ(Интервалы.ДатаОкончанияСобытия) КАК ДатаОкончанияСобытия
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_Интервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДатаУвольнения КАК ВТ_ДатыУвольнения
		|		ПО (ВЫБОР
		|				КОГДА Интервалы.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВТ_ДатыУвольнения.ДатаУвольнения = ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|				ИНАЧЕ Интервалы.ДатаУвольнения = ВТ_ДатыУвольнения.ДатаУвольнения
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
		|	НЕ РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL КАК ЗаписьПрисутствуетВРегистре,
		|	ЕСТЬNULL(РегистрЗастрахованных.ПоследниеСведения, НЕОПРЕДЕЛЕНО) КАК ПоследниеСведения,
		|	ЕСТЬNULL(РегистрЗастрахованных.ОтправленныеСведения, НЕОПРЕДЕЛЕНО) КАК ОтправленныеСведения,
		|	ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) КАК Страхователь,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала >= ВидыЗанятостиИнтервальный.ДатаНачала
		|			ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаНачала
		|		ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаНачала
		|	КОНЕЦ КАК НачалоДействия,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ВидыЗанятостиИнтервальный.ДатаОкончания
		|			ТОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
		|		ИНАЧЕ ВидыЗанятостиИнтервальный.ДатаОкончания
		|	КОНЕЦ КАК ОкончаниеДействия,
		|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудниковИнтервальный.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиИнтервальный.ВидЗанятости КАК ВидЗанятости,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		КОГДА ТекущиеКадровыеДанные.ДатаУвольнения ЕСТЬ НЕ NULL 
		|			ТОГДА ТекущиеКадровыеДанные.ДатаУвольнения
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1)
		|		КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|				И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1)
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаУвольнения,
		|	ВЫБОР
		|		КОГДА ТекущиеКадровыеДанные.ДатаУвольнения ЕСТЬ НЕ NULL 
		|			ТОГДА ТекущиеКадровыеДанные.ДатаУвольнения < &ДатаНачалаПроактива
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1) < &ДатаНачалаПроактива
		|		КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|				И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1) < &ДатаНачалаПроактива
		|		КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1) < &ДатаНачалаПроактива
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УволенДоНачалаПроактива,
		|	"""" КАК ВидДоговора
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиИнтервальный
		|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ВидыЗанятостиИнтервальный.Сотрудник
		|			И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= ВидыЗанятостиИнтервальный.ДатаНачала
		|			И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= ВидыЗанятостиИнтервальный.ДатаОкончания
		|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))
		|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка))
		|			И (ВидыЗанятостиИнтервальный.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизаций
		|		ПО (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизации
		|		ПО КадроваяИсторияСотрудниковИнтервальный.Организация = ОтчитывающиесяПоВзносамОрганизации.Организация
		|			И (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
		|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ТекущиеКадровыеДанные.Сотрудник
		|			И (КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|			И (ТекущиеКадровыеДанные.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК РегистрЗастрахованных
		|		ПО КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = РегистрЗастрахованных.ФизическоеЛицо
		|			И (ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = РегистрЗастрахованных.Страхователь)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК ВТ_Периоды
		|		ПО КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания = ВТ_Периоды.ДатаОкончания
		|			И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала = ВТ_Периоды.ДатаНачала
		|			И (ВЫБОР
		|				КОГДА КадроваяИсторияСотрудниковИнтервальный.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|					ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ, -1)
		|				КОГДА ВидыЗанятостиИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|						И ВидыЗанятостиИнтервальный.ДатаОкончания < КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
		|					ТОГДА ДОБАВИТЬКДАТЕ(ВидыЗанятостиИнтервальный.ДатаОкончания, ДЕНЬ, -1)
		|				КОГДА КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания < ДАТАВРЕМЯ(3999, 1, 1)
		|					ТОГДА ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания, ДЕНЬ, -1)
		|				ИНАЧЕ ДАТАВРЕМЯ(3999, 12, 31)
		|			КОНЕЦ = ВТ_Периоды.ДатаОкончанияСобытия)
		|ГДЕ
		|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В(&ФизическиеЛица)
		|	И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = &Страхователь
		|	И РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL
		|	И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ДатаСреза
		|	И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &ДатаСреза";
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияВложенный.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Страхователь) Тогда
		Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, КадроваяИсторияСотрудниковИнтервальный.Организация) = &Страхователь", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизацииВложенный.ОтчитывающаясяОрганизация, КадроваяИсторияВложенный.Организация) = &Страхователь", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо В(&ФизическиеЛица)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадроваяИсторияВложенный.ФизическоеЛицо В(&ФизическиеЛица)", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСреза) Тогда
		Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаСреза + 86400));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияВложенный.ДатаОкончания >= &ДатаСреза", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияВложенный.ДатаНачала <= &ДатаСреза", "");
	КонецЕсли;
	
	Если Не ТолькоОтсутствующиеВРегистре Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрЗастрахованных.ФизическоеЛицо ЕСТЬ NULL", "");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			""""" КАК ВидДоговора", "КадроваяИсторияСотрудниковИнтервальный.ВидДоговора КАК ВидДоговора");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаПроактива", СЭДОФСС.ДатаНачалаПроактивныхВыплат());
	
	Возврат Запрос;
КонецФункции

// Актуализирует информацию о документах СведенияОЗастрахованномЛицеФСС.
Процедура ОбновитьПоТаблицеСлужебный(ТаблицаОбновления, ОтключитьФлажокСкрыть = Ложь, Основание = Неопределено, ТаблицаОбновленияКД = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбновления.СНИЛС КАК СНИЛС,
	|	ТаблицаОбновления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаОбновления.Страхователь КАК Страхователь
	|ПОМЕСТИТЬ ОтборыБезФЛ
	|ИЗ
	|	&ТаблицаОбновления КАК ТаблицаОбновления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ФизическиеЛицаПоСсылке.СтраховойНомерПФР, ОтборыБезФЛ.СНИЛС) КАК СНИЛС,
	|	ЕСТЬNULL(ФизическиеЛицаПоСсылке.ФИО, ЕСТЬNULL(ФизическиеЛицаПоСНИЛС.ФИО, """")) КАК ФИО,
	|	ОтборыБезФЛ.Страхователь КАК Страхователь,
	|	ВЫБОР
	|		КОГДА ОтборыБезФЛ.СНИЛС = """"
	|			ТОГДА ОтборыБезФЛ.ФизическоеЛицо
	|		ИНАЧЕ ЕСТЬNULL(ФизическиеЛицаПоСНИЛС.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	КОНЕЦ КАК ФизическоеЛицо
	|ПОМЕСТИТЬ Отборы
	|ИЗ
	|	ОтборыБезФЛ КАК ОтборыБезФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаПоСНИЛС
	|		ПО (ОтборыБезФЛ.СНИЛС <> """")
	|			И ОтборыБезФЛ.СНИЛС = ФизическиеЛицаПоСНИЛС.СтраховойНомерПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛицаПоСсылке
	|		ПО (ОтборыБезФЛ.СНИЛС = """")
	|			И ОтборыБезФЛ.ФизическоеЛицо = ФизическиеЛицаПоСсылке.Ссылка
	|			И (ФизическиеЛицаПоСсылке.СтраховойНомерПФР <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОЗастрахованномЛицеФСС.СНИЛС КАК СНИЛС,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОЗастрахованномЛицеФСС.Страхователь КАК Страхователь,
	|	СведенияОЗастрахованномЛицеФСС.НеЧислилсяВОрганизации КАК НеЧислилсяВОрганизации,
	|	СведенияОЗастрахованномЛицеФСС.Ссылка КАК Ссылка,
	|	СведенияОЗастрахованномЛицеФСС.ДатаОтправки > &ПустаяДата
	|		И НЕ ЕСТЬNULL(Регистрация.Доставлен, ЛОЖЬ)
	|		И НЕ ЕСТЬNULL(Регистрация.ОтправленОператору, ЛОЖЬ) КАК ОчиститьДатуОтправки,
	|	ВЫБОР
	|		КОГДА СведенияОЗастрахованномЛицеФСС.ДатаСоздания > СведенияОЗастрахованномЛицеФСС.Дата
	|				И СведенияОЗастрахованномЛицеФСС.ДатаСоздания < ДОБАВИТЬКДАТЕ(СведенияОЗастрахованномЛицеФСС.Дата, ДЕНЬ, 1)
	|			ТОГДА СведенияОЗастрахованномЛицеФСС.ДатаСоздания
	|		КОГДА СведенияОЗастрахованномЛицеФСС.ДатаОтправки < СведенияОЗастрахованномЛицеФСС.Дата
	|				ИЛИ НЕ ЕСТЬNULL(Регистрация.Доставлен, ЛОЖЬ)
	|					И НЕ ЕСТЬNULL(Регистрация.ОтправленОператору, ЛОЖЬ)
	|			ТОГДА СведенияОЗастрахованномЛицеФСС.Дата
	|		ИНАЧЕ СведенияОЗастрахованномЛицеФСС.ДатаОтправки
	|	КОНЕЦ КАК ПолеУпорядочивания,
	|	СведенияОЗастрахованномЛицеФСС.Дата КАК Дата,
	|	СведенияОЗастрахованномЛицеФСС.Проведен КАК Проведен,
	|	СведенияОЗастрахованномЛицеФСС.РегистрацияСведений КАК РегистрацияСведений,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(Регистрация.Доставлен, ЛОЖЬ)
	|				И НЕ ЕСТЬNULL(Регистрация.ОтправленОператору, ЛОЖЬ)
	|			ТОГДА &ПустаяДата
	|		ИНАЧЕ СведенияОЗастрахованномЛицеФСС.ДатаОтправки
	|	КОНЕЦ КАК ДатаОтправки,
	|	Регистрация.Доставлен КАК Доставлен,
	|	Регистрация.ОтправленОператору КАК ОтправленОператору,
	|	Регистрация.ДоставкаИдентификатор КАК ДоставкаИдентификатор,
	|	Регистрация.Зарегистрирован КАК Зарегистрирован,
	|	Регистрация.РегистрацияИдентификатор КАК РегистрацияИдентификатор,
	|	Регистрация.ЕстьНесоответствия КАК ЕстьНесоответствия,
	|	Регистрация.НесоответствиеИдентификатор КАК НесоответствиеИдентификатор,
	|	Регистрация.ТекстОшибки КАК ТекстОшибки,
	|	Регистрация.Состояние КАК Состояние,
	|	СведенияОЗастрахованномЛицеФСС.СотрудникФамилия + "" "" + СведенияОЗастрахованномЛицеФСС.СотрудникИмя + ВЫБОР
	|		КОГДА СведенияОЗастрахованномЛицеФСС.СотрудникОтчество = """"
	|			ТОГДА """"
	|		ИНАЧЕ "" "" + СведенияОЗастрахованномЛицеФСС.СотрудникОтчество
	|	КОНЕЦ КАК ФИО
	|ПОМЕСТИТЬ ДокументыСведений
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Отборы КАК Отборы
	|		ПО СведенияОЗастрахованномЛицеФСС.СНИЛС = Отборы.СНИЛС
	|			И СведенияОЗастрахованномЛицеФСС.Страхователь = Отборы.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК Регистрация
	|		ПО СведенияОЗастрахованномЛицеФСС.РегистрацияСведений = Регистрация.Ссылка
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСведений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыСведений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументыСведений.Страхователь КАК Страхователь,
	|	ДокументыСведений.СНИЛС КАК СНИЛС,
	|	ДокументыСведений.Ссылка КАК Ссылка,
	|	ДокументыСведений.Дата КАК Дата,
	|	ДокументыСведений.Проведен КАК Проведен,
	|	ДокументыСведений.РегистрацияСведений КАК РегистрацияСведений,
	|	ДокументыСведений.ДатаОтправки КАК ДатаОтправки,
	|	ДокументыСведений.НеЧислилсяВОрганизации КАК НеЧислилсяВОрганизации,
	|	ДокументыСведений.Состояние КАК Состояние,
	|	ДокументыСведений.ФИО КАК ФИО
	|ПОМЕСТИТЬ ПоследниеСведения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыСведений.Страхователь КАК Страхователь,
	|		ДокументыСведений.СНИЛС КАК СНИЛС,
	|		МАКСИМУМ(ДокументыСведений.ПолеУпорядочивания) КАК ПолеУпорядочивания
	|	ИЗ
	|		ДокументыСведений КАК ДокументыСведений
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыСведений.Страхователь,
	|		ДокументыСведений.СНИЛС) КАК ПоследниеДатыСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСведений КАК ДокументыСведений
	|		ПО ПоследниеДатыСведений.СНИЛС = ДокументыСведений.СНИЛС
	|			И ПоследниеДатыСведений.Страхователь = ДокументыСведений.Страхователь
	|			И ПоследниеДатыСведений.ПолеУпорядочивания = ДокументыСведений.ПолеУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСведений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыСведений.Страхователь КАК Страхователь,
	|	ДокументыСведений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументыСведений.СНИЛС КАК СНИЛС,
	|	ДокументыСведений.Ссылка КАК Ссылка,
	|	ДокументыСведений.Дата КАК Дата,
	|	ДокументыСведений.РегистрацияСведений КАК РегистрацияСведений,
	|	ДокументыСведений.ДатаОтправки КАК ДатаОтправки,
	|	ДокументыСведений.Проведен КАК Проведен,
	|	ДокументыСведений.НеЧислилсяВОрганизации КАК НеЧислилсяВОрганизации,
	|	ДокументыСведений.Состояние КАК Состояние,
	|	ДокументыСведений.ФИО КАК ФИО
	|ПОМЕСТИТЬ ОтправленныеСведения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыСведений.Страхователь КАК Страхователь,
	|		ДокументыСведений.СНИЛС КАК СНИЛС,
	|		МАКСИМУМ(ДокументыСведений.ПолеУпорядочивания) КАК ПолеУпорядочивания
	|	ИЗ
	|		ДокументыСведений КАК ДокументыСведений
	|	ГДЕ
	|		ДокументыСведений.Проведен
	|		И ДокументыСведений.ДатаОтправки > &ПустаяДата
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыСведений.Страхователь,
	|		ДокументыСведений.СНИЛС) КАК ПоследниеДатыСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСведений КАК ДокументыСведений
	|		ПО ПоследниеДатыСведений.СНИЛС = ДокументыСведений.СНИЛС
	|			И ПоследниеДатыСведений.Страхователь = ДокументыСведений.Страхователь
	|			И ПоследниеДатыСведений.ПолеУпорядочивания = ДокументыСведений.ПолеУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокНесоответствие.Ссылка КАК Ссылка,
	|	ДокНесоответствие.СНИЛС КАК СНИЛС,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокНесоответствие.ФИО КАК ФИО,
	|	ДокНесоответствие.Страхователь КАК Страхователь,
	|	ДокНесоответствие.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокНесоответствие.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ДокНесоответствие.ВходящаяДата КАК ВходящаяДата,
	|	ДокНесоответствие.СотрудникНеЧислится КАК СотрудникНеЧислится
	|ПОМЕСТИТЬ ДокументыНесоответствий
	|ИЗ
	|	Отборы КАК Отборы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НесоответствиеСведенийОЗастрахованномЛицеСЭДО КАК ДокНесоответствие
	|		ПО Отборы.СНИЛС = ДокНесоответствие.СНИЛС
	|			И Отборы.Страхователь = ДокНесоответствие.Страхователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНесоответствий.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыНесоответствий.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументыНесоответствий.Страхователь КАК Страхователь,
	|	ДокументыНесоответствий.СНИЛС КАК СНИЛС,
	|	ДокументыНесоответствий.Ссылка КАК Ссылка,
	|	ДокументыНесоответствий.ВходящаяДата КАК ВходящаяДата,
	|	ДокументыНесоответствий.ФИО КАК ФИО,
	|	ДокументыНесоответствий.СотрудникНеЧислится КАК СотрудникНеЧислится
	|ПОМЕСТИТЬ ПоследниеНесоответствия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыНесоответствий.Страхователь КАК Страхователь,
	|		ДокументыНесоответствий.СНИЛС КАК СНИЛС,
	|		МАКСИМУМ(ДокументыНесоответствий.ВходящаяДата) КАК ВходящаяДата
	|	ИЗ
	|		ДокументыНесоответствий КАК ДокументыНесоответствий
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыНесоответствий.Страхователь,
	|		ДокументыНесоответствий.СНИЛС) КАК ПоследниеДатыСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыНесоответствий КАК ДокументыНесоответствий
	|		ПО ПоследниеДатыСведений.СНИЛС = ДокументыНесоответствий.СНИЛС
	|			И ПоследниеДатыСведений.Страхователь = ДокументыНесоответствий.Страхователь
	|			И ПоследниеДатыСведений.ВходящаяДата = ДокументыНесоответствий.ВходящаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Входящие.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Входящие.Страхователь КАК Страхователь,
	|	Входящие.СНИЛС КАК СНИЛС,
	|	МАКСИМУМ(Входящие.ФИО) КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Входящие.ИдентификаторСообщения) КАК КоличествоВходящихДокументов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Входящие.ВходящаяДата) КАК ВходящаяДата
	|ПОМЕСТИТЬ ВходящиеСНИЛС
	|ИЗ
	|	РегистрСведений.СНИЛСВходящихСообщенийСЭДО КАК Входящие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Отборы КАК Отборы
	|		ПО Входящие.СНИЛС = Отборы.СНИЛС
	|			И Входящие.Страхователь = Отборы.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтправленныеСведения КАК ОтправленныеНеЧислился
	|		ПО Входящие.СНИЛС = ОтправленныеНеЧислился.СНИЛС
	|			И (ОтправленныеНеЧислился.НеЧислилсяВОрганизации)
	|			И Входящие.Страхователь = ОтправленныеНеЧислился.Страхователь
	|			И Входящие.ВходящаяДата <= ОтправленныеНеЧислился.ДатаОтправки
	|ГДЕ
	|	ОтправленныеНеЧислился.СНИЛС ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Входящие.Страхователь,
	|	Входящие.СНИЛС,
	|	Входящие.ГоловнаяОрганизация,
	|	Отборы.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСведений.Ссылка КАК Ссылка,
	|	ДокументыСведений.РегистрацияСведений КАК РегистрацияСведений
	|ИЗ
	|	ДокументыСведений КАК ДокументыСведений
	|ГДЕ
	|	ДокументыСведений.ОчиститьДатуОтправки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПоследниеСведения.ГоловнаяОрганизация, ЕСТЬNULL(ОтправленныеСведения.ГоловнаяОрганизация, ЕСТЬNULL(ВходящиеСНИЛС.ГоловнаяОрганизация, ПоследниеНесоответствия.ГоловнаяОрганизация))) КАК ГоловнаяОрганизация,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Отборы.Страхователь КАК Страхователь,
	|	Отборы.СНИЛС КАК СНИЛС,
	|	ЕСТЬNULL(ПоследниеСведения.Ссылка, ЗНАЧЕНИЕ(Документ.СведенияОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ПоследниеСведения,
	|	ЕСТЬNULL(ПоследниеСведения.Дата, &ПустаяДата) КАК ПоследниеДата,
	|	ЕСТЬNULL(ПоследниеСведения.Проведен, ЛОЖЬ) КАК ПоследниеПроведен,
	|	ЕСТЬNULL(ПоследниеСведения.РегистрацияСведений, ЗНАЧЕНИЕ(Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ПоследниеРегистрацияСведений,
	|	ЕСТЬNULL(ПоследниеСведения.ДатаОтправки, &ПустаяДата) КАК ПоследниеДатаОтправки,
	|	ЕСТЬNULL(ПоследниеСведения.НеЧислилсяВОрганизации, ЛОЖЬ) КАК ПоследниеНеЧислилсяВОрганизации,
	|	ЕСТЬNULL(ПоследниеСведения.Состояние, НЕОПРЕДЕЛЕНО) КАК ПоследниеСостояние,
	|	ЕСТЬNULL(ОтправленныеСведения.Ссылка, ЗНАЧЕНИЕ(Документ.СведенияОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ОтправленныеСведения,
	|	ЕСТЬNULL(ОтправленныеСведения.Дата, &ПустаяДата) КАК ОтправленныеДата,
	|	ЕСТЬNULL(ОтправленныеСведения.Проведен, ЛОЖЬ) КАК ОтправленныеПроведен,
	|	ЕСТЬNULL(ОтправленныеСведения.РегистрацияСведений, ЗНАЧЕНИЕ(Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ОтправленныеРегистрацияСведений,
	|	ЕСТЬNULL(ОтправленныеСведения.ДатаОтправки, &ПустаяДата) КАК ОтправленныеДатаОтправки,
	|	ЕСТЬNULL(ОтправленныеСведения.НеЧислилсяВОрганизации, ЛОЖЬ) КАК ОтправленныеНеЧислилсяВОрганизации,
	|	ЕСТЬNULL(ОтправленныеСведения.Состояние, НЕОПРЕДЕЛЕНО) КАК ОтправленныеСостояние,
	|	ЕСТЬNULL(ВходящиеСНИЛС.КоличествоВходящихДокументов, 0) КАК КоличествоВходящихДокументов,
	|	ВЫБОР
	|		КОГДА Отборы.ФИО = """"
	|			ТОГДА ЕСТЬNULL(ПоследниеСведения.ФИО, ЕСТЬNULL(ОтправленныеСведения.ФИО, ЕСТЬNULL(ВходящиеСНИЛС.ФИО, ЕСТЬNULL(ПоследниеНесоответствия.ФИО, """"))))
	|		ИНАЧЕ Отборы.ФИО
	|	КОНЕЦ КАК ФИО,
	|	ЕСТЬNULL(ВходящиеСНИЛС.ВходящаяДата, &ПустаяДата) КАК МаксимальнаяВходящаяДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ПоследниеНесоответствия.ВходящаяДата ЕСТЬ NULL
	|				И ПоследниеНесоответствия.ВходящаяДата >= ЕСТЬNULL(ОтправленныеСведения.ДатаОтправки, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ПоследниеНесоответствия.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НесоответствиеСведенийОЗастрахованномЛицеСЭДО.ПустаяСсылка)
	|	КОНЕЦ КАК Несоответствие,
	|	ВЫБОР
	|		КОГДА НЕ ПоследниеНесоответствия.ВходящаяДата ЕСТЬ NULL
	|				И ПоследниеНесоответствия.ВходящаяДата >= ЕСТЬNULL(ОтправленныеСведения.ДатаОтправки, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ПоследниеНесоответствия.СотрудникНеЧислится
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесоответствиеСотрудникНеЧислится
	|ИЗ
	|	Отборы КАК Отборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСведения КАК ПоследниеСведения
	|		ПО Отборы.СНИЛС = ПоследниеСведения.СНИЛС
	|			И Отборы.Страхователь = ПоследниеСведения.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтправленныеСведения КАК ОтправленныеСведения
	|		ПО Отборы.СНИЛС = ОтправленныеСведения.СНИЛС
	|			И Отборы.Страхователь = ОтправленныеСведения.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВходящиеСНИЛС КАК ВходящиеСНИЛС
	|		ПО Отборы.СНИЛС = ВходящиеСНИЛС.СНИЛС
	|			И Отборы.Страхователь = ВходящиеСНИЛС.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеНесоответствия КАК ПоследниеНесоответствия
	|		ПО Отборы.СНИЛС = ПоследниеНесоответствия.СНИЛС
	|			И Отборы.Страхователь = ПоследниеНесоответствия.Страхователь
	|ГДЕ
	|	НЕ ЕСТЬNULL(ПоследниеСведения.СНИЛС, ЕСТЬNULL(ОтправленныеСведения.СНИЛС, ЕСТЬNULL(ВходящиеСНИЛС.СНИЛС, ПоследниеНесоответствия.СНИЛС))) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отборы.СНИЛС КАК СНИЛС,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Отборы.Страхователь КАК Страхователь
	|ИЗ
	|	Отборы КАК Отборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСведений КАК ДокументыСведений
	|		ПО Отборы.СНИЛС = ДокументыСведений.СНИЛС
	|			И Отборы.Страхователь = ДокументыСведений.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВходящиеСНИЛС КАК ВходящиеСНИЛС
	|		ПО Отборы.СНИЛС = ВходящиеСНИЛС.СНИЛС
	|			И Отборы.Страхователь = ВходящиеСНИЛС.Страхователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеНесоответствия КАК ПоследниеНесоответствия
	|		ПО Отборы.СНИЛС = ПоследниеНесоответствия.СНИЛС
	|			И Отборы.Страхователь = ПоследниеНесоответствия.Страхователь
	|ГДЕ
	|	ДокументыСведений.СНИЛС ЕСТЬ NULL
	|	И ВходящиеСНИЛС.СНИЛС ЕСТЬ NULL
	|	И ПоследниеНесоответствия.СНИЛС ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаОбновления", ТаблицаОбновления);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВГраница = РезультатыЗапроса.Количество() - 1;
	
	// Очистка даты отправки.
	Выборка = РезультатыЗапроса[ВГраница - 2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СведенияОбъект.ДатаОтправки = '00010101';
		СЭДОФСС.ЗаписатьДокумент(СведенияОбъект, Истина);
		Если ЗначениеЗаполнено(СведенияОбъект.РегистрацияСведений) Тогда
			РегистрацияОбъект = СведенияОбъект.РегистрацияСведений.ПолучитьОбъект();
			Если ТипЗнч(РегистрацияОбъект) = Тип("ДокументОбъект.РегистрацияСведенийОЗастрахованномЛицеФСС")
				И Не РегистрацияОбъект.ЭтоНовый() Тогда
				РегистрацияОбъект.ОтправленОператору    = Ложь;
				РегистрацияОбъект.Доставлен             = Ложь;
				РегистрацияОбъект.ДатаОтправки          = '00010101';
				РегистрацияОбъект.ДатаОтправкиОператору = '00010101';
				СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект, Истина);
			Иначе
				СведенияОбъект.РегистрацияСведений = Неопределено;
				СЭДОФСС.ЗаписатьДокумент(СведенияОбъект, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление сведений.
	РеквизитыСведений = Новый Структура(ТребуемыеРеквизитыСведений());
	Выборка = РезультатыЗапроса[ВГраница - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.Страхователь, Выборка.СНИЛС);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Запись = ЕдинственнаяЗаписьНабора(Набор, Выборка.ФизическоеЛицо);
		Запись.ГоловнаяОрганизация  = Выборка.ГоловнаяОрганизация;
		Запись.ПоследниеСведения    = Выборка.ПоследниеСведения;
		Запись.ОтправленныеСведения = Выборка.ОтправленныеСведения;
		Запись.РегистрацияСведений  = Выборка.ОтправленныеРегистрацияСведений;
		Запись.ДатаОтправки         = Выборка.ОтправленныеДатаОтправки;
		
		Запись.ФИО                               = Выборка.ФИО;
		Запись.ФизическоеЛицо                    = Выборка.ФизическоеЛицо;
		Запись.Несоответствие                    = Выборка.Несоответствие;
		Запись.НесоответствиеСотрудникНеЧислится = Выборка.НесоответствиеСотрудникНеЧислится;
		Запись.КоличествоВходящихДокументов      = Выборка.КоличествоВходящихДокументов;
		
		Если ОтключитьФлажокСкрыть Тогда
			Запись.Скрыть = Ложь;
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументОбъект.СведенияОЗастрахованномЛицеФСС")
			И Основание.Ссылка = Запись.ПоследниеСведения
			И ОбщегоНазначенияБЗК.ЗначениеСвойства(Основание.ДополнительныеСвойства, "ВторичныеДанныеОбновлены") = Истина Тогда
			Запись.ТребуетсяАктуализировать  = Ложь;
			Запись.ТребуетсяАннулировать     = Ложь;
			Запись.ПоляТребующиеАктуализации = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Запись.ПоследниеСведения) Тогда
			Запись.ТребуетсяСоздать = Ложь;
		КонецЕсли;
		
		Запись.СостояниеОтправки = СостояниеОтправленныхСведений(Запись, Выборка.ОтправленныеСостояние);
		
		РеквизитыСведений.Проведен               = Выборка.ПоследниеПроведен;
		РеквизитыСведений.РегистрацияСведений    = Выборка.ПоследниеРегистрацияСведений;
		РеквизитыСведений.ДатаОтправки           = Выборка.ПоследниеДатаОтправки;
		РеквизитыСведений.НеЧислилсяВОрганизации = Выборка.ПоследниеНеЧислилсяВОрганизации;
		СостояниеРегистрации                     = Выборка.ПоследниеСостояние;
		Запись.СостояниеСведений = СостояниеПоследнихСведений(Запись, РеквизитыСведений, СостояниеРегистрации);
		
		ЗавершитьЗаписьНабора(Набор);
		
		Если ТаблицаОбновленияКД <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаОбновленияКД.Добавить(), Запись);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление данных необработанных физических лиц (по которым не введены сведения).
	Необработанные = РезультатыЗапроса[ВГраница].Выгрузить();
	Если Необработанные.Количество() > 0 Тогда
		// Добавление новых сотрудников.
		Страхователи = КоллекцииБЗК.УникальныеЗначенияКолонки(Необработанные, "Страхователь");
		Для Каждого Страхователь Из Страхователи Цикл
			Фильтр = Новый Структура("Страхователь", Страхователь);
			ФизическиеЛица = КоллекцииБЗК.УникальныеЗначенияКолонкиСФильтром(Необработанные, Фильтр, "ФизическоеЛицо");
			КоллекцииБЗК.УдалитьПустыеЗначенияМассива(ФизическиеЛица);
			Если ФизическиеЛица.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Обработанные = ДобавитьСведенияОНовыхСотрудниках(Страхователь, ФизическиеЛица, Истина);
			Фильтр = Новый Структура("СНИЛС, Страхователь");
			Для Каждого Обработанный Из Обработанные Цикл
				ЗаполнитьЗначенияСвойств(Фильтр, Обработанный);
				Найденные = Необработанные.НайтиСтроки(Фильтр);
				Для Каждого НайденнаяСтрока Из Найденные Цикл
					Необработанные.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Удаление прочих.
		Если Необработанные.Количество() > 0 Тогда
			Для Каждого Необработанный Из Необработанные Цикл
				Набор = НачатьЗаписьНабора(Необработанный.Страхователь, Необработанный.СНИЛС);
				Если Набор <> Неопределено Тогда
					Если Набор.Количество() > 0 Тогда
						Набор.Очистить();
						ЗавершитьЗаписьНабора(Набор);
					Иначе
						ОтменитьЗаписьНабора(Набор);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФоновыйОбработчикКнопкиОбновитьДанныеРегистра(Параметры, АдресХранилища) Экспорт
	
	ТаблицаОбновления = ПустаяТаблицаОбновления();
	ТаблицаОбновления.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Для Каждого СтрокаСписка Из Параметры.ВыбранныеДанные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбновления.Добавить(), СтрокаСписка);
	КонецЦикла;
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ОбновитьПоТаблице(ТаблицаОбновления.Скопировать(), Ложь, Ложь);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ОбновитьПоТаблице(ТаблицаОбновления, Ложь);
	
КонецПроцедуры

Функция РазбитьТаблицуПо1000Строк(ТаблицаЗначений)
	Результат = Новый Массив;
	МассивСтрок = Неопределено;
	Номер = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Номер = Номер + 1;
		Если Номер % 1000 = 1 Тогда
			МассивСтрок = Новый Массив;
			Результат.Добавить(МассивСтрок);
		КонецЕсли;
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СостояниеПоследнихСведений(Запись, РеквизитыСведений = Неопределено, СостояниеРегистрации = Неопределено)
	
	Если Запись.Скрыть Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.НеПланируетсяОтправлять;
		
	ИначеЕсли Запись.ТребуетсяСоздать Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать;
		
	ИначеЕсли Запись.ТребуетсяАктуализировать Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАктуализировать;
		
	ИначеЕсли Запись.ТребуетсяАннулировать Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАннулировать;
		
	ИначеЕсли ЗначениеЗаполнено(Запись.Несоответствие)
		И Запись.ПоследниеСведения = Запись.ОтправленныеСведения Тогда
		
		Если Запись.НесоответствиеСотрудникНеЧислится Тогда
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАннулировать;
		Иначе
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.Несоответствие;
		КонецЕсли;
	ИначеЕсли Запись.СостояниеСведений = Перечисления.СостоянияДокументаСЭДОФСС.Принят
		И ЗначениеЗаполнено(Запись.ФизическоеЛицо) И РеквизитыСведений = Неопределено И СостояниеРегистрации = Неопределено Тогда
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	ИначеЕсли ЗначениеЗаполнено(Запись.ПоследниеСведения) Тогда
		
		Если РеквизитыСведений = Неопределено Тогда
			ИменаПолей = ТребуемыеРеквизитыСведений();
			РеквизитыСведений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.ПоследниеСведения, ИменаПолей);
		КонецЕсли;
		
		Если Не РеквизитыСведений.Проведен Тогда
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.ВПроцессеПодготовки;
		ИначеЕсли Не ЗначениеЗаполнено(РеквизитыСведений.ДатаОтправки)
			Или Не ЗначениеЗаполнено(РеквизитыСведений.РегистрацияСведений) Тогда
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке;
		Иначе
			Если СостояниеРегистрации = Неопределено Тогда
				СостояниеРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					РеквизитыСведений.РегистрацияСведений,
					"Состояние");
			КонецЕсли;
			Возврат СостояниеРегистрации;
		КонецЕсли;
		
	ИначеЕсли Запись.КоличествоВходящихДокументов > 0
		И Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАннулировать;
		
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
КонецФункции

Функция СостояниеОтправленныхСведений(Запись, СостояниеРегистрации = Неопределено)
	// Состояние отправленных сведений необходимо для пользователей с сертификатами,
	//   которые только отправляют сведения в Фонд и контролируют что сведения дошли до Фонда.
	//   В их задачу не входит актуализация сведений,
	//   поэтому состояние определяется совсем не так как для последних сведений.
	//   Им важно видеть ошибки при отправке, а также что Фонд ответил на отправленные сведения.
	//   При этом, параллельно могут готовиться новые сведения другим пользователем,
	//   которые никак не должны влиять на состояние отправленных сведений.
	Если Не ЗначениеЗаполнено(Запись.ОтправленныеСведения) Тогда
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
	ИначеЕсли ЗначениеЗаполнено(Запись.Несоответствие) Тогда
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.Несоответствие;
	ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОтправки)
		Или Не ЗначениеЗаполнено(Запись.РегистрацияСведений) Тогда
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
	КонецЕсли;
	
	Если СостояниеРегистрации = Неопределено Тогда
		СостояниеРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.РегистрацияСведений, "Состояние");
	КонецЕсли;
	
	Возврат СостояниеРегистрации;
КонецФункции

Процедура ОтметитьСведенияКакПринятыеФондом(Страхователь, СНИЛС) Экспорт
	Набор = НачатьЗаписьНабора(Страхователь, СНИЛС);
	Если Набор = Неопределено Тогда
		Возврат;
	ИначеЕсли Набор.Количество() = 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	Запись = Набор[0];
	Запись.ТребуетсяСоздать          = Ложь;
	Запись.ТребуетсяАктуализировать  = Ложь;
	Запись.ТребуетсяАннулировать     = Ложь;
	Запись.ПоляТребующиеАктуализации = "";
	Запись.МаксимальнаяДатаОтправки  = '00010101';
	Запись.СостояниеСведений         = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	Запись.СостояниеОтправки         = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	Запись.ОтправленныеСведения      = Запись.ПоследниеСведения;
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ИзменитьФлажокСкрыть(Страхователь, СНИЛС, Скрыть) Экспорт
	Набор = НачатьЗаписьНабора(Страхователь, СНИЛС);
	Если Набор = Неопределено Тогда
		Возврат;
	ИначеЕсли Набор.Количество() = 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	Запись = Набор[0];
	Запись.Скрыть = Скрыть;
	Если Скрыть Тогда
		Запись.ДатаСкрытия = ТекущаяДата();
	КонецЕсли;
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура СкрытьВоеннослужащих(КадровыеДанныеСотрудника, Запись)
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная")
		И КадровыеДанныеСотрудника <> Неопределено И Не Запись.Скрыть Тогда
		ПеречислениеМенеджер = Перечисления["ВидыДоговоровССотрудниками"];
		Если (КадровыеДанныеСотрудника.ВидДоговора = ПеречислениеМенеджер.ВоеннослужащийПоПризыву
			Или КадровыеДанныеСотрудника.ВидДоговора = ПеречислениеМенеджер.КонтрактВоеннослужащего) Тогда
			Запись.Скрыть = Истина;
			Запись.ТребуетсяСоздать = Ложь;
			Запись.СостояниеСведений = Перечисления.СостоянияДокументаСЭДОФСС.НеПланируетсяОтправлять;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеТребованийПоАктуализацииПоКадровымДанным

Процедура ОбновитьТребованияПоАктуализации(Выборка, ДатаПоследнегоИзменения,
	КадровыеДанныеСотрудника = Неопределено, КадровыеДанныеФизическогоЛица = Неопределено, ПерезаполненаСсылкаСотрудника = Ложь) Экспорт
	
	Набор = НачатьЗаписьНабора(Выборка.Страхователь, Выборка.СНИЛС);
	Если Набор = Неопределено Тогда
		Возврат;
	ИначеЕсли Набор.Количество() = 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	Запись = Набор[0];
	
	Запись.ТребуетсяАннулировать     = Ложь;
	Запись.ПоляТребующиеАктуализации = "";
	ОбновитьПоляТребующиеАктуализации(Запись, КадровыеДанныеСотрудника, КадровыеДанныеФизическогоЛица, ПерезаполненаСсылкаСотрудника);
	
	Если ПерезаполненаСсылкаСотрудника И Не ЗначениеЗаполнено(Запись.ПоляТребующиеАктуализации) Тогда
		// В данных для СЭДО изменений нет, изменена только ссылка сотрудника.
		// Скорее всего, сотрудник был уволен и вновь принят на работу спустя непродолжительное время.
		// За время отсутствия есть вероятность что другой страхователь успел отправить данные за сотрудника.
		// Поэтому рекомендуется повторная отправка сведений - чтобы подтвердить привязку к страхователю.
		Запись.ПоляТребующиеАктуализации = НСтр("ru = 'Ссылка сотрудника';
												|en = 'Employee link'");
	КонецЕсли;
	
	Если ПустаяСтрока(Запись.ПоляТребующиеАктуализации) Тогда
		Запись.ТребуетсяАктуализировать  = Ложь;
		Запись.СостояниеСведений         = СостояниеПоследнихСведений(Запись);
		Если Не Запись.ТребуетсяСоздать Тогда
			Запись.МаксимальнаяДатаОтправки = '00010101';
		КонецЕсли;
	Иначе
		Запись.ТребуетсяАктуализировать = Истина;
		Запись.СостояниеСведений        = ?(Запись.ТребуетсяАннулировать,
			Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАннулировать,
			Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАктуализировать);
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			ДатаИзменения = ДатаПоследнегоИзменения;
		ИначеЕсли ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаУвольнения) Тогда
			ДатаИзменения = Мин(КадровыеДанныеСотрудника.ДатаУвольнения, ДатаПоследнегоИзменения);
		ИначеЕсли ЗначениеЗаполнено(КадровыеДанныеСотрудника.ОкончаниеДействия)
			И КадровыеДанныеСотрудника.ОкончаниеДействия < ТекущаяДатаСеанса() Тогда
			ДатаИзменения = Мин(КадровыеДанныеСотрудника.ОкончаниеДействия, ДатаПоследнегоИзменения);
		ИначеЕсли ЗначениеЗаполнено(КадровыеДанныеСотрудника.НачалоДействия) Тогда
			ДатаИзменения = Макс(КадровыеДанныеСотрудника.НачалоДействия, ДатаПоследнегоИзменения);
		Иначе
			ДатаИзменения = ДатаПоследнегоИзменения;
		КонецЕсли;
		ОбновитьМаксимальнуюДатуОтправки(Запись, ДатаИзменения);
	КонецЕсли;
	
	СкрытьВоеннослужащих(КадровыеДанныеСотрудника, Запись);
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ОбновитьПоляТребующиеАктуализации(Запись, КадровыеДанныеСотрудника, КадровыеДанныеФизическогоЛица, ПерезаполненаСсылкаСотрудника)
	Сведения = Запись.ПоследниеСведения;
	Если Не ЗначениеЗаполнено(Сведения) Тогда
		Сведения = Запись.ОтправленныеСведения;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОбъект = Сведения.ПолучитьОбъект();
	Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
		СведенияОбъект.ДополнительныеСвойства.Вставить("КадровыеДанныеФизическогоЛица", КадровыеДанныеФизическогоЛица);
	КонецЕсли;
	Если КадровыеДанныеСотрудника <> Неопределено Тогда
		СведенияОбъект.ДополнительныеСвойства.Вставить("КадровыеДанные", КадровыеДанныеСотрудника);
		// Актуализация оснований заполнения кадровых данных в случае совпадения СНИЛС и несоответствия ссылок.
		Если СведенияОбъект.СНИЛС = КадровыеДанныеСотрудника.СтраховойНомерПФР
			И СведенияОбъект.Сотрудник <> КадровыеДанныеСотрудника.Сотрудник Тогда
			СведенияОбъект.Организация    = КадровыеДанныеСотрудника.Организация;
			СведенияОбъект.Сотрудник      = КадровыеДанныеСотрудника.Сотрудник;
			СведенияОбъект.ФизическоеЛицо = КадровыеДанныеСотрудника.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		// Актуализация оснований заполнения кадровых данных.
		СведенияОбъект.Организация    = Неопределено;
		СведенияОбъект.Сотрудник      = Неопределено;
		СведенияОбъект.ФизическоеЛицо = Неопределено;
	КонецЕсли;
	
	// Очистка реквизитов которые отключают заполнение вторичных данных.
	СведенияОбъект.ДатаОтправки        = Неопределено;
	СведенияОбъект.РегистрацияСведений = Неопределено;
	
	// Отключение заполнения реквизитов которые не относятся к кадровым данным (не влияют на необходимость отправки).
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательНаименование");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательЭлектроннаяПочта");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательТелефон");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "КодПодчиненностиФСС");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставитель");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительДолжность");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительОснованиеПодписи");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительФИО");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительТелефон");
	
	ИсправленияДоОбновления = СведенияОбъект.ФиксацияИзменений.Выгрузить();
	
	ПараметрыФиксации = Документы.СведенияОЗастрахованномЛицеФСС.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.ФиксироватьОтличия = Истина;
	ПараметрыФиксации.ИзменятьДанныеПриФиксацииОтличий = Истина;
	Модифицирован = СведенияОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
	
	Если ПерезаполненаСсылкаСотрудника
		И ЗначениеЗаполнено(Запись.ОтправленныеСведения)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ОтправленныеСведения, "Сотрудник") = СведенияОбъект.Сотрудник Тогда
		ПерезаполненаСсылкаСотрудника = Ложь;
	КонецЕсли;
	
	Если Не Модифицирован Тогда
		Возврат;
	КонецЕсли;
	
	Фильтр = Новый Структура("ИмяРеквизита, Путь, ИдентификаторСтроки");
	НовыеИсправления = СведенияОбъект.ФиксацияИзменений.Выгрузить();
	Для Каждого ИсправлениеДоОбновления Из ИсправленияДоОбновления Цикл
		ЗаполнитьЗначенияСвойств(Фильтр, ИсправлениеДоОбновления);
		Найденные = НовыеИсправления.НайтиСтроки(Фильтр);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			НовыеИсправления.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Если НовыеИсправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеСмысловыеГруппы = Новый Массив;
	ИзмененныеРеквизиты = НовыеИсправления.ВыгрузитьКолонку("ИмяРеквизита");
	ВыгружаютсяПрочиеДанные = Не СведенияОбъект.НеЧислилсяВОрганизации И Не ЗначениеЗаполнено(СведенияОбъект.ДатаУвольнения);
	Для Каждого ИмяРеквизита Из ИзмененныеРеквизиты Цикл
		Если ИмяРеквизита = "СотрудникФамилия" Тогда
			СмысловаяГруппа = НСтр("ru = 'Фамилия';
									|en = 'Last name'");
		ИначеЕсли ИмяРеквизита = "СотрудникИмя" Тогда
			СмысловаяГруппа = НСтр("ru = 'Имя';
									|en = 'First name'");
		ИначеЕсли ИмяРеквизита = "СотрудникОтчество" Тогда
			СмысловаяГруппа = НСтр("ru = 'Отчество';
									|en = 'Middle name'");
		ИначеЕсли ИмяРеквизита = "ДатаРождения" Или ИмяРеквизита = "Пол" Тогда
			СмысловаяГруппа = НСтр("ru = 'Паспортные данные';
									|en = 'Passport data'");
		ИначеЕсли ИмяРеквизита = "ДатаУвольнения" Тогда
			СмысловаяГруппа = НСтр("ru = 'Дата увольнения';
									|en = 'Date of dismissal'");
		ИначеЕсли ИмяРеквизита = "НеЧислилсяВОрганизации" Тогда
			Если СведенияОбъект.НеЧислилсяВОрганизации Тогда
				Запись.ТребуетсяАннулировать = Истина;
				СмысловаяГруппа = НСтр("ru = 'Не числился в организации';
										|en = 'Was not listed in the company'");
			Иначе
				СмысловаяГруппа = НСтр("ru = 'Числился в организации';
										|en = 'Was listed in the company'");
			КонецЕсли;
		ИначеЕсли ВыгружаютсяПрочиеДанные Тогда
			Если СтрНачинаетсяС(ИмяРеквизита, "УдостоверениеЛичности") Тогда
				СмысловаяГруппа = НСтр("ru = 'Паспортные данные';
										|en = 'Passport data'");
			ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "АдресРегистрации")
				И РеквизитыАдресаИзменены(ИмяРеквизита, "АдресРегистрации", СведенияОбъект) Тогда
				СмысловаяГруппа = НСтр("ru = 'Адрес регистрации';
										|en = 'Registration address'");
			ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "РазрешениеНаПроживание") Тогда
				СмысловаяГруппа = НСтр("ru = 'РВП/ВНЖ';
										|en = 'Temporary residence permit/Lawful permanent residence'");
			ИначеЕсли (СтрНачинаетсяС(ИмяРеквизита, "Банк") Или ИмяРеквизита = "НомерСчета")
				И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
				СмысловаяГруппа = НСтр("ru = 'Способ выплаты';
										|en = 'Payment method'");
			ИначеЕсли ИмяРеквизита = "КартаМИР"
				И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
				СмысловаяГруппа = НСтр("ru = 'Способ выплаты';
										|en = 'Payment method'");
			ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "АдресПроживания")
				И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом
				И РеквизитыАдресаИзменены(ИмяРеквизита, "АдресПроживания", СведенияОбъект) Тогда
				СмысловаяГруппа = НСтр("ru = 'Адрес проживания';
										|en = 'Address of residence'");
			ИначеЕсли ИмяРеквизита = "СНИЛС" Тогда
				СмысловаяГруппа = НСтр("ru = 'СНИЛС';
										|en = 'SNILS'");
			ИначеЕсли ИмяРеквизита = "СотрудникИНН" Тогда
				СмысловаяГруппа = НСтр("ru = 'ИНН';
										|en = 'TIN'");
			ИначеЕсли ИмяРеквизита = "ВидОсобойЗоны"
				Или ИмяРеквизита = "ОтношениеКОсобойЗоне"
				Или ИмяРеквизита = "ПричинаПредоставленияЛьготы" Тогда
				СмысловаяГруппа = НСтр("ru = 'Льготы';
										|en = 'Benefits'");
			Иначе
				// Отслеживаются изменения только тех реквизитов, которые отправляются в электронном виде.
				// Единственное исключение - когда изменена ссылка сотрудника. Подробности ниже.
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ИзмененныеСмысловыеГруппы, СмысловаяГруппа);
	КонецЦикла;
	
	Запись.ПоляТребующиеАктуализации = СтрСоединить(ИзмененныеСмысловыеГруппы, ", ");
КонецПроцедуры

#КонецОбласти

#Область Регламенты

Функция МаксимальнаяДатаОтправки(ДатаПоследнегоИзменения)
	Возврат СЭДОФСС.СледующийРабочийДень(ДатаПоследнегоИзменения, РабочихДнейНаОтправкуНовыхСведений());
КонецФункции

Функция РабочихДнейНаОтправкуНовыхСведений()
	Возврат 3;
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗастрахованныеЛицаСЭДО.СНИЛС КАК СНИЛС,
	|	ЗастрахованныеЛицаСЭДО.Страхователь КАК Страхователь,
	|	ЗастрахованныеЛицаСЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗастрахованныеЛицаСЭДО.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЗастрахованныеЛицаСЭДО.СНИЛС = &СтарыйСНИЛС КАК ЭтоСтарыйСНИЛС,
	|	ЗастрахованныеЛицаСЭДО.СНИЛС = &НовыйСНИЛС КАК ЭтоНовыйСНИЛС,
	|	ЗастрахованныеЛицаСЭДО.КоличествоВходящихДокументов > 0 КАК ЕстьВходящиеДокументы,
	|	ЗастрахованныеЛицаСЭДО.ДатаОтправки <> ДАТАВРЕМЯ(1, 1, 1) КАК ЕстьОтправленныеСведения,
	|	ЗастрахованныеЛицаСЭДО.Скрыть КАК Скрыть,
	|	ЕСТЬNULL(ДанныеОтправленныхСведений.НеЧислилсяВОрганизации, ЛОЖЬ) КАК ДанныеОтправленныхСведенийНеЧислилсяВОрганизации
	|ИЗ
	|	РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованномЛицеФСС КАК ДанныеОтправленныхСведений
	|		ПО ЗастрахованныеЛицаСЭДО.ОтправленныеСведения = ДанныеОтправленныхСведений.Ссылка
	|ГДЕ
	|	(ЗастрахованныеЛицаСЭДО.СНИЛС = &НовыйСНИЛС
	|			ИЛИ ЗастрахованныеЛицаСЭДО.ФизическоеЛицо = &ФизическоеЛицо)";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("СтарыйСНИЛС",    СтарыйСНИЛС);
	Запрос.УстановитьПараметр("НовыйСНИЛС",     НовыйСНИЛС);
	
	Фильтр = Новый Структура("Страхователь, ЭтоСтарыйСНИЛС, ЭтоНовыйСНИЛС");
	Фильтр.ЭтоСтарыйСНИЛС = Ложь;
	Фильтр.ЭтоНовыйСНИЛС  = Истина;
	
	// Стратегия:
	// 1. По старому СНИЛС, если нет входящих и отправленных документов по старому СНИЛС:
	// 1.1. Если в регистре уже есть запись по новому СНИЛС => Удаление записи регистра.
	// 1.2. Если в регистре еще нет записей по новому СНИЛС => Замена СНИЛС в записи регистра регистра.
	// 2. По старому СНИЛС, если есть входящие или отправленные документы => Очистка ссылки физлица в записи регистра.
	// 3. По новому СНИЛС => Заполнение ссылки физлица в существующих записях регистра.
	// 4. По "левому" (не старому и не новому) СНИЛС привязанному к тому же физлицу:
	// 4.1. Если нет входящих и отправленных документов => Удаление записи регистра.
	// 4.2. Если есть входящие или отправленные документы => Очистка ссылки физлица.
	//
	// В исходящих документах СНИЛС не меняется, остается для истории.
	
	СтратегияОчисткиСсылки  = 1;
	СтратегияЗаменыСсылки   = 2;
	СтратегияЗаменыСНИЛС    = 3;
	СтратегияУдаленияЗаписи = 9;
	
	ЕстьДанныеПоНовомуСНИЛС           = Ложь;
	ЕстьДанныеПоСтаромуСНИЛС          = Ложь;
	ВсеДанныеПоСтаромуСНИЛСПеренесены = Истина;
	
	ТаблицаОбновленияКД = РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ПустаяТаблицаОбновления();
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ЭтоСтарыйСНИЛС Тогда
			ЕстьДанныеПоСтаромуСНИЛС = Истина;
			Если Не СтрокаТаблицы.ЕстьВходящиеДокументы И Не СтрокаТаблицы.ЕстьОтправленныеСведения Тогда
				Фильтр.Страхователь = СтрокаТаблицы.Страхователь;
				Найденные = Таблица.НайтиСтроки(Фильтр);
				Если Найденные.Количество() > 0 Тогда
					// Нет документов по старому СНИЛС, но есть данные по новому СНИЛС => Удаление данных по старому СНИЛС.
					Стратегия = СтратегияУдаленияЗаписи;
				Иначе
					// Нет документов по старому СНИЛС и нет данных по новому СНИЛС => Замена СНИЛС в данных регистра.
					Стратегия = СтратегияЗаменыСНИЛС;
				КонецЕсли;
			Иначе // Есть документы СЭДО по старому СНИЛС => Очистка физлица в регистре.
				Стратегия = СтратегияОчисткиСсылки;
				ВсеДанныеПоСтаромуСНИЛСПеренесены = Ложь;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ЭтоНовыйСНИЛС Тогда
			// По новому СНИЛС - установка физлица во входящих документах и в регистре.
			Стратегия = СтратегияЗаменыСсылки;
			ЕстьДанныеПоНовомуСНИЛС = Истина;
		Иначе // По "левому" СНИЛС привязанному к тому же физлицу - либо очистка физлица, либо удаление записи.
			Если СтрокаТаблицы.ЕстьВходящиеДокументы Или СтрокаТаблицы.ЕстьОтправленныеСведения Тогда
				Стратегия = СтратегияОчисткиСсылки;
			Иначе
				Стратегия = СтратегияУдаленияЗаписи; // СНИЛС совсем "левый" - по нему ничего нет.
			КонецЕсли;
		КонецЕсли;
		
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.Страхователь, СтрокаТаблицы.СНИЛС);
		Если Набор <> Неопределено Тогда
			Если Набор.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(Набор);
				Продолжить;
			КонецЕсли;
			ЕстьИзменения = Ложь;
			Если Стратегия = СтратегияУдаленияЗаписи Тогда
				Набор.Очистить();
				ЕстьИзменения = Истина;
			ИначеЕсли Стратегия = СтратегияЗаменыСНИЛС Тогда
				НаборПоНовомуСНИЛС = НачатьЗаписьНабора(СтрокаТаблицы.Страхователь, НовыйСНИЛС);
				Если НаборПоНовомуСНИЛС <> Неопределено Тогда
					Для Каждого ЗаписьПоСтаромуСНИЛС Из Набор Цикл
						ЗаписьПоНовомуСНИЛС = НаборПоНовомуСНИЛС.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьПоНовомуСНИЛС, ЗаписьПоСтаромуСНИЛС);
						ЗаписьПоНовомуСНИЛС.СНИЛС = НовыйСНИЛС;
						ЗаполнитьЗначенияСвойств(ТаблицаОбновленияКД.Добавить(), ЗаписьПоНовомуСНИЛС);
					КонецЦикла;
					ЗавершитьЗаписьНабора(НаборПоНовомуСНИЛС);
				КонецЕсли;
				Набор.Очистить();
				ЕстьИзменения = Истина;
			Иначе
				Для Каждого Запись Из Набор Цикл
					Если Стратегия = СтратегияОчисткиСсылки
						И ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
						ЕстьИзменения = Истина;
						Запись.ФизическоеЛицо            = Справочники.ФизическиеЛица.ПустаяСсылка();
						Запись.ТребуетсяАннулировать     = Не СтрокаТаблицы.ДанныеОтправленныхСведенийНеЧислилсяВОрганизации;
						Запись.ТребуетсяАктуализировать  = Ложь;
						Запись.ПоляТребующиеАктуализации = "";
						ЗаполнитьЗначенияСвойств(ТаблицаОбновленияКД.Добавить(), Запись);
					ИначеЕсли Стратегия = СтратегияЗаменыСсылки
						И Запись.ФизическоеЛицо <> ФизическоеЛицо Тогда
						ЕстьИзменения = Истина;
						Запись.ФизическоеЛицо            = ФизическоеЛицо;
						Запись.ТребуетсяАннулировать     = Ложь;
						Запись.ТребуетсяАктуализировать  = Истина;
						Запись.ПоляТребующиеАктуализации = НСтр("ru = '<Данные обновляются, пожалуйста, подождите...>';
																|en = '<Updating the data. Please, wait...>'");
						ЗаполнитьЗначенияСвойств(ТаблицаОбновленияКД.Добавить(), Запись);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЕстьИзменения Тогда
				ЗавершитьЗаписьНабора(Набор);
			Иначе
				ОтменитьЗаписьНабора(Набор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновлениеПоТаблице(ТаблицаОбновленияКД);
	
	ВсеДанныеПеренесены = ЕстьДанныеПоСтаромуСНИЛС И ВсеДанныеПоСтаромуСНИЛСПеренесены;
	Если Не ВсеДанныеПеренесены Или Не ЕстьДанныеПоНовомуСНИЛС Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		ДобавитьСведенияОНовыхСотрудниках(Неопределено, Массив);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Организации

Функция ВсеСтрахователиСведенияОбОрганизации(ВсеСтрахователи, Знач Организация)
	Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Организация = ОписаниеТипа.ПривестиЗначение(Организация);
	КонецЕсли;
	СтрокаТаблицы = ВсеСтрахователи.Найти(Организация, "Организация");
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы;
	КонецЕсли;
	СтрокаТаблицы = ВсеСтрахователи.Добавить();
	СтрокаТаблицы.Организация = Организация;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
		СтрокаТаблицы.Страхователь        = СЭДОФСС.СтраховательОрганизации(СтрокаТаблицы.Организация);
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(СтрокаТаблицы.Организация);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Страхователь) Тогда
		СтрокаТаблицы.Страхователь = СтрокаТаблицы.Организация;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ГоловнаяОрганизация) Тогда
		СтрокаТаблицы.ГоловнаяОрганизация = СтрокаТаблицы.Организация;
	КонецЕсли;
	Возврат СтрокаТаблицы;
КонецФункции

#КонецОбласти

Функция РеквизитыАдресаИзменены(ИмяРеквизита, ИмяАдреса, СведенияОбъект)
	Возврат ИмяРеквизита = ИмяАдреса + "ФИАСДом" Или ИмяРеквизита = ИмяАдреса + "Квартира" Или ИмяРеквизита = ИмяАдреса + "Индекс"
				Или (Не ЗначениеЗаполнено(СведенияОбъект[ИмяАдреса + "ФИАСДом"]) И (ИмяРеквизита = ИмяАдреса + "ФИАСРО" 
				Или ИмяРеквизита = ИмяАдреса + "Дом" Или ИмяРеквизита = ИмяАдреса + "Корпус"));
КонецФункции

#КонецОбласти

#КонецЕсли
