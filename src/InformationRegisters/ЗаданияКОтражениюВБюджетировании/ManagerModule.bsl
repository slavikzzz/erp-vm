#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция определяет требуется ли отразить факт в бюджетировании при формировании отчета.
//
// Параметры:
//  НачалоПериода  - Дата - Необязательный, начало периода.
//  КонецПериода  - Дата - Необязательный, окончание периода.
//  КоличествоНеактуальныхДокументов  - Число - В параметр сохраняется количество документов для отражения факта.
//  ВсегдаАктуализировать - Булево - Необязательный. Если истина, то функция выполняется всегда,
//							если ложь, то проверяется константа АктуализироватьФактБюджетированияПриФормированииОтчетов.								     
//
// Возвращаемое значение:
//   Булево - Признак, что требуется отразить факт в бюджетировании при формировании отчета. 
//
Функция ТребуетсяОтражениеВБюджетированииДляОтчетаЗаПериод(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено, 
															КоличествоНеактуальныхДокументов = 0, ВсегдаАктуализировать = Ложь, ИменаВидовДокументов = Неопределено) Экспорт
															
	Если Не ВсегдаАктуализировать Тогда
		Если Не Константы.АктуализироватьФактБюджетированияПриФормированииОтчетов.Получить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИменаВидовДокументов = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|ГДЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
		|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = Дата(1,1,1);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = Дата(3999, 12, 31, 23, 59, 59);
	КонецЕсли;
	
	ФактическиеДанныеБюджетированияСервер.ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц, ИменаВидовДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеДокументыКОтражению.Документ) КАК Количество
	|ИЗ
	|	ДокументыКОтражению КАК ВсеДокументыКОтражению";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоНеактуальныхДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоНеактуальныхДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоНеактуальныхДокументов > 0;
	
КонецФункции


#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.14.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("efa80345-df9c-4eb9-a49d-a05b26a19acb");
	Обработчик.Многопоточный = Ложь;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Удаление записей по документам ""(не используется) Регистратор договора с поставщиком (соглашения с поставщиком)""';
									|en = 'Delete records by the ""(not used) Contract with vendor (terms of purchase) recorder"" documents'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ПолноеИмя());

	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюВБюджетировании.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|ГДЕ
		|	ЗаданияКОтражениюВБюджетировании.Документ ССЫЛКА Документ.УдалитьРегистраторГрафикаДвиженияТоваров
		|";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ПолноеИмя();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	МетаданныеРегистра    = Метаданные.РегистрыСведений.ЗаданияКОтражениюВБюджетировании;
	ПолноеИмяРегистра     = МетаданныеРегистра.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			// Блокировка регистра распределения запасов.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКОтражениюВБюджетировании");
			ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ, Истина);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбработкаЗавершена = Ложь;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Неопределено);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли