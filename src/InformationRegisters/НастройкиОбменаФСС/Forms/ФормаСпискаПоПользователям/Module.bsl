&НаКлиенте
Перем КонтекстЭДО;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Заголовок, Истина);
	
	ОрганизацияСсылка = Параметры.ОрганизацияСсылка;
	
	ИспользоватьНесколько = 1;
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗаписьСсылка = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ОрганизацияСсылка);
	Иначе
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КонецЕсли;
	
	ЭтоПолноправныйПользователь =
		ОбщегоНазначения.РазделениеВключено() И КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(МестоХраненияКлюча)
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ИспользоватьНесколько.Доступность = ЭтоПолноправныйПользователь
		ИЛИ Параметры.УстановленоИспользоватьНесколько;
	
	ЕстьРеквизитНаименованиеСокращенное = Метаданные.Справочники.Организации.Реквизиты.Найти(
		"НаименованиеСокращенное") <> Неопределено;
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка,
		?(ЕстьРеквизитНаименованиеСокращенное, "НаименованиеСокращенное", "Наименование"));
	
	ТекстЗаголовка = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(
		НСтр("ru = 'Настройки отправки отчетности в ФСС по пользователям';
			|en = 'Настройки отправки отчетности в ФСС по пользователям'"), Истина);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок,
		ИспользуетсяОднаОрганизация,
		НаименованиеОрганизации,
		ТекстЗаголовка);
	
	ЗаполнитьНастройкиОбменаПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	СохранитьНаСервере();
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пользователь = ПользователиКлиент.ТекущийПользователь() Тогда
		ТекстСообщения =
			НСтр("ru = 'Для текущего пользователя следует выбрать сертификат из хранилища сертификатов, двойным нажатием мыши по записи';
				|en = 'Для текущего пользователя следует выбрать сертификат из хранилища сертификатов, двойным нажатием мыши по записи'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСертификатПослеПомещенияФайла", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения,,,, УникальныйИдентификатор);
		
	#Иначе
		// инициализируем свойства диалога
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата страхователя';
								|en = 'Выберите файл сертификата страхователя'");
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПроверятьСуществованиеФайла = Истина;
		Диалог.Фильтр = НСтр("ru = 'Сертификат (*.cer)|*.cer';
							|en = 'Сертификат (*.cer)|*.cer'");
		
		// показываем диалог
		Если НЕ Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		
		ЗагрузитьСертификатИмпортироватьСертификат(АдресФайла);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СертификатСтрахователяПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СертификатСтрахователяПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение,
		МестоХраненияКлюча,
		СертификатСтрахователяОтпечаток,
		"My");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСтрахователяПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СертификатСтрахователяОтпечаток = "";
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча,
		Элементы.СертификатСтрахователяПредставление,
		СертификатСтрахователяОтпечаток,
		ЭтотОбъект,
		"СертификатСтрахователяПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСтрахователяПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СвойстваСертификата = Новый Структура;
	СвойстваСертификата.Вставить("Отпечаток", СертификатСтрахователяОтпечаток);
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, СвойстваСертификата);
	КриптографияЭДКОКлиент.ПоказатьСертификат(СвойстваСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДоверенностьНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Организация", ОрганизацияСсылка)),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов();
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча,
		Элементы.СертификатСтрахователяПредставление,
		СертификатСтрахователяОтпечаток,
		ЭтотОбъект,
		"СертификатСтрахователяПредставление");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Неопределено И (Поле.Имя = "СписокСертификатСтрахователяПредставление"
		ИЛИ Поле.Имя = "СписокДоверенность") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьСертификатСтрахователяСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатСтрахователяПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьСертификатСтрахователяСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатСтрахователяПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ТекущиеДанные.СертификатСтрахователяОтпечаток 		= "";
	ТекущиеДанные.СертификатСтрахователяОшибка 			= "";
	ТекущиеДанные.СертификатСтрахователяПредставление 	= "";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатСтрахователяПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестоХраненияКлючаПользователя = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(
		Элементы.Список.ТекущиеДанные.МодельХраненияЗакрытогоКлюча, УчетнаяЗаписьСсылка);
	СвойстваСертификата = Новый Структура;
	СвойстваСертификата.Вставить("Отпечаток", Элементы.Список.ТекущиеДанные.СертификатСтрахователяОтпечаток);
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлючаПользователя, СвойстваСертификата);
	КриптографияЭДКОКлиент.ПоказатьСертификат(СвойстваСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоверенностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокДоверенностьНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиФСС.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Организация", ОрганизацияСсылка)),
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДО = Результат.КонтекстЭДО;
	
	ОбновитьНастройкиОбменаПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСтрахователяПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыбранныйСертификатСтрахователя = Результат.ВыбранноеЗначение;
		ВыбранныйСертификатСтрахователя = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВыбранныйСертификатСтрахователя, Ложь);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, ВыбранныйСертификатСтрахователя);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СертификатСтрахователя", 				ВыбранныйСертификатСтрахователя);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, ДополнительныеПараметры);
		Оповещение = Новый ОписаниеОповещения("СертификатСтрахователяПредставлениеНачалоВыбораПослеПроверкиУЦ",
			ЭтотОбъект, ДополнительныеПараметры);
		
		КонтекстЭДО.ПроверитьУЦСертификатаСтрахователя(
			Оповещение,
			МестоХраненияКлюча,
			ВыбранныйСертификатСтрахователя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСертификатИмпортироватьСертификат(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатИмпортироватьСертификат(Адрес)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСертификатПослеПомещенияФайлаПослеПолученияДанныхФайла",
		ЭтотОбъект);
	
	ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(ОписаниеОповещения, Адрес, ".cer");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатПослеПомещенияФайлаПослеПолученияДанныхФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаСертификата = Результат.ИмяФайла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСертификатПослеПомещенияФайлаПослеИмпортаСертификата",
		ЭтотОбъект);
	
	КриптографияЭДКОКлиент.ИмпортироватьСертификат(ОписаниеОповещения, ИмяФайлаСертификата, "AddressBook");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатПослеПомещенияФайлаПослеИмпортаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСертификата = Результат.СвойстваСертификата;
	
	ЗадатьСертификатСтрахователя(СвойстваСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементов()
	
	Элементы.ЗагрузитьСертификат.Доступность 				= (ИспользоватьНесколько = 1);
	Элементы.ЗагрузитьСертификат.Видимость 					= ЭтоПолноправныйПользователь;
	Элементы.СертификатСтрахователяПредставление.Видимость 	= (ИспользоватьНесколько <> 1);
	Элементы.Доверенность.Видимость 						= (ИспользоватьНесколько <> 1);
	Элементы.Список.Видимость 								= (ИспользоватьНесколько = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОбменаПользователей()
	
	СертификатыСтрахователя = Новый Массив;
	Для каждого СвойстваОтпечаткаСертификата Из СвойстваУникальныхОтпечатковСертификатов Цикл
		СертификатСтрахователя = Новый Структура;
		СертификатСтрахователя.Вставить("Отпечаток", СвойстваОтпечаткаСертификата.СертификатСтрахователяОтпечаток);
		МестоХраненияКлючаПользователя = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(
			СвойстваОтпечаткаСертификата.МодельХраненияЗакрытогоКлюча, УчетнаяЗаписьСсылка);
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлючаПользователя, СертификатСтрахователя);
		
		СертификатыСтрахователя.Добавить(СертификатСтрахователя);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиОбменаПользователейПослеПоискаСертификатов", ЭтотОбъект);
	КриптографияЭДКОКлиент.НайтиСертификаты(
		Оповещение,
		СертификатыСтрахователя,,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОбменаПользователейПослеПоискаСертификатов(Результат, ДополнительныеПараметры) Экспорт
	
	НайденныеСертификаты = Новый Соответствие;
	Если Результат.Выполнено Тогда
		Для каждого НайденныйСертификат Из Результат.Сертификаты Цикл
			Если ЗначениеЗаполнено(НайденныйСертификат.Отпечаток) Тогда
				НайденныеСертификаты.Вставить(НайденныйСертификат.Отпечаток, НайденныйСертификат);
			Конецесли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
	Список.Очистить();
	Для НомерОбхода = 1 По 2 Цикл
		ЭтоПоискТекущегоПользователя = (НомерОбхода = 1);
		
		Для каждого НастройкаОбменаПользователей Из НастройкиОбменаПользователей Цикл
			Если ЭтоПоискТекущегоПользователя И НастройкаОбменаПользователей.Пользователь <> ТекущийПользователь
				ИЛИ НЕ ЭтоПоискТекущегоПользователя И НастройкаОбменаПользователей.Пользователь = ТекущийПользователь Тогда
				
				Продолжить;
			КонецЕсли;
			
			ОтпечатокСертификата = НастройкаОбменаПользователей.СертификатСтрахователяОтпечаток;
			ОшибкаСертификата = "";
			ПредставлениеСертификата = НастройкаОбменаПользователей.СертификатСтрахователяОтпечаток;
			Если ЗначениеЗаполнено(НастройкаОбменаПользователей.СертификатСтрахователяОтпечаток) Тогда
				СвойстваСертификата = НайденныеСертификаты[НастройкаОбменаПользователей.СертификатСтрахователяОтпечаток];
				Если СвойстваСертификата <> Неопределено Тогда
					ОтпечатокСертификата = СвойстваСертификата.Отпечаток;
					ПредставлениеСертификата = КриптографияЭДКОКлиент.ПолноеПредставлениеСертификата(СвойстваСертификата);
				КонецЕсли;
				ОшибкаСертификата = ТекстОшибкиСертификата(СвойстваСертификата);
				ПредставлениеСертификата = ПредставлениеСертификата
					+ ?(ЗначениеЗаполнено(ОшибкаСертификата), " - " + ОшибкаСертификата, "");
			КонецЕсли;
			ЕстьПрава = ЭтоПолноправныйПользователь ИЛИ НастройкаОбменаПользователей.Пользователь = ТекущийПользователь;
			
			СтрокаСписка = Список.Добавить();
			СтрокаСписка.Пользователь 							= НастройкаОбменаПользователей.Пользователь;
			СтрокаСписка.НаименованиеПользователя 				= НастройкаОбменаПользователей.НаименованиеПользователя;
			СтрокаСписка.ПометкаУдаленияПользователя 			= НастройкаОбменаПользователей.ПометкаУдаленияПользователя;
			СтрокаСписка.СертификатСтрахователяОтпечаток 		= ОтпечатокСертификата;
			СтрокаСписка.СертификатСтрахователяПредставление 	= ПредставлениеСертификата;
			СтрокаСписка.СертификатСтрахователяОшибка 			= ОшибкаСертификата;
			СтрокаСписка.ЕстьПрава 								= ЕстьПрава;
			СтрокаСписка.Доверенность 							= НастройкаОбменаПользователей.Доверенность;
			СтрокаСписка.МодельХраненияЗакрытогоКлюча 			= НастройкаОбменаПользователей.МодельХраненияЗакрытогоКлюча;
		КонецЦикла;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиОбменаПользователейПослеОтображения", ЭтотОбъект);
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча,
		Элементы.СертификатСтрахователяПредставление,
		СертификатСтрахователяОтпечаток,
		ЭтотОбъект,
		"СертификатСтрахователяПредставление",
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОбменаПользователейПослеОтображения(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДоступностьЭлементов();
	Если НЕ Элементы.СертификатСтрахователяПредставление.Доступность Тогда
		ЗаголовокБезФорматирования = Строка(Элементы.СертификатСтрахователяПредставление.РасширеннаяПодсказка.Заголовок);
		Элементы.СертификатСтрахователяПредставление.РасширеннаяПодсказка.Заголовок = ЗаголовокБезФорматирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатСтрахователяСписка()
	
	Если НЕ Элементы.Список.ТекущиеДанные.ЕстьПрава Тогда
		ТекстСообения = НСтр("ru = 'Для изменения сертификатов страхователей других пользователей требуются полные права';
							|en = 'Для изменения сертификатов страхователей других пользователей требуются полные права'");
		ПоказатьПредупреждение(, ТекстСообения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатСтрахователяСпискаПослеВыбораСертификата", ЭтотОбъект);
	МестоХраненияКлючаПользователя = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(
		Элементы.Список.ТекущиеДанные.МодельХраненияЗакрытогоКлюча, УчетнаяЗаписьСсылка);
	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение,
		МестоХраненияКлючаПользователя,
		Элементы.Список.ТекущиеДанные.СертификатСтрахователяОтпечаток,
		"My");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатСтрахователяСпискаПослеВыбораСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСертификата = Результат.ВыбранноеЗначение;
	
	ДополнительныеПараметры = Новый Структура("СертификатСтрахователя", СвойстваСертификата);
	Оповещение = Новый ОписаниеОповещения("ВыбратьСертификатСтрахователяСпискаПослеПроверкиУЦ",
		ЭтотОбъект, ДополнительныеПараметры);
	
	МестоХраненияКлючаПользователя = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(
		Элементы.Список.ТекущиеДанные.МодельХраненияЗакрытогоКлюча, УчетнаяЗаписьСсылка);
	КонтекстЭДО.ПроверитьУЦСертификатаСтрахователя(
		Оповещение,
		МестоХраненияКлючаПользователя,
		СвойстваСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСертификатСтрахователя(СвойстваСертификата)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СертификатСтрахователяОтпечаток = СвойстваСертификата.Отпечаток Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменяемыйОтпечаток = ТекущиеДанные.СертификатСтрахователяОтпечаток;
	
	ТекущиеДанные.СертификатСтрахователяОтпечаток = СвойстваСертификата.Отпечаток;
	ТекущиеДанные.СертификатСтрахователяОшибка = ТекстОшибкиСертификата(СвойстваСертификата);
	ТекущиеДанные.СертификатСтрахователяПредставление =
		КриптографияЭДКОКлиент.ПолноеПредставлениеСертификата(СвойстваСертификата)
		+ ?(ЗначениеЗаполнено(ТекущиеДанные.СертификатСтрахователяОшибка),
		" - " + ТекущиеДанные.СертификатСтрахователяОшибка, "");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОбменаПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Пользователь,
		|	"""" КАК НаименованиеПользователя,
		|	ЛОЖЬ КАК ПометкаУдаленияПользователя,
		|	НастройкиОбменаФСС.СертификатСтрахователяОтпечаток КАК СертификатСтрахователяОтпечаток,
		|	НастройкиОбменаФСС.Доверенность КАК Доверенность
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &Организация
		|	И НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Наименование КАК НаименованиеПользователя,
		|	Пользователи.ПометкаУдаления КАК ПометкаУдаленияПользователя,
		|	НастройкиОбменаФСС.СертификатСтрахователяОтпечаток КАК СертификатСтрахователяОтпечаток,
		|	НастройкиОбменаФСС.Доверенность КАК Доверенность
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|		ПО НастройкиОбменаФСС.Организация = &Организация
		|		И Пользователи.Ссылка = НастройкиОбменаФСС.Пользователь
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.Служебный
		|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеПользователя";
	
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	ПустойИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", ПустойИдентификаторПользователяИБ);
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	СертификатСтрахователяОтпечаток = "";
	НастройкиОбменаПользователей.Очистить();
	СвойстваУникальныхОтпечатковСертификатов.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Пользователь) Тогда
			Если НЕ ЗначениеЗаполнено(СертификатСтрахователяОтпечаток) Тогда
				СертификатСтрахователяОтпечаток = СтрокаТаблицы.СертификатСтрахователяОтпечаток;
				Доверенность 					= СтрокаТаблицы.Доверенность;
			КонецЕсли;
			
		Иначе
			МодельХраненияЗакрытогоКлюча = ?(ЗначениеЗаполнено(УчетнаяЗаписьСсылка),
				Мультирежим.МодельХраненияСертификатаПользователя(УчетнаяЗаписьСсылка, СтрокаТаблицы.Пользователь), Неопределено);
			МодельХраненияЗакрытогоКлюча = ?(ЗначениеЗаполнено(МодельХраненияЗакрытогоКлюча), МодельХраненияЗакрытогоКлюча,
				Перечисления.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч);
			
			СтрокаНастроек = НастройкиОбменаПользователей.Добавить();
			СтрокаНастроек.Пользователь 					= СтрокаТаблицы.Пользователь;
			СтрокаНастроек.НаименованиеПользователя 		= СтрокаТаблицы.НаименованиеПользователя;
			СтрокаНастроек.ПометкаУдаленияПользователя 		= СтрокаТаблицы.ПометкаУдаленияПользователя;
			СтрокаНастроек.СертификатСтрахователяОтпечаток 	= СтрокаТаблицы.СертификатСтрахователяОтпечаток;
			СтрокаНастроек.Доверенность 					= СтрокаТаблицы.Доверенность;
			СтрокаНастроек.МодельХраненияЗакрытогоКлюча 	= МодельХраненияЗакрытогоКлюча;
		Конецесли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СертификатСтрахователяОтпечаток) Тогда
			ПараметрыОтбора = Новый Структура("СертификатСтрахователяОтпечаток, МодельХраненияЗакрытогоКлюча",
				СтрокаТаблицы.СертификатСтрахователяОтпечаток, МодельХраненияЗакрытогоКлюча);
			МассивСтрок = СвойстваУникальныхОтпечатковСертификатов.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаСвойств = СвойстваУникальныхОтпечатковСертификатов.Добавить();
				СтрокаСвойств.СертификатСтрахователяОтпечаток 	= СтрокаТаблицы.СертификатСтрахователяОтпечаток;
				СтрокаСвойств.МодельХраненияЗакрытогоКлюча 		= МодельХраненияЗакрытогоКлюча;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	
	РегистрыСведений.НастройкиОбменаФСС.СохранитьСписокПользователей(
		ОрганизацияСсылка, 
		Список, 
		ИспользоватьНесколько, 
		СертификатСтрахователяОтпечаток, 
		Доверенность);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстОшибкиСертификата(СвойстваСертификата)
	
	Если СвойстваСертификата = Неопределено Тогда
		Возврат НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов';
					|en = 'Сертификат не зарегистрирован в системном хранилище сертификатов'");
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если ДатаСеанса > СвойстваСертификата.ДействителенПо Тогда
		Возврат НСтр("ru = 'Срок действия сертификата истек';
					|en = 'Срок действия сертификата истек'");
		
	ИначеЕсли ДатаСеанса < СвойстваСертификата.ДействителенС Тогда
		Возврат НСтр("ru = 'Срок действия сертификата еще не наступил';
					|en = 'Срок действия сертификата еще не наступил'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДоверенностьНачалоВыбораЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Доверенность = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСтрахователяПредставлениеНачалоВыбораПослеПроверкиУЦ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СертификатСтрахователяОтпечаток = ДополнительныеПараметры.СертификатСтрахователя.Отпечаток;
	
	КриптографияЭДКОКлиент.ОтобразитьПредставлениеСертификата(
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ДополнительныеПараметры),
		Элементы.СертификатСтрахователяПредставление,
		ДополнительныеПараметры.СертификатСтрахователя.Отпечаток,
		ЭтотОбъект,
		"СертификатСтрахователяПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатСтрахователяСпискаПослеПроверкиУЦ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗадатьСертификатСтрахователя(ДополнительныеПараметры.СертификатСтрахователя);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоверенностьНачалоВыбораЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.Список.ТекущиеДанные.Доверенность = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
