#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтатусГрафикаКонстанты

// Возвращает код статуса рабочего графика.
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусРабочийГрафик() Экспорт
	
	Возврат 0;
	
КонецФункции

// Возвращает код статуса предварительного графика. Предварительный график - это рассчитанный,
// но еще не записанный пользователем график производства заказа. После записи график переходит
// в статус "Рабочий" (см. СтатусРабочийГрафик).
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусПредварительныйГрафик() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает код статуса модели графика. Модель графика рассчитывается без учета одного или нескольких
// ограничений и не может быть сохранена как рабочий график.
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусМодельГрафика() Экспорт
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

#Область Запись

// Записывает результаты планирования графика распоряжения в регистр.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, график производства которого необходимо записать.
//  СтатусГрафика - Число - статус графика.
//  ГрафикПроизводства - ТаблицаЗначений - данные графика для записи. Состав колонок соответствует
//		составу измерений/ресурсов/реквизитов регистра.
//
Процедура ЗаписатьРезультатыПланирования(Распоряжение, СтатусГрафика, ГрафикПроизводства) Экспорт
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Отбор.СтатусГрафика.Установить(СтатусГрафика);
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.*
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В (&Этапы)");
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
		Запрос.УстановитьПараметр("Этапы", ГрафикПроизводства.ВыгрузитьКолонку("ЭтапПроизводства"));
		
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Для каждого Строка Из ГрафикПроизводства Цикл
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Распоряжение = Распоряжение;
		Запись.СтатусГрафика = СтатусГрафика;
		
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

// Изменяет статус предварительного графика на рабочий. Вместе с записью рабочего графика
// происходит очистка данных предварительного графика и модели.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - распоряжение, график которого необходимо записать.
//
Процедура ЗаписатьПредварительныйГрафикВРабочий(Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.НаКритическомПути,
	|	ГрафикЭтаповПроизводства2_2.ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию,
	|	ГрафикЭтаповПроизводства2_2.РазмещениеВыпуска
	|ПОМЕСТИТЬ ПредварительныйГрафик
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусПредварительныйГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныйГрафик.Распоряжение,
	|	ПредварительныйГрафик.ЭтапПроизводства,
	|	&СтатусРабочийГрафик КАК СтатусГрафика,
	|	ПредварительныйГрафик.НачалоЭтапа,
	|	ПредварительныйГрафик.ОкончаниеЭтапа,
	|	ПредварительныйГрафик.ОкончаниеПредварительногоБуфера,
	|	ПредварительныйГрафик.НачалоЗавершающегоБуфера,
	|	ПредварительныйГрафик.НачалоСледующегоЭтапа,
	|	ПредварительныйГрафик.НаКритическомПути,
	|	ПредварительныйГрафик.ОграничиваетСрокВыпуска,
	|	ПредварительныйГрафик.ОграниченПоМатериалам,
	|	ПредварительныйГрафик.ОграниченПоОборудованию,
	|	ПредварительныйГрафик.РазмещениеВыпуска
	|ИЗ
	|	ПредварительныйГрафик КАК ПредварительныйГрафик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.НаКритическомПути,
	|	ГрафикЭтаповПроизводства2_2.ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию,
	|	ГрафикЭтаповПроизводства2_2.РазмещениеВыпуска
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
	|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
	|				(ВЫБРАТЬ
	|					ПредварительныйГрафик.ЭтапПроизводства
	|				ИЗ
	|					ПредварительныйГрафик)");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("СтатусПредварительныйГрафик", СтатусПредварительныйГрафик());
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик());
	
	ДанныеГрафика = Запрос.Выполнить().Выгрузить();
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Загрузить(ДанныеГрафика);
	Набор.Записать();
	
КонецПроцедуры

// Очищает предварительный график распоряжения.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - распоряжение, график которого необходимо очистить.
//
Процедура ОчиститьПредварительныйГрафик(Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ГДЕ
	|			ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|			И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусПредварительныйГрафик) КАК ОчиститьПредварительныйГрафик,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ГДЕ
	|			ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|			И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусМодельГрафика) КАК ОчиститьМодель");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	СтатусПредварительныйГрафик = СтатусПредварительныйГрафик();
	Запрос.УстановитьПараметр("СтатусПредварительныйГрафик", СтатусПредварительныйГрафик);
	
	СтатусМодельГрафика = СтатусМодельГрафика();
	Запрос.УстановитьПараметр("СтатусМодельГрафика", СтатусМодельГрафика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ОчиститьПредварительныйГрафик Тогда
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Отбор.СтатусГрафика.Установить(СтатусПредварительныйГрафик);
		Набор.Записать();
	КонецЕсли;
	
	Если Выборка.ОчиститьМодель Тогда
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Отбор.СтатусГрафика.Установить(СтатусМодельГрафика);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Записывает заданное вручную размещение этапа в графике
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство.
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//  ГрафикПроизводства - См. УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике
//
Процедура ЗаписатьРучноеРазмещениеЭтапаВГрафике(Распоряжение, ЭтапПроизводства, ГрафикПроизводства) Экспорт
	
	СтатусГрафика = СтатусРабочийГрафик();
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Отбор.СтатусГрафика.Установить(СтатусГрафика);
	Набор.Отбор.ЭтапПроизводства.Установить(ЭтапПроизводства);
	
	Набор.Прочитать();
	
	Если Набор.Количество() > 0 Тогда
		Запись = Набор[0];
	Иначе
		Запись = Набор.Добавить();
	КонецЕсли;
	
	Запись.Распоряжение     = Распоряжение;
	Запись.СтатусГрафика    = СтатусГрафика;
	Запись.ЭтапПроизводства = ЭтапПроизводства;
	
	ЗаполнитьЗначенияСвойств(
		Запись,
		ГрафикПроизводства, 
		"НачалоЭтапа,
		|ОкончаниеПредварительногоБуфера,
		|НачалоЗавершающегоБуфера,
		|ОкончаниеЭтапа");
	
	Набор.Записать();
	
КонецПроцедуры

// Очищает график производства заданного массива этапов.
//
// Параметры:
//  Этапы - Массив - содержит ссылки на этапы производства, график которых необходимо очистить.
//
Процедура ОчиститьГрафикЭтапов(Этапы) Экспорт
	
	Для каждого Этап Из Этапы Цикл
		
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.ЭтапПроизводства.Установить(Этап);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Снимает флаги "НаКритическомПути" и "ОграничиваетСрокВыпуска" в графике этапа производства.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
Процедура ОчиститьПризнакЭтапНаКритическомПути(ЭтапПроизводства) Экспорт
	
	Менеджер = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьМенеджерЗаписи();
	Менеджер.Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтапПроизводства, "Распоряжение");
	Менеджер.ЭтапПроизводства = ЭтапПроизводства;
	Менеджер.СтатусГрафика = СтатусРабочийГрафик();
	Менеджер.Прочитать();
	
	Если Менеджер.Выбран() И Менеджер.НаКритическомПути Тогда
		
		Менеджер.НаКритическомПути = Ложь;
		Менеджер.ОграничиваетСрокВыпуска = Ложь;
		Менеджер.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Чтение

// Возвращает график производства этапов
//
// Параметры:
//  Этапы - Массив - Этапы производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - график производства этапов.
//
Функция ГрафикПроизводства(Этапы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Документ.Ссылка                                                    КАК Этап,
		|	НЕ График.НачалоЭтапа ЕСТЬ NULL                                    КАК Рассчитан,
		|	ЕСТЬNULL(График.НачалоЭтапа, ДАТАВРЕМЯ(1,1,1))                     КАК НачалоЭтапа,
		|	ЕСТЬNULL(График.ОкончаниеЭтапа, ДАТАВРЕМЯ(1,1,1))                  КАК ОкончаниеЭтапа,
		|	ЕСТЬNULL(График.ОкончаниеПредварительногоБуфера, ДАТАВРЕМЯ(1,1,1)) КАК ОкончаниеПредварительногоБуфера,
		|	ЕСТЬNULL(График.НачалоЗавершающегоБуфера, ДАТАВРЕМЯ(1,1,1))        КАК НачалоЗавершающегоБуфера,
		|	ЕСТЬNULL(График.НаКритическомПути, ЛОЖЬ)                           КАК НаКритическомПути,
		|	ЕСТЬNULL(График.ОграничиваетСрокВыпуска, ЛОЖЬ)                     КАК ОграничиваетСрокВыпуска
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
		|		ПО График.Распоряжение = Документ.Распоряжение
		|			И График.ЭтапПроизводства = Документ.Ссылка
		|			И (График.СтатусГрафика = &СтатусГрафика)
		|ГДЕ
		|	Документ.Ссылка В(&Этапы)");
	
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусРабочийГрафик());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса, который получает даты начала и окончания этапов по данным графика
//  (для не начатых этапов) и данным самого этапа (если этап начат или завершен).
//  При использовании функции запрос должен содержать параметр "СтатусГрафика" для выборки
//  графика с заданным статусом.
//
// Параметры:
//  ТаблицаЭтапы - Строка	 - имя временной таблицы, содержащей этапы для отбора данных.
//  ПолеЭтап	 - Строка	 - имя поля таблицы.
// 
// Возвращаемое значение:
//   - Строка - текст запроса создания временной таблицы ВТСрокиВыполненияЭтапов.
//
Функция ТекстЗапросаВТСрокиВыполненияЭтапов(ТаблицаЭтапы, ПолеЭтап) Экспорт
	
	Результат =
	"ВЫБРАТЬ
	|	График.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВЫБОР
	|		КОГДА Документ.Статус В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|			ТОГДА Документ.ФактическоеНачалоЭтапа
	|		ИНАЧЕ График.НачалоЭтапа
	|	КОНЕЦ КАК НачалоЭтапа,
	|	ВЫБОР
	|		КОГДА Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
	|			ТОГДА ВЫБОР
	|					КОГДА Документ.ДатаПроизводства >= График.ОкончаниеЭтапа
	|							И Документ.ДатаПроизводства >= Документ.ФактическоеНачалоЭтапа
	|						ТОГДА КОНЕЦПЕРИОДА(Документ.ДатаПроизводства, ДЕНЬ)
	|					КОГДА Документ.ФактическоеНачалоЭтапа >= График.ОкончаниеЭтапа
	|							И Документ.ФактическоеНачалоЭтапа >= Документ.ДатаПроизводства
	|						ТОГДА КОНЕЦПЕРИОДА(Документ.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					ИНАЧЕ График.ОкончаниеЭтапа
	|				КОНЕЦ
	|		КОГДА Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|			ТОГДА Документ.ФактическоеОкончаниеЭтапа
	|		ИНАЧЕ График.ОкончаниеЭтапа
	|	КОНЕЦ КАК ОкончаниеЭтапа
	|ПОМЕСТИТЬ ВТСрокиВыполненияЭтапов
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
	|		ПО График.ЭтапПроизводства = Документ.Ссылка
	|ГДЕ
	|	График.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				&ПолеЭтап
	|			ИЗ
	|				&ТаблицаЭтапы КАК Т)
	|	И График.СтатусГрафика = &СтатусГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства";
	
	Результат = СтрЗаменить(Результат, "&ТаблицаЭтапы", ТаблицаЭтапы);
	Результат = СтрЗаменить(Результат, "&ПолеЭтап", ПолеЭтап);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет содержит ли график производства изменения
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//  ГрафикПроизводства - См. УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике
// 
// Возвращаемое значение:
//   - Булево - Истина, если график производства содержит изменения.
//
Функция ИзменилосьРазмещениеЭтапаВГрафике(ЭтапПроизводства, ГрафикПроизводства) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА                                  КАК Рассчитан,
		|	Таблица.НачалоЭтапа                     КАК НачалоЭтапа,
		|	Таблица.ОкончаниеПредварительногоБуфера КАК ОкончаниеПредварительногоБуфера,
		|	Таблица.НачалоЗавершающегоБуфера        КАК НачалоЗавершающегоБуфера,
		|	Таблица.ОкончаниеЭтапа                  КАК ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства = &ЭтапПроизводства
		|	И Таблица.СтатусГрафика  = &СтатусГрафика");
	
	СтатусГрафика = СтатусРабочийГрафик();
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусРабочийГрафик());
	
	РазмещениеВГрафике = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(РазмещениеВГрафике, Выборка);
		
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначения.ДанныеСовпадают(РазмещениеВГрафике, ГрафикПроизводства);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли