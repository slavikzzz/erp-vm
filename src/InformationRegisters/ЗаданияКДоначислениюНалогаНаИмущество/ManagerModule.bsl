#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(Метаданные.Константы.НомерЗаданияКДоначислениюНалогаНаИмущество.Имя);
	
КонецФункции

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода выборки данных.
//	ОкончаниеПериода - Дата - Конец периода выборки данных.
//	НомерЗаданияДоРасчета - Число -
//	Организации - Массив из СправочникСсылка.Организации - Фильтр по организации.
//
// Возвращаемое значение:
//	Структура:
//		* СписокОрганизаций - Массив из СправочникСсылка.Организации - Организации, для которых есть задания.
//		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит в себе временную таблицу ЗаданияКРасчету.
//
Функция ЗаданияКРасчету(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета, Организации) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Месяц               КАК Месяц,
	|	Задания.ОбъектУчета         КАК ОбъектУчета,
	|	Задания.Организация         КАК Организация,
	|	Задания.НомерЗадания        КАК НомерЗадания,
	|	Задания.Документ            КАК Документ
	|
	|ПОМЕСТИТЬ ЗаданияКРасчету
	|
	|ИЗ
	|	РегистрСведений.ЗаданияКДоначислениюНалогаНаИмущество КАК Задания
	|
	|ГДЕ
	|	(Задания.Месяц >= &НачалоПериода 
	|		ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1,1,1))
	|	И (Задания.Месяц <= &ОкончаниеПериода
	|		ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1,1,1))
	|
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&Организации)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияКРасчету.Организация
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.Выполнить();
	
	ЗаданияКРасчету = Новый Структура;
	ЗаданияКРасчету.Вставить("СписокОрганизаций", Результат.Выгрузить().ВыгрузитьКолонку("Организация"));
	ЗаданияКРасчету.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Возврат ЗаданияКРасчету;
	
КонецФункции

// Создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//  Выборка	- ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, ОбъектУчета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ОбъектУчета) Тогда
				Продолжить;
			КонецЕсли;	
					
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(
				СтруктураПолей.Месяц, 
				СтруктураПолей.Документ, 
				СтруктураПолей.Организация, 
				СтруктураПолей.ОбъектУчета, 
				НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать задание к погашению стоимости ТМЦ за %1 в организации %2 по причине: %3';
				|en = 'Cannot generate a job to reimburse value of inventory for %1 in company %2. Reason: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца';
				|en = 'Month-end closing'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
			
		ВызватьИсключение ТекстОшибки;
			
	КонецПопытки;
	
КонецПроцедуры

// Фиксирует удачное выполнение операции.
//
// Параметры:
//  Период - Дата -
//  СписокОрганизаций - Массив - 
//  НомерДоРасчета - Число - 
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура ЗафиксироватьРасчет(Период, СписокОрганизаций, НомерДоРасчета, МенеджерВременныхТаблиц) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		УстановитьПривилегированныйРежим(Истина);
		
		// Очистка записей по которым был выполнен расчет.
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц КАК Месяц,
		|	Задания.Организация КАК Организация,
		|	Задания.ОбъектУчета КАК ОбъектУчета,
		|	Задания.НомерЗадания КАК НомерЗадания
		|
		|ИЗ
		|	РегистрСведений.ЗаданияКДоначислениюНалогаНаИмущество КАК Задания
		|
		|ГДЕ
		|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Задания.НомерЗадания <= &НомерЗадания
		|	И Задания.Организация В (&СписокОрганизаций)
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Период));
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
		Запрос.УстановитьПараметр("НомерЗадания", НомерДоРасчета);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКДоначислениюНалогаНаИмущество.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.ОбъектУчета.Установить(Выборка.ОбъектУчета);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Записать(); 
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки; 
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Массив организаций, для которых контролируется актуальность.
// 
// Возвращаемое значение:
//  Дата - Начало месяца на который неактуально закрытие месяца.
//
Функция НачалоРасчета(СписокОрганизаций) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКДоначислениюНалогаНаИмущество КАК Задания
	|ГДЕ
	|	Задания.Организация В (&СписокОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НачалоРасчета;
	
КонецФункции

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, Метаданные.РегистрыНакопления.СтоимостьОС.ПолноеИмя(),
		"Период", "ФинансовыйКонтур", "Организация");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, Метаданные.РегистрыНакопления.АмортизацияОС.ПолноеИмя(),
		"Период", "ФинансовыйКонтур", "Организация");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, Метаданные.РегистрыНакопления.СтоимостьНМА.ПолноеИмя(),
		"Период", "ФинансовыйКонтур", "Организация");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, Метаданные.РегистрыНакопления.АмортизацияНМА.ПолноеИмя(),
		"Период", "ФинансовыйКонтур", "Организация");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущийНомерЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийНомерЗадания = Константы.НомерЗаданияКДоначислениюНалогаНаИмущество.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекущийНомерЗадания;
	
КонецФункции

Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания, Организация, ОбъектУчета, НомерЗадания)
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		НаборЗаписей = РегистрыСведений.ЗаданияКДоначислениюНалогаНаИмущество.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.ОбъектУчета = ОбъектУчета;
		НаборЗаписей.Организация = Организация;
		НаборЗаписей.Документ = ДокументЗадания;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
