
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
	
		Если Параметры.ЗначениеКопирования <> Неопределено Тогда
			
			//@skip-check assign-form-attribute
			Пароль           = РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.ПарольАдминистратораИзБезопасногоХранилища(Запись.ХешСумма);
			Запись.Приоритет = РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.НомерПриоритетаНастройкиПодключения(Запись.Организация, Запись.РабочееМесто);
			
		КонецЕсли;
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
	ОбменНаСервере = ?(Запись.ОбменНаСервере, 0, 1);
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаНеВыполнялась;
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ТекущееРабочееМесто = ОбщегоНазначенияИСКлиентСервер.РабочееМестоПользователя();
	
	ОбновитьДанныеПодключенияПоДаннымЛокальногоМодуля();
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	//@skip-check assign-form-attribute
	Пароль = РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.ПарольАдминистратораИзБезопасногоХранилища(ТекущийОбъект.ХешСумма);
	
	МассивПрочитанныхТоварныхГрупп = ТекущийОбъект.НастроенныеТоварныеГруппы.Получить();
	
	Если МассивПрочитанныхТоварныхГрупп <> Неопределено Тогда
		ТоварныеГруппы.ЗагрузитьЗначения(МассивПрочитанныхТоварныхГрупп);
	КонецЕсли;
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастроенныеТоварныеГруппы = Новый ХранилищеЗначения(ТоварныеГруппы.ВыгрузитьЗначения());
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Приоритет) Тогда
		
		ТекущийОбъект.Приоритет = РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.НомерПриоритетаНастройкиПодключения(
			ТекущийОбъект.Организация, ТекущийОбъект.РабочееМесто);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.СохранитьПарольАдминистратораВБезопасноеХранилище(
		ТекущийОбъект.ХешСумма, Пароль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗначенияПриоритетовНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ИдетДлительнаяОперацияНастройки И Не ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Настройка подключения не окончена.
								   |Дождаться завершения операции?';
								   |en = 'Настройка подключения не окончена.
								   |Дождаться завершения операции?'");
								   
		ПослеПодтвержденияЗавершения = Новый ОписаниеОповещения("ПослеПодтвержденияЗавершенияНастройки", ЭтотОбъект);
		ПоказатьВопрос(ПослеПодтвержденияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗащищенноеСоединениеПриИзменении(Элемент)
	
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура СерверПодключенияЛМПриИзменении(Элемент)
	
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПортПодключенияЛМПриИзменении(Элемент)
	
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	ПроверитьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверкаНеВыполненаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаНеВыполненаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверкаНеВыполняласьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПродукцииПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеТоварныеГруппы", ТоварныеГруппы.ВыгрузитьЗначения());
	ОткрытьФорму(
		"РегистрСведений.НастройкиПодключенияЛокальныхМодулейИСМП.Форма.ФормаВыбораТоварныхГрупп",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		Новый ОписаниеОповещения("ВидыПродукцииЗавершениеВыбора", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменНаСервереПриИзменении(Элемент)
	
	Если ОбменНаСервере = 1 Тогда
		Запись.ОбменНаСервере = Ложь;
	Иначе
		Запись.ОбменНаСервере = Истина;
	КонецЕсли;
	
	ПроверитьНастройкиПодключения();
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейВыгрузкиКарточекПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗапуститьПроцессНастройкиНажатие(Элемент)
	
	Если Модифицированность Тогда
		
		ПослеПодтвержденияЗаписи = Новый ОписаниеОповещения("ПослеПодтвержденияЗапускаИнициализацииЛокальногоМодуля", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для начала инициализации требуется записать настройку подключения.
							|Продолжить?';
							|en = 'Для начала инициализации требуется записать настройку подключения.
							|Продолжить?'");
		ПоказатьВопрос(ПослеПодтвержденияЗаписи, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ЗапуститьПроцессИнициализацииЛокальногоМодуля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗапуститьПроцессУстановкиТГНажатие(Элемент)
	
	ЗакончитьПолучениеКонфигурации = Ложь;
	ЗапущеноПолучениеКонфигурации  = Ложь;
	
	Если Модифицированность Тогда
		
		ПослеПодтвержденияЗаписи = Новый ОписаниеОповещения("ПослеПодтвержденияЗапускаНастройкиТГЛокальногоМодуля", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения настройки требуется записать настройку подключения.
							|Продолжить?';
							|en = 'Для продолжения настройки требуется записать настройку подключения.
							|Продолжить?'");
		ПоказатьВопрос(ПослеПодтвержденияЗаписи, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ЗапуститьПроцессНастройкиТоварныхГруппЛокальногоМодуля(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверитьСтатусНажатие(Элемент)
	
	ЗакончитьПолучениеСтатуса = Ложь;
	ЗапущеноОжиданиеСтатуса   = Ложь;
	
	Если Модифицированность Тогда
		
		ПослеПодтвержденияЗаписи = Новый ОписаниеОповещения("ПослеПодтвержденияПолученияСтатусаЛокальногоМодуля", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения настройки требуется записать настройку подключения.
							|Продолжить?';
							|en = 'Для продолжения настройки требуется записать настройку подключения.
							|Продолжить?'");
		ПоказатьВопрос(ПослеПодтвержденияЗаписи, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	ПослеИзмененияПароля = Новый ОписаниеОповещения("ПослеИзмененияПароляЛокальногоМодуля", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПодключенияЛокальныхМодулейИСМП.Форма.ФормаВводаНовогоПароля",,
		ЭтотОбъект,,,,
		ПослеИзмененияПароля,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля(ОжидатьПолучениеСтатусаГотовности = Ложь)
	
	Если ОжидатьПолучениеСтатусаГотовности Тогда
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаИдетНастройка;
	Иначе
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполняется;
	КонецЕсли;
	
	ОбновитьДанныеПодключенияПоДаннымЛокальногоМодуля();
	
	ДополнительныеПараметры = Новый Структура("ОжидатьПолучениеСтатусаГотовности", ОжидатьПолучениеСтатусаГотовности);
	ПослеВыполненияОбновления = Новый ОписаниеОповещения("ПослеВыполненияПроверкиЛогинаПароляАдминистратора", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыУстановки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ();
	ПараметрыУстановки.Сервер               = Запись.СерверПодключенияЛМ;
	ПараметрыУстановки.ЗащищенноеСоединение = Запись.ЗащищенноеСоединение;
	ПараметрыУстановки.Порт                 = Запись.ПортПодключенияЛМ;
	ПараметрыУстановки.Логин                = Запись.Логин;
	ПараметрыУстановки.Пароль               = Пароль;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",            Запись.Организация);
	ПараметрыОбработки.Вставить("ПараметрыУстановки",     ПараметрыУстановки);
	ПараметрыОбработки.Вставить("НеВыводитьОкноОжидания", Истина);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ПослеВыполненияОбновления;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Параметры               = ПараметрыОбработки;
	ПараметрыЗапроса.Организация             = Запись.Организация;
	ПараметрыЗапроса.ВыполнениеНаКлиенте     = Не Запись.ОбменНаСервере;
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.ОбновитьСтатусЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса);
	
	Если ОжидатьПолучениеСтатусаГотовности И Не ЗапущеноОжиданиеСтатуса Тогда
		
		ПодключитьОбработчикОжидания("ЗавершитьОжиданиеПереходаСистемыВСтатусГотовности", 120, Истина);
		ЗапущеноОжиданиеСтатуса = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПолучениеКонфигурацииЛокальногоМодуля(ОжидатьНастройкуТоварныхГрупп = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	
	Если ОжидатьНастройкуТоварныхГрупп Тогда
		ДополнительныеПараметры.Вставить("ОжидатьНастройкуТоварныхГрупп", Истина);
	КонецЕсли;
	
	ПослеВыполненияОбновления = Новый ОписаниеОповещения("ПослеВыполненияПолученияКонфигурацииЛокальногоМодуля", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыУстановки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ();
	ПараметрыУстановки.Сервер               = Запись.СерверПодключенияЛМ;
	ПараметрыУстановки.ЗащищенноеСоединение = Запись.ЗащищенноеСоединение;
	ПараметрыУстановки.Порт                 = Запись.ПортПодключенияЛМ;
	ПараметрыУстановки.Логин                = Запись.Логин;
	ПараметрыУстановки.Пароль               = Пароль;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",            Запись.Организация);
	ПараметрыОбработки.Вставить("ПараметрыУстановки",     ПараметрыУстановки);
	ПараметрыОбработки.Вставить("НеВыводитьОкноОжидания", Истина);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ПослеВыполненияОбновления;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Параметры               = ПараметрыОбработки;
	ПараметрыЗапроса.Организация             = Запись.Организация;
	ПараметрыЗапроса.ВыполнениеНаКлиенте     = Не Запись.ОбменНаСервере;
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.ПолучитьКонфигурациюЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса);
	
	Если ОжидатьНастройкуТоварныхГрупп И Не ЗапущеноПолучениеКонфигурации Тогда
		
		ПодключитьОбработчикОжидания("ЗавершитьПолучениеКонфигурацииЛокальногоМодуля", 120, Истина);
		ЗапущеноПолучениеКонфигурации = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессИнициализацииЛокальногоМодуля()
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаИдетНастройка;
	ИдетДлительнаяОперацияНастройки = Истина;
	
	ПослеВыполненияОбновления = Новый ОписаниеОповещения("ПослеВыполненияЭтапаИнициализации", ЭтотОбъект);
	
	ПараметрыУстановки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ();
	ПараметрыУстановки.Сервер               = Запись.СерверПодключенияЛМ;
	ПараметрыУстановки.ЗащищенноеСоединение = Запись.ЗащищенноеСоединение;
	ПараметрыУстановки.Порт                 = Запись.ПортПодключенияЛМ;
	ПараметрыУстановки.Логин                = Запись.Логин;
	ПараметрыУстановки.Пароль               = Пароль;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",            Запись.Организация);
	ПараметрыОбработки.Вставить("ПараметрыУстановки",     ПараметрыУстановки);
	ПараметрыОбработки.Вставить("НеВыводитьОкноОжидания", Истина);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ПослеВыполненияОбновления;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Параметры               = ПараметрыОбработки;
	ПараметрыЗапроса.Организация             = Запись.Организация;
	ПараметрыЗапроса.ВыполнениеНаКлиенте     = Не Запись.ОбменНаСервере;
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.ИнициализироватьКонфигурациюЛМЧЗ(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНастройкиТоварныхГруппЛокальногоМодуля(ОжидатьНастройкуТоварныхГрупп = Ложь)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаИдетНастройка;
	
	ДополнительныеПараметры = Новый Структура("ОжидатьНастройкуТоварныхГрупп", ОжидатьНастройкуТоварныхГрупп);
	
	ПослеВыполненияОбновления = Новый ОписаниеОповещения("ПослеВыполненияНастройкиТоварныхГруппЛокальногоМодуля", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыУстановки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ();
	ПараметрыУстановки.Сервер               = Запись.СерверПодключенияЛМ;
	ПараметрыУстановки.ЗащищенноеСоединение = Запись.ЗащищенноеСоединение;
	ПараметрыУстановки.Порт                 = Запись.ПортПодключенияЛМ;
	ПараметрыУстановки.Логин                = Запись.Логин;
	ПараметрыУстановки.Пароль               = Пароль;
	
	ПараметрыНастройкиТоварныхГрупп = Новый Соответствие();
	
	Для Каждого СтрокаНастройкиТоварныхГрупп Из ТоварныеГруппы Цикл
		
		ФорматнаяСтрокаПредставленияЧисла = "ЧН=0; ЧГ=0;";
		ПараметрыНастройкиТоварныхГрупп.Вставить(Формат(ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ТоварнаяГруппаЧислом(СтрокаНастройкиТоварныхГрупп.Значение), ФорматнаяСтрокаПредставленияЧисла),
			Формат(Запись.КоличествоДнейВыгрузкиКарточек, ФорматнаяСтрокаПредставленияЧисла));
		
	КонецЦикла;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",            Запись.Организация);
	ПараметрыОбработки.Вставить("ПараметрыУстановки",     ПараметрыУстановки);
	ПараметрыОбработки.Вставить("НеВыводитьОкноОжидания", Истина);
	ПараметрыОбработки.Вставить("ПараметрыНастройкиТоварныхГрупп", ПараметрыНастройкиТоварныхГрупп);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ПослеВыполненияОбновления;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Параметры               = ПараметрыОбработки;
	ПараметрыЗапроса.Организация             = Запись.Организация;
	ПараметрыЗапроса.ВыполнениеНаКлиенте     = Не Запись.ОбменНаСервере;
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.НастроитьСписокТоварныхГруппЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцедуруСменыПароляАдминистратораЛокальногоМодуля(НовыйПароль)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаИдетНастройка;
	ДополнительныеПараметры = Новый Структура("НовыйПароль", НовыйПароль);
	ПослеВыполненияОбновления = Новый ОписаниеОповещения("ПослеПолученияРезультатаИзмененияПароляЛокальногоМодуля", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыУстановки = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ();
	ПараметрыУстановки.Сервер               = Запись.СерверПодключенияЛМ;
	ПараметрыУстановки.ЗащищенноеСоединение = Запись.ЗащищенноеСоединение;
	ПараметрыУстановки.Порт                 = Запись.ПортПодключенияЛМ;
	ПараметрыУстановки.Логин                = Запись.Логин;
	ПараметрыУстановки.Пароль               = Пароль;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",            Запись.Организация);
	ПараметрыОбработки.Вставить("ПараметрыУстановки",     ПараметрыУстановки);
	ПараметрыОбработки.Вставить("НовыйПароль",            НовыйПароль);
	ПараметрыОбработки.Вставить("НеВыводитьОкноОжидания", Истина);
	
	ПараметрыЗапроса                         = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
	ПараметрыЗапроса.ОповещениеОЗавершении   = ПослеВыполненияОбновления;
	ПараметрыЗапроса.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыЗапроса.Параметры               = ПараметрыОбработки;
	ПараметрыЗапроса.Организация             = Запись.Организация;
	ПараметрыЗапроса.ВыполнениеНаКлиенте     = Не Запись.ОбменНаСервере;
	
	ИнтерфейсИСМПОбщегоНазначенияКлиент.ИзменитьПарольДоступаКЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗапускаИнициализацииЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ЗапуститьПроцессИнициализацииЛокальногоМодуля();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗапускаНастройкиТГЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ЗапуститьПроцессНастройкиТоварныхГруппЛокальногоМодуля(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияПолученияСтатусаЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияПроверкиЛогинаПароляАдминистратора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаНеВыполнена;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.';
							   |en = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.'");
							   
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ТекстОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	Иначе
		
		Если Результат.Свойство("Результат") И ТипЗнч(Результат.Результат) = Тип("Структура") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ОтказАвторизации")
				И Результат.Результат.ОтказАвторизации Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаНеВыполнена;
				
				ТекстСообщения = НСтр("ru = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.';
										  |en = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.'");
										  
				ПоказатьПредупреждение(, ТекстСообщения);
				
			Иначе
				
				СтатусСистемы              = Результат.Результат.Статус;
				ДатаПоследнейСинхронизации = Результат.Результат.ДатаПоследнейСинхронизации;
				
				ОбновитьДанныеПодключенияПоДаннымЛокальногоМодуля();
				
				Если ДополнительныеПараметры.Свойство("ОжидатьПолучениеСтатусаГотовности")
					И ДополнительныеПараметры.ОжидатьПолучениеСтатусаГотовности Тогда
					
					Если Не ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакГотово() Тогда
						
						Если Не ЗакончитьПолучениеСтатуса Тогда
							
							ПодключитьОбработчикОжидания("ПовторноЗапуститьПроверкуСтатуса", 1, Истина);
							
						Иначе
							
							Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаИдетНастройка;
							
							ИдетДлительнаяОперацияНастройки = Ложь;
							ЗапущеноОжиданиеСтатуса         = Ложь;
							
						КонецЕсли;
						
					Иначе
						
						ИдетДлительнаяОперацияНастройки = Ложь;
						ЗапущеноПолучениеКонфигурации   = Ложь;
						
						Элементы.СтраницыСтатусНастройки.ТекущаяСтраница     = Элементы.СтраницаНастройкаЗавершена;
						Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
						
						УстановитьОтображениеДатыПоследнейСинхронизации(ЭтотОбъект);
						
					КонецЕсли;
					
				Иначе
				
					Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияПолученияКонфигурацииЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не удалось подключиться к локальному модулю.
						   |Описание ошибки: %1.';
						   |en = 'Не удалось подключиться к локальному модулю.
						   |Описание ошибки: %1.'");
						   
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ТекстОшибки);
		
		Если ДополнительныеПараметры.Свойство("ОжидатьНастройкуТоварныхГрупп")
			И ДополнительныеПараметры.ОжидатьНастройкуТоварныхГрупп Тогда
			
			Если Не ЗакончитьПолучениеКонфигурации Тогда
				
				ПодключитьОбработчикОжидания("ПовторноЗапуститьПроверкуКонфигурации", 1, Истина);
				
			Иначе
				
				ПоказатьПредупреждение(, ТекстСообщения);
				Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаНастроитьТоварныеГруппы;
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
			КонецЕсли;
			
		Иначе
			
			ПоказатьПредупреждение(, ТекстСообщения);
			Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаНастроитьТоварныеГруппы;
			
		КонецЕсли;
		
	Иначе
		
		Если Результат.Свойство("Результат") И ТипЗнч(Результат.Результат) = Тип("Структура") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ОтказАвторизации")
				И Результат.Результат.ОтказАвторизации Тогда
			
				ТекстСообщения = НСтр("ru = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.';
										  |en = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.'");
										  
				ПоказатьПредупреждение(, ТекстСообщения);
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "НастройкаТоварныхГрупп") Тогда
				
				Если Не ТипЗнч(Результат.Результат.НастройкаТоварныхГрупп) = Тип("Соответствие") Тогда
					
					ПодключитьОбработчикОжидания("ПовторноЗапуститьПроверкуКонфигурации", 1, Истина);
					Возврат;
					
				КонецЕсли;
				
				ТоварныеГруппыЛокальногоМодуля.Очистить();
				
				Для Каждого Строка Из Результат.Результат.НастройкаТоварныхГрупп Цикл
					
					ТоварныеГруппыЛокальногоМодуля.Добавить(ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ТоварнаяГруппаЧислом(Строка.Ключ));
					МаксимальныйПериодВыгрузкиКарточекЛокальногоМодуля = 
						Макс(МаксимальныйПериодВыгрузкиКарточекЛокальногоМодуля, Строка.Значение);
					
				КонецЦикла;
				
				ПроверитьОтличияНастройкиТоварныхГрупп(ЭтотОбъект);
				
				Если ДополнительныеПараметры.Свойство("ОжидатьНастройкуТоварныхГрупп")
					И ДополнительныеПараметры.ОжидатьНастройкуТоварныхГрупп Тогда
					
					Если ЕстьОтличияТоварныхГрупп Тогда
						
						Если Не ЗакончитьПолучениеКонфигурации Тогда
							
							ПодключитьОбработчикОжидания("ПовторноЗапуститьПроверкуКонфигурации", 1, Истина);
							
						Иначе
							
							Элементы.СтраницыСтатусНастройки.ТекущаяСтраница     = Элементы.СтраницаНастроитьТоварныеГруппы;
							Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
							
							ИдетДлительнаяОперацияНастройки = Ложь;
							ЗапущеноПолучениеКонфигурации   = Ложь;
							
						КонецЕсли;
						
					Иначе
						
						ИдетДлительнаяОперацияНастройки = Ложь;
						ЗапущеноПолучениеКонфигурации   = Ложь;
						
						Элементы.СтраницыСтатусНастройки.ТекущаяСтраница     = Элементы.СтраницаНастройкаЗавершена;
						Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
						
						УстановитьОтображениеДатыПоследнейСинхронизации(ЭтотОбъект);
						
					КонецЕсли;
					
				Иначе
					
					ИдетДлительнаяОперацияНастройки = Ложь;
					
					Если ЕстьОтличияТоварныхГрупп Тогда
						
						Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаНастроитьТоварныеГруппы;
						Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
						
					Иначе
						
						Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаНастройкаЗавершена;
						Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
						
						УстановитьОтображениеДатыПоследнейСинхронизации(ЭтотОбъект);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЭтапаИнициализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.ЕстьОшибки Тогда
		
		Если Результат.ОтказОтАвторизации Тогда
			
			Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаВыполнена;
			
		Иначе
		
			Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось подключиться к локальному модулю.
								   |Описание ошибки: %1.';
								   |en = 'Не удалось подключиться к локальному модулю.
								   |Описание ошибки: %1.'");
								   
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ТекстОшибки);
			ПоказатьПредупреждение(, ТекстСообщения);
		
		КонецЕсли;
		
		ИдетДлительнаяОперацияНастройки = Ложь;
		
	Иначе
		
		Если Результат.Свойство("Результат") И ТипЗнч(Результат.Результат) = Тип("Структура") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ТребуетсяОбновлениеКлючаСессииРозница")
				И Результат.Результат.ТребуетсяОбновлениеКлючаСессииРозница Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
				ШаблонСообщения = НСтр("ru = 'Проверьте наличие розничного токена по организации %1.';
										|en = 'Проверьте наличие розничного токена по организации %1.'");
				ТекстСообщения  = СтрШаблон(ШаблонСообщения, Запись.Организация);
				
				ПоказатьПредупреждение(, ТекстСообщения);
				
				ИдетДлительнаяОперацияНастройки = Ложь;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ОтказАвторизации")
				И Результат.Результат.ОтказАвторизации Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
				ТекстСообщения = НСтр("ru = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.';
										  |en = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.'");
										  
				ПоказатьПредупреждение(, ТекстСообщения);
				
				ИдетДлительнаяОперацияНастройки = Ложь;
				
			Иначе
				
				ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияНастройкиТоварныхГруппЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.';
							   |en = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.'");
							   
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ТекстОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
		ИдетДлительнаяОперацияНастройки = Ложь;
		
	Иначе
		
		Если Результат.Свойство("Результат") И ТипЗнч(Результат.Результат) = Тип("Структура") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ТребуетсяОбновлениеКлючаСессииРозница")
				И Результат.Результат.ТребуетсяОбновлениеКлючаСессииРозница Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
				ШаблонСообщения = НСтр("ru = 'Проверьте наличие розничного токена по организации %1.';
										|en = 'Проверьте наличие розничного токена по организации %1.'");
				ТекстСообщения  = СтрШаблон(ШаблонСообщения, Запись.Организация);
				
				ПоказатьПредупреждение(, ТекстСообщения);
				
				ИдетДлительнаяОперацияНастройки = Ложь;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ОтказАвторизации")
				И Результат.Результат.ОтказАвторизации Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
				ТекстСообщения = НСтр("ru = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.';
										  |en = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.'");
										  
				ПоказатьПредупреждение(, ТекстСообщения);
				
				ИдетДлительнаяОперацияНастройки = Ложь;
				
			Иначе
				
				Если ДополнительныеПараметры.Свойство("ОжидатьНастройкуТоварныхГрупп")
					И ДополнительныеПараметры.ОжидатьНастройкуТоварныхГрупп Тогда
					ЗапуститьПолучениеКонфигурацииЛокальногоМодуля(Истина);
				Иначе
					ЗапуститьПолучениеКонфигурацииЛокальногоМодуля();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатаИзмененияПароляЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.';
							   |en = 'Не удалось подключиться к локальному модулю.
							   |Описание ошибки: %1.'");
							   
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ТекстОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	Иначе
		
		Если Результат.Свойство("Результат") И ТипЗнч(Результат.Результат) = Тип("Структура") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.Результат, "ОтказАвторизации")
				И Результат.Результат.ОтказАвторизации Тогда
				
				Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаОшибкаНастройки;
				
				ТекстСообщения = НСтр("ru = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.';
										  |en = 'Авторизация не успешна.
										  |Проверьте указание корректного логина/пароля администратора к Локальному модулю.'");
										  
				ПоказатьПредупреждение(, ТекстСообщения);
				
			Иначе
				
				СохранитьНовыйПарольНаСервере(ДополнительныеПараметры.НовыйПароль);
				
				ТекстСообщения = НСтр("ru = 'Пароль успешно изменен.';
										|en = 'Пароль успешно изменен.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Знач НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключениеЛМЧЗ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПроверитьКорректностьЗаполненияНастроек() Тогда
			ВыполнитьПроверкуПодключенияЛМЧЗНачало();
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Укажите настройки подключения и попробуйте снова.';
											|en = 'Укажите настройки подключения и попробуйте снова.'"));
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПовторитьНастройкуЛМЧЗ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакНеНастроено() Тогда
			ЗапуститьПроцессИнициализацииЛокальногоМодуля();
		ИначеЕсли ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакИнициализация() Тогда
			ЗапуститьПроцессИнициализацииЛокальногоМодуля();
		ИначеЕсли ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакОшибкиСинхронизации() Тогда
			
			ТекстСообщения = НСтр("ru = 'С момента последней успешной синхронизации БД превышено ожидаемое время.
							  |Необходимо синхронизироваться с центральной системой для продолжения работы.';
							  |en = 'С момента последней успешной синхронизации БД превышено ожидаемое время.
							  |Необходимо синхронизироваться с центральной системой для продолжения работы.'");
							  
			ПоказатьПредупреждение(, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПодключенияЛМЧЗНачало() Экспорт
	
	СтатусСистемы              = "";
	ДатаПоследнейСинхронизации = Дата(1, 1, 1);
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницаПроверкаНеВыполнялась;
	
	Если Не Запись.ОбменНаСервере
		И ЗначениеЗаполнено(Запись.РабочееМесто)
		И Не Запись.РабочееМесто = ТекущееРабочееМесто Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОтличияНастройкиТоварныхГрупп(Форма)
	
	МолочнаяПродукция = Новый Массив;
	МолочнаяПродукция.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	МолочнаяПродукция.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	
	МедицинскиеИзделия = Новый Массив;
	МедицинскиеИзделия.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	МедицинскиеИзделия.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия"));
	МедицинскиеИзделия.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20"));
	МедицинскиеИзделия.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации"));
	
	КормаДляЖивотных = Новый Массив;
	КормаДляЖивотных.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	КормаДляЖивотных.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС"));
	КормаДляЖивотных.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС"));
	КормаДляЖивотных.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС"));
	
	ЛегкаяПромышленность = Новый Массив;
	ЛегкаяПромышленность.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	ЛегкаяПромышленность.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025"));
	
	ПивнаяПродукция = Новый Массив;
	ПивнаяПродукция.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ПивнаяПродукция.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
	
	СоответствиеТоварнойПродукцииВидамПродукции = Новый Соответствие();
	СоответствиеТоварнойПродукцииВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"), МолочнаяПродукция);
	СоответствиеТоварнойПродукцииВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"),                        МедицинскиеИзделия);
	СоответствиеТоварнойПродукцииВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"),  КормаДляЖивотных);
	СоответствиеТоварнойПродукцииВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"),                 ЛегкаяПромышленность);
	СоответствиеТоварнойПродукцииВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"),                                 ПивнаяПродукция);
	
	ТоварныеГруппыДляСверки                 = Форма.ТоварныеГруппы.Скопировать();
	ТоварныеГруппыДляСверкиЛокальногоМодуля = Форма.ТоварныеГруппыЛокальногоМодуля.Скопировать();
	
	МассивУдаляемыхТоварныхГрупп   = Новый Массив;
	МассивДобавляемыхТоварныхГрупп = Новый Массив;
	
	Для Каждого ТоварныеГруппыПроверки Из СоответствиеТоварнойПродукцииВидамПродукции Цикл
		
		ЗаменитьТГ = Ложь;
		
		Для Каждого УдаляемоеЗначения Из ТоварныеГруппыПроверки.Значение Цикл
			
			НайденныйЭлемент = ТоварныеГруппыДляСверки.НайтиПоЗначению(УдаляемоеЗначения);
			
			Если НайденныйЭлемент <> Неопределено Тогда
				
				МассивУдаляемыхТоварныхГрупп.Добавить(НайденныйЭлемент);
				ЗаменитьТГ = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаменитьТГ И МассивДобавляемыхТоварныхГрупп.Найти(ТоварныеГруппыПроверки.Ключ) = Неопределено Тогда
			МассивДобавляемыхТоварныхГрупп.Добавить(ТоварныеГруппыПроверки.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяТГ Из МассивУдаляемыхТоварныхГрупп Цикл
		ТоварныеГруппыДляСверки.Удалить(УдаляемаяТГ);
	КонецЦикла;
	
	Для Каждого ДобавляемаяТГ Из МассивДобавляемыхТоварныхГрупп Цикл
		ТоварныеГруппыДляСверки.Добавить(ДобавляемаяТГ);
	КонецЦикла;
	
	Форма.ЕстьОтличияТоварныхГрупп = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(
		ТоварныеГруппыДляСверкиЛокальногоМодуля,
		ТоварныеГруппыДляСверки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	Запись   = Форма.Запись;
	
	Элементы.РабочееМесто.Доступность = Не Запись.ОбменНаСервере;
	
	Если ЗначениеЗаполнено(Запись.РабочееМесто) И Запись.ОбменНаСервере Тогда
		Запись.РабочееМесто = Неопределено;
	КонецЕсли;
	
	Элементы.НадписьПроверитьСтатус.Видимость = Форма.ЗакончитьПолучениеСтатуса И ВРег(Форма.СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакИнициализация();
	
	Если ВРег(Форма.СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакНеНастроено() Тогда
		
		Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаЗапуститьИнициализацию;
		
	ИначеЕсли ВРег(Форма.СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакГотово() Тогда
		
		Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаНастройкаЗавершена;
		
	ИначеЕсли ВРег(Форма.СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакОшибкиСинхронизации() Тогда
		
		Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаОшибкаСинхронизации;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.СтатусСистемы) И Не Форма.СтатусСистемы = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакИнициализация() Тогда
		
		Элементы.СтраницыСтатусНастройки.ТекущаяСтраница = Элементы.СтраницаИныеСтатусы;
		
	КонецЕсли;
	
	УстановитьОтображениеДатыПоследнейСинхронизации(Форма);
	Элементы.Изменить.Доступность = ЗначениеЗаполнено(Форма.СтатусСистемы);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьЗаполненияНастроек()
	
	Возврат ЗначениеЗаполнено(Запись.СерверПодключенияЛМ)
		И ЗначениеЗаполнено(Запись.ПортПодключенияЛМ)
		И ЗначениеЗаполнено(Запись.Логин)
		И ЗначениеЗаполнено(Пароль);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНастройкиПодключения()
	
	Если ПроверитьКорректностьЗаполненияНастроек() Тогда
		ПодключитьОбработчикОжидания("ВыполнитьПроверкуПодключенияЛМЧЗНачало", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеДатыПоследнейСинхронизации(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Форма.ДатаПоследнейСинхронизации) Тогда
		Элементы.СтраницыПредставлениеДатыПоследнейСинхронизации.ТекущаяСтраница = Элементы.СтраницаДатаСинхронизации;
	Иначе
		Элементы.СтраницыПредставлениеДатыПоследнейСинхронизации.ТекущаяСтраница = Элементы.СтраницаНетДатыСинхронизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПодключенияПоДаннымЛокальногоМодуля()
	
	ПредставлениеСтатусаСистемы = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнак(СтатусСистемы);
	
	Если ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакГотово() Тогда
		
		ШаблонСтроки   = НСтр("ru = 'Статус подключения: <b>%1</b>';
								|en = 'Статус подключения: <b>%1</b>'");
		ТекстПодсказки = "";
	
	ИначеЕсли ВРег(СтатусСистемы) = ОбщегоНазначенияИСМПКлиентСервер.СтатусЛокальногоМодуляЧестныйЗнакОшибкиСинхронизации() Тогда
		
		ШаблонСтроки = НСтр("ru = 'Статус подключения: <span style=""color:ЦветТекстаТребуетВниманияГосИС""><b>%1</b></span>';
							|en = 'Статус подключения: <span style=""color:ЦветТекстаТребуетВниманияГосИС""><b>%1</b></span>'");
		ТекстПодсказки = НСтр("ru = 'С момента последней успешной синхронизации БД превышено ожидаемое время.
							  |Необходимо синхронизироваться с центральной системой для продолжения работы.';
							  |en = 'С момента последней успешной синхронизации БД превышено ожидаемое время.
							  |Необходимо синхронизироваться с центральной системой для продолжения работы.'");
							  
	ИначеЕсли ЗначениеЗаполнено(СтатусСистемы) Тогда
		
		ШаблонСтроки   = НСтр("ru = 'Статус подключения: <b>%1</b>';
								|en = 'Статус подключения: <b>%1</b>'");
		ТекстПодсказки = НСтр("ru = 'Работа с Локальным модулем возможна только в статусе Готово к использованию.
							  |Завершите настройку модуля.';
							  |en = 'Работа с Локальным модулем возможна только в статусе Готово к использованию.
							  |Завершите настройку модуля.'");
	
	Иначе
		
		ШаблонСтроки = НСтр("ru = 'Статус подключения: <span style=""color:ЦветНедоступногоТекста"">%1</span>';
							|en = 'Статус подключения: <span style=""color:ЦветНедоступногоТекста"">%1</span>'");
		ТекстПодсказки = "";
	
	КонецЕсли;
	
	Элементы.НадписьПредставлениеСтатусаСистемы.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		СтрШаблон(ШаблонСтроки, ПредставлениеСтатусаСистемы));
	
	Элементы.НадписьПредставлениеСтатусаСистемы.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьПредставлениеВидовПродукции(ЭтотОбъект);
	УстановитьЗначенияПриоритетовНастроек(ЭтотОбъект);
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеВидовПродукции(Форма)
	
	КоличествоВидовПродукции = Форма.ТоварныеГруппы.Количество();
	
	Если КоличествоВидовПродукции = 0 Тогда
		Форма.ВидыПродукцииПредставление = НСтр("ru = 'Выбрать';
												|en = 'Выбрать'");
		Возврат ;
	КонецЕсли;
	
	Представление = "";
	ПредставлениеДлина = 0;
	МаксимальнаяДлина = 60;
	КоличествоДобавлено = 0;
	
	Разделитель = ", ";
	ТекстОкончанияСтроки = НСтр("ru = ' ( + еще %1 )';
								|en = ' ( + еще %1 )'");
	
	Для Каждого СтрокаВидыПродукции Из Форма.ТоварныеГруппы Цикл
		
		ТекущееПредставление = Строка(СтрокаВидыПродукции.Значение);
		Если КоличествоДобавлено > 0 Тогда
			ТекущееПредставление = Разделитель + ТекущееПредставление;
		КонецЕсли;
			
		ПредставлениеДлина = ПредставлениеДлина + СтрДлина(ТекущееПредставление);
		
		Если КоличествоВидовПродукции = КоличествоДобавлено + 1 Тогда
			МаксимальнаяДлина = МаксимальнаяДлина + СтрДлина(ТекстОкончанияСтроки);
		КонецЕсли;
		
		Если ПредставлениеДлина > МаксимальнаяДлина И КоличествоДобавлено > 0 Тогда
			Представление = Представление + СтрШаблон(ТекстОкончанияСтроки, КоличествоВидовПродукции - КоличествоДобавлено);
			Прервать;
		КонецЕсли;
		
		Представление = Представление + ТекущееПредставление;
		
		КоличествоДобавлено = КоличествоДобавлено + 1;
		
	КонецЦикла;
	
	Форма.ВидыПродукцииПредставление = Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияПриоритетовНастроек(Форма)
	
	Запись   = Форма.Запись;
	Элементы = Форма.Элементы;
	
	Элементы.Приоритет.СписокВыбора.Очистить();
	
	ПриоритетРезервный = ?(Запись.Приоритет = 0, 999, Запись.Приоритет);
	
	Элементы.Приоритет.СписокВыбора.Добавить(0,                  НСтр("ru = 'Основной';
																		|en = 'Основной'"));
	Элементы.Приоритет.СписокВыбора.Добавить(ПриоритетРезервный, НСтр("ru = 'Резервный';
																		|en = 'Резервный'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПродукцииЗавершениеВыбора(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТоварныеГруппы.Очистить();
	
	Для Каждого ЭлементВидПродукции Из Результат Цикл
		ТоварныеГруппы.Добавить(ЭлементВидПродукции);
	КонецЦикла;
	
	Модифицированность = Истина;
	УстановитьПредставлениеВидовПродукции(ЭтотОбъект);
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗавершенияНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИдетДлительнаяОперацияНастройки = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПароляЛокальногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроцедуруСменыПароляАдминистратораЛокальногоМодуля(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНовыйПарольНаСервере(НовыйПароль)
	
	Пароль = НовыйПароль;
	
	РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.СохранитьПарольАдминистратораВБезопасноеХранилище(
		Запись.ХешСумма, НовыйПароль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноЗапуститьПроверкуСтатуса() Экспорт
	
	ЗапуститьПроверкуСтатусаЛогинаПароляАдминистратораЛокальногоМодуля(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноЗапуститьПроверкуКонфигурации() Экспорт
	
	ЗапуститьПолучениеКонфигурацииЛокальногоМодуля(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОжиданиеПереходаСистемыВСтатусГотовности() Экспорт
	
	ЗакончитьПолучениеСтатуса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеКонфигурацииЛокальногоМодуля() Экспорт
	
	ЗакончитьПолучениеКонфигурации = Истина;
	
КонецПроцедуры

#КонецОбласти