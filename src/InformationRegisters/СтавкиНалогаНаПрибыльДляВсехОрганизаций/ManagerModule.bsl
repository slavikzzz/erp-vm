#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Определяет ставку налога на прибыль, подлежащего зачислению в федеральный бюджет, указанную в п. 1 ст. 284 НК РФ.
//
// Параметры:
// 	Период - Дата - Период действия ставки.
//
// Возвращаемое значение:
// 	Ставка - Число - Значение ставки по умолчанию.
//
Функция ЗначениеПоУмолчаниюФедеральныйБюджет(Период) Экспорт
	
	Если Действует176ФЗ(Период) Тогда
		Если ПрименяютсяВременныеСтавкиНалога(Период) Тогда
			Возврат 8;
		КонецЕсли;
		
		Возврат 7;				
	Иначе	
		Если ПрименяютсяВременныеСтавкиНалога(Период) Тогда
			Возврат 3;
		КонецЕсли;
		
		Возврат 2;		
	КонецЕсли;
	
КонецФункции

// Определяет ставку налога на прибыль, подлежащего зачислению в бюджеты субъектов Российской Федерации, указанную в п.
// 1 ст. 284 НК РФ.
//
// Параметры:
// 	Период - Дата - Период действия ставки.
//
// Возвращаемое значение:
// 	Ставка - Число - Значение ставки по умолчанию.
//
Функция ЗначениеПоУмолчаниюРегиональныйБюджет(Период) Экспорт
	
	Если ПрименяютсяВременныеСтавкиНалога(Период) Тогда
		Возврат 17;
	КонецЕсли;
	
	Возврат 18;
	
КонецФункции

// Определяет, попадает ли указанный период в интервал, на который установлены особые ставки налога на прибыль (от 21.11.2022 N 443-ФЗ (ред. от 31.07.2023))
//
// Параметры:
// 	Период - Дата - Период проверки.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак примерения временной ставки.
//
Функция ПрименяютсяВременныеСтавкиНалога(Период) Экспорт
	
	Возврат (НачалоГода(Период) >= '2017-01-01' 
		И НачалоГода(Период) <= '2030-01-01');
	
КонецФункции

// Возвращает дату начала действия редакции 1 ст. 284 НК РФ в ред. Федерального закона от 12.07.2024 N 176-ФЗ
//
// Возвращаемое значение:
// 	Булево - Дата начала действия редакции.
//
Функция ДатаНачалаДействия176ФЗ() Экспорт
	
	Возврат Дата('2025-01-01');
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, попадает ли указанный период в период действия редакции 1 ст. 284 НК РФ в ред. Федерального закона от 12.07.2024 N 176-ФЗ
//
// Параметры:
// 	Период - Дата - Период проверки.
//
// Возвращаемое значение:
// 	Булево - Признак действия редакции ставки.
//
Функция Действует176ФЗ(Знач Период)

	Возврат (НачалоГода(Период) >= НачалоГода(ДатаНачалаДействия176ФЗ()));	

КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.17.155";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("23fb07e9-cc76-4774-abe2-7b21f164a613");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление ставок налога на прибыль в регистре ""Ставки налога на прибыль""';
									|en = 'Обновление ставок налога на прибыль в регистре ""Ставки налога на прибыль""'");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");	

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
		
	МетаданныеРегистра = Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Данные = ДанныеКОбновлению();	
	
	ДатаНачалаДействияНовыхСтавок = ДатаНачалаДействия176ФЗ();
	
	Если ДобавитьНастройкиСНовымиСтавками() Тогда
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.ВариантНалогообложенияПрибыли = Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка();
		НоваяСтрока.Период = ДатаНачалаДействияНовыхСтавок;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ДобавитьНастройкиСНовымиСтавками() Экспорт
	
	ДобавитьНастройкиСНовымиСтавками = Ложь;
	
	Если НалоговыйУчет.ПрименяютсяРазныеСтавкиНалогаНаПрибыль() Тогда
		Возврат ДобавитьНастройкиСНовымиСтавками;
	КонецЕсли;
	
	ДатаНачалаДействияНовыхСтавок = ДатаНачалаДействия176ФЗ();
	СтавкаНалогаФБПоУмолчанию = ЗначениеПоУмолчаниюФедеральныйБюджет(ДатаНачалаДействияНовыхСтавок - 1);
	СтавкаСубъектРФПоУмолчанию = ЗначениеПоУмолчаниюРегиональныйБюджет(ДатаНачалаДействияНовыхСтавок - 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса_ДобавитьНастройкиСНовымиСтавками();
	Запрос.УстановитьПараметр("КонецМесяцаНачалаДействияНовыхСтавок", КонецМесяца(ДатаНачалаДействияНовыхСтавок));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 1 Тогда
		Возврат ДобавитьНастройкиСНовымиСтавками;		
	КонецЕсли;
	
	Выборка.Следующий();
	
	Если НЕ (Выборка.ВариантНалогообложенияПрибыли <> Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка()
		ИЛИ Выборка.Период >= ДатаНачалаДействияНовыхСтавок
		ИЛИ Выборка.СтавкаФБ <> СтавкаНалогаФБПоУмолчанию
		ИЛИ Выборка.СтавкаСубъектРФ <> СтавкаСубъектРФПоУмолчанию) Тогда
	
		ДобавитьНастройкиСНовымиСтавками = Истина;		
	КонецЕсли;
	
	Возврат ДобавитьНастройкиСНовымиСтавками;
	
КонецФункции

Функция ТекстЗапроса_ДобавитьНастройкиСНовымиСтавками()
	
	Текст = "
	|ВЫБРАТЬ
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.ВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаФБ КАК СтавкаФБ,
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаСубъектРФ КАК СтавкаСубъектРФ,
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&КонецМесяцаНачалаДействияНовыхСтавок,) КАК
	|		СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ГДЕ
	|			РегламентнаяОперация.Проведен
	|			И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|			И РегламентнаяОперация.Дата >= НАЧАЛОПЕРИОДА(&КонецМесяцаНачалаДействияНовыхСтавок, МЕСЯЦ))";	
	Возврат Текст;
	
КонецФункции

Функция ДанныеКОбновлению()
	
	ДанныеКОбновлению = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СоздатьНаборЗаписей().Выгрузить();
	ДанныеКОбновлению.Колонки.Удалить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.Ресурсы.СтавкаФБ.Имя);
	ДанныеКОбновлению.Колонки.Удалить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.Ресурсы.СтавкаСубъектРФ.Имя);
	
	Возврат ДанныеКОбновлению;
	
КонецФункции

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций;
	ПолноеИмяОбъекта = МетаданныеРегистра.ПолноеИмя();
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДатаНачалаДействияНовыхСтавок = ДатаНачалаДействия176ФЗ();
	
	НачатьТранзакцию();
	
	Попытка

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ДобавитьНастройкиСНовымиСтавками() Тогда
			
			НаборЗаписей = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВариантНалогообложенияПрибыли.Установить(Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка());
			НаборЗаписей.Отбор.Период.Установить(ДатаНачалаДействияНовыхСтавок);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ДатаНачалаДействияНовыхСтавок;
			НоваяЗапись.ВариантНалогообложенияПрибыли = Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка(); 			
			НоваяЗапись.СтавкаФБ = ЗначениеПоУмолчаниюФедеральныйБюджет(ДатаНачалаДействияНовыхСтавок);
			НоваяЗапись.СтавкаСубъектРФ = ЗначениеПоУмолчаниюРегиональныйБюджет(ДатаНачалаДействияНовыхСтавок);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
		КонецЕсли;
				
		Параметры.ОбработкаЗавершена = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
			
		Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1, по причине: %2';
						|en = 'Cannot save data to the register %1. Reason: %2'");
		ТекстСообщения = СтрШаблон(Шаблон, ПолноеИмяОбъекта, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеРегистра, 
			, 
			ТекстСообщения);
			
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


