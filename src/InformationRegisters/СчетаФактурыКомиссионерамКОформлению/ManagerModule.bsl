#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Переформировывает распоряжения на оформления счетов-фактур комиссионерам.
//
// Параметры:
// 	 ОтчетыКомиссионеров - Массив из ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями, ДокументСсылка.ОтчетКомиссионера- Отчеты по комиссии, по которым необходимо выполнить формирование распоряжений.
// 	 УдалитьЗаписи - Булево - Удаляем записи по отчету.
// 
Процедура ОбновитьСостояние(ОтчетыКомиссионеров, УдалитьЗаписи = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не УдалитьЗаписи Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеОтчетовКомиссионеров.Организация КАК Организация,
		|	ДанныеОтчетовКомиссионеров.Регистратор КАК ОтчетКомиссионера,
		|	ДанныеОтчетовКомиссионеров.Контрагент  КАК Комиссионер,
		|	ДанныеОтчетовКомиссионеров.ДатаСчетаФактурыКомиссионера КАК ДатаСчетаФактуры,
		|	ДанныеОтчетовКомиссионеров.НомерСчетаФактурыКомиссионера КАК НомерСчетаФактуры,
		|	ДанныеОтчетовКомиссионеров.ПокупательКомиссионногоТовара КАК Покупатель,
		|	ДанныеОтчетовКомиссионеров.Валюта КАК Валюта,
		|	СУММА(ДанныеОтчетовКомиссионеров.СуммаБезНДС + ДанныеОтчетовКомиссионеров.СуммаНДС) КАК СуммаСНДС,
		|	СУММА(ДанныеОтчетовКомиссионеров.СуммаНДС) КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ДанныеОтчетовКомиссионеров.ТипСчетаФактуры = &ИдентификаторСчетФактураКомиссионеру
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ТипДокумента
		|ПОМЕСТИТЬ СчетаФакутурыКомиссионеруКРегистрации
		|ИЗ
		|	РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОтчетовКомиссионеров
		|ГДЕ
		|	ДанныеОтчетовКомиссионеров.Регистратор В (&Ссылки)
		|	И ДанныеОтчетовКомиссионеров.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС),
		|													ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЛьготноеНалогообложениеНДСНаУСН))
		|	И (ДанныеОтчетовКомиссионеров.ТипСчетаФактуры = &ИдентификаторСчетФактураКомиссионеру
		|		ИЛИ ДанныеОтчетовКомиссионеров.ТипСчетаФактуры = &ИдентификаторСчетФактураВыданныйКомиссионеру)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ДанныеОтчетовКомиссионеров.Организация,
		|	ДанныеОтчетовКомиссионеров.Регистратор,
		|	ДанныеОтчетовКомиссионеров.Контрагент,
		|	ДанныеОтчетовКомиссионеров.ДатаСчетаФактурыКомиссионера,
		|	ДанныеОтчетовКомиссионеров.НомерСчетаФактурыКомиссионера,
		|	ДанныеОтчетовКомиссионеров.ПокупательКомиссионногоТовара,
		|	ДанныеОтчетовКомиссионеров.Валюта,
		|	ДанныеОтчетовКомиссионеров.ТипСчетаФактуры
		|;
		|
		|ВЫБРАТЬ
		|	1 КАК ТипДокумента,
		|	СчетФактураКомиссионеру.Ссылка КАК Ссылка,
		|	СчетФактураКомиссионеру.Организация КАК Организация,
		|	СчетФактураКомиссионеру.ДокументОснование КАК ОтчетКомиссионера,
		|	СчетФактураКомиссионеру.Комиссионер КАК Комиссионер,
		|	ТаблицаПокупатели.Покупатель КАК Покупатель,
		|	НАЧАЛОПЕРИОДА(СчетФактураКомиссионеру.Дата, ДЕНЬ) КАК ДатаСчетаФактуры,
		|	ТаблицаПокупатели.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	СчетФактураКомиссионеру.Валюта КАК Валюта
		|ПОМЕСТИТЬ СчетаФактурыКомиссионеру
		|ИЗ
		|	Документ.СчетФактураКомиссионеру КАК СчетФактураКомиссионеру
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.СчетФактураКомиссионеру.Покупатели КАК ТаблицаПокупатели
		|	ПО
		|		СчетФактураКомиссионеру.Ссылка = ТаблицаПокупатели.Ссылка
		|ГДЕ
		|	СчетФактураКомиссионеру.ДокументОснование В (&Ссылки)
		|	И СчетФактураКомиссионеру.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2 КАК ТипДокумента,
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.ДокументОснование КАК ОтчетКомиссионера,
		|	СчетФактураВыданный.Контрагент КАК Комиссионер,
		|	ТаблицаПокупатели.Покупатель КАК Покупатель,
		|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ДатаСчетаФактуры,
		|	ТаблицаПокупатели.НомерСчетаФактуры КАК НомерСчетаФактуры,
		|	СчетФактураВыданный.Валюта КАК Валюта
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.СчетФактураВыданный.Покупатели КАК ТаблицаПокупатели
		|	ПО
		|		СчетФактураВыданный.Ссылка = ТаблицаПокупатели.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование В (&Ссылки)
		|	И СчетФактураВыданный.Проведен
		|;
		|
		|ВЫБРАТЬ
		|	КРегистрации.ОтчетКомиссионера,
		|	КРегистрации.Комиссионер,
		|	КРегистрации.Организация,
		|	КРегистрации.Покупатель,
		|	КРегистрации.ДатаСчетаФактуры,
		|	КРегистрации.НомерСчетаФактуры,
		|	КРегистрации.Валюта,
		|	КРегистрации.СуммаСНДС,
		|	КРегистрации.СуммаНДС
		|ИЗ
		|	СчетаФакутурыКомиссионеруКРегистрации КАК КРегистрации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		СчетаФактурыКомиссионеру КАК СчетаФактурыКомиссионеру
		|	ПО
		|		КРегистрации.ТипДокумента = СчетаФактурыКомиссионеру.ТипДокумента
		|		И КРегистрации.ОтчетКомиссионера = СчетаФактурыКомиссионеру.ОтчетКомиссионера
		|		И КРегистрации.Покупатель = СчетаФактурыКомиссионеру.Покупатель
		|		И КРегистрации.НомерСчетаФактуры = СчетаФактурыКомиссионеру.НомерСчетаФактуры
		|		И (КРегистрации.ДатаСчетаФактуры = СчетаФактурыКомиссионеру.ДатаСчетаФактуры
		|			ИЛИ КРегистрации.ДатаСчетаФактуры = &ПустаяДата)
		|ГДЕ
		|	СчетаФактурыКомиссионеру.Ссылка ЕСТЬ NULL
		|";
		ИдентификаторСчетФактураКомиссионеру = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураКомиссионеру");
		ИдентификаторСчетФактураВыданныйКомиссионеру = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураВыданный");
		Запрос.УстановитьПараметр("ИдентификаторСчетФактураКомиссионеру", ИдентификаторСчетФактураКомиссионеру);
		Запрос.УстановитьПараметр("ИдентификаторСчетФактураВыданныйКомиссионеру", ИдентификаторСчетФактураВыданныйКомиссионеру);
		Запрос.УстановитьПараметр("Ссылки", ОтчетыКомиссионеров);
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
		
		СчетаФактурыКомиссионерамКОформлению = Запрос.Выполнить().Выгрузить(); 
		СчетаФактурыКомиссионерамКОформлению.Индексы.Добавить("ОтчетКомиссионера");
		
	КонецЕсли;
	
	Для каждого ОтчетКомиссионера Из ОтчетыКомиссионеров Цикл
		НаборЗаписей = РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОтчетКомиссионера.Установить(ОтчетКомиссионера);
		Если Не УдалитьЗаписи Тогда
			Строки = СчетаФактурыКомиссионерамКОформлению.НайтиСтроки(Новый Структура("ОтчетКомиссионера", ОтчетКомиссионера));
			Для каждого Строка Из Строки Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
			КонецЦикла;
		КонецЕсли;
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ОтчетКомиссионера.Организация)
	|	И ЗначениеРазрешено(ОтчетКомиссионера.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ОбработатьУдалениеЗаписей";
	Обработчик.Версия = "2.5.16.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b63d7f88-57bc-4c53-8a4f-8834b8fedbd7");
	Обработчик.Многопоточный = Ложь;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ЗарегистрироватьДанныеКУдалению";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Удаление записей по непроведенным отчетам по комиссии в регистре ""Счета-фактуры комиссионерам к оформлению""';
									|en = 'Delete records of unposted Commission reports in the ""Tax invoices to consignees for registration"" register'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ПолноеИмя());

	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКУдалению(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаФактурыКомиссионерамКОформлению.ОтчетКомиссионера КАК ОтчетКомиссионера
		|ИЗ
		|	РегистрСведений.СчетаФактурыКомиссионерамКОформлению КАК СчетаФактурыКомиссионерамКОформлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
		|		ПО ОтчетПоКомиссииМеждуОрганизациями.Ссылка = СчетаФактурыКомиссионерамКОформлению.ОтчетКомиссионера
		|			И НЕ ОтчетПоКомиссииМеждуОрганизациями.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|			СчетаФактурыКомиссионерамКОформлению.ОтчетКомиссионера КАК ОтчетКомиссионера
		|		ИЗ
		|			РегистрСведений.СчетаФактурыКомиссионерамКОформлению КАК СчетаФактурыКомиссионерамКОформлению
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионераКонтрагента
		|				ПО ОтчетКомиссионераКонтрагента.Ссылка = СчетаФактурыКомиссионерамКОформлению.ОтчетКомиссионера
		|					И НЕ ОтчетКомиссионераКонтрагента.Проведен
		|";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ПолноеИмя();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьУдалениеЗаписей(Параметры) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	МетаданныеРегистра    = Метаданные.РегистрыСведений.СчетаФактурыКомиссионерамКОформлению;
	ПолноеИмяРегистра     = МетаданныеРегистра.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			// Блокировка регистра распределения запасов.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СчетаФактурыКомиссионерамКОформлению");
			ЭлементБлокировки.УстановитьЗначение("ОтчетКомиссионера", Выборка.ОтчетКомиссионера);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОтчетКомиссионера.Установить(Выборка.ОтчетКомиссионера, Истина);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбработкаЗавершена = Ложь;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Неопределено);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли