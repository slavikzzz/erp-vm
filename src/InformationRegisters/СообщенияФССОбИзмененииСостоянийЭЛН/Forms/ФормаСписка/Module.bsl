#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Чтение функциональных опций.
	ПоказыватьОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая");
	
	// Чтение параметров.
	Параметры.Свойство("ИдентификаторСообщения", ИдентификаторСообщения);
	Параметры.Свойство("Организация",            Организация);
	Параметры.Свойство("НомерЛН",                НомерЛН);
	Параметры.Свойство("ГоловнаяОрганизация",    ГоловнаяОрганизация);
	НомерЛНИспользование                = ЗначениеЗаполнено(НомерЛН);
	ИдентификаторСообщенияИспользование = ЗначениеЗаполнено(ИдентификаторСообщения);
	ЕстьПредустановленныеФильтры = НомерЛНИспользование
		Или ИдентификаторСообщенияИспользование
		Или ЗначениеЗаполнено(Организация)
		Или ЗначениеЗаполнено(ГоловнаяОрганизация);
	
	// Адаптация к правам кадровика.
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия) Тогда
		Элементы.СписокВходящийЗапрос.Видимость = Ложь;
		Элементы.ОткрытьВходящийЗапросФСС.Видимость = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия) Тогда
		ТекстЗапроса = Список.ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтветНаЗапросФСС.ДатаОтправки", "&ПустаяДата");
		УдаляемыйТекст = "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		УдаляемыйТекст = "ПО (СведенияОбЭЛН.ОтветНаЗапрос = ОтветНаЗапросФСС.Ссылка)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		Список.ТекстЗапроса = ТекстЗапроса;
		Элементы.СписокОтветНаЗапрос.Видимость = Ложь;
		Элементы.ОткрытьОтветНаЗапросФСС.Видимость = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС) Тогда
		ТекстЗапроса = Список.ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СообщениеОСтраховомСлучаеФСС.ДатаОтправки", "&ПустаяДата");
		УдаляемыйТекст = "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееСообщениеОСтраховомСлучаеФСС КАК СообщениеОСтраховомСлучаеФСС";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		УдаляемыйТекст = "ПО (СведенияОбЭЛН.СообщениеОСтраховомСлучае = СообщениеОСтраховомСлучаеФСС.Ссылка)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		Список.ТекстЗапроса = ТекстЗапроса;
		Элементы.СообщениеОСтраховомСлучае.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение параметров выбора организаций.
	Если ПоказыватьОрганизации Тогда
		ЗаполнитьСписокВыбораГоловныхОрганизаций();
		Количество = Элементы.ГоловнаяОрганизация.СписокВыбора.Количество();
		ПоказыватьГоловныеОрганизации = (Количество > 1);
	Иначе
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Организации.Добавить(ОрганизацияПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	Элементы.ОтборГоловнаяОрганизацияГруппа.Видимость = ПоказыватьГоловныеОрганизации;
	Элементы.ОтборОрганизацияГруппа.Видимость         = ПоказыватьОрганизации;
	Элементы.ОтборОрганизацииГруппа.Видимость         = ПоказыватьОрганизации;
	
	// Заголовок формы должен соответствовать заголовку команды.
	Команда = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Команды.СообщенияФССОбИзмененииЭЛН;
	НавигационнаяСсылка = "e1cib/command/" + Команда.ПолноеИмя();
	Заголовок = Команда.Представление();
	
	Если ЕстьПредустановленныеФильтры Тогда
		КлючНазначенияИспользования = "1";
		КлючСохраненияПоложенияОкна = "1";
		РежимФильтрации = 0; // Все сообщения.
	Иначе
		РежимФильтрации = 1; // Требующие обработки.
	КонецЕсли;
	
	Перечисления.ПричиныНетрудоспособности.ДобавитьВФормуСпискаПредставлениеСтарыхПричин(
		Список,
		"ПричинаНетрудоспособности",
		"ПричинаНетрудоспособности",
		"ДатаНачалаСобытия");
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Отсутствие");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "НесколькоОтсутствий", "=", Истина);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Несколько отсутствий...>';
																						|en = '<Several absences...>'"));
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Отсутствие");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяОтсутствие", "=", Истина);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Отсутствие", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Создать отсутствие...>';
																						|en = '<Create absence...>'"));
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Отсутствие");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяОтсутствие", "=", Истина);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Отсутствие", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ДатаОкончанияОтсутствия", "<", Новый ПолеКомпоновкиДанных("ПериодНетрудоспособностиОкончание"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Продлить отсутствие...>';
																						|en = '<Extend absence...>'"));
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Больничный");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяБольничный", "=", Истина);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Создать больничный...>';
																						|en = '<Create sick leave...>'"));
	
	// Установка параметров списка.
	ФиксированныеПараметрыСписка = ФиксированныеПараметрыСписка();
	Для Каждого КлючИЗначение Из ФиксированныеПараметрыСписка Цикл
		Список.Параметры.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.ДатаПолучения", "ДатаПолучения");
	
	Если Не ОбщегоНазначенияБЗК.ЕстьСохраненныеНастройкиФормы(ЭтотОбъект) Тогда
		ПослеЗагрузкиВсехНастроекФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;
	Если ЕстьПредустановленныеФильтры Тогда
		Настройки.Удалить("Организация");
		Настройки.Удалить("РежимФильтрации");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПослеЗагрузкиВсехНастроекФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_НастройкиПолученияУведомленийОбЭЛН"
		Или ИмяСобытия = "Запись_ПрогулНеявка"
		Или СЭДОФССРасширенныйКлиент.ТребуетсяОбновитьНапоминаниеОбОтключенииПодпискиНаЭЛН(ИмяСобытия) Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	ГоловнаяОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Организации.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОжидающиеОбработкиПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НомерЛНИспользованиеПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НомерЛНПриИзменении(Элемент)
	НомерЛНИспользование = ЗначениеЗаполнено(НомерЛН);
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСообщенияИспользованиеПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСообщенияПриИзменении(Элемент)
	ИдентификаторСообщенияИспользование = ЗначениеЗаполнено(ИдентификаторСообщения);
	ОбновитьФорму();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ПолеФормы, СтандартнаяОбработка)
	Если ПолеФормы = Элементы.ИдентификаторСообщения Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Если СтрокаТаблицы.Загружено Тогда
		Если ПолеФормы = Элементы.СписокБольничный Тогда
			СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
			
		ИначеЕсли ПолеФормы = Элементы.СписокОтсутствие Тогда
			СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
			
		ИначеЕсли ПолеФормы = Элементы.СписокВходящийЗапрос Тогда
			ПоказатьСсылку(СтрокаТаблицы.ВходящийЗапрос);
			
		ИначеЕсли ПолеФормы = Элементы.СписокОтветНаЗапрос Тогда
			СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие) Тогда
			СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
		КонецЕсли;
	Иначе
		Если ПолеФормы = Элементы.СписокСостояние Тогда
			ПолучитьСообщениеИзФСС(СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СЭДО

&НаКлиенте
Процедура ПовторноПолучитьСообщенияИзФСС(Команда)
	ИдентификаторыСообщенийСтрахователей = Новый Соответствие;
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить; // Пустая строка.
		КонецЕсли;
		Идентификаторы = ИдентификаторыСообщенийСтрахователей[СтрокаТаблицы.Страхователь];
		Если Идентификаторы = Неопределено Тогда
			Идентификаторы = Новый Массив;
			Идентификаторы.Добавить(СтрокаТаблицы.ИдентификаторСообщения);
			ИдентификаторыСообщенийСтрахователей.Вставить(СтрокаТаблицы.Страхователь, Идентификаторы);
		Иначе
			ОбщегоНазначенияБЗККлиентСервер.ДобавитьЗначениеВМассив(Идентификаторы, СтрокаТаблицы.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	СЭДОФССКлиент.ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСообщения(Команда)
	РежимФильтрации = 0;
	ОбновитьФорму();
КонецПроцедуры

#КонецОбласти

#Область Организации

&НаКлиенте
Процедура ВыбратьНасколькоФилиалов(Команда)
	Организации.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ВыбратьОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокФилиалов(Команда)
	Организации.Очистить();
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуОдногоФилиала(Команда)
	ИспользоватьСписокОрганизаций = Ложь;
	Если Организации.Количество() > 0 Тогда
		Организация = Организации[0].Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	ОрганизацияПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОрганизации()
	ПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ГоловнаяОрганизация", ГоловнаяОрганизация));
	КонецЕсли;
	Для Каждого ЭлементСписка Из Организации Цикл
		Если СписокОрганизацийДляВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СписокОрганизацийДляВыбора.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", Организации);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокОрганизацийДляВыбора);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ПараметрыФормы.Вставить("БыстрыйВыбор", Ложь);
	ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Организации';
													|en = 'Companies'"));
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОписаниеТипов", Организации.ТипЗначения);
	
	Если СписокОрганизацийДляВыбора.Количество() = 0 Тогда
		ПараметрыФормы.БыстрыйВыбор = Истина;
		ПараметрыФормы.ЗначенияДляВыбораЗаполнены = Ложь;
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораОрганизаций", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизаций(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	СписокОрганизацийДляВыбора = РезультатВыбора;
	ИспользоватьСписокОрганизаций = Истина;
	Организации.Очистить();
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		Если ЭлементСписка.Пометка Тогда
			ЗаполнитьЗначенияСвойств(Организации.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	ОбновитьФорму();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказыватьТолькоОжидающиеОбработки(Команда)
	РежимФильтрации = 1;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЭДО(Команда)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ОрганизацияСсылка", Организация);
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанныеСообщений(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВторичныеДанныеСообщенийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтсутствие(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБольничный(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВходящийЗапросФСС(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	ПоказатьСсылку(СтрокаТаблицы.ВходящийЗапрос);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтветНаЗапросФСС(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработано(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Номер = ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерЛН), СтрокаТаблицы.НомерЛН, СтрокаТаблицы.ИдентификаторСообщения);
	Если БольшеНеЗадаватьВопросСообщениеОбработано Тогда
		СообщениеОбработаноНаКлиенте(СтрокаТаблицы.ИдентификаторСообщения, Номер);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторСообщения", СтрокаТаблицы.ИдентификаторСообщения);
		Контекст.Вставить("НомерСообщения", Номер);
		Обработчик = Новый ОписаниеОповещения("СообщениеОбработаноПослеПодтверждения", ЭтотОбъект, Контекст);
		ТекстВопроса = НСтр("ru = 'Отметить сообщение об изменении %1 как обработанное вручную?
			|Сообщение не будет отображаться в режиме фильтрации ""Требующие обработки"", но останется в остальных режимах.';
			|en = 'Do you want to mark the message about change %1 as manually processed?
			|The message will not be displayed in the ""Requiring processing"" filter mode but will remain in other modes.'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Номер);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сообщение обработано';
													|en = 'Message is processed'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Обработчик, ТекстВопроса, Кнопки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработки(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Если Не СтрокаТаблицы.Последнее Тогда
		Текст = НСтр("ru = 'Сообщение не является последним (поэтому не может считаться требующим обработки).';
					|en = 'The message is not the last one (so it cannot be considered as requiring processing).'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	Номер = ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерЛН), СтрокаТаблицы.НомерЛН, СтрокаТаблицы.ИдентификаторСообщения);
	Если БольшеНеЗадаватьВопросСообщениеТребуетОбработки Тогда
		СообщениеТребуетОбработкиНаКлиенте(СтрокаТаблицы.ИдентификаторСообщения, Номер);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторСообщения", СтрокаТаблицы.ИдентификаторСообщения);
		Контекст.Вставить("НомерСообщения", Номер);
		Обработчик = Новый ОписаниеОповещения("СообщениеТребуетОбработкиПослеПодтверждения", ЭтотОбъект, Контекст);
		ТекстВопроса = НСтр("ru = 'Отметить сообщение об изменении %1 как требующее обработки?
			|Сообщение начнет отображаться в режиме фильтрации ""Требующие обработки"".';
			|en = 'Do you want to mark the message about change %1 as requiring processing?
			|The message will be displayed in the ""Requiring processing"" filter mode.'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Номер);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сообщение требует обработки';
													|en = 'Message requires processing'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Обработчик, ТекстВопроса, Кнопки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Форма

&НаСервере
Процедура ПослеЗагрузкиВсехНастроекФормыНаСервере()
	Если Не ЗначениеЗаполнено(Организация) И Не ЕстьПредустановленныеФильтры Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации.Добавить(Организация);
	КонецЕсли;
	ЗаполнитьФлажокЕстьФилиалы();
	ОбновитьФорму();
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	ТолькоТребующиеОбработки = (РежимФильтрации = 1);
	ТолькоПоследние = (РежимФильтрации = 2);
	
	Элементы.ВсеСообщения.Пометка = Не ТолькоТребующиеОбработки;
	Элементы.ТолькоОжидающиеОбработки.Пометка = ТолькоТребующиеОбработки;
	Элементы.Список.ВертикальнаяПолосаПрокрутки = ?(
		ТолькоТребующиеОбработки,
		ИспользованиеПолосыПрокрутки.НеИспользовать,
		ИспользованиеПолосыПрокрутки.ИспользоватьВсегда);
	
	ОбновитьПараметрыСписка(ТолькоТребующиеОбработки, ТолькоПоследние);
	
	ОбновитьЭлементыОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСписка(ТолькоТребующиеОбработки, ТолькоПоследние)
	ОтборКД = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	Если ПоказыватьГоловныеОрганизации Тогда
		Если ИдентификаторОтбораГоловнаяОрганизация = Неопределено Тогда
			ЭлементОтбораКД = Неопределено;
		Иначе
			ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораГоловнаяОрганизация);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
			Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ГоловнаяОрганизация") <> 0 Тогда
			ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ГоловнаяОрганизация", "=", ГоловнаяОрганизация);
			ИдентификаторОтбораГоловнаяОрганизация = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
		КонецЕсли;
		ЭлементОтбораКД.Использование  = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементОтбораКД.ПравоеЗначение = ГоловнаяОрганизация;
		Элементы.СписокГоловнаяОрганизация.Видимость = Не ЭлементОтбораКД.Использование;
	КонецЕсли;
	
	Если ПоказыватьОрганизации Тогда
		Если ИдентификаторОтбораОрганизация = Неопределено Тогда
			ЭлементОтбораКД = Неопределено;
		Иначе
			ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораОрганизация);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
			Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Организация") <> 0 Тогда
			ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Организация", "=", Организация);
			ИдентификаторОтбораОрганизация = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
		КонецЕсли;
		Количество = ?(ЕстьФилиалы, Организации.Количество(), 0);
		Если Количество = 0 Тогда
			ЭлементОтбораКД.Использование  = Ложь;
			Элементы.СписокОрганизация.Видимость = Истина;
		ИначеЕсли Количество = 1 Тогда
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораКД.ПравоеЗначение = Организации[0].Значение;
			Элементы.СписокОрганизация.Видимость         = Ложь;
			Элементы.СписокГоловнаяОрганизация.Видимость = Ложь;
		Иначе
			ЭлементОтбораКД.Использование  = Истина;
			ЭлементОтбораКД.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораКД.ПравоеЗначение = Организации;
			Элементы.СписокОрганизация.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОтбораНомерЛН = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораНомерЛН);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "НомерЛН") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "НомерЛН", "=", НомерЛН);
		ИдентификаторОтбораНомерЛН = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование  = НомерЛНИспользование;
	ЭлементОтбораКД.ПравоеЗначение = НомерЛН;
	Элементы.СписокНомерЛН.Видимость = Не ЭлементОтбораКД.Использование;
	
	Если ИдентификаторОтбораИдентификаторСообщения = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораИдентификаторСообщения);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ИдентификаторСообщения") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ИдентификаторСообщения", "=", ИдентификаторСообщения);
		ИдентификаторОтбораИдентификаторСообщения = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование  = ИдентификаторСообщенияИспользование;
	ЭлементОтбораКД.ПравоеЗначение = ИдентификаторСообщения;
	Элементы.СписокИдентификаторСообщения.Видимость = Не ЭлементОтбораКД.Использование;
	
	Если ИдентификаторОтбораТолькоТребующиеОбработки = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораТолькоТребующиеОбработки);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "ТребуетОбработки") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "ТребуетОбработки", "=", Истина);
		ИдентификаторОтбораТолькоТребующиеОбработки = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = ТолькоТребующиеОбработки;
	
	Если ИдентификаторОтбораТолькоПоследние = Неопределено Тогда
		ЭлементОтбораКД = Неопределено;
	Иначе
		ЭлементОтбораКД = ОтборКД.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораТолькоПоследние);
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбораКД) <> Тип("ЭлементОтбораКомпоновкиДанных")
		Или СтрСравнить(ЭлементОтбораКД.ЛевоеЗначение, "Последнее") <> 0 Тогда
		ЭлементОтбораКД = ЗапросыБЗК.ДобавитьНедоступныйОтбор(ОтборКД, "Последнее", "=", Истина);
		ИдентификаторОтбораТолькоПоследние = ОтборКД.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	КонецЕсли;
	ЭлементОтбораКД.Использование = ТолькоПоследние;
	
КонецПроцедуры

&НаСервере
Функция ФиксированныеПараметрыСписка()
	Результат = Новый Структура;
	Результат.Вставить("ПустаяДата",          '00010101');
	Результат.Вставить("ДатаНачалаПроактива", СЭДОФСС.ДатаНачалаПроактивныхВыплат());
	Результат.Вставить("ИндексКонвертЗакрыт",           1);
	Результат.Вставить("ИндексКонвертОткрыт",           2);
	Результат.Вставить("ИндексКонвертОткрытОстановлен", 3);
	Результат.Вставить("ИндексДокументСоздан",          4);
	Результат.Вставить("ИндексДокументЗеленыйФлажок",   5);
	Результат.Вставить("ИндексДействияПрекращены",      6);
	Результат.Вставить("ТекстСообщениеНеЗагружено",        НСтр("ru = '<Не получено>';
																|en = '<Not received>'"));
	Результат.Вставить("ТекстСообщениеНеПоследнее",        НСтр("ru = '<Не последнее>';
																|en = '<Not last>'"));
	Результат.Вставить("ТекстОтсутствуютСведенияОбЭЛН",    НСтр("ru = '<Нет сведений об ЭЛН>';
																|en = '<No information on electronic sick leave records>'"));
	Результат.Вставить("ТекстЭЛНАннулирован",              НСтр("ru = 'ЭЛН аннулирован (действия прекращены)';
																|en = 'ESLR canceled (actions terminated)'"));
	Результат.Вставить("ТекстТребуетсяСоздатьОтсутствие",  НСтр("ru = 'Требуется ввести отсутствие';
																|en = 'Enter absence'"));
	Результат.Вставить("ТекстВведеноОтсутствие",           НСтр("ru = 'Болеет (введено отсутствие)';
																|en = 'Sick (absence is entered)'"));
	Результат.Вставить("ТекстВведеноНесколькоОтсутствий",  НСтр("ru = 'Болеет (введено несколько отсутствий)';
																|en = 'On sick leave (several absences are entered)'"));
	Результат.Вставить("ТекстТребуетсяБольничный",         НСтр("ru = 'Требуется создать больничный';
																|en = 'Create sick leave'"));
	Результат.Вставить("ТекстТребуетсяОтветНаЗапрос",      НСтр("ru = 'Требуется ответ на запрос ФСС';
																|en = 'Response to the SSF request is required'"));
	Результат.Вставить("ТекстОтправленОтветНаЗапрос",      НСтр("ru = 'Отправлен ответ на запрос ФСС';
																|en = 'Response to the SSF request is sent'"));
	Результат.Вставить("ТекстСозданОтветНаЗапрос",         НСтр("ru = 'Создан ответ на запрос ФСС';
																|en = 'Response to the SSF request is created'"));
	Результат.Вставить("ТекстОтправленаИнициализация",     НСтр("ru = 'Отправлено сообщение о страховом случае в ФСС';
																|en = 'Message to SSF about an insured event is sent'"));
	Результат.Вставить("ТекстСозданаИнициализация",        НСтр("ru = 'Создано сообщение о страховом случае в ФСС';
																|en = 'Message to SSF about an insured event is created'"));
	Результат.Вставить("ТекстТребуетсяИнициализация",      НСтр("ru = 'Требуется сообщение о страховом случае в ФСС';
																|en = 'Message to SSF about an insured event is required'"));
	Результат.Вставить("ТекстТребуетсяРеестрЭЛН",          НСтр("ru = 'Требуется отправить реестр ЭЛН';
																|en = 'Send ESLR registry'"));
	Результат.Вставить("ТекстСозданБольничный",            НСтр("ru = 'Создан больничный';
																|en = 'Sick leave is created'"));
	Результат.Вставить("ТекстОтправленЭЛН",                НСтр("ru = 'Сведения об ЭЛН отправлены в ФСС';
																|en = 'Electronic sick leave record information is sent to SSF'"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок()
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	Элементы.Список.Обновить();
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьФорму(ЭтотОбъект);
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН.ОрганизацииПолучающиеСостоянияЭЛН());
КонецПроцедуры

#КонецОбласти

#Область Организации

&НаСервере
Процедура ЗаполнитьСписокВыбораГоловныхОрганизаций()
	СписокВыбора = Элементы.ГоловнаяОрганизация.СписокВыбора;
	СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Значение,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = Организации.ГоловнаяОрганизация";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	Организация = Неопределено;
	Организации.Очистить();
	ЗаполнитьФлажокЕстьФилиалы();
	ОбновитьФорму();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажокЕстьФилиалы()
	Если Не ПоказыватьОрганизации Тогда
		Возврат;
	КонецЕсли;
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ЕстьФилиалы = ЗарплатаКадрыПовтИсп.УОрганизацииЕстьФилиалы(ГоловнаяОрганизация);
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизация"));
	Иначе
		ЕстьФилиалы = ПоказыватьГоловныеОрганизации;
	КонецЕсли;
	Элементы.Организация.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОрганизаций()
	Если Не ПоказыватьОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьФилиалы Тогда
		Элементы.Организация.ПодсказкаВвода = "";
	Иначе
		ИспользоватьСписокОрганизаций = Ложь;
		Элементы.Организация.ПодсказкаВвода = Строка(ГоловнаяОрганизация);
	КонецЕсли;
	
	Если ИспользоватьСписокОрганизаций Тогда
		ПредставлениеСписка = СЭДОФСС.ПредставлениеСписка(Организации, 100);
		Если ПустаяСтрока(ПредставлениеСписка) Тогда
			ПредставлениеСписка = НСтр("ru = '<Все>';
										|en = '<All>'");
			Элементы.ОчиститьСписокФилиалов.Видимость = Ложь;
		Иначе
			Элементы.ОчиститьСписокФилиалов.Видимость = Истина;
		КонецЕсли;
	Иначе
		ПредставлениеСписка = "";
	КонецЕсли;
	Элементы.ФилиалыПредставление.Заголовок = ПредставлениеСписка;
	
	Элементы.ОтборОрганизацияГруппа.Видимость = Не ИспользоватьСписокОрганизаций;
	Элементы.ОтборОрганизацииГруппа.Видимость = ИспользоватьСписокОрганизаций;
	
	Элементы.ОтборОрганизацияГруппа.Доступность = ЕстьФилиалы;
	Элементы.ОтборОрганизацииГруппа.Доступность = ЕстьФилиалы;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьВторичныеДанныеСообщенийНаСервере()
	Если Не СЭДОФСС.ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с сервисом электронного документооборота ФСС.';
							|en = 'Insufficient rights to exchange with the SSF Electronic Data Interchange service.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(Организация);
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы)
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие)
		И Не СтрокаТаблицы.ТребуетсяОтсутствие Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.НесколькоОтсутствий Тогда
		ОтборФормы = Новый Структура("ФизическоеЛицо, НомерЛН", СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.НомерЛН);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборФормы);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Отсутствия %1 по ЭЛН %2';
															|en = 'Absences of %1 by ESLR %2'"), СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.НомерЛН));
		ОткрытьФорму("Документ.ПрогулНеявка.Форма.ФормаСписка", ПараметрыФормы, , СтрокаТаблицы.НомерЛН);
		Возврат;
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация",         СтрокаТаблицы.Организация);
	ЗначенияЗаполнения.Вставить("ФизическоеЛицо",      СтрокаТаблицы.ФизическоеЛицо);
	ЗначенияЗаполнения.Вставить("НомерЛН",             СтрокаТаблицы.НомерЛН);
	ЗначенияЗаполнения.Вставить("СостояниеСотрудника", Неопределено);
	ЗначенияЗаполнения.Вставить("ДатаНачала",          СтрокаТаблицы.ПериодНетрудоспособностиНачало);
	ЗначенияЗаполнения.Вставить("ДатаОкончания",       СтрокаТаблицы.ПериодНетрудоспособностиОкончание);
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие) Тогда
		Если СтрокаТаблицы.ТребуетсяОтсутствие И Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			ЗначенияЗаполнения.Вставить("ИсправленныйДокумент", СтрокаТаблицы.Отсутствие);
		Иначе
			ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Отсутствие);
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",    ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("АктуализироватьПериод", Истина);
	ОткрытьФорму("Документ.ПрогулНеявка.Форма.ФормаДокумента", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьБольничный(СтрокаТаблицы)
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный)
		И Не СтрокаТаблицы.ТребуетсяБольничный Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Больничный);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",                   СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",                СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛисткаНетрудоспособности", СтрокаТаблицы.НомерЛН);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ПолучитьЭЛНИзФСС", Истина);
	КонецЕсли;
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаДокумента", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы)
	ПараметрыФормы = Новый Структура("Ключ", СтрокаТаблицы.ОтветНаЗапрос);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтветНаЗапрос) Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВходящийЗапрос) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует входящий запрос для ЭЛН %1';
									|en = 'Incoming request for the electronic sick leave record is missing %1'"), СтрокаТаблицы.НомерЛН);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует больничный для ЭЛН %1';
									|en = 'Sick leave is missing for electronic sick leave record %1'"), СтрокаТаблицы.НомерЛН);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",               СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",            СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛН",                   СтрокаТаблицы.НомерЛН);
		ЗначенияЗаполнения.Вставить("ВходящийЗапрос",            СтрокаТаблицы.ВходящийЗапрос);
		ЗначенияЗаполнения.Вставить("ПервичныйДокумент",         СтрокаТаблицы.Больничный);
		ЗначенияЗаполнения.Вставить("ПричинаНетрудоспособности", СтрокаТаблицы.ПричинаНетрудоспособности);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	ОткрытьФорму("Документ.ОтветНаЗапросФССДляРасчетаПособия.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСсылку(Ссылка)
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщениеИзФСС(СтрокаТаблицы)
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(СтрокаТаблицы.ИдентификаторСообщения);
	ИдентификаторыСообщенийСтрахователей = Новый Соответствие;
	ИдентификаторыСообщенийСтрахователей.Вставить(СтрокаТаблицы.Страхователь, Идентификаторы);
	СЭДОФССКлиент.ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработаноПослеПодтверждения(Результат, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	БольшеНеЗадаватьВопросСообщениеОбработано = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		СообщениеОбработаноНаКлиенте(ПараметрыОбработчика.ИдентификаторСообщения, ПараметрыОбработчика.НомерСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработаноНаКлиенте(ИдентификаторСообщения, НомерСообщения)
	СообщениеОбработаноНаСервере(ИдентификаторСообщения);
	Текст = СтрШаблон(НСтр("ru = 'Сообщение %1 отмечено как обработанное вручную';
							|en = 'The %1 message is marked as manually processed'"), НомерСообщения);
	ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.Успешно32)
КонецПроцедуры

&НаСервере
Процедура СообщениеОбработаноНаСервере(ИдентификаторСообщения)
	Набор = РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.НачатьЗаписьНабора(ИдентификаторСообщения);
	Для Каждого Запись Из Набор Цикл
		Запись.ОбработаноВручную = Истина;
	КонецЦикла;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗавершитьЗаписьНабора(Набор);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработкиПослеПодтверждения(Результат, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	БольшеНеЗадаватьВопросСообщениеТребуетОбработки = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		СообщениеТребуетОбработкиНаКлиенте(ПараметрыОбработчика.ИдентификаторСообщения, ПараметрыОбработчика.НомерСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработкиНаКлиенте(ИдентификаторСообщения, НомерСообщения)
	СообщениеТребуетОбработкиНаСервере(ИдентификаторСообщения);
	Текст = СтрШаблон(НСтр("ru = 'Сообщение %1 отмечено как требующее обработки';
							|en = 'The %1 message is marked as requiring processing'"), НомерСообщения);
	ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.Успешно32)
КонецПроцедуры

&НаСервере
Процедура СообщениеТребуетОбработкиНаСервере(ИдентификаторСообщения)
	Набор = РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.НачатьЗаписьНабора(ИдентификаторСообщения);
	Для Каждого Запись Из Набор Цикл
		Запись.ОбработаноВручную = Ложь;
		Запись.ТребуетОбработки  = Истина;
	КонецЦикла;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗавершитьЗаписьНабора(Набор);
	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти
