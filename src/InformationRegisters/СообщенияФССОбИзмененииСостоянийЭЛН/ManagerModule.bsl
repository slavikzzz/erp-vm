#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН;
	
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО() Или Не ПравоДоступа("Просмотр", МетаданныеРегистра) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеРегистра.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НовыеУведомленияОбЭЛН" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.ОжидающихПолучения > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Новые сообщения ФСС об изменении ЭЛН';
									|en = 'New SSF messages about the electronic sick leave record change'");
		Дело.Количество     = Требования.ОжидающихПолучения;
		Дело.Подсказка      = НСтр("ru = 'Получить из ФСС сообщения об изменении ЭЛН.';
									|en = 'Receive messages from SSF about the electronic sick leave record change.'");
		Дело.ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Загружено", Ложь));
		Дело.Форма          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Форма.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "УведомленияОбЭЛНТребующиеОбработки" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.ТребующихОбработки > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'ЭЛН требующие обработки';
									|en = 'ESLR to process'");
		Дело.Количество     = Требования.ТребующихОбработки;
		Дело.Подсказка      = НСтр("ru = 'Сообщения ФСС об изменении ЭЛН, по которым требуется создать больничные или отправить данные в Фонд.';
									|en = 'SSF messages about the electronic sick leave record change, for which creating sick leaves or sending data to the Fund is required.'");
		Дело.ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Загружено, ТребуетОбработки", Истина, Истина));
		Дело.Форма          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Форма.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляНезависимогоРегистра(Настройки, "Организация",
		"РегламентированныеДанные");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСообщенийФСС

Процедура ЗагрузитьУведомлениеОНаличииСообщения5(Страхователь, ИдентификаторСообщения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() > 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	Запись = Набор.Добавить();
	Запись.Организация = Страхователь;
	Запись.Страхователь = Страхователь;
	Запись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.ТребуетОбработки = Истина; // Требуется получение и расшифровка.
	Запись.Последнее = Истина; // Неизвестно, является-ли сообщение последним.
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ЗагрузитьСообщение5(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Пример:
	//<lnStateChange>
	//	<ln_code>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<ln_state>010</ln_state>
	//</lnStateChange>
	//<eln>
	//	<lnCode>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<lnState>010</ln_state>
	//</eln>
	//<v01:changeElnNotice
	//		xmlns:v01="http://www.fss.ru/integration/types/eln/ins/notice/v01"
	//		xmlns:v011="http://www.fss.ru/integration/types/eln/ins/v01"
	//		xmlns:v012="http://www.fss.ru/integration/types/eln/v01">
	//	<v011:snils>0000060004</v011:snils>
	//	<v011:lnCode>900000000003</v011:lnCode>
	//	<v011:lnState>010</v011:lnState>
	//</v01:changeElnNotice>
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Если Запись.Страхователь <> Страхователь Тогда
		Запись.Страхователь = Страхователь;
		Запись.Организация  = Страхователь;
	КонецЕсли;
	Запись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	УзелСНИЛСDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "snils");
	Если УзелСНИЛСDOM = Неопределено Тогда
		СЭДОФСС.ЗаписатьОшибкуПоискаУзла(Результат, "snils");
		ЗавершитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	ЭлементDOM = УзелСНИЛСDOM.РодительскийУзел;
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	ЗначенияРеквизитов = ОбщегоНазначенияБЗК.ЗначенияСвойств(ОбъектXDTO, "snils, ln_code, ln_state, lnCode, lnState");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.snils) Тогда
		СНИЛСВФорматеИБ = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ЗначенияРеквизитов.snils);
		РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(СНИЛСВФорматеИБ, "", "", "");
		Запись.СНИЛС          = СНИЛСВФорматеИБ;
		Запись.ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_code) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.ln_code;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnCode) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.lnCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_state) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.ln_state);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnState) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.lnState);
	КонецЕсли;
	
	Значения = РегистрыСведений.СведенияОбЭЛН.ЗначенияРесурсов(Запись.НомерЛН, Запись.ГоловнаяОрганизация);
	Запись.ДатаНачалаСобытия = Значения.ДатаНачалаСобытия;
	
	Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"".';
									|en = 'Cannot find the individual by SNILS ""%1"".'"), Запись.СНИЛС);
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		ЗавершитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
		Страхователь,
		Запись.ФизическоеЛицо,
		"Организация",
		Запись.ДатаНачалаСобытия,
		Ложь,
		ТекстОшибки);
	Если КадровыеДанные = Неопределено Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		Запись.Организация = Страхователь;
	ИначеЕсли ЗначениеЗаполнено(КадровыеДанные.Организация) Тогда
		Запись.Организация = КадровыеДанные.Организация;
	Иначе
		КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
			Страхователь,
			Запись.ФизическоеЛицо,
			"Организация",
			ТекущаяДатаСеанса(),
			Ложь,
			ТекстОшибки);
		Если КадровыеДанные <> Неопределено И ЗначениеЗаполнено(КадровыеДанные.Организация) Тогда
			Запись.Организация = КадровыеДанные.Организация;
		Иначе
			Запись.Организация = Страхователь;
		КонецЕсли;
	КонецЕсли;
	
	Запись.Загружено = Истина;
	
	ЗавершитьЗаписьНабора(Набор);
	Результат.Обработано = Истина;
	
	Попытка
		ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2';
									|en = 'Error when updating secondary data: %1: %2'"), Кратко, Подробно);
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭЛН(Запись, LN_STATE)
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(LN_STATE);
	Если ЗначениеЗаполнено(СостояниеЭЛНВФСС) Тогда
		Запись.СостояниеЭЛН = СостояниеЭЛНВФСС;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСообщения111

Процедура ЗагрузитьУведомлениеОНаличииСообщения111(Страхователь, ИдентификаторСообщения) Экспорт
	ЗагрузитьУведомлениеОНаличииСообщения5(Страхователь, ИдентификаторСообщения);
КонецПроцедуры

Процедура ЗагрузитьСообщение111(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Пример:
	//<v01:changeElnNotice
	//		xmlns:v01="http://www.fss.ru/integration/types/eln/ins/notice/v01"
	//		xmlns:v011="http://www.fss.ru/integration/types/eln/ins/v01"
	//		xmlns:v012="http://www.fss.ru/integration/types/eln/v01">
	//	<v011:snils>0000060004</v011:snils>
	//	<v011:lnCode>900000000003</v011:lnCode>
	//	<v011:lnState>010</v011:lnState>
	//</v01:changeElnNotice>
	ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНСКэшем(ТекстXML, Кэш);
	Если Не ДанныеЭЛН.Успех Тогда
		Возврат; // Ошибка СЭДО уже записана в РегистрыСведений.СведенияОбЭЛН.ЗагрузитьСообщение111().
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Если Запись.Страхователь <> Страхователь Тогда
		Запись.Страхователь = Страхователь;
		Запись.Организация  = Страхователь;
	КонецЕсли;
	Запись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.НомерЛН                = ДанныеЭЛН.НомерЛН;
	Запись.СостояниеЭЛН           = ДанныеЭЛН.СтатусЭЛНВФСС;
	Запись.ДатаНачалаСобытия      = ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН);
	
	Если Запись.СНИЛС <> ДанныеЭЛН.СНИЛС Или Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		Запись.СНИЛС = ДанныеЭЛН.СНИЛС;
		Запись.ФизическоеЛицо = ЭЛНФСС.ФизическоеЛицо(ДанныеЭЛН);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"".';
									|en = 'Cannot find the individual by SNILS ""%1"".'"), ДанныеЭЛН.СНИЛС);
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
	Иначе
		ТекстОшибки = "";
		ЗаполнитьОрганизацию(Запись, ТекстОшибки, ДанныеЭЛН);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНовоеСообщение = Не Запись.Загружено;
	Запись.Загружено = Истина;
	
	ЗавершитьЗаписьНабора(Набор);
	Результат.Обработано = Истина;
	
	Попытка
		Если ЭтоНовоеСообщение Тогда // Разрешено создание больничных.
			ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН, ИдентификаторСообщения, ДанныеЭЛН);
		Иначе // При повторной обработке (обновление ИБ / загрузка за период) новые документы создавать не требуется.
			ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2';
									|en = 'Error when updating secondary data: %1: %2'"), Кратко, Подробно);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьОрганизацию(Запись, ТекстОшибки = "", ДанныеЭЛН = Неопределено)
	Если ДанныеЭЛН = Неопределено Тогда
		РезультатПоиска = ЭЛНФСС.КадровыеДанныеСотрудникаБезКэша(
			Запись.ФизическоеЛицо,
			Запись.ДатаНачалаСобытия,
			Запись.ГоловнаяОрганизация,
			Запись.Страхователь);
	Иначе
		РезультатПоиска = ЭЛНФСС.КадровыеДанныеСотрудника(ДанныеЭЛН, Запись.ГоловнаяОрганизация, Запись.Страхователь);
	КонецЕсли;
	Если РезультатПоиска.Успех И ЗначениеЗаполнено(РезультатПоиска.Организация) Тогда
		Запись.Организация = РезультатПоиска.Организация;
	Иначе
		ТекстОшибки = РезультатПоиска.ТекстОшибки;
		Запись.Организация = Запись.Страхователь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// С точки зрения учета ЭЛН ключами являются № ЛН и страхователь (головная организация).
	// Заполнение реквизита ФизическоеЛицо зависит от того, есть ли проведенный больничный по данному ЭЛН.
	// Если проведенный больничный есть - ФизическоеЛицо, Сотрудник и Организация заполняются из него.
	// Если проведенного больничного нет - ФизическоеЛицо, Сотрудник и Организация заполняются по данным ЭЛН.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СообщенияОбЭЛН.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияОбЭЛН.НомерЛН КАК НомерЛН,
	|	СообщенияОбЭЛН.Страхователь КАК Страхователь,
	|	СообщенияОбЭЛН.ФизическоеЛицо КАК СтароеФизическоеЛицо,
	|	&ФизическоеЛицо КАК НовоеФизическоеЛицо,
	|	СообщенияОбЭЛН.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	СообщенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияОбЭЛН
	|ГДЕ
	|	СообщенияОбЭЛН.СНИЛС = &НовыйСНИЛС
	|	И СообщенияОбЭЛН.ФизическоеЛицо <> &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СообщенияОбЭЛН.ИдентификаторСообщения,
	|	СообщенияОбЭЛН.НомерЛН,
	|	СообщенияОбЭЛН.Страхователь,
	|	СообщенияОбЭЛН.ФизическоеЛицо,
	|	ЕСТЬNULL(ФизическиеЛица.Ссылка, НЕОПРЕДЕЛЕНО),
	|	СообщенияОбЭЛН.ДатаНачалаСобытия,
	|	СообщенияОбЭЛН.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияОбЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО СообщенияОбЭЛН.СНИЛС = ФизическиеЛица.СтраховойНомерПФР
	|			И (СообщенияОбЭЛН.СНИЛС <> """")
	|ГДЕ
	|	СообщенияОбЭЛН.ФизическоеЛицо = &ФизическоеЛицо
	|	И СообщенияОбЭЛН.СНИЛС <> &НовыйСНИЛС";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СообщенияОбЭЛН.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СообщенияОбЭЛН.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаВыборки.ИдентификаторСообщения);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Запись Из Набор Цикл
			Если Запись.СНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
				НовоеФизическоеЛицо = ФизическоеЛицо;
			Иначе
				НовоеФизическоеЛицо = СтрокаВыборки.НовоеФизическоеЛицо;
			КонецЕсли;
			Если Запись.ФизическоеЛицо <> НовоеФизическоеЛицо Тогда
				Запись.ФизическоеЛицо = НовоеФизическоеЛицо;
				ЗаполнитьОрганизацию(Запись);
			КонецЕсли;
		КонецЦикла;
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке() Экспорт
	Результат = Новый Структура("ОжидающихПолучения, ТребующихОбработки");
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН) Тогда
		Результат.ОжидающихПолучения = 0;
		Результат.ТребующихОбработки = 0;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	НЕ СообщенияФСС.Загружено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	СообщенияФСС.ТребуетОбработки
	|	И НЕ СообщенияФСС.ОбработаноВручную
	|	И СообщенияФСС.Загружено";
	
	Пакет = Запрос.ВыполнитьПакет();
	Результат.ОжидающихПолучения = Пакет[0].Выбрать().Количество();
	Результат.ТребующихОбработки = Пакет[1].Выбрать().Количество();
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбновлениеВторичныхДанных

Процедура ОбновитьВторичныеДанные(Организация = Неопределено, НомерЛН = Неопределено, ИдентификаторЗагружаемогоСообщения = Неопределено, ДанныеЭЛН = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПриоритетовСостоянийЭЛН.Ссылка КАК Ссылка,
	|	ТаблицаПриоритетовСостоянийЭЛН.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритетыСостоянийЭЛН
	|ИЗ
	|	&ТаблицаПриоритетовСостоянийЭЛН КАК ТаблицаПриоритетовСостоянийЭЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ЕСТЬNULL(ПриоритетыСостояний.Приоритет, 99) КАК Приоритет,
	|	СообщенияФСС.НомерЛН КАК НомерЛН,
	|	СообщенияФСС.Загружено КАК Загружено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ СообщенияФСС.Загружено
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|				ТОГДА СведенияОбЭЛН.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|						И НЕ ДанныеСостоянийСотрудников.Регистратор ЕСТЬ NULL
	|						И ЗаменяющийЭЛН.Больничный ЕСТЬ NULL
	|			КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Закрыт)
	|				ТОГДА ЕСТЬNULL(СведенияОбЭЛН.Больничный, ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|						И ЕСТЬNULL(СведенияОбЭЛН.СостояниеФСС, ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетОбработки,
	|	СообщенияФСС.СостояниеЭЛН КАК СостояниеЭЛН,
	|	СообщенияФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СведенияОбЭЛН.ПериодНетрудоспособностиНачало, &ДатаНачалаЛН) КАК ДатаНачалаЛН,
	|	ЕСТЬNULL(СведенияОбЭЛН.ПериодНетрудоспособностиОкончание, &ДатаОкончанияЛН) КАК ДатаОкончанияЛН
	|ПОМЕСТИТЬ ВТСообщения
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыСостоянийЭЛН КАК ПриоритетыСостояний
	|		ПО СообщенияФСС.СостояниеЭЛН = ПриоритетыСостояний.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|			ПО СведенияОбЭЛН.Больничный = ДанныеСостоянийСотрудников.Регистратор
	|		ПО СообщенияФСС.НомерЛН = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|			И СообщенияФСС.ГоловнаяОрганизация = СведенияОбЭЛН.ГоловнаяОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК ЗаменяющийЭЛН
	|		ПО СообщенияФСС.НомерЛН = ЗаменяющийЭЛН.НомерЗаменяемогоЛН
	|			И СообщенияФСС.ГоловнаяОрганизация = ЗаменяющийЭЛН.ГоловнаяОрганизация
	|ГДЕ
	|	СообщенияФСС.Организация = &Организация
	|	И СообщенияФСС.НомерЛН = &НомерЛН
	|
	|СГРУППИРОВАТЬ ПО
	|	СообщенияФСС.Организация,
	|	СообщенияФСС.НомерЛН,
	|	СообщенияФСС.Загружено,
	|	СообщенияФСС.ФизическоеЛицо,
	|	СообщенияФСС.ИдентификаторСообщения,
	|	СообщенияФСС.СостояниеЭЛН,
	|	ЕСТЬNULL(ПриоритетыСостояний.Приоритет, 99),
	|	ЕСТЬNULL(СведенияОбЭЛН.ПериодНетрудоспособностиНачало, &ДатаНачалаЛН),
	|	ЕСТЬNULL(СведенияОбЭЛН.ПериодНетрудоспособностиОкончание, &ДатаОкончанияЛН),
	|	СообщенияФСС.ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрогулНеявка.Ссылка КАК Ссылка,
	|	ПрогулНеявка.НомерЛН КАК НомерЛН,
	|	ПрогулНеявка.ДатаОкончания КАК ДатаОкончания,
	|	ПрогулНеявка.ДатаНачала КАК ДатаНачала,
	|	ПрогулНеявка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрогулНеявка.Организация КАК Организация,
	|	ПрогулНеявка.ИсправленныйДокумент КАК ИсправленныйДокумент
	|ПОМЕСТИТЬ Отсутствия
	|ИЗ
	|	ВТСообщения КАК ВТСообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрогулНеявка КАК ПрогулНеявка
	|		ПО ВТСообщения.ФизическоеЛицо = ПрогулНеявка.ФизическоеЛицо
	|			И ВТСообщения.Организация = ПрогулНеявка.Организация
	|			И ВТСообщения.НомерЛН = ПрогулНеявка.НомерЛН
	|ГДЕ
	|	ПрогулНеявка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСообщения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТСообщения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСообщения.Организация КАК Организация,
	|	ВТСообщения.НомерЛН КАК НомерЛН,
	|	ДанныеСостоянийСотрудников.Регистратор КАК Ссылка,
	|	ДанныеСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеСостоянийСотрудников.ДокументОснование КАК ДокументОснование,
	|	ДанныеСостоянийСотрудников.Состояние КАК Состояние,
	|	ДанныеСостоянийСотрудников.Начало КАК ДатаНачала,
	|	ДанныеСостоянийСотрудников.Окончание КАК ДатаОкончания,
	|	ДанныеСостоянийСотрудников.ВидВремени КАК ВидВремени,
	|	ДанныеСостоянийСотрудников.ОкончаниеПредположительно КАК ОкончаниеПредположительно
	|ИЗ
	|	ВТСообщения КАК ВТСообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВТСообщения.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И ВТСообщения.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|		ПО (Сотрудники.Ссылка = ДанныеСостоянийСотрудников.Сотрудник)
	|			И ВТСообщения.ДатаНачалаЛН <= ДанныеСостоянийСотрудников.Окончание
	|			И ВТСообщения.ДатаОкончанияЛН >= ДанныеСостоянийСотрудников.Начало
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отсутствия КАК Отсутствия
	|		ПО (ДанныеСостоянийСотрудников.Регистратор = Отсутствия.Ссылка)
	|ГДЕ
	|	Отсутствия.Ссылка ЕСТЬ NULL
	|	И ДанныеСостоянийСотрудников.Состояние В(&СостоянияВытесняющиеОтсутствия)
	|	И НЕ ДанныеСостоянийСотрудников.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отсутствия.Ссылка КАК Ссылка,
	|	Отсутствия.НомерЛН КАК НомерЛН,
	|	Отсутствия.ДатаОкончания КАК ДатаОкончания,
	|	Отсутствия.ДатаНачала КАК ДатаНачала,
	|	Отсутствия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Отсутствия.Организация КАК Организация,
	|	Отсутствия.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	НЕ ИсправленияОтсутствий.Ссылка ЕСТЬ NULL КАК Исправлен
	|ИЗ
	|	Отсутствия КАК Отсутствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отсутствия КАК ИсправленияОтсутствий
	|		ПО Отсутствия.Ссылка = ИсправленияОтсутствий.ИсправленныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.НомерЛН КАК НомерЛН,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	МАКСИМУМ(СообщенияФСС.ТребуетОбработки) КАК ТребуетОбработки,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Сообщения2.Приоритет ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.Приоритет < Сообщения2.Приоритет
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.Приоритет = Сообщения2.Приоритет
	|					И СообщенияФСС.ИдентификаторСообщения > Сообщения2.ИдентификаторСообщения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Последнее
	|ИЗ
	|	ВТСообщения КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСообщения КАК Сообщения2
	|		ПО СообщенияФСС.НомерЛН = Сообщения2.НомерЛН
	|			И СообщенияФСС.Организация = Сообщения2.Организация
	|			И СообщенияФСС.ФизическоеЛицо = Сообщения2.ФизическоеЛицо
	|			И СообщенияФСС.ИдентификаторСообщения <> Сообщения2.ИдентификаторСообщения
	|
	|СГРУППИРОВАТЬ ПО
	|	СообщенияФСС.ИдентификаторСообщения,
	|	СообщенияФСС.Организация,
	|	СообщенияФСС.НомерЛН";
	Запрос.УстановитьПараметр("ТаблицаПриоритетовСостоянийЭЛН", ТаблицаПриоритетовСостоянийЭЛН());
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СообщенияФСС.Организация = &Организация", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если НомерЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СообщенияФСС.НомерЛН = &НомерЛН", "");
	Иначе
		Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	КонецЕсли;
	
	Если ДанныеЭЛН = Неопределено Тогда
		// Удаление двух предпоследних запросов.
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ВГраница = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
		СхемаЗапроса.ПакетЗапросов.Удалить(ВГраница - 2);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		// Установка параметров запроса.
		Запрос.УстановитьПараметр("ДатаНачалаЛН",    '00010101');
		Запрос.УстановитьПараметр("ДатаОкончанияЛН", '00010101');
		// Выполнение пакета запросов.
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ВГраница = РезультатыЗапроса.Количество() - 1;
		Таблица          = РезультатыЗапроса[ВГраница].Выгрузить();
		Отсутствия       = РезультатыЗапроса[ВГраница - 1].Выгрузить();
		ПрочиеОтклонения = Неопределено;
	Иначе
		// Установка параметров запроса.
		Запрос.УстановитьПараметр("СостоянияВытесняющиеОтсутствия", СостоянияВытесняющиеОтсутствия());
		Запрос.УстановитьПараметр("ДатаНачалаЛН",    ДанныеЭЛН.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончанияЛН", ДанныеЭЛН.ДатаОкончания);
		// Выполнение пакета запросов.
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ВГраница = РезультатыЗапроса.Количество() - 1;
		Таблица          = РезультатыЗапроса[ВГраница].Выгрузить();
		Отсутствия       = РезультатыЗапроса[ВГраница - 1].Выгрузить();
		ПрочиеОтклонения = РезультатыЗапроса[ВГраница - 2].Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИдентификаторСообщения);
		
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из Набор Цикл
			ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
			Если Запись.ГоловнаяОрганизация <> ТребуемаяГоловнаяОрганизация Тогда
				Запись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Не Запись.Загружено Тогда
				ТребуетОбработки = Истина;
			ИначеЕсли Не СтрокаТаблицы.Последнее Тогда
				ТребуетОбработки = Ложь;
			Иначе
				ТребуетОбработки = СтрокаТаблицы.ТребуетОбработки;
			КонецЕсли;
			Если Запись.ТребуетОбработки <> ТребуетОбработки Тогда
				ЕстьИзменения = Истина;
				Запись.ТребуетОбработки = ТребуетОбработки;
			КонецЕсли;
			Если Запись.Последнее <> СтрокаТаблицы.Последнее Тогда
				ЕстьИзменения = Истина;
				Запись.Последнее = СтрокаТаблицы.Последнее;
			КонецЕсли;
			
			// Автоматическое создание документов при загрузке сообщения СЭДО.
			Если ДанныеЭЛН <> Неопределено
				И Запись.Последнее
				И Запись.ИдентификаторСообщения = ИдентификаторЗагружаемогоСообщения Тогда
				ИзменитьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН);
			ИначеЕсли Запись.Последнее Тогда
				Фильтр = Новый Структура("Организация, НомерЛН, Исправлен", Запись.Организация, Запись.НомерЛН, Ложь);
				ПериодыОтсутствий = Отсутствия.Скопировать(Фильтр, "Ссылка, ДатаНачала");
				ПериодыОтсутствий.Свернуть("Ссылка, ДатаНачала");
				ПериодыОтсутствий.Сортировать("ДатаНачала");
				ПроиндексироватьСсылкиОтсутствий(Запись, ПериодыОтсутствий, ЕстьИзменения);
			Иначе
				Если ЗначениеЗаполнено(Запись.Отсутствие3)
					И Отсутствия.Найти(Запись.Отсутствие3, "Ссылка") = Неопределено Тогда
					Запись.Отсутствие3 = Неопределено;
					ЕстьИзменения = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.Отсутствие2)
					И Отсутствия.Найти(Запись.Отсутствие2, "Ссылка") = Неопределено Тогда
					Запись.Отсутствие2 = Запись.Отсутствие3;
					Запись.Отсутствие3 = Неопределено;
					ЕстьИзменения = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.Отсутствие)
					И Отсутствия.Найти(Запись.Отсутствие, "Ссылка") = Неопределено Тогда
					Запись.Отсутствие  = Запись.Отсутствие2;
					Запись.Отсутствие2 = Запись.Отсутствие3;
					Запись.Отсутствие3 = Неопределено;
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗавершитьЗаписьНабора(Набор);
		Иначе
			ОтменитьЗаписьНабора(Набор);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция СостоянияВытесняющиеОтсутствия()
	Массив = Новый Массив;
	// Отпуска. См. процедуру ДобавитьДатыКИсключениюПоПричинеОтпуска в модуле менеджера больничного.
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	// Подтвержденные неявки и отклонения.
	Массив.Добавить(Перечисления.СостоянияСотрудника.ДополнительныеВыходныеДниОплачиваемые);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	Массив.Добавить(Перечисления.СостоянияСотрудника.Болезнь);
	Массив.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	Массив.Добавить(Перечисления.СостоянияСотрудника.Увольнение);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ТрудовойДоговорПриостановлен);
	// Простои пока учитываются вручную в больничных.
	Массив.Добавить(Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника);
	Массив.Добавить(Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя);
	Возврат Массив;
КонецФункции

Процедура ИзменитьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН)
	Состояния = Перечисления.СостоянияЭЛНВФСС;
	Если Запись.СостояниеЭЛН = Состояния.ВыплаченФСС
		Или Запись.СостояниеЭЛН = Состояния.ПринятРеестрПВСО
		Или Запись.СостояниеЭЛН = Состояния.ПринятРеестрЭЛН Тогда
		Возврат; // Нет действий для автоматизации. Проверка формальная, на практике ФСС не присылает эти статусы. 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеЭЛН.НомерЛН)
		Или Не ЗначениеЗаполнено(Запись.ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(Запись.Организация)
		Или Не ЗначениеЗаполнено(ДанныеЭЛН.ДатаНачала)
		Или Не ЗначениеЗаполнено(ДанныеЭЛН.ДатаОкончания) Тогда
		Возврат; // ЭЛН не может быть зарегистрирован в учете.
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиУведомленийОбЭЛН.НастройкиОрганизации(Запись.Организация);
	СоздаватьОтсутствия = Настройки.СоздаватьОтсутствияПоЭЛН;
	СоздаватьБольничные = Настройки.СоздаватьБольничныеПоЭЛН;
	Если Не СоздаватьОтсутствия И Не СоздаватьБольничные Тогда
		Возврат;
	КонецЕсли;
	
	Если Запись.СостояниеЭЛН = Состояния.Аннулирован Тогда
		Если СоздаватьОтсутствия Тогда
			СторнироватьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = ЭЛНФСС.КадровыеДанныеСотрудника(ДанныеЭЛН, Запись.ГоловнаяОрганизация, Запись.Страхователь);
	Если Не КадровыеДанные.Успех
		Или Не ЗначениеЗаполнено(КадровыеДанные.Организация)
		Или Не ЗначениеЗаполнено(КадровыеДанные.Сотрудник) Тогда
		Возврат; // Автоматизация доступна только в случае наличия кадровых данных сотрудника.
	КонецЕсли;
	
	Если Запись.СостояниеЭЛН = Состояния.Закрыт Тогда
		// Автоматическое создание больничных однозначно необходимо только для работающих по основному месту работы.
		Если СоздаватьБольничные
			И КадровыеДанные.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			Если СоздаватьОтсутствия Тогда
				СторнироватьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН);
			КонецЕсли;
			Больничный = СоздатьБольничный(Запись.ГоловнаяОрганизация, Запись.ФизическоеЛицо, ДанныеЭЛН);
			Если ЗначениеЗаполнено(Больничный) Тогда
				ЕстьИзменения = Истина; // Чтобы не отменилась транзакция при отмене записи.
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СоздаватьОтсутствия Тогда
			ПродлитьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН, КадровыеДанные.Сотрудник, Настройки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПродлитьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН, Сотрудник = Неопределено, Настройки = Неопределено) Экспорт
	// Отсутствия следует зарегистрировать на все периоды, на которые нет отклонений (других отсутствий, отпусков и т.п.).
	ДатыНетрудоспособности = ОбщегоНазначенияБЗК.МассивДатИзПериодов(ДанныеЭЛН.ПериодыНетрудоспособности);
	
	Фильтр = Новый Структура("Организация, НомерЛН, Исправлен", Запись.Организация, Запись.НомерЛН, Ложь);
	ПериодыОтсутствий = Отсутствия.Скопировать(Фильтр);
	ПериодыОтсутствий.Свернуть("Ссылка, ДатаНачала, ДатаОкончания");
	
	Фильтр = Новый Структура("Организация, НомерЛН", Запись.Организация, Запись.НомерЛН);
	ПериодыПрочихОтклонений = ПрочиеОтклонения.Скопировать(Фильтр);
	
	// 1. Удаление периодов прочих отклонений.
	// Таким образом, в ДатыНетрудоспособности остаются только даты, неохваченные другими отклонениями.
	Для Каждого Период Из ПериодыПрочихОтклонений Цикл
		Если ПериодыОтсутствий.Найти(Период.Ссылка, "Ссылка") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияБЗК.УдалитьПериодИзМассиваДат(
			ДатыНетрудоспособности,
			Период.ДатаНачала,
			Период.ДатаОкончания);
	КонецЦикла;
	
	// 2. Сопоставление периодов нетрудоспособности с периодами отсутствий с указанным № ЛН.
	// Таким образом, в таблице ПериодыОтсутствий в колонках НовыйПериодДатаНачала и НовыйПериодДатаОкончания
	// оказываются все периоды нетрудоспособности, сопоставленные с отсутствиями.
	// В процессе может потребовать изменить периоды отсутствий.
	// Флажки НовыйПериодНайден и ЕстьИзменения определяют что делать с отсутствием:
	// - Если период не найден - Сторнировать отсутствие;
	// - Если период найден и изменен - Исправить с изменением периода;
	// - Если период найден и не изменен - Ничего не делать.
	ПериодыОтсутствий.Колонки.Добавить("НовыйПериодНайден", Новый ОписаниеТипов("Булево"));
	ПериодыОтсутствий.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"));
	ПериодыОтсутствий.Колонки.Добавить("НовыйПериодДатаНачала", Новый ОписаниеТипов("Дата"));
	ПериодыОтсутствий.Колонки.Добавить("НовыйПериодДатаОкончания", Новый ОписаниеТипов("Дата"));
	Если ДатыНетрудоспособности.Количество() > 0 Тогда
		Для Каждого Период Из ПериодыОтсутствий Цикл
			// Обход дат с Период.ДатаНачала по Период.ДатаОкончания;
			ДатаПериода = НачалоДня(Период.ДатаНачала);
			Пока ДатаПериода <= Период.ДатаОкончания Цикл
				// Поиск даты периода в ДатыНетрудоспособности;
				Индекс = ДатыНетрудоспособности.Найти(ДатаПериода);
				Если Индекс = Неопределено Тогда
					Если Период.НовыйПериодНайден Тогда
						Прервать;
					КонецЕсли;
				Иначе
					// Если нашли - удаление из ДатыНетрудоспособности и регистрация в новом периоде.
					// В полях НовыйПериодДатаНачала и НовыйПериодДатаОкончания регистрируется первый найденный период.
					Если Не Период.НовыйПериодНайден Тогда
						Период.НовыйПериодНайден     = Истина;
						Период.НовыйПериодДатаНачала = ДатаПериода;
					КонецЕсли;
					Период.НовыйПериодДатаОкончания = ДатаПериода;
					ДатыНетрудоспособности.Удалить(Индекс);
				КонецЕсли;
				ДатаПериода = ДатаПериода + 86400;
			КонецЦикла;
			// Поиск подходящего периода на расстоянии +- 1 день.
			Если Не Период.НовыйПериодНайден Тогда
				ДатаПериода = Период.ДатаОкончания + 86400;
				Если ПериодыОтсутствий.Найти(ДатаПериода, "ДатаНачала") <> Неопределено Тогда
					Индекс = Неопределено; // Дата окончания + день используется датой начала другого отсутствия.
				Иначе
					Индекс = ДатыНетрудоспособности.Найти(ДатаПериода);
				КонецЕсли;
				Если Индекс = Неопределено Тогда
					ДатаПериода = Период.ДатаНачала - 86400;
					Если ПериодыОтсутствий.Найти(ДатаПериода, "ДатаОкончания") <> Неопределено Тогда
						Индекс = Неопределено; // Дата начала - день используется датой окончания другого отсутствия.
					Иначе
						Индекс = ДатыНетрудоспособности.Найти(ДатаПериода);
					КонецЕсли;
				КонецЕсли;
				Если Индекс <> Неопределено Тогда
					ДатыНетрудоспособности.Удалить(Индекс);
					Период.НовыйПериодНайден        = Истина;
					Период.НовыйПериодДатаНачала    = ДатаПериода;
					Период.НовыйПериодДатаОкончания = ДатаПериода;
				КонецЕсли;
			КонецЕсли;
			// Определение наличия изменений.
			Период.ЕстьИзменения = (Период.ДатаНачала <> Период.НовыйПериодДатаНачала
				Или Период.ДатаОкончания <> Период.НовыйПериодДатаОкончания);
		КонецЦикла;
		// Расширение периодов "влево" и "вправо" (если есть куда расширять).
		Если ДатыНетрудоспособности.Количество() > 0 Тогда
			Найденные = ПериодыОтсутствий.НайтиСтроки(Новый Структура("НовыйПериодНайден", Истина));
			Для Каждого Период Из Найденные Цикл
				// Расширение "влево".
				Пока Истина Цикл
					ДатаПериода = Период.НовыйПериодДатаНачала - 86400;
					Индекс = ДатыНетрудоспособности.Найти(ДатаПериода);
					Если Индекс = Неопределено Тогда
						Прервать;
					Иначе
						ДатыНетрудоспособности.Удалить(Индекс);
						Период.НовыйПериодДатаНачала = ДатаПериода;
					КонецЕсли;
				КонецЦикла;
				// Расширение "вправо".
				Пока Истина Цикл
					ДатаПериода = Период.НовыйПериодДатаОкончания + 86400;
					Индекс = ДатыНетрудоспособности.Найти(ДатаПериода);
					Если Индекс = Неопределено Тогда
						Прервать;
					Иначе
						ДатыНетрудоспособности.Удалить(Индекс);
						Период.НовыйПериодДатаОкончания = ДатаПериода;
					КонецЕсли;
				КонецЦикла;
				// Определение наличия изменений.
				Период.ЕстьИзменения = (Период.ДатаНачала <> Период.НовыйПериодДатаНачала
					Или Период.ДатаОкончания <> Период.НовыйПериодДатаОкончания);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// Периоды, которые "совсем не пересеклись" распределяются в случайном порядке.
	ПериодыНетрудоспособности = ОбщегоНазначенияБЗК.ПериодыИзМассиваДат(ДатыНетрудоспособности);
	НеНайденные = ПериодыОтсутствий.НайтиСтроки(Новый Структура("НовыйПериодНайден", Ложь));
	КоличествоНеНайденных = НеНайденные.Количество();
	Для Каждого ПериодНетрудоспособности Из ПериодыНетрудоспособности Цикл
		Если КоличествоНеНайденных > 0 Тогда
			Период = НеНайденные[0];
			НеНайденные.Удалить(0);
			КоличествоНеНайденных = КоличествоНеНайденных - 1;
		Иначе
			Период = ПериодыОтсутствий.Добавить();
		КонецЕсли;
		Период.НовыйПериодНайден        = Истина;
		Период.НовыйПериодДатаНачала    = ПериодНетрудоспособности.ДатаНачала;
		Период.НовыйПериодДатаОкончания = ПериодНетрудоспособности.ДатаОкончания;
		Период.ЕстьИзменения            = (Период.ДатаНачала <> Период.НовыйПериодДатаНачала
			Или Период.ДатаОкончания <> Период.НовыйПериодДатаОкончания);
	КонецЦикла;
	
	// 3. Сторнирование отсутствий.
	Для Каждого Период Из НеНайденные Цикл
		ДокументОбъект = Период.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	// 4. Внесение изменений в документы.
	НеявкаПоБолезни = НеявкаПоБолезни();
	ПериодыКИзменению = ПериодыОтсутствий.НайтиСтроки(Новый Структура("ЕстьИзменения", Истина));
	Для Каждого Период Из ПериодыКИзменению Цикл
		Если Настройки = Неопределено Тогда
			Настройки = РегистрыСведений.НастройкиУведомленийОбЭЛН.НастройкиОрганизации(Запись.Организация);
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ВидОтсутствия",  НеявкаПоБолезни);
		ДанныеЗаполнения.Вставить("Организация",    Запись.Организация);
		ДанныеЗаполнения.Вставить("ФизическоеЛицо", Запись.ФизическоеЛицо);
		ДанныеЗаполнения.Вставить("Сотрудник",      Сотрудник);
		ДанныеЗаполнения.Вставить("НомерЛН",        Запись.НомерЛН);
		ДанныеЗаполнения.Вставить("ДатаНачала",     Период.НовыйПериодДатаНачала);
		ДанныеЗаполнения.Вставить("ДатаОкончания",  Период.НовыйПериодДатаОкончания);
		Если ЗначениеЗаполнено(Период.Ссылка) Тогда
			ДанныеЗаполнения.Вставить("ИсправленныйДокумент", Период.Ссылка);
		КонецЕсли;
		Если Не Настройки.УтверждатьОтсутствияПоЭЛН Тогда
			ДанныеЗаполнения.Вставить("ПерерасчетВыполнен", Ложь);
			ДанныеЗаполнения.Вставить("Рассчитал",          Неопределено);
		КонецЕсли;
		
		ПараметрыРасчета = Документы.ПрогулНеявка.ПустыеПараметрыРасчета();
		ПараметрыРасчета.РасчетУтвержден = Настройки.УтверждатьОтсутствияПоЭЛН;
		
		ДокументОбъект = Документы.ПрогулНеявка.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Рассчитать(ПараметрыРасчета);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Период.Ссылка = ДокументОбъект.Ссылка;
	КонецЦикла;
	
	// 5. Индексация отсутствий.
	Фильтр = Новый Структура("НовыйПериодНайден", Истина);
	Найденные = ПериодыОтсутствий.Скопировать(Фильтр, "Ссылка, НовыйПериодДатаНачала");
	Найденные.Свернуть("Ссылка, НовыйПериодДатаНачала");
	Найденные.Сортировать("НовыйПериодДатаНачала");
	ПроиндексироватьСсылкиОтсутствий(Запись, Найденные, ЕстьИзменения);
	
КонецПроцедуры

Функция НеявкаПоБолезни()
	Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни;
	Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
	Возврат ПланыВидовРасчета.Начисления.НачислениеПоУмолчанию(Отбор);
КонецФункции

Процедура СторнироватьОтсутствия(Запись, ЕстьИзменения, Отсутствия, ПрочиеОтклонения, ДанныеЭЛН)
	Возврат;
КонецПроцедуры

Процедура ПроиндексироватьСсылкиОтсутствий(Запись, ПериодыОтсутствий, ЕстьИзменения)
	ЗначенияДо = Новый Структура("Отсутствие, Отсутствие2, Отсутствие3");
	ЗаполнитьЗначенияСвойств(ЗначенияДо, Запись);
	
	Запись.Отсутствие  = Неопределено;
	Запись.Отсутствие2 = Неопределено;
	Запись.Отсутствие3 = Неопределено;
	
	Для Каждого Период Из ПериодыОтсутствий Цикл
		Если ЗначениеЗаполнено(Период.Ссылка) Тогда
			Если Не ЗначениеЗаполнено(Запись.Отсутствие) Тогда
				Запись.Отсутствие = Период.Ссылка;
			ИначеЕсли Не ЗначениеЗаполнено(Запись.Отсутствие2) Тогда
				Запись.Отсутствие2 = Период.Ссылка;
			ИначеЕсли Не ЗначениеЗаполнено(Запись.Отсутствие3) Тогда
				Запись.Отсутствие3 = Период.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если    ЗначенияДо.Отсутствие <> Запись.Отсутствие
		Или ЗначенияДо.Отсутствие2 <> Запись.Отсутствие2
		Или ЗначенияДо.Отсутствие3 <> Запись.Отсутствие3 Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьБольничный(ГоловнаяОрганизация, ФизическоеЛицо, ДанныеЭЛН) Экспорт
	Больничный = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(ДанныеЭЛН.НомерЛН, ГоловнаяОрганизация);
	Если Больничный <> Неопределено Тогда
		Возврат Больничный.Ссылка;
	КонецЕсли;
	Отказ = Ложь;
	Количество = СообщенияБЗК.КоличествоСообщенийПользователю();
	БольничныйОбъект = Документы.БольничныйЛист.СоздатьДокумент();
	БольничныйОбъект.Заполнить(Неопределено); // Заполнение значениями по-умолчанию.
	БольничныйОбъект.Дата = ТекущаяДатаСеанса();
	// При ручном заполнении порядка выплаты пособие рассчитывается и в т.ч. заполняется вкладка "Оплата".
	БольничныйОбъект.ПорядокВыплаты = Неопределено;
	ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьПериодРегистрацииВБольничном(БольничныйОбъект);
	ТекстыСообщений = Новый Массив;
	Попытка
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьБольничныйПоДаннымЭЛН(БольничныйОбъект, ДанныеЭЛН, Отказ, Неопределено);
		Если Не Отказ И ЗначениеЗаполнено(БольничныйОбъект.Сотрудник) Тогда
			БольничныйОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстыСообщений.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	СообщенияБЗК.СократитьЧислоСообщений(Количество, ТекстыСообщений);
	Если Отказ Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для сообщения об изменении ЭЛН %1 не удалось автоматически создать больничный: %2';
				|en = 'Cannot automatically create a sick leave for the message about electronic sick leave record change %1: %2'"),
			ДанныеЭЛН.НомерЛН,
			Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС + Символы.ПС));
		УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(
			ТекстСообщения,
			ФизическоеЛицо,
			Метаданные.Документы.БольничныйЛист);
		Возврат Неопределено;
	КонецЕсли;
	Возврат БольничныйОбъект.Ссылка;
КонецФункции

Функция ТаблицаПриоритетовСостоянийЭЛН()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭЛНВФСС, Число"));
	Таблица.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Приоритеты = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
	Для Каждого КлючИЗначение Из Приоритеты Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Ссылка    = КлючИЗначение.Ключ;
		СтрокаТаблицы.Приоритет = КлючИЗначение.Значение;
	КонецЦикла;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Неопределено;
	СтрокаТаблицы.Приоритет = 11;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Перечисления.СостоянияЭЛНВФСС.ПустаяСсылка();
	СтрокаТаблицы.Приоритет = 10;
	
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет ресурс ГоловнаяОрганизация. Регистрируется в модуле СЭДОФССРасширенный.
Процедура ЗаполнитьГоловнуюОрганизацию(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	СообщенияФСС.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СообщенияФСС.Страхователь <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИдентификаторСообщения);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из Набор Цикл
			ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
			Если Запись.ГоловнаяОрганизация <> ТребуемаяГоловнаяОрганизация Тогда
				Запись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ЗавершитьЗаписьНабора(Набор);
		Иначе
			ОтменитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НаборЗаписей

// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИдентификаторСообщения - Строка - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИдентификаторСообщения) Экспорт
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".';
				|en = 'Insufficient rights to change register ""%1"".'"),
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Если Не ПолныеПраваИлиПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдентификаторСообщения);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить уведомление ФСС об изменении состояний ЭЛН %1 по причине: %2';
				|en = 'Cannot change the SSF notification on the ESLR status changes %1 due to: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН,
			ИдентификаторСообщения,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей)
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.

#КонецОбласти

#КонецОбласти

#КонецЕсли