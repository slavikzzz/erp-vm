
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.14.15";   
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c322508-aab3-4327-856a-704cfce3e24f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет данные об учетной записи и заполняет идентификатор предложения в данных регистра Статусы публикаций товаров Яндекс Маркет.';
									|en = 'Updates account data and fills the offer ID in the data of the ""Goods publication statuses Yandex.Market"" register.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");  
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.УчетныеЗаписиМаркетплейсов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");    
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УчетныеЗаписиМаркетплейсов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка)
		|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения = """"";
		
	РегистрируемыеЗаписи = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеЗаписи, ДополнительныеПараметры);
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда 
		Параметры.ОбработкаЗавершена = ОбновлениеПредшествующихДанныхЗавершено(); 
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;       
		КонецЕсли;
	КонецЕсли;       
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
		|	И УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина <> """"
		|	И УчетныеЗаписиМаркетплейсов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";  
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		УчетнаяЗапись = Результат.УчетнаяЗапись;
	КонецЦикла;
		
	ТаблицаОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Для Каждого Строка Из ТаблицаОбновляемыеДанные Цикл
		
		НаборЗаписей = Неопределено;
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);  
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Строка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Упаковка", Строка.Упаковка);
			Блокировка.Заблокировать();        
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Строка.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(Строка.Упаковка);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
			
				Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
					Запись.УчетнаяЗапись = УчетнаяЗапись;   
				КонецЕсли;  
				
				Если Не ЗначениеЗаполнено(Запись.ИдентификаторПредложения) Тогда
					Запись.ИдентификаторПредложения = Запись.ИдентификаторПубликации;  
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);  
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
				
		Исключение
			ОтменитьТранзакцию();
			Если НаборЗаписей = Неопределено Тогда
				НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей(); 
				НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Строка.Характеристика);
				НаборЗаписей.Отбор.Упаковка.Установить(Строка.Упаковка);
			КонецЕсли;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НаборЗаписей);
		КонецПопытки;
		
	КонецЦикла;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры 

Функция ОбновлениеПредшествующихДанныхЗавершено()
	
	Запрос = Новый Запрос; 
	ЕстьОшибка = Ложь;
	Запрос.УстановитьПараметр("РежимВыполнения", Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяОбработчика = ""Справочники.УчетныеЗаписиМаркетплейсов.ОбработатьДанныеДляПереходаНаНовуюВерсию""
		|	И ОбработчикиОбновления.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбработчиковОбновления.Ошибка))
		|	И ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбработчикиОбновления.Статус,
		|	ОбработчикиОбновления.ИмяОбработчика";
	
	СтатусыОбработчиков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Обработчик Из СтатусыОбработчиков Цикл
		
		ТекстСообщения = НСтр("ru = 'Обновление зависимых данных завершено с ошибкой.
		|Не выполнен обработчик обновления';
		|en = 'Dependent data update completed with an error.
		|The update handler is not performed'") + " """ + Обработчик.ИмяОбработчика + """";
		
		ЕстьОшибка = Истина;
		ВызватьИсключение ТекстСообщения;
		
	КонецЦикла;
	
	Возврат ЕстьОшибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли