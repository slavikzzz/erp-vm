#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭтаНовая = ЭтоНоваяЗапись();
	ИнициироватьПодсказки();

	Если ЭтаНовая Тогда
		Если Параметры.Свойство("УчетнаяЗапись") Тогда
			Запись.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования.Номенклатура) Тогда
			Запись.Статус        = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПустаяСсылка();
			Запись.МаркерСтатуса = 0;
			Модифицированность   = Истина;
		КонецЕсли;
		
		Элементы.Статус.Видимость = Ложь;
		Элементы.ИдентификаторПубликации.Видимость = Ложь;
		Элементы.ГруппаЕслиСоздание.Видимость = Истина;
		Элементы.Номенклатура.ТолькоПросмотр = Ложь;
		Элементы.Характеристика.ТолькоПросмотр = Ложь;
		Элементы.Упаковка.ТолькоПросмотр = Ложь;
		
	Иначе
		Элементы.Статус.Видимость = Истина;
		Элементы.ИдентификаторПубликации.Видимость = Истина;
		Элементы.ГруппаЕслиСоздание.Видимость = Ложь;
		Элементы.Номенклатура.ТолькоПросмотр = Истина;
		Элементы.Характеристика.ТолькоПросмотр = Истина;
		Элементы.Упаковка.ТолькоПросмотр = Истина;
	КонецЕсли;

	Элементы.Статус.ЦветТекста = ПолучитьЦветТекстаПоМаркеру();
	ИнициализироватьСтраницы();
	ИнициализироватьХарактеристикиПоВидуНоменклатуры();
	ОбновитьДопИнфо();
	
	ПредыдущийСтатус = Запись.Статус;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда  
		ОчиститьСообщения();
		Отказ = Истина;
  		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Номенклатура"".';
															|en = 'Fill in the Items field.'"));
	КонецЕсли;

	СтруктураЗаписи = Новый Структура("УчетнаяЗапись, Номенклатура, Характеристика, Упаковка, Статус");
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Запись);
	Если ЭтоНоваяЗапись() И ЗаписьСуществует(СтруктураЗаписи) Тогда
		ОчиститьСообщения();
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Товар уже существует в списке публикации.';
														|en = 'The item already exists in the publication list.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиНаСервере();
	
	Оповестить("Запись_СтатусыПубликацииТоваровЯндексМаркет", 
		Запись.УчетнаяЗапись, 
		Запись);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЯНеЗнаюНажатие(Элемент)

	Элементы.ПодсказкаЯНеЗнаюSKU.Видимость = Не Элементы.ПодсказкаЯНеЗнаюSKU.Видимость;
	Если Элементы.ПодсказкаЯНеЗнаюSKU.Видимость Тогда
		Элементы.ПодсказкаЯЗнаюSKU.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЯЗнаюSKUНажатие(Элемент)

	Элементы.ПодсказкаЯЗнаюSKU.Видимость = Не Элементы.ПодсказкаЯЗнаюSKU.Видимость;
	Если Элементы.ПодсказкаЯЗнаюSKU.Видимость Тогда
		Элементы.ПодсказкаЯНеЗнаюSKU.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеНажатие(Элемент)

	Если ЗначениеЗаполнено(Запись.ГиперссылкаНаРекомендованныеТовар) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СокрЛП(Запись.ГиперссылкаНаРекомендованныеТовар));
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Гиперссылка на пример товара""';
														|en = 'Fill in the ""Goods example hyperlink"" field'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ОбновитьПредставлениеТовара();
	ОбновитьОтображениеДанных();
	ИнициализироватьХарактеристикиПоВидуНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)

	ОбновитьПредставлениеТовара();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ОбновитьПредставлениеТовара();
	ОбновитьОтображениеДанных();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьНаМодерацию(Команда)

	ОбработатьРекомендацию(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьРекомендацию(Команда)

	ОбработатьРекомендацию(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьРекомендацию(Команда)

	ОбработатьРекомендацию(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРекомендацию(Команда)
	
	ОбработатьРекомендацию(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуферОбменаИдентификаторПредложения(Команда)

	СкопироватьВБуферОбмена(Запись.ИдентификаторПредложения);	
	
КонецПроцедуры  

&НаКлиенте
Процедура СкопироватьВБуферОбменаИдентификаторПубликации(Команда)

	СкопироватьВБуферОбмена(Запись.ИдентификаторПубликации);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТовара(Команда)
	
	ОбновитьПредставлениеТовара();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьЦветТекстаПоМаркеру()
	
	Если Запись.МаркерСтатуса = 0 Тогда
		
		Цвет = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли Запись.МаркерСтатуса = 1 Тогда
		
		Цвет = ЦветаСтиля.ЦветАктивности;
		
	ИначеЕсли Запись.МаркерСтатуса = 2 Тогда
		
		Цвет = ЦветаСтиля.ЦветПустойГиперссылки;
		
	ИначеЕсли Запись.МаркерСтатуса = 3 Тогда 
		
		Цвет = ЦветаСтиля.ЦветАкцента;
		
	КонецЕсли;
	
	Возврат Цвет;
			
КонецФункции

&НаСервере
Процедура ИнициализироватьСтраницы()
	
	Элементы.СтраницаДанныеСвязи.ТолькоПросмотр = Ложь;
	Элементы.СтраницаДанныеТовара.ТолькоПросмотр = Ложь;
	Элементы.СообщениеОНедоступности.Видимость = Ложь;
	Элементы.СтраницаОписаниеОшибки.Видимость = Ложь;
	
	Если Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации
			Или Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена
			Или Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация Тогда
			 
		Элементы.СтраницаДанныеСвязи.ТолькоПросмотр = Истина;
		Элементы.СтраницаДанныеТовара.ТолькоПросмотр = Истина;
		Элементы.СообщениеОНедоступности.Видимость = Истина;
		Элементы.ПолучитьРекомендацию.Видимость = Ложь;
		Элементы.ОтправитьНаМодерацию.Видимость = Ложь;
		Элементы.УтвердитьРекомендацию.Видимость = Ложь;
		Элементы.ОтклонитьРекомендацию.Видимость = Ложь;
		Элементы.ОбновитьДанныеТовара.Видимость = Ложь;
	
	ИначеЕсли Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация Тогда
		
		Элементы.ПолучитьРекомендацию.Видимость = Ложь;
		Элементы.ОтправитьНаМодерацию.Видимость = Ложь;
		Элементы.УтвердитьРекомендацию.Видимость = Истина;
		Элементы.ОтклонитьРекомендацию.Видимость = Истина;
		Элементы.ОбновитьДанныеТовара.Видимость = Ложь;
	
	Иначе
		
		Элементы.ПолучитьРекомендацию.Видимость = Истина;
		Элементы.ОтправитьНаМодерацию.Видимость = Истина;
		Элементы.УтвердитьРекомендацию.Видимость = Ложь;
		Элементы.ОтклонитьРекомендацию.Видимость = Ложь;
		Элементы.ОбновитьДанныеТовара.Видимость = Истина;
	
	КонецЕсли;

	Если Запись.МаркерСтатуса = 0 
			И Не Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПустаяСсылка() Тогда //красный
		
	     Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
		 Элементы.СтраницаОписаниеОшибки.Видимость = Истина;
		
	ИначеЕсли Запись.МаркерСтатуса = 1 Тогда //желтый
		
	     Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанныеСвязи;
		 		
	ИначеЕсли Запись.МаркерСтатуса = 2 Тогда //серый
		
	     Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанныеТовара;
		
	ИначеЕсли Запись.МаркерСтатуса = 3 
				Или Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПустаяСсылка() Тогда //зеленый
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанныеТовара;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициироватьПодсказки()
	
	Элементы.ПодсказкаЯЗнаюSKU.Заголовок = НСтр("ru = 'Если Вы уже знаете SKU товара на Маркете, заполните информацию на закладке ""Данные связи"" и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").';
												|en = 'If you already know the Market item SKU, fill in the information on the ""Link data"" tab and send the item to moderation (the ""Send to moderation"" button).'");
	Элементы.ПодсказкаЯНеЗнаюSKU.Заголовок = НСтр("ru = 'Если Вы не знаете SKU товара на Маркете, получите информацию о рекомендованных связях - проверьте информацию о товаре на закладке ""Данные товара"", при необходимости дозаполните недостающую информацию и нажмите кнопку ""Получить рекомендацию"". Все поля на закладке ""Данные товара"" необязательны, но рекомендованы к заполнению - подробное описание свойств товара увеличит вероятность подбора правильной рекомендации. Дождитесь результатного статуса, после смены статуса переходите к проверке и утверждению рекомендованной связи.';
													|en = 'If you do not know the Market item SKU, receive the information on recommended links - check the item information on the ""Goods data"", tab and if necessary, fill in the missing data, then click ""Receive recommendation"". All fields on the ""Goods data"" tab are optional, but recommended for filling - items with detailed property descriptions are more likely to have the right recommendations. Wait for the result status, and after the status change, proceed to the recommended link check and approval.'");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьХарактеристикиПоВидуНоменклатуры()
	
	Если Не ЭтоНоваяЗапись() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Элементы.Характеристика.ТолькоПросмотр = Истина;
		Элементы.Упаковка.ТолькоПросмотр       = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Справочники.Номенклатура.ХарактеристикиИспользуются(Запись.Номенклатура) Тогда 
		Элементы.Характеристика.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Характеристика.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.Упаковка.ТолькоПросмотр = Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры

&НаСервере
Функция ЭтоНоваяЗапись()

	Возврат Не ЗначениеЗаполнено(Параметры.Ключ.Номенклатура);

КонецФункции

&НаКлиенте
Процедура ОбработатьРекомендацию(ИмяКоманды)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРекомендациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Требуется сохранение измененных данных. Продолжить?';
							|en = 'Save the changed data. Continue?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРекомендациюЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Номенклатура"".';
															|en = 'Fill in the Items field'"));
			Возврат;
		КонецЕсли;
		
		СтруктураЗаписи = Новый Структура("УчетнаяЗапись, Номенклатура, Характеристика, Упаковка, Статус");
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Запись);
		
		Если ЭтоНоваяЗапись() И ЗаписьСуществует(СтруктураЗаписи) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Товар уже существует в списке публикации.';
															|en = 'The item already exists in the publication list.'"));
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.ИмяКоманды = "ОтправитьНаМодерацию" Тогда
			ОтправитьНаМодерациюНаСервере();
		ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ОтклонитьРекомендацию" Тогда
			ОтклонитьРекомендациюНаСервере();
		ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "УтвердитьРекомендацию" Тогда
			УтвердитьРекомендациюНаСервере();
		ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ПолучитьРекомендацию" Тогда
			ПолучитьРекомендациюНаСервере();
		КонецЕсли;

		Оповестить("Запись_СтатусыПубликацииТоваровЯндексМаркет", 
			Запись.УчетнаяЗапись, 
			Запись);
			
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНаМодерациюНаСервере()

	Если ЗначениеЗаполнено(Запись.ИдентификаторТовараПлощадки) Тогда
		Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация;
	Иначе
		Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового;
	КонецЕсли;

	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОтклонитьРекомендациюНаСервере()
	
	Запись.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НевернаяРекомендация;
	Запись.ОписаниеОшибки =
		"Если товар определен неправильно:
		|Проверьте, что товар относится к одной из категорий, представленных на Маркете.
		|Убедитесь, что предоставили наиболее полные и точные данные о товаре.
		|Если не указана какая-либо информация, уточните входные данные запроса (например, добавьте цвет или размер в характеристики товара или добавьте описание модели, скорректировав данные в поле ""Представление"" на закладке ""Данные о товаре"", укажите базовую цену товара, если она не заполнена).
		|После заполнения данных отправьте повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
		|Попробуйте найти товар в поиске по разделу «Покупки» на Маркете. Если товар найдется, SKU на Яндексе можно взять из URL его страницы. Например, если URL страницы товара — https://market.yandex.ru/product--pir-2821ak/649875256?sponsored=1&sku=100848394231, то его SKU на Яндексе — 100848394231.Если советы не помогли - отправьте информацию о товаре без SKU на Яндексе (кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки для ваших товаров в личном кабинете, если товар еще не продается на Маркете.";
	Записать();

КонецПроцедуры

&НаСервере
Процедура УтвердитьРекомендациюНаСервере()

	Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация;
	Записать();

КонецПроцедуры

&НаСервере
Процедура ПолучитьРекомендациюНаСервере()

	Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.Новый;
	Записать();

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеТовара()

	Характеристика = "";
	Упаковка       = "";
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Если Не ЗначениеЗаполнено(Запись.Упаковка) Тогда
			Запись.Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;

		Номенклатура        = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Номенклатура, "Наименование");
		Характеристика      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Характеристика, "Наименование");
		Упаковка            = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Упаковка, "Наименование");
		ПредставлениеТовара = Номенклатура.Наименование;
		Если ЗначениеЗаполнено(Характеристика.Наименование) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + Характеристика.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка.Наименование) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + Упаковка.Наименование;
		КонецЕсли;
		
		Запись.ПредставлениеТовара = ПредставлениеТовара;
		Запись.ТоварнаяКатегория   = ИнтеграцияСЯндексМаркетСервер.КатегорияТовара(Запись.Номенклатура,Запись.УчетнаяЗапись);
		ПолучитьЦену(ИнтеграцияСЯндексМаркетСервер.ДанныеУчетнойЗаписиЯндексМаркет(Запись.УчетнаяЗапись, Ложь));
		Запись.ЦенаПродажи = Цена;
		
	Иначе
		Запись.ПредставлениеТовара = "";
		Запись.ТоварнаяКатегория   = "";
		Запись.ЦенаПродажи         = 0;
	КонецЕсли;
		
	ОбновитьДопИнфо();

КонецПроцедуры

&НаСервере
Процедура ПолучитьЦену(ДанныеУчетнойЗаписи)
			
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&УчетнаяЗапись КАК Справочник.УчетныеЗаписиМаркетплейсов) КАК УчетнаяЗапись,
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Товары     
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяЗапись,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка   
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика, 
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Упаковка = СправНоменклатура.ЕдиницаИзмерения
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Товары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ВЫРАЗИТЬ(ВТ_Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК УпаковкаТовара,
	|	&ВидЦен КАК ВидЦены,
	|	&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка
	|ПОМЕСТИТЬ ТаблицаТоварныхПозиций   
	|
	|ИЗ 
	|	ВТ_Товары КАК ВТ_Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура 
	|		ПО ВТ_Товары.Номенклатура = СправНоменклатура.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО СправНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ПоляДляЦенообразованияВыборка,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	&ПоляДляЦенообразованияСрез КАК ПоляДляЦенообразованияСрез,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЦеныНоменклатуры.Период КАК Период
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	ИсточникЦенНоменклатуры КАК ЦеныНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ПоляДляЦенообразованияСрез
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ТаблицаТоварныхПозиций.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ТаблицаТоварныхПозиций.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварныхПозиций.Характеристика КАК Характеристика,
	|	ТаблицаТоварныхПозиций.УпаковкаТовара КАК Упаковка,
	|	ЦеныНоменклатуры.Период КАК Период,
	|	&ЦенаПродажи КАК Цена
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
	|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
	|		ПО (КурсыВалютУчета.Валюта = &БазоваяВалюта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоварныхПозиций КАК ТаблицаТоварныхПозиций
	|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоварныхПозиций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныНоменклатуры";

	ТекущаяДата                   = ТекущаяДатаСеанса();
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ТекущаяДата);
	
	НастройкаЦенообразования                 = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "ВТ_Товары";
	НастройкаЦенообразования.ПолеСерия       = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", ТекстЗамены);
		ПоляДляЦенообразования =
			"ХарактеристикаЦО,
			|	СерияЦО,
			|	УпаковкаЦО";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", "ИСТИНА");
		ПоляДляЦенообразования =
			"Характеристика";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка", ПоляДляЦенообразования);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ИсточникЦенНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("ТаблицаТоварныхПозиций",
			"&ДатаЦен",
			Новый Структура("ВТаблице", "ВидЦены"),
			ИспользуетсяЦенообразование25));

	Если ИспользуетсяЦенообразование25 Тогда
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ЦеныНоменклатуры.СерияЦО КАК СерияЦО,
			|	ЦеныНоменклатуры.УпаковкаЦО КАК УпаковкаЦО";
	Иначе
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.Характеристика КАК Характеристика";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияСрез КАК ПоляДляЦенообразованияСрез", ПоляДляЦенообразованияСрез);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияСрез", ПоляДляЦенообразования);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТаблицаТоварныхПозиций",
			"ЦеныНоменклатуры",,
			ИспользуетсяЦенообразование25));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЦенаПродажи",
		"ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) 
		|			* ВЫБОР
		|				КОГДА ТаблицаТоварныхПозиций.Упаковка <> ЦеныНоменклатуры.Упаковка
		|					ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
		|							/ ВЫБОР
		|								КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|									ТОГДА 1
		|								ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|							КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ 
		|			* ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Валюта = &БазоваяВалюта
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1))
		|			КОНЕЦ КАК ЧИСЛО(31, 2))");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ТаблицаТоварныхПозиций.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ТаблицаТоварныхПозиций.Упаковка
			|КОНЕЦ)",
			"ТаблицаТоварныхПозиций.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ЦеныНоменклатуры.Упаковка
			|КОНЕЦ)",
			"ЦеныНоменклатуры.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Параметры.Вставить("УчетнаяЗапись",  ДанныеУчетнойЗаписи.УчетнаяЗапись);
	Запрос.Параметры.Вставить("ВидЦен",         ДанныеУчетнойЗаписи.ЦенаПродажи);
	Запрос.УстановитьПараметр("ДатаЦен",        ТекущаяДата);
	Запрос.УстановитьПараметр("БазоваяВалюта",  ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.УстановитьПараметр("Номенклатура",	Запись.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",	Запись.Характеристика);
	Запрос.УстановитьПараметр("Упаковка",		Запись.Упаковка);
	
	ЦеныТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ЦеныТоваров.Количество()>0 Тогда	
		Цена = ЦеныТоваров[0].Цена;
	Иначе
		Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДопИнфо()
	
	Если Запись.ТоварнаяКатегория <> "" Тогда
		ШаблонСообщения = НСтр("ru = 'Категория: %1';
								|en = 'Category: %1'") + Символы.ПС;
		ТоварнаяКатегория = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Запись.ТоварнаяКатегория);
	Иначе
		ТоварнаяКатегория = НСтр("ru = 'Категория: не указана';
								|en = 'Category: not specified'") + Символы.ПС;
	КонецЕсли;

	Если Запись.ЦенаПродажи <> "" Тогда
		ШаблонСообщения = НСтр("ru = 'Цена продажи: %1';
								|en = 'Selling price: %1'") + Символы.ПС;
		БазоваяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Запись.ЦенаПродажи);
	Иначе
		БазоваяЦена = НСтр("ru = 'Цена продажи: не указана';
							|en = 'Selling price: not specified'") + Символы.ПС;
	КонецЕсли;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Номенклатура, 
		"Наименование, Артикул, Марка, Марка.Наименование, Производитель, Производитель.Наименование, "
			+ "СтранаПроисхождения, СтранаПроисхождения.Наименование, СрокГодности, ЕдиницаИзмеренияСрокаГодности");
	
	Если ЗначениеЗаполнено(РеквизитыНоменклатуры.Марка) Тогда
		ШаблонСообщения = НСтр("ru = 'Бренд (марка): %1';
								|en = 'Brand: %1'") + Символы.ПС;
		Бренд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РеквизитыНоменклатуры.МаркаНаименование);
	Иначе
		Бренд = НСтр("ru = 'Бренд (марка): не указан';
					|en = 'Brand: not specified'") + Символы.ПС;
	КонецЕсли;

	Если РеквизитыНоменклатуры.Артикул <> "" Тогда
		ШаблонСообщения = НСтр("ru = 'Артикул: %1';
								|en = 'Item ID: %1'") + Символы.ПС;
		Артикул = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РеквизитыНоменклатуры.Артикул);
	Иначе
		Артикул = НСтр("ru = 'Артикул: не указан';
						|en = 'Item ID: not specified'") + Символы.ПС;
	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыНоменклатуры.Производитель) Тогда 
		ШаблонСообщения = НСтр("ru = 'Производитель: %1';
								|en = 'Manufacturer: %1'") + Символы.ПС;
		Производитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РеквизитыНоменклатуры.ПроизводительНаименование);
	Иначе
		Производитель  = НСтр("ru = 'Производитель: не указан (обязателен при отправке на модерацию)';
								|en = 'Manufacturer: not specified (required when sending to moderation)'") + Символы.ПС;
	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыНоменклатуры.СтранаПроисхождения) Тогда
		ШаблонСообщения = НСтр("ru = 'Страна происхождения: %1';
								|en = 'Country of origin: %1'") + Символы.ПС;
		Страна = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РеквизитыНоменклатуры.СтранаПроисхожденияНаименование);
	Иначе
		Страна = НСтр("ru = 'Страна происхождения: не указана (обязательна при отправке на модерацию)';
						|en = 'Country of origin: not specified (required when sending to moderation)'") + Символы.ПС;
	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыНоменклатуры.СрокГодности) Тогда
		ШаблонСообщения = НСтр("ru = 'Срок годности: %1 %2';
								|en = 'Shelf life: %1 %2'") + Символы.ПС;
		СрокГодности = СтрШаблон(ШаблонСообщения, РеквизитыНоменклатуры.СрокГодности, РеквизитыНоменклатуры.ЕдиницаИзмеренияСрокаГодности);
	Иначе
		СрокГодности  = НСтр("ru = 'Срок годности: не указан';
							|en = 'Shelf life: not specified'") + Символы.ПС;
	КонецЕсли;
	
	ЕстьШтрихКоды = ИнтеграцияСЯндексМаркетСервер.ПолучитьШтрихКоды(Запись.Номенклатура, Запись.Характеристика, Запись.Упаковка).Количество()>0;

	Если ЕстьШтрихКоды Тогда
		ШтрихКоды = НСтр("ru = 'Для товара указаны штрих-коды';
						|en = 'Barcodes are specified for the item'") + Символы.ПС;
	Иначе
		ШтрихКоды = НСтр("ru = 'Для товара не указаны штрих-коды (обязательны при отправке на модерацию)';
						|en = 'Barcodes are not specified for the item (they are required when sending to moderation)'") + Символы.ПС;
	КонецЕсли;

	Весогабариты = ИнтеграцияСЯндексМаркетСервер.ПолучитьВесогабариты(Запись.Упаковка, Запись.Номенклатура, Истина);

	ВесогабаритыЗаголовок = НСтр("ru = 'Весогабариты:';
								|en = 'Weight and dimensions:'") + Символы.ПС;
	Если Весогабариты.length <> "" Тогда
		Если Весогабариты.package = 1 Тогда
			ШаблонСообщения = НСтр("ru = '	Длина (глубина) упаковки товара: %1 см';
									|en = '	Item packaging unit length (depth): %1 cm'") + Символы.ПС;
		Иначе
			ШаблонСообщения = НСтр("ru = '	Длина: %1 см';
									|en = '	Length: %1 cm'") + Символы.ПС;
		КонецЕсли;
		ВесогабаритыДлина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Весогабариты.length);
	Иначе
		Если Весогабариты.package = 1 Тогда
			ВесогабаритыДлина = НСтр("ru = '	Для товара не указана длина (глубина) в параметрах упаковки (обязательный параметр при отправке на модерацию)';
									|en = '	In the packaging unit parameters, the length (depth) is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		Иначе
			ВесогабаритыДлина = НСтр("ru = '	Для товара не указана длина (обязательный параметр при отправке на модерацию)';
									|en = '	The length is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		КонецЕсли;
	КонецЕсли;

	Если Весогабариты.width <> "" Тогда
		Если Весогабариты.package = 1 Тогда
			ШаблонСообщения = НСтр("ru = '	Ширина упаковки товара: %1 см';
									|en = '	Item packaging unit width: %1 cm'") + Символы.ПС;
		Иначе
			ШаблонСообщения = НСтр("ru = '	Ширина: %1 см';
									|en = '	Width: %1 cm'") + Символы.ПС;
		КонецЕсли;
		ВесогабаритыШирина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Весогабариты.width);
	Иначе
		Если Весогабариты.package = 1 Тогда
			ВесогабаритыШирина = НСтр("ru = '	Для товара не указана ширина в параметрах упаковки (обязательный параметр при отправке на модерацию)';
										|en = '	In the packaging unit parameters, the width is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		Иначе
			ВесогабаритыШирина = НСтр("ru = '	Для товара не указана ширина (обязательный параметр при отправке на модерацию)';
										|en = '	The width is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		КонецЕсли;
	КонецЕсли;

	Если Весогабариты.height <> "" Тогда
		Если Весогабариты.package = 1 Тогда
			ШаблонСообщения = НСтр("ru = '	Высота упаковки товара: %1 см';
									|en = '	Item packaging unit height: %1 cm'") + Символы.ПС;
		Иначе
			ШаблонСообщения = НСтр("ru = '	Высота: %1 см';
									|en = '	Height: %1 cm'") + Символы.ПС;
		КонецЕсли;

		ВесогабаритыВысота = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Весогабариты.height);
	Иначе
		Если Весогабариты.package = 1 Тогда
			ВесогабаритыВысота = НСтр("ru = '	Для товара не указана высота в параметрах упаковки (обязательный параметр при отправке на модерацию)';
										|en = '	In the packaging unit parameters, the height is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		Иначе 
			ВесогабаритыВысота = НСтр("ru = '	Для товара не указана высота (обязательный параметр при отправке на модерацию)';
										|en = '	The height is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		КонецЕсли;
	КонецЕсли;

	Если Весогабариты.weight <> "" Тогда
		Если Весогабариты.package = 1 Тогда
			ШаблонСообщения = НСтр("ru = '	Вес упаковки товара: %1 кг';
									|en = '	Item packaging unit weight: %1 kg'") + Символы.ПС;
		Иначе
			ШаблонСообщения = НСтр("ru = '	Вес: %1 кг';
									|en = '	Weight: %1 kg'") + Символы.ПС;
		КонецЕсли;

		ВесогабаритыВес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Весогабариты.weight);
	Иначе
		Если Весогабариты.package = 1 Тогда
			ВесогабаритыВес = НСтр("ru = '	Для товара не указан вес в параметрах упаковки (обязательный параметр при отправке на модерацию)';
									|en = '	In the packaging unit parameters, the weight is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		Иначе
			ВесогабаритыВес = НСтр("ru = '	Для товара не указан вес (обязательный параметр при отправке на модерацию)';
									|en = '	The weight is not specified for the item (it is a required parameter when sending to moderation)'") + Символы.ПС;
		КонецЕсли;

	КонецЕсли;

	ДопИнфо = ТоварнаяКатегория + БазоваяЦена + Бренд + Артикул + Производитель
		+ Страна + ШтрихКоды + СрокГодности + ВесогабаритыЗаголовок+ ВесогабаритыДлина
		+ ВесогабаритыШирина + ВесогабаритыВысота + ВесогабаритыВес;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьСуществует(СтруктураЗаписи)

	ЗаписьСуществует = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = &Номенклатура
		|	И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = &Характеристика
		|	И СтатусыПубликацииТоваровЯндексМаркет.Упаковка = &Упаковка";

	Запрос.Параметры.Вставить("УчетнаяЗапись",  СтруктураЗаписи.УчетнаяЗапись);
	Запрос.Параметры.Вставить("Номенклатура",   СтруктураЗаписи.Номенклатура);
	Запрос.Параметры.Вставить("Характеристика", СтруктураЗаписи.Характеристика);
	Запрос.Параметры.Вставить("Упаковка",       СтруктураЗаписи.Упаковка);

	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Если ВыборкаДанных.Следующий() Тогда
		ЗаписьСуществует = Истина;
	КонецЕсли;

	Возврат ЗаписьСуществует;

КонецФункции

&НаКлиенте
Асинх Функция СкопироватьВБуферОбмена(Текст)
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Текст;
		
		Если Ждать СредстваБуфераОбмена.ПоддерживаетсяФорматДанных(ФорматДанных) Тогда
			ПомещаемыеДанные = Новый ЭлементБуфераОбмена(ФорматДанных, Текст);
			Возврат Ждать СредстваБуфераОбмена.ПоместитьДанныеАсинх(ПомещаемыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере()
	
	Если Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена
			И Запись.Статус <> ПредыдущийСтатус Тогда
		РегистрыСведений.ОстаткиТоваровМаркетплейсов.ОчиститьЗаписиПоНоменклатуреИХарактеристике(
			Запись.УчетнаяЗапись, 
			Запись.Номенклатура,
			Запись.Характеристика);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
