#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПланСчетов = Параметры.ПланСчетов;
	Организация = Параметры.Организация;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НастройкаПроводокПоХозяйственнымОперациям = ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям");
	НастройкаПроводокПоОбъектамУчета = ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета");
	ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного = ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного");
	
	ИнициализироватьТаблицуНастройки();
	ЗаполнитьНастройкиФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаконченаНастройкаСчетовМеждународногоУчета"
		Или ИмяСобытия = "ЗаконченаНастройкаШаблоновПроводокМеждународногоУчета"
		Или ИмяСобытия = "ЗаконченаНастройкаСоотвествияСчетовИОборотовМеждународногоУчета"
		Или ИмяСобытия = "Запись_ПланыСчетовМеждународногоУчетаОрганизаций"
		Или	ИмяСобытия = "ЗакрытиыеФормыСписка_ПланыСчетовМеждународногоУчетаОрганизаций"
		Или ИмяСобытия = "ЗакрытаФормаНастроек" Тогда
		ЗаполнитьНастройкиФормированияПроводок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

	&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ПланСчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыСчетовОрганизацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяТекущегоЭлемента = Поле.Имя;
	Если СтрНайти(ИмяТекущегоЭлемента, "НастройкаИспользуется_") <> 0 Тогда
		
		ТекущиеДанные = Элементы.ПланыСчетовОрганизаций.ТекущиеДанные;
		
		ПараметрыФормы = МеждународныйУчетКлиент.ПараметрыОткрытияФормНастройкиПроводок();
		ПараметрыФормы.Организация = ТекущиеДанные.Организация;
		СтрокиПланыСчетов = ПланыСчетовМеждународногоУчета.НайтиСтроки(
								Новый Структура("ИмяРеквизитаНастройкаИспользуется", ИмяТекущегоЭлемента));
		СтрокаПланыСчетов = СтрокиПланыСчетов[0];
		ПараметрыФормы.ПланСчетов = СтрокаПланыСчетов.Ссылка;
		ПараметрыФормы.НастройкаФормированияПроводок = ТекущиеДанные[СтрокаПланыСчетов.ИмяРеквизитаНастройка];
		
		Если НастройкаПроводокПоХозяйственнымОперациям Тогда
			МеждународныйУчетПоДаннымОперативногоУчетаКлиент.ОткрытьНастройкуШаблоновПроводок(ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли НастройкаПроводокПоОбъектамУчета Тогда
			МеждународныйУчетПоДаннымФинансовыхРегистровКлиент.ОткрытьНастройкуСчетовПоОбъектамУчета(ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного Тогда
			МеждународныйУчетПоДаннымРеглУчетаКлиент.ОткрытьНастройкуСоответствияСчетовИОборотов(ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Параметры:
// 	Элемент - ПолеФормы -
&НаКлиенте
Процедура Подключаемый_ФлагПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.ПланыСчетовОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные[Элемент.Имя] Тогда
	
		ПараметрыФормы = МеждународныйУчетКлиент.ПараметрыОткрытияФормНастройкиПроводок();
		ПараметрыФормы.Организация = ТекущиеДанные.Организация;
		
		СтрокиПланыСчетов = ПланыСчетовМеждународногоУчета.НайтиСтроки(Новый Структура("ИмяРеквизитаФлаг", Элемент.Имя));
		СтрокаПланыСчетов = СтрокиПланыСчетов[0];
		ПараметрыФормы.ПланСчетов = СтрокиПланыСчетов[0].Ссылка;
		ПараметрыФормы.НастройкаФормированияПроводок = ТекущиеДанные[СтрокаПланыСчетов.ИмяРеквизитаНастройка];
		
		Если НастройкаПроводокПоХозяйственнымОперациям Тогда
			МеждународныйУчетПоДаннымОперативногоУчетаКлиент.ОткрытьНастройкуШаблоновПроводок(ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли НастройкаПроводокПоОбъектамУчета Тогда
			МеждународныйУчетПоДаннымФинансовыхРегистровКлиент.ОткрытьНастройкуСчетовПоОбъектамУчета(ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного Тогда
			МеждународныйУчетПоДаннымРеглУчетаКлиент.ОткрытьНастройкуСоответствияСчетовИОборотов(ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		СтрокиПланыСчетов = ПланыСчетовМеждународногоУчета.НайтиСтроки(Новый Структура("ИмяРеквизитаФлаг", Элемент.Имя));
		СтрокаПланыСчетов = СтрокиПланыСчетов[0];
		Если ЗначениеЗаполнено(ТекущиеДанные[СтрокаПланыСчетов.ИмяРеквизитаНастройка]) Тогда
			
			Организация = ТекущиеДанные.Организация;
			ВыбранныйПланСчетов = СтрокаПланыСчетов.Ссылка;
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("Организация", Организация);
			ДополнительныеПараметры.Вставить("ПланСчетов", ВыбранныйПланСчетов);
			ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
			ДополнительныеПараметры.Вставить("ИмяРеквизитаФлаг", СтрокаПланыСчетов.ИмяРеквизитаФлаг);
			ДополнительныеПараметры.Вставить("ИмяРеквизитаНастройка", СтрокаПланыСчетов.ИмяРеквизитаНастройка);
			ДополнительныеПараметры.Вставить("ИмяРеквизитаНастройкаНеИспользуется", СтрокаПланыСчетов.ИмяРеквизитаНастройкаНеИспользуется);
			ДополнительныеПараметры.Вставить("ИмяРеквизитаНастройкаИспользуется", СтрокаПланыСчетов.ИмяРеквизитаНастройкаИспользуется);
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОбОтключенииФормированияПроводок", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = 
				СтрШаблон(НСтр("ru = 'Будет отключено формирование проводок по организации ""%1"" на плане счетов ""%2"". Продолжить?';
								|en = 'Generation of entries for company ""%1"" based on chart of accounts ""%2"" will be disabled. Continue?'"),
					Организация,
					ВыбранныйПланСчетов);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Для каждого СтрокаПланСчетов Из ПланыСчетовМеждународногоУчета Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы = Элементы[СтрокаПланСчетов.ИмяРеквизитаНастройкаНеИспользуется]; // ПолеФормы - 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаФлаг);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

		ПустаяНастройка = Новый СписокЗначений();
		ПустаяНастройка.Добавить(Неопределено);
		ПустаяНастройка.Добавить(Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка());
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы = Элементы[СтрокаПланСчетов.ИмяРеквизитаНастройкаНеИспользуется]; // ПолеФормы - 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаФлаг);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаНастройка);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ОтборЭлемента.ПравоеЗначение = ПустаяНастройка;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы = Элементы[СтрокаПланСчетов.ИмяРеквизитаНастройкаНеИспользуется]; // ПолеФормы - 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаФлаг);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаНастройка);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Неопределено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																	|en = 'Not used'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы = Элементы[СтрокаПланСчетов.ИмяРеквизитаНастройкаНеИспользуется]; // ПолеФормы - 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаФлаг);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаНастройка);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка();;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
		
		//
		
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы = Элементы[СтрокаПланСчетов.ИмяРеквизитаНастройкаИспользуется]; // ПолеФормы - 
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаФлаг);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетовОрганизаций." + СтрокаПланСчетов.ИмяРеквизитаНастройка);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = ПустаяНастройка;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	
	ТекущаяОрганизация = Элементы.ПланыСчетовОрганизаций.ТекущиеДанные.Организация;
	ВыделенныйПланСчетов = Неопределено;
	ОтборПоискПланаСчетов = Новый Структура();
	ОтборПоискПланаСчетов.Вставить("ИмяРеквизитаНастройка", "Настройка_" + Прав(Элементы.ПланыСчетовОрганизаций.ТекущийЭлемент.Имя, 1));
	НайденныйПланСчетов = ПланыСчетовМеждународногоУчета.НайтиСтроки(ОтборПоискПланаСчетов);
	Если НайденныйПланСчетов.Количество() Тогда
		ВыделенныйПланСчетов = НайденныйПланСчетов[0].Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ПараметрыФормы = Новый Структура();
		Отбор = Новый Структура("Организация", ТекущаяОрганизация);
		Если ЗначениеЗаполнено(ВыделенныйПланСчетов) Тогда
			Отбор.Вставить("ПланСчетов", ВыделенныйПланСчетов);
		КонецЕсли;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииНаСервере()
	ИнициализироватьТаблицуНастройки();
	ЗаполнитьНастройкиФормированияПроводок();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуНастройки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчета.Ссылка
	|ИЗ
	|	Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетовМеждународногоУчета
	|ГДЕ
	|	(ПланыСчетовМеждународногоУчета.Ссылка = &ПланСчетов
	|		ИЛИ &ВсеПланыСчетов)
	|	И НЕ ПланыСчетовМеждународногоУчета.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("ВсеПланыСчетов", Не ЗначениеЗаполнено(ПланСчетов));
	
	ПланыСчетовМеждународногоУчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Индекс = 0;
	Для каждого СтрокаТаблицы Из ПланыСчетовМеждународногоУчета Цикл
		СтрокаТаблицы.ИмяРеквизитаНастройка = "Настройка_" + Индекс;
		СтрокаТаблицы.ИмяРеквизитаФлаг = "Флаг_" + Индекс;
		СтрокаТаблицы.ИмяРеквизитаНастройкаНеИспользуется = "НастройкаНеИспользуется_" + Индекс;
		СтрокаТаблицы.ИмяРеквизитаНастройкаИспользуется = "НастройкаИспользуется_" + Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	УдалитьРеквизитыПоПланамСчетов();
	ДобавитьРеквизитыПоПланамСчетов();
	
	СоздатьЭлементыФормы();
	УстановитьУсловноеОформление();
	
	ЗаполнитьОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизации()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И (&ЛюбаяОрганизация ИЛИ Организации.Ссылка = &Организация)
	|";
	
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация", Организация);
	ПланыСчетовОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Для каждого СтрокаТаблицы Из ПланыСчетовМеждународногоУчета Цикл
			
			
			НовыйГруппаФормы = ЭтотОбъект.Элементы.Добавить(
													"Группа_" + СтрокаТаблицы.ПолучитьИдентификатор(),
													Тип("ГруппаФормы"),
													Элементы.ПланыСчетовОрганизаций);
			НовыйГруппаФормы.Заголовок = Строка(СтрокаТаблицы.Ссылка);
			НовыйГруппаФормы.ОтображатьВШапке = Истина;
			НовыйГруппаФормы.ОтображатьЗаголовок = Истина;
			НовыйГруппаФормы.Вид = ВидГруппыФормы.ГруппаКолонок;
			НовыйГруппаФормы.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			НовыйЭлементФлаг = ЭтотОбъект.Элементы.Добавить(
													СтрокаТаблицы.ИмяРеквизитаФлаг,
													Тип("ПолеФормы"),
													НовыйГруппаФормы);
			НовыйЭлементФлаг.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлементФлаг.ПутьКДанным = "ПланыСчетовОрганизаций." + СтрокаТаблицы.ИмяРеквизитаФлаг;
			НовыйЭлементФлаг.ОтображатьВШапке = Ложь;
			НовыйЭлементФлаг.УстановитьДействие("ПриИзменении", "Подключаемый_ФлагПриИзменении");
			НовыйЭлементФлаг.ШиринаЭлемента = 1;
			
			НовыйЭлементНастройкаИспользуется = ЭтотОбъект.Элементы.Добавить(
													СтрокаТаблицы.ИмяРеквизитаНастройкаИспользуется,
													Тип("ПолеФормы"),
													НовыйГруппаФормы);
			НовыйЭлементНастройкаИспользуется.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлементНастройкаИспользуется.ПутьКДанным = "ПланыСчетовОрганизаций." + СтрокаТаблицы.ИмяРеквизитаНастройкаИспользуется;
			НовыйЭлементНастройкаИспользуется.ОтображатьВШапке = Ложь;
			НовыйЭлементНастройкаИспользуется.ГиперссылкаЯчейки = Истина;
			НовыйЭлементНастройкаИспользуется.ТолькоПросмотр = Истина;
			НовыйЭлементНастройкаИспользуется.ЦветТекста = ЦветаСтиля.ГиперссылкаТабличнойЧасти;
		
			НовыйЭлементНастройкаНеИспользуется = ЭтотОбъект.Элементы.Добавить(
													СтрокаТаблицы.ИмяРеквизитаНастройкаНеИспользуется,
													Тип("ПолеФормы"),
													НовыйГруппаФормы);
			НовыйЭлементНастройкаНеИспользуется.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлементНастройкаНеИспользуется.ОтображатьВШапке = Ложь;
			НовыйЭлементНастройкаНеИспользуется.ПутьКДанным = "ПланыСчетовОрганизаций." + СтрокаТаблицы.ИмяРеквизитаНастройкаНеИспользуется;
			НовыйЭлементНастройкаНеИспользуется.ГиперссылкаЯчейки = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПоПланамСчетов()
	
	ДобавляемыеРеквизиты = Новый Массив();
	Для каждого СтрокаТаблицы Из ПланыСчетовМеждународногоУчета Цикл
		
		РеквизитФлаг = Новый РеквизитФормы(
											СтрокаТаблицы.ИмяРеквизитаФлаг,
											Новый ОписаниеТипов("Булево") , 
											"ПланыСчетовОрганизаций", 
											Нстр("ru = 'Есть настройка';
												|en = 'Setting exists'"));
		ДобавляемыеРеквизиты.Добавить(РеквизитФлаг);
		
		ТипыНастройка = Новый Массив();
		ТипыНастройка.Добавить(Неопределено);
		ТипыНастройка.Добавить("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета");
		
		РеквизитНастройка = Новый РеквизитФормы(
											СтрокаТаблицы.ИмяРеквизитаНастройка,
											Новый ОписаниеТипов(ТипыНастройка) , 
											"ПланыСчетовОрганизаций", 
											Строка(СтрокаТаблицы.Ссылка));
		ДобавляемыеРеквизиты.Добавить(РеквизитНастройка);
		
		РеквизитНастройкаНеИспользуется = Новый РеквизитФормы(
											СтрокаТаблицы.ИмяРеквизитаНастройкаНеИспользуется,
											Новый ОписаниеТипов("Строка") , 
											"ПланыСчетовОрганизаций", 
											Нстр("ru = 'Настройка не используется';
												|en = 'Setting is not used'"));
		ДобавляемыеРеквизиты.Добавить(РеквизитНастройкаНеИспользуется);
		
		РеквизитНастройкаИспользуется = Новый РеквизитФормы(
											СтрокаТаблицы.ИмяРеквизитаНастройкаИспользуется,
											Новый ОписаниеТипов("Строка") , 
											"ПланыСчетовОрганизаций", 
											Нстр("ru = 'Настройка используется';
												|en = 'Setting is used'"));
											
		ДобавляемыеРеквизиты.Добавить(РеквизитНастройкаИспользуется);
		
	КонецЦикла;
	
	ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыПоПланамСчетов()

	УдаляемыеРеквизиты = Новый Массив();
	ТаблицаПланыСчетовОрганизаций = ПланыСчетовОрганизаций.Выгрузить(Новый Массив);
	Для каждого Колонка Из ТаблицаПланыСчетовОрганизаций.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "Настройка_") <> 0 
				Или СтрНайти(Колонка.Имя, "Флаг_") <> 0 
				Или СтрНайти(Колонка.Имя, "Группа_") <> 0 
				Или СтрНайти(Колонка.Имя, "НастройкаНеИспользуется_") <> 0
				Или СтрНайти(Колонка.Имя, "НастройкаИспользуется_") <> 0 Тогда
			
			УдаляемыеРеквизиты.Добавить("ПланыСчетовОрганизаций." + Колонка.Имя);
			
			ЭлементФормы = Элементы.Найти(Колонка.Имя);
			Если ЭлементФормы <> Неопределено Тогда
				Элементы.Удалить(ЭлементФормы);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭтотОбъект.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиФормированияПроводок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация
	|ПОМЕСТИТЬ ВтОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	РегистрСрезПоследних.ПланСчетов КАК ПланСчетов,
	|	РегистрСрезПоследних.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ПРЕДСТАВЛЕНИЕ(РегистрСрезПоследних.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводокПредставление,
	|	РегистрСрезПоследних.Период КАК НастройкаФормированияПроводокПериод
	|ИЗ
	|	ВтОрганизации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(, ПланСчетов = &ПланСчетов ИЛИ &ВсеПланыСчетов) КАК РегистрСрезПоследних
	|	ПО
	|		Организации.Организация = РегистрСрезПоследних.Организация
	|
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("Организации", ПланыСчетовОрганизаций.Выгрузить());
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("ВсеПланыСчетов", Не ЗначениеЗаполнено(ПланСчетов));
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаТаблицыНастроек Из ПланыСчетовОрганизаций Цикл
		
		Если ВыборкаОрганизация.НайтиСледующий(СтрокаТаблицыНастроек.Организация, "Организация") Тогда
			
			Выборка = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Для каждого СтрокаПланыСчетов Из ПланыСчетовМеждународногоУчета Цикл
				
				Если Выборка.НайтиСледующий(Новый Структура("ПланСчетов", СтрокаПланыСчетов.Ссылка)) Тогда
					Если Выборка.НастройкаФормированияПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка() Тогда
						ТекстСсылки = 
						СтрШаблон(НСтр("ru = 'Не используется с %1';
										|en = 'Not used since %1'"), 
							Формат(Выборка.НастройкаФормированияПроводокПериод, "ДЛФ=D;"));
						СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаФлаг] = Ложь;
						СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаНастройкаНеИспользуется] = ТекстСсылки;
					Иначе
						ТекстСсылки = 
							СтрШаблон(НСтр("ru = 'Настройка: %1, применяется с %2';
											|en = 'Setting: %1, applied since %2'"), 
								Выборка.НастройкаФормированияПроводокПредставление,
								Формат(Выборка.НастройкаФормированияПроводокПериод, "ДЛФ=D;"));
						СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаФлаг] = Истина;
						СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаНастройкаИспользуется] = ТекстСсылки;
					КонецЕсли;	
					СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаНастройка] = Выборка.НастройкаФормированияПроводок;
				Иначе
					СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаНастройка] = Неопределено;
					СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаНастройкаИспользуется] = "";
					СтрокаТаблицыНастроек[СтрокаПланыСчетов.ИмяРеквизитаФлаг] = Ложь;
				КонецЕсли;
				Выборка.Сбросить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыборкаОрганизация.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОбОтключенииФормированияПроводок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ПланыСчетовОрганизаций.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ТекстПодсказки = НСтр("ru = 'Введите дату отключения.';
								|en = 'Enter date of disabling.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриВводеДатыОтключенииФормированияПроводок", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводДаты(ОписаниеОповещения, ТекущаяДата, ТекстПодсказки, ЧастиДаты.Дата);
	Иначе
		ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаФлаг] = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриВводеДатыОтключенииФормированияПроводок(ДатаОтключения, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ПланыСчетовОрганизаций.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ДатаОтключения) Тогда
		ДатаОтключения = НачалоМесяца(ДатаОтключения);
		ВведеннаяДатаОтключения = ДатаОтключения;
		НастройкаОтключена = Ложь;
		ОтключитьФормированиеПроводок(ДополнительныеПараметры.ПланСчетов, ДополнительныеПараметры.Организация, ДатаОтключения, НастройкаОтключена);
		Если ДатаОтключения = ВведеннаяДатаОтключения Или НастройкаОтключена Тогда
			ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаНастройка] = ПредопределенноеЗначение("Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка");
			ТекстСсылки = СтрШаблон(НСтр("ru = 'Не используется с %1';
										|en = 'Not used since %1'"), Формат(ДатаОтключения, "ДЛФ=D;"));
			ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаНастройкаИспользуется] = ТекстСсылки;
		Иначе
			ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаФлаг] = Истина;
		КонецЕсли;
	Иначе
		ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаФлаг] = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьФормированиеПроводок(ПланСчетов, Организация, ДатаОтключения, НастройкаОтключена)
	
	ДатаПредыдущая = ДобавитьМесяц(НачалоМесяца(ДатаОтключения), -1);
	ПредидущаяСтрока = РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(ДатаПредыдущая, Новый Структура("ПланСчетов, Организация", ПланСчетов, Организация));
	
	НаборЗаписей = РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПланСчетов.Установить(ПланСчетов);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Период.Установить(ДатаОтключения);
	
	ОтключеноРанее = ПредидущаяСтрока.Количество() И Не ЗначениеЗаполнено(ПредидущаяСтрока[0].НастройкаформированияПроводок);
	
	Если Не ОтключеноРанее Тогда
		ПустаяНастройка = НаборЗаписей.Добавить();
		ПустаяНастройка.Организация = Организация;
		ПустаяНастройка.ПланСчетов = ПланСчетов;
		ПустаяНастройка.Период = ДатаОтключения;
	Иначе
		НаборЗаписей.Прочитать();
		НастройкаОтключена = НаборЗаписей.Количество();
		Если Не НастройкаОтключена Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На дату %1 ведние учета по плану счетов %2 не было включено. Настройка была отключена ранее %3.';
											|en = 'As of %1, accounting based on chart of accounts %2 was not enabled. The setting was disabled previously %3.'"), 
							Формат(ДатаОтключения, "ДЛФ=DD;"),
							ПланСчетов,
							Формат(ПредидущаяСтрока[0].Период, "ДЛФ=DD;"));
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В этом периоде уже было введено включение ведение учета по плану счетов %2. Настройка за период %1 удалена.';
											|en = 'In this period, enabling of the accounting based on chart of accounts %2 has already been introduced. Setting for period %1 has been deleted.'"), 
								Формат(ДатаОтключения, "ДЛФ=DD;"),
								ПланСчетов);
		КонецЕсли;
		
		ДатаОтключения = ПредидущаяСтрока[0].Период;
		НаборЗаписей.Очистить();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти