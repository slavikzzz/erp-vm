#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ЗарплатаКадрыВнутренний.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(РазделыДатЗапретаИзменения.Ссылка, НЕОПРЕДЕЛЕНО) КАК РазделСсылка,
		|	РазделыДатЗапретаИзмененияОбъектов.РазделСсылка КАК РазделСсылкаРегистра,
		|	РазделыДатЗапретаИзмененияОбъектов.Раздел КАК Имя,
		|	РазделыДатЗапретаИзмененияОбъектов.РазделСсылка.Наименование КАК РазделСсылкаНаименование
		|ИЗ
		|	РегистрСведений.РазделыДатЗапретаИзмененияОбъектовБЗК КАК РазделыДатЗапретаИзмененияОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК РазделыДатЗапретаИзменения
		|		ПО РазделыДатЗапретаИзмененияОбъектов.РазделСсылка = РазделыДатЗапретаИзменения.Ссылка
		|ГДЕ
		|	РазделыДатЗапретаИзмененияОбъектов.РазделСсылка <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)";
	
	РазделыРегистра = Запрос.Выполнить().Выгрузить();
	СсылкиРазделов = РазделыРегистра.ВыгрузитьКолонку("РазделСсылка");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СсылкиРазделов, Неопределено);
	
	ПредопределенныеРазделы = Разделы.СкопироватьКолонки();
	ЗарплатаКадрыВнутренний.ПриЗаполненииРазделовДатЗапретаИзменения(ПредопределенныеРазделы);
	
	РеквизитыРазделов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СсылкиРазделов, "ТипЗначения");
	Для Каждого ДанныеРаздела Из РазделыРегистра Цикл
		
		Раздел = Разделы.Добавить();
		Раздел.Идентификатор = ДанныеРаздела.РазделСсылкаРегистра.УникальныйИдентификатор();
		Раздел.Представление = ДанныеРаздела.РазделСсылкаНаименование;
		Раздел.Имя = ДанныеРаздела.Имя;
		
		КлючиПоиска = Новый Структура("Идентификатор", Раздел.Идентификатор);
		НайденныеРазделы = ПредопределенныеРазделы.НайтиСтроки(КлючиПоиска);
		Если ЗначениеЗаполнено(ДанныеРаздела.РазделСсылка) Тогда
			ТипыОбъектов = РеквизитыРазделов.Получить(ДанныеРаздела.РазделСсылка);
			Раздел.ТипыОбъектов = ТипыОбъектов.Типы();
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
				Раздел.ТипыОбъектов, Тип("ПланВидовХарактеристикСсылка.РазделыДатЗапретаИзменения"));
		Иначе
			Если НайденныеРазделы.Количество() > 0 Тогда
				Раздел.Представление = НайденныеРазделы[0].Представление;
				Раздел.ТипыОбъектов = НайденныеРазделы[0].ТипыОбъектов;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденныеРазделы.Количество() > 0 Тогда
			ПредопределенныеРазделы.Удалить(НайденныеРазделы[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПредопределенныйРаздел Из ПредопределенныеРазделы Цикл
		Раздел = Разделы.Добавить();
		Раздел.Идентификатор = ПредопределенныйРаздел.Идентификатор;
		Раздел.Представление = ПредопределенныйРаздел.Представление;
		Раздел.Имя = ПредопределенныйРаздел.Имя;
	КонецЦикла;
	
	Если ЗарплатаКадры.НеобходимоОбновитьРазделыДатЗапретаИзмененияБЗК() Тогда
		Для Каждого ПредопределенныйРаздел Из ПредопределенныеРазделы Цикл
			КлючиПоиска = Новый Структура("Идентификатор", ПредопределенныйРаздел.Идентификатор);
			НайденныеРазделы = Разделы.НайтиСтроки(КлючиПоиска);
			Если НайденныеРазделы.Количество() = 0 Тогда
				СтрокаРаздела = Разделы.Добавить();
			Иначе
				СтрокаРаздела = НайденныеРазделы[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаРаздела, ПредопределенныйРаздел);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ЗарплатаКадрыВнутренний.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
		Возврат;
	КонецЕсли;
	
	ИсточникиПроверки = ИсточникиПроверкиДатЗапретаИзменения();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИсточникиПроверки.ИсточникиДанных, ИсточникиДанных);
	
	УстановитьПараметрСеансаИсключаемыеИсточникиДанныхДатЗапретаИзмененияБЗК(ИсточникиПроверки.ИсключаемыеИсточники);
	
КонецПроцедуры

Процедура ВосстановитьНастройки() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РазделыДатЗапретаИзмененияОбъектовБЗК");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.РазделыДатЗапретаИзмененияОбъектовБЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Предопределенный Тогда
				Запись.Применение = Истина;
			Иначе
				Запись.Применение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ДатыЗапретаИзменения';
										|en = 'ДатыЗапретаИзменения'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Ошибка));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ИзменитьПрименениеЗаписи(Знач РазделСсылка, Знач ОбъектМетаданных, Знач ПолеДаты, Знач ПолеОбъекта) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РазделыДатЗапретаИзмененияОбъектовБЗК");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запись = РегистрыСведений.РазделыДатЗапретаИзмененияОбъектовБЗК.СоздатьМенеджерЗаписи();
		
		Запись.РазделСсылка     = РазделСсылка;
		Запись.ОбъектМетаданных = ОбъектМетаданных;
		Запись.ПолеДаты         = ПолеДаты;
		Запись.ПолеОбъекта      = ПолеОбъекта;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.Применение = Не Запись.Применение;
			Если Запись.ПроверитьЗаполнение() Тогда
				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ДатыЗапретаИзмененияСлужебный.ОбновитьВерсиюДатЗапретаИзменения();
		ИсточникиПроверкиДатЗапретаИзменения();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ДатыЗапретаИзменения';
										|en = 'ДатыЗапретаИзменения'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Ошибка));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаИсключаемыеИсточникиДанныхДатЗапретаИзмененияБЗК(ИсключаемыеИсточники = Неопределено) Экспорт
	
	Если ИсключаемыеИсточники = Неопределено Тогда
		ИсточникиПроверки = ИсточникиПроверкиДатЗапретаИзменения();
		ИсключаемыеИсточники = ИсточникиПроверки.ИсключаемыеИсточники;
	КонецЕсли;
	
	ПараметрыСеанса.ИсключаемыеИсточникиДанныхДатЗапретаИзмененияБЗК =
		Новый ФиксированноеСоответствие(ИсключаемыеИсточники);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИсточникиПроверкиДатЗапретаИзменения()
	
	ИсточникиПроверки = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РазделыДатЗапретаИзмененияОбъектов.РазделСсылка КАК РазделСсылка,
		|	РазделыДатЗапретаИзмененияОбъектов.ОбъектМетаданных КАК ОбъектМетаданных,
		|	РазделыДатЗапретаИзмененияОбъектов.ПолеДаты КАК ПолеДаты,
		|	РазделыДатЗапретаИзмененияОбъектов.ПолеОбъекта КАК ПолеОбъекта,
		|	РазделыДатЗапретаИзмененияОбъектов.Применение КАК Применение,
		|	РазделыДатЗапретаИзмененияОбъектов.Предопределенный КАК Предопределенный,
		|	РазделыДатЗапретаИзмененияОбъектов.Раздел КАК Раздел
		|ИЗ
		|	РегистрСведений.РазделыДатЗапретаИзмененияОбъектовБЗК КАК РазделыДатЗапретаИзмененияОбъектов";
	
	ТаблицаНабора = Запрос.Выполнить().Выгрузить();
	ТаблицаНабора.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	УдаляемыеЗаписи = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаНабора Цикл
		МетаданныеОбъекта = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(СтрокаТаблицы.ОбъектМетаданных, Ложь);
		Если МетаданныеОбъекта <> Null Тогда
			СтрокаТаблицы.Таблица = МетаданныеОбъекта.ПолноеИмя();
		Иначе
			УдаляемыеЗаписи.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
		НаборЗаписей = РегистрыСведений.РазделыДатЗапретаИзмененияОбъектовБЗК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектМетаданных.Установить(УдаляемаяЗапись.ОбъектМетаданных);
		НаборЗаписей.Записать();
		ТаблицаНабора.Удалить(УдаляемаяЗапись);
	КонецЦикла;
	
	Если ЗарплатаКадры.НеобходимоОбновитьРазделыДатЗапретаИзмененияБЗК() Тогда
		
		ОбновитьИсточники = Ложь;
		
		ИсточникиДанных = Новый ТаблицаЗначений;
		ИсточникиДанных.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
		ИсточникиДанных.Колонки.Добавить("ПолеДаты",    Новый ОписаниеТипов("Строка"));
		ИсточникиДанных.Колонки.Добавить("Раздел",      Новый ОписаниеТипов("Строка"));
		ИсточникиДанных.Колонки.Добавить("ПолеОбъекта", Новый ОписаниеТипов("Строка"));
		
		ЗарплатаКадрыВнутренний.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
		
		// Обновление списка разделов
		Разделы = Новый ТаблицаЗначений;
		Разделы.Колонки.Добавить("Имя",           Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
		Разделы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
		Разделы.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		Разделы.Колонки.Добавить("ТипыОбъектов",  Новый ОписаниеТипов("Массив"));
		
		ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
		
		// Заполнение набора регистра сведений предопределенными источниками данных
		Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
			КлючиПоиска = Новый Структура("Раздел,Таблица,ПолеДаты,ПолеОбъекта");
			ЗаполнитьЗначенияСвойств(КлючиПоиска, ИсточникДанных);
			НайденныеИсточники = ТаблицаНабора.НайтиСтроки(КлючиПоиска);
			Если НайденныеИсточники.Количество() = 0 Тогда
				НовыйИсточник = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйИсточник, ИсточникДанных);
				НовыйИсточник.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Метаданные.НайтиПоПолномуИмени(НовыйИсточник.Таблица));
				ДанныеРаздела = Разделы.Найти(НовыйИсточник.Раздел, "Имя");
				Если ДанныеРаздела <> Неопределено Тогда
					НовыйИсточник.РазделСсылка =
						ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПолучитьСсылку(
							ДанныеРаздела.Идентификатор);
				КонецЕсли;
				НовыйИсточник.Применение = Истина;
				НовыйИсточник.Предопределенный = Истина;
				ОбновитьИсточники = Истина;
			Иначе
				Для Каждого НайденныйИсточник Из НайденныеИсточники Цикл
					Если Не НайденныйИсточник.Предопределенный Тогда
						НайденныйИсточник.Предопределенный = Истина;
						ОбновитьИсточники = Истина;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НайденныйИсточник.РазделСсылка) Тогда
						ДанныеРаздела = Разделы.Найти(НайденныйИсточник.Раздел, "Имя");
						Если ДанныеРаздела <> Неопределено Тогда
							НайденныйИсточник.РазделСсылка =
								ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПолучитьСсылку(
									ДанныеРаздела.Идентификатор);
						КонецЕсли;
						ОбновитьИсточники = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Удаление устаревших предопределенных источников данных
		// Отключение пользовательских источников данных, таблицы которых удалены
		УдаляемыеИсточники = Новый Массив;
		Для Каждого ИсточникДанных Из ТаблицаНабора Цикл
			КлючиПоиска = Новый Структура("Раздел,Таблица,ПолеДаты,ПолеОбъекта");
			ЗаполнитьЗначенияСвойств(КлючиПоиска, ИсточникДанных);
			НайденныеИсточники = ИсточникиДанных.НайтиСтроки(КлючиПоиска);
			Если НайденныеИсточники.Количество() = 0 Тогда
				Если ИсточникДанных.Предопределенный Тогда
					УдаляемыеИсточники.Добавить(ИсточникДанных);
				ИначеЕсли ИсточникДанных.Применение Тогда
					Если Метаданные.НайтиПоПолномуИмени(ИсточникДанных.Таблица) = Неопределено Тогда
						ИсточникДанных.Применение = Ложь;
						ОбновитьИсточники = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИсточникДанных Из УдаляемыеИсточники Цикл
			ТаблицаНабора.Удалить(ИсточникДанных);
			ОбновитьИсточники = Истина;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Если ОбновитьИсточники Тогда
				
				НаборЗаписей = РегистрыСведений.РазделыДатЗапретаИзмененияОбъектовБЗК.СоздатьНаборЗаписей();
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
			ЗарплатаКадры.УстановитьВерсиюДанныхДатЗапретаИзмененияБЗК(Метаданные.Версия);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ДатыЗапретаИзменения';
											|en = 'ДатыЗапретаИзменения'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Ошибка));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	ИсточникиДанныхСНастройками = ТаблицаНабора.Скопировать(Новый Структура("Применение", Истина), "Раздел,Таблица,ПолеДаты,ПолеОбъекта");
	ИсключаемыеИсточникиДанных = ТаблицаНабора.Скопировать(Новый Структура("Предопределенный,Применение", Истина, Ложь), "Раздел,Таблица,ПолеДаты,ПолеОбъекта");
	
	ИсточникиДанныхДляИсключенияПроверки = Новый Соответствие;
	Для Каждого ИсключаемыйИсточник Из ИсключаемыеИсточникиДанных Цикл
		Если Не ЗначениеЗаполнено(ИсключаемыйИсточник.Таблица) Тогда
			Продолжить;
		КонецЕсли;
		Если ИсточникиДанныхСНастройками.Найти(ИсключаемыйИсточник.Таблица, "Таблица") = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсточникиДанныхСНастройками.Добавить(), ИсключаемыйИсточник);
			ИсточникиДанныхДляИсключенияПроверки.Вставить(ИсключаемыйИсточник.Таблица, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ИсточникиПроверки.Вставить("ИсточникиДанных", ИсточникиДанныхСНастройками);
	ИсточникиПроверки.Вставить("ИсключаемыеИсточники", ИсточникиДанныхДляИсключенияПроверки);
	
	Возврат ИсточникиПроверки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
