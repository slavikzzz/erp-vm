#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета

// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Соответствие, содержащее кеш проверенных по классификатору адресов.
// Процесс проверки может включать http запрос и занимать много времени.
// При этом адреса часто повторяются.
Перем СоответствиеКешАдресов;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции, СписокВидовПеревозок;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;

// Справочники.
Перем СправочникиОтчета;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные,
	НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыДекларация;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений;

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Счетчики для справочников отчета.
Перем СчетчикИДОтправителей, СчетчикИДПолучателей, СчетчикИДТранспорта;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоРазделу1, ВсегоСтрокПоРазделу2, НужноОбработатьСтрок,
	ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;

// Квартал отчета, от него зависит расчет.
Перем КварталОтчета;
#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработкаПриЗаполнении

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
// Используется при импорте таблиц значений в регистр сведений отчета.
// Совпадает с процедурой ОбработкаЗаписи(), но сделана отдельной для возможности при необходимости
// поменять работу заполнения регистра только лишь поменяв отчет, не трогая глобальные модули.
// Это нужно для поддержки выпуска внешних отчетов в случае серьезных ошибок.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		СтрокаТЗ					- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);

КонецПроцедуры
#КонецОбласти

#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
		ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;

	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Документ, "Организация");
		Запись.Организация = ЗначенияРеквизитов.Организация;
	КонецЕсли;

	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил23Декларация" Тогда
		
		// Отправитель.
		Запись.П000010000303 = СокрЛП(Запись.П000010000303);
		НаименованиеОтправителя = Запись.П000010000303;
		
		Запись.П000010000304 = СтрЗаменить(Запись.П000010000304, " ", "");
		ИННОтправителя = Запись.П000010000304;
		
		Запись.П000010000305 = СтрЗаменить(Запись.П000010000305, " ", "");
		КППОтправителя = Запись.П000010000305;
		
		Если Запись.ОтправительФизЛицо 
			И Запись.ФизЛицоУстановленПользователем 
			И ЗначениеЗаполнено(КППОтправителя) Тогда
			
			Запись.П000010000305 = "";
			КППОтправителя = "";
		
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Запись.Отправитель) Тогда		
			
			Запись.Отправитель = ОпределитьКонтрагента(ИННОтправителя, КППОтправителя, НаименованиеОтправителя);
			
			Если ЗначениеЗаполнено(Запись.Отправитель) Тогда
				Запись.П000010000303 = НаименованиеОтправителя;
				Запись.П000010000305 = КППОтправителя;
			КонецЕсли;
			
		КонецЕсли;
				 
		Если (НЕ Запись.ФизЛицоУстановленПользователем) И ЗначениеЗаполнено(Запись.Отправитель) Тогда
			
			МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
			
			ИмяРеквизитаЮридическоеФизическоеЛицо = Неопределено;
			
			ЕстьЮридическоеФизическоеЛицо = ОбщегоНазначения.ЕстьРеквизитОбъекта("ЮридическоеФизическоеЛицо", 
																						МетаданныеКонтрагенты);
			Если НЕ ЕстьЮридическоеФизическоеЛицо Тогда
			
				ЕстьЮридическоеФизическоеЛицо = ОбщегоНазначения.ЕстьРеквизитОбъекта("ЮрФизЛицо", 
																						МетаданныеКонтрагенты);
				Если ЕстьЮридическоеФизическоеЛицо Тогда					
					ИмяРеквизитаЮридическоеФизическоеЛицо = "ЮрФизЛицо";					
				КонецЕсли;
				
			Иначе
				ИмяРеквизитаЮридическоеФизическоеЛицо = "ЮридическоеФизическоеЛицо";																		
			КонецЕсли;
			
			ЕстьИмяРеквизитаЮридическоеФизическоеЛицо = (НЕ ИмяРеквизитаЮридическоеФизическоеЛицо = Неопределено);
			
			МетаданныеЮридическоеФизическоеЛицо = Метаданные.Перечисления.Найти("ЮридическоеФизическоеЛицо");
							
			ИмяПеречисленияЮридическоеФизическоеЛицо = Неопределено;
			Если МетаданныеЮридическоеФизическоеЛицо = Неопределено Тогда				
				МетаданныеЮридическоеФизическоеЛицо = Метаданные.Перечисления.Найти("ЮрФизЛицо");
				Если НЕ МетаданныеЮридическоеФизическоеЛицо = Неопределено Тогда
					ИмяПеречисленияЮридическоеФизическоеЛицо = "ЮрФизЛицо";
				КонецЕсли;
			Иначе
				ИмяПеречисленияЮридическоеФизическоеЛицо = "ЮридическоеФизическоеЛицо";
			КонецЕсли; 
			
			ИмяЗначенияФизическоеЛицо = Неопределено;
							
			ЕстьПеречислениеЮридическоеФизическоеЛицо = НЕ (МетаданныеЮридическоеФизическоеЛицо = Неопределено);
			
			Если ЕстьПеречислениеЮридическоеФизическоеЛицо Тогда
			
				МетаданныеЗначенияФизическоеЛицо = Метаданные.Перечисления[ИмяПеречисленияЮридическоеФизическоеЛицо].ЗначенияПеречисления.Найти("ФизическоеЛицо");
				Если МетаданныеЗначенияФизическоеЛицо = Неопределено Тогда
					МетаданныеЗначенияФизическоеЛицо = Метаданные.Перечисления[ИмяПеречисленияЮридическоеФизическоеЛицо].ЗначенияПеречисления.Найти("ФизЛицо");
					Если НЕ МетаданныеЗначенияФизическоеЛицо = Неопределено Тогда
						ИмяЗначенияФизическоеЛицо = "ФизЛицо";
					КонецЕсли;
				Иначе	
					ИмяЗначенияФизическоеЛицо = "ФизическоеЛицо";
				КонецЕсли; 
			КонецЕсли; 
			
			ЕстьЗначениеФизическоеЛицо = (НЕ ИмяЗначенияФизическоеЛицо = Неопределено);
			
			Если ЕстьИмяРеквизитаЮридическоеФизическоеЛицо 
				И ЕстьЗначениеФизическоеЛицо Тогда
			
				Запись.ОтправительФизЛицо = (
						Запись.Отправитель[ИмяРеквизитаЮридическоеФизическоеЛицо]
						= Перечисления[ИмяПеречисленияЮридическоеФизическоеЛицо][ИмяЗначенияФизическоеЛицо]
												);
			
			КонецЕсли;
			
		ИначеЕсли НЕ Запись.ФизЛицоУстановленПользователем Тогда
			// По умолчанию.
			Запись.ОтправительФизЛицо = Ложь;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Отправитель) Тогда
			
			// Заполним адрес если нет представления адреса.
			// Если есть - адресные данные XML либо введены в форме записи регистра,
			// либо при импорте данных старого формата формы будут импортированы
			// из Дополнительных данных страниц отчета.
			СтруктураРезультата = РегламентированнаяОтчетностьАЛКО.ОбработкаСохраненияАдресаКонтрагента(
									Запись.Отправитель, 
									Запись.П000010000306XML, 									
									ДатаКонцаПериодаОтчета,
									Истина);
			
			Запись.П000010000306XML 	= СтруктураРезультата.ПолеСтруктурыАдреса;
			Запись.П000010000306		= СтруктураРезультата.Представление;
						
		Иначе 
			РегламентированнаяОтчетностьАЛКО.ОбработкаСохраненияАдреса(
									Запись.П000010000306XML, Запись.П000010000306);			
		КонецЕсли;
		
		ПредставлениеАдресаОтправителя = СокрЛП(Запись.П000010000306);
		
		Если Запись.ОтправительФизЛицо Тогда
	
			Если НЕ ЗначениеЗаполнено(Запись.ФамилияОтправителя) Тогда
				
				ФИО_Отправителя = РегламентированнаяОтчетность.РазложитьФИО(НаименованиеОтправителя);
				
				Запись.ФамилияОтправителя 	= ФИО_Отправителя.Фамилия;
				Запись.ИмяОтправителя 		= ФИО_Отправителя.Имя;
				Запись.ОтчествоОтправителя 	= ФИО_Отправителя.Отчество;
				
			КонецЕсли;
			
			НаименованиеОтправителя = Запись.ФамилияОтправителя + "/" 
									+ Запись.ИмяОтправителя + "/" 
									+ Запись.ОтчествоОтправителя;
									
			Если ЗначениеЗаполнено(КППОтправителя) Тогда
			
				Запись.П000010000305 = "";
				КППОтправителя = "";
			
			КонецЕсли; 
			
			
		Иначе
			
			Запись.ФамилияОтправителя 	= "";
			Запись.ИмяОтправителя 		= "";
			Запись.ОтчествоОтправителя 	= "";
			
		КонецЕсли;
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			НаименованиеОтправителя);
		СтруктураСведений.Вставить("ИНН", 					ИННОтправителя);
		СтруктураСведений.Вставить("КПП", 					КППОтправителя);
		// В выгрузке идентификация только по ИНН-КПП-Наименованию.
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	"");
				
		СтруктураХешИдОтправителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);		
		Запись.ХешИдОтправителя = СтруктураХешИдОтправителя.ХешИдПоставщика;
		
		СтруктураСведений.Вставить("Наименование", 			НаименованиеОтправителя);
		СтруктураСведений.Вставить("ИНН", 					ИННОтправителя);
		СтруктураСведений.Вставить("КПП", 					КППОтправителя);
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	ПредставлениеАдресаОтправителя);
		
		СтруктураХешИдОтправителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		Запись.ХешИдОтправителяАдрес = СтруктураХешИдОтправителя.ХешИдПоставщика;
		
		
		// Получатель.
		Запись.П000010000310 = СокрЛП(Запись.П000010000310);
		НаименованиеПолучателя = Запись.П000010000310;
		
		Запись.П000010000311 = СтрЗаменить(Запись.П000010000311, " ", "");
		ИННПолучателя = Запись.П000010000311;
		
		Запись.П000010000312 = СтрЗаменить(Запись.П000010000312, " ", "");
		КПППолучателя = Запись.П000010000312;
		
		Если Запись.РезидентУстановленПользователем 
			И НЕ Запись.ПолучательРезидентРФ
			И ЗначениеЗаполнено(КПППолучателя) Тогда
			
			Запись.П000010000312 = "";
			КПППолучателя = "";
			
		КонецЕсли;
					
		Если НЕ ЗначениеЗаполнено(Запись.Получатель) Тогда		
			
			Запись.Получатель = ОпределитьКонтрагента(ИННПолучателя, КПППолучателя, НаименованиеПолучателя);
			
			Если ЗначениеЗаполнено(Запись.Получатель) Тогда
				Запись.П000010000310 = НаименованиеПолучателя;
				Запись.П000010000312 = КПППолучателя;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Получатель) Тогда
			
			// Заполним адрес если нет представления адреса.
			// Если есть - адресные данные XML либо введены в форме записи регистра,
			// либо при импорте данных старого формата формы будут импортированы
			// из Дополнительных данных страниц отчета.
			СтруктураРезультата = РегламентированнаяОтчетностьАЛКО.ОбработкаСохраненияАдресаКонтрагента(
									Запись.Получатель, 
									Запись.П000010000313XML, 									
									ДатаКонцаПериодаОтчета,
									Истина);
			
			Запись.П000010000313XML 	= СтруктураРезультата.ПолеСтруктурыАдреса;
			Запись.П000010000313		= СтруктураРезультата.Представление;
						
		Иначе 
			РегламентированнаяОтчетностьАЛКО.ОбработкаСохраненияАдреса(
									Запись.П000010000313XML, Запись.П000010000313);			
		КонецЕсли;
								
		ПредставлениеАдресаПолучателя = СокрЛП(Запись.П000010000313);
		
		Если НЕ Запись.РезидентУстановленПользователем Тогда
			
			МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
			ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
						
			СтранаРегистрации = ?(ЗначениеЗаполнено(Запись.Получатель) И ЕстьСтранаРегистрации, 
									Запись.Получатель.СтранаРегистрации, "");
			РезидентЕАЭС = Ложь;
			
			РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(
				ИННПолучателя, КПППолучателя, НаименованиеПолучателя, СтранаРегистрации, 
				Запись.ПолучательРезидентРФ, РезидентЕАЭС);	
		
		КонецЕсли;
		
		Если НЕ Запись.ПолучательРезидентРФ
			И ЗначениеЗаполнено(КПППолучателя) Тогда
		
			Запись.П000010000312 = "";
			КПППолучателя = "";	
			
		КонецЕсли; 
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			НаименованиеПолучателя);
		СтруктураСведений.Вставить("ИНН", 					ИННПолучателя);
		СтруктураСведений.Вставить("КПП", 					КПППолучателя);
		// В выгрузке идентификация только по ИНН-КПП-Наименованию.
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	"");
				
		СтруктураХешИдОтправителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		
		Запись.ХешИдПолучателя = СтруктураХешИдОтправителя.ХешИдПоставщика;
		
		// Транспортное средство.
		ТипТС = СокрЛП(Запись.П000010000307);
		ГрузоподъемностьТС = СокрЛП(Запись.П000010000308);
		РегистрационныйНомерТС = СокрЛП(Запись.П000010000309);
				
		Запись.ХешИдТС = РегламентированнаяОтчетностьАЛКО.ХешИдТранспортногоСредства(
									ТипТС, РегистрационныйНомерТС, ГрузоподъемностьТС);

	КонецЕсли;

	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда		
		РегламентированнаяОтчетностьАЛКО.ОбработкаЗаписиРегистраАлкоЛицензии(Запись);		
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьКонтрагента(ИНН, КПП, ПолноеНаименование) Экспорт
		
	Возврат  РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеНаименование);	
	
КонецФункции

#КонецОбласти

#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//		КварталОтчета			- Число - Номер квартала отчета. Нужен в некоторых отчетах, в остальных
//								параметр для унификации вызова процедуры Расчет для любых отчетов
//								из процедур модуля РегламентированнаяОтчетностьАЛКО.
//
Процедура Расчет(ИдГруппы, Запись, КварталОтчета, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	// Для Приложения 5 расчета по строке нет.
	Возврат;
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)

	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции
					
Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(Ключ, Структура);

КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);

КонецФункции
#КонецОбласти


#Область ПроверитьВыгрузку

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	

	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
					СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки, СоответствиеКешАдресов);
								
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;

КонецФункции

Функция ЛицензируемаяДеятельность()
	
	Возврат РегламентированнаяОтчетностьАЛКО.ЛицензируемаяДеятельностьАЛКО(ТаблицаСтраницыЛицензии, "П000000000105");

КонецФункции

Функция УказанаЛицензия(ДанныеЛиста)

	Возврат РегламентированнаяОтчетностьАЛКО.УказанаЛицензия(ДанныеЛиста, "П000000000105");

КонецФункции

Процедура ПроверитьЗаполнениеЛицензии(СтатусПроверки)

	СтруктураСведенийРазделаЛицензий = Новый Структура;

	// Заполняются ли в разделе лицензии декларанта - Истина, или только адреса мест деятельности - Ложь.
	СтруктураСведенийРазделаЛицензий.Вставить("ЕстьЛицензииВРазделеЛицензии", Истина);

	// Если не передавать - по умолчанию будет установлен "П000000000105".
	СтруктураСведенийРазделаЛицензий.Вставить("ИмяПоляКодВидаДеятельности", "П000000000105");

	// Нижняя и верхняя границы даты по схеме XSD. 
	// Если не задана - по умолчанию устанавливается в '1000.01.01 00:00.00' и '2099.12.31 23:59.59' соответственно.	
	СтруктураСведенийРазделаЛицензий.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийРазделаЛицензий.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	// Даты начала и конца отчета.	
	СтруктураСведенийРазделаЛицензий.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийРазделаЛицензий.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

	// Массив кодов видов деятельности из макета Списки нужного периода.
	СтруктураСведенийРазделаЛицензий.Вставить("СписокКодовДеятельности", СписокКодовДеятельности);

	СтруктураСведенийРазделаЛицензий.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураСведенийРазделаЛицензий.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии(ДокументСсылкаАлкоОтчет, СтатусПроверки, ТаблицаСтраницыЛицензии, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтруктураСведенийРазделаЛицензий, РежимОтладки);

	СтруктураСведенийРазделаЛицензий.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДекларации(СтатусПроверки)

	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПоказательОП = "ОбособленноеПодразделение";
	
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппыДекларация = СтруктураРеквизитовФормы.мИдГруппы12;
			
	ДанныеРаздела = ТаблицаСтраницыДекларация;

	ИмяРегистраДекларация = ПолучитьИмяРегистраСведений(ИдГруппыДекларация);
	СервисРегистровДекларация = СтруктураСервисРегистров[ИмяРегистраДекларация];
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокДекларация = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппыДекларация, НомерЛиста - 1, Истина);
				
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокДекларация > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки, СоответствиеКешАдресов);

		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраДекларация = СервисРегистровДекларация[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
				
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП["Декларация"].Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП["Декларация"][ИдОП]["НомерЛиста"];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе

					ДанныеОП["Декларация"].Вставить(ИдОП, Новый Соответствие);

					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("ОП", КопияСведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("НомерЛиста", НомерЛиста);

					ДанныеОП["Декларация"][ИдОП].Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);
					
					ДанныеОП["Декларация"][ИдОП].Вставить("КолСтрокПоДекларация", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Соответствие);

				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;

		Если КолАктивныхСтрокДекларация > 0 Тогда
			ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппыДекларация, НомерЛиста, ИдОП);
		КонецЕсли;
		
		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "")

	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = "";
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
		СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП["Декларация"][ИдОП].Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	КонецЕсли;

	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;

	// Зафиксируем имена ключевых полей.
	
	// Коды.
	ИмяКодаВидаПродукции = ИдГруппы + "02";
	ИмяКодаВидаПеревозки = ИдГруппы + "01";
	
	// Отправитель.
	ИмяНаименованияОтправителя = ИдГруппы + "03";
	ИмяИННОтправителя = ИдГруппы + "04";
	ИмяКППОтправителя = ИдГруппы + "05";
	
	ИмяАдресаОтправки = ИдГруппы + "06";
	ИмяАдресаXMLОтправки = ИдГруппы + "06XML";
	
	// Получатель.
	ИмяНаименованияПолучателя = ИдГруппы + "10";
	ИмяИННПолучателя = ИдГруппы + "11";
	ИмяКПППолучателя = ИдГруппы + "12";
	
	ИмяАдресаПолучателя = ИдГруппы + "13";
	ИмяАдресаXMLПолучателя = ИдГруппы + "13XML";
	
	// Транспортное средство.
	ИмяТипТС = ИдГруппы + "07";
	ИмяГрузоподъемность = ИдГруппы + "08";
	ИмяРегистрационныйНомер = ИдГруппы + "09";
	
	// ГТН.
	ИмяДатыГТН = ИдГруппы + "14";
	ИмяНомерГТН = ИдГруппы + "15";
	ИмяОбъемПоГТН = ИдГруппы + "16";
	

	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	КоличествоКолонокВРазделе = 16;
	
	КоличествоПервых = 1000;

	СписокПолейКонтрагентов = Новый Массив;
	СписокПолейКонтрагентов.Добавить("Отправитель");
	СписокПолейКонтрагентов.Добавить("Получатель");
	
	Пока Истина Цикл

		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		СтруктураНастроек.Вставить("ЕстьСтранаРегистрации", ЕстьСтранаРегистрации);
		СтруктураНастроек.Вставить("СписокПолейКонтрагентов", СписокПолейКонтрагентов);

		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл

			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;

			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			// Вид перевозки.
			ИмяПоказателя = ИмяКодаВидаПеревозки + "_" + НомерСтрокиСтроковый;
			КодВидаПеревозки = СокрЛП(СтрокаДекларации[ИмяКодаВидаПеревозки]);
			
			Если ТипЗнч(КодВидаПеревозки) = Тип("Строка") И ЗначениеЗаполнено(КодВидаПеревозки) Тогда

				Если СписокВидовПеревозок.Найти(КодВидаПеревозки) = Неопределено Тогда

					// Код вне допустимого списка. 
					// Ручной ввод - если не было недавнего изменения списка, это ошибка.
					// Предупреждаем, но даем выгрузить.
					ТекстОписанияОшибки = СтрокаГде + " указан вид перевозки " + """" + КодВидаПеревозки
						+ """" + ", который не предусмотрен текущей схемой выгрузки отчета!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "КодВидаПеревозкиНеИзСписка");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки,
												МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений);
												
				КонецЕсли;
				
			Иначе
				
				ТекстОписанияОшибки = СтрокаГде + " не задан код вида перевозки!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаВидаПеревозки");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

					
			КонецЕсли;
						
			// Код Продукции.
			ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодаВидаПродукции]);

			СтруктураИнформацииВидаПродукции = Новый Структура;

			СтруктураИнформацииВидаПродукции.Вставить("ИмяПоказателя", ИмяПоказателя);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураИнформацииВидаПродукции.Вставить("НомерЛиста", НомерЛиста);
			СтруктураИнформацииВидаПродукции.Вставить("СписокКодов", СписокКодовПродукции);
			СтруктураИнформацииВидаПродукции.Вставить("СтрокаГде", СтрокаГде);
			СтруктураИнформацииВидаПродукции.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураИнформацииВидаПродукции.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяТаблицы", ИмяТаблицы);
			СтруктураИнформацииВидаПродукции.Вставить("КонтрольДлиныКода", Ложь);
			СтруктураИнформацииВидаПродукции.Вставить("КонтрольНаЦифры", Ложь);
			
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВерныйКодВидаПродукции(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
							СтатусПроверки, КодВидаПродукции, СтруктураИнформацииВидаПродукции, РежимОтладки);
							
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			ИмяПоказателяНаименованияОтправителя = ИмяНаименованияОтправителя + "_"
													+ НомерСтрокиСтроковый;
			Если СтрокаДекларации.ОтправительФизЛицо Тогда
				
				НЕУказанФИО =  ПустаяСтрока(СтрокаДекларации.ФамилияОтправителя)
							ИЛИ ПустаяСтрока(СтрокаДекларации.ИмяОтправителя);
							
				Если НЕУказанФИО Тогда
								
					ТекстОписанияОшибки = СтрокаГде
						+ " не указаны фамилия, имя и отчество (при наличии) отправителя - физического лица!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименованияОтправителя);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеУказанФИООтправителя");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				КонецЕсли;
				
				МаксДлинаФИО = 60;
				
				Если СтрДлина(СтрокаДекларации.ФамилияОтправителя) > МаксДлинаФИО
					ИЛИ СтрДлина(СтрокаДекларации.ИмяОтправителя) > МаксДлинаФИО
					ИЛИ СтрДлина(СтрокаДекларации.ОтчествоОтправителя) > МаксДлинаФИО Тогда
				
					ТекстОписанияОшибки = СтрокаГде
						+ " указаны фамилия, имя или отчество отправителя, превышающие максимальную возможную длину "
						+ МаксДлинаФИО + " символов!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименованияОтправителя);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ФИООтправителяБольшеМаксДлины");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
				
				КонецЕсли; 
			
			Иначе
				
				////////////////////////////////////////////////////////////////////////////////
				// Контроль Наименования-ИНН-КПП Отправителя.
				
				НаименованиеОтправителя = СокрЛП(СтрокаДекларации[ИмяНаименованияОтправителя]);

				ИмяПоказателяИНН = ИмяИННОтправителя + "_" + НомерСтрокиСтроковый;
				ИННОтправителя = СокрЛП(СтрокаДекларации[ИмяИННОтправителя]);

				ИмяПоказателяКПП = ИмяКППОтправителя + "_" + НомерСтрокиСтроковый;
				КППОтправителя = СокрЛП(СтрокаДекларации[ИмяКППОтправителя]);

				РодПадежЧейИННКПП = "грузоотправителя";
				
				СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
									СтрокаДекларации["СтранаРегистрацииОтправитель"], "");
									
				РоссийскийРезидент = Ложь;
				РезидентЕАЭС = Ложь;
					
				РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИННОтправителя, КППОтправителя, НаименованиеОтправителя, 
												СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);

				МожетБытьПустойИНН = Истина;
				МожетБытьПустойКПП = Истина;
				КонтрольОП = Ложь;
				РоссийскийТолькоЮЛ = Неопределено;
				РоссийскийТолькоФЛ = Неопределено;
				
				ТолькоРФ = Ложь;
				ТолькоЕАЭС = Ложь;
				МинДлинаИННпоXSD = 1;
				МаксДлинаИННпоXSD = 20;
				
				КПП56СимволыМогутБытьБуквами = Ложь;
				ИННLiteТип = Ложь;
				КППLiteТип = Истина;

				СтруктураСведенийИННКПП = Новый Структура;

				СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

				СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
				СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
				СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
				СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

				СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
				СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

				СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименованияОтправителя);
				СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеОтправителя);

				СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
				СтруктураСведенийИННКПП.Вставить("ИНН", ИННОтправителя);
				СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
				СтруктураСведенийИННКПП.Вставить("КПП", КППОтправителя);
				СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

				СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
				СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

				СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
				СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
				СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
				СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
				СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
				
				СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
				СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

				КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
				СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
				СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
				СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
				СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
				СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.
				
				НетПроблемИННКППОтправителя = РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
							СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийРезидент, РежимОтладки);

				СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
				СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
				
				//
				////////////////////////////////////////////////////////////////////////////////
				ОтправительРоссийский = РоссийскийРезидент;
				
			КонецЕсли; 
			
			
			// Данные адреса начала перевозки.
			ИмяПоказателяАдреса = ИмяАдресаОтправки + "_" + НомерСтрокиСтроковый;
			
			АдресОтправки = СокрЛП(СтрокаДекларации[ИмяАдресаОтправки]);
			АдресОтправкиXML = СокрЛП(СтрокаДекларации[ИмяАдресаXMLОтправки]);
			
			СтруктураАдресОтправки = РегламентированнаяОтчетностьАЛКО.СтруктураАдресаИзСтрокиСтруктурыХранения(
																	АдресОтправкиXML);
																	
														
			////////////////////////////////////////////////////////////////////////////////								
			// Контроль адреса начала перевозки.
			
			РодПадежАдресЧего = "начала перевозки";
			Обязательный = Истина;
			ТолькоРоссия = Ложь;
			ТолькоЕАЭС = Ложь;
			ТолькоИностранныйКромеЕАЭС = Ложь;
			ЛюбойИностранный = Ложь;
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", ИмяПоказателяАдреса);

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", РодПадежАдресЧего);

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Обязательный);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", ТолькоРоссия);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", ТолькоИностранныйКромеЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", ЛюбойИностранный);
			
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = РегламентированнаяОтчетностьАЛКО.ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
										ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураАдресОтправки, 
										ВспомогательнаяСтруктураДанных, РежимОтладки, СоответствиеКешАдресов);
										
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль Наименования-ИНН-КПП Получателя.
			ИмяПоказателяНаименованияПолучателя = ИмяНаименованияПолучателя + "_"
				+ НомерСтрокиСтроковый;
			НаименованиеПолучателя = СокрЛП(СтрокаДекларации[ИмяНаименованияПолучателя]);

			ИмяПоказателяИНН = ИмяИННПолучателя + "_" + НомерСтрокиСтроковый;
			ИННПолучателя = СокрЛП(СтрокаДекларации[ИмяИННПолучателя]);

			ИмяПоказателяКПП = ИмяКПППолучателя + "_" + НомерСтрокиСтроковый;
			КПППолучателя = СокрЛП(СтрокаДекларации[ИмяКПППолучателя]);

			РодПадежЧейИННКПП = "грузополучателя";
			
			РезидентЕАЭС = Неопределено;
			СтранаРегистрации = "";
			
			Если СтрокаДекларации.РезидентУстановленПользователем ИЛИ СтрокаДекларации.ПолучательРезидентРФ Тогда
			// Если на автомате установлен в истину - то это точно российский.
				РоссийскийРезидент = СтрокаДекларации.ПолучательРезидентРФ;
				
				Если РоссийскийРезидент Тогда				
					СтранаРегистрации = ?(ЕстьСтранаРегистрации, СтранаРоссия, "");
				Иначе
					СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
									СтрокаДекларации["СтранаРегистрацииПолучатель"], "");				
				КонецЕсли; 
				
			Иначе
				
				СтранаРегистрации = ?(ЕстьСтранаРегистрации, 
									СтрокаДекларации["СтранаРегистрацииПолучатель"], "");
									
				РоссийскийРезидент = Ложь;
				РезидентЕАЭС = Ложь;
									
				РегламентированнаяОтчетностьАЛКО.ОпределитьПринадлежностьЕАЭСиРФ(ИННПолучателя, КПППолучателя, НаименованиеПолучателя, 
											СтранаРегистрации, РоссийскийРезидент, РезидентЕАЭС, РежимОтладки);
				
			КонецЕсли; 
			
			МожетБытьПустойИНН = НЕ ((НЕ РоссийскийРезидент = Неопределено) И РоссийскийРезидент);
			МожетБытьПустойКПП = Истина;
			КонтрольОП = Ложь;
			РоссийскийТолькоЮЛ = Неопределено;
			РоссийскийТолькоФЛ = Неопределено;
			
			ТолькоРФ = (НЕ РоссийскийРезидент = Неопределено) И РоссийскийРезидент;
			ТолькоЕАЭС = Ложь;
			МинДлинаИННпоXSD = 1;
			МаксДлинаИННпоXSD = 20;
			
			КПП56СимволыМогутБытьБуквами = Ложь;
			ИННLiteТип = Ложь;
			КППLiteТип = Истина;

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);

			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("КонтрольОП", КонтрольОП);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ИмяПоказателяНаименованияПолучателя);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеПолучателя);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИННПолучателя);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПППолучателя);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", МожетБытьПустойИНН);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", МожетБытьПустойКПП);

			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", ИННLiteТип);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", КППLiteТип);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			КодСтраны = ?(ЗначениеЗаполнено(СтранаРегистрации), СтранаРегистрации.Код, "");
			СтруктураСведенийИННКПП.Вставить("КодСтраны", КодСтраны);
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", ТолькоРФ); 
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", МаксДлинаИННпоXSD); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", МинДлинаИННпоXSD);		// По умолчанию 1.
			
			НетПроблемИННКПППолучателя = РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП(
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
						СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////
			ПолучательРоссийский = РоссийскийРезидент;
			
			// Данные адреса окончания перевозки.
			ИмяПоказателяАдреса = ИмяАдресаПолучателя + "_" + НомерСтрокиСтроковый;
			
			АдресПолучателя = СокрЛП(СтрокаДекларации[ИмяАдресаПолучателя]);
			АдресПолучателяXML = СокрЛП(СтрокаДекларации[ИмяАдресаXMLПолучателя]);
			
			СтруктураАдресПолучателя = РегламентированнаяОтчетностьАЛКО.СтруктураАдресаИзСтрокиСтруктурыХранения(
																	АдресПолучателяXML);
			
			////////////////////////////////////////////////////////////////////////////////								
			// Контроль адреса окончания перевозки.
			
			РодПадежАдресЧего = "окончания перевозки";
			Обязательный = Истина;
			ТолькоРоссия = Ложь;
			ТолькоЕАЭС = Ложь;
			ТолькоИностранныйКромеЕАЭС = Ложь;
			ЛюбойИностранный = Ложь;
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", ИмяПоказателяАдреса);

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", РодПадежАдресЧего);

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Обязательный);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", ТолькоРоссия);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", ТолькоИностранныйКромеЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", ЛюбойИностранный);
			
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = РегламентированнаяОтчетностьАЛКО.ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
										ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураАдресПолучателя, 
										ВспомогательнаяСтруктураДанных, РежимОтладки, СоответствиеКешАдресов);
										
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			//////////////////////////////////////////////////////////////////////////////// 

			////////////////////////////////////////////////////////////////////////////////
			// Контроль транспортного средства.
						
			ТипТС = СтрокаДекларации[ИмяТипТС];
			Если ПустаяСтрока(ТипТС) Тогда
			
				ИмяПоказателя = ИмяТипТС + "_" + НомерСтрокиСтроковый;
				
				ТекстОписанияОшибки = СтрокаГде + " не задан тип транспортного средства!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетТипаТС");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли; 
										
			РегистрационныйНомер = СтрокаДекларации[ИмяРегистрационныйНомер];
			Если ПустаяСтрока(РегистрационныйНомер) Тогда
			
				ИмяПоказателя = ИмяРегистрационныйНомер + "_" + НомерСтрокиСтроковый;
				
				ТекстОписанияОшибки = СтрокаГде + " не задан регистрационный номер транспортного средства!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетРегНомера");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли;
										
			Грузоподъемность = СтрокаДекларации[ИмяГрузоподъемность];						
			Если Грузоподъемность <= 0 Тогда
			
				ИмяПоказателя = ИмяГрузоподъемность + "_" + НомерСтрокиСтроковый;
				
				ТекстОписанияОшибки = СтрокаГде + " указана не положительная грузоподъемность транспортного средства!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ОтрицательнаяГрузоподъемность");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль грузовой товарной накладной (ГТН).
			// По схеме XSD - все поля ГТН необязательные.
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ТТН.
			ЗаполненаТТН = Ложь;

			ТипНакладной = "ТТН"; // ТипНакладной для Уведомления "Уведомление".
			ОбязателенКЗаполнению = Истина;
			НомерТТНОбязателен = Истина;
			НомерГТДОбязателен = Ложь;
			ОбъемТТНОбязателен = Истина;
			ДатаТТНОбязательна = Истина;
			НомерГТДилиНомерТТНОбязателен = Ложь;
			МаксДлинаНомерТТН = 100;
			МаксДлинаНомерГТД = 0;

			СтруктураСведенийНакладной = Новый Структура;

			СтруктураСведенийНакладной.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураСведенийНакладной.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийНакладной.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийНакладной.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийНакладной.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("ИмяТаблицы", ИмяТаблицы);
						

			СтруктураСведенийНакладной.Вставить("ИмяДатыТТН", ИмяДатыГТН + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("ДатаТТН", СтрокаДекларации[ИмяДатыГТН]);
			СтруктураСведенийНакладной.Вставить("ДатаТТНОбязательна", ДатаТТНОбязательна);
			
			
			СтруктураСведенийНакладной.Вставить("ИмяНомерТТН", ИмяНомерГТН + "_"
				+ НомерСтрокиСтроковый);
			СтруктураСведенийНакладной.Вставить("НомерТТН", СтрокаДекларации[ИмяНомерГТН]);
			СтруктураСведенийНакладной.Вставить("НомерТТНОбязателен", НомерТТНОбязателен);
			СтруктураСведенийНакладной.Вставить("МаксДлинаНомерТТН", МаксДлинаНомерТТН);
						
			
			СтруктураСведенийНакладной.Вставить("НомерГТДОбязателен", НомерГТДОбязателен);
			СтруктураСведенийНакладной.Вставить("МаксДлинаНомерГТД", МаксДлинаНомерГТД);
			
			СтруктураСведенийНакладной.Вставить("НомерГТДилиНомерТТНОбязателен", НомерГТДилиНомерТТНОбязателен);
			
			СтруктураСведенийНакладной.Вставить("ИмяОбъемПоТТН", ИмяОбъемПоГТН + "_"
				+ НомерСтрокиСтроковый);			
			СтруктураСведенийНакладной.Вставить("ОбъемПоТТН", СтрокаДекларации[ИмяОбъемПоГТН]);
			СтруктураСведенийНакладной.Вставить("ОбъемТТНОбязателен", ОбъемТТНОбязателен);
			
			СтруктураСведенийНакладной.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
			СтруктураСведенийНакладной.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);
			СтруктураСведенийНакладной.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
			СтруктураСведенийНакладной.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

			СтруктураСведенийНакладной.Вставить("Обязательный", ОбязателенКЗаполнению);

			
			СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураСведенийНакладной.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийНакладной.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийНакладной.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			РегламентированнаяОтчетностьАЛКО.ВернаяНакладная(ДокументСсылкаАлкоОтчет, 
				ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
				СтруктураСведенийНакладной, ТипНакладной, ЗаполненаТТН, РежимОтладки);

			СтруктураСведенийНакладной.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураСведенийНакладной.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
			Если ЕстьИдОП И ТекущееКоличествоОшибок = 0 Тогда
				
				////////////////////////////////////////////////////////////////////////////////
				// Справочники.
								
				ИдОтправителя 		= "Х" + СтрокаДекларации.ХешИдОтправителя;
				ИдОтправителяАдрес 	= "Х" + СтрокаДекларации.ХешИдОтправителяАдрес;
				ИдПолучателя 		= "Х" + СтрокаДекларации.ХешИдПолучателя; 
				ИдТС 				= "Х" + СтрокаДекларации.ХешИдТС;
				
				// Грузоотправители.				
				Если СправочникиОтчета["Грузоотправители"].Получить(ИдОтправителя) = Неопределено Тогда

					СчетчикИДОтправителей = СчетчикИДОтправителей + 1;
					СправочникиОтчета["Грузоотправители"].Вставить(ИдОтправителя, Новый Соответствие);
					СправочникиОтчета["Грузоотправители"][ИдОтправителя].Вставить("ИдОтправ", СчетчикИДОтправителей);
					
					Если СтрокаДекларации.ОтправительФизЛицо Тогда
					
						СправочникиОтчета["Грузоотправители"][ИдОтправителя].Вставить(
												"ПеревозчикФизЛицо", Новый Соответствие);						
						ПеревозчикФизЛицо = СправочникиОтчета["Грузоотправители"][ИдОтправителя]["ПеревозчикФизЛицо"];
						ПеревозчикФизЛицо.Вставить("Фамилия", СтрокаДекларации.ФамилияОтправителя); 
						ПеревозчикФизЛицо.Вставить("Имя"	, СтрокаДекларации.ИмяОтправителя); 
						ПеревозчикФизЛицо.Вставить("Отчество", СтрокаДекларации.ОтчествоОтправителя); 
						
					Иначе
						СправочникиОтчета["Грузоотправители"][ИдОтправителя].Вставить(
												"ПеревозчикЮрЛицо", Новый Соответствие);
						ПеревозчикЮрЛицо = СправочникиОтчета["Грузоотправители"][ИдОтправителя]["ПеревозчикЮрЛицо"];
						ПеревозчикЮрЛицо.Вставить("П000000000004", НаименованиеОтправителя);
						ПеревозчикЮрЛицо.Вставить("П000000000005", ИННОтправителя);
						ПеревозчикЮрЛицо.Вставить("П000000000006", КППОтправителя);
						
					КонецЕсли;
									
				КонецЕсли;
				
				ТекОтправитель = СправочникиОтчета["Грузоотправители"].Получить(ИдОтправителя);
				
				// Грузополучатели.
				Если СправочникиОтчета["Грузополучатели"].Получить(ИдПолучателя) = Неопределено Тогда

					СчетчикИДПолучателей = СчетчикИДПолучателей + 1;
					СправочникиОтчета["Грузополучатели"].Вставить(ИдПолучателя, Новый Соответствие);
					СправочникиОтчета["Грузополучатели"][ИдПолучателя].Вставить("ИдПолучателя", СчетчикИДПолучателей);
					СправочникиОтчета["Грузополучатели"][ИдПолучателя].Вставить("П000000000019", НаименованиеПолучателя);
					
					Если СтрокаДекларации.ПолучательРезидентРФ Тогда
					
						СправочникиОтчета["Грузополучатели"][ИдПолучателя].Вставить(
												"ОрганизацияРФ", Новый Соответствие);						
						ОрганизацияРФ = СправочникиОтчета["Грузополучатели"][ИдПолучателя]["ОрганизацияРФ"];
						ОрганизацияРФ.Вставить("П000000000020", ИННПолучателя); 
						ОрганизацияРФ.Вставить("П000000000021", КПППолучателя);
						
					КонецЕсли;
									
				КонецЕсли;
				
				ТекПолучатель = СправочникиОтчета["Грузополучатели"].Получить(ИдПолучателя);
				
				// ТранспортныеСредства.
				Если СправочникиОтчета["ТранспортныеСредства"].Получить(ИдТС) = Неопределено Тогда

					СчетчикИДТранспорта = СчетчикИДТранспорта + 1;
					СправочникиОтчета["ТранспортныеСредства"].Вставить(ИдТС, Новый Соответствие);
					СправочникиОтчета["ТранспортныеСредства"][ИдТС].Вставить("ИдТС", СчетчикИДТранспорта);
					
					СправочникиОтчета["ТранспортныеСредства"][ИдТС].Вставить("П000000000012", ТипТС);
					СправочникиОтчета["ТранспортныеСредства"][ИдТС].Вставить("П000000000013", Грузоподъемность);
					СправочникиОтчета["ТранспортныеСредства"][ИдТС].Вставить("П000000000014", РегистрационныйНомер);
					
				КонецЕсли;
				
				ТекТС = СправочникиОтчета["ТранспортныеСредства"].Получить(ИдТС);

				//
				////////////////////////////////////////////////////////////////////////////////
				
				ИдВидаПеревозки = "Х" + СтрокаДекларации[ИмяКодаВидаПеревозки];
				
				Если ДанныеДвиженийПоОП.Получить(ИдВидаПеревозки) = Неопределено Тогда
					ДанныеДвиженийПоОП.Вставить(ИдВидаПеревозки, Новый Соответствие);
					ДанныеДвиженийПоОП[ИдВидаПеревозки].Вставить("П000000000002", КодВидаПеревозки);
					ДанныеДвиженийПоОП[ИдВидаПеревозки].Вставить("Продукция", Новый Соответствие);
				КонецЕсли;
				ДвиженияПоВидуПеревозки = ДанныеДвиженийПоОП[ИдВидаПеревозки]["Продукция"];
				
				ИдВидаПродукции = "Х" + СтрокаДекларации[ИмяКодаВидаПродукции];
				
				Если ДвиженияПоВидуПеревозки.Получить(ИдВидаПродукции) = Неопределено Тогда
					ДвиженияПоВидуПеревозки.Вставить(ИдВидаПродукции, Новый Соответствие);
					ДвиженияПоВидуПеревозки[ИдВидаПродукции].Вставить("П000000000003", КодВидаПродукции);
					ДвиженияПоВидуПеревозки[ИдВидаПродукции].Вставить("СведГрузоотправитель", Новый Соответствие);
				КонецЕсли;
				
				ДвиженияПоВидуПродукции = ДвиженияПоВидуПеревозки[ИдВидаПродукции]["СведГрузоотправитель"];
				
				Если ДвиженияПоВидуПродукции.Получить(ИдОтправителяАдрес) = Неопределено Тогда
					ДвиженияПоВидуПродукции.Вставить(ИдОтправителяАдрес, Новый Соответствие);
					ДвиженияПоВидуПродукции[ИдОтправителяАдрес].Вставить("ИдОтправ", ТекОтправитель["ИдОтправ"]);
					ДвиженияПоВидуПродукции[ИдОтправителяАдрес].Вставить("Адрес", СтруктураАдресОтправки);
					ДвиженияПоВидуПродукции[ИдОтправителяАдрес].Вставить("ТранспортноеСредство", Новый Соответствие);
				КонецЕсли;
				
				ДвиженияПоОтправителю = ДвиженияПоВидуПродукции[ИдОтправителяАдрес]["ТранспортноеСредство"];
				
				Если ДвиженияПоОтправителю.Получить(ИдТС) = Неопределено Тогда
					ДвиженияПоОтправителю.Вставить(ИдТС, Новый Соответствие);
					ДвиженияПоОтправителю[ИдТС].Вставить("ИдТС", ТекТС["ИдТС"]);
					ДвиженияПоОтправителю[ИдТС].Вставить("СведТН", Новый Соответствие);
				КонецЕсли;
				
				ДвиженияПоТС = ДвиженияПоОтправителю[ИдТС]["СведТН"];
				
				ДвиженияПоТС.Вставить("Х" + НомерСтрокиСтроковый, Новый Соответствие);
				
				ДвиженияПоНакладной = ДвиженияПоТС["Х" + НомерСтрокиСтроковый];
				
				ДвиженияПоНакладной.Вставить("ИдПолучателя", ТекПолучатель["ИдПолучателя"]);
				ДвиженияПоНакладной.Вставить("П000000000014", СтрокаДекларации[ИмяДатыГТН]);
				ДвиженияПоНакладной.Вставить("П000000000015", СтрокаДекларации[ИмяНомерГТН]);
				ДвиженияПоНакладной.Вставить("П000000000016", СтрокаДекларации[ИмяОбъемПоГТН]);
				ДвиженияПоНакладной.Вставить("Адрес"		, СтруктураАдресПолучателя);
				
			КонецЕсли;

			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;

			// Информируем о ходе выполнения.
			Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
						ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

			КонецЕсли;

		КонецЦикла;

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	Если ЕстьИдОП Тогда
		ДанныеОП["Декларация"][ИдОП].Вставить("КолСтрокПоДекларация", КолСтрокДекларация);
	КонецЕсли;

КонецПроцедуры

Функция ОтчетЗаполненКорректно()

	СтатусПроверки = Истина;

	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	ПроверитьЗаполнениеЛицензии(СтатусПроверки);

	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеДекларации(СтатусПроверки);

	КонецЕсли;

	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;

	Возврат СтатусПроверки;

КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)

	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);

КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)

	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);

КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)

	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);

КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла)

	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);

КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента,
		ЗначениеЭлемента)

	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);

КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)

	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);

КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)

	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);

КонецПроцедуры

Функция ПроверитьДанные(Узел)

	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);

КонецФункции

Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)

	/////////////////////////////////////
	// Грузоотправители.
	ПрототипУзла_Грузоотправители = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Грузоотправители");

	Для Каждого ЭлементСправочника Из СправочникиОтчета["Грузоотправители"] Цикл

		СтрокаСправочника = ЭлементСправочника.Значение;

		НовыйУзел = НовыйУзелИзПрототипа(ПрототипУзла_Грузоотправители);

		УстановитьЗначениеЭлемента(НовыйУзел, "ИдОтправ", СтрокаСправочника["ИдОтправ"]);
		
		Узел_ПеревозчикЮрЛицо = ПолучитьПодчиненныйЭлемент(НовыйУзел, "ПеревозчикЮрЛицо");
		Узел_ПеревозчикФизЛицо = ПолучитьПодчиненныйЭлемент(НовыйУзел, "ПеревозчикФизЛицо");
		
		Если СтрокаСправочника.Получить("ПеревозчикФизЛицо") = Неопределено Тогда
		
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ПеревозчикФизЛицо); 
			
			ДанныеЮрЛица = СтрокаСправочника["ПеревозчикЮрЛицо"];
			
			УстановитьЗначениеЭлемента(Узел_ПеревозчикЮрЛицо, "П000000000004", ДанныеЮрЛица["П000000000004"]);
			УстановитьЗначениеЭлемента(Узел_ПеревозчикЮрЛицо, "П000000000005", ДанныеЮрЛица["П000000000005"]);
			УстановитьЗначениеЭлемента(Узел_ПеревозчикЮрЛицо, "П000000000006", ДанныеЮрЛица["П000000000006"]);
			
		ИначеЕсли СтрокаСправочника.Получить("ПеревозчикЮрЛицо") = Неопределено Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ПеревозчикЮрЛицо);
			
			Узел_ФИО = ПолучитьПодчиненныйЭлемент(Узел_ПеревозчикФизЛицо, "ФИО");
			
			ДанныеФизЛица = СтрокаСправочника["ПеревозчикФизЛицо"];
			
			УстановитьЗначениеЭлемента(Узел_ФИО, "Фамилия", ДанныеФизЛица["Фамилия"]);
			УстановитьЗначениеЭлемента(Узел_ФИО, "Имя", 	ДанныеФизЛица["Имя"]);
			УстановитьЗначениеЭлемента(Узел_ФИО, "Отчество", ДанныеФизЛица["Отчество"]);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СправочникиОтчета["Грузоотправители"].Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Грузоотправители);
	
	// 
	/////////////////////////////////////
	
	/////////////////////////////////////
	// ТранспортныеСредства.

	ПрототипУзла_ТранспортныеСредства = ПолучитьПодчиненныйЭлемент(УзелСправочники, "ТранспортныеСредства");
	
	Для Каждого ЭлементСправочника Из СправочникиОтчета["ТранспортныеСредства"] Цикл
		
		СтрокаСправочника = ЭлементСправочника.Значение;

		НовыйУзел = НовыйУзелИзПрототипа(ПрототипУзла_ТранспортныеСредства);
		
		Для каждого КлючЗначение Из СтрокаСправочника Цикл
			
			УстановитьЗначениеЭлемента(НовыйУзел, КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СправочникиОтчета["ТранспортныеСредства"].Очистить();
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ТранспортныеСредства);
	
	// 
	/////////////////////////////////////
	
	/////////////////////////////////////
	// Грузополучатели.

	ПрототипУзла_Грузополучатели = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Грузополучатели");

	Для Каждого ЭлементСправочника Из СправочникиОтчета["Грузополучатели"] Цикл

		СтрокаСправочника = ЭлементСправочника.Значение;

		НовыйУзел = НовыйУзелИзПрототипа(ПрототипУзла_Грузополучатели);

		УстановитьЗначениеЭлемента(НовыйУзел, "ИдПолучателя", СтрокаСправочника["ИдПолучателя"]);
		УстановитьЗначениеЭлемента(НовыйУзел, "П000000000019", СтрокаСправочника["П000000000019"]);
		
		Узел_ОрганизацияРФ = ПолучитьПодчиненныйЭлемент(НовыйУзел, "ОрганизацияРФ");
		
		Если СтрокаСправочника.Получить("ОрганизацияРФ") = Неопределено Тогда
		
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ОрганизацияРФ); 
						
		Иначе
			
			ДанныеОрганизацияРФ = СтрокаСправочника["ОрганизацияРФ"];
			
			УстановитьЗначениеЭлемента(Узел_ОрганизацияРФ, "П000000000020", ДанныеОрганизацияРФ["П000000000020"]);
			УстановитьЗначениеЭлемента(Узел_ОрганизацияРФ, "П000000000021", ДанныеОрганизацияРФ["П000000000021"]);
			
		КонецЕсли;

	КонецЦикла;
	
	СправочникиОтчета["Грузополучатели"].Очистить();

	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Грузополучатели);

	// 
	/////////////////////////////////////
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП)

	ОбразецУзлаПеревозка = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Перевозка");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерПП = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
				
		Движение = ЭлементДвиженияПоОП.Значение;
		
	    НовыйУзелПеревозка = НовыйУзелИзПрототипа(ОбразецУзлаПеревозка);
		
		НомерПП = НомерПП + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелПеревозка, "ПN", НомерПП);
		УстановитьЗначениеЭлемента(НовыйУзелПеревозка, "П000000000002", Движение["П000000000002"]);
		
		ДвиженияПоВидуПеревозки = Движение["Продукция"];
		ОбразецУзла_Продукция = ПолучитьПодчиненныйЭлемент(НовыйУзелПеревозка, "Продукция");
		
		Для каждого ЭлементДвиженияПоВидуПеревозки Из ДвиженияПоВидуПеревозки Цикл
		
			ДвижениеПоВидуПеревозки = ЭлементДвиженияПоВидуПеревозки.Значение;
			
			НовыйУзел_Продукция = НовыйУзелИзПрототипа(ОбразецУзла_Продукция);
			
			УстановитьЗначениеЭлемента(НовыйУзел_Продукция, "П000000000003", ДвижениеПоВидуПеревозки["П000000000003"]);
			
			ДвиженияПоВидуПродукции = ДвижениеПоВидуПеревозки["СведГрузоотправитель"];
			
			ОбразецУзла_СведГрузоотправитель = ПолучитьПодчиненныйЭлемент(НовыйУзел_Продукция, "СведГрузоотправитель");
			
			НомерПП_СведГрузоотправитель = 0;
			
			Для каждого ЭлементДвиженияПоВидуПродукции Из ДвиженияПоВидуПродукции Цикл
			
				ДвижениеПоВидуПродукции = ЭлементДвиженияПоВидуПродукции.Значение;
				
				НовыйУзел_СведГрузоотправитель = НовыйУзелИзПрототипа(ОбразецУзла_СведГрузоотправитель);
				
				НомерПП_СведГрузоотправитель = НомерПП_СведГрузоотправитель + 1;
				
				УстановитьЗначениеЭлемента(НовыйУзел_СведГрузоотправитель, "ПN", НомерПП_СведГрузоотправитель);
				УстановитьЗначениеЭлемента(НовыйУзел_СведГрузоотправитель, "ИдОтправ", ДвижениеПоВидуПродукции["ИдОтправ"]);
		
				Узел_Адрес = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведГрузоотправитель, "Адрес");
				
				СтруктураАдресОтправки = ДвижениеПоВидуПродукции["Адрес"];
				
				УстановитьЗначениеЭлемента(Узел_Адрес, "КодСтраны", 	СтруктураАдресОтправки.КодСтраны);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Индекс", 		СтруктураАдресОтправки.Индекс);
				УстановитьЗначениеЭлемента(Узел_Адрес, "КодРегион", 	СтруктураАдресОтправки.КодРегиона);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Район", 		СтруктураАдресОтправки.Район);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Город", 		СтруктураАдресОтправки.Город);
				УстановитьЗначениеЭлемента(Узел_Адрес, "НаселПункт", 	СтруктураАдресОтправки.НаселенныйПункт);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Улица", 		СтруктураАдресОтправки.Улица);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Дом", 			СтруктураАдресОтправки.Дом);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Корпус", 		СтруктураАдресОтправки.Корпус);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Литера", 		СтруктураАдресОтправки.Литера);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Кварт", 		СтруктураАдресОтправки.Квартира);
				
				ОбразецУзла_ТранспортноеСредство = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведГрузоотправитель, 
																			"ТранспортноеСредство");
				ДвиженияПоОтправителю = ДвижениеПоВидуПродукции["ТранспортноеСредство"];
				
				НомерПП_ТС = 0;
				
				Для каждого ЭлементДвиженияПоОтправителю Из ДвиженияПоОтправителю Цикл
				
					ДвижениеПоОтправителю = ЭлементДвиженияПоОтправителю.Значение;
					
					НовыйУзел_ТС = НовыйУзелИзПрототипа(ОбразецУзла_ТранспортноеСредство);
					
					НомерПП_ТС = НомерПП_ТС + 1;
					
					УстановитьЗначениеЭлемента(НовыйУзел_ТС, "ПN", НомерПП_ТС);
					УстановитьЗначениеЭлемента(НовыйУзел_ТС, "ИдТС", ДвижениеПоОтправителю["ИдТС"]);
		
					ОбразецУзла_СведТН = ПолучитьПодчиненныйЭлемент(НовыйУзел_ТС, "СведТН");
					
					ДвиженияПоТС = ДвижениеПоОтправителю["СведТН"];
					
					НомерПП_ТН = 0;
					
					Для каждого ЭлементДвиженияПоТС Из ДвиженияПоТС Цикл
					
						ДвиженияПоНакладной = ЭлементДвиженияПоТС.Значение;
						
						НовыйУзел_СведТН = НовыйУзелИзПрототипа(ОбразецУзла_СведТН);
						
						НомерПП_ТН = НомерПП_ТН + 1;
					
						УстановитьЗначениеЭлемента(НовыйУзел_СведТН, "ПN", НомерПП_ТН);
						
						УстановитьЗначениеЭлемента(НовыйУзел_СведТН, "П000000000014", 
												ДвиженияПоНакладной["П000000000014"]);
						УстановитьЗначениеЭлемента(НовыйУзел_СведТН, "П000000000015", 
												ДвиженияПоНакладной["П000000000015"]);
						УстановитьЗначениеЭлемента(НовыйУзел_СведТН, "П000000000016", 
												ДвиженияПоНакладной["П000000000016"]);
						
						УстановитьЗначениеЭлемента(НовыйУзел_СведТН, "ИдПолучателя", 
													ДвиженияПоНакладной["ИдПолучателя"]);
													
						Узел_Адрес = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведТН, "Адрес");
				
						СтруктураАдресПолучателя = ДвиженияПоНакладной["Адрес"];
						
						УстановитьЗначениеЭлемента(Узел_Адрес, "КодСтраны", 	СтруктураАдресПолучателя.КодСтраны);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Индекс", 		СтруктураАдресПолучателя.Индекс);
						УстановитьЗначениеЭлемента(Узел_Адрес, "КодРегион", 	СтруктураАдресПолучателя.КодРегиона);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Район", 		СтруктураАдресПолучателя.Район);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Город", 		СтруктураАдресПолучателя.Город);
						УстановитьЗначениеЭлемента(Узел_Адрес, "НаселПункт", 	СтруктураАдресПолучателя.НаселенныйПункт);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Улица", 		СтруктураАдресПолучателя.Улица);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Дом", 			СтруктураАдресПолучателя.Дом);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Корпус", 		СтруктураАдресПолучателя.Корпус);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Литера", 		СтруктураАдресПолучателя.Литера);
						УстановитьЗначениеЭлемента(Узел_Адрес, "Кварт", 		СтруктураАдресПолучателя.Квартира);
						
						ОбработаноСтрок = ОбработаноСтрок + 1;
						
					КонецЦикла; 
					
					РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзла_СведТН);
					
				КонецЦикла; 
				
				РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзла_ТранспортноеСредство);
				
			КонецЦикла; 
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзла_СведГрузоотправитель);
			
		КонецЦикла; 
		
		РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзла_Продукция);
		
		ДанныеДвиженийПоОП.Удалить(ЭлементДвиженияПоОП.Ключ);
				
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);
			
		КонецЕсли;
	
	КонецЦикла; 
			
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПеревозка);

КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел,
		ПараметрыВыгрузки)

	Узел_Документ = УзелРодитель;
	
	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	ЗаполнитьСправочникиДекларации(УзелСправочники);

	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	
	Узел_Деятельность = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Деятельность");
	
	Если НЕ Узел_Деятельность = Неопределено Тогда
	
		// Формат Выгрузки 4.40
		Узел_Лицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Лицензируемая");
		Узел_Нелицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Нелицензируемая");

		ДанныеОтчетаЛицензии = ТаблицаСтраницыЛицензии;
		ДопДанные = ДанныеОтчетаЛицензии[0].ДополнительныеДанные[0].Значение;

		ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельность();

		Если ЭтоЛицензируемаяДеятельность Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Нелицензируемая);
			ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензируемая, "Лицензия");
			
			Для Каждого Страница Из ДанныеОтчетаЛицензии Цикл
				
				ДанныеСтраницы = Страница.Данные[0].Значение;
				
				Если Не УказанаЛицензия(ДанныеСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				
				ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
				Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ЗначениеПоКлючуСтруктуры("П000000000105", ДополнительныеДанныеСтраницы));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "СерНомЛиц", ДанныеСтраницы.П000000000101
					+ " " + ДанныеСтраницы.П000000000102);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц", ДанныеСтраницы.П000000000103);
				
				// Заполнение для разных вариантов XSD.
				// Ошибки не будет - перед заполнением проверяется наличие элемента.
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОкончЛиц", ДанныеСтраницы.П000000000104);								
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ДанныеСтраницы.П000000000104);
								
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
			
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Лицензируемая);
			УстановитьЗначениеЭлемента(Узел_Нелицензируемая, "ВидДеят", ЗначениеПоКлючуСтруктуры("П000000000105", ДопДанные));
		КонецЕсли;
	КонецЕсли;

	ПрототипУзла_ОбъемПеревозки = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемПеревозки");

	Для Каждого ЭлементОП Из ДанныеОП["Декларация"] Цикл

		ИдОП = ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;

		СведенияОбОП = СтруктураОП["ОП"];

		// Заполняем сведения по ОП.
		НазваниеОП = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;

		Если ПустаяСтрока(НазваниеОП) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;

		Узел_ОбъемПеревозки = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемПеревозки);

		// Заполнение для разных вариантов XSD.
		// Ошибки не будет - перед заполнением проверяется наличие элемента.
		УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "Наим", НазваниеОП);				
		УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "НаимЮЛ", НазваниеОП);		
				
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "КППЮЛ", КПП);
		КонецЕсли;

		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемПеревозки, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", СведенияОбОП.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", СведенияОбОП.Квартира);

		ЗаполнитьСведенияДекларации(Узел_ОбъемПеревозки, ИдОП);
				
	КонецЦикла;

	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП["Декларация"].Количество() = 0 Тогда

	// Заполняем сведения по ОП.
		НазваниеОргСокр = ПараметрыВыгрузки.НаимСокр;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);

		Узел_ОбъемПеревозки = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемПеревозки);

		
		// Заполнение для разных вариантов XSD.
		// Ошибки не будет - перед заполнением проверяется наличие элемента.
		УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "Наим", НазваниеОргСокр);				
		УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "НаимЮЛ", НазваниеОргСокр);
		
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ОбъемПеревозки, "КППЮЛ", КПП);
		КонецЕсли;

		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемПеревозки, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", АдресОрганизации.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", АдресОрганизации.Квартира);
		
	КонецЕсли;

	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемПеревозки);

	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;

	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда

	// Выгружено не то количество, что есть по данным заполнения отчета.
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено в Декларации!
			|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
			|Вашей информационной базы в виде файла .dt";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт

	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;

	СоответствиеКешАдресов = Новый Соответствие;

	// Таблица результата.
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();

	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;

	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();

	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
		
	ДанныеДвижений = Новый Соответствие;
	
	СправочникиОтчета = Новый Соответствие;
	СправочникиОтчета.Вставить("Грузоотправители", Новый Соответствие);
	СправочникиОтчета.Вставить("Грузополучатели", Новый Соответствие);
	СправочникиОтчета.Вставить("ТранспортныеСредства", Новый Соответствие);
		
	СчетчикИДОтправителей = 0;
	СчетчикИДПолучателей = 0;
	СчетчикИДТранспорта = 0;
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Декларация", Новый Соответствие);
		
	// Один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%.
	НужноОбработатьСтрок = 2 * ВсегоСтрокПоРазделу1;
	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%.
	// При проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	

	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;
	
	ИмяОбластиКодовМакета = "ВидыДеятельности";
	КоллекцияСписковВыбора = Неопределено;
	СписокКодовДеятельности = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
			ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета, , КоллекцияСписковВыбора);
	ИмяОбластиКодовМакета = "ВидыПродукции";
	СписокКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
			ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета, , КоллекцияСписковВыбора);
	ИмяОбластиКодовМакета = "ВидыПеревозок";
	СписокВидовПеревозок = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
			ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета, , КоллекцияСписковВыбора);
			
	КварталОтчета = Число(РегламентированнаяОтчетностьАЛКОКлиентСервер.КварталОтчетаСтрокой(СтруктураРеквизитовФормы));

	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();

	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;

КонецФункции

Функция СписокРазделовОшибок() Экспорт
	
	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	СписокРазделов.Добавить("Лицензии");
	СписокРазделов.Добавить("Декларация");
	
	Возврат СписокРазделов;

КонецФункции
#КонецОбласти

#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда
	// Есть сообщения о ошибках
		Возврат Результат;
	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;

	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;

КонецФункции
#КонецОбласти

#Область Печать

Функция ПечататьРаздел(СтрокаРаздела)

	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;

	Возврат 0;

КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента) Экспорт

	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;

	ВидПечати = ПараметрыДокумента.ВидПечати;

	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;

	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;

	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	

	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2 * ВсегоСтрокПоРазделу1 + ВсегоСтрокПоЛицензиям) * 2;

	ОбработаноСтрок = 0;

	ТипЭкспорта = ?(СтруктураРеквизитовФормы.Свойство("ТипЭкспорта"),
					СтруктураРеквизитовФормы.ТипЭкспорта, Неопределено);
	
	ПроцентБезКонвертацииАрхивации = 
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ПроцентБезКонвертацииАрхивации(ВидПечати, ТипЭкспорта);

	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи = ПараметрыФормы.ДатаПодписи;

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста = СтрокаУровня1.Представление;
		ОриентацияЛиста = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста", ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы", ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела", ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати", ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);

		Если ИмяСтраницыПанели = "Титульный" Тогда

			ВывестиНаПечатьТитульный(СтруктураПараметров);

		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда

			СтруктураПараметров.Вставить("ИмяРаздела", "Декларация");
			ВывестиНаПечатьДекларацию(СтруктураПараметров);
				
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда

			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);

		КонецЕсли;

	КонецЦикла;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				?(ВидПечати = "ПечатьФайлZIP", "Конвертация в выбранный формат и архивация.", ""), 
				НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

	КонецЕсли;

	Возврат СтруктураРеквизитовФормы;

КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)

	НастройкиСтраницы = Новый Структура;

	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);

КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)

	НастройкиСтраницы = Новый Структура;

	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, 
																	ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);

КонецПроцедуры

Процедура ВывестиНаПечатьДекларацию(СтруктураПараметровСтраницы)

// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", ТаблицаСтраницыДекларация);
	СтруктураПараметровСтраницы.Вставить("ИдГруппыРаздела", СтруктураРеквизитовФормы.мИдГруппы12);

	// Настройки листа.
	НастройкиСтраницы = Новый Структура;
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);

	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 100);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 6);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 14);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 1);

	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);

	НастройкиАлгоритмаПечати = Новый Структура;

	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", "ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", "Подвал");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", "ОргДиректор");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", "ОргБухгалтер");
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", "НомерСтраницы");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", "ЗаголовокЛиста");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", "ЗаголовокТаблицы");

	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины, или номера колонок, т.е
	// в представлении можно указывать либо полное имя поля регистра сведений вида ИдГруппы + НомерКолонки,
	// либо просто НомерКолонки.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//	
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(26, "03");
	СписокПереносимыхПолей.Добавить(52, "06");
	СписокПереносимыхПолей.Добавить(26, "07");
	СписокПереносимыхПолей.Добавить(26, "10");
	СписокПереносимыхПолей.Добавить(52, "13");
	СписокПереносимыхПолей.Добавить(26, "15");
	
	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", "СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг", "СтрокаОП");

	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", "ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", "ЗаголовокРеквизитов");

	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", "Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", "Сведения по организации");

	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", "ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", "ОП");

	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "");
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");

	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");

	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;

	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "08,16");

	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");

	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);

	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);

	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000300");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");

	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;

	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "08,16");

	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");

	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);

	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);

	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);

	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, 
																		ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);

КонецПроцедуры
																	
#КонецОбласти

#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2021Кв1";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 5 к Порядку представления в форме электронного документа "
									+ "деклараций об объеме производства, оборота и (или) использования "
									+ "этилового спирта, алкогольной и спиртосодержащей продукции, "
									+ "об использовании производственных мощностей производителями пива и "
									+ "пивных напитков сидра, пуаре, медовухи "
									+ "(Утверждено приказом ФСРАР РФ от 17.12.2020 г. № 396).";
	НоваяФорма.РедакцияФормы	  = "от 17.12.2020 № 396.";
	НоваяФорма.ДатаНачалоДействия = '20210101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20210101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152041", '2020-12-17', "396", "ФормаОтчета2021Кв1");
	ОпределитьФорматВДеревеФормИФорматов(Форма20210101, "4.40", , , '2021-01-01');
	
	
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код,
		ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
		ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101',
		Описание = "")

	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;

КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия,
		ДатаПриказа = '00010101', НомерПриказа = "",
		ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено,
		ИмяОбъекта = "", Описание = "")

	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;

КонецФункции
#КонецОбласти

мВерсияОтчета = "БПКОРП 3.0.42.54.4";

#КонецОбласти

#КонецОбласти

#КонецЕсли
