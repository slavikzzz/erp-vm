//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция-конструктор параметров вывода пооперационного расписания в виде диаграммы Ганта.
//
// Возвращаемое значение:
//  Структура - параметры вывода.
//
Функция ПараметрыВывода() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Начало");
	Результат.Вставить("Окончание");
	Результат.Вставить("Подразделения", Новый СписокЗначений);
	Результат.Вставить("МаршрутныеЛисты", Новый СписокЗначений);
	Результат.Вставить("МаршрутныеЛистыПодсветка", Новый СписокЗначений);
	Результат.Вставить("Распоряжения", Новый СписокЗначений);
	Результат.Вставить("Периодичность", ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя);
	Результат.Вставить("МодельРасписания", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Результат.Вставить("ОптимальнаяМодельПланирования", Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Функция-конструктор параметров расшифровки интервала диаграммы Ганта с параллельной загрузкой.
//
// Возвращаемое значение:
//  Структура - параметры интервала с параллельной загрузкой.
//
Функция ПараметрыПараллельнойЗагрузки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Начало", '00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("РабочийЦентр", Справочники.РабочиеЦентры.ПустаяСсылка());
	Результат.Вставить("Подразделения", Новый Массив);
	Результат.Вставить("МодельРасписания");
	Результат.Вставить("МодельПланирования", Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	Результат.Вставить("ПараллельнаяЗагрузка", Истина);
	Результат.Вставить("Периодичность", ТипЕдиницыИнтервалаВремениАнализаДанных.День);
	
	Возврат Результат;
	
КонецФункции

// Обеспечивает вывод пооперационного расписания в диаграмму Ганта.
//
// Параметры:
//  Параметры - Структура - параметры формирования и вывода расписания, состав см. функцию ПараметрыВывода.
//  ДиаграммаГанта - ДиаграммаГанта - объект, в который будет выведено расписание.
//
Процедура ВывестиРасписание(Знач Параметры, ДиаграммаГанта) Экспорт
	
	ВывестиРасписаниеПроизводства(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

// Назначение аналогично методу ВывестиРасписание с той разницей, что запуск выполняется в фоновом режиме
//	и как следствие результаты работы (сформированная диаграмма) передаются в вызывающий сеанс через
//	временное хранилище.
//
// Параметры:
//  ПараметрыЗадания - Структура - содержит значения:
//		* Параметры - Структура - параметры формирования и вывода расписания, состав см. функцию ПараметрыВывода.
//		* ДиаграммаГанта - ДиаграммаГанта - объект, в который будет выведено расписание.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище, по которому надо поместить
//                                                     сформированную диаграмму.
//
Процедура ВывестиРасписаниеВФоновомРежиме(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	Параметры = ПараметрыЗадания.Параметры;
	ДиаграммаГанта = ПараметрыЗадания.ДиаграммаГанта;
	
	ВывестиРасписаниеПроизводства(Параметры, ДиаграммаГанта);
	
	ПоместитьВоВременноеХранилище(ДиаграммаГанта, АдресХранилища);
	
КонецПроцедуры

// Устанавливает периодичность диаграммы Ганта, содержащей пооперационное расписание.
//
// Параметры:
//  Параметры - Структура - параметры формирования и вывода расписания, состав см. функцию ПараметрыВывода.
//  ДиаграммаГанта - ДиаграммаГанта - диаграмма, содержащая расписание.
//
Процедура УстановитьПериодичность(Знач Параметры, ДиаграммаГанта) Экспорт
	
	УстановитьПериодичностьДиаграммы(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

// Обеспечивает выделение оптимальной модели планирования в диаграмме с расписанием производства.
//
// Параметры:
//  ДиаграммаГанта - ДиаграммаГанта - диаграмма, содержащая расписание.
//  ОптимальнаяМодель - СправочникСсылка.МоделиПооперационногоПланирования - оптимальная модель планирования. 
//
Процедура ПометитьОптимальнуюМодель(ДиаграммаГанта, Знач ОптимальнаяМодель) Экспорт
	
	ТочкиМоделей = ТочкиМоделейМоделейПланирования(ДиаграммаГанта);
	Для каждого Точка Из ТочкиМоделей Цикл
		Если Точка.Расшифровка = ОптимальнаяМодель Тогда
			ОформитьТочкуОптимальнаяМодель(Точка);
		Иначе
			ОформитьТочкуНеОптимальнаяМодель(Точка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит в форму легенду с расшифровкой элементов диаграммы Ганта.
//	Для вывода легенды в форме должна быть группа с именем "ГруппаОбозначения".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которую будет выведена легенда.
//	РабочиеЦентры - Булево - флаг, определяющий необходимость вывода обозначения пиктограммы рабочего центра.
//  Моделирование - Булево - флаг, определяющий может ли быть выполнен расчет (и соответственно моделирование)
//		пооперационного расписания в форме, переданной через первый параметр. В зависимости от значения флага
//		в легенду могут быть выведена расшировка элементов, используемых только при моделировании.
//
Процедура ДобавитьВФормуОбозначенияДиаграммы(Форма, РабочиеЦентры = Истина, Моделирование = Истина) Экспорт
	
	ИмяГруппыОбозначения = "ГруппаОбозначения";
	ГруппаОбозначения = Форма.Элементы.Найти(ИмяГруппыОбозначения);
	Если ГруппаОбозначения = Неопределено Тогда
		ГруппаОбозначения = ДобавитьВФормуГруппуОбозначения(Форма, ИмяГруппыОбозначения);
	КонецЕсли;
	
	Если РабочиеЦентры ИЛИ Моделирование Тогда
		ДобавитьВОбозначенияЛегендуКартинок(Форма, ГруппаОбозначения, РабочиеЦентры, Моделирование);
	КонецЕсли;
	
	ДобавитьВОбозначенияЛегендуЦветовОпераций(Форма, ГруппаОбозначения);
	
КонецПроцедуры

// Возвращает пользовательское представление для незаполненной модели планирования.
//
// Возвращаемое значение:
//  Строка - представление пустой модели.
//
Функция ПредставлениеПустойМодели() Экспорт
	
	Возврат НСтр("ru = '<По умолчанию>';
				|en = '<By default>'");
	
КонецФункции

// Выводит в диаграмму Ганта расписание производства РЦ с параллельной загрузкой в развернутом виде.
// Используется для расшифровки параллельно загруженного интервала расписания заданного РЦ.
//
// Параметры:
//  ПараметрыЗадания - Структура - содержит значения:
//		* Параметры - Структура - параметры формирования и вывода расписания, состав см. функцию ПараметрыПараллельнойЗагрузки.
//		* ДиаграммаГанта - ДиаграммаГанта - объект, в который будет выведено расписание.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище, по которому надо поместить
//                                                     сформированную диаграмму.
//
Процедура РасшифроватьПараллельнуюЗагрузкуВФоновомРежиме(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	Параметры = ПараметрыЗадания.Параметры;
	ДиаграммаГанта = ПараметрыЗадания.ДиаграммаГанта;
	
	РасшифроватьПараллельнуюЗагрузку(Параметры, ДиаграммаГанта);
	
	ПоместитьВоВременноеХранилище(ДиаграммаГанта, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыводРасписанияВДиаграммуГанта

Процедура ВывестиРасписаниеПроизводства(Параметры, ДиаграммаГанта)
	
	ДанныеРасписания = ДанныеРасписанияПроизводства(Параметры);
	ВывестиРасписаниеВДиаграмму(Параметры, ДиаграммаГанта, ДанныеРасписания);
	ОформитьДиаграмму(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

Процедура ВывестиРасписаниеВДиаграмму(Знач Параметры, ДиаграммаГанта, Знач ДанныеРасписания)
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	
	Серия = СерияПоУмолчанию(ДиаграммаГанта);
	
	ТекущийКлючСвязи = Неопределено;
	ТекущийРабочийЦентр = Неопределено;
	Для каждого Интервал Из ДанныеРасписания Цикл
		
		Если ТекущийКлючСвязи = Неопределено ИЛИ НЕ ТекущийКлючСвязи = Интервал.КлючСвязиМодель Тогда
			ТекущийКлючСвязи = Интервал.КлючСвязиМодель;
			ТекущийРабочийЦентр = Неопределено;
			УстановитьТочкуДиаграммыМодель(Параметры, Интервал, ДиаграммаГанта);
		КонецЕсли;
		
		Если ТекущийРабочийЦентр = Неопределено ИЛИ ИзменилсяРабочийЦентрИнтервала(Интервал, ТекущийРабочийЦентр) Тогда
			ТекущийРабочийЦентр = Интервал.РабочийЦентр;
			ТочкаРабочийЦентр = ТочкаДиаграммыРабочийЦентр(Интервал, ДиаграммаГанта);
			Значение = ДиаграммаГанта.ПолучитьЗначение(ТочкаРабочийЦентр, Серия);
		КонецЕсли;
		
		ВывестиИнтервал(Параметры, Интервал, Значение);
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры

Функция ИзменилсяРабочийЦентрИнтервала(Интервал, ТекущийРабочийЦентр)
	
	Если НЕ ТипЗнч(ТекущийРабочийЦентр) = ТипЗнч(Интервал.РабочийЦентр) Тогда
		Возврат Истина;
	Иначе
		Возврат НЕ ТекущийРабочийЦентр = Интервал.РабочийЦентр;
	КонецЕсли;
	
КонецФункции

Функция СерияПоУмолчанию(ДиаграммаГанта)
	
	Возврат ДиаграммаГанта.УстановитьСерию("Расписание");
	
КонецФункции

Процедура УстановитьТочкуДиаграммыМодель(Знач Параметры, Знач ЗначенияЗаполнения, ДиаграммаГанта)
	
	КлючСвязи = КлючСвязиТочек(ЗначенияЗаполнения);
	
	Если КлючСвязи = Неопределено Тогда
		
		Результат = Неопределено;
		
	Иначе
		
		Результат = ДиаграммаГанта.УстановитьТочку(КлючСвязи);
		Результат.Текст = 
			?(ЗначениеЗаполнено(ЗначенияЗаполнения.МодельПланирования),
				ЗначенияЗаполнения.МодельПланированияПредставление,
				ПредставлениеПустойМодели());
		Результат.Картинка = КартинкаМодельПланирования();
		Результат.Расшифровка = ЗначенияЗаполнения.МодельПланирования;
				
		Если ЗначенияЗаполнения.МодельПланирования = Параметры.ОптимальнаяМодельПланирования Тогда
			ОформитьТочкуОптимальнаяМодель(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КлючСвязиТочек(Знач ЗначенияЗаполнения)
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.КлючСвязиМодель) Тогда
		Возврат ЗначенияЗаполнения.КлючСвязиМодель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОформитьТочкуОптимальнаяМодель(Точка)
	
	ЖирныйШрифт = Новый Шрифт(,, Истина);
	Точка.Шрифт = ЖирныйШрифт;
	
КонецПроцедуры

Процедура ОформитьТочкуНеОптимальнаяМодель(Точка)
	
	ПростойШрифт = Новый Шрифт;
	Точка.Шрифт = ПростойШрифт;
	
КонецПроцедуры

Функция ТочкиМоделейМоделейПланирования(Знач ДиаграммаГанта)
	
	Результат = Новый Массив;
	
	Для каждого Точка Из ДиаграммаГанта.Точки Цикл
		Если ТипЗнч(Точка.Расшифровка) = Тип("СправочникСсылка.МоделиПооперационногоПланирования") Тогда
			Результат.Добавить(Точка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТочкаДиаграммыРабочийЦентр(Знач ЗначенияЗаполнения, ДиаграммаГанта)
	
	ЗначениеТочки = Новый Структура("РабочийЦентр, МодельПланирования");
	ЗаполнитьЗначенияСвойств(ЗначениеТочки, ЗначенияЗаполнения);
	КлючСвязи = КлючСвязиТочек(ЗначенияЗаполнения);
	
	Результат = ДиаграммаГанта.УстановитьТочку(ЗначениеТочки, КлючСвязи);
	Результат.Текст = ЗначенияЗаполнения.РабочийЦентрПредставление;
	Результат.Картинка = КартинкаТочкиРабочийЦентр(ЗначенияЗаполнения);
	Результат.Расшифровка = ЗначенияЗаполнения.РабочийЦентр;
	
	Возврат Результат;
	
КонецФункции

Функция КартинкаТочкиРабочийЦентр(Знач ЗначенияЗаполнения)
	
	Если НЕ ТипЗнч(ЗначенияЗаполнения.РабочийЦентр) = Тип("Строка") Тогда
		
		Если ЗначенияЗаполнения.Вспомогательный Тогда
			Результат = КартинкаВспомогательныйРабочийЦентр();
		Иначе
			Результат = КартинкаРабочийЦентр();
		КонецЕсли;
		
	Иначе
		
		Результат = КартинкаДополнительныйРабочийЦентр();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиИнтервал(Знач Параметры, Знач ЗначенияЗаполнения, ЗначениеДиаграммы)
	
	Интервал = ЗначениеДиаграммы.Добавить();
	Интервал.Начало = ЗначенияЗаполнения.Начало;
	Интервал.Конец = ЗначенияЗаполнения.Окончание;
	Интервал.Цвет = ЦветИнтервалаДиаграммы(Параметры, ЗначенияЗаполнения);
	Интервал.Текст = ПодсказкаИнтервала(ЗначенияЗаполнения);
	Интервал.Расшифровка = РасшифровкаИнтервала(ЗначенияЗаполнения);
	
КонецПроцедуры

Функция ПодсказкаИнтервала(Знач ЗначенияЗаполнения)
	
	Результат = Формат(ЗначенияЗаполнения.Начало, "ДФ=ЧЧ:мм") + "-"
		+ Формат(ЗначенияЗаполнения.Окончание, "ДФ=ЧЧ:мм") + " "
		+ Формат(ЗначенияЗаполнения.Окончание, "ДЛФ=D");
	
	Если ЗначенияЗаполнения.Состояние = ТекстРабота()
		ИЛИ ЗначенияЗаполнения.Состояние = ТекстПереналадка() Тогда
		
		Если НЕ ЗначенияЗаполнения.ПараллельнаяЗагрузка Тогда
			
			Результат = Результат
				+ Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция: %1';
																				|en = 'Operation: %1'"), ЗначенияЗаполнения.ОперацияПредставление)
				+ Символы.ПС
				+ ПредставлениеМаршрутногоЛиста(ЗначенияЗаполнения.МаршрутныйЛистНомер, ЗначенияЗаполнения.МаршрутныйЛистДата);
			
			Если ЗначениеЗаполнено(ЗначенияЗаполнения.Загрузка) Тогда
				Результат = Результат
					+ Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Загрузка: %1 %2';
							|en = 'Load: %1 %2'"),
						ЗначенияЗаполнения.Загрузка,
						ЗначенияЗаполнения.ЕдиницаИзмеренияЗагрузки);
			КонецЕсли;
			
		Иначе
			
			Результат = Результат
				+ Символы.ПС
				+ НСтр("ru = 'Параллельная загрузка';
						|en = 'Parallel load'");
			
		КонецЕсли;
		
	ИначеЕсли ЗначенияЗаполнения.Состояние = ТекстРемонт() Тогда
		
		Результат = Результат + Символы.ПС + НСтр("ru = 'Ремонт';
													|en = 'Repair'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасшифровкаИнтервала(Знач ЗначенияЗаполнения)
	
	Если НЕ ЗначенияЗаполнения.ПараллельнаяЗагрузка Тогда
		
		Результат = ЗначенияЗаполнения.Расшифровка;
		
	Иначе
		
		Результат = ПараметрыПараллельнойЗагрузки();
		ЗаполнитьЗначенияСвойств(Результат, ЗначенияЗаполнения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветИнтервалаДиаграммы(Знач Параметры, Знач ЗначенияЗаполнения)
	
	Если Параметры.Свойство("МаршрутныеЛистыПодсветка")
		И ЗначениеЗаполнено(Параметры.МаршрутныеЛистыПодсветка) Тогда
		Результат = ЦветИнтервалаПоНастройкамПодсветки(Параметры, ЗначенияЗаполнения);
	Иначе
		Результат = ЦветИнтервалаПоДаннымРасписания(ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветИнтервалаПоНастройкамПодсветки(Знач Параметры, Знач ЗначенияЗаполнения)
	
	Если Параметры.МаршрутныеЛистыПодсветка.НайтиПоЗначению(ЗначенияЗаполнения.МаршрутныйЛист) = Неопределено Тогда
		Результат = WebЦвета.СветлоСерый;
	Иначе
		Результат = ЦветИнтервалаПоДаннымРасписания(ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветИнтервалаПоДаннымРасписания(Знач ЗначенияЗаполнения)
	
	Возврат ЦветИнтервала(ЗначенияЗаполнения.Состояние, ЗначенияЗаполнения.Выполнение, ЗначенияЗаполнения.ПараллельнаяЗагрузка);
	
КонецФункции

Процедура ОформитьДиаграмму(Знач Параметры, ДиаграммаГанта)
	
	УстановитьОбщиеСвойстваДиаграммы(ДиаграммаГанта);
	УстановитьПериодичностьДиаграммы(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

Процедура УстановитьОбщиеСвойстваДиаграммы(ДиаграммаГанта)
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГанта.ВертикальнаяПрокрутка = Истина;
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.Окантовка = Истина;
	ДиаграммаГанта.ОтображатьПустыеЗначения = Ложь;
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	
КонецПроцедуры

Процедура УстановитьПериодичностьДиаграммы(Знач Параметры, ДиаграммаГанта)
	
	Если НЕ Параметры.Свойство("Периодичность")
		ИЛИ НЕ ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя;
	Иначе
		Периодичность = Параметры.Периодичность;
	КонецЕсли;
	
	УдалитьЭлементыШкалыВремени(ДиаграммаГанта);
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		
		УстановитьПериодичностьНеделя(ДиаграммаГанта);
		
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		
		УстановитьПериодичностьДень(ДиаграммаГанта);
		
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		
		УстановитьПериодичностьМесяц(ДиаграммаГанта);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Начало) И ЗначениеЗаполнено(Параметры.Окончание) Тогда
		
		Если ДиаграммаГанта.АвтоОпределениеПолногоИнтервала Тогда
			ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
		КонецЕсли;
		
		ДиаграммаГанта.УстановитьПолныйИнтервал(Параметры.Начало, Параметры.Окончание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЭлементыШкалыВремени(ДиаграммаГанта)
	
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// Нельзя полностью очитить коллекцию, один элемент будет всегда.
	Для Сч = 1 По ЭлементыШкалыВремени.Количество()-1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьПериодичностьНеделя(ДиаграммаГанта)
	
	ПервыйЭлемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
	ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
	ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ПервыйЭлемент.Формат = "ДФ='ММММ yyyy'";
	
	Элемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	Элемент.Единица = ТипЕдиницыШкалыВремени.День;
	Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);		
	
	Элемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
	Элемент.Кратность = 6;
	Элемент.Формат = "ДФ='HH'";
	Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.НетЛинии, 1);		
	
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	ДиаграммаГанта.КратностьПериодическогоВарианта = 1;
	ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
	
КонецПроцедуры

Процедура УстановитьПериодичностьДень(ДиаграммаГанта)
	
	ПервыйЭлемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
	ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.День;
	ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	ПервыйЭлемент.Формат = "";
	
	Элемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
	Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);		
	Элемент.Формат = "ДФ='HH'";
	
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	ДиаграммаГанта.КратностьПериодическогоВарианта = 21;
	ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	
КонецПроцедуры

Процедура УстановитьПериодичностьМесяц(ДиаграммаГанта)
	
	ПервыйЭлемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
	ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
	ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ПервыйЭлемент.Формат = "ДФ='ММММ yyyy'";
	
	Элемент = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	Элемент.Единица = ТипЕдиницыШкалыВремени.День;
	Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);		
	
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	ДиаграммаГанта.КратностьПериодическогоВарианта = 1;
	ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхРасписания

Функция ДанныеРасписанияПроизводства(Знач Параметры)
	
	ВыборкаДанных = ВыбратьДанныеРасписания(Параметры);
	Результат = ИнициализироватьДанныеРасписания(ВыборкаДанных.Колонки);
	ПараллельныеИнтервалы = Новый Массив;
	
	ВыборкаМодель = ВыборкаДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМодель.Следующий() Цикл
		
		ВыборкаРабочийЦентр = ВыборкаМодель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРабочийЦентр.Следующий() Цикл
			
			ПараллельныеИнтервалы.Очистить();
			ПараллельнаяЗагрузка = Ложь;
			Окончание = Неопределено;
			
			Выборка = ВыборкаРабочийЦентр.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ Окончание = Неопределено Тогда
					
					Если Выборка.Начало >= Окончание Тогда
						
						НоваяСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						Если ПараллельнаяЗагрузка Тогда
							Если ПараллельныеИнтервалы.Количество() > 0 Тогда
								ПараллельныеИнтервалы.Очистить();
							КонецЕсли;
						КонецЕсли;
						Окончание = Выборка.Окончание;
						
					Иначе
						
						ПараллельнаяЗагрузка = Истина;
						Если ПараллельныеИнтервалы.Количество() = 0 Тогда
							ПредшествующаяСтрока = Результат[Результат.Количество()-1];
							ПараллельныеИнтервалы.Добавить(ПредшествующаяСтрока);
						КонецЕсли;
						
						ВытеснитьИнтервалы(Результат, ПараллельныеИнтервалы, Выборка, Окончание);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Окончание = Выборка.Окончание;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьКлючСвязиМодель(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьДанныеРасписания(Знач Параметры)
	
	ТекстЗапроса = ТекстЗапросаДанныеРасписания();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("МодельРасписания", Параметры.МодельРасписания);
	Запрос.УстановитьПараметр("ОптимальнаяМодельПланирования", Параметры.ОптимальнаяМодельПланирования);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ПустыеЗначенияРабочегоЦентра = Новый Массив;
	ПустыеЗначенияРабочегоЦентра.Добавить(Справочники.РабочиеЦентры.ПустаяСсылка());
	ПустыеЗначенияРабочегоЦентра.Добавить("");
	ПустыеЗначенияРабочегоЦентра.Добавить(Неопределено);
	Запрос.УстановитьПараметр("ПустыеЗначенияРабочегоЦентра", ПустыеЗначенияРабочегоЦентра);
	
	Запрос.УстановитьПараметр("ОтборНачало", ЗначениеЗаполнено(Параметры.Начало));
	Запрос.УстановитьПараметр("Начало", Параметры.Начало);
	
	Запрос.УстановитьПараметр("ОтборОкончание", ЗначениеЗаполнено(Параметры.Окончание));
	Запрос.УстановитьПараметр("Окончание", Параметры.Окончание);
	
	Запрос.УстановитьПараметр("ОтборПодразделения", ЗначениеЗаполнено(Параметры.Подразделения));
	Запрос.УстановитьПараметр("Подразделения", Параметры.Подразделения.ВыгрузитьЗначения());
	
	Запрос.УстановитьПараметр("ОтборМаршрутныеЛисты", ЗначениеЗаполнено(Параметры.МаршрутныеЛисты));
	Запрос.УстановитьПараметр("МаршрутныеЛисты", Параметры.МаршрутныеЛисты.ВыгрузитьЗначения());
	
	Запрос.УстановитьПараметр("ОтборРаспоряжения", ЗначениеЗаполнено(Параметры.Распоряжения));
	Запрос.УстановитьПараметр("Распоряжения", Параметры.Распоряжения.ВыгрузитьЗначения());
	
	Запрос.УстановитьПараметр("ТекстПереналадка", ТекстПереналадка());
	Запрос.УстановитьПараметр("ТекстРабота", ТекстРабота());
	Запрос.УстановитьПараметр("ТекстРемонт", ТекстРемонт());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстПереналадка()
	
	Возврат НСтр("ru = 'Переналадка';
				|en = 'Changeover'");
	
КонецФункции

Функция ТекстРабота()
	
	Возврат НСтр("ru = 'Работа';
				|en = 'Work'");
	
КонецФункции

Функция ТекстРемонт()
	
	Возврат НСтр("ru = 'Ремонт';
				|en = 'Repair'");
	
КонецФункции

Функция ТекстЗапросаДанныеРасписания()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр
	|ПОМЕСТИТЬ ОперацииОчистить
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.МодельРасписания,
	|	ПооперационноеРасписание.МодельПланирования,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ПооперационноеРасписание.РабочийЦентр,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.ЭтоПереналадка КАК ЭтоПереналадка,
	|	ПооперационноеРасписание.Вспомогательная,
	|	ПооперационноеРасписание.СтатусВыполнения,
	|	ПооперационноеРасписание.Загрузка
	|ПОМЕСТИТЬ ОперацииРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.Моделирование = ИСТИНА
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ЛОЖЬ
	|	И НЕ ПооперационноеРасписание.РабочийЦентр В (&ПустыеЗначенияРабочегоЦентра)
	|	И (НЕ &ОтборНачало
	|			ИЛИ ПооперационноеРасписание.Окончание > &Начало)
	|	И (НЕ &ОтборОкончание
	|			ИЛИ ПооперационноеРасписание.Начало < &Окончание)
	|	И (НЕ &ОтборПодразделения
	|			ИЛИ ПооперационноеРасписание.Подразделение В (&Подразделения))
	|	И (НЕ &ОтборМаршрутныеЛисты
	|			ИЛИ ПооперационноеРасписание.МаршрутныйЛист В (&МаршрутныеЛисты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры),
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.ЭтоПереналадка,
	|	ПооперационноеРасписание.Вспомогательная,
	|	ПооперационноеРасписание.СтатусВыполнения,
	|	ПооперационноеРасписание.Загрузка
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	НЕ (ПооперационноеРасписание.Начало, ПооперационноеРасписание.Окончание, ПооперационноеРасписание.РабочийЦентр) В
	|				(ВЫБРАТЬ
	|					ОперацииОчистить.Начало,
	|					ОперацииОчистить.Окончание,
	|					ОперацииОчистить.РабочийЦентр
	|				ИЗ
	|					ОперацииОчистить)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И НЕ ПооперационноеРасписание.РабочийЦентр В (&ПустыеЗначенияРабочегоЦентра)
	|	И (НЕ &ОтборНачало
	|			ИЛИ ПооперационноеРасписание.Окончание > &Начало)
	|	И (НЕ &ОтборОкончание
	|			ИЛИ ПооперационноеРасписание.Начало < &Окончание)
	|	И (НЕ &ОтборПодразделения
	|			ИЛИ ПооперационноеРасписание.Подразделение В (&Подразделения))
	|	И (НЕ &ОтборМаршрутныеЛисты
	|			ИЛИ ПооперационноеРасписание.МаршрутныйЛист В (&МаршрутныеЛисты))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииРасписания.РабочийЦентр,
	|	МИНИМУМ(ОперацииРасписания.Вспомогательная) КАК Вспомогательная
	|ПОМЕСТИТЬ ВспомогательныеРЦ
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииРасписания.РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииРасписания.МодельРасписания,
	|	ОперацииРасписания.МодельПланирования КАК МодельПланирования,
	|	ОперацииРасписания.МодельПланирования.Представление,
	|	ВЫБОР
	|		КОГДА ОперацииРасписания.МодельПланирования = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК МодельПланированияПорядок,
	|	ОперацииРасписания.Начало КАК Начало,
	|	ОперацииРасписания.Окончание КАК Окончание,
	|	ОперацииРасписания.РабочийЦентр КАК РабочийЦентр,
	|	ВЫБОР
	|		КОГДА ОперацииРасписания.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
	|			ТОГДА ОперацииРасписания.РабочийЦентр.Наименование
	|		ИНАЧЕ ОперацииРасписания.РабочийЦентр
	|	КОНЕЦ КАК РабочийЦентрПредставление,
	|	ОперацииРасписания.ИдентификаторОперации,
	|	ВЫБОР
	|		КОГДА ОперацииРасписания.ЭтоПереналадка
	|			ТОГДА &ТекстПереналадка
	|		ИНАЧЕ &ТекстРабота
	|	КОНЕЦ КАК Состояние,
	|	ОперацииРасписания.Вспомогательная КАК Вспомогательный,
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист,
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист.Номер,
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист.Дата,
	|	ОперацииМаршрутовПроизводства.Операция,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутовПроизводства.Операция ССЫЛКА Справочник.ТехнологическиеОперации
	|			ТОГДА ВЫРАЗИТЬ(ОперацииМаршрутовПроизводства.Операция КАК Справочник.ТехнологическиеОперации).Представление
	|		ИНАЧЕ ОперацииМаршрутовПроизводства.Операция
	|	КОНЕЦ КАК ОперацияПредставление,
	|	ОперацииМаршрутовПроизводства.Распоряжение,
	|	ОперацииМаршрутовПроизводства.Подразделение,
	|	ОперацииМаршрутовПроизводства.ВариантНаладки,
	|	ВЫБОР
	|		КОГДА ОперацииРасписания.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|			ТОГДА ОперацииРасписания.СтатусВыполнения
	|		КОГДА ОперацииМаршрутовПроизводства.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	|				ИЛИ ОперацииМаршрутовПроизводства.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ОперацииРасписания.Начало > &ТекущаяДата
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|					КОГДА ОперацииРасписания.Начало <= &ТекущаяДата
	|							И ОперацииРасписания.Окончание > &ТекущаяДата
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|	КОНЕЦ КАК Выполнение,
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист КАК Расшифровка,
	|	ОперацииРасписания.Загрузка,
	|	ОперацииРасписания.РабочийЦентр.ВидРабочегоЦентра.ЕдиницаИзмеренияЗагрузки КАК ЕдиницаИзмеренияЗагрузки
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ОперацииРасписания.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации
	|ГДЕ
	|	(НЕ &ОтборРаспоряжения
	|			ИЛИ ОперацииМаршрутовПроизводства.Распоряжение В (&Распоряжения))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL,
	|	1,
	|	РемонтыРабочихЦентров.ДатаНачала,
	|	РемонтыРабочихЦентров.ДатаЗавершения,
	|	РемонтыРабочихЦентров.РабочийЦентр,
	|	РемонтыРабочихЦентров.РабочийЦентр.Наименование,
	|	NULL,
	|	&ТекстРемонт,
	|	ЕСТЬNULL(ВспомогательныеРЦ.Вспомогательная, ЛОЖЬ),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РемонтыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра.Подразделение,
	|	NULL,
	|	NULL,
	|	РемонтыРабочихЦентров.Регистратор,
	|	0,
	|	NULL
	|ИЗ
	|	РегистрСведений.РемонтыРабочихЦентров КАК РемонтыРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВспомогательныеРЦ КАК ВспомогательныеРЦ
	|		ПО РемонтыРабочихЦентров.РабочийЦентр = ВспомогательныеРЦ.РабочийЦентр
	|ГДЕ
	|	РемонтыРабочихЦентров.РабочийЦентр В
	|			(ВЫБРАТЬ
	|				ОперацииРасписания.РабочийЦентр
	|			ИЗ
	|				ОперацииРасписания)
	|	И (НЕ &ОтборНачало
	|			ИЛИ РемонтыРабочихЦентров.ДатаНачала >= &Начало)
	|	И (НЕ &ОтборОкончание
	|			ИЛИ РемонтыРабочихЦентров.ДатаЗавершения <= &Окончание)
	|	И (НЕ &ОтборПодразделения
	|			ИЛИ РемонтыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра.Подразделение В (&Подразделения))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МодельПланированияПорядок,
	|	МодельПланирования,
	|	РабочийЦентрПредставление,
	|	Начало,
	|	Окончание
	|ИТОГИ
	|	МИНИМУМ(Вспомогательный)
	|ПО
	|	МодельПланирования,
	|	РабочийЦентр";
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьДанныеРасписания(Колонки)
	
	Результат = Новый ТаблицаЗначений;
	Для каждого Колонка Из Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	Результат.Колонки.Добавить("КлючСвязиМодель", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	Результат.Колонки.Добавить("ПараллельнаяЗагрузка", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

Процедура ВытеснитьИнтервалы(ДанныеРасписания, ПараллельныеИнтервалы, ТекущийИнтервал, Окончание)
	
	Индекс = 0;
	Для каждого ОчереднойИнтервал Из ПараллельныеИнтервалы Цикл
		Если ТекущийИнтервал.Начало < ОчереднойИнтервал.Окончание Тогда
			
			Если ОчереднойИнтервал.ПараллельнаяЗагрузка Тогда
				
				Если ТекущийИнтервал.Окончание > ОчереднойИнтервал.Окончание Тогда
					ОчереднойИнтервал.Окончание = ТекущийИнтервал.Окончание;
					Если НЕ Индекс = ПараллельныеИнтервалы.ВГраница() Тогда
						СледующийИнтервал = ПараллельныеИнтервалы[Индекс+1];
						Если ОчереднойИнтервал.Окончание >= СледующийИнтервал.Окончание Тогда
							ДанныеРасписания.Удалить(СледующийИнтервал);
							ПараллельныеИнтервалы.Удалить(Индекс+1);
						Иначе
							СледующийИнтервал.Начало = ОчереднойИнтервал.Окончание;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ТекущийИнтервал.Начало = ОчереднойИнтервал.Начало
					И ТекущийИнтервал.Окончание >= ОчереднойИнтервал.Окончание Тогда
					
					Если  ТекущийИнтервал.Окончание = ОчереднойИнтервал.Окончание Тогда
						ОчереднойИнтервал.ПараллельнаяЗагрузка = Истина;
					Иначе
						НовыйИнтервал = ДанныеРасписания.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
						НовыйИнтервал.Начало = ОчереднойИнтервал.Окончание;
						НовыйИнтервал.Окончание = ТекущийИнтервал.Окончание;
						ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
						
						ОчереднойИнтервал.ПараллельнаяЗагрузка = Истина;
					КонецЕсли;
					
					Если НЕ Индекс = 0 Тогда
						ПредыдущийИнтервал = ПараллельныеИнтервалы[Индекс-1];
						Если ПредыдущийИнтервал.ПараллельнаяЗагрузка Тогда
							ПредыдущийИнтервал.Окончание = ОчереднойИнтервал.Окончание;
							
							ДанныеРасписания.Удалить(ОчереднойИнтервал);
							ПараллельныеИнтервалы.Удалить(Индекс);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТекущийИнтервал.Начало = ОчереднойИнтервал.Начало Тогда
					
					НовыйИнтервал = ДанныеРасписания.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
					НовыйИнтервал.Начало = ТекущийИнтервал.Окончание;
					ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
					
					ОчереднойИнтервал.ПараллельнаяЗагрузка = Истина;
					ОчереднойИнтервал.Окончание = ТекущийИнтервал.Окончание;
					
					Если НЕ Индекс = 0 Тогда
						ПредыдущийИнтервал = ПараллельныеИнтервалы[Индекс-1];
						Если ПредыдущийИнтервал.ПараллельнаяЗагрузка Тогда
							ПредыдущийИнтервал.Окончание = ОчереднойИнтервал.Окончание;
							
							ДанныеРасписания.Удалить(ОчереднойИнтервал);
							ПараллельныеИнтервалы.Удалить(Индекс);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТекущийИнтервал.Окончание >= ОчереднойИнтервал.Окончание Тогда
					
					Если ТекущийИнтервал.Окончание = ОчереднойИнтервал.Окончание Тогда
						
						НовыйИнтервал = ДанныеРасписания.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
						НовыйИнтервал.Начало = ТекущийИнтервал.Начало;
						НовыйИнтервал.ПараллельнаяЗагрузка = Истина;
						ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
						
						ОчереднойИнтервал.Окончание = ТекущийИнтервал.Начало;
						
					Иначе
						
						НовыйИнтервал = ДанныеРасписания.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
						НовыйИнтервал.Начало = ТекущийИнтервал.Начало;
						НовыйИнтервал.Окончание = ОчереднойИнтервал.Окончание;
						НовыйИнтервал.ПараллельнаяЗагрузка = Истина;
						ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
						
						НовыйИнтервал = ДанныеРасписания.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
						НовыйИнтервал.Начало = ОчереднойИнтервал.Окончание;
						НовыйИнтервал.Окончание = ТекущийИнтервал.Окончание;
						ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
						
						ОчереднойИнтервал.Окончание = ТекущийИнтервал.Начало;
						
					КонецЕсли;
					
				Иначе
					
					НовыйИнтервал = ДанныеРасписания.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
					НовыйИнтервал.Начало = ТекущийИнтервал.Начало;
					НовыйИнтервал.Окончание = ТекущийИнтервал.Окончание;
					НовыйИнтервал.ПараллельнаяЗагрузка = Истина;
					ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
					
					НовыйИнтервал = ДанныеРасписания.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИнтервал, ОчереднойИнтервал);
					НовыйИнтервал.Начало = ТекущийИнтервал.Окончание;
					ПараллельныеИнтервалы.Добавить(НовыйИнтервал);
					
					ОчереднойИнтервал.Окончание = ТекущийИнтервал.Начало;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Окончание = Макс(Окончание, ТекущийИнтервал.Окончание);
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКлючСвязиМодель(ДанныеРасписания)
	
	Если ЗначениеЗаполнено(ДанныеРасписания) Тогда
		
		МодельПланирования = ДанныеРасписания[0].МодельПланирования;
		МодельРасписания = ДанныеРасписания[0].МодельРасписания;
		КлючСвязи = 0;
		
		Для каждого Строка Из ДанныеРасписания Цикл
			
			Если НЕ Строка.МодельПланирования = МодельПланирования
				ИЛИ НЕ Строка.МодельРасписания = МодельРасписания Тогда
				
				КлючСвязи = КлючСвязи + 1;
				МодельПланирования = Строка.МодельПланирования;
				МодельРасписания = Строка.МодельРасписания;
				
			КонецЕсли;
			
			Строка.КлючСвязиМодель = КлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрафическоеОформлениеЭлементовДиаграммы

Функция КартинкаРабочийЦентр()
	
	Возврат БиблиотекаКартинок.РабочийЦентр;
	
КонецФункции

Функция КартинкаВспомогательныйРабочийЦентр()
	
	Возврат БиблиотекаКартинок.Закрепить;
	
КонецФункции

Функция КартинкаДополнительныйРабочийЦентр()
	
	Возврат БиблиотекаКартинок.СоздатьЭлементСписка;
	
КонецФункции

Функция КартинкаМодельПланирования()
	
	Возврат БиблиотекаКартинок.ПараметрыВыводаКомпоновкиДанных;
	
КонецФункции

Функция ЦветИнтервала(Состояние, Выполнение=Неопределено, ПараллельнаяЗагрузка=Ложь)
	
	Результат = WebЦвета.Золотой;
	
	Если Состояние = ТекстРабота() Тогда
		
		Если ПараллельнаяЗагрузка Тогда
			Результат = WebЦвета.Сливовый;
		ИначеЕсли Выполнение = Перечисления.СтатусыВыполненияОпераций.НеНачато Тогда
			Результат = WebЦвета.Золотой;
		ИначеЕсли Выполнение = Перечисления.СтатусыВыполненияОпераций.Начато Тогда
			Результат = WebЦвета.Голубой;
		ИначеЕсли Выполнение = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
			Результат = WebЦвета.СветлоЗеленый;
		КонецЕсли;
		
	ИначеЕсли Состояние = ТекстРемонт() Тогда
		
		Результат = WebЦвета.Коралловый;
		
	ИначеЕсли Состояние = ТекстПереналадка() Тогда
		
		Результат = WebЦвета.РыжеватоКоричневый;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеНаФормуОбозначенийДиаграммы

Функция ДобавитьВФормуГруппуОбозначения(Форма, ИмяГруппы)
	
	Результат = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"));
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Заголовок = НСтр("ru = 'Обозначения';
								|en = 'Designations'");
	Результат.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Результат.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Показать обозначения';
													|en = 'Legend'");
	Результат.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Результат.Отображение = ОтображениеОбычнойГруппы.Нет;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Результат.Подсказка = НСтр("ru = 'Обозначения элементов диаграммы';
								|en = 'Chart item designations'");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВОбозначенияЛегендуКартинок(Форма, ГруппаОбозначения, РабочиеЦентры, Моделирование)
	
	ГруппаЛегенда = ДобавитьВФормуГруппуЛегенда(Форма, ГруппаОбозначения, "ГруппаЛегендаКартинки");
	
	Если РабочиеЦентры Тогда
		ДобавитьВЛегендуОписаниеРабочегоЦентра(Форма, ГруппаЛегенда);
		ДобавитьВЛегендуОписаниеОблсуживающегоРабочегоЦентра(Форма, ГруппаЛегенда);
	КонецЕсли;
	
	Если Моделирование Тогда
		ДобавитьВЛегендуОписаниеДополнительногоРабочегоЦентра(Форма, ГруппаЛегенда);
		ДобавитьВЛегендуОписаниеМоделиПланирования(Форма, ГруппаЛегенда);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеРабочегоЦентра(Форма, Родитель)
	
	Картинка = КартинкаРабочийЦентр();
	Пояснение = НСтр("ru = '- рабочий центр';
					|en = '- work center'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаРабочийЦентр");
	ДобавитьВОписаниеКартинкуОбъекта(Форма, ГруппаОписание, "КартинкаРабочийЦентр", Картинка);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеРабочийЦентр", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеОблсуживающегоРабочегоЦентра(Форма, Родитель)
	
	Картинка = КартинкаВспомогательныйРабочийЦентр();
	Пояснение = НСтр("ru = '- вспомогательный рабочий центр';
					|en = '- additional work center'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаВспомогательныйРабочийЦентр");
	ДобавитьВОписаниеКартинкуОбъекта(Форма, ГруппаОписание, "КартинкаВспомогательныйРабочийЦентр", Картинка);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеВспомогательныйРабочийЦентр", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеДополнительногоРабочегоЦентра(Форма, Родитель)
	
	Картинка = КартинкаДополнительныйРабочийЦентр();
	Пояснение = НСтр("ru = '- дополнительный рабочий центр';
					|en = '- additional work center'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаДополнительныйРабочийЦентр");
	ДобавитьВОписаниеКартинкуОбъекта(Форма, ГруппаОписание, "КартинкаДополнительныйРабочийЦентр", Картинка);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеДополнительныйРабочийЦентр", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеМоделиПланирования(Форма, Родитель)
	
	Картинка = КартинкаМодельПланирования();
	Пояснение = НСтр("ru = '- модель планирования';
					|en = '- planning model'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаМодельПланирования");
	ДобавитьВОписаниеКартинкуОбъекта(Форма, ГруппаОписание, "КартинкаМодельПланирования", Картинка);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеМодельПланирования", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВОбозначенияЛегендуЦветовОпераций(Форма, ГруппаОбозначения)
	
	ГруппаЛегенда = ДобавитьВФормуГруппуЛегенда(Форма, ГруппаОбозначения, "ГруппаЛегендаЦветаОпераций");
	
	ДобавитьЛегендуОперацийОбработкиИСборки(Форма, ГруппаЛегенда);
	ДобавитьЛегендуПрочихОпераций(Форма, ГруппаЛегенда);
	
КонецПроцедуры

Процедура ДобавитьЛегендуОперацийОбработкиИСборки(Форма, Родитель)
	
	ИмяГруппы = "ГруппаЛегендаЦветаОперацийОбработкаСборка";
	ЗаголовокГруппы = НСтр("ru = 'Операции обработки и сборки';
							|en = 'Operations of processing and kitting'");
	ГруппаЛегендаЦветов = ДобавитьВФормуГруппуЛегендаЦветов(Форма, Родитель, ИмяГруппы, ЗаголовокГруппы);
	
	ГруппаНеНачатоПараллЗагрузка = ДобавитьВФормуГруппуНеНачатоПараллельнаяЗагрузка(Форма, ГруппаЛегендаЦветов);
	ДобавитьВЛегендуОписаниеЦветаНеНачато(Форма, ГруппаНеНачатоПараллЗагрузка);
	ДобавитьВЛегендуОписаниеЦветаПараллельнаяЗагрузка(Форма, ГруппаНеНачатоПараллЗагрузка);
	
	ДобавитьВЛегендуОписаниеЦветаНачато(Форма, ГруппаЛегендаЦветов);
	ДобавитьВЛегендуОписаниеЦветаЗавершено(Форма, ГруппаЛегендаЦветов);
	
КонецПроцедуры

Процедура ДобавитьЛегендуПрочихОпераций(Форма, Родитель)
	
	ИмяГруппы = "ГруппаЛегендаЦветаПрочиеОперации";
	ЗаголовокГруппы = НСтр("ru = 'Прочие операции';
							|en = 'Other operations'");
	ГруппаЛегендаЦветов = ДобавитьВФормуГруппуЛегендаЦветов(Форма, Родитель, ИмяГруппы, ЗаголовокГруппы);
	
	ДобавитьВЛегендуОписаниеЦветаПереналадка(Форма, ГруппаЛегендаЦветов);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
		ДобавитьВЛегендуОписаниеЦветаРемонт(Форма, ГруппаЛегендаЦветов);
	Иначе
		ДобавитьВГруппуОтступ(Форма, ГруппаЛегендаЦветов, "ДекорацияОтступРемонт");
	КонецЕсли;
	
	ДобавитьВГруппуОтступ(Форма, ГруппаЛегендаЦветов, "ДекорацияОтступПрочиеОперации");
	
КонецПроцедуры

Функция ДобавитьВФормуГруппуЛегенда(Форма, Родитель, ИмяГруппы)
	
	Результат = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Отображение = ОтображениеОбычнойГруппы.Нет;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Результат.ОтображатьЗаголовок = Ложь;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВФормуГруппуЛегендаЦветов(Форма, Родитель, ИмяГруппы, ЗаголовокГруппы)
	
	Результат = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	
	Результат.Заголовок = ЗаголовокГруппы;
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Результат.ОтображатьЗаголовок = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВФормуГруппуНеНачатоПараллельнаяЗагрузка(Форма, Родитель)
	
	ИмяГруппы = "ГруппаЛегендаЦветаОперацийНеНачатоПараллельнаяЗагрузка";
	Результат = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Отображение = ОтображениеОбычнойГруппы.Нет;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Результат.ОтображатьЗаголовок = Ложь;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВЛегендуОписаниеЦветаНеНачато(Форма, Родитель)
	
	Состояние = ТекстРабота();
	Выполнение = Перечисления.СтатусыВыполненияОпераций.НеНачато;
	Цвет = ЦветИнтервала(Состояние, Выполнение);
	
	Пояснение = НСтр("ru = 'Выполнение не начато';
					|en = 'Execution is not started'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаВыполнениеНеНачато");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветВыполнениеНеНачато", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеВыполнениеНеНачато", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеЦветаПараллельнаяЗагрузка(Форма, Родитель)
	
	Состояние = ТекстРабота();
	Цвет = ЦветИнтервала(Состояние,, Истина);
	
	Пояснение = НСтр("ru = 'Параллельная загрузка';
					|en = 'Parallel load'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаПараллельнаяЗагрузка");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветПараллельнаяЗагрузка", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеПараллельнаяЗагрузка", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеЦветаНачато(Форма, Родитель)
	
	Состояние = ТекстРабота();
	Выполнение = Перечисления.СтатусыВыполненияОпераций.Начато;
	Цвет = ЦветИнтервала(Состояние, Выполнение);
	
	Пояснение = НСтр("ru = 'Выполнение начато';
					|en = 'Execution is started'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаВыполнениеНачато");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветВыполнениеНачато", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеВыполнениеНачато", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеЦветаЗавершено(Форма, Родитель)
	
	Состояние = ТекстРабота();
	Выполнение = Перечисления.СтатусыВыполненияОпераций.Завершено;
	Цвет = ЦветИнтервала(Состояние, Выполнение);
	
	Пояснение = НСтр("ru = 'Выполнение завершено';
					|en = 'Execution is completed'");
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаВыполнениеЗавершено");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветВыполнениеЗавершено", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеВыполнениеЗавершено", Пояснение);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеЦветаПереналадка(Форма, Родитель)
	
	Состояние = ТекстПереналадка();
	Цвет = ЦветИнтервала(Состояние);
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаПереналадка");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветПереналадка", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеПереналадка", Состояние);
	
КонецПроцедуры

Процедура ДобавитьВЛегендуОписаниеЦветаРемонт(Форма, Родитель)
	
	Состояние = ТекстРемонт();
	Цвет = ЦветИнтервала(Состояние);
	
	ГруппаОписание = ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, "ГруппаРемонт");
	ДобавитьВОписаниеПредставлениеЦвета(Форма, ГруппаОписание, "ЦветРемонт", Цвет);
	ДобавитьВОписаниеПояснениеОбъекта(Форма, ГруппаОписание, "ПояснениеРемонт", Состояние);
	
КонецПроцедуры

Функция ДобавитьВФормуГруппуОписаниеОбъекта(Форма, Родитель, ИмяГруппы)
	
	Результат = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.Отображение = ОтображениеОбычнойГруппы.Нет;
	Результат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Результат.ОтображатьЗаголовок = Ложь;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВОписаниеКартинкуОбъекта(Форма, Родитель, ИмяЭлемента, Картинка)
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
	
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = Картинка;
	НовыйЭлемент.Ширина = 2;
	НовыйЭлемент.Высота = 1;
	
КонецПроцедуры

Процедура ДобавитьВОписаниеПояснениеОбъекта(Форма, Родитель, ИмяЭлемента, Пояснение)
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
	
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Пояснение;
	
КонецПроцедуры

Процедура ДобавитьВОписаниеПредставлениеЦвета(Форма, Родитель, ИмяЭлемента, Цвет)
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
	
	НовыйЭлемент.Заголовок = НСтр("ru = 'Цвет';
									|en = 'Color'");
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.ЦветТекста = Цвет;
	НовыйЭлемент.ЦветФона = Цвет;
	НовыйЭлемент.ЦветРамки = WebЦвета.Черный;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	
КонецПроцедуры

Процедура ДобавитьВГруппуОтступ(Форма, Родитель, ИмяЭлемента)
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПараллельнойЗагрузки

Процедура РасшифроватьПараллельнуюЗагрузку(Параметры, ДиаграммаГанта)
	
	ДанныеРасписания = ДанныеПараллельноЗагруженногоИнтервала(Параметры);
	ВывестиРасписаниеПараллельнойЗагрузкиВДиаграмму(Параметры, ДиаграммаГанта, ДанныеРасписания);
	ОформитьДиаграммуПараллельнойЗагрузки(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

Функция ДанныеПараллельноЗагруженногоИнтервала(Параметры)
	
	ТекстЗапроса = ТекстЗапросаРасшифровкаПараллельнойЗагрузки();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начало", Параметры.Начало);
	Запрос.УстановитьПараметр("Окончание", Параметры.Окончание);
	Запрос.УстановитьПараметр("РабочийЦентр", Параметры.РабочийЦентр);
	Запрос.УстановитьПараметр("МодельРасписания", Параметры.МодельРасписания);
	Запрос.УстановитьПараметр("МодельПланирования", Параметры.МодельПланирования);
	
	Запрос.УстановитьПараметр("Подразделения", Параметры.Подразделения);
	Запрос.УстановитьПараметр("ОтборПодразделения", ЗначениеЗаполнено(Параметры.Подразделения));
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("ТекстПереналадка", ТекстПереналадка());
	Запрос.УстановитьПараметр("ТекстРабота", ТекстРабота());
	Запрос.УстановитьПараметр("ТекстРемонт", ТекстРемонт());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстЗапросаРасшифровкаПараллельнойЗагрузки()
	
	Результат = 
	"ВЫБРАТЬ
	|	ПооперационноеРасписание.МодельПланирования,
	|	ПооперационноеРасписание.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ПооперационноеРасписание.МаршрутныйЛист КАК Расшифровка,
	|	ПооперационноеРасписание.МаршрутныйЛист.Номер,
	|	ПооперационноеРасписание.МаршрутныйЛист.Дата,
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ПооперационноеРасписание.Загрузка,
	|	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра.ЕдиницаИзмеренияЗагрузки КАК ЕдиницаИзмеренияЗагрузки,
	|	ПооперационноеРасписание.СтатусВыполнения,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутовПроизводства.Операция ССЫЛКА Справочник.ТехнологическиеОперации
	|			ТОГДА ВЫРАЗИТЬ(ОперацииМаршрутовПроизводства.Операция КАК Справочник.ТехнологическиеОперации).Представление
	|		ИНАЧЕ ОперацииМаршрутовПроизводства.Операция
	|	КОНЕЦ КАК ОперацияПредставление,
	|	ВЫБОР
	|		КОГДА ПооперационноеРасписание.ЭтоПереналадка
	|			ТОГДА &ТекстПереналадка
	|		ИНАЧЕ &ТекстРабота
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ПооперационноеРасписание.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|			ТОГДА ПооперационноеРасписание.СтатусВыполнения
	|		КОГДА ОперацииМаршрутовПроизводства.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	|				ИЛИ ОперацииМаршрутовПроизводства.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ПооперационноеРасписание.Начало > &ТекущаяДата
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|					КОГДА ПооперационноеРасписание.Начало <= &ТекущаяДата
	|							И ПооперационноеРасписание.Окончание > &ТекущаяДата
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|	КОНЕЦ КАК Выполнение,
	|	ЛОЖЬ КАК ПараллельнаяЗагрузка
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ПооперационноеРасписание.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации
	|ГДЕ
	|	ПооперационноеРасписание.Начало >= &Начало
	|	И ПооперационноеРасписание.Окончание <= &Окончание
	|	И ПооперационноеРасписание.РабочийЦентр = &РабочийЦентр
	|	И ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.МодельПланирования = &МодельПланирования
	|	И (НЕ &ОтборПодразделения
	|			ИЛИ ПооперационноеРасписание.Подразделение В (&Подразделения))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	Окончание,
	|	ПооперационноеРасписание.МаршрутныйЛист.МоментВремени
	|ИТОГИ ПО
	|	МаршрутныйЛист";
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиРасписаниеПараллельнойЗагрузкиВДиаграмму(Параметры, ДиаграммаГанта, ДанныеРасписания)
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	
	Серия = СерияПоУмолчанию(ДиаграммаГанта);
	
	ВыборкаМаршрутныеЛисты = ДанныеРасписания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМаршрутныеЛисты.Следующий() Цикл
		
		ТочкаМаршрутныйЛист = ТочкаДиаграммыМаршрутныйЛист(ВыборкаМаршрутныеЛисты, ДиаграммаГанта);
		Значение = ДиаграммаГанта.ПолучитьЗначение(ТочкаМаршрутныйЛист, Серия);
		
		Выборка = ВыборкаМаршрутныеЛисты.Выбрать();
		Пока Выборка.Следующий() Цикл
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.Начало;
			Интервал.Конец = Выборка.Окончание;
			Интервал.Цвет = ЦветИнтервалаДиаграммы(Параметры, Выборка);
			Интервал.Текст = ПодсказкаИнтервала(Выборка);
			Интервал.Расшифровка = РасшифровкаИнтервала(Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры

Функция ТочкаДиаграммыМаршрутныйЛист(Знач ЗначенияЗаполнения, ДиаграммаГанта)
	
	Результат = ДиаграммаГанта.УстановитьТочку(ЗначенияЗаполнения.МаршрутныйЛист);
	Результат.Текст = ПредставлениеМаршрутногоЛиста(ЗначенияЗаполнения.МаршрутныйЛистНомер, ЗначенияЗаполнения.МаршрутныйЛистДата);
	Результат.Расшифровка = ЗначенияЗаполнения.МаршрутныйЛист;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеМаршрутногоЛиста(Номер, Дата)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Маршрутный лист №%1 от %2';
			|en = 'Route sheet No. %1 from %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
		Формат(Дата, "ДЛФ=D"));
	
КонецФункции

Процедура ОформитьДиаграммуПараллельнойЗагрузки(Параметры, ДиаграммаГанта)
	
	УстановитьОбщиеСвойстваДиаграммы(ДиаграммаГанта);
	УстановитьПериодичностьДиаграммы(Параметры, ДиаграммаГанта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21