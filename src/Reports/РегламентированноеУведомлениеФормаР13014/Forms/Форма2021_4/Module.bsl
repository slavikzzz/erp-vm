#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СпособПодачиДокументов = "ИФНСэлектронноОнлайн";
	ФорматОтправкиДокументов = "XML";
	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	Строка_2000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(2000));
	
	Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	Элементы.ГруппаПанельОтправки.Видимость = Ложь;
	
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР13014;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложения.СформироватьСпискиВыбора(ЭтотОбъект, "СпискиВыбора2021_4");
	ЭтотОбъект["РазделительНомераСтроки"] = "_";
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СформироватьДеревоСтраниц();
		СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		УведомлениеОСпецрежимахНалогообложения.ЗагрузитьДанныеПростогоУведомления(
			ЭтотОбъект, Данные, ПредставлениеУведомления);
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Организация = Параметры.Ключ.Организация;
		ЗагрузитьДанные(Параметры.Ключ);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Организация = Параметры.ЗначениеКопирования.Организация;
		ЗагрузитьДанные(Параметры.ЗначениеКопирования);
		
	Иначе
		Параметры.Свойство("Организация", Объект.Организация);
		Объект.РегистрацияВИФНС =
			Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		СформироватьДеревоСтраниц();
		СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		ЗаполнитьНачальныеДанные();
	КонецЕсли;
	
	УведомлениеОСпецрежимахНалогообложения.ЗаполнитьТаблицуФорматов(ЭтотОбъект, "Форматы2021_4");
	ИдДляСвор = УведомлениеОСпецрежимахНалогообложенияСлужебный.ПолучитьИдентификаторыДляСворачивания(ЭтотОбъект);
	ЭтотОбъект["СворачиваемыеЭлементы"] = ПоместитьВоВременноеХранилище(ИдДляСвор);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "РегистрацияЮЛФНС");
	Заголовок = УведомлениеОСпецрежимахНалогообложения.ДополнитьЗаголовокУведомления(Заголовок, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохраненныеДанныеУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
		УведомлениеЗаполненоВПомощнике = СохраненныеДанныеУведомления.Свойство("ДанныеПомощникаЗаполнения") 
			И ТипЗнч(СохраненныеДанныеУведомления.ДанныеПомощникаЗаполнения) = Тип("Структура")
			И ЗначениеЗаполнено(СохраненныеДанныеУведомления.ДанныеПомощникаЗаполнения);
	Иначе
		УведомлениеЗаполненоВПомощнике = Ложь;
	КонецЕсли;
	
	ИнтернетПоддержкаПодключена = ОбщегоНазначения.РазделениеВключено();
	Если Не ИнтернетПоддержкаПодключена
		И Не Элементы.ПредставлениеУведомления.ТолькоПросмотр 
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда 
		
		ДанныеИнтернетПоддержки = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		ИнтернетПоддержкаПодключена = ТипЗнч(ДанныеИнтернетПоддержки) = Тип("Структура")
			И ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИнтернетПоддержки, "Логин"))
			И ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеИнтернетПоддержки, "Пароль"));
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	УчредительныйДокумент = РегистрационныеФормыКлиентСервер.ПредставлениеЗаполненногоПоляПриложенныхФайлов(Объект.Ссылка, "УчредительныйДокумент");
	ИныеДокументы = РегистрационныеФормыКлиентСервер.ПредставлениеЗаполненногоПоляПриложенныхФайлов(Объект.Ссылка, "ИныеДокументы");
	СканЗаявление = РегистрационныеФормыКлиентСервер.ПредставлениеЗаполненногоПоляПриложенныхФайлов(Объект.Ссылка, "СканЗаявление");
	СканПротокол = РегистрационныеФормыКлиентСервер.ПредставлениеЗаполненногоПоляПриложенныхФайлов(Объект.Ссылка, "СканПротокол");
	СканРешение = РегистрационныеФормыКлиентСервер.ПредставлениеЗаполненногоПоляПриложенныхФайлов(Объект.Ссылка, "СканРешение");
	ПриИзмененииОпцийСдачи(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеДанные() Экспорт 
	ДанныеУведомленияТитульный = ЭтотОбъект["ДанныеУведомления"]["Лист001"];
	Объект.ДатаПодписи = ТекущаяДатаСеанса();
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Объект.Организация, Объект.ДатаПодписи, "ИННЮЛ,ОГРН");
	ДанныеУведомленияТитульный.Вставить("П01010200", СведенияОбОрганизации.ИННЮЛ);
	ДанныеУведомленияТитульный.Вставить("П01010100", СведенияОбОрганизации.ОГРН);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаОповещенияНавигацииПоОшибкам(
			ЭтотОбъект, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрирующийОрганКодНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Строки = ЭтотОбъект["СпискиВыбора"].НайтиСтроки(Новый Структура("ИДНаименования,ИмяПоля", "РегистрирующиеОрганы", "РегистрирующиеОрганы"));
	ЭтотОбъект["ЗагружаемыеКоды"].Очистить();
	Для Каждого Стр Из Строки Цикл 
		НовСтр = ЭтотОбъект["ЗагружаемыеКоды"].Добавить();
		НовСтр.Код = Стр.Код;
		НовСтр.Название = Стр.Наименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Выбор налогового органа");
	ПараметрыФормы.Вставить("ТаблицаЗначений", ЭтотОбъект["ЗагружаемыеКоды"]);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", РегистрирующийОрганКод));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, Неопределено);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РегистрацияЮЛФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что уведомление уже сдано?';
													|en = 'Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "РегистрацияЮЛФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "РегистрацияЮЛФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "РегистрацияЮЛФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеЗаполненоВПомощникеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВнесениеИзмененийЕГР" Тогда
		СтандартнаяОбработка = Ложь;
		
		МодульРегистрацияОрганизацииКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацияОрганизацииКлиентСервер");
		ПараметрыПомощника = МодульРегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
		ПараметрыПомощника.Организация = Объект.Организация;
		ПараметрыПомощника.КонтекстныйВызов = Истина;
		
		МодульРегистрацияОрганизацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацияОрганизацииКлиент");
		МодульРегистрацияОрганизацииКлиент.ОткрытьПомощникВнесенияИзменений(ПараметрыПомощника);
		
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьУведомлениеЗаполненоВПомощникеНажатие(Элемент)
	
	УведомлениеЗаполненоВПомощнике = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставлениеФорматов(ПредставлениеУведомления)
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			Или Не Обл.СодержитЗначение = Истина
			Или Не СтрНачинаетсяС(Обл.Имя, "ВыводитьНоль_") Тогда
			
			Продолжить;
		КонецЕсли;
		
		Разделение = СтрРазделить(Обл.Имя, "_");
		Для Инд = 1 По Разделение.ВГраница() Цикл 
			ОблДляУстановки = ПредставлениеУведомления.Области.Найти(Разделение[Инд]);
			Если ЗначениеЗаполнено(Обл.Значение) Тогда 
				ОблДляУстановки.Формат = ОблДляУстановки.Формат + "ЧН=0"
			Иначе
				ОблДляУстановки.Формат = СтрЗаменить(ОблДляУстановки.Формат, "ЧН=0", "");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	ИмяОбласти = Область.Имя;
	Если СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтроку") Тогда
		ДобавитьСтроку(Неопределено);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "УдалитьСтроку") Тогда
		УдалитьСтроку(Неопределено);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтраницу") Тогда
		ДобавитьСтраницу(Неопределено);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "УдалитьСтраницу") Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.УдалитьСтраницу(ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ИмяОбласти, "ВыводитьНоль_") Тогда
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
		ПроставлениеФорматов(ПредставлениеУведомления);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект["РучнойВвод"] Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Б0101") = 1 ИЛИ СтрНайти(ИмяОбласти, "Б0102") = 1
	 ИЛИ СтрНайти(ИмяОбласти, "Л0104") = 1 И ИмяОбласти <> "Л01040100" И ИмяОбласти <> "Л01041100" Тогда
		ОбработкаАдреса(Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыбор(
			ЭтотОбъект, Область, СтандартнаяОбработка, Истина, Истина);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыборКодЗнач(
			ЭтотОбъект, Область, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
	Если СтандартнаяОбработка И ЭтоОбластьОКСМ(Область) Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.ВыборКодаСтраныИзСправочника(ЭтотОбъект, Область, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриАктивизации(Элемент)
	
	Область = Элемент.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Элементы.ПредставлениеУведомленияКонтекстноеМенюОчиститьОКСМ.Доступность = ЭтоОбластьОКСМ(Область);
	Иначе
		Элементы.ПредставлениеУведомленияКонтекстноеМенюОчиститьОКСМ.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьКонтекстноеМенюПредставленияУведомления(ИмяОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСтраниц

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтроки(Элемент)
	Если УведомлениеОСпецрежимахНалогообложенияКлиент.НеобходимоФормированиеТабличногоДокумента(ЭтотОбъект, Элемент, ЭтотОбъект["УИДПереключение"]) Тогда
		ОтключитьОбработчикОжидания("ДеревоСтраницПриАктивизацииСтрокиЗавершение");
		ПодключитьОбработчикОжидания("ДеревоСтраницПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтрокиЗавершение() Экспорт 
	ПредУИД = ЭтотОбъект["УИДПереключение"];
	Элемент = Элементы.ДеревоСтраниц;
	
	Если Элемент.ТекущиеДанные.Многостраничность Тогда
		ИмяМакета = УведомлениеОСпецрежимахНалогообложенияКлиент.ПолучитьИмяВыводимогоМакета(Элемент.ТекущиеДанные);
		ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, УведомлениеОСпецрежимахНалогообложенияКлиент.ПолучитьМногострочныеЧасти(Элемент.ТекущиеДанные), ПредУИД);
	Иначе
		ПоказатьТекущуюСтраницу(Элемент.ТекущиеДанные.ИмяМакета, Элемент.ТекущиеДанные.МногострочныеЧасти, ПредУИД);
	КонецЕсли;
	ПроставлениеФорматов(ПредставлениеУведомления);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ДобавитьСтраницуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "РегистрацияЮЛФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "РегистрацияЮЛФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОКСМ(Команда)
	
	ПредставлениеУведомления.ТекущаяОбласть.Значение = Неопределено;
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(
		ЭтотОбъект, ПредставлениеУведомления.ТекущаяОбласть, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОчиститьУведомление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, , Ложь, ЭтотОбъект["СтруктураРеквизитовУведомления"].СписокПечатаемыхЛистов);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	Если ДоступнаПечатьPDF417(ИмяФормы) Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахПоСсылке(ЭтотОбъект, Объект.Ссылка);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.';
									|en = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПроверитьВыгрузку(ЭтотОбъект, ПроверитьВыгрузкуНаСервере());
КонецПроцедуры

&НаКлиенте
Процедура РучнойВвод(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаРучнойВвод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда) Экспорт 
	
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу() Экспорт
	
	ЭтотОбъект["УдалениеСтраницы"] = Истина;
	УдалитьСтраницуНаСервере();
	ЭтотОбъект["УдалениеСтраницы"] = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Область = Элементы.ПредставлениеУведомления.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда
		ИмяОбластиДобавленияСтроки = ИмяОбласти;
		ИдМСЧ = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
		ИдМСЧ = СтрЗаменить(ИдМСЧ, "Значок", "");
	Иначе
		ПолноеИмяМСЧ = ПолноеИмяМСЧПоПоказателю(ИмяОбласти);
		ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
		ИмяОбластиДобавленияСтроки = "ДобавитьСтроку" + ИдМСЧ;
	КонецЕсли;
	
	ПроверкаМаксимумаСтрок = ПроверитьДостижениеМаксимальногоКоличестваСтрок(ИдМСЧ);
	
	Если ПроверкаМаксимумаСтрок.ДостигнутМаксимум Тогда
		ПоказатьПредупреждение( , ПроверкаМаксимумаСтрок.ТекстПредупреждения);
	Иначе
		ДобавитьСтрокуНаСервере(ИмяОбластиДобавленияСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьСтроку(Команда)
	Область = Элементы.ПредставлениеУведомления.ТекущаяОбласть;
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда
		ИмяОбластиУдаленияСтроки = ИмяОбласти;
	Иначе
		ПолноеИмяМСЧ = ПолноеИмяМСЧПоПоказателю(ИмяОбласти);
		ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
		Постфикс = Сред(ИмяОбласти, СтрНайти(ИмяОбласти, ЭтотОбъект["РазделительНомераСтроки"]));
		ИмяОбластиУдаленияСтроки = "УдалитьСтроку" + ИдМСЧ + Постфикс;
	КонецЕсли;
	
	Если НЕ ПредставлениеУведомления.Области[ИмяОбластиУдаленияСтроки].Гиперссылка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ждать ВопросАсинх("Удалить выбранную строку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуНаСервере(ИмяОбластиУдаленияСтроки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияСтруктурДанных

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхУведомленияНовогоОбразца(Форма)
	
	Форма.ДанныеУведомления = Новый Структура;
	Форма.ДанныеМногостраничныхРазделов = Новый Структура;
	Форма.ДанныеДопСтрок = Новый Структура;
	Форма.ДанныеДопСтрокСтраницы = Новый Структура;
	Форма.ИдентификаторыОбычныхСтраниц = Новый Структура;
	
	Разложение = СтрРазделить(Форма.ИмяФормы, ".", Ложь);
	ИдОтчета = Разложение[1];
	
	Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
		Если Стр.Многостраничность Тогда
			СформироватьСтруктуруДанныхМногостраничногоРаздела(Форма, ИдОтчета, Стр);
		Иначе
			СформироватьСтруктуруДанныхОбычногоРаздела(Форма, ИдОтчета, Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, Строка)
	Для Каждого ПодчМнг Из Строка.ПолучитьЭлементы() Цикл
		Если ПодчМнг.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИмяОтчета, ПодчМнг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодчМнг.ИДНаименования) Тогда
			Если ПодчМнг.Многострочность Тогда
				Для Каждого МногострочныйЭлемент Из ПодчМнг.МногострочныеЧасти Цикл
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("УИД");
					СтрокаДанных = Новый Структура;
					МакетМногострочки = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, ПодчМнг.ИмяМакета).ПолучитьОбласть("Str_"+МногострочныйЭлемент.Значение);
					Для Каждого Обл Из МакетМногострочки.Области Цикл 
						Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
							И Обл.СодержитЗначение Тогда 
							
							ТЗ.Колонки.Добавить(Обл.Имя);
							СтрокаДанных.Вставить(Обл.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(СтрокаДанных);
					Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураМногостраничнойСтраницыПодч = Новый Структура("УИД, УИДРодителя", ПодчМнг.УИД, УведомлениеОСпецрежимахНалогообложения.ПолучитьУИДРодителя(ПодчМнг));
			МакетДокумента = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, ПодчМнг.ИмяМакета);
			Для Каждого Обл Из МакетДокумента.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
					И Обл.СодержитЗначение Тогда 
					
					СтруктураМногостраничнойСтраницыПодч.Вставить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтруктураМногостраничнойСтраницыПодч);
			Форма.ЭтотОбъект["ДанныеМногостраничныхРазделов"].Вставить(ПодчМнг.ИДНаименования, СЗ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхОбычногоРаздела(Форма, ИдОтчета, Стр)
	
	Форма.ИдентификаторыОбычныхСтраниц.Вставить(Стр.ИДНаименования, Стр.УИД);
	
	Если Стр.Многострочность Тогда
		СтруктураСтраницы = Новый Структура;
		МакетДокумента = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета);
		
		ОбластиМСЧ = Новый Массив;
		
		Для Каждого МногострочныйЭлемент Из Стр.МногострочныеЧасти Цикл
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("УИД");
			СтрокаДанных = Новый Структура;
			МакетМСЧ = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета).ПолучитьОбласть(МногострочныйЭлемент.Значение);
			Для Каждого Обл Из МакетМСЧ.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И Обл.СодержитЗначение Тогда
					ТЗ.Колонки.Добавить(Обл.Имя);
					СтрокаДанных.Вставить(Обл.Имя);
					ОбластиМСЧ.Добавить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Форма.ДанныеДопСтрок.Вставить(
				МногострочныйЭлемент.Значение, ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтрокаДанных);
			Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
			
		КонецЦикла;
		
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение
			   И ОбластиМСЧ.Найти(Обл.Имя) = Неопределено Тогда
				СтруктураСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
		
	Иначе
		СтруктураСтраницы = Новый Структура;
		
		МакетДокумента = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, Стр.ИмяМакета);
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение Тогда 
				СтруктураСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Форма.ДанныеУведомления.Вставить(Стр.ИДНаименования, СтруктураСтраницы);
		
		Для Каждого МнгСтр Из Стр.ПолучитьЭлементы() Цикл
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСтруктуруДанныхМногостраничногоРаздела(Форма, ИдОтчета, Стр)
	
	Если Стр.Многострочность Тогда
		МнгСтр = Стр.ПолучитьЭлементы()[0];
		МакетДокумента = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета);
		
		ОбластиМСЧ = Новый Массив;
		
		Для Каждого МногострочныйЭлемент Из МнгСтр.МногострочныеЧасти Цикл
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("УИД");
			СтрокаДанных = Новый Структура;
			МакетМногострочки = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета).ПолучитьОбласть(МногострочныйЭлемент.Значение);
			Для Каждого Обл Из МакетМногострочки.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И Обл.СодержитЗначение Тогда
					ТЗ.Колонки.Добавить(Обл.Имя);
					СтрокаДанных.Вставить(Обл.Имя);
					ОбластиМСЧ.Добавить(Обл.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Форма.ДанныеДопСтрок.Вставить(МногострочныйЭлемент.Значение,
				ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор));
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(СтрокаДанных);
			Форма.ДанныеДопСтрокСтраницы.Вставить(МногострочныйЭлемент.Значение, СЗ);
			
		КонецЦикла;
		
		СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
		Для Каждого Обл Из МакетДокумента.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение
			   И ОбластиМСЧ.Найти(Обл.Имя) = Неопределено Тогда
				СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЕсли;
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(СтруктураМногостраничнойСтраницы);
		Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
		
	Иначе
		МнгСтр = Стр.ПолучитьЭлементы()[0];
		
		СтруктураМногостраничнойСтраницы = Новый Структура("УИД", МнгСтр.УИД);
		МакетДокумента = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(Форма, МнгСтр.ИмяМакета);
		Для Каждого Обл Из МакетДокумента.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Обл.СодержитЗначение Тогда
				СтруктураМногостраничнойСтраницы.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МнгСтр.ПолучитьЭлементы().Количество() > 0 Тогда
			СформироватьСтруктуруДанныхУведомленияРекНовогоОбразца(Форма, ИдОтчета, МнгСтр);
		КонецЕсли;
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(СтруктураМногостраничнойСтраницы);
		Форма.ДанныеМногостраничныхРазделов.Вставить(МнгСтр.ИДНаименования, СЗ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Форма.Элементы.ГруппаУведомлениеИзПомощника.Видимость = Форма.УведомлениеЗаполненоВПомощнике;
	Форма.Элементы.ГруппаПодписаниеИОтправка.Видимость = (Форма.ИнтернетПоддержкаПодключена И Не Форма.УведомлениеЗаполненоВПомощнике);
	Форма.Элементы.ГруппаПодписаниеИОтправка.ТолькоПросмотр = Форма.УведомлениеЗаполненоВПомощнике;
	
	ВозможностьОтправки = (Форма.ИнтернетПоддержкаПодключена И Не Форма.УведомлениеЗаполненоВПомощнике);
	Форма.Элементы.РегистрирующийОрганКод.Видимость = ВозможностьОтправки;
	Форма.Элементы.ГруппаСпособПодачиДокументов.Видимость = ВозможностьОтправки;
	Форма.Элементы.ГруппаФорматОтправкиДокументов.Видимость = ВозможностьОтправки;
	Форма.Элементы.ГруппаСпособПолученияДокументов.Видимость = ВозможностьОтправки;
	Форма.Элементы.ПрикрепленныеФайлы.Видимость = ВозможностьОтправки;
	Форма.Элементы.ЗаголовокФормированиеТранспортногоКонтейнера.Видимость = ВозможностьОтправки 
		И Форма.СпособПодачиДокументов = РегистрационныеФормыКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно;
	Форма.Элементы.ГруппаФормированиеТранспортногоКонтейнера.Видимость = ВозможностьОтправки 
		И Форма.СпособПодачиДокументов = РегистрационныеФормыКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно;
	Форма.Элементы.ГруппаОтправкаДокументовОнлайн.Видимость = ВозможностьОтправки 
		И Форма.СпособПодачиДокументов = РегистрационныеФормыКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКонтекстноеМенюПредставленияУведомления(ИмяОбласти)
	
	ЭтоПоказательМСЧ = СтрНайти(ИмяОбласти, "А010201") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "А010202") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "Б010207") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "К010102") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "К010202") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "Л010408") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "М010101") = 1
	               ИЛИ СтрНайти(ИмяОбласти, "О010101") = 1;
	
	ЭтоЕдинственнаяСтрока = Истина;
	Если ЭтоПоказательМСЧ Тогда
		ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, ЭтотОбъект["РазделительНомераСтроки"]) - 1);
		ИмяПоказателяВторойСтроки = ИмяБезПостфикса + "_2";
		ЭтоЕдинственнаяСтрока = (ПредставлениеУведомления.Области.Найти(ИмяПоказателяВторойСтроки) = Неопределено);
	КонецЕсли;
	
	Элементы.ПредставлениеУведомленияКонтекстноеМенюДобавитьСтроку.Доступность = ЭтоПоказательМСЧ;
	Элементы.ПредставлениеУведомленияКонтекстноеМенюУдалитьСтроку.Доступность =
		ЭтоПоказательМСЧ И НЕ ЭтоЕдинственнаяСтрока;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		РегистрирующийОрганКод = РезультатВыбора.Код;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД)
	
	Если Не ЭтотОбъект["УдалениеСтраницы"] И ЭтотОбъект["ТекущиеМногострочныеЧасти"].Количество() > 0 Тогда
		УведомлениеОСпецрежимахНалогообложения.СобратьДанныеМногострочныхЧастейТекущейСтраницы(
					ЭтотОбъект, ЭтотОбъект["ТекущиеМногострочныеЧасти"], ПредУИД);
	КонецЕсли;
	
	ЭтотОбъект["ТекущиеМногострочныеЧасти"] = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(МногострочныеЧасти);
	
	ПредставлениеУведомления.Очистить();
	ЭтотОбъект["ТекущийМакет"] = ИмяМакета;
	Макет = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, ИмяМакета);
	СкрытьСлужебныеОбласти(Макет);
	УстановитьФорматыВПрочихПолях(Макет);
	
	ПредставлениеУведомления.Вывести(Макет);
	УведомлениеОСпецрежимахНалогообложения.УстановитьФорматыВПолях(ЭтотОбъект);
	
	СтрДанных = ЭтотОбъект["ДанныеУведомления"][ЭтотОбъект["ТекущееИДНаименования"]];
	
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.СодержитЗначение Тогда
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти);
	УведомлениеОСпецрежимахНалогообложения.ПозиционироватьсяНаЯчейке(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СкрытьСлужебныеОбласти(Макет)
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
	
	СкрываемаяОбласть = Макет.Области.Найти("СкрытьПриОткрытии1");
	Если СкрываемаяОбласть <> Неопределено Тогда
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЕсли;
	
	СкрываемаяОбласть = Макет.Области.Найти("СкрытьПриОткрытии2");
	Если СкрываемаяОбласть <> Неопределено Тогда
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматыВПрочихПолях(Макет)
	
	Если ЭтотОбъект["ТекущееИДНаименования"] = "ЛистМ" Тогда
		Макет.Области.М01010100.ТипЗначения = Строка_2000;
	ИначеЕсли ЭтотОбъект["ТекущееИДНаименования"] = "ЛистО" Тогда
		Макет.Области.О01010100.ТипЗначения = Строка_2000;
	КонецЕсли;
	
КонецПроцедуры

#Область Многостраничность

&НаСервере
Процедура ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД)
	
	Если Не ЭтотОбъект["УдалениеСтраницы"] И ЭтотОбъект["ТекущиеМногострочныеЧасти"].Количество() > 0 Тогда 
		УведомлениеОСпецрежимахНалогообложения.СобратьДанныеМногострочныхЧастейТекущейСтраницы(
					ЭтотОбъект, ЭтотОбъект["ТекущиеМногострочныеЧасти"], ПредУИД);
	КонецЕсли;
	
	ЭтотОбъект["ТекущиеМногострочныеЧасти"] = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(МногострочныеЧасти);
	
	ПредставлениеУведомления.Очистить();
	ЭтотОбъект["ТекущийМакет"] = ИмяМакета;
	Макет = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, ИмяМакета);
	СкрытьСлужебныеОбласти(Макет);
	УстановитьФорматыВПрочихПолях(Макет);
	
	ПредставлениеУведомления.Вывести(Макет);
	УведомлениеОСпецрежимахНалогообложения.УстановитьФорматыВПолях(ЭтотОбъект);
	
	СтрДанных = Неопределено;
	Для Каждого Элт Из ЭтотОбъект["ДанныеМногостраничныхРазделов"][ЭтотОбъект["ТекущееИДНаименования"]] Цикл
		Если Элт.Значение.УИД = ЭтотОбъект["УИДТекущаяСтраница"] Тогда
			СтрДанных = Элт.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	НайденнаяСтрока = НайтиСтрокуВДеревеПоУИД(ДеревоСтраниц.ПолучитьЭлементы(), ЭтотОбъект["УИДТекущаяСтраница"]);
	Если НайденнаяСтрока <> Неопределено
		И НайденнаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницу.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Гиперссылка = Ложь;
		ПредставлениеУведомления.Области.УдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
	ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти);
	УведомлениеОСпецрежимахНалогообложения.ПозиционироватьсяНаЯчейке(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВДеревеПоУИД(Дерево, УИД)
	
	Для Каждого Элемент Из Дерево Цикл
		Если Элемент.УИД = УИД И Не ПустаяСтрока(Элемент.ИДНаименования) Тогда
			Возврат Элемент;
		КонецЕсли;
		
		НайденныйИД = НайтиСтрокуВДеревеПоУИД(Элемент.ПолучитьЭлементы(), УИД);
		Если НайденныйИД <> Неопределено Тогда
			Возврат НайденныйИД;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтраницуНаСервере()
	УведомлениеОСпецрежимахНалогообложения.ДобавитьСтраницуУведомления(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере()
	УведомлениеОСпецрежимахНалогообложения.УдалитьСтраницуНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Многострочность

&НаСервере
Процедура ПоказатьМногострочныеЧасти(Макет, МногострочныеЧасти)
	
	Если ТипЗнч(МногострочныеЧасти) = Тип("СписокЗначений")
	   И МногострочныеЧасти.Количество() > 0 Тогда
		Для Каждого МнгСтр Из МногострочныеЧасти Цикл
			ПолноеИмяМСЧ = МнгСтр.Значение;
			ИдМСЧ = ИдМСЧ(ПолноеИмяМСЧ);
			
			ТЗ = ПолучитьИзВременногоХранилища(ЭтотОбъект["ДанныеДопСтрок"][ПолноеИмяМСЧ]);
			ИсхСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ][0].Значение);
			Для Каждого КЗ Из ИсхСтр Цикл
				ИсхСтр[Кз.Ключ] = Неопределено;
			КонецЦикла;
			
			Строки = ТЗ.НайтиСтроки(Новый Структура("УИД", ЭтотОбъект["УИДТекущаяСтраница"]));
			ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ].Очистить();
			Инд = 0;
			Пока ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ].Количество() < Строки.Количество() Цикл
				ТекСтр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсхСтр);
				ЗаполнитьЗначенияСвойств(ТекСтр, Строки[Инд]);
				ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ].Добавить(ТекСтр);
				Инд = Инд + 1;
			КонецЦикла;
			
			Если ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ].Количество() = 0 Тогда
				ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ].Добавить(ИсхСтр);
			КонецЕсли;
			
			МакетМСЧ = Макет.ПолучитьОбласть(ПолноеИмяМСЧ);
			ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
			
			ПромежуточныйМакет = Новый ТабличныйДокумент;
			Инд = 1;
			Для Каждого Стр Из ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ] Цикл
				МакетМСЧ = Макет.ПолучитьОбласть(ПолноеИмяМСЧ);
				Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
					ОбластьПоказателя = МакетМСЧ.Область(ИмяПоказателя);
					ОбластьПоказателя.Значение = Стр.Значение[ИмяПоказателя];
					ОбластьПоказателя.Имя = ИмяПоказателя + ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(Инд);
				КонецЦикла;
				
				ОбластьУдаленияСтроки = МакетМСЧ.Область("УдалитьСтроку" + ИдМСЧ);
				ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(Инд);
				
				ПромежуточныйМакет.Вывести(МакетМСЧ);
				Инд = Инд + 1;
				
			КонецЦикла;
			
			ИсходнаяОбластьМСЧ = ПредставлениеУведомления.Область(ПолноеИмяМСЧ);
			ПозицияВставки = ИсходнаяОбластьМСЧ.Верх;
			
			ПредставлениеУведомления.УдалитьОбласть(ИсходнаяОбластьМСЧ, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			ПредставлениеУведомления.ВставитьОбласть(
				ПромежуточныйМакет.Область(1, , ПромежуточныйМакет.ВысотаТаблицы),
				ПредставлениеУведомления.Область(ПозицияВставки, , ПозицияВставки, ),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(ИмяОбласти)
	
	ИдМСЧ = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИдМСЧ = СтрЗаменить(ИдМСЧ, "Значок", "");
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	
	ДопСтрокиТекущейСтраницы = ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ];
	НомерДобавляемойСтроки = ДопСтрокиТекущейСтраницы.Количество() + 1;
	НоваяСтрока = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ][0].Значение);
	Для Каждого КЗ Из НоваяСтрока Цикл
		НоваяСтрока[КЗ.Ключ] = Неопределено;
	КонецЦикла;
	ДопСтрокиТекущейСтраницы.Добавить(НоваяСтрока);
	
	МакетМСЧ = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, ЭтотОбъект["ТекущийМакет"]).ПолучитьОбласть(ПолноеИмяМСЧ);
	ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
	ИндСтр = ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(НомерДобавляемойСтроки);
	
	Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
		МакетМСЧ.Области[ИмяПоказателя].Имя = ИмяПоказателя + ИндСтр;
	КонецЦикла;
	ОбластьУдаленияСтроки = МакетМСЧ.Область("УдалитьСтроку" + ИдМСЧ);
	ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + ИндСтр;
	
	ПозицияВставки = ПредставлениеУведомления.Область(ИмяОбласти).Верх;
	ПредставлениеУведомления.ВставитьОбласть(
		МакетМСЧ.Область(1, , МакетМСЧ.ВысотаТаблицы),
		ПредставлениеУведомления.Область(ПозицияВставки, , ПозицияВставки, ),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
	
	ИмяОбластиДляАктивации = ПоказателиМСЧ[0] + ИндСтр;
	Элементы.ПредставлениеУведомления.ТекущаяОбласть = ПредставлениеУведомления.Область(ИмяОбластиДляАктивации);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(ИмяОбласти)
	
	ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, ЭтотОбъект["РазделительНомераСтроки"]) - 1);
	ИдМСЧ = СтрЗаменить(ИмяБезПостфикса, "УдалитьСтроку", "");
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	НомерСтроки = Число(Сред(ИмяОбласти, СтрНайти(ИмяОбласти, ЭтотОбъект["РазделительНомераСтроки"]) + 1));
	
	МногострочнаяЧасть = ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ];
	МногострочнаяЧасть.Удалить(НомерСтроки - 1);
	
	МакетМСЧ = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, ЭтотОбъект["ТекущийМакет"]).ПолучитьОбласть(ПолноеИмяМСЧ);
	ПоказателиМСЧ = ПоказателиМСЧ(МакетМСЧ);
	ВысотаБлокаМСЧ = МакетМСЧ.Область().Низ;
	
	НомерСтрокиМакета = ПредставлениеУведомления.Область(ИмяОбласти).Верх;
	УдаляемаяОбласть = ПредставлениеУведомления.Область(НомерСтрокиМакета, , НомерСтрокиМакета + ВысотаБлокаМСЧ - 1, );
	ПредставлениеУведомления.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Пока Истина Цикл
		ОбластьУдаленияСтроки = ПредставлениеУведомления.Области.Найти(
			"УдалитьСтроку" + ИдМСЧ + ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(НомерСтроки + 1));
		Если ОбластьУдаленияСтроки = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из ПоказателиМСЧ Цикл
			ОбластьПоказателя = ПредставлениеУведомления.Область(ИмяПоказателя + "_" + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(НомерСтроки + 1));
			ОбластьПоказателя.Имя = ИмяПоказателя + ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(НомерСтроки);
		КонецЦикла;
		ОбластьУдаленияСтроки.Имя = "УдалитьСтроку" + ИдМСЧ + ЭтотОбъект["РазделительНомераСтроки"] + РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ);
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ИдМСЧ(ПолноеИмяМСЧ)
	
	Возврат СтрЗаменить(ПолноеИмяМСЧ, "МногострочнаяЧасть", "");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьУдаленияПервойСтроки(ИдМСЧ)
	ПолноеИмяМСЧ = "МногострочнаяЧасть" + ИдМСЧ;
	ДанныеМСЧ = ЭтотОбъект["ДанныеДопСтрокСтраницы"][ПолноеИмяМСЧ];
	УдалениеВозможно = (ДанныеМСЧ.Количество() >= 2);
	
	ОбластьУдаленияСтроки = ПредставлениеУведомления.Область("УдалитьСтроку" + ИдМСЧ + "_1");
	ОбластьУдаленияСтроки.Гиперссылка = УдалениеВозможно;
	ОбластьУдаленияСтроки.Текст = ?(УдалениеВозможно, "х", "");
КонецПроцедуры

&НаСервере
Функция ПоказателиМСЧ(МакетМСЧ)
	
	ПоказателиМСЧ = Новый Массив;
	Для Каждого Область Из МакетМСЧ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Область.СодержитЗначение Тогда
			ИмяПоказателя = Область.Имя;
			ПоказателиМСЧ.Добавить(ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиМСЧ;
	
КонецФункции

&НаКлиенте
Функция ОпределитьПринадлежностьОбластиКМногострочномуРазделу(ИмяОбласти) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолноеИмяМСЧПоПоказателю(ИмяОбласти)
	
	ИмяБезПостфикса = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, ЭтотОбъект["РазделительНомераСтроки"]) - 1);
	
	Если ИмяБезПостфикса = "А01020100" Тогда
		Возврат "МногострочнаяЧастьА010201";
		
	ИначеЕсли ИмяБезПостфикса = "А01020200" Тогда
		Возврат "МногострочнаяЧастьА010202";
		
	ИначеЕсли ИмяБезПостфикса = "Б01020701" ИЛИ ИмяБезПостфикса = "Б01020702" Тогда
		Возврат "МногострочнаяЧастьБ010207";
		
	ИначеЕсли ИмяБезПостфикса = "К01010200" Тогда
		Возврат "МногострочнаяЧастьК010102";
		
	ИначеЕсли ИмяБезПостфикса = "К01020200" Тогда
		Возврат "МногострочнаяЧастьК010202";
		
	ИначеЕсли ИмяБезПостфикса = "Л01040801" ИЛИ ИмяБезПостфикса = "Л01040802" Тогда
		Возврат "МногострочнаяЧастьЛ010408";
		
	ИначеЕсли ИмяБезПостфикса = "М01010100" Тогда
		Возврат "МногострочнаяЧастьМ010101";
		
	ИначеЕсли ИмяБезПостфикса = "О01010100" Тогда
		Возврат "МногострочнаяЧастьО010101";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ПолноеИмяМСЧПоПоказателю():
			|вызов функции с непредусмотренным значением параметра';
			|en = 'Функция ПолноеИмяМСЧПоПоказателю():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДостижениеМаксимальногоКоличестваСтрок(ИдМСЧ)
	
	Результат = Новый Структура("ДостигнутМаксимум, ТекстПредупреждения", Ложь, "");
	
	Если ИдМСЧ = "А010201" Тогда
		ИмяПредельногоПоказателя = "А01020100_18";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков';
												|en = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "А010202" Тогда
		ИмяПредельногоПоказателя = "А01020200_18";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков';
												|en = 'Допускается не более 18 строк с указанием кодов языков народов РФ или иностранных языков'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "Б010207" Тогда
		ИмяПредельногоПоказателя = "Б01020701_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием здания/сооружения';
												|en = 'Допускается не более 3 строк с указанием здания/сооружения'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "Л010408" Тогда
		ИмяПредельногоПоказателя = "Л01040801_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием здания/сооружения';
												|en = 'Допускается не более 3 строк с указанием здания/сооружения'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "М010101" Тогда
		ИмяПредельногоПоказателя = "М01010100_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием причин ограничения доступа к сведениям';
												|en = 'Допускается не более 3 строк с указанием причин ограничения доступа к сведениям'");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "О010101" Тогда
		ИмяПредельногоПоказателя = "О01010100_3";
		Если ПредставлениеУведомления.Области.Найти(ИмяПредельногоПоказателя) <> Неопределено Тогда
			Результат.ДостигнутМаксимум = Истина;
			Результат.ТекстПредупреждения = НСтр("ru = 'Допускается не более 3 строк с указанием причин ограничения доступа к сведениям';
												|en = 'Допускается не более 3 строк с указанием причин ограничения доступа к сведениям'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВводАдресаФИАС

&НаКлиенте
Процедура ОбработкаАдреса(Область, СтандартнаяОбработка) Экспорт
	
	ИмяОбласти = Область.Имя;
	
	Если СтрНайти(ИмяОбласти, "Б0101") = 1 Тогда
		ОбработкаМестаНахождения(Область, СтандартнаяОбработка);
		
	ИначеЕсли СтрНайти(ИмяОбласти, "Б0102") = 1
	      ИЛИ СтрНайти(ИмяОбласти, "Л0104") = 1 Тогда
		ОбработкаАдресаЮЛ(Область, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАдресаЮЛ(Область, СтандартнаяОбработка)
	
	ИдАдреса = Лев(Область.Имя, 5);
	
	Если ИДАдреса = "Б0102" Тогда
		ИдМСЧ = "Б010207";
	ИначеЕсли ИДАдреса = "Л0104" Тогда
		ИдМСЧ = "Л010408";
	КонецЕсли;
	
	// Эмуляция механизма многострочных частей из налоговой отчетности.
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей = Новый Структура;
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить(ИдМСЧ + "01");
	ИменаГраф.Добавить(ИдМСЧ + "02");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей.Вставить(ИдМСЧ,
		Новый Структура("ИменаГраф, ИсхКолСтрок, УровеньПодчинения, ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтандартнаяОбработка = Ложь;
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса =
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, "Адрес" + ИдАдреса);
	
	ПараметрыОпределенияАдреса = Новый Структура;
	ПараметрыОпределенияАдреса.Вставить("СтруктураМногострочныхЧастей",
		СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей);
	ПараметрыОпределенияАдреса.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
	
	ПоляАдресаВJSON = "";
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если Элем.Значение = "СтрокаАдресногоОбъекта" Тогда
			ПоляАдресаВJSON = ПредставлениеУведомления.Области[Элем.Ключ].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НазначениеАдреса","Адрес" + ИдАдреса);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаМестаНахождения(Область, СтандартнаяОбработка)
	
	// Эмуляция механизма многострочных частей из налоговой отчетности.
	СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей = Новый Структура;
	
	СтандартнаяОбработка = Ложь;
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса =
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, "МестоНахождения");
	
	ПараметрыОпределенияАдреса = Новый Структура;
	ПараметрыОпределенияАдреса.Вставить("СтруктураМногострочныхЧастей",
		СтруктураРеквизитовФормы_СтруктураМногострочныхЧастей);
	ПараметрыОпределенияАдреса.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
	
	ПоляАдресаВJSON = "";
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если Элем.Значение = "СтрокаАдресногоОбъекта" Тогда
			ПоляАдресаВJSON = ПредставлениеУведомления.Области[Элем.Ключ].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НазначениеАдреса", "МестоНахождения");
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(
		ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПредУИД = ЭтотОбъект["УИДТекущаяСтраница"];
	Если Элементы.ДеревоСтраниц.ТекущиеДанные.Многостраничность Тогда
		ИмяМакета = УведомлениеОСпецрежимахНалогообложенияКлиент.ПолучитьИмяВыводимогоМакета(Элементы.ДеревоСтраниц.ТекущиеДанные);
		МногострочныеЧасти = УведомлениеОСпецрежимахНалогообложенияКлиент.ПолучитьМногострочныеЧасти(Элементы.ДеревоСтраниц.ТекущиеДанные);
	Иначе
		ИмяМакета = Элементы.ДеревоСтраниц.ТекущиеДанные.ИмяМакета;
		МногострочныеЧасти = Элементы.ДеревоСтраниц.ТекущиеДанные.МногострочныеЧасти;
	КонецЕсли;
	ОбновитьАдресВМестеХранения(Результат, Параметры, ПредУИД);
	
	Элемент= Элементы.ДеревоСтраниц;
	
	ЭтотОбъект["УдалениеСтраницы"] = Истина; // Подавление сбора данных из табличного документа.
	
	Если Элемент.ТекущиеДанные.Многостраничность Тогда
		ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД);
	Иначе
		ПоказатьТекущуюСтраницу(ИмяМакета, МногострочныеЧасти, ПредУИД);
	КонецЕсли;
	
	ЭтотОбъект["УдалениеСтраницы"] = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресВМестеХранения(Результат, ПараметрыАдреса, ПредУИД)
	УведомлениеОСпецрежимахНалогообложения.СобратьДанныеМногострочныхЧастейТекущейСтраницы(
				ЭтотОбъект, ЭтотОбъект["ТекущиеМногострочныеЧасти"], ПредУИД);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Адрес", Результат.Значение);
	ПараметрыЗаполнения.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяФормы, ПараметрыАдреса.НазначениеАдреса));
	ПараметрыЗаполнения.Вставить("ВерсияАдреса", 2);
	
	ВиртуальноеДеревоРазделов = Новый ДеревоЗначений;
	ВиртуальноеДеревоРазделов.Колонки.Добавить("Данные");
	ВиртуальноеДеревоРазделов.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	Если ПараметрыАдреса.НазначениеАдреса = "МестоНахождения" Тогда
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ЭтотОбъект["ДанныеУведомления"].ЛистБ;
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД, Истина);
		
	ИначеЕсли ПараметрыАдреса.НазначениеАдреса = "АдресБ0102" Тогда
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ЭтотОбъект["ДанныеУведомления"].ЛистБ;
		ВиртуальнаяВеткаРаздела.ДанныеМногострочныхЧастей = Новый Структура("Б010207, ПолноеИмяМСЧ",
			ЭтотОбъект["ДанныеДопСтрокСтраницы"].МногострочнаяЧастьБ010207, "МногострочнаяЧастьБ010207");
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД);
		
	ИначеЕсли ПараметрыАдреса.НазначениеАдреса = "АдресЛ0104" Тогда
		ДанныеТекущегоЛистаРаздела = Неопределено;
		Для Каждого ЛистРаздела Из ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистЛ Цикл
			ДанныеРаздела = ЛистРаздела.Значение;
			Если ДанныеРаздела.УИД = ЭтотОбъект["УИДТекущаяСтраница"] Тогда
				ДанныеТекущегоЛистаРаздела = ДанныеРаздела;
			КонецЕсли;
		КонецЦикла;
		
		ВиртуальнаяВеткаРаздела = ВиртуальноеДеревоРазделов.Строки.Добавить();
		ВиртуальнаяВеткаРаздела.Данные = ДанныеТекущегоЛистаРаздела;
		ВиртуальнаяВеткаРаздела.ДанныеМногострочныхЧастей = Новый Структура("Л010408, ПолноеИмяМСЧ",
			ЭтотОбъект["ДанныеДопСтрокСтраницы"].МногострочнаяЧастьЛ010408, "МногострочнаяЧастьЛ010408");
		
		ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ВиртуальнаяВеткаРаздела, ПараметрыЗаполнения, ПредУИД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(СтраницаРаздела, ПараметрыЗаполнения, ПредУИД, ЭтоМестоНахождения = Ложь)
	
	СоответствиеПоказателейСтраницыРеквизитамАдреса = ПараметрыЗаполнения.СоответствиеПоказателейСтраницыРеквизитамАдреса;
	
	ДополнительныеПараметры = Неопределено;
	Если ПараметрыЗаполнения.Свойство("ВерсияАдреса") Тогда
		ДополнительныеПараметры = Новый Структура("ВерсияАдреса", ПараметрыЗаполнения.ВерсияАдреса);
	КонецЕсли;
	
	СтруктураАдреса = УведомлениеОСпецрежимахНалогообложения.АдресВФорматеФИАС(
		ПараметрыЗаполнения.Адрес, ДополнительныеПараметры);
	
	Если ЭтоМестоНахождения Тогда
		КодыГородовФедеральногоЗначения = СтрРазделить("77,78,92,99", ",", Ложь);
		Если КодыГородовФедеральногоЗначения.Найти(СтруктураАдреса.КодРегиона) <> Неопределено Тогда
			СтруктураАдреса.МуниципальныйРайонВид = "";
			СтруктураАдреса.МуниципальныйРайонСокращение = "";
			СтруктураАдреса.МуниципальныйРайон = "";
			СтруктураАдреса.ПоселениеВид = "";
			СтруктураАдреса.ПоселениеСокращение = "";
			СтруктураАдреса.Поселение = "";
			СтруктураАдреса.НаселенныйПунктВид = "";
			СтруктураАдреса.НаселенныйПунктСокращение = "";
			СтруктураАдреса.НаселенныйПункт = "";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтраницы = СтраницаРаздела.Данные;
	
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		Если ДанныеСтраницы.Свойство(Элем.Ключ) Тогда
			ДанныеСтраницы.Вставить(Элем.Ключ, СтруктураАдреса[Элем.Значение]);
			
		ИначеЕсли СтраницаРаздела.ДанныеМногострочныхЧастей.Свойство(Элем.Ключ)
			И ТипЗнч(Элем.Значение) = Тип("Массив") И Элем.Значение.Количество() >= 2
			И ТипЗнч(Элем.Значение[0]) = Тип("Строка") И ЗначениеЗаполнено(Элем.Значение[0])
			И СтруктураАдреса.Свойство(Элем.Значение[0]) И ТипЗнч(СтруктураАдреса[Элем.Значение[0]]) = Тип("Массив")
			И ТипЗнч(Элем.Значение[1]) = Тип("Структура") Тогда
			
			ПолноеИмяМСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей.ПолноеИмяМСЧ;
			ДанныеМСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[Элем.Ключ];
			ПоказателиМСЧ = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеМСЧ[0].Значение);
			ДанныеМСЧ.Очистить();
			
			СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса = Элем.Значение[1];
			
			МножественныйРеквизитАдреса = СтруктураАдреса[Элем.Значение[0]];
			
			Для Каждого РеквизитАдреса Из МножественныйРеквизитАдреса Цикл
				СтрокаМногострочнойЧасти = ДанныеМСЧ.Добавить();
				СтрокаМногострочнойЧасти.Значение = Новый Структура;
				Для Каждого ПоказательМСЧ Из ПоказателиМСЧ Цикл
					СтрокаМногострочнойЧасти.Значение.Вставить(ПоказательМСЧ.Ключ);
				КонецЦикла;
				
				Для Каждого ЭлемСоответствия Из СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса Цикл
					СтрокаМногострочнойЧасти.Значение[ЭлемСоответствия.Ключ] = РеквизитАдреса[ЭлемСоответствия.Значение];
				КонецЦикла;
				
			КонецЦикла;
			
			Если ДанныеМСЧ.Количество() = 0 Тогда
				СтрокаМногострочнойЧасти = ДанныеМСЧ.Добавить();
				СтрокаМногострочнойЧасти.Значение = Новый Структура;
				Для Каждого ПоказательМСЧ Из ПоказателиМСЧ Цикл
					СтрокаМногострочнойЧасти.Значение.Вставить(ПоказательМСЧ.Ключ);
				КонецЦикла;
			КонецЕсли;
			
			ВсеДопСтроки = ПолучитьИзВременногоХранилища(ЭтотОбъект["ДанныеДопСтрок"][ПолноеИмяМСЧ]);
			СтрокиТекущейСтраницы = ВсеДопСтроки.НайтиСтроки(Новый Структура("УИД", ПредУИД));
			Для Каждого СохраненнаяСтрокаМСЧ Из СтрокиТекущейСтраницы Цикл
				ВсеДопСтроки.Удалить(СохраненнаяСтрокаМСЧ);
			КонецЦикла;
			
			Для Каждого СтрокаМСЧ Из ДанныеМСЧ Цикл
				НовСтр = ВсеДопСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаМСЧ.Значение);
				НовСтр.УИД = ПредУИД;
			КонецЦикла;
			
			ЭтотОбъект["ДанныеДопСтрок"][ПолноеИмяМСЧ] = 
				ПоместитьВоВременноеХранилище(ВсеДопСтроки, ЭтотОбъект["ДанныеДопСтрок"][ПолноеИмяМСЧ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолейОтправки = Новый Структура;
	Для Каждого КЗ Из РеквизитыКСохранению() Цикл 
		СтруктураПолейОтправки.Вставить(КЗ, ЭтотОбъект[КЗ]);
	КонецЦикла;
	
	СтруктураПараметров = УведомлениеОСпецрежимахНалогообложения.СтруктураПараметровДляСохранения(ЭтотОбъект);
	СтруктураПараметров.Вставить("СтруктураПолейОтправки", СтруктураПолейОтправки);
	УведомлениеОСпецрежимахНалогообложения.СохранитьДанные(ЭтотОбъект, СтруктураПараметров);
	УведомлениеЗаполненоВПомощнике = Ложь;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если Модифицированность Тогда
		СохранитьДанные();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УведомлениеОбъект = Объект.Ссылка.ПолучитьОбъект();
		Если УведомлениеОбъект.Заблокирован() Тогда
			УведомлениеОбъект.Разблокировать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	СтруктураПараметров = УведомлениеОСпецрежимахНалогообложения.ЗагрузкаДанныхУведомления(ЭтотОбъект, СсылкаНаДанные);
	СохраненноеДеревоСтраниц = СтруктураПараметров.ДеревоСтраниц;
	АктуализироватьПараметрыДереваСтраниц(СохраненноеДеревоСтраниц);
	ДобавитьНедостающиеПоказатели();
	
	Если СтруктураПараметров.Свойство("СтруктураПолейОтправки") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметров["СтруктураПолейОтправки"]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНедостающиеПоказатели()
	
	ЛистБ = ЭтотОбъект["ДанныеУведомления"].ЛистБ;
	
	Если НЕ ЛистБ.Свойство("БД1010100") Тогда
		ЛистБ.Вставить("БД1010100", "");
	КонецЕсли;
	
	Если НЕ ЛистБ.Свойство("БД1020100") Тогда
		ЛистБ.Вставить("БД1020100", "");
	КонецЕсли;
	
	ЛистыЛ = ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистЛ;
	
	Для Каждого ЛистЛ Из ЛистыЛ Цикл
		ПоказателиРаздела = ЛистЛ.Значение;
		Если НЕ ПоказателиРаздела.Свойство("ЛД1020200") Тогда
			ПоказателиРаздела.Вставить("ЛД1020200", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсОбращенияКМодулюМенеджераИОбъекта

&НаСервере
Процедура СформироватьДеревоСтраниц() Экспорт
	НовоеДеревоСтраниц = Отчеты[Объект.ИмяОтчета].СформироватьДеревоСтраниц(Объект.ИмяФормы);
	ЗначениеВРеквизитФормы(НовоеДеревоСтраниц, "ДеревоСтраниц");
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти(КонтейнерВходящий, КонтейнерРезультат) Экспорт
	Отчеты[Объект.ИмяОтчета].ИнициализироватьМногострочныеЧасти(Объект.ИмяФормы, КонтейнерВходящий, КонтейнерРезультат);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ПолноеИмяФормы, НазначениеАдреса)
	Возврат Отчеты[РегламентированнаяОтчетностьКлиентСервер.ИмяОтчета(ПолноеИмяФормы)].СоответствиеПоказателейСтраницыРеквизитамАдреса(
		РегламентированнаяОтчетностьКлиентСервер.ИмяФормыОтчета(ПолноеИмяФормы), НазначениеАдреса);
КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ПолноеИмяФормы)
	Возврат Отчеты[РегламентированнаяОтчетностьКлиентСервер.ИмяОтчета(ПолноеИмяФормы)].ДоступнаПечатьPDF417(
		РегламентированнаяОтчетностьКлиентСервер.ИмяФормыОтчета(ПолноеИмяФормы));
КонецФункции

&НаСервере
Процедура АктуализироватьПараметрыДереваСтраниц(ИсходноеДерево)
	Отчеты[Объект.ИмяОтчета].АктуализироватьПараметрыДереваСтраниц(Объект.ИмяФормы, ИсходноеДерево);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПечатьБРОНаСервере()
	
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОбластьОКСМ(Область)
	
	ПоказателиОКСМ = "В01020500,В01030600,В01620600,В01621400,В01622300,В01631000,В01631800,В7010105,В7010206,
		|Г01030700,Г01620600,Г01621400,Г01622300,Г01631000,Г01631800,Г01710600,Г01711400,Г01712300,В7010219,
		|Д01620600,Д01621400,Д01622300,Д01631000,Д01631800,Е01620600,Е01621400,Е01622300,Е01631000,Е01631800,
		|Ж01620600,Ж01621400,Ж01622300,Ж01631000,Ж01631800,З01220600,З01221400,З01222300,З01231000,З01231800,
		|И01031100,Л01030300,Л01041100,Н03030300,Н3230204,Н3230204,Н3220104";
	
	ИмяОбласти = Область.Имя;
	
	Возврат СтрНайти(ПоказателиОКСМ, ИмяОбласти) > 0;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если Модифицированность И УведомлениеЗаполненоВПомощнике Тогда
		Оповестить("ЗакрытьПомощникВнесенияИзмененийЕГР", Объект.Ссылка);
	КонецЕсли;
	
	СохранитьДанные();
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	
	СохранитьДанные();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОчисткаОтчета() Экспорт
	
	Объект.РегистрацияВИФНС =
		Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	СформироватьДеревоСтраниц();
	СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаРазрешитьВыгружатьСОшибками(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеКонтактнойИнформации

&НаКлиенте
Процедура ВыслатьСМССКодом(Команда)
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеПараметрыКонтактнойИнформации(Форма, ИмяТекущегоЭлемента = "")
	Возврат РегистрационныеФормыКлиентСервер.ДополнительныеПараметрыКонтактнойИнформации(
		Форма.ЗаявительТелефонПредставление,
		Форма.ЗаявительEMailПредставление,
		"ЗаявительТелефонПредставление",
		"ЗаявительEMailПолучениеДокументов",
		ИмяТекущегоЭлемента);
КонецФункции

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Телефон()
	Если ТребуетсяИсправлениеНомераТелефонаЗаявителя(ЗаявительТелефонПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныеФормыКлиент.ПодтвердитьНомерТелефона(ЭтотОбъект,
		ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительТелефонПредставление"));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеНомераТелефонаЗаявителя(НомерТелефона)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Контактный телефон';
																						|en = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительТелефонПредставление", , Отказ);
	ИначеЕсли Не РегистрационныеФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефона)
		Или Не ЗначениеЗаполнено(ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(НомерТелефона)) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Корректность", НСтр("ru = 'Контактный телефон';
																									|en = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительТелефонПредставление", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Телефон(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	РегистрационныеФормыКлиент.ПослеОтправкиКодаПодтвержденияТелефона(
		ЭтотОбъект, ДлительнаяОперация, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Телефон()
	РегистрационныеФормыКлиент.ПовторнаяОтправкаКодаПодтвержденияТелефона(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияНажатие(Элемент)
	СрокПовторнойОтправкиКодаДляТелефона = Неопределено;
	КодПодтвержденияТелефона = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Телефон", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияТелефона = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрационныеФормыКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Телефон", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Телефон()
	РегистрационныеФормыКлиент.ПроверитьКодПодтвержденияТелефона(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительТелефонПредставление"));
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьПисьмоНаПочту(Команда)
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения_Почта()
	Если ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(ЗаявительEMailПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныеФормыКлиент.ПодтвердитьАдресЭлектроннойПочты(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительEMailПолучениеДокументов"));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяИсправлениеАдресаЭлектроннойПочтыЗаявителя(АдресЭлектроннойПочты)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email';
																						|en = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительEMailПредставление", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email';
																									|en = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ЗаявительEMailПредставление", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОтправкиКодаПодтверждения_Почта(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	РегистрационныеФормыКлиент.ПослеОтправкиКодаПодтвержденияПочты(
		ЭтотОбъект, ДлительнаяОперация, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовторнаяОтправка_Почта()
	РегистрационныеФормыКлиент.ПовторнаяОтправкаКодаПодтвержденияПочты(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КодПодтвержденияПочты = СокрЛП(Текст);
	
	Если СтрДлина(Текст) = РегистрационныеФормыКлиентСервер.ДлинаКодаПодтверждения() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения_Почта", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения_Почта()
	РегистрационныеФормыКлиент.ПроверитьКодПодтвержденияПочты(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, "ЗаявительEMailПолучениеДокументов"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительEMailПолучениеДокументовПриИзменении(Элемент)
	ЗаявительEMailПриИзменении();
	
	РегистрационныеФормыКлиент.ЗаявительПочтаПриИзменении(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительEMailПриИзменении()
	ЗаявительEMailПредставление = СокрЛП(ЗаявительEMailПредставление);
	Если ПустаяСтрока(ЗаявительEMailПредставление) Тогда
		ЗаявительEMailЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	ЗаявительEMailЗначениеJSON = КонтактнаяИнформацияПоПредставлению(ЗаявительEMailПредставление, ПараметрыКонтактнойИнформации.Email);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПолученияКонтактнойИнформацииЗаявителя(Форма)
	Параметры = Новый Структура;
	Параметры.Вставить("Владелец", Форма.Объект.Организация);
	Параметры.Вставить("EMail", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailОрганизации"));
	Параметры.Вставить("АдресПрописки", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Параметры.Вставить("АдресДляИнформирования", Неопределено);
	Параметры.Вставить("Телефон", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Возврат Параметры;
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач Представление, Знач ВидКонтактнойИнформации)
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.Телефон);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗаявительТелефонЗначениеJSON);
	ПараметрыОткрытия.Вставить("Представление", ЗаявительТелефонПредставление);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПриИзменении(Элемент)
	РегистрационныеФормыКлиент.ЗаявительТелефонПриИзменении(
		ЭтотОбъект, ДополнительныеПараметрыКонтактнойИнформации(ЭтотОбъект, Элемент.Имя));
	ТелефонЗаявителяПриИзменении(ЗаявительТелефонПредставление);
КонецПроцедуры

&НаКлиенте
Процедура ТелефонЗаявителяПриИзменении(Текст)
	Если ПустаяСтрока(Текст) Тогда
		ЗаявительТелефонПредставление = "";
		ЗаявительТелефонЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	Телефон = РегистрационныеФормыКлиентСервер.ТелефонДляЗаявления(Текст);
	ЗаявительТелефонПредставление = Телефон;
	ЗаявительТелефонЗначениеJSON = КонтактнаяИнформацияПоПредставлению(Телефон, ПараметрыКонтактнойИнформации.Телефон);
КонецПроцедуры

&НаКлиенте
Процедура ТекстВыслатьПовторноКодПодтвержденияПочтаНажатие(Элемент)
	СрокПовторнойОтправкиКодаДляПочты = Неопределено;
	КодПодтвержденияПочты = "";
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения_Почта", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ЗаявительТелефонЗначениеJSON = ВыбранноеЗначение.Значение;
	ЗаявительТелефонПредставление = ВыбранноеЗначение.Представление;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыКСохранению()
	РеквизитыКСохранению = "ЗаявительEMailЗначениеJSON,ЗаявительEMailПредставление,ЗаявительТелефонЗначениеJSON,ЗаявительТелефонПредставление,"
		+ "НомерТелефонаПодтвержден,ЭлектроннаяПочтаПодтверждена,СпособПодачиДокументов,ФорматОтправкиДокументов,"
		+ "ПодписанныеДокументы,РегистрирующийОрганКод,ОшибкаПодписанияДокументов,НетСертификатаПодписи,СканПротокол";
	Возврат СтрРазделить(РеквизитыКСохранению, ",", Ложь);
КонецФункции

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноОнлайнПриИзменении(Элемент)
	ПриИзмененииОпцийСдачи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументоЭлектронноПриИзменении(Элемент)
	ПриИзмененииОпцийСдачи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИныеДокументы(Команда)
	РегистрационныеФормыКлиент.ОчиститьПрисоединенныеФайлы(ЭтотОбъект, "ИныеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура ИныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьПрисоединенныеФайлы(ЭтотОбъект, Элемент.Имя, "Дерево");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУчредительныйДокумент(Команда)
	РегистрационныеФормыКлиент.ОчиститьПрисоединенныеФайлы(ЭтотОбъект, "УчредительныйДокумент");
КонецПроцедуры

&НаКлиенте
Процедура УчредительныйДокументНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьПрисоединенныеФайлы(ЭтотОбъект, Элемент.Имя, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканЗаявление(Команда)
	РегистрационныеФормыКлиент.ОчиститьПрисоединенныеФайлы(ЭтотОбъект, "СканЗаявление");
КонецПроцедуры

&НаКлиенте
Процедура СканЗаявлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьПрисоединенныеФайлы(ЭтотОбъект, Элемент.Имя, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканПротокол(Команда)
	РегистрационныеФормыКлиент.ОчиститьПрисоединенныеФайлы(ЭтотОбъект, "СканПротокол");
КонецПроцедуры

&НаКлиенте
Процедура СканПротоколНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьПрисоединенныеФайлы(ЭтотОбъект, Элемент.Имя, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканРешение(Команда)
	РегистрационныеФормыКлиент.ОчиститьПрисоединенныеФайлы(ЭтотОбъект, "СканРешение");
КонецПроцедуры

&НаКлиенте
Процедура СканРешениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьПрисоединенныеФайлы(ЭтотОбъект, Элемент.Имя, "Список");
КонецПроцедуры

&НаКлиенте
Процедура ПодписанныеДокументыЗначениеНажатие(Элемент)
	ДанныеФайла = РегистрационныеФормыВызовСервера.ДанныеФайлаДляОткрытия(ПодписанныеДокументы, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПодписиДокументовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РегистрационныеФормыКлиент.ОткрытьЖурналРегистрацииПриОшибкиПодписания();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПодписатьДокументы(Команда)
	Если Модифицированность Тогда 
		Если Ждать ВопросАсинх("Перед формированием пакета необходимо сохранить заявление. Сохранить изменения?", РежимДиалогаВопрос.ДаНет)
			<> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
		СохранитьДанные();
	КонецЕсли;
	Если Не ПроверкиПередОтправкой() Тогда 
		Возврат;
	КонецЕсли;
	
	Если РегистрационныеФормыКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(СпособПодачиДокументов, ФорматОтправкиДокументов) Тогда 
		ВыгрузкаВФоне();
	Иначе
		ПроверитьИПодписатьДокументы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВФоне()
	Доступность = Ложь;
	РезультатВыполнения = ВыгрузкаВФонеНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыгрузкаВФонеЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется формирование дополнительных файлов выгрузки';
												|en = 'Выполняется формирование дополнительных файлов выгрузки'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ВыгрузкаВФонеПроверкаРезультата();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузкаВФонеНаСервере()
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;

	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("РегистрационныеФормыВызовСервера.ДанныеВыгрузкиДляФормированияКонтейнера",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, Ссылка", Объект.ИмяОтчета, Объект.ИмяФормы, Объект.Ссылка),
		ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ЭтотОбъект["АдресХранилища"] = РезультатВыполнения.АдресРезультата;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ВыгрузкаВФонеЗавершение(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	Если РезультатЗагрузки = Неопределено ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать файлы выгрузки...';
														|en = 'Не удалось сформировать файлы выгрузки...'"));
	Иначе
		ВыгрузкаВФонеПроверкаРезультата();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВФонеПроверкаРезультата()
	РезультатыВыгрузки = ПолучитьИзВременногоХранилища(ЭтотОбъект["АдресХранилища"]);
	Если РезультатыВыгрузки.КоличествоОшибок <> 0 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("При проверке формата произошли ошибки. Воспользуйтесь проверкой выгрузки в меню формы");
		Возврат;
	КонецЕсли;
	
	Если Не РезультатыВыгрузки.Свойство("ФайлВыгрузкиДД") Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось выгрузить отчет.");
		Возврат;
	КонецЕсли;
	
	Если Не РезультатыВыгрузки.Свойство("ПДФФайлИзСервисаДД") Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось сформировать скан заявления в сервисе.");
		ОшибкаСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатыВыгрузки, "ОшибкаСервиса");
		Если ЗначениеЗаполнено(ОшибкаСервиса) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаСервиса);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПроверитьИПодписатьДокументы();
КонецПроцедуры

&НаКлиенте
Функция ПроверкиПередОтправкой()
	Если СтрДлина(РегистрирующийОрганКод) <> 4 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(РегистрирующийОрганКод) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан / неправильно указан код налогового органа", , "РегистрирующийОрганКод");
		Возврат Ложь;
	КонецЕсли;
	Если ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистП.Количество() <> 1 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Для целей отправки можно указать только одного заявителя (может быть заполнен только один Лист П)");
		Возврат Ложь;
	Иначе
		ЛистП = ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистП[0].Значение;
		Если ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ЗаявительТелефонПредставление)
			<> ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ЛистП.П01030300) Тогда 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				"Телефон заявителя на Листе П должен совпадать с данными вкладки отправки");
			Возврат Ложь;
		КонецЕсли;
		
		Если НРег(СокрЛП(ЗаявительEMailПредставление)) <> НРег(СокрЛП(Строка(ЛистП.П01030100))) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				"Электронная почта на Листе П должна совпадать с данными вкладки отправки");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПараметрыДляПодписанияИзДанных()
	Результат = Новый Структура;
	ЛистП = ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистП[0].Значение;
	Результат.Вставить("ИНН", ЛистП.П01020200);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПрикрепленныхДокументов() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("УчредительныйДокумент", "УчредительныйДокумент");
	Результат.Вставить("ИныеДокументы", "ИныеДокументы");
	Результат.Вставить("СканЗаявление", "СканЗаявление");
	Результат.Вставить("СканПротокол", "СканПротокол");
	Результат.Вставить("СканРешение", "СканРешение");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПроверитьИПодписатьДокументы()
	ПараметрыДляПодписанияИзДанных = ПараметрыДляПодписанияИзДанных();
	ПараметрыЗаявления = РегистрационныеФормыКлиент.НовыеПараметрыПодписанияЗаявления();
	
	ПараметрыЗаявления.EMailЗаявителя = ЗаявительEMailПредставление;
	ПараметрыЗаявления.Заявление = Объект.Ссылка;
	ПараметрыЗаявления.ИННЗаявителя = ПараметрыДляПодписанияИзДанных.ИНН;
	ПараметрыЗаявления.ЭтоЮрЛицо = Истина;
	ПараметрыЗаявления.Организация = Объект.Организация;
	ПараметрыЗаявления.ВидДокумента = "ЗаявлениеПоФормеР13014";
	ПараметрыЗаявления.ВидыДокументов = ВидыПрикрепленныхДокументов();
	ПараметрыЗаявления.ОтображатьИндивидуальныйУстав = Ложь;
	ПараметрыЗаявления.Учредители = Ложь;
	ПараметрыЗаявления.НуженДокументПодтверждающийАдрес = Ложь;
	ПараметрыЗаявления.ЗаявлениеВXML = РегистрационныеФормыКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(
		СпособПодачиДокументов, ФорматОтправкиДокументов);
	
	ФайлыПрикрепленныеДокументы = РегистрационныеФормыВызовСервера.ПрикрепленныеФайлыЗаявления(
		ПараметрыЗаявления, УникальныйИдентификатор);
		
	ПараметрыФормирования = ИнтерфейсыВзаимодействияБРОКлиент.ПараметрыМетодаСформироватьПакетПоЕГРЮЛ();
	ПараметрыФормирования.КодНО = РегистрирующийОрганКод;
	ПараметрыФормирования.ЭлПочтаЗаявителя = ПараметрыЗаявления.EMailЗаявителя;
	ПараметрыФормирования.Заявление = ПараметрыЗаявления.Заявление;
	ПараметрыФормирования.ИННЗаявителя = ПараметрыЗаявления.ИННЗаявителя;
	
	Если СпособПодачиДокументов = РегистрационныеФормыКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронноОнлайн Тогда
		ПараметрыФормирования.ОтправитьПакет = Истина;
		ПараметрыФормирования.ПодписатьПакет = Ложь;
		ПараметрыФормирования.ВыводитьСообщения = Ложь;
	Иначе
		ПараметрыФормирования.ОтправитьПакет = Ложь;
		ПараметрыФормирования.ПодписатьПакет = Истина;
	КонецЕсли;
	
	Если ("1" = ЭтотОбъект["ДанныеМногостраничныхРазделов"].ЛистП[0].Значение.П01030200) Тогда
		ПараметрыФормирования.СпособПредоставленияОтвета = ПредопределенноеЗначение(
			"Перечисление.СпособыПолученияОтветаНаЭлГосРегистрацию.ВыдатьДокументыЛично");
	Иначе
		ПараметрыФормирования.СпособПредоставленияОтвета = ПредопределенноеЗначение(
			"Перечисление.СпособыПолученияОтветаНаЭлГосРегистрацию.ВыслатьДокументыПоПочте");
	КонецЕсли;
	
	ВидДокумента = "ЗаявлениеПоФормеР13014";
	Если РегистрационныеФормыКлиентСервер.ОтправлятьЗаявлениеВXMLФормате(СпособПодачиДокументов, ФорматОтправкиДокументов) Тогда 
		РезультатыВыгрузки = ПолучитьИзВременногоХранилища(ЭтотОбъект["АдресХранилища"]);
		ЗаявлениеВXML = Новый Массив;
		ЗаявлениеВXML.Добавить(ПоместитьВоВременноеХранилище(РезультатыВыгрузки.ФайлВыгрузкиДД, Новый УникальныйИдентификатор));
		РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
			ВидДокумента, ЗаявлениеВXML, ПараметрыФормирования.ОписаниеФайлов, ПредопределенноеЗначение("Перечисление.ТипыСодержимогоФайлов.xml"));
			
		СканИзСервиса = Новый Массив;
		СканИзСервиса.Добавить(ПоместитьВоВременноеХранилище(РезультатыВыгрузки.ПДФФайлИзСервисаДД, Новый УникальныйИдентификатор));
		РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
			ВидДокумента, СканИзСервиса, ПараметрыФормирования.ОписаниеФайлов, ПредопределенноеЗначение("Перечисление.ТипыСодержимогоФайлов.pdf"));
	Иначе
		Если ФайлыПрикрепленныеДокументы.СканЗаявление.Количество() > 0 Тогда
			РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
				ВидДокумента, ФайлыПрикрепленныеДокументы.СканЗаявление, ПараметрыФормирования.ОписаниеФайлов);
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.УчредительныйДокумент.Количество() > 0 Тогда
		ВидДокумента = "УставЮЛВНовойРедакции";
		РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
			ВидДокумента, ФайлыПрикрепленныеДокументы.УчредительныйДокумент, ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.СканПротокол.Количество() > 0 Тогда
		ВидДокумента = "ПротоколОбщегоСобранияУчастниковЮЛ";
		РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
			ВидДокумента, ФайлыПрикрепленныеДокументы.СканПротокол, ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.СканРешение.Количество() > 0 Тогда
		ВидДокумента = "РешениеОбщегоСобрания";
		РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов(
			ВидДокумента, ФайлыПрикрепленныеДокументы.СканРешение, ПараметрыФормирования.ОписаниеФайлов);
	КонецЕсли;
	
	Если ФайлыПрикрепленныеДокументы.ИныеДокументы.Количество() > 0 Тогда
		ВидДокумента = "ИнойДокумент";
		Для Каждого ТекущийИнойДокумент Из ФайлыПрикрепленныеДокументы.ИныеДокументы Цикл
			РегистрационныеФормыКлиент.ДобавитьФайлВОписаниеФайлов("ИнойДокумент", ТекущийИнойДокумент.Значение, ПараметрыФормирования.ОписаниеФайлов);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормирования.ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПодписатьДокументыЗавершение", ЭтотОбъект, ПараметрыФормирования.ОписаниеФайлов);
	
	ИнтерфейсыВзаимодействияБРОКлиент.СформироватьПакетПоЕГРЮЛ(ПараметрыФормирования);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументыЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт
	ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтображенияЭлементовФормы(Форма)
	Результат = Новый Структура;
	Результат.Вставить("Заявление", Форма.Объект.Ссылка);
	Результат.Вставить("ЭтоЮрЛицо", Истина);
	Результат.Вставить("ЕстьУведомлениеОПереходеНаУСН", Ложь);
	Результат.Вставить("ЕстьПатент", Ложь);
	Возврат Результат
КонецФункции

&НаСервере
Процедура ПодписатьДокументыНаСервере(РезультатПодписания, ДополнительныеПараметры)
	РегистрационныеФормы.ОбработатьРезультатПодписанияДокументов(
		ЭтотОбъект, РезультатПодписания, ПараметрыОтображенияЭлементовФормы(ЭтотОбъект), ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПодписанныеДокументы)
		И СпособПодачиДокументов = РегистрационныеФормыКлиентСервер.СпособыПодачиДокументов().ИФНСэлектронно Тогда
		
		Модифицированность = Истина;
		СохранитьДанные();
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(
			Объект.Ссылка, ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписанныеДокументы(Команда)
	ОчиститьПодписанныеДокументыИУстановитьКодРегистрирующегоОргана();
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодписанныеДокументыИУстановитьКодРегистрирующегоОргана()
	РегистрирующийОрганКод = "";
	РегистрационныеФормыВызовСервера.УдалитьПрикрепленныеФайлы(
		Объект.Ссылка, РегистрационныеФормыКлиентСервер.ПредставлениеПодписанныеФайлы());
	ПодписанныеДокументы = Неопределено;
	Модифицированность = Истина;
	СохранитьДанные();
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправкиУведомления(
		Объект.Ссылка, ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой());
	РегистрационныеФормыКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(ЭтотОбъект, ПараметрыОтображенияЭлементовФормы(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ФорматОтправкиДокументовПриИзменении(Элемент)
	ПриИзмененииОпцийСдачи(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОпцийСдачи(Форма)
	РегистрационныеФормыКлиентСервер.УправлениеФормойПриПодачеДокументовВЭлектронномВиде(
		Форма, ПараметрыОтображенияЭлементовФормы(Форма));
	РегистрационныеФормыКлиентСервер.УправлениеСвойствамиГруппыПодтвержденияКонтактнойИнформации(
		Форма, ДополнительныеПараметрыКонтактнойИнформации(Форма));
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	РегистрационныеФормыКлиент.СтатусОтправкиОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки,
		Объект.Ссылка,
		РегистрационныеФормыКлиентСервер.ТипФайлаЛистЗаписиЕГР(Истина),
		УникальныйИдентификатор,
		СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти
