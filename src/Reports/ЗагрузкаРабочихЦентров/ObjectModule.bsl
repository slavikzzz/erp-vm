//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
	
// Устанавливает для переданной серии оформление
// 
// Параметры:
//	Серия - СерияДиаграммы - изменяемая серия диаграммы.
//
Процедура УстановитьРасширенноеОформлениеСерии(Серия) Экспорт
	
	Если СтрНайти(Серия.Текст, НСтр("ru = 'Высокая загрузка, выше доступного времени';
									|en = 'Heavy workload exceeding available time'")) <> 0
		ИЛИ СтрНайти(Серия.Текст, НСтр("ru = 'Высокая загрузка, ниже доступного времени';
										|en = 'Heavy workload lower than available time'")) <> 0 Тогда
		
		Серия.Цвет = WebЦвета.ЛососьСветлый;
		
	ИначеЕсли СтрНайти(Серия.Текст, НСтр("ru = 'Доступное время';
										|en = 'Available time'")) Тогда
		
		Серия.Цвет = WebЦвета.СветлоСерый;
		
	ИначеЕсли СтрНайти(Серия.Текст, НСтр("ru = 'Нормальная загрузка';
										|en = 'Standard load'")) Тогда
		
		Серия.Цвет = WebЦвета.СинийСоСтальнымОттенком;
		
	ИначеЕсли СтрНайти(Серия.Текст, НСтр("ru = 'Низкая загрузка';
										|en = 'Low load'")) > 0 Тогда
		
		Серия.Цвет = WebЦвета.ТемноЗеленый;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	Если ЗначенияОтбораДанных.НачалоПериода = '000101010000' 
		И ЗначенияОтбораДанных.ОкончаниеПериода <> '000101010000' Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено начало периода.';
								|en = 'Beginning of the period is not filled in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
	КонецЕсли;
	
	Если ЗначенияОтбораДанных.Перегрузка > 100 Тогда
		ТекстСообщения = НСтр("ru = 'Параметр перегрузки не может превышать 100%.';
								|en = 'Overload parameter cannot exceed 100%.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
	КонецЕсли; 
	
	Если ЗначенияОтбораДанных.Перегрузка < ЗначенияОтбораДанных.Недозагрузка
		И ЗначенияОтбораДанных.Перегрузка <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Параметр перегрузки должен быть выше параметра недозагрузки.';
								|en = 'Overload parameter should be higher than underload parameter.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДанныеОЗагрузке = ДанныеОЗагрузке(НастройкиОсновнойСхемы);
										
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеОЗагрузке", ДанныеОЗагрузке);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	КомпоновкаДанныхСервер.ОформитьДиаграммыОтчета(КомпоновщикНастроек, ДокументРезультат, ПараметрыДиаграмм());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеОЗагрузке(НастройкиОсновнойСхемы)
	
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	ДанныеОЗагрузке = Новый ТаблицаЗначений;
	ДанныеОЗагрузке.Колонки.Добавить("Подразделение",     Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ДанныеОЗагрузке.Колонки.Добавить("РабочийЦентр",      Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	ДанныеОЗагрузке.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ДанныеОЗагрузке.Колонки.Добавить("ОбъемРабот",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	ДанныеОЗагрузке.Колонки.Добавить("ДоступноеВремя",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	ДанныеОЗагрузке.Колонки.Добавить("ПериодГрафика",     Новый ОписаниеТипов("Дата"));
	ДанныеОЗагрузке.Колонки.Добавить("МаршрутныйЛист",    Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛистПроизводства"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводстваОперации.Ссылка.Подразделение КАК Подразделение,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентр,
	|	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ПооперационноеРасписание.РабочийЦентр.КоэффициентВремениРаботы КАК КоэффициентВремениРаботы,
	|	МаршрутныйЛистПроизводстваОперации.Начало,
	|	МаршрутныйЛистПроизводстваОперации.Окончание,
	|	РАЗНОСТЬДАТ(МаршрутныйЛистПроизводстваОперации.Начало, МаршрутныйЛистПроизводстваОперации.Окончание, ДЕНЬ) + 1 КАК КоличествоДней,
	|	ПооперационноеРасписание.ВремяПлан КАК ВремяРаботы,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|			И МаршрутныйЛистПроизводстваОперации.РабочийЦентр.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр.Календарь
	|		КОГДА МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра.Календарь
	|		ИНАЧЕ ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|	КОНЕЦ КАК Календарь,
	|	МаршрутныйЛистПроизводстваОперации.Ссылка КАК МаршрутныйЛист
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|		ПО МаршрутныйЛистПроизводстваОперации.Ссылка = ПооперационноеРасписание.МаршрутныйЛист
	|			И МаршрутныйЛистПроизводстваОперации.КлючСвязи = ПооперационноеРасписание.ИдентификаторОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО МаршрутныйЛистПроизводстваОперации.Ссылка.Подразделение = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	МаршрутныйЛистПроизводстваОперации.Ссылка.Проведен
	|	И МаршрутныйЛистПроизводстваОперации.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	|	И МаршрутныйЛистПроизводстваОперации.Окончание > &Начало
	|	И МаршрутныйЛистПроизводстваОперации.Начало < &Окончание
	|	И МаршрутныйЛистПроизводстваОперации.Начало <> ДАТАВРЕМЯ(1, 1, 1)
	|	И МаршрутныйЛистПроизводстваОперации.Окончание <> ДАТАВРЕМЯ(1, 1, 1)
	|	И МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.Сформировано)
	|	И (&ЛюбойРабочийЦентр
	|			ИЛИ ПооперационноеРасписание.РабочийЦентр В (&СписокРабочихЦентров))
	|	И (&ЛюбоеПодразделение
	|			ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.Подразделение В (&СписокПодразделений))
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И (ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры)) <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр.КоэффициентВремениРаботы,
	|	РасписаниеРаботыРабочихЦентров.Начало,
	|	РасписаниеРаботыРабочихЦентров.Окончание,
	|	РАЗНОСТЬДАТ(РасписаниеРаботыРабочихЦентров.Начало, РасписаниеРаботыРабочихЦентров.Окончание, ДЕНЬ) + 1,
	|	РасписаниеРаботыРабочихЦентров.ВремяРаботы + РасписаниеРаботыРабочихЦентров.ВремяПереналадки,
	|	ВЫБОР
	|		КОГДА РасписаниеРаботыРабочихЦентров.РабочийЦентр.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РасписаниеРаботыРабочихЦентров.РабочийЦентр.Календарь
	|		КОГДА РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра.Календарь
	|		ИНАЧЕ ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|	КОНЕЦ,
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист
	|ИЗ
	|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Ссылка = РасписаниеРаботыРабочихЦентров.МаршрутныйЛист)
	|			И (МаршрутныйЛистПроизводства.Проведен)
	|			И (МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО  МаршрутныйЛистПроизводства.Подразделение = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(&ЛюбойРабочийЦентр
	|			ИЛИ РасписаниеРаботыРабочихЦентров.РабочийЦентр В (&СписокРабочихЦентров))
	|	И (&ЛюбоеПодразделение
	|			ИЛИ РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение В ИЕРАРХИИ (&СписокПодразделений))
	|	И РасписаниеРаботыРабочихЦентров.Начало <= &Окончание
	|	И РасписаниеРаботыРабочихЦентров.Окончание >= &Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Подразделение,
	|	Расписание.РабочийЦентр,
	|	Расписание.ВидРабочегоЦентра,
	|	Расписание.КоэффициентВремениРаботы,
	|	Расписание.Начало,
	|	Расписание.Окончание,
	|	Расписание.КоличествоДней,
	|	СУММА(Расписание.ВремяРаботы) КАК ВремяРаботы,
	|	Расписание.Календарь,
	|	Расписание.МаршрутныйЛист
	|ИЗ
	|	Расписание КАК Расписание
	|
	|СГРУППИРОВАТЬ ПО
	|	Расписание.ВидРабочегоЦентра,
	|	Расписание.Подразделение,
	|	Расписание.РабочийЦентр,
	|	Расписание.Начало,
	|	Расписание.Окончание,
	|	Расписание.Календарь,
	|	Расписание.МаршрутныйЛист,
	|	Расписание.КоэффициентВремениРаботы,
	|	Расписание.КоличествоДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РабочиеЦентры.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РабочиеЦентры.Календарь
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РабочиеЦентры.ВидРабочегоЦентра.Календарь
	|		ИНАЧЕ ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|	КОНЕЦ КАК Календарь
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО РабочиеЦентры.ВидРабочегоЦентра.Подразделение = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(&ЛюбойРабочийЦентр
	|			ИЛИ РабочиеЦентры.Ссылка В (&СписокРабочихЦентров))
	|	И (&ЛюбоеПодразделение
	|			ИЛИ РабочиеЦентры.ВидРабочегоЦентра.Подразделение В (&СписокПодразделений))";
	
	Запрос.УстановитьПараметр("ЛюбоеПодразделение",   ЗначенияОтбораДанных.СписокПодразделений.Количество() = 0);
	Запрос.УстановитьПараметр("ЛюбойРабочийЦентр",    ЗначенияОтбораДанных.СписокРабочихЦентров.Количество() = 0);
	Запрос.УстановитьПараметр("СписокПодразделений",  ЗначенияОтбораДанных.СписокПодразделений);
	Запрос.УстановитьПараметр("СписокРабочихЦентров", ЗначенияОтбораДанных.СписокРабочихЦентров);
	Запрос.УстановитьПараметр("Начало",               ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("Окончание",            ЗначенияОтбораДанных.ОкончаниеПериода);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРабочихЦентров = Результат[2].Выгрузить();
	
	СписокГрафиков = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаРабочихЦентров.ВыгрузитьКолонку("Календарь"));
	Расписание = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
						СписокГрафиков, 
						ЗначенияОтбораДанных.НачалоПериода, 
						ЗначенияОтбораДанных.ОкончаниеПериода);
	
	Расписание.Индексы.Добавить("ГрафикРаботы,ДатаГрафика");
	
	ДобавитьДоступноеВремя(ТаблицаРабочихЦентров, Расписание, ДанныеОЗагрузке);
	
	ТаблицаЗанятостьРЦ = Результат[1].Выгрузить();
	ДобавитьЗанятоеВремя(ТаблицаЗанятостьРЦ, Расписание, ЗначенияОтбораДанных, ДанныеОЗагрузке);

	// Вычислим наличие перегрузки и недозагрузки
	ДанныеОЗагрузке.Свернуть("Подразделение,РабочийЦентр,ВидРабочегоЦентра,ПериодГрафика,МаршрутныйЛист", "ДоступноеВремя,ОбъемРабот");
	ДанныеОЗагрузке.Колонки.Добавить("Загрузка",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	ДанныеОЗагрузке.Колонки.Добавить("ЕстьНедозагрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ДанныеОЗагрузке.Колонки.Добавить("ЕстьПерегрузка",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	РазрезыРасчетаЗагрузки = "Подразделение,РабочийЦентр,ВидРабочегоЦентра,ПериодГрафика";
	ДанныеОЗагрузке.Индексы.Добавить(РазрезыРасчетаЗагрузки);
	
	ДанныеОЗагрузкеКопия = ДанныеОЗагрузке.Скопировать();
	ДанныеОЗагрузкеКопия.Свернуть(РазрезыРасчетаЗагрузки, "ДоступноеВремя,ОбъемРабот");
	Отбор = Новый Структура(РазрезыРасчетаЗагрузки);
	
	Для каждого СтрокаЗагрузка Из ДанныеОЗагрузкеКопия Цикл
		
		Если СтрокаЗагрузка.ДоступноеВремя <> 0 Тогда
			Загрузка = СтрокаЗагрузка.ОбъемРабот / СтрокаЗагрузка.ДоступноеВремя * 100;
		ИначеЕсли СтрокаЗагрузка.ОбъемРабот <> 0 Тогда
			Загрузка = 100;
		Иначе
			Запгрузка = 0;
		КонецЕсли;

		Если ЗначенияОтбораДанных.Перегрузка <> 0
			И Загрузка >= ЗначенияОтбораДанных.Перегрузка Тогда
			ЕстьПерегрузка = 1;
		Иначе
			ЕстьПерегрузка = 0;
		КонецЕсли;
		
		Если ЗначенияОтбораДанных.Недозагрузка <> 0 
			И Загрузка < ЗначенияОтбораДанных.Недозагрузка Тогда
			ЕстьНедозагрузка = 1;
		Иначе
			ЕстьНедозагрузка = 0;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаЗагрузка);
		НайденныеСтроки = ДанныеОЗагрузке.НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.Загрузка = Загрузка;
			Строка.ЕстьПерегрузка = ЕстьПерегрузка;
			Строка.ЕстьНедозагрузка = ЕстьНедозагрузка;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОЗагрузке;

КонецФункции

Процедура ДобавитьДоступноеВремя(ТаблицаРабочихЦентров, Расписание, ДанныеОЗагрузке)

	Для каждого СтрокаРасписание Из Расписание Цикл
		СтруктураПоиска = Новый Структура("Календарь", СтрокаРасписание.ГрафикРаботы);
		РабочиеЦентрыСГрафикомРаботы = ТаблицаРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого РабочийЦентр Из РабочиеЦентрыСГрафикомРаботы Цикл
			СтрокаЗагрузка = ДанныеОЗагрузке.Добавить();
			СтрокаЗагрузка.Подразделение     = РабочийЦентр.Подразделение;
			СтрокаЗагрузка.РабочийЦентр      = РабочийЦентр.РабочийЦентр;
			СтрокаЗагрузка.ВидРабочегоЦентра = РабочийЦентр.ВидРабочегоЦентра;
			СтрокаЗагрузка.ПериодГрафика     = СтрокаРасписание.ДатаГрафика;
			СтрокаЗагрузка.ДоступноеВремя    = СтрокаРасписание.Длительность / 3600;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗанятоеВремя(ТаблицаЗанятостьРЦ, Расписание, ЗначенияОтбораДанных, ДанныеОЗагрузке)

	Для каждого ДанныеОЗанятости Из ТаблицаЗанятостьРЦ Цикл
		
		Если ДанныеОЗанятости.КоличествоДней = 1 Тогда
			
			// РЦ занят в течении одного дня
			ВремяРаботыРЦ = Цел(ДанныеОЗанятости.ВремяРаботы * ДанныеОЗанятости.КоэффициентВремениРаботы);
			
			СтрокаЗагрузка = ДанныеОЗагрузке.Добавить();
			СтрокаЗагрузка.Подразделение     = ДанныеОЗанятости.Подразделение;
			СтрокаЗагрузка.РабочийЦентр      = ДанныеОЗанятости.РабочийЦентр;
			СтрокаЗагрузка.ВидРабочегоЦентра = ДанныеОЗанятости.ВидРабочегоЦентра;
			СтрокаЗагрузка.ПериодГрафика     = НачалоДня(ДанныеОЗанятости.Начало);
			СтрокаЗагрузка.ОбъемРабот        = ВремяРаботыРЦ / 3600;
			СтрокаЗагрузка.МаршрутныйЛист    = ДанныеОЗанятости.МаршрутныйЛист;
			
		Иначе	
			
			// РЦ занят в течении нескольких дней
			// Объем работ нужно вычислять на каждый день.
			
			Если ДанныеОЗанятости.Начало >= ЗначенияОтбораДанных.НачалоПериода Тогда
				НачалоПериода = ДанныеОЗанятости.Начало;
			Иначе
				НачалоПериода = ЗначенияОтбораДанных.НачалоПериода;
			КонецЕсли; 
			Если ДанныеОЗанятости.Окончание <= ЗначенияОтбораДанных.ОкончаниеПериода Тогда
				ОкончаниеПериода = ДанныеОЗанятости.Окончание;
			Иначе
				ОкончаниеПериода = ЗначенияОтбораДанных.ОкончаниеПериода;
			КонецЕсли; 
			
			ПериодГрафика = НачалоДня(НачалоПериода);
			
			Пока ПериодГрафика <= ОкончаниеПериода Цикл
			
				СтруктураПоиска = Новый Структура("ГрафикРаботы,ДатаГрафика", ДанныеОЗанятости.Календарь, ПериодГрафика);
				СписокСтрок = Расписание.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаРасписание Из СписокСтрок Цикл
					
					НачалоРасписания = СтрокаРасписание.ДатаГрафика 
										+ Час(СтрокаРасписание.ВремяНачала) * 3600 
										+ Минута(СтрокаРасписание.ВремяНачала) * 60;
					
					Если НачалоРасписания >= НачалоПериода Тогда
						ВремяНачала = НачалоРасписания;
					Иначе
						ВремяНачала = НачалоПериода;
					КонецЕсли;
					
					ОкончаниеРасписания = СтрокаРасписание.ДатаГрафика 
										+ Час(СтрокаРасписание.ВремяОкончания) * 3600 
										+ Минута(СтрокаРасписание.ВремяОкончания) * 60;
					
					Если ОкончаниеРасписания <= ОкончаниеПериода Тогда
						ВремяОкончания = ОкончаниеРасписания;
					Иначе
						ВремяОкончания = ОкончаниеПериода;
					КонецЕсли;
					
					ВремяРаботыРЦ = ВремяОкончания - ВремяНачала;
					
					СтрокаЗагрузка = ДанныеОЗагрузке.Добавить();
					СтрокаЗагрузка.Подразделение     = ДанныеОЗанятости.Подразделение;
					СтрокаЗагрузка.РабочийЦентр      = ДанныеОЗанятости.РабочийЦентр;
					СтрокаЗагрузка.ВидРабочегоЦентра = ДанныеОЗанятости.ВидРабочегоЦентра;
					СтрокаЗагрузка.ПериодГрафика     = ПериодГрафика;
					СтрокаЗагрузка.ОбъемРабот        = ВремяРаботыРЦ / 3600;
					СтрокаЗагрузка.МаршрутныйЛист    = ДанныеОЗанятости.МаршрутныйЛист;
					
				КонецЦикла; 
				
				ПериодГрафика = ПериодГрафика + 86400;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
 
Функция ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы)

	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "Период").Значение;
	
	ПараметрПерегрузка = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "Перегрузка");
	Перегрузка = ?(ПараметрПерегрузка.Использование, ПараметрПерегрузка.Значение, 0);
	
	ПараметрНедозагрузка = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "Недозагрузка");
	Недозагрузка = ?(ПараметрНедозагрузка.Использование, ПараметрНедозагрузка.Значение, 0);
	
	ЭлементыОтбора = НастройкиОсновнойСхемы.Отбор.Элементы;
	
	СписокПодразделений  = Новый СписокЗначений;
	СписокРабочихЦентров = Новый СписокЗначений;
	Если ЭлементыОтбора <> Неопределено Тогда
		Подразделение  = ЗначениеОтбора("Подразделение", ЭлементыОтбора);
		Если Подразделение <> Неопределено И ТипЗнч(Подразделение) = Тип("СписокЗначений") Тогда
			СписокПодразделений.ЗагрузитьЗначения(Подразделение.ВыгрузитьЗначения());
		ИначеЕсли Подразделение <> Неопределено Тогда
			СписокПодразделений.Добавить(Подразделение);
		КонецЕсли;
		
		РабочийЦентр = ЗначениеОтбора("РабочийЦентр", ЭлементыОтбора);
		Если РабочийЦентр <> Неопределено И ТипЗнч(РабочийЦентр) = Тип("СписокЗначений") Тогда
			СписокРабочихЦентров.ЗагрузитьЗначения(РабочийЦентр.ВыгрузитьЗначения());
		ИначеЕсли РабочийЦентр <> Неопределено Тогда
			СписокРабочихЦентров.Добавить(РабочийЦентр);
		КонецЕсли;
	КонецЕсли; 
	
	ЗначенияОтбораДанных = Новый Структура;
	ЗначенияОтбораДанных.Вставить("СписокПодразделений",  СписокПодразделений);
	ЗначенияОтбораДанных.Вставить("СписокРабочихЦентров", СписокРабочихЦентров);
	ЗначенияОтбораДанных.Вставить("НачалоПериода",        Период.ДатаНачала);
	ЗначенияОтбораДанных.Вставить("ОкончаниеПериода",     Период.ДатаОкончания);
	ЗначенияОтбораДанных.Вставить("Перегрузка",           Перегрузка);
	ЗначенияОтбораДанных.Вставить("Недозагрузка",         Недозагрузка);
	
	Возврат ЗначенияОтбораДанных;
	
КонецФункции

Функция ЗначениеОтбора(ИмяПоля, ЭлементыОтбора)

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для каждого ЭлементКоллекции Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементКоллекции.ЛевоеЗначение = Поле 
			И ЭлементКоллекции.Использование Тогда
			
			Возврат ЭлементКоллекции.ПравоеЗначение;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

Функция ПараметрыДиаграмм()
	// Переопределим и дополним параметры диаграмм
	ПараметрыДиаграмм = КомпоновкаДанныхСервер.ПараметрыДиаграмм(КомпоновщикНастроек);
	
	ПараметрыДиаграмм.Вставить("Отчет", ЭтотОбъект);
	ПараметрыДиаграмм.Вставить("РасширенноеОформлениеСерий", Истина);
	
	Возврат ПараметрыДиаграмм;
КонецФункции

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21