#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	
КонецФункции

#Область ОбработчикиБухгалтерскиеОтчеты

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт 
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст, Истина);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	СправкиРасчеты.ДобавитьФиксациюПервойТаблицы(ПараметрыОтчета, МакетКомпоновки);
	
КонецПроцедуры                                          

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Отчет выглядит, что он за полный отчетный период, но все данные для этого выбираются из записей,
	// сформированных регламентной операцией за последний месяц отчетного периода
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		Период = ПараметрыОтчета.КонецПериода;
	Иначе
		// "аварийно" ограничимся случайным периодом, так как выбирать все данные без отбора заведомо бессмысленно
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоМесяца", НачалоГода(Период));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецМесяца",  КонецМесяца(Период));
	
	// Параметры для заголовков колонок - СноскаНалоговыйПериод
	СноскаНалоговыйПериод = "";
	СправкиРасчеты.ДополнитьПериодОтчетаПримечанием(СноскаНалоговыйПериод, ПараметрыОтчета);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СноскаНалоговыйПериод", СноскаНалоговыйПериод);

	ПоказательОпределенияДолиПрибыли = НалоговыйУчет.ПоказательОпределенияДолиПрибыли(ПараметрыОтчета.КонецПериода,ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Показатель", ПоказательОпределенияДолиПрибыли);
	
	ПараметрыОтчета.ПоказательНУ = Истина;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	
	МассивСумм = Новый Массив;
	Если ПоказательОпределенияДолиПрибыли = Перечисления.ПоказателиДляОпределенияДолиПрибыли.СреднесписочнаяЧисленность Тогда 
		МассивСумм.Добавить("СреднесписочнаяЧисленность");
	Иначе
		МассивСумм.Добавить("РасходыПоОплатеТруда");
	КонецЕсли;
	МассивСумм.Добавить("СтоимостьОСПрошлыхМесяцев");
	МассивСумм.Добавить("СтоимостьОССледующегоМесяца");
	МассивСумм.Добавить("СтоимостьОС");
	МассивСумм.Добавить("СтоимостьАмортизируемогоИмущества");
	МассивСумм.Добавить("ДоляНалоговойБазы");
	
	Таблица = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"Доли");
	ГруппировкаПериод = НайтиПоИмени(Таблица.Строки,"ГруппировкаПериодаРасчета");
	ГруппировкаСтатус = НайтиПоИмени(Таблица.Строки,"ГруппировкаСтатусИФНС");
	ГруппировкаИФНС   = НайтиПоИмени(Таблица.Строки,"ГруппировкаИФНС");
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"КоличествоМесяцев");
	
	Для Каждого ИмяСумм Из МассивСумм Цикл
			ПодГруппа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСумм);
		КонецЦикла;
	КонецЦикла;	
	
	ЕстьРасчетыПоЗакрытымПодразделениям = РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.ЕстьРасчетыПоЗакрытымПодразделениям(
											ПараметрыОтчета.Организация,
											НачалоГода(ПараметрыОтчета.НачалоПериода),
											ПараметрыОтчета.КонецПериода);
											
	Если ЕстьРасчетыПоЗакрытымПодразделениям Тогда
											
		Группа = ГруппировкаСтатус.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Закрыто");
		Для Каждого ИмяСумм Из МассивСумм Цикл
				ПодГруппа = ГруппировкаСтатус.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСумм);
			КонецЦикла;
		КонецЦикла;
		
		ГруппировкаИФНС.Использование = Ложь;
		ГруппировкаИФНС = НайтиПоИмени(Таблица.Строки,"ГруппировкаИФНСПоСтатусам");
		
	Иначе
		ГруппировкаСтатус.Использование = Ложь;
	КонецЕсли;	
	
	Группа = ГруппировкаИФНС.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"РегистрацияВНалоговомОргане");
	Для Каждого ИмяСумм Из МассивСумм Цикл
			ПодГруппа = ГруппировкаИФНС.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСумм);
		КонецЦикла;
	КонецЦикла;	
		
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

#КонецЕсли
