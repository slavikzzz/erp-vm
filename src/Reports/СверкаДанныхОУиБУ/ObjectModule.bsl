#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.Вставить("РазрешеноМенятьВарианты", Ложь);
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтаксис-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ЭтаФорма.Параметры.Свойство("КлючВарианта") Тогда
		Если ЭтаФорма.Параметры.КлючВарианта = "СверкаПоРегистраторам" Тогда
			ЭтаФорма.КлючТекущегоВарианта = ЭтаФорма.Параметры.КлючВарианта;
		Иначе
			ЭтаФорма.КлючТекущегоВарианта = "СверкаБезПодразделений";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КлючВарианта = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "ПериодОтчета");
	Если ПериодОтчета <> Неопределено Тогда
		НачалоПериода = ПериодОтчета.Значение.ДатаНачала;
		КонецПериода = ?(ЗначениеЗаполнено(ПериодОтчета.Значение.ДатаОкончания), КонецДня(ПериодОтчета.Значение.ДатаОкончания), Дата(3999, 1, 1));
	КонецЕсли;
	
	ПараметрОрганизация = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "Организация");
	МассивОрганизаций = ?(ПараметрОрганизация.Использование 
										И ЗначениеЗаполнено(ПараметрОрганизация.Значение), ПараметрОрганизация.Значение, ДоступныеОрганизации());
	ПараметрРазделУчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "РазделУчета");
	РазделУчета = ?(ПараметрРазделУчета.Использование, ПараметрРазделУчета.Значение, "Все");
	
	// настроим представления счетов
	Параметр = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "ПредставлениеСчетовПоКоду");
	ПредставлениеПоКоду = Истина;
	Если Параметр <> Неопределено Тогда
		ПредставлениеПоКоду = Параметр.Значение;
	КонецЕсли;
	
	ПолеСчета = СхемаКомпоновкиДанных.НаборыДанных.ИсходныеДанные.Поля.Найти("СчетБУ");
	Если ПолеСчета <> Неопределено Тогда
		ПолеСчета.ВыражениеПредставления = ?(ПредставлениеПоКоду, "СчетБУ.Код", "СчетБУ.Код+"", ""+СчетБУ.Наименование");
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ВременныеТаблицы = ЗаполнитьВспомогательныеТаблицы();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки);
		
	УстановитьПривилегированныйРежим(Истина);
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗСебестоимостьТоваров",    ТаблицаСебестоимостьТоваров(ВременныеТаблицы, КлючВарианта));
	ВнешниеНаборыДанных.Вставить("ТЗДенежныеСредства",        ТаблицаДенежныеСредства(ВременныеТаблицы, КлючВарианта));
	ВнешниеНаборыДанных.Вставить("ТЗРасчетыСКонтрагентами",   ТаблицаРасчетыСКонтрагентами(ВременныеТаблицы, КлючВарианта));
	ВнешниеНаборыДанных.Вставить("ТЗПроизводственныеЗатраты", ТаблицаПроизводственныеЗатраты(ВременныеТаблицы, КлючВарианта));
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	ВременныеТаблицы.Закрыть();
	
	ПостОбработка(ДокументРезультат, ДанныеРасшифровки, КлючВарианта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьВспомогательныеТаблицы()
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросПланаСчетов();
	ЗапросСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСчетов.Выполнить();
	
	ЗапросСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросСчетов();
	ЗапросСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСчетов.Выполнить();

	ЗапросСчетов = РеглУчетВыборкиСерверПовтИсп.ЗапросСчетовПоУмолчанию();
	ЗапросСчетов.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросСчетов.Выполнить();
	
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ДобавитьУчетныеПолитикиОрганизаций(ВременныеТаблицы,
		МассивОрганизаций, НачалоПериода, КонецПериода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВременныеТаблицы;

КонецФункции

Функция ИнициализироватьЗапрос(ВременныеТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗапроса.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыЗапроса.Вставить("РазделУчета", РазделУчета);
	Отчеты.СверкаДанныхОУиБУ.ДополнитьПараметрамиПоУмолчанию(ПараметрыЗапроса);
	
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

Функция ТаблицаСебестоимостьТоваров(ВременныеТаблицы, КлючВарианта)
	
	Если Не (РазделУчета = "Все" Или РазделУчета = "Себестоимость") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос(ВременныеТаблицы);
	Запрос.Текст = Отчеты.СверкаДанныхОУиБУ.ТекстЗапроса("Себестоимость", КлючВарианта);
	
	ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Возврат ТЗ;
	
КонецФункции

Функция ТаблицаДенежныеСредства(ВременныеТаблицы, КлючВарианта)
	
	Если Не (РазделУчета = "Все" Или РазделУчета = "ДенежныеСредства") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ДобавитьВременнуюТаблицуДолгосрочныхСчетовСравнивающихсяКакКраткосрочные(ВременныеТаблицы);
	
	Запрос = ИнициализироватьЗапрос(ВременныеТаблицы);
	Запрос.Текст = Отчеты.СверкаДанныхОУиБУ.ТекстЗапроса("ДенежныеСредства", КлючВарианта);
	
	ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ТЗ1 = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		ТЗ1.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения, "NULL"));
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТЗ, ТЗ1);
	
	Возврат ТЗ1;
	
КонецФункции

Функция ТаблицаРасчетыСКонтрагентами(ВременныеТаблицы, КлючВарианта)
	
	Если Не (РазделУчета = "Все" Или РазделУчета = "Поставщики"
		 Или РазделУчета = "Клиенты" Или РазделУчета = "КредитыДепозиты"
		 Или РазделУчета = "Лизинг" Или РазделУчета = "ПрочиеСКонтрагентами") Тогда
		 
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ДобавитьВременнуюТаблицуДолгосрочныхСчетовСравнивающихсяКакКраткосрочные(ВременныеТаблицы);
	
	Запрос = ИнициализироватьЗапрос(ВременныеТаблицы);
	Запрос.Текст = Отчеты.СверкаДанныхОУиБУ.ТекстЗапроса(РазделУчета, КлючВарианта);
	
	ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Возврат ТЗ;
	
КонецФункции

Функция ТаблицаПроизводственныеЗатраты(ВременныеТаблицы, КлючВарианта)
	
	Если Не (РазделУчета = "Все" Или РазделУчета = "Расходы") Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос(ВременныеТаблицы);
	Запрос.Текст = Отчеты.СверкаДанныхОУиБУ.ТекстЗапроса("Расходы", КлючВарианта);
	
	ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Возврат ТЗ;
	
КонецФункции

Процедура ДобавитьВременнуюТаблицуДолгосрочныхСчетовСравнивающихсяКакКраткосрочные(ВременныеТаблицы)
	
	Если ВременныеТаблицы.Таблицы.Найти("ВТДолгосрочныеКакКраткосрочные") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Текст = Отчеты.СверкаДанныхОУиБУ.ТекстЗапросаВТДолгосрочныеКакКраткосрочные();
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область ДоработкаТабличногоДокумента

Функция ДокументыВРегламентированномУчетеОтражены(Дата)

	СтруктураВозврата = Новый Структура("ДанныеАктуальны, ЧислоДокументов, ГраницаОтражения", Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ЗакрытиеМесяцаСервер.ТекстЗапросаСостояниеОтраженияДокументов();
	
	ДатаОкончания = ?(ЗначениеЗаполнено(Дата), Дата, Дата(3999, 1, 1));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаКОтражениюВУчете = МассивРезультатов[1].Выбрать();
	ВыборкаНеОтраженоВУчете = МассивРезультатов[2].Выбрать();
	ВыборкаКОтражениюНеПроверены = МассивРезультатов[3].Выбрать();
	
	ЕстьДокументыНеОтраженныеВУчете = ВыборкаНеОтраженоВУчете.Следующий();
	ЕстьДокументыКОтражению = ВыборкаКОтражениюВУчете.Следующий();
	ЕстьДокументыКОтражениюНеПроверенные = ВыборкаКОтражениюНеПроверены.Следующий();
	
	Если ЕстьДокументыКОтражению И ВыборкаКОтражениюВУчете.ДатаНачала <= ДатаОкончания Тогда 
		
		СтруктураВозврата.ДанныеАктуальны = Ложь;
		СтруктураВозврата.ЧислоДокументов = ВыборкаКОтражениюВУчете.Количество;
		СтруктураВозврата.ГраницаОтражения = ВыборкаКОтражениюВУчете.ДатаНачала;
		
	ИначеЕсли ЕстьДокументыНеОтраженныеВУчете И ВыборкаНеОтраженоВУчете.ДатаНачала <= ДатаОкончания Тогда
		
		СтруктураВозврата.ДанныеАктуальны = Ложь;
		СтруктураВозврата.ЧислоДокументов = ВыборкаНеОтраженоВУчете.Количество;
		СтруктураВозврата.ГраницаОтражения = ВыборкаНеОтраженоВУчете.ДатаНачала;
		
	ИначеЕсли ЕстьДокументыКОтражениюНеПроверенные И ВыборкаКОтражениюНеПроверены.ДатаНачала <= ДатаОкончания Тогда
		
		СтруктураВозврата.ДанныеАктуальны = Ложь;
		СтруктураВозврата.ЧислоДокументов = ВыборкаКОтражениюНеПроверены.Количество;
		СтруктураВозврата.ГраницаОтражения = ВыборкаКОтражениюНеПроверены.ДатаНачала;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДоступныеОрганизации(Организация = Неопределено)
	СписокОрганизаций = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСправочника.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Организация
		|	И ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеСправочника.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	&Организация В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|	И ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)");
		Запрос.УстановитьПараметр("Организация", Организация);
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
	Иначе
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	Возврат СписокОрганизаций;
КонецФункции

Процедура ПостОбработка(ТабДок, ДанныеРасшифровки, КлючВарианта)
	
	СостояниеОтраженияДокументов = ДокументыВРегламентированномУчетеОтражены(КонецПериода);
	Если Не СостояниеОтраженияДокументов.ДанныеАктуальны Тогда
		ТабДок.Область("R1C1").Текст = НСтр("ru = 'Не все документы отражены в регламентированном учете, поэтому данные отчета могут быть неактуальны';
											|en = 'Not all documents are recorded in local accounting that is why the report data can be irrelevant'");;
		ТабДок.Область("R1C1").ЦветТекста = Метаданные.ЭлементыСтиля.ЦветТекстаПроблема.Значение;
	КонецЕсли;
	
	СписокЯчеек = Новый СписокЗначений;
	СписокЯчеек.Добавить("Начальный остаток");
	СписокЯчеек.Добавить("Приход");
	СписокЯчеек.Добавить("Расход");
	СписокЯчеек.Добавить("Конечный остаток");
	СписокЯчеек.Добавить("Показатели");
	
	ОбъединяемыеЯчейки = Новый СписокЗначений;
	ОбъединяемыеЯчейки.Добавить("Оперативный учет");
	ОбъединяемыеЯчейки.Добавить("Бухгалтерский учет");
	ОбъединяемыеЯчейки.Добавить("Отклонение (ОУ-БУ)");
	ОбъединяемыеЯчейки.Добавить("Начальный остаток");
	ОбъединяемыеЯчейки.Добавить("Начальное сальдо");
	ОбъединяемыеЯчейки.Добавить("Отклонение (начальный остаток)");
	ОбъединяемыеЯчейки.Добавить("Приход");
	ОбъединяемыеЯчейки.Добавить("Оборот Дт");
	ОбъединяемыеЯчейки.Добавить("Отклонение (приход)");
	ОбъединяемыеЯчейки.Добавить("Расход");
	ОбъединяемыеЯчейки.Добавить("Оборот Кт");
	ОбъединяемыеЯчейки.Добавить("Отклонение (расход)");
	ОбъединяемыеЯчейки.Добавить("Конечный остаток");
	ОбъединяемыеЯчейки.Добавить("Конечное сальдо");
	ОбъединяемыеЯчейки.Добавить("Отклонение (конечный остаток)");
	
	
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		МаксимальнаяВысотаШапки = 0;
		Для индКол = 1 По ТабДок.ШиринаТаблицы Цикл
			
			Если ТабДок.Область(индСтр, 1).Текст = "Итого" Тогда
				ТабДок.Область(индСтр, индКол).Расшифровка = Неопределено;
			КонецЕсли;

			Если ОбъединятьЯчейки(ТабДок, индСтр, индКол, СписокЯчеек, КлючВарианта) Тогда
				ТекстЗаголовка = ТабДок.Область(индСтр, индКол).Текст;
				Если КлючВарианта = "СверкаПоРегистраторам" Тогда
					ОбъединяемаяОбласть = ТабДок.Область(индСтр, индКол, Макс(индСтр, ТабДок.ФиксацияСверху), индКол);
				Иначе
					ВысотаШапки = 0;
					Для Индекс = 1 По 5 Цикл
						СледующаяЯчейка = ТабДок.Область(индСтр+Индекс, индКол, индСтр+Индекс, индКол).Текст;
						Если ОбъединяемыеЯчейки.НайтиПоЗначению(СледующаяЯчейка) <> Неопределено Тогда
							ВысотаШапки = ВысотаШапки + 1;
						КонецЕсли;
					КонецЦикла;
					ОбъединяемаяОбласть = ТабДок.Область(индСтр - 1, индКол, индСтр + ВысотаШапки, индКол);
					МаксимальнаяВысотаШапки = Макс(МаксимальнаяВысотаШапки, ВысотаШапки);
				КонецЕсли;
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				Если СписокЯчеек.Количество() = 0 Тогда 
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		индСтр = индСтр + МаксимальнаяВысотаШапки;
	КонецЦикла;

КонецПроцедуры

Функция ОбъединятьЯчейки(ТабДок, индСтр, индКол, СписокЯчеек, КлючВарианта)

	Ячейка = ТабДок.Область(индСтр, индКол);
	ЯчейкаКОбъединению = СписокЯчеек.НайтиПоЗначению(Ячейка.Текст);
	Если ЯчейкаКОбъединению <> Неопределено Тогда
		Если КлючВарианта = "СверкаПоРегистраторам" Тогда
			СписокЯчеек.Удалить(ЯчейкаКОбъединению);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли