#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, выведенные сводно за весь 
		|период отчета. Сальдо выводится на начало и на конец заданного периода.';
		|en = 'Earnings, deductions and payments to employees displayed for the whole
		| report period. Balance is displayed as of the beginning and end of the period.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникам");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно. 
		|Сальдо выводится на начало и на конец каждого месяца, включенного в период формирования отчета.';
		|en = 'Earnings, deductions and payments to employees grouped for each month. 
		|Balance is displayed for the start and end of each month included in the report generation period.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно и
		|выведенные в разрезе источников финансирования. Аналог отчета ""Анализ
		|зарплаты по сотрудникам (помесячно)"", но с точностью до источников финансирования.';
		|en = 'Earnings, deductions and payments to employees grouped by each month and
		|displayed by funding sources. Analog of the ""Analysis
		| of salary by employees (monthly)"" report but drilled down to funding sources.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ВедомостиСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'По каждой статье финансирования выводится отдельная ведомость.';
										|en = 'Separate statement is displayed for each financing item.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводНачисленийИУдержаний");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки.';
		|en = 'Summary of earnings and deductions that can be found in payrolls 
		|and payslips.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки с разбиением по источникам финансирования.';
		|en = 'Summary of earnings and deductions that can be found in payrolls 
		|and payslips divided by funding sources.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ПолныйСводНачисленийУдержанийИВыплат");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками.';
		|en = 'Summary of earnings (with the number of paid days and hours), deductions, payments 
		|and also start and closing balance of settlements with employees.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками с разбивкой по источникам финансирования.';
		|en = 'Summary of earnings (with the number of paid days and hours), deductions, payments 
		|and also start and closing balance of settlements with employees divided by funding sources.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т49");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость (Т-49).';
										|en = 'Pay statement (T-49).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Т51");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетная ведомость (Унифицированная форма Т-51).';
										|en = 'Payroll statement (Unified form Т-51).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛисток");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки могут выводиться с разбивкой по подразделениям.';
										|en = 'Payslips can be displayed by business units.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки, разбитые по источникам финансирования.';
										|en = 'Payslips by funding sources.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияИзЗарплаты");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям.
		|Цветом выделены сотрудники с размером удержаний более 20%.';
		|en = 'Deductions by kinds and total percent of deductions in relation to earnings. 
		|Employees whose deduction percent is more than 20% are highlighted.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияВРазрезеИсточниковФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям в разрезе источников финансирования.
		|Цветом выделены сотрудники с размером удержаний более 20%.';
		|en = 'Deductions by kinds and total percent of deductions in relation to earnings by funding sources. 
		|Employees whose deduction percent is more than 20% are highlighted.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РегламентированнаяФормаСправкаПоДСВ");
	НастройкиВарианта.Описание = 
		НСтр("ru = 'Справка об уплаченных налогоплательщиком суммах дополнительных страховых взносов
		|на накопительную часть трудовой пенсии.';
		|en = 'Statement of additional insurance contributions
		|for the funded component of labor pension paid by taxpayer.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокПоРабочимМестам");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки с разбивкой по рабочим местам могут выводиться по подразделениям.';
										|en = 'Payslips divided by workplaces can be displayed by business units.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки с разбивкой по рабочим местам и по источникам финансирования.';
										|en = 'Payslips by workplaces and funding sources.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "13ФО");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504401");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость (форма 0504401) до 2015 года.';
										|en = 'Pay statement (0504401 form) before 2015.'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504401с2015");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетно-платежная ведомость (форма 0504401).';
										|en = 'Pay statement (0504401 form).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Форма0504402");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетная ведомость (форма 0504402).';
										|en = 'Payroll (form 0504402).'");
		
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокУправленческий");
	НастройкиВарианта.Описание = НСтр("ru = 'Расчетные листки по управленческой заработной плате.';
										|en = 'Payslips for managerial payroll.'");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетныйЛистокПодробнее") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		ПараметрыПечати.Свойство("ПечатаемыйДокумент", ПечатаемыйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасчетныйЛистокПодробнее",
			"РасчетныйЛисток",
			ПечатаемыйДокумент);
						
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(Документ, Финансирование = Неопределено) Экспорт
	
	ОтчетОбъект = Отчеты.АнализНачисленийИУдержаний.Создать();
	ОтчетОбъект.ИнициализироватьОтчет();
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Т49");
	Если ВариантОтчета = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	НастройкиОтчета = ВариантОтчета.Настройки;
	
	РеквизитыДокумента = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
		"ПериодРегистрации, Организация, Подразделение");
	ДанныеВедомости = Документы[Документ.Метаданные().Имя].ДанныеВедомостиДляПечати(Документ);
	
	Период = РеквизитыДокумента.ПериодРегистрации;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период",        Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	СтруктураПараметров.Вставить("НачалоПериода", НачалоМесяца(Период));
	СтруктураПараметров.Вставить("КонецПериода",  КонецМесяца(Период));
	
	Для каждого ПараметрЗаполнения Из СтруктураПараметров Цикл
		
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ПараметрЗаполнения.Ключ);
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрЗаполнения.Значение;
			ЗначениеПараметра.Использование = Истина;
		Иначе
			НовыйПараметр = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			НовыйПараметр.Параметр = ПараметрКомпоновкиДанных;
			НовыйПараметр.Значение = ПараметрЗаполнения.Значение;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
		"Регистратор", 
		Документ, 
		ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
		"Организация", 
		РеквизитыДокумента.Организация, 
		ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
			"Подразделение", 
			РеквизитыДокумента.Подразделение, 
			ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
	КонецЕсли;
		
	Если ОбщегоНазначенияБЗККлиентСервер.ЗаполненоЗначениеСвойства(Финансирование, "СтатьяФинансирования") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
			"СтатьяФинансирования", 
			Финансирование.СтатьяФинансирования, 
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;
	Если ОбщегоНазначенияБЗККлиентСервер.ЗаполненоЗначениеСвойства(Финансирование, "СтатьяРасходов") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
			"СтатьяРасходов", 
			Финансирование.СтатьяРасходов, 
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор, 
		"Сотрудник.ГоловнойСотрудник", 
		ДанныеВедомости.ВыгрузитьКолонку("Сотрудник"), 
		ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Документ", Документ);
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеВедомости", ДанныеВедомости);
	Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
		ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПодразделениеВШапке", РеквизитыДокумента.Подразделение);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция РасчетныйЛисток(ФизическиеЛица, Организация, МесяцФормированияОтчета, ОтчетРасчетныйЛисток = Неопределено) Экспорт
	
	Возврат ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
		ФизическиеЛица, Организация, МесяцФормированияОтчета, МесяцФормированияОтчета, ОтчетРасчетныйЛисток).ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли