#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Формирует отчет.
//
// Параметры:
//  Параметры  - Структура - параметры формирования отчета:
//		* ПартияПроизводства - СправочникСсылка.ПартииПроизводства - партия производства,
//			которую необходимо вывести в отчет.
//		* СтатусГрафика - Число - статус отображаемого графика.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат формирования отчета.
//
Процедура СформироватьОтчет(Параметры, АдресХранилища) Экспорт
	
	ДиаграммаГанта = Новый ДиаграммаГанта;
	НастроитьОбщиеСвойстваДиаграммы(ДиаграммаГанта);
	
	Границы = Новый Структура("Начало, Окончание", '39991231', '00010101');
	
	ПолучитьДанныеИВывестиВДиаграмму(
		ДиаграммаГанта,
		Параметры.ПартияПроизводства,
		Параметры.СтатусГрафика,
		Границы);
	
	НастроитьШкалуВремениДиаграммы(ДиаграммаГанта, Границы);
	
	ПоместитьВоВременноеХранилище(ДиаграммаГанта, АдресХранилища);
	
КонецПроцедуры

#Область КомандыПодменюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений.
//  - Неопределено.
//
Функция ДобавитьКомандуГрафикПартииЗапуска(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиаграммаПроизводстваПартииЗапуска)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор      = Метаданные.Отчеты.ДиаграммаПроизводстваПартииЗапуска.ПолноеИмя();
		КомандаОтчет.Представление      = НСтр("ru = 'График партии запуска';
												|en = 'Starting lot schedule'");
		КомандаОтчет.ИмяФормы           = "Отчет.ДиаграммаПроизводстваПартииЗапуска.Форма";
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность           = "Обычное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьДанныеИВывестиВДиаграмму(ДиаграммаГанта, ПартияПроизводства, СтатусГрафика, Границы)

	ДиаграммаГанта.Обновление = Ложь;
	
	Данные = ГрафикИЗависимостиПоЭтапамЦепочки(ПартияПроизводства, СтатусГрафика);
	
	Если Данные.Этапы.Количество() > 0 Тогда
		
		Серия = СерияПоУмолчанию(ДиаграммаГанта);
		
		Интервалы = Новый Соответствие;
		Для каждого Строка Из Данные.Этапы Цикл
			
			Границы.Начало = МИН(Границы.Начало, Строка.Начало);
			Границы.Окончание = МАКС(Границы.Окончание, Строка.Окончание);
			
			Точка = УстановитьТочкуЭтапЦепочки(ДиаграммаГанта, Строка);
			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
			Интервал = ДобавитьИнтервалЭтапЦепочки(Значение, Строка);
			
			Интервалы.Вставить(Строка.ЭтапПроизводства, Интервал);
			
		КонецЦикла;
		
		// Связи между этапами.
		Для каждого Строка Из Данные.Зависимости Цикл
			
			Интервал = Интервалы.Получить(Строка.ЭтапПроизводства); // ИнтервалДиаграммыГанта - 
			СледующийИнтервал = Интервалы.Получить(Строка.СледующийЭтап);
			
			Если НЕ Интервал = Неопределено
				И НЕ СледующийИнтервал = Неопределено Тогда
				
				Связь = Интервал.Добавить(СледующийИнтервал);
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Ложь;
	
КонецПроцедуры

// Возвращает график и зависимости по этапам цепочки
//
// Параметры:
//  ПартияПроизводства - СправочникСсылка.ПартииПроизводства - партия.
//  СтатусГрафика - Число - статус графика производства.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * Этапы - ТаблицаЗначений - содержит:
//   * Зависимости - ТаблицаЗначений - 
//
Функция ГрафикИЗависимостиПоЭтапамЦепочки(ПартияПроизводства, СтатусГрафика)
	
	ТекстыЗапросовПакета = Новый Массив;
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		ТекстЗапроса =	
		"ВЫБРАТЬ
		|	Т.ЭтапПроизводства,
		|	Т.НачалоЭтапа КАК Начало,
		|	Т.ОкончаниеЭтапа КАК Окончание,
		|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
		|	ВЫБОР
		|		КОГДА Т.ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Завершен,
		|	Т.ЭтапПроизводства.РучноеРазмещениеВГрафике КАК РучноеРазмещение
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|		ПО Т.ЭтапПроизводства = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
		|ГДЕ
		|	Т.ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
		|	И Т.СтатусГрафика = &СтатусГрафика
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска, -Т.ЭтапПроизводства.ДлительностьДоВыпуска)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
		|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК Начало,
		|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа КАК Окончание
		|ПОМЕСТИТЬ ВТГрафикПоСтатусу
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ЭтапПроизводства,
		|	Т.Начало,
		|	Т.Окончание,
		|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
		|	Т.Завершен,
		|	Т.РучноеРазмещение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТГрафикПоСтатусу.ЭтапПроизводства КАК ЭтапПроизводства,
		|		ВТГрафикПоСтатусу.Начало КАК Начало,
		|		ВТГрафикПоСтатусу.Окончание КАК Окончание,
		|		ВЫБОР
		|			КОГДА ВТГрафикПоСтатусу.ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Завершен,
		|		ВТГрафикПоСтатусу.ЭтапПроизводства.РучноеРазмещениеВГрафике КАК РучноеРазмещение
		|	ИЗ
		|		ВТГрафикПоСтатусу КАК ВТГрафикПоСтатусу
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
		|		ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
		|		ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
		|		ВЫБОР
		|			КОГДА ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.РучноеРазмещениеВГрафике
		|	ИЗ
		|		РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|	ГДЕ
		|		ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
		|		И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
		|		И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
		|					(ВЫБРАТЬ
		|						ВТГрафикПоСтатусу.ЭтапПроизводства
		|					ИЗ
		|						ВТГрафикПоСтатусу)) КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|		ПО Т.ЭтапПроизводства = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска, -Т.ЭтапПроизводства.ДлительностьДоВыпуска)";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Т.ЭтапПроизводства"));
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
	|	ВТСвязиЭтапов.СледующийЭтап КАК СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|ГДЕ
	|	ВТСвязиЭтапов.Этап.ПартияПроизводства = &ПартияПроизводства
	|	И ВТСвязиЭтапов.СледующийЭтап.ПартияПроизводства = &ПартияПроизводства";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтапов(
		МенеджерВременныхТаблиц,
		ЭтапыЦепочки(ПартияПроизводства),
		Истина);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("Этапы", МассивРезультатов[МассивРезультатов.ВГраница()-1].Выгрузить());
	Результат.Вставить("Зависимости", МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ЭтапыЦепочки(ПартияПроизводства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
	|	И ЭтапПроизводства2_2.Проведен");
	
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция УстановитьТочкуЭтапЦепочки(ДиаграммаГанта, Данные)
	
	Результат = ДиаграммаГанта.УстановитьТочку(Данные.ЭтапПроизводства);
	Результат.Текст = Данные.ПредставлениеЭтапа;
	Результат.Расшифровка = Данные.ЭтапПроизводства;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьИнтервалЭтапЦепочки(Значение, Данные)
	
	Результат = Значение.Добавить();
	Результат.Начало = Данные.Начало;
	Результат.Конец = Данные.Окончание;
	Результат.Текст = ТекстИнтервалаДиаграммы(
		Данные.Начало, Данные.Окончание);
	Результат.Расшифровка = Данные.ЭтапПроизводства;
	Результат.Цвет = ЦветИнтервалаЭтапЦепочки(Данные.Завершен, Данные.РучноеРазмещение);
	
	Возврат Результат;
	
КонецФункции

Функция ЦветИнтервалаЭтапЦепочки(ЭтапЗавершен, РучноеРазмещение)
	
	Если ЭтапЗавершен Тогда
		Результат = ЦветаСтиля.ЦветФонаЭтапЗавершен;
	Иначе
		Если НЕ РучноеРазмещение Тогда
			Результат = ЦветаСтиля.ЦветФонаЭтапНеЗавершенЗапланированАвтоматически;
		Иначе
			Результат = ЦветаСтиля.ЦветФонаЭтапНеЗавершенЗапланированВручную;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьОбщиеСвойстваДиаграммы(ДиаграммаГанта)
	
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	ДиаграммаГанта.Окантовка = Ложь;
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ДиаграммаГанта.ВертикальнаяПрокрутка = Истина;
	ДиаграммаГанта.ОтображатьПустыеЗначения = Ложь;
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
	ДиаграммаГанта.ОбластьПостроения.Право = 1;
	
КонецПроцедуры

Процедура НастроитьШкалуВремениДиаграммы(ДиаграммаГанта, Границы)
	
	Если НЕ ЗначениеЗаполнено(Границы.Окончание) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиШкалы = УправлениеПроизводствомКлиентСервер.НастройкиШкалыДиаграммыГантаВРежимеВсеДанные(
		Границы.Начало, Границы.Окончание, 9);
	
	ШкалаВремениЭлементы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	Для Индекс = 1 По ШкалаВремениЭлементы.Количество()-1 Цикл
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[Индекс]);
	КонецЦикла;
	
	ЭлементШкалы = ШкалаВремениЭлементы.Добавить();
	ЭлементШкалы.Единица = НастройкиШкалы.Единица;
	ЭлементШкалы.Формат = НастройкиШкалы.Формат;
	
	Если ШкалаВремениЭлементы.Количество() = 2 Тогда
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[0]);
	КонецЕсли;
	
	ДиаграммаГанта.УстановитьПолныйИнтервал(
		НастройкиШкалы.НачалоПолногоИнтервала,
		НастройкиШкалы.ОкончаниеПолногоИнтервала);
	
КонецПроцедуры

Функция СерияПоУмолчанию(ДиаграммаГанта)
	
	Возврат ДиаграммаГанта.УстановитьСерию("ГрафикПроизводства");
	
КонецФункции

Функция ТекстИнтервалаДиаграммы(Начало, Окончание)
	
	ФорматнаяСтрока = УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	ФорматНачало = Формат(Начало, ФорматнаяСтрока);
	ФорматОкончание = Формат(Окончание, ФорматнаяСтрока);
	
	Если ФорматНачало = ФорматОкончание Тогда
		Результат = ФорматНачало;
	Иначе
		Результат = ФорматНачало + " - " + ФорматОкончание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

#КонецОбласти

#КонецЕсли