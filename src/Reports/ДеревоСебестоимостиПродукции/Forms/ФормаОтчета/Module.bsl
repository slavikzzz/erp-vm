#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчика;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение ключевых параметров отчета.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();
	СхемаКомпоновки = ОтчетОбъект.СхемаКомпоновкиДанных;
	СтруктураСебестоимости.АдаптироватьЗапросСКД(СхемаКомпоновки);
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	ПредопределенныеВарианты = Новый СписокЗначений;
	Для Каждого Вариант Из СхемаКомпоновки.ВариантыНастроек Цикл
		ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;
	
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
		КлючТекущегоВарианта = Параметры.КлючВарианта;
	Иначе
		КлючТекущегоВарианта = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ОтчетПолноеИмя + "/КлючТекущегоВарианта", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта) И ПредопределенныеВарианты.Количество() > 0 Тогда
		КлючТекущегоВарианта = ПредопределенныеВарианты[0].Значение;
	КонецЕсли;
	
	// Предварительная инициализация компоновщика (если требуется).
	АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресСхемы");
	Если РежимРасшифровки Тогда
		НовыеНастройкиКД = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные).Настройки;
		АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "АдресСхемы");
	КонецЕсли;
	Если ТипЗнч(АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемы);
		Если ТипЗнч(СхемаКомпоновки) = Тип("СхемаКомпоновкиДанных") Тогда
			АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
			Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Иначе
			АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	КонецЕсли;
	
	// Сохранение параметров открытия формы.
	СохранитьПараметрыФормы();
	
	// Определение настроек отчета.
	ТипОтчетаСтрокой = ВариантыОтчетов.ТипОтчетаСтрокой(Параметры.Отчет);
	Если ТипОтчетаСтрокой = Неопределено Тогда
		Информация      = ВариантыОтчетов.ИнформацияОбОтчете(ОтчетПолноеИмя, Истина);
		Параметры.Отчет = Информация.Отчет;
	КонецЕсли;
	
	УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ОтчетОбъект);
	ФормаПараметры.НачальныйКлючВарианта = КлючТекущегоВарианта;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		//++ НЕ УТКА
		Если ТипЗнч(Параметры.ПараметрКоманды) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			УстановитьОтборПоЗаказуНаПроизводство(ФормаПараметры.Отбор, Параметры.ПараметрКоманды);
		ИначеЕсли ТипЗнч(Параметры.ПараметрКоманды) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			ПереченьРеквизитов = "ПартияПроизводства, ПроизводствоНаСтороне, ТипПроизводственногоПроцесса, Распоряжение";
			РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ПараметрКоманды, ПереченьРеквизитов);
			
			Если Не РеквизитыЭтапа = Неопределено
				И РеквизитыЭтапа.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций 
				И НЕ РеквизитыЭтапа.ПроизводствоНаСтороне Тогда
				УстановитьОтборПоЗаказуНаПроизводство(ФормаПараметры.Отбор, РеквизитыЭтапа.Распоряжение);
			ИначеЕсли Не РеквизитыЭтапа = Неопределено
				И РеквизитыЭтапа.ПроизводствоНаСтороне Тогда
				УстановитьОтборПоОтчетамПереработчика(ФормаПараметры.Отбор, Параметры.ПараметрКоманды);
			Иначе
				ФормаПараметры.Отбор.Вставить("ПартияПродукции", Параметры.ПараметрКоманды);
			КонецЕсли;
			
		Иначе
		//-- НЕ УТКА
			ФормаПараметры.Отбор.Вставить("ПартияПродукции", Параметры.ПараметрКоманды);
		//++ НЕ УТКА
		КонецЕсли;
		//-- НЕ УТКА
			
	КонецЕсли;
	
	// Локальные переменные.
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЕдиницаИзмерения");
	ПараметрыВывода.Вставить("ТочностьЕдиницыИзмерения");
	ПараметрыВывода.Вставить("ОтображатьТипЗатрат");
	ПараметрыВывода.Вставить("ОтображатьОрганизацию");
	ПараметрыВывода.Вставить("ОтображатьПодразделениеЗатрат");
	ПараметрыВывода.Вставить("ДетализироватьСтоимостьДоСоставляющих");
	ПараметрыВывода.Вставить("ОтображатьПРВР");
	
	// Определение настроек отчета.
	НастройкиОтчета1 = СтруктураСебестоимости.ИнициализироватьНастройкиОтчета(
		Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
	НастройкиОтчета1.РазрешеноВыбиратьВарианты = Истина;
	НастройкиОтчета1.СхемаМодифицирована = Ложь;
	НастройкиОтчета1.ПредопределенныеВарианты = ПредопределенныеВарианты;
	НастройкиОтчета1.АдресСхемы = АдресСхемы;
	НастройкиОтчета1.КлючСхемы = "";
	НастройкиОтчета1.Контекстный = ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0;
	НастройкиОтчета1.ПолноеИмя = ОтчетПолноеИмя;
	НастройкиОтчета1.Наименование = СокрЛП(ОтчетМетаданные.Представление());
	НастройкиОтчета1.ОтчетСсылка = Параметры.Отчет;
	НастройкиОтчета1.Внешний = ТипЗнч(НастройкиОтчета1.ОтчетСсылка) = Тип("Строка");
	НастройкиОтчета1.Безопасный= БезопасныйРежим() <> Ложь;
	
	НастройкиОтчета1.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Истина;
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		Элементы.ФормироватьСразу.Пометка = Истина;
		НастройкиОтчета1.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
		
	Если Параметры.Свойство("СформироватьПриОткрытии")
		И Не Параметры.СформироватьПриОткрытии = Неопределено Тогда
		НастройкиОтчета1.ФормироватьСразу = Параметры.СформироватьПриОткрытии;
	КонецЕсли;
	
	// Скрытие команд вариантов.
	ВидимостьКомандВариантовОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов");	
	
	Если ВидимостьКомандВариантовОтчетов = Ложь Тогда
		НастройкиОтчета1.РазрешеноИзменятьВарианты = Ложь;
		НастройкиОтчета1.РазрешеноВыбиратьВарианты = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиОтчета1.РазрешеноИзменятьВарианты И Не ВариантыОтчетовПовтИсп.ПравоДобавления() Тогда
		НастройкиОтчета1.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;
	
	РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		НастройкиОтчета1, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);
	
	Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
		НастройкиОтчета1.РазрешеноИзменятьВарианты = Истина;
		НастройкиОтчета1.РазрешеноВыбиратьВарианты = Истина;
		ВариантМодифицирован                      = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиОтчета = НастройкиОтчета1;
	ОбновитьИнформациюОВариантеОтчета();
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Приведение зависимых элементов формы к кондиции.
	УстановитьВидимостьДоступность();
	
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкиОтчета.Контекстный Тогда
		ПараметрыЗаполнения = ОтчетыКлиентСервер.ПараметрыОбновленияФормыОтчета("НастройкиПоУмолчанию");
		
		Если ВариантМодифицирован Тогда
			ПараметрыЗаполнения.СброситьНастройкиВарианта = Истина;
			ПараметрыЗаполнения.ВариантМодифицирован      = Ложь;
		КонецЕсли;
		ПараметрыЗаполнения.СброситьПользовательскиеНастройки = Истина;
		ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина;
		
		Если НастройкиОтчета.ФормироватьСразу Тогда
			ПараметрыЗаполнения.Переформировать = Истина;
		КонецЕсли;
		
		ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				
				ОбновитьЭлементыФормыНастроек(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиент.ИмяСобытияИзменениеВарианта()
		Или ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОповещениеОбработано = Истина;
		ПодключитьОбработчикОжидания("ВидимостьДоступностьЕслиТребуется", 0.1, Истина);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
		Если КлючТекущегоВарианта = Неопределено Тогда
			КлючТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "КлючВарианта");
		КонецЕсли;
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест")
		Или Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастроек = КлючНастроекВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
	ВосстановитьВыбранныйУровеньГруппировок(КлючНастроек, ВыбранныйУровеньГруппировок, РежимРасшифровки);
	
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ВариантМодифицирован Тогда 
		ВосстановитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючНастроек, ВыводитьЗаголовкиНастроек, РежимРасшифровки);
	КонецЕсли;
	
	ПараметрыОбновления = ОтчетыКлиентСервер.ПараметрыОбновленияФормыОтчета("ПриОбновленииСоставаПользовательскихНастроекНаСервере");
 	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
	УстановитьВидимостьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭлементыНастроек = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			Или ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод")
			Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонИмени = "КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ЭлементыНастроек.Индекс(ЭлементНастройки);
		
		ДатаНачала = Элементы.Найти(ШаблонИмени + "ДатаНачала");
		ДатаОкончания = Элементы.Найти(ШаблонИмени + "ДатаОкончания");
		Если ДатаНачала = Неопределено Или ДатаОкончания = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Значение = ЭлементНастройки.Значение; // СтандартныйПериод - 
		Если ДатаНачала.АвтоОтметкаНезаполненного = Истина
			И Не ЗначениеЗаполнено(Значение.ДатаНачала)
			И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
			ТекстОшибки = НСтр("ru = 'Не указан период';
								|en = 'Period is not specified'");
			ПутьКДанным = ДатаНачала.ПутьКДанным;
		ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
			ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала';
								|en = 'Period end should be later than its start'");
			ПутьКДанным = ДатаОкончания.ПутьКДанным;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ПутьКДанным,, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ЗаполнитьКомандыВыбораВариантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)	 
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если НовыеНастройкиКД = Неопределено Или Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(
		КлючТекущегоВарианта) Тогда

		Возврат;
	КонецЕсли;

	ДополнительныеСвойства = НовыеНастройкиКД.ДополнительныеСвойства;

	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ДополнительныеСвойства.Удалить("КлючВарианта");
		ДополнительныеСвойства.Удалить("КлючПредопределенногоВарианта");
		ДополнительныеСвойства.Удалить("КонтекстВарианта");
		ДополнительныеСвойства.Удалить("ФормаПараметрыОтбор");
		ДополнительныеСвойства.Удалить("ВариантНаименование");
	КонецЕсли;

	Если РежимРасшифровки Тогда
		Если ТипЗнч(Параметры.Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
			ВариантыОтчетовСлужебный.ПодготовитьНастройкиОтчетаКРасшифровкеПоДетальнымЗаписям(
				ЭтотОбъект, НовыеНастройкиКД, Параметры.Расшифровка.ПрименяемыеНастройки);
		КонецЕсли;

		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
		КонецЕсли;
	КонецЕсли;

	ИнтеграцияПодсистемБСП.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.НовыеНастройкиXML = НовыеНастройкиXML;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовШапкиФормыПодключаемые

// Подключаемая команда выбора периода.
// Параметры:
//	Команда - КомандаФормы - изменяемое поле.
&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	РезультатЗапускаФоновогоЗадания = ФоновоеЗаданиеЗапустить(Истина);
	
	Если РезультатЗапускаФоновогоЗадания.ЗаданиеЗапущено Тогда
	
		Оповещение = Новый ОписаниеОповещения(
			"ПечатьПослеФормированияДерева",
			ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);	
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатЗапускаФоновогоЗадания.РезультатФоновогоЗадания,
			Оповещение,
			ПараметрыОжидания);

	Иначе
		Если РезультатЗапускаФоновогоЗадания.РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			ВывестиДеревоСебестоимостиНаПечать(РезультатЗапускаФоновогоЗадания.РезультатФоновогоЗадания.АдресРезультата);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройки(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Отчет.ДеревоСебестоимостиПродукции.Форма.ФормаОтчета.Команда.ВсеНастройки");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",                   Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",     НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	ОбновитьЭлементыФормыНастроек(Результат);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	ПараметрыЗаполнения = ОтчетыКлиентСервер.ПараметрыОбновленияФормыОтчета("НастройкиПоУмолчанию");
	Если ВариантМодифицирован Тогда
		ПараметрыЗаполнения.СброситьНастройкиВарианта = Истина;
		ПараметрыЗаполнения.ВариантМодифицирован = Ложь;
	КонецЕсли;
	ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина;
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	СтрокиДерева = ПолноеДеревоСебестоимости.ПолучитьЭлементы();
	ИдентификаторыКРазвороту = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		ПодчиненныеСтроки.Очистить();
		
		ИдентификаторыКРазвороту.Добавить(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	РазвернутьДеревоНаСервере(ИдентификаторыКРазвороту);
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыКРазвороту Цикл
		Элементы.ПолноеДеревоСебестоимости.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СтрокиДерева = ПолноеДеревоСебестоимости.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Элементы.ПолноеДеревоСебестоимости.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиКомандФормыПодключаемые

// Подключаемая произвольная команда.
// Параметры:
//	Команда - КомандаФормы - изменяемое поле.
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

// Подключаемая загрузить вариант отчета.
// Параметры:
//	Команда - КомандаФормы - изменяемое поле.
&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.';
										|en = 'Report option was not found.'"));
		Возврат;
	КонецЕсли;
	
	ВариантФормы = Найденные[0];
	
	ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	
	КлючУникальности = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, ВариантФормы.КлючВарианта);
	
	Если Элементы.ФормироватьСразу.Пометка Тогда
		ПодключитьОбработчикОжидания("СформироватьОтчет", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ТолькоБыстрые", Истина);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(ВыборПользователя, Контекст) Экспорт
	Если ВыборПользователя = Неопределено
		Или ВыборПользователя = КодВозвратаДиалога.Отмена
		Или ВыборПользователя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = ОтчетыКлиентСервер.ПараметрыОбновленияФормыОтчета("ИзменитьУсловияОтборов");;
	ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина;
	ПараметрыЗаполнения.УсловияОтборов = ВыборПользователя;
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПолноеДеревоСебестоимости

&НаКлиенте
Процедура ПолноеДеревоСебестоимостиПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ПолноеДеревоСебестоимости.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Если ПодчиненныеСтроки.Количество() > 1 Тогда
		Возврат;
	ИначеЕсли ПодчиненныеСтроки.Количество() = 1 Тогда
	
		
		ПодчиненнаяСтрока = ПодчиненныеСтроки[0]; // ДанныеФормыЭлементДерева
		ИдПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(ПолноеДеревоСебестоимости.НайтиПоИдентификатору(ИдПодчиненнойСтроки).Идентификатор) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолноеДеревоСебестоимостиПередРазворачиваниемСервер(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДеревоСебестоимостиПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ПолноеДеревоСебестоимости.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	ПодчиненныеСтроки.Очистить();
	ПодчиненныеСтроки.Добавить();
		
КонецПроцедуры

&НаКлиенте
Процедура ПолноеДеревоСебестоимостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ПолноеДеревоСебестоимости.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ИмяПоля = СтрЗаменить(Поле.Имя, "ПолноеДеревоСебестоимости", "");

	Если ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля]) Тогда
		ПоказатьЗначение(, ТекущиеДанные[ИмяПоля]);
	Иначе
		СообщениеПользователю = НСтр("ru = 'Значение не заполнено';
									|en = 'Value is not filled in'"); 
		ПоказатьЗначение(, СообщениеПользователю);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроек(ПараметрыОбновления)
	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь) Тогда
		ОчиститьСообщения();
		СформироватьОтчет();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления = Неопределено)
	ЗагрузитьНастройкиВКомпоновщик(ПараметрыОбновления);
	
	ОтчетыСервер.ОбновитьЭлементыФормыНастроек(
		ЭтотОбъект, Элементы.КомпоновщикНастроекПользовательскиеНастройки, ПараметрыОбновления);
	
	// Стандартный диалог не показывается если пользователю запрещено изменять варианты этого отчета.
	Если Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВКомпоновщик(ПараметрыЗагрузки)
	ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки);
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗагрузки);
	КонецЕсли;
	
	ДоступныеНастройки = ОтчетыСервер.ДоступныеНастройки(ПараметрыЗагрузки, НастройкиОтчета);
	
	СброситьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗагрузки, "СброситьНастройкиВарианта", Ложь);
	Если СброситьНастройкиВарианта Тогда
		ЗагрузитьВариант(КлючТекущегоВарианта, Ложь);
	КонецЕсли;
	
	ОтчетыСервер.СброситьПользовательскиеНастройки(ДоступныеНастройки, ПараметрыЗагрузки);
	
	ОтчетыСервер.ЗаполнитьДополнительныеСвойства(ОтчетОбъект,
		ДоступныеНастройки.Настройки,
		КлючТекущегоВарианта,
		НастройкиОтчета.КлючПредопределенногоВарианта,
		?(ФормаПараметры.НачальныйКлючВарианта = КлючТекущегоВарианта, КонтекстВарианта, ""),
		?(ФормаПараметры.НачальныйКлючВарианта = КлючТекущегоВарианта, ФормаПараметры.Отбор, Неопределено));
	
	Если ДоступныеНастройки.Настройки <> Неопределено И НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда 
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			ДоступныеНастройки.Настройки,
			ДоступныеНастройки.ПользовательскиеНастройки);
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(
		Отчет.КомпоновщикНастроек,
		ДоступныеНастройки.Настройки,
		ДоступныеНастройки.ПользовательскиеНастройки,
		ДоступныеНастройки.ФиксированныеНастройки);
	
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если НастройкиЗагружены
	   И ФормаПараметры.НачальныйКлючВарианта = КлючТекущегоВарианта
	   И ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	ФормаПараметры.ФиксированныеНастройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Если НастройкиОтчета.События.ПослеЗагрузкиНастроекВКомпоновщик Тогда
		ОтчетОбъект.ПослеЗагрузкиНастроекВКомпоновщик(Новый Структура);
	КонецЕсли;
	Если Не НастройкиОтчета.Пользовательский Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство(
			"ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	
	ОтчетыСервер.УстановитьДоступныеЗначения(ОтчетОбъект, ЭтотОбъект);
	ОтчетыСервер.ИнициализироватьПредопределенныеПараметрыВывода(
		НастройкиОтчета,
		Отчет.КомпоновщикНастроек.Настройки,
		ОтчетыСервер.ТребуетсяСброситьПредопределенныеПараметрыВывода(ПараметрыЗагрузки));
	
	Если ПараметрыЗагрузки.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	ДополнительныеСвойства.Вставить("КонтекстВарианта", КонтекстВарианта);
	
	// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
	Если НастройкиОтчета.СхемаМодифицирована Тогда
		ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.ФормаНастроекРасширенныйРежим = ПараметрыЗагрузки.ФормаНастроекРасширенныйРежим;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.ФормаНастроекИмяСтраницы = ПараметрыЗагрузки.ФормаНастроекИмяСтраницы;
	КонецЕсли;
	
	ОтчетыСервер.УстановитьУсловияОтборов(ПараметрыЗагрузки, Отчет.КомпоновщикНастроек);
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		Элементы.ФормироватьСразу.Пометка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ПараметрыЗагрузки = ОтчетыКлиентСервер.ПараметрыОбновленияФормыОтчета("");
	КонецЕсли;
	
	ПараметрыЗагрузки.ВариантМодифицирован                    = ВариантМодифицирован;
	ПараметрыЗагрузки.ПользовательскиеНастройкиМодифицированы = ПользовательскиеНастройкиМодифицированы;
	ПараметрыЗагрузки.ОтчетОбъектИлиПолноеИмя                 = НастройкиОтчета.ПолноеИмя;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗаголовки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",						Неопределено);
	СтруктураПараметров.Вставить("ТочностьЕдиницыИзмерения",				2);
	СтруктураПараметров.Вставить("ОтображатьТипЗатрат",						Ложь);
	СтруктураПараметров.Вставить("ОтображатьОрганизацию",					Ложь);
	СтруктураПараметров.Вставить("ОтображатьПодразделениеЗатрат",			Ложь);
	СтруктураПараметров.Вставить("ДетализироватьСтоимостьДоСоставляющих",	Ложь);
	СтруктураПараметров.Вставить("ДанныеПоСебестоимости",					1);
	СтруктураПараметров.Вставить("ОтображатьПРВР",							Ложь);
	ПолучитьЗначенияПараметровНастроекКД(СтруктураПараметров);
	
	#Область ЗаголовкиСумм
	ЗначениеСвойства = СтруктураПараметров.ЕдиницаИзмерения;
	
	Если СтруктураПараметров.ЕдиницаИзмерения <> 3 ИЛИ СтруктураПараметров.ЕдиницаИзмерения <> 6 Тогда
		СтруктураПараметров.ЕдиницаИзмерения = 0;
	КонецЕсли;
	
	ШаблонФормата = "ЧС=%1; ЧЦ=19; ЧДЦ=%2";
	СтрокаФормата = СтрШаблон(ШаблонФормата, 
		Формат(СтруктураПараметров.ЕдиницаИзмерения, "ЧН=0; ЧГ=0"), 
		Формат(СтруктураПараметров.ТочностьЕдиницыИзмерения, "ЧН=0; ЧГ=0"));
		
	Элементы.ПолноеДеревоСебестоимостиСумма.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиСуммаЗабалансовая.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиМатериальные.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиТрудозатраты.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиПостатейныеПостоянные.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиПостатейныеПеременные.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиДопРасходы.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиНалоговыйУчет.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиПостояннаяРазница.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиВременнаяРазница.Формат = СтрокаФормата;
	Элементы.ПолноеДеревоСебестоимостиНДД.Формат = СтрокаФормата;
	
	#КонецОбласти
	
	ЗначениеСвойства = СтруктураПараметров.ОтображатьОрганизацию;
	Элементы.ПолноеДеревоСебестоимостиОрганизация.Видимость = ЗначениеСвойства;
	
	ЗначениеСвойства = СтруктураПараметров.ОтображатьПодразделениеЗатрат;
	Элементы.ПолноеДеревоСебестоимостиПодразделение.Видимость = ЗначениеСвойства;
	
	ЗначениеСвойства = СтруктураПараметров.ОтображатьТипЗатрат;
	Элементы.ПолноеДеревоСебестоимостиТипЗатрат.Видимость = ЗначениеСвойства;
	
	ЗначениеСвойства = СтруктураПараметров.ДетализироватьСтоимостьДоСоставляющих;
	Элементы.ПолноеДеревоСебестоимостиМатериальные.Видимость	= ЗначениеСвойства;
	Элементы.ПолноеДеревоСебестоимостиТрудозатраты.Видимость	= ЗначениеСвойства;
	Элементы.ПолноеДеревоСебестоимостиДопРасходы.Видимость		= ЗначениеСвойства;
	Элементы.ПолноеДеревоСебестоимостиПостатейныеПеременные.Видимость = ЗначениеСвойства;
	Элементы.ПолноеДеревоСебестоимостиПостатейныеПостоянные.Видимость = ЗначениеСвойства;
	
	ЗначениеСвойства = РасчетСебестоимостиЛокализация.ПолучитьФункциональнуюОпциюУчетПоНДД();
	Элементы.ПолноеДеревоСебестоимостиНДД.Видимость = ЗначениеСвойства;
	
	Элементы.ПолноеДеревоСебестоимостиНалоговыйУчет.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И СтруктураПараметров.ДанныеПоСебестоимости = 4;
	Элементы.ПолноеДеревоСебестоимостиПостояннаяРазница.Видимость = СтруктураПараметров.ОтображатьПРВР
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И СтруктураПараметров.ДанныеПоСебестоимости = 4;
	Элементы.ПолноеДеревоСебестоимостиВременнаяРазница.Видимость = СтруктураПараметров.ОтображатьПРВР
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И СтруктураПараметров.ДанныеПоСебестоимости = 4;
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура УстановитьОтборПоЗаказуНаПроизводство(Отборы, ЗаказНаПроизводство)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапПроизводства2_2.Ссылка
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетыПереработчика.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика.Продукция КАК ОтчетыПереработчика
	|	ПО ОтчетыПереработчика.ЭтапПроизводства = ЭтапПроизводства2_2.Ссылка
	|
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетыПереработчика.Ссылка
	//-- Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетыПереработчика.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ОтчетыПереработчика
	|	ПО ОтчетыПереработчика.ЭтапПроизводства = ЭтапПроизводства2_2.Ссылка
	|
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетыПереработчика.Ссылка
	|";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказНаПроизводство);
	Этапы = Запрос.Выполнить().Выгрузить();
	
	Если Не Этапы.Количество() = 0 Тогда
		Отборы.Вставить("ПартияПродукции", Этапы.ВыгрузитьКолонку("Этап"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОтчетамПереработчика(Отборы, ЭтапПроизводства)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетыПереработчика.Ссылка КАК Этап
	|ИЗ
	|	Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ОтчетыПереработчика
	|
	|ГДЕ
	|	ОтчетыПереработчика.ЭтапПроизводства = &ЭтапПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетыПереработчика.Ссылка
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетыПереработчика.Ссылка КАК Этап
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ОтчетыПереработчика
	|
	|ГДЕ
	|	ОтчетыПереработчика.ЭтапПроизводства = &ЭтапПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетыПереработчика.Ссылка
	//-- Устарело_Переработка24
	|";
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	Этапы = Запрос.Выполнить().Выгрузить();
	
	Если Не Этапы.Количество() = 0 Тогда
		Отборы.Вставить("ПартияПродукции", Этапы.ВыгрузитьКолонку("Этап"));
	Иначе
		Отборы.Вставить("ПартияПродукции", ЭтапПроизводства);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

&НаСервере
Процедура ПолучитьЗначенияПараметровНастроекКД(СтруктураПараметров)
	
	КомпоновщикНастроекКД = Отчет.КомпоновщикНастроек;
	Для Каждого ТекПараметр Из СтруктураПараметров Цикл
		ПараметрКД = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКД.Настройки, ТекПараметр.Ключ);
		ИдентификаторНастройки = ПараметрКД.ИдентификаторПользовательскойНастройки;
		ПользовательскаяНастройкаКД = КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		
		Если Не ПользовательскаяНастройкаКД = Неопределено Тогда
			СтруктураПараметров[ТекПараметр.Ключ] = ПользовательскаяНастройкаКД.Значение;
		Иначе
			СтруктураПараметров[ТекПараметр.Ключ] = ПараметрКД.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЕслиТребуется()
	Если ВариантыПанелиКлючТекущегоВарианта <> " - " Тогда // Изменения уже применены
		Возврат;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСохраненииВарианта = Ложь)
	
	ПоказыватьКомандыВыбораВариантов = РежимВариантаОтчета() И НастройкиОтчета.РазрешеноВыбиратьВарианты;
	
	Если Не ПриСохраненииВарианта Тогда
		ПоказыватьКомандыИзмененияВарианта = ПоказыватьКомандыВыбораВариантов И НастройкиОтчета.РазрешеноИзменятьВарианты;
		РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);
		КоличествоДоступныхНастроек = ОтчетыСервер.КоличествоДоступныхНастроек(Отчет.КомпоновщикНастроек);
		
		Элементы.ВсеНастройки.Видимость = ПоказыватьКомандыИзмененияВарианта Или КоличествоДоступныхНастроек.Обычных > 0;
		Элементы.ГруппаВариантыОтчета.Видимость = ПоказыватьКомандыВыбораВариантов;
		
		РазрешеноСохранятьВариант = ПоказыватьКомандыИзмененияВарианта
			И Не РазрешеноВыбиратьИНастраиватьВариантыБезСохранения;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьВариант", "Видимость", РазрешеноСохранятьВариант);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьВариантЕще", "Видимость", РазрешеноСохранятьВариант);
		
		Элементы.ВыбратьВариант.Видимость = ПоказыватьКомандыВыбораВариантов;
		
		РазрешеноИспользоватьНастройки = ПоказыватьКомандыВыбораВариантов И КоличествоДоступныхНастроек.Итог > 0;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ВыбратьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		
		Элементы.ИзменитьУсловияОтборов.Видимость = КоличествоДоступныхНастроек.Итог > 0 И РежимВариантаОтчета();
		
		Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
			ВариантМодифицирован = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		
		Если ПоказыватьКомандыВыбораВариантов Тогда
			ЗаполнитьКомандыВыбораВариантов();
		КонецЕсли;
				
		НавигационнаяСсылка = "";
		Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка)
			И Не НастройкиОтчета.Внешний
			И Не НастройкиОтчета.Контекстный Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ПустыеНастройки = СтруктураСебестоимости.ИнициализироватьНастройкиОтчета(
		Отчет, КлючТекущегоВарианта, ОтчетОбъект);
		
	ЗаполнитьЗначенияСвойств(ПустыеНастройки, НастройкиОтчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПустыеНастройки, НастройкиОтчета, Ложь);
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = ПустыеНастройки.Наименование;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка';
											|en = 'Drill-down'") + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Если ИдентификаторКД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:';
											|en = 'Generation error:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура ПечатьПослеФормированияДерева(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено"
		Тогда
		ВывестиДеревоСебестоимостиНаПечать(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДеревоСебестоимостиНаПечать(АдресДереваВХранилище)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	ИменаМакетов = "ДеревоСебестоимости";
	ПараметрыПечати = ПараметрыПечатиДереваСебестоимости();
	ПараметрыПечати.Вставить("АдресДереваВХранилище", АдресДереваВХранилище);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Отчет.ДеревоСебестоимостиПродукции",
		ИменаМакетов,
		ПараметрКоманды,
		ЭтаФорма,
		ПараметрыПечати);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПечатиДереваСебестоимости()
	
	ПараметрыПечати = Новый Структура;
	
	НастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыПечати.Вставить("ПараметрыОтчета", ПолучитьПараметрыОтчета(НастройкиКД));
	ПараметрыПечати.Вставить("АдресОтбораВХранилище", ПоместитьВоВременноеХранилище(НастройкиКД.Отбор));
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыОтчета(НастройкиКД)
	
	СтруктураПараметров = Новый Структура();
	
	ПараметрыДанных = НастройкиКД.ПараметрыДанных;
	ПараметрПериод = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрДетализироватьСтоимостьДоСоставляющих = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДетализироватьСтоимостьДоСоставляющих"));
	ПараметрДанныеПоСебестоимости = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеПоСебестоимости"));
	ПараметрОтображатьПРВР = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтображатьПРВР"));
	
	СтруктураПараметров.Вставить("ДетализироватьСтоимостьДоСоставляющих", ПараметрДетализироватьСтоимостьДоСоставляющих.Значение);
	СтруктураПараметров.Вставить("ДанныеПоСебестоимости", ПараметрДанныеПоСебестоимости.Значение);
	СтруктураПараметров.Вставить("ОтображатьПРВР", ПараметрОтображатьПРВР.Значение);
	
	Если НЕ ПараметрПериод.Использование ИЛИ НЕ ЗначениеЗаполнено(ПараметрПериод.Значение) Тогда
		СтруктураПараметров.Вставить("Период", Новый СтандартныйПериод());
	Иначе
		СтруктураПараметров.Вставить("Период", ПараметрПериод.Значение);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДереваСебестоимости

&НаКлиенте
Процедура СформироватьОтчет()
	ОтчетСформирован = Ложь;
	ПолноеДеревоСебестоимости.ПолучитьЭлементы().Очистить();
	РезультатЗапускаФоновогоЗадания = ФоновоеЗаданиеЗапустить();
	Если РезультатЗапускаФоновогоЗадания.ЗаданиеЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
	Иначе
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить(ФормированиеДляПечатнойФормы = Ложь)
	
	Результат = Новый Структура("ЗаданиеЗапущено,РезультатФоновогоЗадания", Ложь, Неопределено);
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		ТекстОшибки = "";
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
		КонецЦикла;
		ПоказатьОшибкиФормирования(ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	// Запуск фонового задания
	СхемаКД		= ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	НастройкиКД	= Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "ВалютаУправленческогоУчета",
										ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета()); 
	
	ПараметрыДерева = СтруктураСебестоимости.ПараметрыДереваСебестоимости();
	ПараметрыДерева.ДинамическоеСчитывание	= НЕ ФормированиеДляПечатнойФормы;
	
	ПараметрыУзла = СтруктураСебестоимости.ПараметрыУзлаДереваСебестоимости();
	ПараметрыУзла.СхемаКД		= СхемаКД;
	ПараметрыУзла.НастройкиКД	= НастройкиКД;
	ПараметрыУзла.ИнтерактивнаяНастройка = Истина;
	
	СтруктураПараметров = Новый Структура("ДанныеПоСебестоимости", 1);
	ПолучитьЗначенияПараметровНастроекКД(СтруктураПараметров);
	ПараметрыУзла.Отборы.ДанныеПоСебестоимости = СтруктураПараметров.ДанныеПоСебестоимости;
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ПараметрыДерева", ПараметрыДерева);
	ПараметрыФормированияОтчета.Вставить("ПараметрыУзла", ПараметрыУзла);
	
	ИмяОтчета = СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Построение отчета: %1';
			|en = 'Creating report: %1'"),
		ИмяОтчета);
	ПараметрыЗапуска.ОжидатьЗавершение	= Ложь;
	ПараметрыЗапуска.ЗапуститьНеВФоне	= Ложь;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"СтруктураСебестоимости.ПостроитьДеревоСебестоимостиВФоне",
		ПараметрыФормированияОтчета,
		ПараметрыЗапуска);
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		Если НЕ ФормированиеДляПечатнойФормы Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		КонецЕсли;
	Иначе
		Если НЕ ФормированиеДляПечатнойФормы Тогда
			Элементы.Печать.Доступность = Ложь;
			Элементы.ГруппаОтчетФормируется.Видимость = Истина;
			Элементы.ПолноеДеревоСебестоимости.Видимость = Ложь;
		КонецЕсли;
		Результат.ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	// Дополнительная проверка настроек учета
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек, "Период");
	СтдПериод = ПараметрПериодОтчета.Значение; // СтандартныйПериод
	НачалоПериода = ?(ПараметрПериодОтчета.Использование, СтдПериод.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
	КонецПериода = ?(ПараметрПериодОтчета.Использование, СтдПериод.ДатаОкончания, ТекущаяДатаСеанса());
	
	ТекстПредупреждения = РасчетСебестоимостиПрикладныеАлгоритмы.ТекстПредупрежденияНеподдерживаемыеОрганизации(НачалоПериода, КонецПериода, Отчет.КомпоновщикНастроек);
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	Результат.Вставить("РезультатФоновогоЗадания", РезультатФоновогоЗадания);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Задание = ФоновоеЗаданиеПроверитьНаСервере();
	Если Задание.Выполняется Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформирован Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован';
												|en = 'Report is generated'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован';
												|en = 'Report is not generated'"), , Заголовок);
		КонецЕсли;
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеПроверитьНаСервере()
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		Иначе
			ПоказатьОшибкиФормирования(Задание.Ошибка);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	ЗначениеВРеквизитФормы(РезультатФормирования.ДеревоСебестоимости, "ПолноеДеревоСебестоимости");
	УстановитьВидимостьЗаголовки();
	
	ОтчетСформирован = Истина;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	//ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	//ПоказатьРезультатЗаполненияНастроек();
	//
	Элементы.Печать.Доступность = Истина;
	Элементы.ГруппаОтчетФормируется.Видимость = Ложь;
	Элементы.ПолноеДеревоСебестоимости.Видимость = Истина;
	//
	//ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура РазвернутьДеревоНаСервере(ИдентификаторыКРазвороту)
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыКРазвороту Цикл
		ПолноеДеревоСебестоимостиПередРазворачиваниемСервер(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолноеДеревоСебестоимостиПередРазворачиваниемСервер(ИдентификаторСтроки, СПодчиненными = Ложь)
	// общий подход к заполнению отбора параметров узла и условиям разузлования должен совпадать с:
	// - ОбщийМодуль.СтруктураСебестоимости.ЗаполнитьДеревоСебестоимости();
	// - ОбщийМодуль.СтруктураСебестоимости.РазузловатьУзелДереваСебестоимости(). 
	
	ТекущиеДанные = ПолноеДеревоСебестоимости.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные.Количество = 0 Тогда //проверка на отсторнированный выпуск в выбранном периоде
		Возврат;
	КонецЕсли;
	
	ДеревоСебестоимости = РеквизитФормыВЗначение("ПолноеДеревоСебестоимости");
	СтрокаДерева = ДеревоСебестоимости.Строки.Найти(ТекущиеДанные.Идентификатор, "Идентификатор", Истина);
	
	ПараметрыДерева = СтруктураСебестоимости.ПараметрыДереваСебестоимости();
	ПараметрыДерева.ДинамическоеСчитывание	= Не СПодчиненными;
	ПараметрыДерева.Результат = СтрокаДерева;
	
	ПараметрыУзла = СтруктураСебестоимости.ПараметрыУзлаДереваСебестоимости();
	
	Отборы = ПараметрыУзла.Отборы;
	Отборы.Продукция.Добавить(ТекущиеДанные.Номенклатура);
	Отборы.ХарактеристикиПродукции.Добавить(ТекущиеДанные.Характеристика);
	Отборы.СерииПродукции.Добавить(ТекущиеДанные.Серия);
	// При разузловании партии продукции учитываем отбор по назначению.
	// При разузловании полуфабрикатов отбор по назначению не нужен, т.к. полуфабрикат может быть выпущен без назначения или
	// с указанием другого назначения.
	Если ТекущиеДанные.ВидСтроки = Перечисления.ВидыСтрокДереваСебестоимости.ПартияПродукции Тогда
		Отборы.НазначенияПродукции.Добавить(ТекущиеДанные.Назначение);
	КонецЕсли;
	Отборы.ПартииПродукции.Добавить(ТекущиеДанные.Партия);
	Отборы.АналитикиУчетаПартийПродукции.Добавить(ТекущиеДанные.АналитикаУчетаПартий);
	Отборы.АналитикаУчетаЗатрата.Добавить(ТекущиеДанные.АналитикаУчетаЗатрата);
	// для знаменателя и количества продукции берем модуль значения, чтобы знак количества и сумм затрат определялся по числителю, который при выпуске будет > 0, а при сторно < 0
	Отборы.Числитель               = ТекущиеДанные.Числитель;
	Отборы.Знаменатель             = Макс(-ТекущиеДанные.Знаменатель, ТекущиеДанные.Знаменатель);
	Отборы.КоличествоПродукции     = Макс(-ТекущиеДанные.Количество,  ТекущиеДанные.Количество);
	Отборы.РазворачиватьДопРасходы = Истина;
	Отборы.ДатаИсходнойПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.ПартияПродукции, "Дата");
	Отборы.ДатаОкончания      = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек, "ДатаОкончания").Значение;
	
	Отборы.АналитикаУчетаВыходноеИзделие = ТекущиеДанные.АналитикаУчетаЗатрата;
	
	СтруктураПараметров = Новый Структура("ДанныеПоСебестоимости", 1);
	ПолучитьЗначенияПараметровНастроекКД(СтруктураПараметров);
	Отборы.ДанныеПоСебестоимости = СтруктураПараметров.ДанныеПоСебестоимости;
	
	ПараметрыУзла.Сумма = ТекущиеДанные.Сумма;
	ПараметрыУзла.Материальные = ТекущиеДанные.Материальные;
	ПараметрыУзла.ДопРасходы = ТекущиеДанные.ДопРасходы;
	ПараметрыУзла.Трудозатраты = ТекущиеДанные.Трудозатраты;
	ПараметрыУзла.ПостатейныеПеременные = ТекущиеДанные.ПостатейныеПеременные;
	ПараметрыУзла.ПостатейныеПостоянные = ТекущиеДанные.ПостатейныеПостоянные;
	ПараметрыУзла.НалоговыйУчет = ТекущиеДанные.НалоговыйУчет;
	ПараметрыУзла.ПостояннаяРазница = ТекущиеДанные.ПостояннаяРазница;
	ПараметрыУзла.ВременнаяРазница = ТекущиеДанные.ВременнаяРазница;
	ПараметрыУзла.СуммаЗабалансовая = ТекущиеДанные.СуммаЗабалансовая;
	
	ОписаниеПродукции = Новый Структура;
	ОписаниеПродукции.Вставить("АналитикаУчетаПродукции",		ТекущиеДанные.АналитикаУчетаПродукции);
	ОписаниеПродукции.Вставить("ПартияПродукции",				ТекущиеДанные.ПартияПродукции);
	ОписаниеПродукции.Вставить("АналитикаУчетаПартийПродукции",	ТекущиеДанные.АналитикаУчетаПартийПродукции);
	ОписаниеПродукции.Вставить("Уровень",						ТекущиеДанные.Уровень);
	
	СтруктураСебестоимости.ДеревоСебестоимостиПередРазворачиванием(ПараметрыДерева, ПараметрыУзла, ОписаниеПродукции);
	
	ВывестиНовыеЭлементыДереваСебестоимости(ТекущиеДанные, ПараметрыДерева.Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНовыеЭлементыДереваСебестоимости(ТекущиеДанные, Результат)
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	ДочерниеЭлементы.Очистить();
	
	Для каждого ТекСтрока Из Результат.Строки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.АналитикаУчетаЗатрата)
			И ТекСтрока.Сумма = 0
			И ТекСтрока.СуммаЗабалансовая = 0
			И ТекСтрока.НалоговыйУчет = 0
			И ТекСтрока.НДД = 0
			И ТекСтрока.Количество = 0 Тогда
				
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДочерниеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		ВывестиНовыеЭлементыДереваСебестоимости(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция РежимВариантаОтчета()
	Возврат ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта);
КонецФункции

#Область УровниГруппировок

&НаСервереБезКонтекста
Процедура СохранитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		КлючХраненияЗначения, "ВыбранныйУровеньГруппировок", ВыбранныйУровеньГруппировок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		КлючХраненияЗначения, "ВыбранныйУровеньГруппировок");
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда 
		ВыбранныйУровеньГруппировок = СохраненноеЗначение;
	Иначе
		ВыбранныйУровеньГруппировок = НеопределенныйУровеньГруппировок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеопределенныйУровеньГруппировок()
	Возврат 999;
КонецФункции

#КонецОбласти

#Область ВыводЗаголовковНастроек

&НаСервереБезКонтекста
Процедура СохранитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		КлючХраненияЗначения, "ВыводитьЗаголовкиНастроек", ВыводитьЗаголовкиНастроек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		КлючХраненияЗначения, "ВыводитьЗаголовкиНастроек");
	
	ВыводитьЗаголовкиНастроек = СохраненноеЗначение = Неопределено Или СохраненноеЗначение = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВариантов

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта, ОчиститьСтекНастроек = Истина)
	Если Не РежимРасшифровки И Не ВариантМодифицирован Тогда
		КлючОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1/%2/%3';
				|en = '%1/%2/%3'"),
			НастройкиОтчета.ПолноеИмя,
			КлючТекущегоВарианта,
			"ТекущиеПользовательскиеНастройки");
		
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
			КлючОбъекта, "", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
	СохранитьДанныеВНастройкахНаСервере();
	
	РежимРасшифровки = Ложь;
	ВариантМодифицирован = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Истина;
	
	ПоместитьВоВременноеХранилище(Неопределено, НастройкиОтчета.СвойстваРезультата.АдресИндексаСтруктурыОтчета);
	
	Если ОчиститьСтекНастроек Тогда 
		СтекНастроек.Очистить();
	КонецЕсли;
	
	УстановитьТекущийВариант(КлючВарианта);
	ОтчетыКлиентСервер.ОтобразитьСостояниеОтчета(
		ЭтотОбъект,
		НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.';
			|en = 'Another report option is selected. To generate the report, click ""Generate"".'"),
		БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ПометкаУдаления", Ложь);
	ПараметрыПоиска.Вставить("ПолучатьИтоговуюТаблицу", Истина);
	ТаблицаВариантов = ВариантыОтчетов.ТаблицаВариантовОтчетов(ПараметрыПоиска);
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование, Автор, ТолькоДляАвтора");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Группа = Элементы.ВариантыОтчета;
	ПоследнийИндекс = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Если СтрокаТаблицы.ТолькоДляАвтора = Истина
			И СтрокаТаблицы.Автор <> АвторизованныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Группа);
		Иначе
			ПоследнийИндекс = ПоследнийИндекс + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ПоследнийИндекс, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		Кнопка.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыФормы()
	
	ФормаПараметры = ВариантыОтчетов.СохраняемыеПараметрыФормыОтчета(Параметры);
	ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ОтчетОбъект)
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
	
	Расшифровка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Расшифровка");
	КлючТекущегоВариантаРасшифровки = "";
	Если ТипЗнч(Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		Настройки = ПолучитьИзВременногоХранилища(Расшифровка.Данные).Настройки;
		КлючТекущегоВариантаРасшифровки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "КлючВарианта", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючТекущегоВариантаРасшифровки) Тогда
		КлючТекущегоВарианта = КлючТекущегоВариантаРасшифровки;
		Если Не ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = "Расшифровка";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда 
			КлючОбъекта = ОтчетПолноеИмя + "/" + КлючНазначенияИспользования + "/КлючТекущегоВарианта";
		Иначе
			КлючОбъекта = ОтчетПолноеИмя + "/КлючТекущегоВарианта";
		КонецЕсли;
		
		КлючТекущегоВарианта = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта)
		Или (ЗначениеЗаполнено(Параметры.КлючВарианта) И КлючТекущегоВарианта <> Параметры.КлючВарианта) Тогда 
		
		Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда 
			КлючТекущегоВарианта = Параметры.КлючВарианта;
			
		ИначеЕсли ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
			Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
				КлючТекущегоВарианта = Вариант.Имя;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняется ключ контекстного варианты, который обычно исключен из интерфейса,
	//  т.е. Включен равен Ложь (см. Справочник.ПредопределенныеВариантыОтчетов.Включен = Ложь).
	//
	Если ЗначениеЗаполнено(КонтекстВарианта) Тогда 
		ВариантКонтекста = ?(ЗначениеЗаполнено(Параметры.КлючВарианта), Параметры.КлючВарианта, КлючТекущегоВарианта);
		ВариантыКонтекста.Добавить(ВариантКонтекста);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтекстВарианта)
		И ЗначениеЗаполнено(Параметры.КлючВарианта)
		И Параметры.КлючВарианта <> КлючТекущегоВарианта Тогда 
		
		// Управление передается платформе -
		// ключ варианта восстановится из стандартного хранилища.
		Параметры.КлючВарианта = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияНастроек

&НаКлиентеНаСервереБезКонтекста
Функция ПустойКлючВарианта()
	Возврат " - ";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекВариантаОтчета(ПолноеИмяОтчета, КлючВарианта)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1/%2", ПолноеИмяОтчета, КлючВарианта);
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеВНастройкахНаСервере(Настройки = Неопределено)
	
	КлючНастроек = КлючНастроекВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
	СохранитьВыбранныйУровеньГруппировок(КлючНастроек, ВыбранныйУровеньГруппировок, РежимРасшифровки);
	СохранитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючНастроек, ВыводитьЗаголовкиНастроек, РежимРасшифровки);
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Настройки["ФормаНастроекРасширенныйРежим"] = НастройкиОтчета.ФормаНастроекРасширенныйРежим;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыБСП

&НаСервере
Процедура УстановитьФиксированныеОтборы(СтруктураОтборов, НастройкиКД, НастройкиОтчета)
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных")
		Или СтруктураОтборов = Неопределено
		Или СтруктураОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыКД = НастройкиКД.ПараметрыДанных;
	ОтборыКД = НастройкиКД.Отбор;
	Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Имя = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение = Список;
		КонецЕсли;
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрКД.ИдентификаторПользовательскойНастройки = "";
			ПараметрКД.Использование    = Истина;
			ПараметрКД.РежимОтображения = Недоступный;
			ПараметрКД.Значение         = Значение;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
