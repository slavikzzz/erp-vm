
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКC

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруРеквизитовФормы(Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ЗаполнитьКодОтчетногоПериода(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
	= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		Элементы.ФормаОткрытьФормуКонтекстныхНовостей.Видимость = Истина;
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтотОбъект,
			"БП.Отчет.РО_РасчетПоСтраховымВзносам",
			ИмяФормы(ИмяФормы),
			,
			НСтр("ru = 'Новости: Расчет по страховым взносам';
				|en = 'Новости: Расчет по страховым взносам'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОбъектОтчета.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.ИнициализироватьОбычныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы,
								 				мСтруктураМногоуровневыхРазделов,
								 				СтруктураДанныхРазделов);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗначениеВДанныеФормы(ОбъектОтчета.СтруктураСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), мДеревоСтраницОтчета);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ИсходныйОтчетЗаПервыйКвартал = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ИсходныйОтчетЗаПервыйКвартал
			= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 3);
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		ОбъектОтчета.ЗаполнитьЗначенияПоУмолчанию(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  СтруктураРеквизитовФормы,
												  СтруктураДанныхРазделов);
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту;
		МесяцОкончания = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ТабличныйДокумент.Области.Период.Значение = СтруктураРеквизитовФормы.КодОтчетногоПериода[
		"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	НастройкиВидимости = РегламентированнаяОтчетность.НастройкиВидимостиЭлементовФормы(ЭтотОбъект);
	СтруктураРеквизитовФормы.Вставить("НастройкиВидимостиЭлементовФормы", НастройкиВидимости);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Если НЕ СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ПостояннаяВидимость Тогда
			Элементы.Заполнить.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьПериодОтчета(ЭтотОбъект);
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
															СтруктураРеквизитовФормы,
															ДатаПодписи,
															ТабличныйДокумент);
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
		Иначе
			ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
														СтруктураРеквизитовФормы,
														ДатаПодписи,
														ТабличныйДокумент);
		КонецЕсли;
		
		Если ТабличныйДокумент.Области.ПоМесту.Значение = "124"
			ИЛИ ТабличныйДокумент.Области.ПоМесту.Значение = "240" Тогда
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2", 1, Ложь);
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2Подр1", 1, Ложь);
		Иначе
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2", 0, Ложь);
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2Подр1", 0, Ложь);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.РСВ 5.05") Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов)
	
	Если СтруктураДанныхРазделов.СтруктураДанныхТитульный.Количество() > 0 Тогда
		СтруктураДанныхТитульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
	ИмяОтчета(ИмяФормы), ИмяФормы(ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2023Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	ИмяСекции_КодыПериода_ПоМесту120_124
	= "КодыПериода_ПоМесту120_124_" + Формат(Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) / 3, "ЧГ=");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор расчетного периода", КоллекцияСписковВыбора[ИмяСекции_КодыПериода_ПоМесту120_124]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации, лишения полномочий, пр.)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000101", 0, ,
	"Выбор кода типа плательщика", КоллекцияСписковВыбора["КодыТипаПлательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр020"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М104001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М206001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр060"]);
	
	//Подр. 1 разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110000101", 0, ,
	"Выбор кода тарифа плательщика", КоллекцияСписковВыбора["КодыТарифаПлательщика"]);
	
	//Подр. 2 разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М100101", 1, ,
	"Выбор кода основания исчисления", КоллекцияСписковВыбора["КодыОснованияИсчисления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М100201", 1, ,
	"Выбор кода класса условий труда", КоллекцияСписковВыбора["КодыКлассаУсловийТруда"]);
	
	//Подр. 3 разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00013М100101", 1, ,
	"Выбор кода основания исчисления", КоллекцияСписковВыбора["КодыОснованияИсчисленияНаДСО"]);
	
	//Прил. 1 к разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М100101", 1, ,
	"Выбор кода плательщика", КоллекцияСписковВыбора["КодыПлательщикаРаздел1Прил1"]);
	
	//Разд. 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020002001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел2_Стр020"]);
	
	//Подр. 1 разд. 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210007301", 1, ,
	"Выбор пола", КоллекцияСписковВыбора["ПризнакиМЖ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210007501", 2, ,
	"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
	
	//Разд. 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001001", 1, ,
	"Выбор признака аннулирования сведений", КоллекцияСписковВыбора["ПризнакиАннулирования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310009001", 1, ,
	"Выбор пола", КоллекцияСписковВыбора["ПризнакиМЖ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310010001", 2, ,
	"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00321М113001", 0, ,
	"Выбор кода категории застрахованного лица", КоллекцияСписковВыбора["КодыКатегорииЗастрахованногоЛица"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00322М119001", 0, ,
	"Выбор кода застрахованного лица", КоллекцияСписковВыбора["КодыЗастрахованногоЛица"]);
	
	//Разд. 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040002001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел4_Стр020"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040004001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел4_Стр040"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	КодФормыРеорганизации = СокрЛП(ТДО.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
	
	КодПериода = Неопределено;
	
	Если ПоМесту = "120" ИЛИ ПоМесту = "124" Тогда
		КодПериода = СокрЛП(ТДО.Период.Значение);
		ВозможныеКодыПериода = СтрРазделить("21,31,33,34,83,84,85,86", ",", Ложь);
		ТекВозмКодыПериода = Новый Массив;
		ТекВозмКодыПериода.Добавить(ВозможныеКодыПериода[МесяцОкончания / 3 - 1]);
		ТекВозмКодыПериода.Добавить(ВозможныеКодыПериода[МесяцОкончания / 3 + 3]);
		Если ЗначениеЗаполнено(КодПериода) И ТекВозмКодыПериода.Найти(КодПериода) = Неопределено Тогда
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		КонецЕсли;
	Иначе
		Если (ЗначениеЗаполнено(КодФормыРеорганизации) И КодФормыРеорганизации <> "9") Тогда
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"ЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		Иначе
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		КонецЕсли;
	КонецЕсли;
	
	Если КодПериода <> Неопределено Тогда
		ТДО.Период.Значение = КодПериода;
	КонецЕсли;
	
	ТДО.ОтчетГод.Значение = Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует,
										   Вариант,
										   ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
										   Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
				СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										НаимТекРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РазделыРеглОтчета = ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	РазделыРеглОтчета.Титульный = СтруктураДанныхТитульный;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("КодИФНС", КодИФНС);
	ПараметрыЗаписи.Вставить("КПП", КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыЗаписи.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
		
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ОбъектОтчета.ЗаписатьДокумент(СтруктураРеквизитовФормы.мВыбраннаяФорма, ПараметрыЗаписи) = Ложь Тогда
		
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(ПараметрыЗаписи.Ошибки[0]);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = ОбъектОтчета(ИмяФормы).СохраненныеДанныеОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена",
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого ЭлСтруктуры Из СтруктураДанныхТитульный Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "ПечататьСтраницуРаздела3") Тогда
		Печать("ПоказатьБланкСтраницыРаздела3");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "П000310008001" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии
		= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00321М112001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00322М118001") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоследнееЧисло = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПервоеЧисло = ПоследнееЧисло - 2;
		
		СписокМесяцев = Новый СписокЗначений;
		СписокМесяцев.Добавить("", "Пустое значение");
		СписокМесяцев.Добавить("1", ПредставлениеМесяцаОтчетногоПериода("1"));
		СписокМесяцев.Добавить("2", ПредставлениеМесяцаОтчетногоПериода("2"));
		СписокМесяцев.Добавить("3", ПредставлениеМесяцаОтчетногоПериода("3"));
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область),
		СписокМесяцев, Элементы.ТабличныйДокумент.ТекущаяОбласть, СписокМесяцев.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(
			Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010001001" ИЛИ ИмяПоказателя = "П000020001001" ИЛИ ИмяПоказателя = "П000040001001" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
				|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010002001" ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М104001")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М206001") ИЛИ ИмяПоказателя = "П000020002001"
		ИЛИ ИмяПоказателя = "П000040002001" ИЛИ ИмяПоказателя = "П000040004001" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
				|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000110000101" Тогда
		КодТарифа = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодТарифа = СтрДлина(КодТарифа);
		Если ДлинаКодТарифа = 2 ИЛИ ДлинаКодТарифа = 0 Тогда
			Область.Значение = КодТарифа;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Код тарифа должен состоять из 2 цифр. Значение очищено';
															|en = 'Код тарифа должен состоять из 2 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210005001" ИЛИ ИмяПоказателя = "П000310002001"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00401М104001") Тогда
		ИННФЛ = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИННФЛ = СтрДлина(ИННФЛ);
		Если ДлинаИННФЛ = 12 ИЛИ ДлинаИННФЛ = 0 Тогда
			Область.Значение = ИННФЛ;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'ИНН физического лица должен состоять из 12 цифр. Значение очищено';
				|en = 'ИНН физического лица должен состоять из 12 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210006001" ИЛИ ИмяПоказателя = "П000310003001"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00401М105001") Тогда
		СНИЛС = СокрЛП(ЗначПоказателя);
		ДлинаСНИЛС = СтрДлина(СНИЛС);
		Символ4 = "";
		Символ8 = "";
		Символ12 = "";
		Если ДлинаСНИЛС = 14 Тогда
			Символ4 = Сред(СНИЛС, 4, 1);
			Символ8 = Сред(СНИЛС, 8, 1);
			Символ12 = Сред(СНИЛС, 12, 1);
		КонецЕсли;
		Если ДлинаСНИЛС = 0 ИЛИ (ДлинаСНИЛС = 14
			И Символ4 = "-" И Символ8 = "-" И (Символ12 = " " ИЛИ Символ12 = "-")) Тогда
			Область.Значение = СНИЛС;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'СНИЛС должен состоять из 14 символов и соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра). Значение очищено';
				|en = 'СНИЛС должен состоять из 14 символов и соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра). Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210007501" ИЛИ ИмяПоказателя = "П000310010001" Тогда
		КодВидаДокумента = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодВидаДокумента = СтрДлина(КодВидаДокумента);
		Если ДлинаКодВидаДокумента = 2 ИЛИ ДлинаКодВидаДокумента = 0 Тогда
			Область.Значение = КодВидаДокумента;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код вида документа должен состоять из 2 цифр. Значение очищено';
				|en = 'Код вида документа должен состоять из 2 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210007701" ИЛИ ИмяПоказателя = "П000210007702"
		ИЛИ ИмяПоказателя = "П000310011001" ИЛИ ИмяПоказателя = "П000310011002" Тогда
		ВведенноеЗначение = СтрЗаменить(СокрЛП(ЗначПоказателя), "№", "");
		Если ИмяПоказателя = "П000210007701" ИЛИ ИмяПоказателя = "П000210007702" Тогда
			СерияДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000210007701").Значение), "№", "");
			НомерДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000210007702").Значение), "№", "");
		Иначе// "П000310011001" или "П000310011002"
			СерияДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000310011001").Значение), "№", "");
			НомерДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000310011002").Значение), "№", "");
		КонецЕсли;
		Если СтрДлина(СерияДокумента) + СтрДлина(НомерДокумента) <= 24 Тогда
			Область.Значение = ВведенноеЗначение;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Общее количество символов в серии и номере документа не должно превышать 24. Значение очищено';
				|en = 'Общее количество символов в серии и номере документа не должно превышать 24. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00101М104") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00101М105") Тогда
		Постфикс = Сред(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
		Если Лев(ИмяПоказателя, 10) = "П00101М104" Тогда
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П00101М105002" + Постфикс);
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П00101М105003" + Постфикс);
		Иначе
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П00101М104002" + Постфикс);
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П00101М104003" + Постфикс);
		КонецЕсли;
		Если ОблПарногоПоказателя1 <> Неопределено И ОблПарногоПоказателя2 <> Неопределено Тогда
			Если ЗначениеЗаполнено(ЗначПоказателя)
				И (ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) ИЛИ ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение))Тогда
				НомСтр = "В строке " + Сред(Постфикс, 2) + " группы строк 001-050";
				Если ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) И ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение) Тогда
					ТекстСообщения = "ru='%1 не допускается одновременное заполнение строк %2 и %3. Значения в строке %3 очищены'";
				Иначе
					ТекстСообщения = "ru='%1 не допускается одновременное заполнение строк %2 и %3. Значение в строке %3 очищено'";
				КонецЕсли;
				ОблПарногоПоказателя1.Очистить();
				ОблПарногоПоказателя2.Очистить();
				Стр1 = Сред(ИмяПоказателя, 9, 3);
				Стр2 = Сред(ОблПарногоПоказателя1.Имя, 9, 3);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(ТекстСообщения), НомСтр, Стр1, Стр2));
				Мофицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210002001" ИЛИ ИмяПоказателя = "П000210003001"
		ИЛИ ИмяПоказателя = "П000210004001" ИЛИ ИмяПоказателя = "П000210007001" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000210002001").Значение);
		СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000210003001").Значение);
		СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000210004001").Значение);
		СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000210007001").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000310004001" ИЛИ ИмяПоказателя = "П000310005001"
		ИЛИ ИмяПоказателя = "П000310006001" ИЛИ ИмяПоказателя = "П000310007001" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000310004001").Значение);
		СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000310005001").Значение);
		СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000310006001").Значение);
		СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000310007001").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000110000101" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("КодТарифа", ТабличныйДокумент.Область("П000110000101").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" И (Область.Имя = "КодФормыРеорганизации" ИЛИ Область.Имя = "ПоМесту") Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	// Особая обработка для подраздела 3.2 раздела 3.
	Если Область.Имя = "П000030001001" И СокрЛП(Область.Значение) = "1" Тогда
		УдалитьДополнительныеСтрокиВРазделе3();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел2Подр1"
			ИЛИ ИмяРаздела = "Раздел4" ИЛИ ИмяРаздела = "Раздел4Подр1" Тогда
			РасчетНаСервере(ИмяРаздела);
		Иначе
			РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
	СтруктураРеквизитовФормы, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
		// Особая обработка для подраздела 3.2 раздела 3.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000030001001");
			Если Обл <> Неопределено И СокрЛП(Обл.Значение) = "1" Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте_ЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте_ЗаполнитьСведенияОПодписантах(СсылкаНаРегистрациюВНО)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПоМесту", СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение));
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																			   СсылкаНаРегистрациюВНО,
																			   СтруктураРеквизитовФормы,
																			   ДополнительныеПараметры);
	
	ОбъектОтчета.ЗаполнитьСведенияОПодписантах(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ДатаПодписи,
											   СсылкаНаРегистрациюВНО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если Область.Значение = РеквизитыЭлемента.ЦифровойКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыЭлемента.ЦифровойКод;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочника(Результат)
	
	Возврат Новый Структура("ЦифровойКод", Результат.Код);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеМесяцаОтчетногоПериода(НомерМесяцаСтрокой)
	
	ПоследнийМесяцОтчетногоПериода = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ПоследнийМесяцОтчетногоПериода = 3 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru = '1 - январь';
						|en = '1 - январь'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru = '2 - февраль';
						|en = '2 - февраль'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru = '3 - март';
						|en = '3 - март'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 6 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru = '1 - апрель';
						|en = '1 - апрель'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru = '2 - май';
						|en = '2 - май'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru = '3 - июнь';
						|en = '3 - июнь'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 9 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru = '1 - июль';
						|en = '1 - июль'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru = '2 - август';
						|en = '2 - август'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru = '3 - сентябрь';
						|en = '3 - сентябрь'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 12 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru = '1 - октябрь';
						|en = '1 - октябрь'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru = '2 - ноябрь';
						|en = '2 - ноябрь'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru = '3 - декабрь';
						|en = '3 - декабрь'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО.Период, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО.ОГРНИП);
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "217" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначПоМесту = "120" ИЛИ ЗначПоМесту = "124" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Период);
				РазрешитьВводДанныхВОбласть(Форма, ТДО.ОГРНИП);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Период, Ложь);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.ОГРНИП);
			КонецЕсли;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		ТДО["СрСпЧисленность"].Формат
		= ?(ЗначПоМесту = "335" ИЛИ ЗначПоМесту = "222" ИЛИ ЗначКодФормыРеорг = "9", "", "ЧН=0");
		
		ТДО["СекцияПояснение_НомерКорректировки"].Видимость = ТДО.НомерКорректировки.Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		ТипПлательщика = СокрЛП(ТДО.П000010000101.Значение);
		
		Если ТипПлательщика = "2" Тогда
			
			Для каждого Обл Из ТДО Цикл
				Если Обл.Имя = "П000010003101" ИЛИ Обл.Имя = "П000010003201" ИЛИ Обл.Имя = "П000010003301"
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105301") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207101")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207201") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207301") Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				ИначеЕсли Обл.Имя = "П000010003001" ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105001")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207001") Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Обл Из ТДО Цикл
				Если Обл.Имя = "П000010003101" ИЛИ Обл.Имя = "П000010003201" ИЛИ Обл.Имя = "П000010003301"
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М105301") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207101")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207201") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М207301") Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если НЕ СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М1)
					И НЕ СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М2) Тогда
					АвтоРасчПоказатели.Добавить(Пок.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Инд = 1;
			Инд_Строка = "_1";
			Обл = ТДО.Найти("П00001М105101" + Инд_Строка);
			Пока Обл <> Неопределено Цикл
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Если СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М1) Тогда
						АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
					КонецЕсли;
				КонецЦикла;
				Инд = Инд + 1;
				Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
				Обл = ТДО.Найти("П00001М105101" + Инд_Строка);
			КонецЦикла;
			
			Инд = 1;
			Инд_Строка = "_1";
			Обл = ТДО.Найти("П00001М207101" + Инд_Строка);
			Пока Обл <> Неопределено Цикл
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Если СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М2) Тогда
						АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
					КонецЕсли;
				КонецЦикла;
				Инд = Инд + 1;
				Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
				Обл = ТДО.Найти("П00001М207101" + Инд_Строка);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр1" ИЛИ ИмяРаздела = "Раздел1Прил2" ИЛИ ИмяРаздела = "Раздел1Прил3"
		ИЛИ ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел2Подр1"
		ИЛИ ИмяРаздела = "Раздел4" ИЛИ ИмяРаздела = "Раздел4Подр1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = ТДО.Найти("П00012М101002" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = ТДО.Найти("П00012М101002" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр3" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = ТДО.Найти("П00013М101002" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = ТДО.Найти("П00013М101002" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Ном = 1;
		Постфикс = "_1";
		Обл = ТДО.Найти("П00101М100101_1");
		Пока Обл <> Неопределено Цикл
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Постфикс);
			КонецЦикла;
			
			Если СокрЛП(Обл.Значение) = "2" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00101М105002" + Постфикс));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00101М105003" + Постфикс));
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00101М105002" + Постфикс));
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00101М105003" + Постфикс));
			КонецЕсли;
			
			Ном = Ном + 1;
			Постфикс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
			Обл = ТДО.Найти("П00101М100101" + Постфикс);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ПрАннулирования = СокрЛП(ТДО["П000030001001"].Значение);
		
		ТДО["СекцияПояснение_Подраздел32"].Видимость = ПрАннулирования = "1";
		
		ИменаПоказателей
		= СтрРазделить("П00321М112001,П00321М113001,П00321М114001,П00321М115001,П00321М116001,П00321М117001", ",", Ложь);
		ИменаСуммовыхПоказателей = СтрРазделить("П00321М114001,П00321М115001,П00321М116001,П00321М117001", ",", Ложь);
		Ном = 1;
		Постфикс = "_1";
		Обл = ТДО[ИменаПоказателей[0] + Постфикс];
		Пока Обл <> Неопределено Цикл
			Для каждого ИмяПок Из ИменаПоказателей Цикл
				ТекОбл = ТДО.Найти(ИмяПок + Постфикс);
				Если ПрАннулирования = "1" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, ТекОбл);
				Иначе
					РазрешитьВводДанныхВОбласть(Форма, ТекОбл);
				КонецЕсли;
			КонецЦикла;
			
			ВыводитьНезаполненныеЧисловыеЗначенияКакНули
			= ЗначениеЗаполнено(ТДО["П00321М112001" + Постфикс].Значение)
			И ЗначениеЗаполнено(ТДО["П00321М113001" + Постфикс].Значение);
			
			Для каждого ИмяПок Из ИменаСуммовыхПоказателей Цикл
				ТекОбл = ТДО.Найти(ИмяПок + Постфикс);
				ТекОбл.Формат = ?(ВыводитьНезаполненныеЧисловыеЗначенияКакНули,
				СтрЗаменить(ТекОбл.Формат, "ЧН=-", "ЧН=0,00"), СтрЗаменить(ТекОбл.Формат, "ЧН=0,00", "ЧН=-"));
			КонецЦикла;
			
			Ном = Ном + 1;
			Постфикс = "_" + Формат(Ном, "ЧГ=");
			Обл = ТДО.Найти(ИменаПоказателей[0] + Постфикс);
		КонецЦикла;
		
		ИменаПоказателей = СтрРазделить("П00322М118001,П00322М119001,П00322М120001,П00322М121001", ",", Ложь);
		ИменаСуммовыхПоказателей = СтрРазделить("П00322М120001,П00322М121001", ",", Ложь);
		Ном = 1;
		Постфикс = "_1";
		Обл = ТДО[ИменаПоказателей[0] + Постфикс];
		Пока Обл <> Неопределено Цикл
			Для каждого ИмяПок Из ИменаПоказателей Цикл
				ТекОбл = ТДО.Найти(ИмяПок + Постфикс);
				Если ПрАннулирования = "1" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, ТекОбл);
				Иначе
					РазрешитьВводДанныхВОбласть(Форма, ТекОбл);
				КонецЕсли;
			КонецЦикла;
			
			ВыводитьНезаполненныеЧисловыеЗначенияКакНули
			= ЗначениеЗаполнено(ТДО["П00322М118001" + Постфикс].Значение)
			И ЗначениеЗаполнено(ТДО["П00322М119001" + Постфикс].Значение);
			
			Для каждого ИмяПок Из ИменаСуммовыхПоказателей Цикл
				ТекОбл = ТДО.Найти(ИмяПок + Постфикс);
				ТекОбл.Формат = ?(ВыводитьНезаполненныеЧисловыеЗначенияКакНули,
				СтрЗаменить(ТекОбл.Формат, "ЧН=-", "ЧН=0,00"), СтрЗаменить(ТекОбл.Формат, "ЧН=0,00", "ЧН=-"));
			КонецЦикла;
			
			Ном = Ном + 1;
			Постфикс = "_" + Формат(Ном, "ЧГ=");
			Обл = ТДО.Найти(ИменаПоказателей[0] + Постфикс);
		КонецЦикла;
		
		Ном = 0;
		Для каждого Обл Из ТДО Цикл
			Если СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00321М1")
				ИЛИ СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00322М1") Тогда
				Если ПрАннулирования = "1" Тогда
					Обл.Видимость = Ложь;
				Иначе
					Обл.Видимость = Истина;
				КонецЕсли;
				Ном = Ном + 1;
				Если Ном = 2 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел4Прил1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = ТДО.Найти("П00401М106001" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = ТДО.Найти("П00401М106001" + Инд_Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = ТДО.Найти(ИмяПок);
		Если Обл <> Неопределено Тогда
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	ОбрабатываемаяОбласть.Защита = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	ОбрабатываемаяОбласть.Защита = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
			ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		Форма.СтруктураРеквизитовФормы, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска)
			И Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ОбъектОтчета.ВставитьДопСтроку(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ЭлемСтруктуры.Ключ,
											   ИмяОбластиПреемника);
				Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1Подр1" ИЛИ ИмяРаздела = "Раздел2Подр1" ИЛИ ИмяРаздела = "Раздел3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел3" Тогда
		Обл = ТабличныйДокумент.Области.Найти("СекцияУдалитьСтраницу");
		Если Обл <> Неопределено Тогда
			Обл.Видимость = Истина;
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	НовВетка = ДеревоРаздела.Строки.Добавить();
	ОбъектОтчета.ИнициализироватьПодчиненныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													ИмяРаздела,
													НовВетка,
													мСтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ИндексыВыделенныхСтраницРаздела = ИндексыВыделенныхСтраницРаздела();
	
	Если ИндексыВыделенныхСтраницРаздела <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИндексыВыделенныхСтраницРаздела", ИндексыВыделенныхСтраницРаздела);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Удалить выделенные страницы?';
							|en = 'Удалить выделенные страницы?'");
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
							|en = 'Удалить текущую страницу?'");
		
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1Подр1" ИЛИ ИмяРаздела = "Раздел2Подр1" ИЛИ ИмяРаздела = "Раздел3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИндексыВыделенныхСтраницРаздела") Тогда
		
		СписокИндексовУдаляемыхСтраниц = Новый СписокЗначений;
		СписокИндексовУдаляемыхСтраниц.ЗагрузитьЗначения(ДополнительныеПараметры["ИндексыВыделенныхСтраницРаздела"]);
		СписокИндексовУдаляемыхСтраниц.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИндексыУдаляемыхСтраниц = СписокИндексовУдаляемыхСтраниц.ВыгрузитьЗначения();
		
		ИндексПоследнейУдаляемойСтраницы = ИндексыУдаляемыхСтраниц[0];
		ИндексПоследнейСтраницы = ДеревоДанных.Строки.Количество() - 1;
		
		Если ИндексПоследнейУдаляемойСтраницы = ИндексПоследнейСтраницы Тогда
			СтраницаДляФокусированияПослеУдаления = Неопределено;
		Иначе
			СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ИндексПоследнейУдаляемойСтраницы + 1];
		КонецЕсли;
		
		Для каждого ИндексУдаляемойСтраницы Из ИндексыУдаляемыхСтраниц Цикл
			ДеревоДанных.Строки.Удалить(ИндексУдаляемойСтраницы);
		КонецЦикла;
		
		Если СтраницаДляФокусированияПослеУдаления = Неопределено Тогда
			Если ДеревоДанных.Строки.Количество() = 0 Тогда
				ОбъектОтчета(ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
				СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, ИмяРаздела);
				ДеревоДанных = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[0];
			Иначе
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ДеревоДанных.Строки.Количество() - 1];
			КонецЕсли;
		КонецЕсли;
		
		НомСтраницыПослеУдаления = ДеревоДанных.Строки.Индекс(СтраницаДляФокусированияПослеУдаления) + 1;
		
	Иначе
		
		НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
		НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		
		НомСтраницыПослеУдаления
		= ?(НомУдаляемойСтраницы = НомПоследнейСтраницы, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
		
		ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИндексыВыделенныхСтраницРаздела()
	
	ИндексыВыделенныхСтраниц = Неопределено;
	
	Если ТипЗнч(Элементы.РазделыОтчета.ВыделенныеСтроки) = Тип("Массив")
		И Элементы.РазделыОтчета.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ИндексыВыделенныхСтраниц = Новый Массив;
		Для каждого ИдентификаторСтроки Из Элементы.РазделыОтчета.ВыделенныеСтроки Цикл
			
			ЭлементДерева = РазделыОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ЭлементДерева.КолонкаРазделыОтчетаСокрНаим <> СтруктураРеквизитовФормы.НаимТекущегоРаздела
				ИЛИ ЭлементДерева.ПолучитьРодителя() = Неопределено
				ИЛИ ЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			ИндексыВыделенныхСтраниц.Добавить(ЭлементДерева.КолонкаНомерСтраницыРазделаОтчета - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИндексыВыделенныхСтраниц;
	
КонецФункции

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		Обл = ТабличныйДокумент.Области.Найти("СекцияУдалитьСтраницу");
		Если Обл <> Неопределено Тогда
			Обл.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = "";
			ОблУдалитьСтраницу.Гиперссылка = Ложь;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = "";
			ОблУдалитьСтраницу.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Подр2" Тогда
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы12М1]["ИменаГраф"][0];
		Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_20") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более двадцати групп строк 001-050 в подразделе 2 раздела 1';
			|en = 'Возможно не более двадцати групп строк 001-050 в подразделе 2 раздела 1'");
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Подр3" Тогда
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы13М1]["ИменаГраф"][0];
		Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более двух групп строк 001-050 в подразделе 3 раздела 1';
			|en = 'Возможно не более двух групп строк 001-050 в подразделе 3 раздела 1'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяТекОбласти);
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ОбъектОтчета.ВставитьДопСтроку(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   ТабличныйДокумент,
									   ИмяГруппы,
									   ИмяОбластиПреемника);
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
		
		// Особая обработка текста в строке 010 Приложения 4 к Разделу 1.
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы104М1 Тогда
			
			Инд010 = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника) + 1;
			Инд010_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд010);
			
			ИмяПокСтр010 = "П00104М101001" + Инд010_Строка;
			Обл010 = ТабличныйДокумент.Области.Найти(ИмяПокСтр010);
			Обл010.Значение = Формат(Инд010, "ЧЦ=5; ЧВН=; ЧГ=");
			
		КонецЕсли;
		
		ОбъектОтчета = ОбъектОтчета(ИмяФормы);
		
		СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											СтруктураРеквизитовФормы,
											мСтруктураМногоуровневыхРазделов,
											СтруктураДанныхРазделов,
											ТабличныйДокумент,
											СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
														|en = 'Не выбрана удаляемая строка многострочного раздела'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбласти);
	
	ТекИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
		"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Особая обработка текста в строке 010 Приложения 4 к Разделу 1.
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы104М1 Тогда
			
			Инд010 = ТекИндекс_Число;
			Инд010_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд010);
			Обл010 = ТабличныйДокумент.Области.Найти("П00104М101001" + Инд010_Строка);
			
			Пока Обл010 <> Неопределено Цикл
				Обл010.Значение = Формат(Инд010, "ЧЦ=5; ЧВН=; ЧГ=");
				
				Инд010 = Инд010 + 1;
				Инд010_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд010);
				Обл010 = ТабличныйДокумент.Области.Найти("П00104М101001" + Инд010_Строка);
			КонецЦикла;
			
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительныеСтрокиВРазделе3()
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00321М1_2");
	Пока Обл <> Неопределено Цикл
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		УдалитьДопСтрокуНаСервере();
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00321М1_2");
	КонецЦикла;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00322М1_2");
	Пока Обл <> Неопределено Цикл
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		УдалитьДопСтрокуНаСервере();
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00322М1_2");
	КонецЦикла;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ПреКоординаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗаПервыйКвартал = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ТипПлательщика = СокрЛП(ТДО.П000010000101.Значение);
				
				Если ТипПлательщика = "2" Тогда
					
					ТДО["П000010003101"].Значение = 0;
					ТДО["П000010003201"].Значение = 0;
					ТДО["П000010003301"].Значение = 0;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М105101" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = 0;
						ТДО["П00001М105201" + Инд_Строка].Значение = 0;
						ТДО["П00001М105301" + Инд_Строка].Значение = 0;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М105101" + Инд_Строка);
					КонецЦикла;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М207101" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = 0;
						ТДО["П00001М207201" + Инд_Строка].Значение = 0;
						ТДО["П00001М207301" + Инд_Строка].Значение = 0;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М207101" + Инд_Строка);
					КонецЦикла;
					
				ИначеЕсли РасчетЗаПервыйКвартал Тогда
					
					ТДО["П000010003001"].Значение
					= ТДО["П000010003101"].Значение + ТДО["П000010003201"].Значение + ТДО["П000010003301"].Значение;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М105001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = ТДО["П00001М105101" + Инд_Строка].Значение
						+ ТДО["П00001М105201" + Инд_Строка].Значение + ТДО["П00001М105301" + Инд_Строка].Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М105001" + Инд_Строка);
					КонецЦикла;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М207001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = ТДО["П00001М207101" + Инд_Строка].Значение
						+ ТДО["П00001М207201" + Инд_Строка].Значение + ТДО["П00001М207301" + Инд_Строка].Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М207001" + Инд_Строка);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если РасчетЗаПервыйКвартал Тогда
					ТДО["П000110003001"].Значение
					= ТДО["П000110003002"].Значение + ТДО["П000110003003"].Значение + ТДО["П000110003004"].Значение;
					ТДО["П000110004001"].Значение
					= ТДО["П000110004002"].Значение + ТДО["П000110004003"].Значение + ТДО["П000110004004"].Значение;
					ТДО["П000110004501"].Значение
					= ТДО["П000110004502"].Значение + ТДО["П000110004503"].Значение + ТДО["П000110004504"].Значение;
					ТДО["П000110005101"].Значение
					= ТДО["П000110005102"].Значение + ТДО["П000110005103"].Значение + ТДО["П000110005104"].Значение;
					ТДО["П000110005201"].Значение
					= ТДО["П000110005202"].Значение + ТДО["П000110005203"].Значение + ТДО["П000110005204"].Значение;
					ТДО["П000110006101"].Значение
					= ТДО["П000110006102"].Значение + ТДО["П000110006103"].Значение + ТДО["П000110006104"].Значение;
					ТДО["П000110006201"].Значение
					= ТДО["П000110006202"].Значение + ТДО["П000110006203"].Значение + ТДО["П000110006204"].Значение;
				КонецЕсли;
				
				ТДО["П000110002001"].Значение = ТДО["П000110002101"].Значение + ТДО["П000110002201"].Значение;
				ТДО["П000110002002"].Значение = ТДО["П000110002102"].Значение + ТДО["П000110002202"].Значение;
				ТДО["П000110002003"].Значение = ТДО["П000110002103"].Значение + ТДО["П000110002203"].Значение;
				ТДО["П000110002004"].Значение = ТДО["П000110002104"].Значение + ТДО["П000110002204"].Значение;
				
				ТДО["П000110005001"].Значение
				= ТДО["П000110003001"].Значение - ТДО["П000110004001"].Значение - ТДО["П000110004501"].Значение;
				ТДО["П000110005002"].Значение
				= ТДО["П000110003002"].Значение - ТДО["П000110004002"].Значение - ТДО["П000110004502"].Значение;
				ТДО["П000110005003"].Значение
				= ТДО["П000110003003"].Значение - ТДО["П000110004003"].Значение - ТДО["П000110004503"].Значение;
				ТДО["П000110005004"].Значение
				= ТДО["П000110003004"].Значение - ТДО["П000110004004"].Значение - ТДО["П000110004504"].Значение;
				
				ТДО["П000110006001"].Значение = ТДО["П000110006101"].Значение + ТДО["П000110006201"].Значение;
				ТДО["П000110006002"].Значение = ТДО["П000110006102"].Значение + ТДО["П000110006202"].Значение;
				ТДО["П000110006003"].Значение = ТДО["П000110006103"].Значение + ТДО["П000110006203"].Значение;
				ТДО["П000110006004"].Значение = ТДО["П000110006104"].Значение + ТДО["П000110006204"].Значение;
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					ТДО["П00012М102001" + _Инд].Значение = ТДО["П00012М102002" + _Инд].Значение
					+ ТДО["П00012М102003" + _Инд].Значение + ТДО["П00012М102004" + _Инд].Значение;
					ТДО["П00012М103001" + _Инд].Значение = ТДО["П00012М103002" + _Инд].Значение
					+ ТДО["П00012М103003" + _Инд].Значение + ТДО["П00012М103004" + _Инд].Значение;
					ТДО["П00012М105001" + _Инд].Значение = ТДО["П00012М105002" + _Инд].Значение
					+ ТДО["П00012М105003" + _Инд].Значение + ТДО["П00012М105004" + _Инд].Значение;
				КонецЕсли;
				
				ТДО["П00012М104001" + _Инд].Значение = ТДО["П00012М102001" + _Инд].Значение - ТДО["П00012М103001" + _Инд].Значение;
				ТДО["П00012М104002" + _Инд].Значение = ТДО["П00012М102002" + _Инд].Значение - ТДО["П00012М103002" + _Инд].Значение;
				ТДО["П00012М104003" + _Инд].Значение = ТДО["П00012М102003" + _Инд].Значение - ТДО["П00012М103003" + _Инд].Значение;
				ТДО["П00012М104004" + _Инд].Значение = ТДО["П00012М102004" + _Инд].Значение - ТДО["П00012М103004" + _Инд].Значение;
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					ТДО["П00013М102001" + _Инд].Значение = ТДО["П00013М102002" + _Инд].Значение
					+ ТДО["П00013М102003" + _Инд].Значение + ТДО["П00013М102004" + _Инд].Значение;
					ТДО["П00013М103001" + _Инд].Значение = ТДО["П00013М103002" + _Инд].Значение
					+ ТДО["П00013М103003" + _Инд].Значение + ТДО["П00013М103004" + _Инд].Значение;
					ТДО["П00013М105001" + _Инд].Значение = ТДО["П00013М105002" + _Инд].Значение
					+ ТДО["П00013М105003" + _Инд].Значение + ТДО["П00013М105004" + _Инд].Значение;
				КонецЕсли;
				
				ТДО["П00013М104001" + _Инд].Значение = ТДО["П00013М102001" + _Инд].Значение - ТДО["П00013М103001" + _Инд].Значение;
				ТДО["П00013М104002" + _Инд].Значение = ТДО["П00013М102002" + _Инд].Значение - ТДО["П00013М103002" + _Инд].Значение;
				ТДО["П00013М104003" + _Инд].Значение = ТДО["П00013М102003" + _Инд].Значение - ТДО["П00013М103003" + _Инд].Значение;
				ТДО["П00013М104004" + _Инд].Значение = ТДО["П00013М102004" + _Инд].Значение - ТДО["П00013М103004" + _Инд].Значение;
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Знаменатель = ТДО["П00101М101002" + _Инд].Значение;
				ТДО["П00101М103002" + _Инд].Значение = ?(Знаменатель = 0,
				0, Окр(ТДО["П00101М102002" + _Инд].Значение / Знаменатель * 100, 2));
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Знаменатель = ТДО["П001020001001"].Значение;
				ТДО["П001020005001"].Значение = ?(Знаменатель = 0, 0, Окр((ТДО["П001020002001"].Значение
				+ ТДО["П001020003001"].Значение + ТДО["П001020004001"].Значение) / Знаменатель * 100, 2));
				
				Знаменатель = ТДО["П001020001002"].Значение;
				ТДО["П001020005002"].Значение = ?(Знаменатель = 0, 0, Окр((ТДО["П001020002002"].Значение
				+ ТДО["П001020003002"].Значение + ТДО["П001020004002"].Значение) / Знаменатель * 100, 2));
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Знаменатель = ТДО["П001030002002"].Значение;
				ТДО["П001030004002"].Значение = ?(Знаменатель = 0, 0, Окр(ТДО["П001030003002"].Значение / Знаменатель * 100, 2));
				
				Знаменатель = ТДО["П001030002003"].Значение;
				ТДО["П001030004003"].Значение = ?(Знаменатель = 0, 0, Окр(ТДО["П001030003003"].Значение / Знаменатель * 100, 2));
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел2Подр1"
		ИЛИ ИмяРаздела = "Раздел4" ИЛИ ИмяРаздела = "Раздел4Подр1" Тогда
		
		РасчетВДеревеЗначений(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "Раздел4Прил1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Если РасчетЗаПервыйКвартал Тогда
					
					_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
					
					ТДО["П00401М106001" + _Инд].Значение = ТДО["П00401М106002" + _Инд].Значение
					+ ТДО["П00401М106003" + _Инд].Значение + ТДО["П00401М106004" + _Инд].Значение;
					
				КонецЕсли;
				
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	РасчетЗаПервыйКвартал = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ1 = Форма.СтруктураРеквизитовФормы.мИдГруппы1М1;
		СтруктураГруппыМнЧ1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1];
		ИменаГрафМнЧ1 = СтруктураГруппыМнЧ1["ИменаГраф"];
		
		ИмяГруппыМнЧ2 = Форма.СтруктураРеквизитовФормы.мИдГруппы1М2;
		СтруктураГруппыМнЧ2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2];
		ИменаГрафМнЧ2 = СтруктураГруппыМнЧ2["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		ДеревоМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
		ДеревоМнЧ2 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТипПлательщика = СокрЛП(Данные["П000010000101"]);
		
		Если ТипПлательщика = "2" Тогда
			
			Данные.Вставить("П000010003101", 0);
			Данные.Вставить("П000010003201", 0);
			Данные.Вставить("П000010003301", 0);
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М105101", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М105201", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М105301", 0);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М207101", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М207201", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М207301", 0);
			КонецЦикла;
			
		ИначеЕсли РасчетЗаПервыйКвартал Тогда
			
			Данные.Вставить("П000010003001", Данные["П000010003101"] + Данные["П000010003201"] + Данные["П000010003301"]);
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М105001",
				СтрокаМнЧ.Данные["П00001М105101"] + СтрокаМнЧ.Данные["П00001М105201"] + СтрокаМнЧ.Данные["П00001М105301"]);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М207001",
				СтрокаМнЧ.Данные["П00001М207101"] + СтрокаМнЧ.Данные["П00001М207201"] + СтрокаМнЧ.Данные["П00001М207301"]);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Данные Цикл
					Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если РасчетЗаПервыйКвартал Тогда
				Данные.Вставить("П000110003001", Данные["П000110003002"] + Данные["П000110003003"] + Данные["П000110003004"]);
				Данные.Вставить("П000110004001", Данные["П000110004002"] + Данные["П000110004003"] + Данные["П000110004004"]);
				Данные.Вставить("П000110004501", Данные["П000110004502"] + Данные["П000110004503"] + Данные["П000110004504"]);
				Данные.Вставить("П000110005101", Данные["П000110005102"] + Данные["П000110005103"] + Данные["П000110005104"]);
				Данные.Вставить("П000110005201", Данные["П000110005202"] + Данные["П000110005203"] + Данные["П000110005204"]);
				Данные.Вставить("П000110006101", Данные["П000110006102"] + Данные["П000110006103"] + Данные["П000110006104"]);
				Данные.Вставить("П000110006201", Данные["П000110006202"] + Данные["П000110006203"] + Данные["П000110006204"]);
			КонецЕсли;
			
			Данные.Вставить("П000110002001", Данные["П000110002101"] + Данные["П000110002201"]);
			Данные.Вставить("П000110002002", Данные["П000110002102"] + Данные["П000110002202"]);
			Данные.Вставить("П000110002003", Данные["П000110002103"] + Данные["П000110002203"]);
			Данные.Вставить("П000110002004", Данные["П000110002104"] + Данные["П000110002204"]);
			
			Данные.Вставить("П000110005001", Данные["П000110003001"] - Данные["П000110004001"] - Данные["П000110004501"]);
			Данные.Вставить("П000110005002", Данные["П000110003002"] - Данные["П000110004002"] - Данные["П000110004502"]);
			Данные.Вставить("П000110005003", Данные["П000110003003"] - Данные["П000110004003"] - Данные["П000110004503"]);
			Данные.Вставить("П000110005004", Данные["П000110003004"] - Данные["П000110004004"] - Данные["П000110004504"]);
			
			Данные.Вставить("П000110006001", Данные["П000110006101"] + Данные["П000110006201"]);
			Данные.Вставить("П000110006002", Данные["П000110006102"] + Данные["П000110006202"]);
			Данные.Вставить("П000110006003", Данные["П000110006103"] + Данные["П000110006203"]);
			Данные.Вставить("П000110006004", Данные["П000110006104"] + Данные["П000110006204"]);
			
			Если Ветка = АктивнаяВетка Тогда
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Обл = ТДО.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы12М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00012М102001", ДанСтр["П00012М102002"] + ДанСтр["П00012М102003"] + ДанСтр["П00012М102004"]);
				ДанСтр.Вставить("П00012М103001", ДанСтр["П00012М103002"] + ДанСтр["П00012М103003"] + ДанСтр["П00012М103004"]);
				ДанСтр.Вставить("П00012М105001", ДанСтр["П00012М105002"] + ДанСтр["П00012М105003"] + ДанСтр["П00012М105004"]);
			КонецЕсли;
			ДанСтр.Вставить("П00012М104001", ДанСтр["П00012М102001"] - ДанСтр["П00012М103001"]);
			ДанСтр.Вставить("П00012М104002", ДанСтр["П00012М102002"] - ДанСтр["П00012М103002"]);
			ДанСтр.Вставить("П00012М104003", ДанСтр["П00012М102003"] - ДанСтр["П00012М103003"]);
			ДанСтр.Вставить("П00012М104004", ДанСтр["П00012М102004"] - ДанСтр["П00012М103004"]);
		КонецЦикла;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Подр3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы13М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00013М102001", ДанСтр["П00013М102002"] + ДанСтр["П00013М102003"] + ДанСтр["П00013М102004"]);
				ДанСтр.Вставить("П00013М103001", ДанСтр["П00013М103002"] + ДанСтр["П00013М103003"] + ДанСтр["П00013М103004"]);
				ДанСтр.Вставить("П00013М105001", ДанСтр["П00013М105002"] + ДанСтр["П00013М105003"] + ДанСтр["П00013М105004"]);
			КонецЕсли;
			ДанСтр.Вставить("П00013М104001", ДанСтр["П00013М102001"] - ДанСтр["П00013М103001"]);
			ДанСтр.Вставить("П00013М104002", ДанСтр["П00013М102002"] - ДанСтр["П00013М103002"]);
			ДанСтр.Вставить("П00013М104003", ДанСтр["П00013М102003"] - ДанСтр["П00013М103003"]);
			ДанСтр.Вставить("П00013М104004", ДанСтр["П00013М102004"] - ДанСтр["П00013М103004"]);
		КонецЦикла;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы101М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Знаменатель = ДанСтр["П00101М101002"];
			ДанСтр.Вставить("П00101М103002", ?(Знаменатель = 0, 0, Окр(ДанСтр["П00101М102002"] / Знаменатель * 100, 2)));
		КонецЦикла;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Знаменатель = Данные["П001020001001"];
		Данные.Вставить("П001020005001", ?(Знаменатель = 0, 0,
		Окр((Данные["П001020002001"] + Данные["П001020003001"] + Данные["П001020004001"]) / Знаменатель * 100, 2)));
		
		Знаменатель = Данные["П001020001002"];
		Данные.Вставить("П001020005002", ?(Знаменатель = 0, 0,
		Окр((Данные["П001020002002"] + Данные["П001020003002"] + Данные["П001020004002"]) / Знаменатель * 100, 2)));
		
		Если Ветка = АктивнаяВетка Тогда
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Знаменатель = Данные["П001030002002"];
		Данные.Вставить("П001030004002", ?(Знаменатель = 0, 0, Окр(Данные["П001030003002"] / Знаменатель * 100, 2)));
		
		Знаменатель = Данные["П001030002003"];
		Данные.Вставить("П001030004003", ?(Знаменатель = 0, 0, Окр(Данные["П001030003003"] / Знаменатель * 100, 2)));
		
		Если Ветка = АктивнаяВетка Тогда
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел2Подр1" Тогда
		
		// Подр. 1 раздела 2.
		//
		ДеревоДанных21 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2Подр1"]);
		
		АктивнаяВетка21 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2Подр1" Тогда
			АктивнаяВетка21 = ДеревоДанных21.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы21М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Сумма_Стр080 = 0;
		
		Для каждого Ветка21 Из ДеревоДанных21.Строки Цикл
			
			ДеревоМнЧ = Ветка21.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Если Ветка21 = АктивнаяВетка21 Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					СтрокаМнЧ.Данные.Вставить("П00021М111001", ТДО["П00021М111001_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Сумма_Стр110 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				Сумма_Стр110 = Сумма_Стр110 + СтрокаМнЧ.Данные["П00021М111001"];
			КонецЦикла;
			
			Ветка21.Данные.Вставить("П000210008001", Сумма_Стр110);
			
			Если Ветка21 = АктивнаяВетка21 Тогда
				ТДО["П000210008001"].Значение = Сумма_Стр110;
			КонецЕсли;
			
			Сумма_Стр080 = Сумма_Стр080 + Сумма_Стр110;
			
		КонецЦикла;
		
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных21, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2Подр1"]);
		ДеревоДанных21 = Неопределено;
		
		// Раздел 2.
		//
		ДеревоДанных2 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		АктивнаяВетка2 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			АктивнаяВетка2 = ДеревоДанных2.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка2 = ДеревоДанных2.Строки[0];
		
		Ветка2.Данные.Вставить("П000020003001", Сумма_Стр080);
		
		Если Ветка2 = АктивнаяВетка2 Тогда
			ТДО["П000020003001"].Значение = Сумма_Стр080;
		КонецЕсли;
		
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных2, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		ДеревоДанных2 = Неопределено;
		
	ИначеЕсли ИмяРаздела = "Раздел4" ИЛИ ИмяРаздела = "Раздел4Подр1" Тогда
		
		// Подр. 1 раздела 4.
		//
		ДеревоДанных41 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4Подр1"]);
		
		АктивнаяВетка41 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4Подр1" Тогда
			АктивнаяВетка41 = ДеревоДанных41.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка41  = ДеревоДанных41.Строки[0];
		Данные41 = Ветка41.Данные;
		
		Если Ветка41 = АктивнаяВетка41 Тогда
			Для каждого Пок Из Данные41 Цикл
				Данные41.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если РасчетЗаПервыйКвартал Тогда
			Данные41.Вставить("П000410003001", Данные41["П000410003002"] + Данные41["П000410003003"] + Данные41["П000410003004"]);
			Данные41.Вставить("П000410004001", Данные41["П000410004002"] + Данные41["П000410004003"] + Данные41["П000410004004"]);
			Данные41.Вставить("П000410005001", Данные41["П000410005002"] + Данные41["П000410005003"] + Данные41["П000410005004"]);
			Данные41.Вставить("П000410007001", Данные41["П000410007002"] + Данные41["П000410007003"] + Данные41["П000410007004"]);
			Данные41.Вставить("П000410009001", Данные41["П000410009002"] + Данные41["П000410009003"] + Данные41["П000410009004"]);
		КонецЕсли;
		
		Данные41.Вставить("П000410006001", Данные41["П000410003001"] - Данные41["П000410004001"] - Данные41["П000410005001"]);
		Данные41.Вставить("П000410006002", Данные41["П000410003002"] - Данные41["П000410004002"] - Данные41["П000410005002"]);
		Данные41.Вставить("П000410006003", Данные41["П000410003003"] - Данные41["П000410004003"] - Данные41["П000410005003"]);
		Данные41.Вставить("П000410006004", Данные41["П000410003004"] - Данные41["П000410004004"] - Данные41["П000410005004"]);
		
		Данные41.Вставить("П000410008001", Данные41["П000410003001"] - Данные41["П000410004001"]);
		Данные41.Вставить("П000410008002", Данные41["П000410003002"] - Данные41["П000410004002"]);
		Данные41.Вставить("П000410008003", Данные41["П000410003003"] - Данные41["П000410004003"]);
		Данные41.Вставить("П000410008004", Данные41["П000410003004"] - Данные41["П000410004004"]);
		
		Если Ветка41 = АктивнаяВетка41 Тогда
			Для каждого Пок Из Данные41 Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные41[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Раздел 4.
		//
		ДеревоДанных4 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4"]);
		
		АктивнаяВетка4 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
			АктивнаяВетка4 = ДеревоДанных4.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка4  = ДеревоДанных4.Строки[0];
		Данные4 = Ветка4.Данные;
		
		Если Ветка4 = АктивнаяВетка4 Тогда
			Для каждого Пок Из Данные4 Цикл
				Данные4.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Данные4.Вставить("П000040003001", Данные41["П000410007001"]);
		Данные4.Вставить("П000040003101", Данные41["П000410007002"]);
		Данные4.Вставить("П000040003201", Данные41["П000410007003"]);
		Данные4.Вставить("П000040003301", Данные41["П000410007004"]);
		
		Данные4.Вставить("П000040005001", Данные41["П000410009001"]);
		Данные4.Вставить("П000040005101", Данные41["П000410009002"]);
		Данные4.Вставить("П000040005201", Данные41["П000410009003"]);
		Данные4.Вставить("П000040005301", Данные41["П000410009004"]);
		
		Если Ветка4 = АктивнаяВетка4 Тогда
			Для каждого Пок Из Данные4 Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные4[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных4, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4"]);
		ДеревоДанных4 = Неопределено;
		
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных41, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4Подр1"]);
		ДеревоДанных41 = Неопределено;
		
	ИначеЕсли ИмяРаздела = "Раздел4Прил1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы401М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если РасчетЗаПервыйКвартал Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ДанСтр = СтрокаМнЧ.Данные;
				ДанСтр.Вставить("П00401М106001", ДанСтр["П00401М106002"] + ДанСтр["П00401М106003"] + ДанСтр["П00401М106004"]);
			КонецЦикла;
		КонецЕсли;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	СформироватьРаздел1();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("П000010000101");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрОКТМО = СокрЛП(ТабличныйДокумент.Области.Найти("П000010001001").Значение);
	Иначе
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		СохрОКТМО = СокрЛП(ДеревоРаздела1.Строки[0].Данные.П000010001001);
	КонецЕсли;
	
	ОбъектОтчета(ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1");
	
	ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ВеткаРаздел1 = ДеревоРаздела1.Строки[0];
	
	ВеткаРаздел1.Данные.Вставить("П000010001001", СохрОКТМО);
	
	ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись = Ложь;
	
	// Строки 020-033.
	ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Подр1"]);
	Для каждого Ветка Из ДеревоРазд.Строки Цикл
		Дан = Ветка.Данные;
		ВеткаРаздел1.Данные["П000010003001"] = ВеткаРаздел1.Данные["П000010003001"] + Дан["П000110006001"];
		ВеткаРаздел1.Данные["П000010003101"] = ВеткаРаздел1.Данные["П000010003101"] + Дан["П000110006002"];
		ВеткаРаздел1.Данные["П000010003201"] = ВеткаРаздел1.Данные["П000010003201"] + Дан["П000110006003"];
		ВеткаРаздел1.Данные["П000010003301"] = ВеткаРаздел1.Данные["П000010003301"] + Дан["П000110006004"];
		ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись = ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись
		ИЛИ Дан["П000110003002"] > 0 ИЛИ Дан["П000110003003"] > 0 ИЛИ Дан["П000110003004"] > 0;
	КонецЦикла;
	ВеткаРаздел1.Данные["П000010002001"] = "18210201000011000160";
	
	// Строки 040-053.
	ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Подр2"]);
	ДеревоМнЧ = ДеревоРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы12М1];
	Стр050_Код1 = 0;
	Стр051_Код1 = 0;
	Стр052_Код1 = 0;
	Стр053_Код1 = 0;
	Стр050_Код2 = 0;
	Стр051_Код2 = 0;
	Стр052_Код2 = 0;
	Стр053_Код2 = 0;
	Стр050_Код3 = 0;
	Стр051_Код3 = 0;
	Стр052_Код3 = 0;
	Стр053_Код3 = 0;
	Стр050_Код4 = 0;
	Стр051_Код4 = 0;
	Стр052_Код4 = 0;
	Стр053_Код4 = 0;
	Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Дан = СтрокаМнЧ.Данные;
		Стр001 = СокрЛП(Дан["П00012М100101"]);
		Если Стр001 = "1" Тогда
			Стр050_Код1 = Стр050_Код1 + Дан["П00012М105001"];
			Стр051_Код1 = Стр051_Код1 + Дан["П00012М105002"];
			Стр052_Код1 = Стр052_Код1 + Дан["П00012М105003"];
			Стр053_Код1 = Стр053_Код1 + Дан["П00012М105004"];
		ИначеЕсли Стр001 = "2" Тогда
			Стр050_Код2 = Стр050_Код2 + Дан["П00012М105001"];
			Стр051_Код2 = Стр051_Код2 + Дан["П00012М105002"];
			Стр052_Код2 = Стр052_Код2 + Дан["П00012М105003"];
			Стр053_Код2 = Стр053_Код2 + Дан["П00012М105004"];
		ИначеЕсли Стр001 = "3" Тогда
			Стр050_Код3 = Стр050_Код3 + Дан["П00012М105001"];
			Стр051_Код3 = Стр051_Код3 + Дан["П00012М105002"];
			Стр052_Код3 = Стр052_Код3 + Дан["П00012М105003"];
			Стр053_Код3 = Стр053_Код3 + Дан["П00012М105004"];
		ИначеЕсли Стр001 = "4" Тогда
			Стр050_Код4 = Стр050_Код4 + Дан["П00012М105001"];
			Стр051_Код4 = Стр051_Код4 + Дан["П00012М105002"];
			Стр052_Код4 = Стр052_Код4 + Дан["П00012М105003"];
			Стр053_Код4 = Стр053_Код4 + Дан["П00012М105004"];
		КонецЕсли;
		ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись = ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись
		ИЛИ Дан["П00012М102002"] > 0 ИЛИ Дан["П00012М102003"] > 0 ИЛИ Дан["П00012М102004"] > 0;
	КонецЦикла;
	ДеревоМнЧ = ВеткаРаздел1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М1];
	ИндСтрМнЧ = 0;
	Если ЗначениеЗаполнено(Стр050_Код1) ИЛИ ЗначениеЗаполнено(Стр051_Код1)
		ИЛИ ЗначениеЗаполнено(Стр052_Код1) ИЛИ ЗначениеЗаполнено(Стр053_Код1) Тогда
		Дан = ДеревоМнЧ.Строки[0].Данные;
		Дан.Вставить("П00001М104001", "18210204010011010160");
		Дан.Вставить("П00001М105001", Стр050_Код1);
		Дан.Вставить("П00001М105101", Стр051_Код1);
		Дан.Вставить("П00001М105201", Стр052_Код1);
		Дан.Вставить("П00001М105301", Стр053_Код1);
		ИндСтрМнЧ = ИндСтрМнЧ + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр050_Код2) ИЛИ ЗначениеЗаполнено(Стр051_Код2)
		ИЛИ ЗначениеЗаполнено(Стр052_Код2) ИЛИ ЗначениеЗаполнено(Стр053_Код2) Тогда
		Если ИндСтрМнЧ > 0 Тогда
			НовСтрМнЧ = ДеревоМнЧ.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Дан = НовСтрМнЧ.Данные;
		Иначе
			Дан = ДеревоМнЧ.Строки[0].Данные;
		КонецЕсли;
		Дан.Вставить("П00001М104001", "18210204020011010160");
		Дан.Вставить("П00001М105001", Стр050_Код2);
		Дан.Вставить("П00001М105101", Стр051_Код2);
		Дан.Вставить("П00001М105201", Стр052_Код2);
		Дан.Вставить("П00001М105301", Стр053_Код2);
		ИндСтрМнЧ = ИндСтрМнЧ + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр050_Код3) ИЛИ ЗначениеЗаполнено(Стр051_Код3)
		ИЛИ ЗначениеЗаполнено(Стр052_Код3) ИЛИ ЗначениеЗаполнено(Стр053_Код3) Тогда
		Если ИндСтрМнЧ > 0 Тогда
			НовСтрМнЧ = ДеревоМнЧ.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Дан = НовСтрМнЧ.Данные;
		Иначе
			Дан = ДеревоМнЧ.Строки[0].Данные;
		КонецЕсли;
		Дан.Вставить("П00001М104001", "18210204010011020160");
		Дан.Вставить("П00001М105001", Стр050_Код3);
		Дан.Вставить("П00001М105101", Стр051_Код3);
		Дан.Вставить("П00001М105201", Стр052_Код3);
		Дан.Вставить("П00001М105301", Стр053_Код3);
		ИндСтрМнЧ = ИндСтрМнЧ + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр050_Код4) ИЛИ ЗначениеЗаполнено(Стр051_Код4)
		ИЛИ ЗначениеЗаполнено(Стр052_Код4) ИЛИ ЗначениеЗаполнено(Стр053_Код4) Тогда
		Если ИндСтрМнЧ > 0 Тогда
			НовСтрМнЧ = ДеревоМнЧ.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Дан = НовСтрМнЧ.Данные;
		Иначе
			Дан = ДеревоМнЧ.Строки[0].Данные;
		КонецЕсли;
		Дан.Вставить("П00001М104001", "18210204020011020160");
		Дан.Вставить("П00001М105001", Стр050_Код4);
		Дан.Вставить("П00001М105101", Стр051_Код4);
		Дан.Вставить("П00001М105201", Стр052_Код4);
		Дан.Вставить("П00001М105301", Стр053_Код4);
	КонецЕсли;
	
	// Строки 060-073.
	ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Подр3"]);
	ДеревоМнЧ = ДеревоРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы13М1];
	Стр070_Код1 = 0;
	Стр071_Код1 = 0;
	Стр072_Код1 = 0;
	Стр073_Код1 = 0;
	Стр070_Код2 = 0;
	Стр071_Код2 = 0;
	Стр072_Код2 = 0;
	Стр073_Код2 = 0;
	Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Дан = СтрокаМнЧ.Данные;
		Стр001 = СокрЛП(Дан["П00013М100101"]);
		Если Стр001 = "1" Тогда
			Стр070_Код1 = Стр070_Код1 + Дан["П00013М105001"];
			Стр071_Код1 = Стр071_Код1 + Дан["П00013М105002"];
			Стр072_Код1 = Стр072_Код1 + Дан["П00013М105003"];
			Стр073_Код1 = Стр073_Код1 + Дан["П00013М105004"];
		ИначеЕсли Стр001 = "2" Тогда
			Стр070_Код2 = Стр070_Код2 + Дан["П00013М105001"];
			Стр071_Код2 = Стр071_Код2 + Дан["П00013М105002"];
			Стр072_Код2 = Стр072_Код2 + Дан["П00013М105003"];
			Стр073_Код2 = Стр073_Код2 + Дан["П00013М105004"];
		КонецЕсли;
		ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись = ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись
		ИЛИ Дан["П00013М102002"] > 0 ИЛИ Дан["П00013М102003"] > 0 ИЛИ Дан["П00013М102004"] > 0;
	КонецЦикла;
	ДеревоМнЧ = ВеткаРаздел1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М2];
	ИндСтрМнЧ = 0;
	Если ЗначениеЗаполнено(Стр070_Код1) ИЛИ ЗначениеЗаполнено(Стр071_Код1)
		ИЛИ ЗначениеЗаполнено(Стр072_Код1) ИЛИ ЗначениеЗаполнено(Стр073_Код1) Тогда
		Дан = ДеревоМнЧ.Строки[0].Данные;
		Дан.Вставить("П00001М206001", "18210208000061000160");
		Дан.Вставить("П00001М207001", Стр070_Код1);
		Дан.Вставить("П00001М207101", Стр071_Код1);
		Дан.Вставить("П00001М207201", Стр072_Код1);
		Дан.Вставить("П00001М207301", Стр073_Код1);
		ИндСтрМнЧ = ИндСтрМнЧ + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр070_Код2) ИЛИ ЗначениеЗаполнено(Стр071_Код2)
		ИЛИ ЗначениеЗаполнено(Стр072_Код2) ИЛИ ЗначениеЗаполнено(Стр073_Код2) Тогда
		Если ИндСтрМнЧ > 0 Тогда
			НовСтрМнЧ = ДеревоМнЧ.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			Дан = НовСтрМнЧ.Данные;
		Иначе
			Дан = ДеревоМнЧ.Строки[0].Данные;
		КонецЕсли;
		Дан.Вставить("П00001М206001", "18210209000061000160");
		Дан.Вставить("П00001М207001", Стр070_Код2);
		Дан.Вставить("П00001М207101", Стр071_Код2);
		Дан.Вставить("П00001М207201", Стр072_Код2);
		Дан.Вставить("П00001М207301", Стр073_Код2);
	КонецЕсли;
	
	// Строка 001.
	ВеткаРаздел1.Данные["П000010000101"] = ?(ВыплатыИИныеВознагрВПользуФизЛицВПосл3МесНачислялись, "1", "2");
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела1, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	РасчетНаСервере("Раздел1");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	РасчетЗаПервыйКвартал = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
	
	// Прил. 1 к разделу 4.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П00401М106001");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел4Прил1", Структ);
	
	// Подр. 1 раздела 4.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П000410003001");
		Структ.Вставить("П000410004001");
		Структ.Вставить("П000410005001");
		Структ.Вставить("П000410007001");
		Структ.Вставить("П000410009001");
	КонецЕсли;
	Структ.Вставить("П000410006001");
	Структ.Вставить("П000410006002");
	Структ.Вставить("П000410006003");
	Структ.Вставить("П000410006004");
	Структ.Вставить("П000410008001");
	Структ.Вставить("П000410008002");
	Структ.Вставить("П000410008003");
	Структ.Вставить("П000410008004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел4Подр1", Структ);
	
	// Раздел 4.
	Структ = Новый Структура;
	Структ.Вставить("П000040003001");
	Структ.Вставить("П000040003101");
	Структ.Вставить("П000040003201");
	Структ.Вставить("П000040003301");
	Структ.Вставить("П000040005001");
	Структ.Вставить("П000040005101");
	Структ.Вставить("П000040005201");
	Структ.Вставить("П000040005301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел4", Структ);
	
	// Подр. 1 раздела 2.
	Структ = Новый Структура;
	Структ.Вставить("П000210008001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2Подр1", Структ);
	
	// Раздел 2.
	Структ = Новый Структура;
	Структ.Вставить("П000020003001");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
	// Прил. 3 к разделу 1.
	Структ = Новый Структура;
	Структ.Вставить("П001030004002");
	Структ.Вставить("П001030004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил3", Структ);
	
	// Прил. 2 к разделу 1.
	Структ = Новый Структура;
	Структ.Вставить("П001020005001");
	Структ.Вставить("П001020005002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил2", Структ);
	
	// Прил. 1 к разделу 1.
	Структ = Новый Структура;
	Структ.Вставить("П00101М103002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил1", Структ);
	
	// Подр. 3 Раздела 1.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П00013М102001");
		Структ.Вставить("П00013М103001");
		Структ.Вставить("П00013М105001");
	КонецЕсли;
	Структ.Вставить("П00013М104001");
	Структ.Вставить("П00013М104002");
	Структ.Вставить("П00013М104003");
	Структ.Вставить("П00013М104004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Подр3", Структ);
	
	// Подр. 2 Раздела 1.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П00012М102001");
		Структ.Вставить("П00012М103001");
		Структ.Вставить("П00012М105001");
	КонецЕсли;
	Структ.Вставить("П00012М104001");
	Структ.Вставить("П00012М104002");
	Структ.Вставить("П00012М104003");
	Структ.Вставить("П00012М104004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Подр2", Структ);
	
	// Подр. 1 Раздела 1.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П000110003001");
		Структ.Вставить("П000110004001");
		Структ.Вставить("П000110004501");
		Структ.Вставить("П000110005101");
		Структ.Вставить("П000110005201");
		Структ.Вставить("П000110006101");
		Структ.Вставить("П000110006201");
	КонецЕсли;
	Структ.Вставить("П000110002001");
	Структ.Вставить("П000110002002");
	Структ.Вставить("П000110002003");
	Структ.Вставить("П000110002004");
	Структ.Вставить("П000110005001");
	Структ.Вставить("П000110005002");
	Структ.Вставить("П000110005003");
	Структ.Вставить("П000110005004");
	Структ.Вставить("П000110006001");
	Структ.Вставить("П000110006002");
	Структ.Вставить("П000110006003");
	Структ.Вставить("П000110006004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Подр1", Структ);
	
	// Раздел 1.
	Структ = Новый Структура;
	Если РасчетЗаПервыйКвартал Тогда
		Структ.Вставить("П000010003001");
		Структ.Вставить("П00001М105001");
		Структ.Вставить("П00001М207001");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

#Область ЗапросВФНСНаПроверкуСведенийРаботников

&НаКлиенте
Процедура ВыгрузитьСведенияРаботников(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьСведенияРаботниковЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСведенияРаботниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПроверитьВозможностьВыгрузкиСведенийРаботников() Тогда
		
		ТаблицаСообщенийЗаполнена = Истина;
		
		Если ТаблицаСообщений.Количество() = 0 Тогда
			ТаблицаСообщенийЗаполнена = Ложь;
			НовСтр = ТаблицаСообщений.Добавить();
			НовСтр.Описание = "Выгрузка сведений работников прервана";
		КонецЕсли;
		
		ПредставлениеРасчетаПоСтраховымВзносам = "Расчет по страховым взносам за " + ПредставлениеПериода(НачалоДня(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
		"ФП=Истина") + ?(НомерКорректировки = 0, " (Первичный", " (Корректирующий, номер корректировки " + Формат(
		НомерКорректировки, "ЧГ=")) + ". ИФНС: " + СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ")";
		
		Для Каждого СтрСообщения Из ТаблицаСообщений Цикл
			СтрСообщения.ОтчетДок = СтруктураРеквизитовФормы.мСохраненныйДок;
			СтрСообщения.Отчет = ПредставлениеРасчетаПоСтраховымВзносам;
		КонецЦикла;
		
		ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", ТаблицаСообщений);
		
		ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
		
		ФормаНавигацииПоОшибкам = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		Если ФормаНавигацииПоОшибкам.Открыта() Тогда
			ФормаНавигацииПоОшибкам.Закрыть();
			ФормаНавигацииПоОшибкам = ПолучитьФорму(
			"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		КонецЕсли;
		
		ФормаНавигацииПоОшибкам.Открыть();
		
		ТаблицаСообщений.Очистить();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось выгрузить сведения работающих лиц из Раздела 3 (%1)';
			|en = 'Не удалось выгрузить сведения работающих лиц из Раздела 3 (%1)'"), ПредставлениеРасчетаПоСтраховымВзносам));
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать тексты выгрузки';
														|en = 'Не удалось сформировать тексты выгрузки'"));
		
		Если ТаблицаСообщенийЗаполнена Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Для исправления ошибок используйте окно навигации по ошибкам';
				|en = 'Для исправления ошибок используйте окно навигации по ошибкам'"));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РасчетПоСтраховымВзносам", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ИнтерфейсыВзаимодействияБРОКлиент.СформироватьИСохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(
	СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыгрузкиСведенийРаботников()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = ОбъектОтчета.СохраненныеДанныеОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Титульный лист.
	//
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Не задан ИНН организации, обособленного подразделения", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Задан ИНН организации, обособленного подразделения, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Не задан КПП организации, обособленного подразделения", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Задан КПП организации, обособленного подразделения, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПараметрыВыгрузки.ПоМесту = "124" Тогда
			ИП_ГлаваКФХ = " главы крестьянского (фермерского) хозяйства";
		Иначе
			ИП_ГлаваКФХ = " индивидуального предпринимателя";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Не задан ИНН" + ИП_ГлаваКФХ, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
			"Задан ИНН" + ИП_ГлаваКФХ + ", не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
		"Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
		"Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 3.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел3;
	Если ОбъектОтчета.ЗаполненРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
									 ДеревоРаздела,
									 "Раздел3",
									 СтруктураРеквизитовФормы,
									 мСтруктураМногоуровневыхРазделов) Тогда
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			Данные = СтраницаРаздела.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ДолженБытьЗаполненИННФЛ = НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000310010001"]))
			ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"])) ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"])));
			
			ДолжныБытьЗаполненыКодСерияНомерДокумента = НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310002001"]))
			ИЛИ (ЗначениеЗаполнено(СокрЛП(Данные["П000310010001"])) ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"]))
			ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"])));
			
			Если ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
				"Раздел 3 -> Страница " + НомерСтраницы
				+ ": должен быть заполнен ИНН физического лица и (или) должны быть заполнены сведения документа, удостоверяющего личность",
				"Раздел3", "П000310002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ (ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента) Тогда
				ИННФЛ = СокрЛП(Данные["П000310002001"]);
				Если ДолженБытьЗаполненИННФЛ Тогда
					ИННФЛДлина = СтрДлина(ИННФЛ);
					Если НЕ ИННФЛДлина = 12 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
						+ НомерСтраницы + ": в строке 020 не" + ?(ИННФЛДлина = 0, "", "верно") + " задан ИНН физического лица",
						"Раздел3", "П000310002001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ИННФЛ) Тогда
						Если НЕ СтрДлина(ИННФЛ) = 12 Тогда
							ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
							+ НомерСтраницы + ": в строке 020 неверно задан ИНН физического лица",
							"Раздел3", "П000310002001", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СНИЛСДлина = СтрДлина(СокрЛП(Данные["П000310003001"]));
			Если НЕ СНИЛСДлина = 14 Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 030 не" + ?(СНИЛСДлина = 0, "", "верно") + " задан СНИЛС физического лица",
				"Раздел3", "П000310003001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310004001"])) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 040 не задана фамилия физического лица", "Раздел3", "П000310004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310005001"])) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 050 не задано имя физического лица", "Раздел3", "П000310005001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Данные["П000310007001"]) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 070 не задана дата рождения физического лица",
				"Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ОбъектОтчета.ДатаВходитВРазрешенныйПериод(
				СтруктураРеквизитовФормы.мВыбраннаяФорма, Данные["П000310007001"]) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
				"Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 070 задана дата рождения физического лица, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
				"Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ (ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента) Тогда
				Если ДолжныБытьЗаполненыКодСерияНомерДокумента Тогда
					КодВидДокДлина = СтрДлина(СокрЛП(Данные["П000310010001"]));
					Если НЕ КодВидДокДлина = 2 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 -> Страница "
						+ НомерСтраницы + ": в строке 100 не" + ?(КодВидДокДлина = 0, "", "верно")
						+ " задан код вида документа, удостоверяющего личность", "Раздел3", "П000310010001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"]))
						ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"]))) Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
						"Раздел 3 -> Страница " + НомерСтраницы
						+ ": в строке 110 не заданы серия и номер документа, удостоверяющего личность",
						"Раздел3", "П000310011001", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(Данные["П000310011001"]) + СокрЛП(Данные["П000310011002"])) > 24 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект,
						"Раздел 3 -> Страница " + НомерСтраницы
						+ ": в строке 110 общее количество символов в серии и номере документа, удостоверяющего личность, превышает 24",
						"Раздел3", "П000310011001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтотОбъект, "Раздел 3 не заполнен",
		"Раздел3", "П000310004001", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
									  			  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляСравнения = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
																	|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляЗагрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
															|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	ТекстВыгрузки = Новый Массив;
	ТекстВыгрузки.Добавить(РезультатВыгрузки);
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													  ПараметрыВыгрузки,
													  ДеревоВыгрузки,
													  ЭтотОбъект,
													  СтруктураРеквизитовФормы,
													  мСтруктураМногоуровневыхРазделов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  мДанныеОтчета,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтотОбъект,
								  СтруктураРеквизитовФормы,
								  мСтруктураМногоуровневыхРазделов);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
	"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			Оп = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		КонецЕсли;
	Иначе
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
	
	РасчетНаСервере();
	
	ДопПараметры = Новый Структура("НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ОбъектОтчета(ИмяФормы).ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																		  СтруктураРеквизитовФормы,
																		  мСтруктураМногоуровневыхРазделов);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущегоРаздела

&НаКлиенте
Процедура ОчиститьТекущийРаздел(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущийРазделЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = 'Внимание! Будет очищен текущий раздел.%1Продолжить?';
	|en = 'Внимание! Будет очищен текущий раздел.%1Продолжить?'"), Символы.ПС);
	
	Оп = Новый ОписаниеОповещения("ВопросОчиститьТекущийРазделЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущийРазделЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТекущийРазделНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТекущийРазделНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "Раздел2Подр1" ИЛИ ИмяРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Очистить();
		
		ОбъектОтчета(ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, ИмяРаздела);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
				Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		Если ИмяРаздела = "Раздел2Подр1" Тогда
			
			РасчетНаСервере(ИмяРаздела);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРазделЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураРеквизитовФормы.Вставить("КодПоМестуДоОчистки", СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение));
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
	|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	Оп = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		Если ИмяСтраницы = "Раздел2" ИЛИ ИмяСтраницы = "Раздел2Подр1"
			ИЛИ ИмяСтраницы = "Раздел4" ИЛИ ИмяСтраницы = "Раздел4Подр1" Тогда
			
			РасчетНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Если СтруктураРеквизитовФормы.Свойство("КодПоМестуДоОчистки") Тогда
			ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.КодПоМестуДоОчистки;
			СтруктураРеквизитовФормы.Удалить("КодПоМестуДоОчистки");
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Подр1" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("КодТарифа", ТабличныйДокумент.Область("П000110000101").Значение);
			СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил4" Тогда
			// Особая обработка текста в строке 010 Приложения 4 к Разделу 1.
			ТабличныйДокумент.Области.П00104М101001_1.Значение = "00001";
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2Подр1" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000210002001").Значение);
			СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000210003001").Значение);
			СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000210004001").Значение);
			СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000210007001").Значение);
			СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000310004001").Значение);
			СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000310005001").Значение);
			СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000310006001").Значение);
			СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000310007001").Значение);
			СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
		КонецЕсли;
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВидПечати <> "ПоказатьРеестр" Тогда
		
		ТекстСообщения = "";
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			ЗначПоМесту = СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение);
			ЗначКодФормыРеорг = СокрЛП(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
			СрСпЧисленность = ТабличныйДокумент.Области.СрСпЧисленность.Значение;
		Иначе
			ЗначПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
			ЗначКодФормыРеорг = СокрЛП(СтруктураДанныхТитульный.КодФормыРеорганизации);
			СрСпЧисленность = СтруктураДанныхТитульный.СрСпЧисленность;
		КонецЕсли;
		
		Если СрСпЧисленность <> 0 И (ЗначПоМесту = "335" ИЛИ ЗначПоМесту = "222" ИЛИ ЗначКодФормыРеорг = "9") Тогда
			
			ТекстСообщения = "Поле ""Среднесписочная численность (чел.)"" расчета, "
			+ "представляемого по обособленному подразделению организации, не заполняется";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = '%1. Вывод на печать прерван';
																		|en = '%1. Вывод на печать прерван'"), ТекстСообщения));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если ВидПечати = "ПоказатьРеестр" Тогда
		ЗаголовокФормы = "Реестр сведений о сумме выплат и вознаграждений за " + ПредставлениеПериода(
		НачалоДня(НачалоМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 2))),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина")
		+ " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		ДополнительныеПараметры = Новый Структура("ЗаголовокФормы", ЗаголовокФормы);
		Если НЕ ПечатьРеестраНаСервере(ВидПечати, ЗаголовокФормы) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
			РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
		КонецЕсли;
		
		ДополнительныеПараметры = Неопределено;
		Если НЕ ПечатьНаСервере(ВидПечати) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Для вывода штампа ЭП на всех листах.
	ДополнительныеПараметрыПечати = Неопределено;
	Если НЕ СтруктураРеквизитовФормы.Свойство("ДополнительныеПараметрыПечати", ДополнительныеПараметрыПечати)
	 ИЛИ ТипЗнч(ДополнительныеПараметрыПечати) <> Тип("Структура") Тогда
		ДополнительныеПараметрыПечати = Новый Структура();
		СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыПечати", ДополнительныеПараметрыПечати);
	КонецЕсли;
	ДополнительныеПараметрыПечати.Вставить("ШтампЭЦПНаКаждомЛисте", Истина);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов, ДополнительныеПараметры);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьРеестраНаСервере(ВидПечати, ЗаголовокПечатнойФормы)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	// Начало общей части формирования реестра.
	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Реестр");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Реестр");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          "ПоказатьБланк");
	
	ПредставленияМесяцев = Новый Структура;
	
	КонПериода = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	НачПериода = НачалоДня(НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПредставленияМесяцев.Вставить("Мес3", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	КонПериода = КонецДня(КонецМесяца(ДобавитьМесяц(КонПериода, -1)));
	НачПериода = НачалоДня(НачалоМесяца(КонПериода));
	ПредставленияМесяцев.Вставить("Мес2", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	КонПериода = КонецДня(КонецМесяца(ДобавитьМесяц(КонПериода, -1)));
	НачПериода = НачалоДня(НачалоМесяца(КонПериода));
	ПредставленияМесяцев.Вставить("Мес1", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	ВозможныеМесяцы = Новый Массив;
	ВозможныеМесяцы.Добавить("1");
	ВозможныеМесяцы.Добавить("2");
	ВозможныеМесяцы.Добавить("3");
	
	ИмяМакета = "ПечатныйБланк2023Кв1_Реестр";
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	// Формирование части "Реестр сведений о сумме выплат и вознаграждений".
	//
	ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
	СтрокаПФ = Макет.Получитьобласть("Шапка");
	СтрокаПФ.Параметры.Заполнить(ПредставленияМесяцев);
	СтрокаПФ.Параметры.ЗаголовокПечатнойФормы = ЗаголовокПечатнойФормы;
	ПечФорма.Вывести(СтрокаПФ);
	ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2"));
	
	ИндОсновныхЧастей = 2;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТЗ = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(17, 2);
	КС = Новый КвалификаторыСтроки(4);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	ТЗ.Колонки.Добавить("КодКатегорииЗЛ", ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Мес1_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаСтВз", ОписаниеТиповЧ);
	
	ТЗ_ИтогПоРазделу = ТЗ.Скопировать();
	
	ИндСтрокаВыплат = 0;
	
	РазмерПачки = 1000;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ТЗ.Очистить();
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы321М1];
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			ДанныеСтрокиМнЧ = СтрокаМнЧ.Данные;
			
			Мес = СокрЛП(ДанныеСтрокиМнЧ["П00321М112001"]);
			
			ИндМес = ВозможныеМесяцы.Найти(Мес);
			
			Если ИндМес <> Неопределено Тогда
				
				НовСтрТЗ = ТЗ.Добавить();
				НовСтрТЗ.КодКатегорииЗЛ = ДанныеСтрокиМнЧ["П00321М113001"];
				
				Инд_ = Формат(ИндМес + 1, "ЧГ=") + "_";
				
				НовСтрТЗ["Мес" + Инд_ + "СуммаВыпл"] = ДанныеСтрокиМнЧ["П00321М114001"];
				НовСтрТЗ["Мес" + Инд_ + "БазаВсего"] = ДанныеСтрокиМнЧ["П00321М115001"];
				НовСтрТЗ["Мес" + Инд_ + "БазаГПДог"] = ДанныеСтрокиМнЧ["П00321М116001"];
				НовСтрТЗ["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00321М117001"];
				
				НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
				
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаВыпл"] = ДанныеСтрокиМнЧ["П00321М114001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "БазаВсего"] = ДанныеСтрокиМнЧ["П00321М115001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "БазаГПДог"] = ДанныеСтрокиМнЧ["П00321М116001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00321М117001"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗ.Свернуть("КодКатегорииЗЛ", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
		ТЗ.Сортировать("КодКатегорииЗЛ");
		
		Если ТЗ.Количество() > 0 Тогда
			
			ПредстЗЛ = "";
			Фам = СокрЛП(Ветка.Данные["П000310004001"]);
			Имя = СокрЛП(Ветка.Данные["П000310005001"]);
			Отч = СокрЛП(Ветка.Данные["П000310006001"]);
			Если ЗначениеЗаполнено(Фам) Тогда
				ПредстЗЛ = Фам;
			КонецЕсли;
			Если ЗначениеЗаполнено(Имя) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Имя, Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(Отч) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Отч, Отч);
			КонецЕсли;
			
			СНИЛС = СокрЛП(Ветка.Данные["П000310003001"]);
			
			ИмяСтрокиВыплат = ?(ТЗ.Количество() = 1, "СтрокаВыплат", "СтрокаВыплатКурсив");
			
			ПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
			
			ПФ.Параметры.ФИО = ПредстЗЛ;
			ПФ.Параметры.СНИЛС = СНИЛС;
			ПФ.Параметры.Заполнить(ТЗ[0]);
			
			ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
			
			ПФ.Параметры.НомПП = Формат(ИндСтрокаВыплат, "ЧГ=");
			
			ПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплат" + Формат(ИндСтрокаВыплат, "ЧГ=");
			
			Для ИндСтрТЗ = 1 По ТЗ.Количество() - 1 Цикл
				
				СтрокаПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
				
				СтрокаПФ.Параметры.Заполнить(ТЗ[ИндСтрТЗ]);
				
				ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
				
				СтрокаПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплат" + Формат(ИндСтрокаВыплат, "ЧГ=");
				
				ПФ.Вывести(СтрокаПФ);
				
				Если ИндСтрТЗ = ТЗ.Количество() - 1 Тогда
					
					СтрокаПФ = Макет.Получитьобласть("СтрокаВыплатПодитог");
					ТЗ_ = ТЗ.Скопировать();
					ТЗ_.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
					СтрокаПФ.Параметры.Заполнить(ТЗ_[0]);
					
					ПФ.Вывести(СтрокаПФ);
					
					ОблНиз  = ПФ.Область("СтрокаВыплатПодитог").Низ;
					ОблВерх = ОблНиз - ТЗ.Количество();
					
					Для ОблКоордПоВертикали = ОблВерх По ОблНиз Цикл
						Обл = ПФ.Область(ОблКоордПоВертикали, , ОблКоордПоВертикали, );
						Обл.Имя = "";
					КонецЦикла;
					НовыйИндСтрокаВыплат = ИндСтрокаВыплат - (ТЗ.Количество() - 1);
					Обл = ПФ.Область(ОблВерх, , ОблНиз, );
					Обл.Имя = "СтрокаВыплат" + Формат(НовыйИндСтрокаВыплат, "ЧГ=");
					
					ИндСтрокаВыплат = НовыйИндСтрокаВыплат;
					
					Обл = ПФ.Область(ОблВерх, 5, ОблВерх, 17);
					Обл.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					
					Обл = ПФ.Область(ОблВерх, 2, ОблНиз, 2);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 3, ОблНиз, 3);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 4, ОблНиз, 4);
					Обл.Объединить();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПечФорма.Вывести(ПФ);
			
		КонецЕсли;
		
		Если ИндСтрокаВыплат > 0
			И (ИндСтрокаВыплат / РазмерПачки = Цел(ИндСтрокаВыплат / РазмерПачки))
			И (ИндСтрокаВыплат <> ДеревоДанных.Строки.Количество()) Тогда
			
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			ТабличныйДокумент.ПолеСверху = 5;
			ТабличныйДокумент.ПолеСправа = 5;
			ТабличныйДокумент.ПолеСнизу  = 5;
			ТабличныйДокумент.ПолеСлева  = 5;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПечФорма);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
			ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2"));
			
			ИндОсновныхЧастей = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу3");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
	Если ТЗ_ИтогПоРазделу.Количество() > 0 Тогда
		ПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	КонецЕсли;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Подр1"]);
	
	ТЗ_ИтогПоРазделу.Очистить();
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаВыпл"] = Ветка.Данные["П000110003002"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаВыпл"] = Ветка.Данные["П000110003003"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаВыпл"] = Ветка.Данные["П000110003004"];
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_БазаВсего"] = Ветка.Данные["П000110005102"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_БазаВсего"] = Ветка.Данные["П000110005103"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_БазаВсего"] = Ветка.Данные["П000110005104"];
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаСтВз"] = Ветка.Данные["П000110006102"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаСтВз"] = Ветка.Данные["П000110006103"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаСтВз"] = Ветка.Данные["П000110006104"];
		
	КонецЦикла;
	
	СтрокаПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу1");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
	СтрокаПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	ПФ.Вывести(СтрокаПФ);
		
	Если НЕ ПечФорма.ПроверитьВывод(ПФ) Тогда
		
		ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть1");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть1");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧасть" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть2");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть2");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧасть" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
	КонецЕсли;
	
	ПечФорма.Вывести(ПФ);
	
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСнизу  = 5;
	ТабличныйДокумент.ПолеСлева  = 5;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечФорма);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
	// Формирование части "Реестр сведений о сумме выплат и вознаграждений по дополнительному тарифу".
	//
	ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
	СтрокаПФ = Макет.Получитьобласть("ШапкаДопТариф");
	СтрокаПФ.Параметры.Заполнить(ПредставленияМесяцев);
	СтрокаПФ.Параметры.ЗаголовокПечатнойФормы = СтрЗаменить(ЗаголовокПечатнойФормы,
	"Реестр сведений о сумме выплат и вознаграждений",
	"Реестр сведений о сумме выплат и вознаграждений по дополнительному тарифу");
	ПечФорма.Вывести(СтрокаПФ);
	ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф"));
	
	ИндОсновныхЧастей = 2;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТЗ = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(17, 2);
	КС = Новый КвалификаторыСтроки(3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	ТЗ.Колонки.Добавить("КодЗЛ",          ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Мес1_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаСтВз", ОписаниеТиповЧ);
	
	ТЗ_ИтогПоРазделу = ТЗ.Скопировать();
	
	ИндСтрокаВыплат = 0;
	
	РазмерПачки = 1000;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ТЗ.Очистить();
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы322М1];
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			ДанныеСтрокиМнЧ = СтрокаМнЧ.Данные;
			
			Мес = СокрЛП(ДанныеСтрокиМнЧ["П00322М118001"]);
			
			ИндМес = ВозможныеМесяцы.Найти(Мес);
			
			Если ИндМес <> Неопределено Тогда
				
				НовСтрТЗ = ТЗ.Добавить();
				НовСтрТЗ.КодЗЛ = ДанныеСтрокиМнЧ["П00322М119001"];
				
				Инд_ = Формат(ИндМес + 1, "ЧГ=") + "_";
				
				НовСтрТЗ["Мес" + Инд_ + "База"]      = ДанныеСтрокиМнЧ["П00322М120001"];
				НовСтрТЗ["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00322М121001"];
				
				НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
				
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "База"]      = ДанныеСтрокиМнЧ["П00322М120001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00322М121001"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗ.Свернуть("КодЗЛ", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
		ТЗ.Сортировать("КодЗЛ");
		
		Если ТЗ.Количество() > 0 Тогда
			
			ПредстЗЛ = "";
			Фам = СокрЛП(Ветка.Данные["П000310004001"]);
			Имя = СокрЛП(Ветка.Данные["П000310005001"]);
			Отч = СокрЛП(Ветка.Данные["П000310006001"]);
			Если ЗначениеЗаполнено(Фам) Тогда
				ПредстЗЛ = Фам;
			КонецЕсли;
			Если ЗначениеЗаполнено(Имя) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Имя, Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(Отч) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Отч, Отч);
			КонецЕсли;
			
			СНИЛС = СокрЛП(Ветка.Данные["П000310003001"]);
			
			ИмяСтрокиВыплат = ?(ТЗ.Количество() = 1, "СтрокаВыплатДопТариф", "СтрокаВыплатДопТарифКурсив");
			
			ПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
			
			ПФ.Параметры.ФИО = ПредстЗЛ;
			ПФ.Параметры.СНИЛС = СНИЛС;
			ПФ.Параметры.Заполнить(ТЗ[0]);
			
			ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
			
			ПФ.Параметры.НомПП = Формат(ИндСтрокаВыплат, "ЧГ=");
			
			ПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплатДопТариф" + Формат(ИндСтрокаВыплат, "ЧГ=");
			
			Для ИндСтрТЗ = 1 По ТЗ.Количество() - 1 Цикл
				
				СтрокаПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
				
				СтрокаПФ.Параметры.Заполнить(ТЗ[ИндСтрТЗ]);
				
				ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
				
				СтрокаПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплатДопТариф" + Формат(ИндСтрокаВыплат, "ЧГ=");
				
				ПФ.Вывести(СтрокаПФ);
				
				Если ИндСтрТЗ = ТЗ.Количество() - 1 Тогда
					
					СтрокаПФ = Макет.Получитьобласть("СтрокаВыплатДопТарифПодитог");
					ТЗ_ = ТЗ.Скопировать();
					ТЗ_.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
					СтрокаПФ.Параметры.Заполнить(ТЗ_[0]);
					
					ПФ.Вывести(СтрокаПФ);
					
					ОблНиз  = ПФ.Область("СтрокаВыплатДопТарифПодитог").Низ;
					ОблВерх = ОблНиз - ТЗ.Количество();
					
					Для ОблКоордПоВертикали = ОблВерх По ОблНиз Цикл
						Обл = ПФ.Область(ОблКоордПоВертикали, , ОблКоордПоВертикали, );
						Обл.Имя = "";
					КонецЦикла;
					НовыйИндСтрокаВыплат = ИндСтрокаВыплат - (ТЗ.Количество() - 1);
					Обл = ПФ.Область(ОблВерх, , ОблНиз, );
					Обл.Имя = "СтрокаВыплатДопТариф" + Формат(НовыйИндСтрокаВыплат, "ЧГ=");
					
					ИндСтрокаВыплат = НовыйИндСтрокаВыплат;
					
					Обл = ПФ.Область(ОблВерх, 5, ОблВерх, 11);
					Обл.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					
					Обл = ПФ.Область(ОблВерх, 2, ОблНиз, 2);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 3, ОблНиз, 3);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 4, ОблНиз, 4);
					Обл.Объединить();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПечФорма.Вывести(ПФ);
			
		КонецЕсли;
		
		Если ИндСтрокаВыплат > 0
			И (ИндСтрокаВыплат / РазмерПачки = Цел(ИндСтрокаВыплат / РазмерПачки))
			И (ИндСтрокаВыплат <> ДеревоДанных.Строки.Количество()) Тогда
			
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			ТабличныйДокумент.ПолеСверху = 5;
			ТабличныйДокумент.ПолеСправа = 5;
			ТабличныйДокумент.ПолеСнизу  = 5;
			ТабличныйДокумент.ПолеСлева  = 5;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПечФорма);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
			ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф"));
			
			ИндОсновныхЧастей = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу3ДопТариф");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
	Если ТЗ_ИтогПоРазделу.Количество() > 0 Тогда
		ПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	КонецЕсли;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Подр2"]);
	
	ТЗ_ИтогПоРазделу.Очистить();
	
	Ветка = ДеревоДанных.Строки[0];
	
	Мес1_База = 0;
	Мес2_База = 0;
	Мес3_База = 0;
	Мес1_СуммаСтВз = 0;
	Мес2_СуммаСтВз = 0;
	Мес3_СуммаСтВз = 0;
	
	НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
	
	ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы12М1];
	
	Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Мес1_База = Мес1_База + СтрокаМнЧ.Данные["П00012М104002"];
		Мес2_База = Мес2_База + СтрокаМнЧ.Данные["П00012М104003"];
		Мес3_База = Мес3_База + СтрокаМнЧ.Данные["П00012М104004"];
		Мес1_СуммаСтВз = Мес1_СуммаСтВз + СтрокаМнЧ.Данные["П00012М105002"];
		Мес2_СуммаСтВз = Мес2_СуммаСтВз + СтрокаМнЧ.Данные["П00012М105003"];
		Мес3_СуммаСтВз = Мес3_СуммаСтВз + СтрокаМнЧ.Данные["П00012М105004"];
	КонецЦикла;
	
	НовСтрТЗ_ИтогПоРазделу["Мес1_База"] = Мес1_База;
	НовСтрТЗ_ИтогПоРазделу["Мес2_База"] = Мес2_База;
	НовСтрТЗ_ИтогПоРазделу["Мес3_База"] = Мес3_База;
	НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаСтВз"] = Мес1_СуммаСтВз;
	НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаСтВз"] = Мес2_СуммаСтВз;
	НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаСтВз"] = Мес3_СуммаСтВз;
	
	СтрокаПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу1ДопТариф");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
	СтрокаПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	ПФ.Вывести(СтрокаПФ);
	
	Если НЕ ПечФорма.ПроверитьВывод(ПФ) Тогда
		
		ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть1");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть1");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧастьДопТариф" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть2ДопТариф");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧастьДопТариф" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
	КонецЕсли;
	
	ПечФорма.Вывести(ПФ);
	
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСнизу  = 5;
	ТабличныйДокумент.ПолеСлева  = 5;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечФорма);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
	// Окончание общей части формирования реестра.
	//
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма",                  СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов",                  ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати",                       ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы",        СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц",
	ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
	
	ОбъектОтчета.ПечатныйБланк(ПараметрыПечати);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.АвтозаполнениеБудетРеализованоВБудущихВерсиях(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапуска = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
						
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерКорректировки",           СтруктураДанныхТитульный.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  СтруктураДанныхТитульный.ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормы(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется';
											|en = 'Отчет формируется'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	КонецЕсли;
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = Неопределено;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер)
		И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		// Получение данных из контейнера.
		СтруктураДанныхТитульный = Контейнер["Титульный"];
		Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
			Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
				РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		РасчетНаСервере();
		
		СформироватьРаздел1();
		
		ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		Дан = ДеревоРазд.Строки[0].Данные;
		Раздел1_ОКТМО = Дан["П000010001001"];
		
		ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4"]);
		Дан = ДеревоРазд.Строки[0].Данные;
		ОбъектОтчета(ИмяФормы).УстановитьКодПоОКТМОИКБКВРазделе4(Дан, Раздел1_ОКТМО);
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРазд, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел4"]);
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ЯчейкаРасшифровки = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ТекущаяСтрока = ЯчейкаРасшифровки.Верх;
	
	Раздел1Подр1КодТарифа = "";
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П000110000101");
	Если ОбластьТаблДокумента <> Неопределено Тогда
		Раздел1Подр1КодТарифа = СокрЛП(ОбластьТаблДокумента.Значение);
	КонецЕсли;
	
	Раздел1Подр2КодОснования = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Подр2КодОснования = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Подр2КодКлассаУсловий = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100201_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Подр2КодКлассаУсловий = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100201"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Подр3КодОснования = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00013М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Подр3КодОснования = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00013М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("Организация",                СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаПодписи",                СтруктураДанныхТитульный.ДатаПодписи);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", ЯчейкаРасшифровки.Текст);
	
	ПараметрыОтчета.Вставить("Раздел1Подр1КодТарифа",        Раздел1Подр1КодТарифа);
	ПараметрыОтчета.Вставить("Раздел1Подр2КодОснования",     Раздел1Подр2КодОснования);
	ПараметрыОтчета.Вставить("Раздел1Подр2КодКлассаУсловий", Раздел1Подр2КодКлассаУсловий);
	ПараметрыОтчета.Вставить("Раздел1Подр3КодОснования",     Раздел1Подр3КодОснования);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(ЯчейкаРасшифровки.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ИмяФормы), ИмяФормы(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтотОбъект, Команда);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2024 Тогда
	
		ПоказатьПредупреждение(, НСтр(
		"ru = 'Проверка контрольных соотношений для 2024 и более поздних 
		| календарных годов будет реализована в будущих версиях программы';
		|en = 'Проверка контрольных соотношений для 2024 и более поздних 
		| календарных годов будет реализована в будущих версиях программы'"));
		
		Возврат;
	
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мВыбраннаяФорма = "ФормаОтчета2022Кв1" Тогда
	
		ПоказатьПредупреждение(, НСтр(
		"ru = 'Неактуальная версия отчета, проверка контрольных соотношений невозможна';
		|en = 'Неактуальная версия отчета, проверка контрольных соотношений невозможна'"));
		
		Возврат;
	
	КонецЕсли;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2023 Тогда
	
		ПоказатьПредупреждение(, НСтр(
		"ru = 'Проверка контрольных соотношений для данной версии отчета 
		| возможна начиная с отчетных периодов 2023 года';
		|en = 'Проверка контрольных соотношений для данной версии отчета 
		| возможна начиная с отчетных периодов 2023 года'"));
		
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	
	ПараметрыПоискаКопий = Новый Структура();
	ПараметрыПоискаКопий.Вставить("Организация"			, СтруктураРеквизитовФормы.Организация);
	ПараметрыПоискаКопий.Вставить("ДатаОкончания"		, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыПоискаКопий.Вставить("НомерКорректировки"	, НомерКорректировки);
	
	ДополнительныеПараметры.Вставить("ИскатьКопии"		, Истина);
	ДополнительныеПараметры.Вставить("ПараметрыПоискаКопий", ПараметрыПоискаКопий);
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
		
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КС_АдресРезультата);
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КС_АдресРасшифровки);
		
	СписочныеЗначения = Новый Структура;
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если СписочныеЗначения.Свойство(СтрокаТЗ.Показатель) Тогда
			МассивЗначений = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
			СписочныеЗначения.Вставить(СтрокаТЗ.Показатель, МассивЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяФормы"								, ИмяФормы);
	ПараметрыВыполнения.Вставить("мСохраненныйДок"						, СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыполнения.Вставить("мВыбраннаяФорма"						, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыВыполнения.Вставить("СтруктураРеквизитовФормы"				, СтруктураРеквизитовФормы);
	ПараметрыВыполнения.Вставить("мСтруктураМногоуровневыхРазделов"		, мСтруктураМногоуровневыхРазделов);
	ПараметрыВыполнения.Вставить("СоответствиеЕдиницыИзмеренияДелителю"	, СоответствиеЕдиницыИзмеренияДелителю);
	ПараметрыВыполнения.Вставить("СтруктураДанныхТитульный"				, СтруктураДанныхТитульный);
	ПараметрыВыполнения.Вставить("СписочныеЗначения"					, СписочныеЗначения);
	ПараметрыВыполнения.Вставить("АдресРезультата"						, СтруктураРеквизитовФормы.КС_АдресРезультата);
	ПараметрыВыполнения.Вставить("АдресРасшифровки"						, СтруктураРеквизитовФормы.КС_АдресРасшифровки);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Проверка контрольных соотношений Расчета по страховым взносам';
			|en = 'Проверка контрольных соотношений Расчета по страховым взносам'");
	ИмяПроцедуры = "РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияДлительнаяОперация";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НаименованиеФормы", "2023Кв1");
	
	Возврат ОбъектОтчета.ВыполнитьДокументированиеОбъект2023(ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область КС_Данные

&НаКлиенте
Функция ВыполнитьПоискКопийРеглОтчетов(ДополнительныеПараметры) Экспорт

	Возврат ВыполнитьПоискКопийРеглОтчетовНаСервере(ДополнительныеПараметры);	

КонецФункции 

&НаСервере
Функция ВыполнитьПоискКопийРеглОтчетовНаСервере(ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА Документ.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК УчетноеЧисло,
	|	Документ.Ссылка КАК Ссылка,
	|	МЕСЯЦ(Документ.ДатаОкончания) КАК МесяцОтчета,
	|	Документ.Вид КАК Вид,
	|	Документ.Дата КАК Дата,
	|	Документ.ДатаОкончания КАК ДатаОкончания,
	|	Документ.ДатаПодписи КАК ДатаПодписи,
	|	Документ.ПометкаУдаления КАК ПометкаУдаления,
	|	Документ.Комментарий КАК Комментарий,
	|	Документ.ВыбраннаяФорма КАК ВыбраннаяФорма,
	|	Документ.ИсточникОтчета КАК ИсточникОтчета,
	|	Документ.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ЖурналОтчетовСтатусы.Скрыт КАК Скрыт,
	|	ЖурналОтчетовСтатусы.Статус КАК СтатусОтчета,
	|	"""" КАК Дополнительно
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО Документ.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|			И Документ.Организация = ЖурналОтчетовСтатусы.Организация
	|ГДЕ
	|	Документ.Организация = &Организация
	|	И Документ.ИсточникОтчета = ""РегламентированныйОтчетРасчетПоСтраховымВзносам""
	|	И Документ.ВыбраннаяФорма = ""ФормаОтчета2023Кв1""
	|	И ГОД(Документ.ДатаОкончания) = ГОД(&ДатаОтчета)
	|	И МЕСЯЦ(Документ.ДатаОкончания) <= МЕСЯЦ(&ДатаОтчета)
	|	И ВЫБОР
	|			КОГДА МЕСЯЦ(Документ.ДатаОкончания) = МЕСЯЦ(&ДатаОтчета)
	|				ТОГДА Документ.Вид < &НомерКорректировки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.Представление КАК Представление,
	|	СУММА(ВТ_1.УчетноеЧисло) КАК УчетноеЧисло
	|ПОМЕСТИТЬ ВТ_2
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_1.Представление
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_1.УчетноеЧисло) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.Представление КАК Ключ,
	|	ВТ_1.Ссылка КАК Ссылка,
	|	ВТ_1.МесяцОтчета КАК МесяцОтчета,
	|	ВТ_1.Вид КАК Вид,
	|	ВТ_1.ДатаПодписи КАК ДатаПодписи,
	|	ВТ_1.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_1.УчетноеЧисло КАК УчетноеЧисло,
	|	ВТ_1.Комментарий КАК Комментарий,
	|	ВТ_1.СтатусОтчета КАК СтатусОтчета,
	|	ВТ_1.ВыбраннаяФорма КАК ВыбраннаяФорма,
	|	ВТ_1.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ВТ_1.Скрыт КАК Скрыт,
	|	ВТ_1.Дополнительно КАК Дополнительно
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_2 КАК ВТ_2
	|		ПО ВТ_1.Представление = ВТ_2.Представление";
	
	Запрос.УстановитьПараметр("Организация"			, ДополнительныеПараметры.Организация);
	Запрос.УстановитьПараметр("ДатаОтчета"			, ДополнительныеПараметры.ДатаОкончания);
	Запрос.УстановитьПараметр("НомерКорректировки"	, ДополнительныеПараметры.НомерКорректировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьКопии", НЕ РезультатЗапроса.Пустой());
	Результат.Вставить("АдресТаблицыКопий", ПоместитьВоВременноеХранилище(ТаблицаДанных, УникальныйИдентификатор));
	Результат.Вставить("МакетСКП");
	Результат.Вставить("ВариантСКП");
	
	Возврат Результат;
	
КонецФункции // ВыполнитьПоискКопийРеглОтчетов()
 
#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ (СтруктураРеквизитовФормы.мАвтоВыборКодов И НЕ Область.Имя = "ПоМесту") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
			<> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	Оп = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтотОбъект,,,, Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ПоМесту" Тогда
		
		ПрежнийКодПоМесту = СокрЛП(Область.Значение);
		НовыйКодПоМесту = СокрЛП(РезультатВыбора[КолонкаПоиска]);
		
		ПрежнийКодПоМестуЭтоКодГлавыКФХ = (ПрежнийКодПоМесту = "124" ИЛИ ПрежнийКодПоМесту = "240");
		НовыйКодПоМестуЭтоКодГлавыКФХ = (НовыйКодПоМесту = "124" ИЛИ НовыйКодПоМесту = "240");
		
		ДополнительныеПараметры = Новый Структура("Область, НовыйКодПоМесту", Область, НовыйКодПоМесту);
	
		Если ПрежнийКодПоМестуЭтоКодГлавыКФХ И НЕ НовыйКодПоМестуЭтоКодГлавыКФХ Тогда
			Оп = Новый ОписаниеОповещения("ВопросВвестиКодПоМестуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При изменении значения кода по месту нахождения
			|(учета) с ""%1"" на ""%2"" Раздел 2 и Подраздел 1
			|Раздела 2 будут очищены и исключены из состава
			|дерева разделов. Продолжить?';
			|en = 'При изменении значения кода по месту нахождения
			|(учета) с ""%1"" на ""%2"" Раздел 2 и Подраздел 1
			|Раздела 2 будут очищены и исключены из состава
			|дерева разделов. Продолжить?'"), ПрежнийКодПоМесту, НовыйКодПоМесту);
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			Возврат;
		ИначеЕсли НЕ ПрежнийКодПоМестуЭтоКодГлавыКФХ И НовыйКодПоМестуЭтоКодГлавыКФХ Тогда
			ВопросВвестиКодПоМестуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "ПоМесту" ИЛИ КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВвестиКодПоМестуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Область.Значение = ДополнительныеПараметры.НовыйКодПоМесту;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	СохрИмяТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ДополнительныеПараметры.НовыйКодПоМесту <> "124" И ДополнительныеПараметры.НовыйКодПоМесту <> "240" Тогда
		ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2", 0);
		ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2Подр1", 0);
	Иначе
		ИзменитьНастройкиРаздела2ВДеревеРазделов_УстановитьКодПоОКТМОИКБКВРазделах1и2();
	КонецЕсли;
	
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
	РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", СохрИмяТекРазделаОтчета);
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиРаздела2ВДеревеРазделов_УстановитьКодПоОКТМОИКБКВРазделах1и2()
	
	ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2", 1);
	ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2Подр1", 1);
	
	СсылкаНаРегистрациюВНО = ОбъектОтчета(ИмяФормы).РеквизитЭлементаСправочника(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы.Организация);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПоМесту", СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение));
	
	ОбъектОтчета(ИмяФормы).УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СсылкаНаРегистрациюВНО, СтруктураРеквизитовФормы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел(ИмяРаздела, ВариантНастроек, ФормироватьДеревоРазделов = Истина)
	
	ИзменитьНастройкиРазделаВДеревеРазделов(ИмяРаздела, ВариантНастроек);
	
	ОбъектОтчета(ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																		 СтруктураРеквизитовФормы,
																		 мСтруктураМногоуровневыхРазделов,
																		 ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиРазделаВДеревеРазделов(ИмяРаздела, ВариантНастроек, ФормироватьДеревоРазделов = Истина)
	
	Для каждого СтраницаНастроек Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если СтраницаНастроек.ИмяСтраницы = ИмяРаздела Тогда
			СтраницаНастроек.ПоказатьСтраницу = ВариантНастроек;
			СтраницаНастроек.ВыводНаПечать    = ВариантНастроек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если ФормироватьДеревоРазделов Тогда
		СформироватьДеревоРазделовОтчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел1Подр2" ИЛИ Ячейка.Раздел = "Раздел1Подр3"
		ИЛИ Ячейка.Раздел = "Раздел1Прил1" ИЛИ Ячейка.Раздел = "Раздел1Прил2" ИЛИ Ячейка.Раздел = "Раздел1Прил3"
		ИЛИ Ячейка.Раздел = "Раздел1Прил4" ИЛИ Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел4"
		ИЛИ Ячейка.Раздел = "Раздел4Подр1" ИЛИ Ячейка.Раздел = "Раздел4Прил1" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Ячейка.Раздел = "Раздел1Подр1" ИЛИ Ячейка.Раздел = "Раздел2Подр1" ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ИмяРаздела = "Раздел1Подр1" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("КодТарифа", ДанныеСтраницы.П000110000101);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
							
						ИначеЕсли ИмяРаздела = "Раздел2Подр1" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("Фам", ДанныеСтраницы.П000210002001);
							СтруктПарам.Вставить("Имя", ДанныеСтраницы.П000210003001);
							СтруктПарам.Вставить("Отч", ДанныеСтраницы.П000210004001);
							СтруктПарам.Вставить("ДатаРожд", ДанныеСтраницы.П000210007001);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета
							= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
							СтруктПарам);
							
						ИначеЕсли ИмяРаздела = "Раздел3" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("Фам", ДанныеСтраницы.П000310004001);
							СтруктПарам.Вставить("Имя", ДанныеСтраницы.П000310005001);
							СтруктПарам.Вставить("Отч", ДанныеСтраницы.П000310006001);
							СтруктПарам.Вставить("ДатаРожд", ДанныеСтраницы.П000310007001);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета
							= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
							СтруктПарам);
							
						Иначе
							
							НаимСтраницы = "Стр. ";
							Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
								НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
							КонецЕсли;
							
							ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
							+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
							
						КонецЕсли;
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницыПриложения1КРазделу1(СтруктураПараметров)
	
	КодТарифа = СокрЛП(СтруктураПараметров.КодТарифа);
	
	Возврат ?(ЗначениеЗаполнено(КодТарифа), "Код тарифа " + КодТарифа,
	"Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ="));
	
КонецФункции

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущийРаздел.Доступность = Ложь;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
			1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			
			Элементы.ОчиститьТекущийРаздел.Доступность
			= (Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2Подр1"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3");
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
				ТекстЗаголовка = "Удалить страницу";
				Если ИндексыВыделенныхСтраницРаздела() <> Неопределено Тогда
					ТекстЗаголовка = "Удалить выделенные страницы";
				КонецЕсли;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Заголовок = ТекстЗаголовка;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюПоказатьБланкСтраницыРаздела3.Видимость = Истина;
	Иначе
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюПоказатьБланкСтраницыРаздела3.Видимость = Ложь;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ОбъектОтчета(ИмяФормы).ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   СтруктураРеквизитовФормы,
																   ДатаПодписи,
																   ТабличныйДокумент,
																   Неопределено,
																   ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
	ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Оп = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оп = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтотОбъектИмя)
	
	Форма_Имя = СтрЗаменить(ЭтотОбъектИмя, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормы(ЭтотОбъектИмя)
	
	Возврат Сред(ЭтотОбъектИмя, СтрНайти(ЭтотОбъектИмя, ".Форма.") + 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
