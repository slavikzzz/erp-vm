
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
// Параметры:
//	Контекст							- Произвольный								- параметры контекста, в котором используется отчет.
//	КлючСхемы							- Строка									- идентификатор текущей схемы компоновщика настроек.
//	КлючВарианта						- Строка									- имя предопределенного или уникальный идентификатор пользовательского
//																						варианта отчета.
//										- Неопределено 								- вызов для варианта расшифровки или без контекста.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных					- настройки варианта отчета, которые будут загружены
//																						в компоновщик настроек после его инициализации.
//										- Неопределено 								- настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки, которые будут загружены в компоновщик
//																						настроек после его инициализации.
//										- Неопределено 								- пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Если НовыеПользовательскиеНастройкиКД = Неопределено Тогда
			ПользовательскиеНастройки = Контекст.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; // ПользовательскиеНастройкиКомпоновкиДанных -
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, ПользовательскиеНастройки);
		Иначе
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		КонецЕсли;
		
		НастроитьПараметрыОтборыПоФункциональнымОпциям(НовыеНастройкиКД);
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Материалы",
		НСтр("ru = 'Материалы';
			|en = 'Materials'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоСоСклада",
		НСтр("ru = 'Поступило со склада или кладовых других цехов и приходы по перемещениям';
			|en = 'Received from warehouse or other shop floor storerooms and transfer receipts'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоВНЗП",
		НСтр("ru = 'Поступило со склада в незавершенное производство';
			|en = 'Received from warehouse to work-in-progress'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Расходы",
		НСтр("ru = 'Расходы по перемещениям, передачи на склад, в другие кладовые, в производство';
			|en = 'Expenses for transfers, transfers to a warehouse, other storerooms, production'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("СписанияНаРасходы",
		НСтр("ru = 'Списания на расходы';
			|en = 'Written off as expenses'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПриходыОтПостащиков",
		НСтр("ru = 'Приходы от поставщика и выпуски продукции';
			|en = 'Receipts from vendor and manufactured product releases'"));
	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Постатейные",
		НСтр("ru = 'Постатейные';
			|en = 'Itemized'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстаток",
		НСтр("ru = 'Начальный остаток';
			|en = 'Opening balance'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Регистрация",
		НСтр("ru = 'Закупка услуг, регистрация, отражение зарплаты';
			|en = 'Service purchase, registration, payroll'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РаспределениеНаПроизводство",
		НСтр("ru = 'Распределение на производство';
			|en = 'Allocation to production'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Выбытие",
		НСтр("ru = 'Списание на другие статьи, выбытие';
			|en = 'Write off to other items, retirement'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Перенос",
		НСтр("ru = 'Перенос на другой объект возникновения затрат';
			|en = 'Allocate to another cost center'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстаток",
		НСтр("ru = 'Конечный остаток';
			|en = 'Closing balance'"));
		
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Производство",
		НСтр("ru = 'Производство';
			|en = 'Production'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоМатериалы22",
		НСтр("ru = 'Поступило на незавершенное производство (материалы) для 2.2';
			|en = 'Received to work-in-progress (materials) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоМатериалы21",
		НСтр("ru = 'Поступило на незавершенное производство (материалы) для 2.1';
			|en = 'Received to work-in-progress (materials) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоОтходы",
		НСтр("ru = 'Поступило на незавершенное производство (отходы по фиксированной стоимости)';
			|en = 'Received to work-in-progress (waste at a fixed cost)'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоУслуги22",
		НСтр("ru = 'Поступило на незавершенное производство (услуги переработчика) для 2.2';
			|en = 'Received to work-in-progress (subcontractor services) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Расход22",
		НСтр("ru = 'Расход из незавершенного производства (материалы) для 2.2';
			|en = 'Work-in-progress expense (materials) 2.2'"));	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Расход21",
		НСтр("ru = 'Расход из незавершенного производства (материалы) для 2.1';
			|en = 'Work-in-progress expense (materials) 2.1'"));
		
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстатокТрудозатраты22",
		НСтр("ru = 'Начальный остаток (трудозатраты) для 2.2';
			|en = 'Opening balance (labor costs) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстатокТрудозатраты21",
		НСтр("ru = 'Начальный остаток (трудозатраты) для 2.1';
			|en = 'Opening balance (labor costs) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоТрудозатраты22",
		НСтр("ru = 'Поступило на незавершенное производство (трудозатраты) для 2.2';
			|en = 'Received to work-in-progress (labor costs) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоТрудозатраты21",
		НСтр("ru = 'Поступило на незавершенное производство (трудозатраты) для 2.1';
			|en = 'Received to work-in-progress (labor costs) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РасходТрудозатраты22",
		НСтр("ru = 'Расход из незавершенного производства (трудозатраты) для 2.2';
			|en = 'Work-in-progress expense (labor costs) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РасходТрудозатраты21",
		НСтр("ru = 'Расход из незавершенного производства (трудозатраты) для 2.1';
			|en = 'Work-in-progress expense (labor costs) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстатокТрудозатраты22",
		НСтр("ru = 'Конечный остаток (трудозатраты) для 2.2';
			|en = 'Closing balance (labor costs) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстатокТрудозатраты21",
		НСтр("ru = 'Конечный остаток (трудозатраты) для 2.1';
			|en = 'Closing balance (labor costs) 2.1'"));
		
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстатокПостатейные22",
		НСтр("ru = 'Начальный остаток (постатейные) для 2.2';
			|en = 'Opening balance (itemized) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстатокПостатейные21",
		НСтр("ru = 'Начальный остаток (постатейные) для 2.1';
			|en = 'Opening balance (itemized) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоПостатейные22",
		НСтр("ru = 'Поступило на незавершенное производство (постатейные) для 2.2';
			|en = 'Received to work-in-progress (itemized) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоПостатейные21",
		НСтр("ru = 'Поступило на незавершенное производство (постатейные) для 2.1';
			|en = 'Received to work-in-progress (itemized) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РасходПостатейные22",
		НСтр("ru = 'Расход из незавершенного производства (постатейные) для 2.2';
			|en = 'Work-in-progress expense (itemized) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("РасходПостатейные21",
		НСтр("ru = 'Расход из незавершенного производства (постатейные) для 2.1';
			|en = 'Work-in-progress expense (itemized) 2.1'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстатокПостатейные22",
		НСтр("ru = 'Конечный остаток (трудозатраты) для 2.2';
			|en = 'Closing balance (labor costs) 2.2'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстатокПостатейные21",
		НСтр("ru = 'Конечный остаток (трудозатраты) для 2.1';
			|en = 'Closing balance (labor costs) 2.1'"));
		
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Материальные",
		НСтр("ru = 'Материальные';
			|en = 'Material'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Услуги",
		НСтр("ru = 'Услуги';
			|en = 'Services'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Трудозатраты",
		НСтр("ru = 'Трудозатраты';
			|en = 'Labor costs'"));
	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ВклИсклНДС",
		НСтр("ru = 'Вкл./искл. НДС';
			|en = 'Include/exclude VAT'"));
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период");
	ПараметрПериодОтчетаЗначение = ПараметрПериодОтчета.Значение; //СтандартныйПериод
	БезОтбораПоПериоду = Не ПараметрПериодОтчета.Использование;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "БезОтбораПоПериоду", БезОтбораПоПериоду);

	БезОтбораПоПериодуНачало = БезОтбораПоПериоду ИЛИ НЕ ЗначениеЗаполнено(ПараметрПериодОтчетаЗначение.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "БезОтбораПоПериодуНачало", БезОтбораПоПериодуНачало);
	
	ОсновнойНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Основной; // НаборДанныхОбъединениеСхемыКомпоновкиДанных
	ЗапросыНабора = ОсновнойНаборДанных.Элементы;
	
	ЗапросТМЦ = ЗатратыСервер.ТекстЗапросаПроизводственныеЗатратыТМЦ();
	ЗапросыНабора.ТМЦ.Запрос = ЗапросТМЦ.ТекстЗапроса;
	
	ЗапросПостатейные = ЗатратыСервер.ТекстЗапросаПроизводственныеЗатратыПостатейные();
	ЗапросыНабора.Постатейные.Запрос = ЗапросПостатейные.ТекстЗапроса;
	
	ЗапросПартии = ЗатратыСервер.ТекстЗапросаПроизводственныеЗатратыПоПартиямПроизводства();
	ЗапросыНабора.ПартииПроизводства.Запрос = ЗапросПартии.ТекстЗапроса;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ОсновнойНаборДанных = МакетКомпоновки.НаборыДанных.Основной; // НаборДанныхОбъединениеСхемыКомпоновкиДанных
	ЗапросыНабора = ОсновнойНаборДанных.Элементы;

	ЗатратыСервер.ДобавитьОтборПоВыбраннымРесурсам(ЗапросТМЦ.Ресурсы, ЗапросыНабора.ТМЦ);
	ЗатратыСервер.ДобавитьОтборПоВыбраннымРесурсам(ЗапросПостатейные.Ресурсы, ЗапросыНабора.Постатейные);
	ЗатратыСервер.ДобавитьОтборПоВыбраннымРесурсам(ЗапросПартии.Ресурсы, ЗапросыНабора.ПартииПроизводства);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Ложь);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Настраивает доступные значения у параметра компоновки данных "Данные по себестоимости" в зависимости от варианта.
// 
// Параметры:
//	Документ - ДокументСсылка.РаспределениеПрочихЗатрат - расшифровывающийся документ.
//	НовыеНастройкиКД - НастройкиКомпоновкиДанных - переопределяемые настройки отчета.
//	НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - настройки схемы компоновки данных.
Процедура НастроитьПараметрыОтчетаПоВариантуОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	ПредопределенныйВариант = ПолучитьПредопределенныйВариант(НастройкиОтчета.ВариантСсылка);
	
	ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеПоСебестоимости");
	ПараметрПоПредприятию = СхемаКомпоновкиДанных.Параметры.Найти("ПоПредприятию");
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ПредопределенныйВариант.КлючВарианта = "ДвижениеТМЦиПроизводственныеЗатратыПоПредприятию" Тогда
		
		СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета с НДС';
										|en = 'In management accounting currency, including VAT'"));
		СписокВыбора.Добавить(2, НСтр("ru = 'В валюте упр. учета без НДС';
										|en = 'In management accounting currency, excluding VAT'"));
		ПараметрПоПредприятию.Значение = Истина;
		
	Иначе
		
		Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
			СписокВыбора.Добавить(3, НСтр("ru = 'В валюте упр. учета';
											|en = 'In management accounting currency'"));
		КонецЕсли;
		СписокВыбора.Добавить(4, НСтр("ru = 'В валюте регл. учета';
										|en = 'In local accounting currency'"));
		ПараметрПоПредприятию.Значение = Ложь;
		
	КонецЕсли;
	
	ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраДанныеОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеПоСебестоимости"));
	НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеОтчета.ИдентификаторПользовательскойНастройки);
	
	Если Не НастройкаДанныеОтчета = Неопределено
		И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
		НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредопределенныйВариант(Знач Вариант)
	
	КлючиВариантов = Новый Массив;
	КлючиВариантов.Добавить("ДвижениеТМЦиПроизводственныеЗатраты");
	КлючиВариантов.Добавить("ДвижениеТМЦиПроизводственныеЗатратыПоПредприятию");
	
	// Если вариант не задан, то возьмем первый из списка по умолчанию
	Если Вариант = Неопределено Тогда
		Возврат Новый Структура("КлючВарианта", КлючиВариантов[0]);
	КонецЕсли;
	
	Пока КлючиВариантов.Найти(Вариант.КлючВарианта) = Неопределено
		И ЗначениеЗаполнено(Вариант.Родитель) Цикл
		Вариант = Вариант.Родитель;
	КонецЦикла;
	
	Возврат Вариант;
	
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "ЗаказНаПроизводство");
	КонецЕсли;
	
	ВедетсяУчетПостоянныхИВременныхРазниц = Ложь; 
	//++ НЕ УТ
	
	//++ Локализация
	ВедетсяУчетПостоянныхИВременныхРазниц = Истина;
	//-- Локализация
	
	//-- НЕ УТ
	Если НЕ ВедетсяУчетПостоянныхИВременныхРазниц Тогда
		УдаляемыеПоля = Новый Массив;
		УдаляемыеПоля.Добавить("НачальныйОстатокНУ");
		УдаляемыеПоля.Добавить("НачальныйОстатокВР");
		УдаляемыеПоля.Добавить("НачальныйОстатокПР");
		УдаляемыеПоля.Добавить("ПриобретеноНУ");
		УдаляемыеПоля.Добавить("ПриобретеноВР");
		УдаляемыеПоля.Добавить("ПриобретеноПР");
		УдаляемыеПоля.Добавить("ПоступилоНУ");
		УдаляемыеПоля.Добавить("ПоступилоВР");
		УдаляемыеПоля.Добавить("ПоступилоПР");
		УдаляемыеПоля.Добавить("ПеремещенияНУ");
		УдаляемыеПоля.Добавить("ПеремещенияВР");
		УдаляемыеПоля.Добавить("ПеремещенияПР");
		УдаляемыеПоля.Добавить("СписаноНУ");
		УдаляемыеПоля.Добавить("СписаноВР");
		УдаляемыеПоля.Добавить("СписаноПР");
		УдаляемыеПоля.Добавить("ПереданоНУ");
		УдаляемыеПоля.Добавить("ПереданоВР");
		УдаляемыеПоля.Добавить("ПереданоПР");
		УдаляемыеПоля.Добавить("ПрочееСписаниеНУ");
		УдаляемыеПоля.Добавить("ПрочееСписаниеВР");
		УдаляемыеПоля.Добавить("ПрочееСписаниеПР");
		УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоНУ");
		УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоВР");
		УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоПР");
		УдаляемыеПоля.Добавить("ПроизведеноНУ");
		УдаляемыеПоля.Добавить("ПроизведеноВР");
		УдаляемыеПоля.Добавить("ПроизведеноПР");
		УдаляемыеПоля.Добавить("ТранзитМеждуОВЗНУ");
		УдаляемыеПоля.Добавить("ТранзитМеждуОВЗВР");
		УдаляемыеПоля.Добавить("ТранзитМеждуОВЗПР");
		УдаляемыеПоля.Добавить("РасходНаПроизводствоНУ");
		УдаляемыеПоля.Добавить("РасходНаПроизводствоВР");
		УдаляемыеПоля.Добавить("РасходНаПроизводствоПР");
		УдаляемыеПоля.Добавить("КонечныйОстатокНУ");
		УдаляемыеПоля.Добавить("КонечныйОстатокВР");
		УдаляемыеПоля.Добавить("КонечныйОстатокПР");
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ОграничитьИспользованиеПолейСКД(УдаляемыеПоля, СхемаКомпоновкиДанных,
			КомпоновщикНастроек, "", Истина);
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля);
		КомпоновкаДанныхСервер.УдалитьВыбранноеПолеИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли