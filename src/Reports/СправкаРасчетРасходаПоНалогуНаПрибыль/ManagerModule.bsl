#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты


// Описывает свойства отчета (манифест), декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьПослеВыводаРезультата - Булево -
// * ИспользоватьПриВыводеПодвала - Булево -
// * ИспользоватьПриВыводеЗаголовка - Булево -
// * ИспользоватьПередКомпоновкойМакета - Булево -
// * ИспользоватьВнешниеНаборыДанных - Булево -
// * ИспользоватьДанныеРасшифровки - Булево -
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИспользоватьДанныеРасшифровки",                   Ложь);
	Манифест.Вставить("ИспользоватьВнешниеНаборыДанных",                 Истина);
	Манифест.Вставить("ИспользоватьПередКомпоновкойМакета",              Истина);
	Манифест.Вставить("ИспользоватьПриВыводеЗаголовка",                  Истина);
	Манифест.Вставить("ИспользоватьПриВыводеПодвала",                    Ложь);
	Манифест.Вставить("ИспользоватьПослеВыводаРезультата",               Истина);
	Манифест.Вставить("ИспользоватьФиксированныйМакетЗаголовкаИПодвала", Истина);
	
	СправкиРасчеты.УстановитьОтчетНеИспользуетНаборыСуммовыхПоказателей(Манифест);
	
	Возврат Манифест;

КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПередКомпоновкойМакета.
//
// Параметры:
//  Контекст			 - Структура - контекст, в котором формируется отчет.
//                         См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Схема				 - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//
Процедура ПередКомпоновкойМакета(Контекст, Схема, КомпоновщикНастроек) Экспорт
	
	// В этом отчете фактическое получение всех данных выполняется без механизмов СКД
	Контекст.ВыполнениеОтчета.Вставить("Данные", ДанныеОтчета(Контекст.КонецПериода, Контекст.Организация, Контекст.ВариантНО));
	
	Если Не ВыполненаПодготовкаДанных(Контекст) Тогда
		
		Контекст.ВыполнениеОтчета.Вставить("Примечания", Новый Структура);
		
		Если ПрименяетсяСправкаРасчет(Контекст) Тогда
			// Оповестим пользователя, что нужно выполнить регламентную операцию
			Контекст.ВыполнениеОтчета.Примечания.Вставить("ВыполнитьРегламентнуюОперацию", 0); // Текст - в ВывестиПримечания
		Иначе
			// Оповестим пользователя, что справка-расчет в этом периоде не используется
			Контекст.ВыполнениеОтчета.Примечания.Вставить("СправкаРасчетНеПрименяется", 0); // Текст - в ВывестиПримечания
		КонецЕсли;
		
		
		// Пустые данные выводить не будем
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Контекст.ВыполнениеОтчета.Вставить("Примечания", ПримечанияЗаголовка(Контекст));
	
	ДобавитьСсылкуПримечаниеПорядокРасчета(Схема, Контекст.ВыполнениеОтчета.Примечания);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьВнешниеНаборыДанных.
//
// Параметры:
//  Контекст        - Структура - контекст, в котором формируется отчет.
//                         См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
// Возвращаемое значение:
//  Структура - внешние наборы данных.
//            * Ключ - Строка - имя набора
//            * Значение - ТаблицаЗначений - набор данных
//
Функция ПолучитьВнешниеНаборыДанных(Контекст, МакетКомпоновки) Экспорт
	
	ДобавитьПримечанияДанных(Контекст.ВыполнениеОтчета.Данные, Контекст.ВыполнениеОтчета.Примечания);
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ВсеДанные", Контекст.ВыполнениеОтчета.Данные);
	
	Возврат НаборыДанных;
	
КонецФункции

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеПодвала.
//
// Параметры:
//  Контекст  - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ, в который формируется отчет.
//
Процедура ПриВыводеПодвала(Контекст, Результат) Экспорт
	
	Если Не ВыполненаПодготовкаДанных(Контекст) Тогда
		// Подписывать заведомо некорректный отчет не следует
		Возврат;
	КонецЕсли;
	
	// Стандартное поведение
	БухгалтерскиеОтчетыВызовСервера.ВывестиПодвалОтчета(Контекст, Результат);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеВыводаРезультата.
//
// Параметры:
//  Контекст - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	
	ВывестиПримечания(Результат, Контекст.ВыполнениеОтчета.Примечания, Контекст.ВыполнениеОтчета.Данные);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДанныеОтчета

Функция ДанныеОтчета(Знач Период, Организация, ВариантНО)
	
	// В отличие от отчетов, где данные получаются выполнением СКД, здесь получаем данные без привилегированного режима
	
	РегистрыСведений.РасчетОтложенногоНалога.ПривестиПериодРасчета(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", Период);
	Запрос.УстановитьПараметр("ВариантНО",     ?(ЗначениеЗаполнено(ВариантНО), ВариантНО, Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Расчет.НомерПоказателя > ""999""
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ГруппаПоказателей,
	|	Расчет.НомерПоказателя КАК НомерПоказателя,
	|	Расчет.Показатель КАК Показатель,
	|	ПРЕДСТАВЛЕНИЕ(Расчет.Показатель) КАК ПредставлениеПоказателя,
	|	Расчет.ПорядокРасчета КАК ПорядокРасчета,
	|	Расчет.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.РасчетПоказателейОтложенногоНалога КАК Расчет
	|ГДЕ
	|	Расчет.ПериодРасчета = &ПериодРасчета
	|	И Расчет.Организация = &Организация
	|	И ВЫБОР
	|		КОГДА &ВариантНО = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Расчет.ВариантНалогообложенияПрибыли = &ВариантНО
	|	КОНЕЦ
	|	И Расчет.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПоказателей,
	|	НомерПоказателя,
	|	Показатель";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ТонкаяНастройка

Функция ПримечанияЗаголовка(Контекст)
	
	Примечания = Новый Структура;
	
	НомерПримечания = 0;
	
	Если СправкиРасчеты.ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		НомерПримечания = НомерПримечания + 1;
		Примечания.Вставить("НалоговыйПериод", НомерПримечания);
		// Вывод текста примечания - в СправкиРасчеты.ОформитьРезультатОтчета()
	КонецЕсли;
	
	НомерПримечания = НомерПримечания + 1;
	Примечания.Вставить("ПорядокРасчета", НомерПримечания);
	// Вывод ссылки - в ДобавитьСсылкуПримечаниеПорядокРасчета()
	// Вывод текста примечания - в ВывестиПримечания
	
	Возврат Примечания;
	
КонецФункции

Процедура ДобавитьСсылкуПримечаниеПорядокРасчета(Схема, Примечания)
	
	НомерПримечания = Неопределено;
	Если Не Примечания.Свойство("ПорядокРасчета", НомерПримечания) Тогда
		Возврат;
	КонецЕсли;
	
	ПолеНомерПоказателя = Схема.НаборыДанных.ВсеДанные.Поля.Найти("НомерПоказателя");
	Если ПолеНомерПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Схема может быть переиспользована при нескольких формированиях отчета подряд,
	// поэтому оригинальный (заданный при конфигурировании) заголовок сохраняем особо
	ИмяСохраненногоЗаголовка = "ПорядокРасчетаЗаголовок";
	МакетИсходныйЗаголовок = Схема.Макеты.Найти(ИмяСохраненногоЗаголовка);
	Если МакетИсходныйЗаголовок = Неопределено Тогда
		МакетИсходныйЗаголовок = Схема.Макеты.Добавить();
		МакетИсходныйЗаголовок.Имя = ИмяСохраненногоЗаголовка;
		ПараметрИсходныйЗаголовок = МакетИсходныйЗаголовок.Параметры.Добавить(Тип("ПараметрОбластиВыражениеКомпоновкиДанных"));
		ПараметрИсходныйЗаголовок.Имя       = ИмяСохраненногоЗаголовка;
		ПараметрИсходныйЗаголовок.Выражение = ПолеНомерПоказателя.Заголовок;
	Иначе
		ПараметрИсходныйЗаголовок = МакетИсходныйЗаголовок.Параметры.Найти(ИмяСохраненногоЗаголовка);
		Если ПараметрИсходныйЗаголовок = Неопределено Тогда
			// Что-то пошло не так, но так как последствия этой ошибки не столь значительны,
			// то не вызываем исключение, чтобы у пользователя была возможность сформировать отчет,
			// пусть и без ссылки на примечание.
			Возврат;
		КонецЕсли;
		ПолеНомерПоказателя.Заголовок = ПараметрИсходныйЗаголовок.Выражение;
	КонецЕсли;
	
	СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(ПолеНомерПоказателя.Заголовок, НомерПримечания);
	
КонецПроцедуры

Процедура ДобавитьПримечанияДанных(Данные, Примечания)
	
	Для Каждого Запись Из Данные Цикл
		
		Если Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалоговыйАктивКонецПериода
			Или Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ОтложенноеНалоговоеОбязательствоКонецПериода Тогда
			
			ДобавитьПримечаниеДанных(Запись.ПредставлениеПоказателя, "РасчетОтложенногоНалога", Примечания);
			
		ИначеЕсли Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ЭффектИзмененияСтавкиБудущегоНалога
			Или Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ЭффектИзмененияСтавкиТекущегоНалога
			Или Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ЭффектИзмененияВременныхРазниц Тогда
			
			ДобавитьПримечаниеДанных(Запись.ПредставлениеПоказателя, "РасчетЭффектаИзмененияСтавки", Примечания);
			
		ИначеЕсли Запись.Показатель = Перечисления.ПоказателиОтложенногоНалога.ВлияниеУбыткаТекущегоПериода Тогда
			
			// Это примечание должно выводиться к другой строке данных
			Запись = Данные.Найти(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалоговыйАктивКонецПериода, "Показатель");
			Если Запись = Неопределено Или Не ЗначениеЗаполнено(Запись.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьПримечаниеДанных(Запись.ПредставлениеПоказателя, "ВлияниеУбыткаТекущегоПериода", Примечания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод текстов примечания - в ВывестиПримечания
	
КонецПроцедуры

Процедура ДобавитьПримечаниеДанных(ПредставлениеПоказателя, ИмяПримечания, Примечания)
	
	НомерПримечания = Неопределено;
	Если Не Примечания.Свойство(ИмяПримечания, НомерПримечания) Тогда
		НомерПримечания = Примечания.Количество() + 1;
		Примечания.Вставить(ИмяПримечания, НомерПримечания);
	КонецЕсли;
	
	СправкиРасчеты.ДополнитьСловоСсылкойНаПримечание(ПредставлениеПоказателя, НомерПримечания);
	
КонецПроцедуры

Процедура ВывестиПримечания(Результат, Примечания, Данные)
	
	ТекстыПримечаний = Новый Соответствие;
	МинимальныйНомер  = 0;
	МаксимальныйНомер = 0;
	Для Каждого Примечание Из Примечания Цикл
		
		МинимальныйНомер  = Мин(МинимальныйНомер, Примечание.Значение);
		МаксимальныйНомер = Макс(МаксимальныйНомер, Примечание.Значение);
		
		Если Примечание.Ключ = "ПорядокРасчета" Тогда
			Текст = НСтр("ru = 'Расчет основан на Приложении к ПБУ 18/02 ""Учет расчетов по налогу на прибыль организаций"".
                          |Числовая нумерация показателей соответствует Приложению';
                          |en = 'The calculation is based on Annex to PBU 18/02 “Corporate profit tax accounting”.
                          |The numeric numbering of the indicators corresponds to the Appendix'");
		ИначеЕсли Примечание.Ключ = "РасчетОтложенногоНалога" Тогда
			Текст = НСтр("ru = 'Детальный расчет отложенного налогового актива и отложенного налогового обязательства приведен в Справке-расчете отложенного налога';
						|en = 'A detailed calculation of the deferred tax asset and deferred tax liability is given in the Detailed calculation of the deferred tax'");
		ИначеЕсли Примечание.Ключ = "РасчетЭффектаИзмененияСтавки" Тогда
			Текст = НСтр("ru = 'Расчет эффектов изменения ставок налога приведен в Справке-расчете эффекта изменения ставок налога на прибыль';
						|en = 'The calculation of the tax rate changes effect of is given in the Detailed calculation of the income tax rate change effect'");
		ИначеЕсли Примечание.Ключ = "ВлияниеУбыткаТекущегоПериода" Тогда
			
			ЗаписьУбытка = Данные.Найти(Перечисления.ПоказателиОтложенногоНалога.ВлияниеУбыткаТекущегоПериода, "Показатель");
			Если ЗаписьУбытка = Неопределено Или Не ЗначениеЗаполнено(ЗаписьУбытка.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			ФорматнаяСтрока = СтрШаблон("ЧДЦ=%1", БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
			
			Текст = СтрШаблон(
				НСтр("ru = 'До окончания налогового периода в составе отложенного налогового актива отражается сумма убытка текущего года (%1)';
					|en = 'Before the end of the fiscal period, the deferred tax asset records the amount of loss for the current year (%1)'"),
				Формат(ЗаписьУбытка.Сумма, ФорматнаяСтрока));
				
		ИначеЕсли Примечание.Ключ = "ВыполнитьРегламентнуюОперацию" Тогда
			ПредставлениеРегламентнойОперации = Строка(БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьСсылкуВидРегламентнойОперации("РасчетОтложенногоНалога"));
			Текст = СтрШаблон(
				НСтр("ru = 'Нет данных за указанный период. Рассчитайте их в Закрытии месяца (регламентная операция ""%1"").';
					|en = 'No data exist for the specified period. Calculate at the month-end closing (local operation ""%1"").'"),
				ПредставлениеРегламентнойОперации);
		ИначеЕсли Примечание.Ключ = "СправкаРасчетНеПрименяется" Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'Справка-расчет используется, если в учетной политике указано применение балансового метода учета отложенного налога по ПБУ 18';
					|en = 'Detailed calculation is used if the accounting policy indicates the use of the balancing method of accounting for deferred tax in accordance with PBU 18'"),
				ПредставлениеРегламентнойОперации);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстыПримечаний.Вставить(Примечание.Значение, Текст);
		
	КонецЦикла;
	
	Для НомерПримечания = МинимальныйНомер По МаксимальныйНомер Цикл
		
		Текст = ТекстыПримечаний[НомерПримечания];
		
		Если Не ЗначениеЗаполнено(Текст) Тогда
			Продолжить;
		КонецЕсли;
		
		СправкиРасчеты.ДобавитьПримечание(Результат, Текст, НомерПримечания - 1);// ДобавитьПримечание инкрементирует номер
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполненаПодготовкаДанных(Контекст)
	
	Возврат ЗначениеЗаполнено(Контекст.ВыполнениеОтчета.Данные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрименяетсяСправкаРасчет(Контекст)
	
	ВариантУчета = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Контекст.КонецПериода, Контекст.Организация);
	
	Возврат ВариантУчета = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод
		Или ВариантУчета = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы;
	
КонецФункции

#КонецОбласти

#КонецЕсли
