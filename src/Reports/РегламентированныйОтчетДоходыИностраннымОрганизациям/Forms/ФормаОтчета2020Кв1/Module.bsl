
#Область Переменные

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2020Кв1";
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/03/2020";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ПоказателиОтчета = Неопределено;
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда // отчет сохранен в 2.0
			
			ДопПараметры = Неопределено;
			СтруктураРеквизитовФормы.Вставить("ВозможноВосстановитьДанныеРеглОтчета",
				РегламентированнаяОтчетность.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении(
				СтруктураРеквизитовФормы.мСохраненныйДок, ДопПараметры));
			
			Если НЕ СтруктураРеквизитовФормы.ВозможноВосстановитьДанныеРеглОтчета Тогда
				
				Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
					Если ДопПараметры.Свойство("ТекстСообщения") Тогда
						СтруктураРеквизитовФормы.Вставить(
						"ТекстСообщенияВСлучаеНесовместимостиОтчетаСтарогоОбразца", ДопПараметры.ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("ПериодичностьСтрока", "");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("ВозможноВосстановитьДанныеРеглОтчета", Истина);
	СтруктураРеквизитовФормы.Вставить("ТекстСообщенияВСлучаеНесовместимостиОтчетаСтарогоОбразца", "");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы,
		".Форма.") - 1), 7)].ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы,
		"ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьОбычныеРазделы();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ЗаполнитьЗначенияПоУмолчанию = Истина;
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.мСохраненныйДок.Организация)
				<> РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию ИЛИ ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		УстановитьОКТМОНаПервойСтраницеРаздела1();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.ПериодичностьСтрока = "Квартал";
	ИначеЕсли СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		СтруктураРеквизитовФормы.ПериодичностьСтрока = "Месяц";
	КонецЕсли;
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
		Иначе
			ЗаполнитьСведенияОбОрганизацииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОКТМОНаПервойСтраницеРаздела1()
	
	ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если ДеревоРаздела1.Строки.Количество() = 1 Тогда
		
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
			РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
			СтруктураПараметров);
			
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
			
		КонецЕсли;
		
		ДеревоРаздела1.Строки[0].Данные.Вставить("П000100001003", ОргОКТМО);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела1, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
		
	Иначе
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			Если Сред(КПП, 5, 2) = "50"
				И РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
				
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0001000";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0002000";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П0001000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000100002003");
	ИменаГраф.Добавить("П000100003003");
	ИменаГраф.Добавить("П000100004003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П0002000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000200001003");
	ИменаГраф.Добавить("П000200002003");
	ИменаГраф.Добавить("П000200003003");
	ИменаГраф.Добавить("П000200004003");
	ИменаГраф.Добавить("П000200005003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел32");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 3");
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 3.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел31", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел33");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел31");
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 3.2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 3.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел32", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел31");
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 3.3");
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 3.3");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел33", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы()
	
	СтруктураДанныхТитульный = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел31";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы,
	".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный  = ?(ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2020Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200001003", 2, ,
		"Выбор кода дохода", КоллекцияСписковВыбора["КодыДохода"]);
	
	//Раздел 3.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310001003", 1, ,
		"Выбор признака получателя дохода", КоллекцияСписковВыбора["ПризнакиПолучателяДохода"]);
	
	//Раздел 3.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320002003", 2, ,
		"Выбор кода дохода", КоллекцияСписковВыбора["КодыДохода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320003003", 5, ,
		"Выбор символа дохода", КоллекцияСписковВыбора["СимволыДохода"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320015003", 2, ,
		"Выбор кода фактического права на доход", КоллекцияСписковВыбора["КодыФактПраваНаДоход"]);
	
	//Раздел 3.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000330002003", 1, ,
		"Выбор кода признака лица, имеющего фактическое право на доход", КоллекцияСписковВыбора["КодыПризнакаЛица"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000330018003", 1, ,
		"Выбор пола", КоллекцияСписковВыбора["КодыПола"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000330024003", 2, ,
		"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидаДокумента"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации
	= ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = 50;
	Иначе
		МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Если Форма.СтруктураРеквизитовФормы.ПериодичностьСтрока = "Квартал" Тогда
			Если МесяцОкончания = 3 Тогда
				КодПериода = 21;
			ИначеЕсли МесяцОкончания = 6 Тогда
				КодПериода = 31;
			ИначеЕсли МесяцОкончания = 9 Тогда
				КодПериода = 33;
			ИначеЕсли МесяцОкончания = 12 Тогда
				КодПериода = 34;
			КонецЕсли;
		ИначеЕсли Форма.СтруктураРеквизитовФормы.ПериодичностьСтрока = "Месяц" Тогда
			КодПериода = МесяцОкончания + 34;
		Иначе
			КодПериода = 0;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение
	= ?(КодПериода > 0, Формат(КодПериода, "ЧЦ=2; ЧВН="), "");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1';
				|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРаздела = СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел31;
	Если НЕ ДеревоРаздела.Строки[0].Данные.Свойство("П000310000103") Тогда
		// Заполнение строки 001 раздела 3 (случай сохраненных данных отчета предыдущей версии).
		ЗаполненРаздел = ЗаполненРаздел3(ДеревоРаздела);
		Для Инд = 0 По ДеревоРаздела.Строки.Количество() - 1 Цикл
			Если ЗаполненРаздел Тогда
				ДеревоРаздела.Строки[Инд].Данные.Вставить("П000310000103", Формат(Инд + 1, "ЧЦ=12; ЧВН=; ЧГ="));
			Иначе
				ДеревоРаздела.Строки[Инд].Данные.Вставить("П000310000103", "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность;
	КонецЕсли;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	Если НЕ СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
		ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	УстановитьФорматВыводаНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	// Настройки отчета.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	НастройкаРаздела31 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел31", "ИмяСтраницы");
	Если НастройкаРаздела31 <> Неопределено Тогда
		НастройкаРаздела31.Представление = "Раздел 3";
	КонецЕсли;
	НастройкаРаздела32 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел32", "ИмяСтраницы");
	Если НастройкаРаздела32 <> Неопределено Тогда
		ДеревоНастройкиСтраниц.Строки.Удалить(НастройкаРаздела32);
	КонецЕсли;
	НастройкаРаздела33 = ДеревоНастройкиСтраниц.Строки.Найти("Раздел33", "ИмяСтраницы");
	Если НастройкаРаздела33 <> Неопределено Тогда
		ДеревоНастройкиСтраниц.Строки.Удалить(НастройкаРаздела33);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 10 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
					+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Сохранение с последующим восстановлением номеров строк многоуровнего раздела.
	// (На случай выгрузки отчета, сохраненного в 2.0, без сохранения в 3.0.)
	СохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = СохрНомераСтрокМногоуровнегоРаздела;
	
	// Раздел 1.
	ИмяРаздела = "Раздел1";
	ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы1;
	
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Данные = ДеревоРаздела.Строки[0].Данные;
	Данные.Вставить("П000100001003", СтарДанные["П000100001003"]);
	
	МнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
	Инд = 1;
	ИндСтр = "1";
	ИменаГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
	Пока СтарДанные.Свойство(ИменаГраф[0] + "_" + ИндСтр) Цикл
		Если Инд = 1 Тогда
			ТекСтрокаМнЧ = МнЧ.Строки[0];
		Иначе
			ТекСтрокаМнЧ = МнЧ.Строки.Добавить();
			ТекСтрокаМнЧ.Данные = Новый Структура;
			ТекСтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			ТекСтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + "_" + ИндСтр]);
		КонецЦикла;
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	// Раздел 2.
	ИмяРаздела = "Раздел2";
	ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы2;
	
	СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + ИмяРаздела];
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	МнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
	Инд = 1;
	ИндСтр = "1";
	ИменаГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
	Пока СтарДанные.Свойство(ИменаГраф[0] + "_" + ИндСтр) Цикл
		Если Инд = 1 Тогда
			ТекСтрокаМнЧ = МнЧ.Строки[0];
		Иначе
			ТекСтрокаМнЧ = МнЧ.Строки.Добавить();
			ТекСтрокаМнЧ.Данные = Новый Структура;
			ТекСтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		Для каждого ИмяГрафы Из ИменаГраф Цикл
			ТекСтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + "_" + ИндСтр]);
		КонецЦикла;
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	// Раздел 3.
	ИмяРаздела = "Раздел31";
	
	СтарТабл31 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел31"];
	СтарТабл32 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел32"];
	СтарТабл33 = СписокСохранения.ДанныеМногостраничныхРазделов["Раздел33"];
	
	ТипЧисло12_0 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	ТЗПров31 = Новый ТаблицаЗначений;
	ТЗПров31.Колонки.Добавить("УникНом", ТипЧисло12_0);
	ТЗПров31.Колонки.Добавить("СтарИнд", ТипЧисло12_0);
	Для каждого СтрСтарТабл31 Из СтарТабл31 Цикл
		НовСтрТЗПров31 = ТЗПров31.Добавить();
		НовСтрТЗПров31.УникНом = СтрСтарТабл31.Данные.П000310000103;
		НовСтрТЗПров31.СтарИнд = СтарТабл31.Индекс(СтрСтарТабл31);
	КонецЦикла;
	ТЗПров31.Сортировать("УникНом");
	
	ТЗПров32 = Новый ТаблицаЗначений;
	ТЗПров32.Колонки.Добавить("УникНом",  ТипЧисло12_0);
	ТЗПров32.Колонки.Добавить("ПорядНом", ТипЧисло12_0);
	ТЗПров32.Колонки.Добавить("СтарИнд",  ТипЧисло12_0);
	Для каждого СтрСтарТабл32 Из СтарТабл32 Цикл
		НовСтрТЗПров32 = ТЗПров32.Добавить();
		НовСтрТЗПров32.УникНом  = СтрСтарТабл32.Данные.П000320000103;
		НовСтрТЗПров32.ПорядНом = СтрСтарТабл32.Данные.П000320001003;
		НовСтрТЗПров32.СтарИнд  = СтарТабл32.Индекс(СтрСтарТабл32);
	КонецЦикла;
	ТЗПров32.Сортировать("УникНом,ПорядНом");
	
	ТЗПров33 = Новый ТаблицаЗначений;
	ТЗПров33.Колонки.Добавить("УникНом",  ТипЧисло12_0);
	ТЗПров33.Колонки.Добавить("ПорядНом", ТипЧисло12_0);
	ТЗПров33.Колонки.Добавить("СтарИнд",  ТипЧисло12_0);
	Для каждого СтрСтарТабл33 Из СтарТабл33 Цикл
		НовСтрТЗПров33 = ТЗПров33.Добавить();
		НовСтрТЗПров33.УникНом  = СтрСтарТабл33.Данные.П000330000103;
		НовСтрТЗПров33.ПорядНом = СтрСтарТабл33.Данные.П000330001003;
		НовСтрТЗПров33.СтарИнд  = СтарТабл33.Индекс(СтрСтарТабл33);
	КонецЦикла;
	ТЗПров33.Сортировать("УникНом,ПорядНом");
	
	СвобУникНом = Макс(
	ТЗПров31[ТЗПров31.Количество() - 1].УникНом,
	ТЗПров32[ТЗПров32.Количество() - 1].УникНом,
	ТЗПров33[ТЗПров33.Количество() - 1].УникНом) + 1;
	
	// Обработка незаполненных "Уникальных номеров" раздела 3.1.
	Для ИндПров31 = 0 По ТЗПров31.Количество() - 1 Цикл
		
		Если ТЗПров31[ИндПров31].УникНом = 0 Тогда
			ТЗПров31[ИндПров31].УникНом = СвобУникНом;
			СвобУникНом = СвобУникНом + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	ТЗПров31.Сортировать("УникНом");
	
	// Обработка незаполненных "Уникальных номеров" раздела 3.2.
	Для ИндПров32 = 0 По ТЗПров32.Количество() - 1 Цикл
		
		Если ТЗПров32[ИндПров32].УникНом = 0 Тогда
			ТЗПров32[ИндПров32].УникНом = СвобУникНом;
			СвобУникНом = СвобУникНом + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	ТЗПров32.Сортировать("УникНом");
	
	// Обработка незаполненных "Уникальных номеров" раздела 3.3.
	Для ИндПров33 = 0 По ТЗПров33.Количество() - 1 Цикл
		
		Если ТЗПров33[ИндПров33].УникНом = 0 Тогда
			ТЗПров33[ИндПров33].УникНом = СвобУникНом;
			СвобУникНом = СвобУникНом + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	ТЗПров33.Сортировать("УникНом");
	
	// Обработка незаполненных "Порядковых номеров" раздела 3.2.
	Для ИндПров32 = 0 По ТЗПров32.Количество() - 1 Цикл
		
		Если ТЗПров32[ИндПров32].ПорядНом = 0 Тогда
			
			Отбор = Новый Структура("УникНом", ТЗПров32[ИндПров32].УникНом);
			
			ТЗПров32_Отбор = ТЗПров32.Скопировать(Отбор, "ПорядНом");
			ТЗПров32_Отбор_Количество = ТЗПров32_Отбор.Количество();
			Если ТЗПров32_Отбор_Количество = 0 Тогда
				СвобПорядНом_ТЗПров32 = 1;
			Иначе
				ТЗПров32_Отбор.Сортировать("ПорядНом");
				СвобПорядНом_ТЗПров32 = ТЗПров32_Отбор[ТЗПров32_Отбор.Количество() - 1].ПорядНом + 1;
			КонецЕсли;
			
			ТЗПров33_Отбор = ТЗПров33.Скопировать(Отбор, "ПорядНом");
			ТЗПров33_Отбор_Количество = ТЗПров33_Отбор.Количество();
			Если ТЗПров33_Отбор_Количество = 0 Тогда
				СвобПорядНом_ТЗПров33 = 1;
			Иначе
				ТЗПров33_Отбор.Сортировать("ПорядНом");
				СвобПорядНом_ТЗПров33 = ТЗПров33_Отбор[ТЗПров33_Отбор.Количество() - 1].ПорядНом + 1;
			КонецЕсли;
			
			ТЗПров32[ИндПров32].ПорядНом = Макс(СвобПорядНом_ТЗПров32, СвобПорядНом_ТЗПров33);;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка незаполненных "Порядковых номеров" раздела 3.3.
	Для ИндПров33 = 0 По ТЗПров33.Количество() - 1 Цикл
		
		Если ТЗПров33[ИндПров33].ПорядНом = 0 Тогда
			
			Отбор = Новый Структура("УникНом", ТЗПров33[ИндПров33].УникНом);
			
			ТЗПров32_Отбор = ТЗПров32.Скопировать(Отбор, "ПорядНом");
			ТЗПров32_Отбор_Количество = ТЗПров32_Отбор.Количество();
			Если ТЗПров32_Отбор_Количество = 0 Тогда
				СвобПорядНом_ТЗПров32 = 1;
			Иначе
				ТЗПров32_Отбор.Сортировать("ПорядНом");
				СвобПорядНом_ТЗПров32 = ТЗПров32_Отбор[ТЗПров32_Отбор.Количество() - 1].ПорядНом + 1;
			КонецЕсли;
			
			ТЗПров33_Отбор = ТЗПров33.Скопировать(Отбор, "ПорядНом");
			ТЗПров33_Отбор_Количество = ТЗПров33_Отбор.Количество();
			Если ТЗПров33_Отбор_Количество = 0 Тогда
				СвобПорядНом_ТЗПров33 = 1;
			Иначе
				ТЗПров33_Отбор.Сортировать("ПорядНом");
				СвобПорядНом_ТЗПров33 = ТЗПров33_Отбор[ТЗПров33_Отбор.Количество() - 1].ПорядНом + 1;
			КонецЕсли;
			
			ТЗПров33[ИндПров33].ПорядНом = Макс(СвобПорядНом_ТЗПров32, СвобПорядНом_ТЗПров33);;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НачСтруктураДанных31 = ОбщегоНазначения.СкопироватьРекурсивно(
		ДеревоРаздела.Строки[0].Данные);
	
	НачСтруктураДанных32 = ОбщегоНазначения.СкопироватьРекурсивно(
		ДеревоРаздела.Строки[0].Строки[0].Строки[0].Данные);
	
	НачСтруктураДанных33 = ОбщегоНазначения.СкопироватьРекурсивно(
		ДеревоРаздела.Строки[0].Строки[0].Строки[0].Строки[0].Строки[0].Данные);
	
	ДеревоРаздела.Строки.Удалить(0);
	
	МаксУникНом = СвобУникНом - 1;
	
	// Заполнение экземпляров разделов 3.1.
	Для УникНом = 1 По МаксУникНом Цикл
		
		ТекВетка31 = ДеревоРаздела.Строки.Добавить();
		
		СтрокаТЗПров31 = ТЗПров31.Найти(УникНом, "УникНом");
		
		Если СтрокаТЗПров31 <> Неопределено Тогда
			
			ТекВетка31.Данные = Новый Структура;
			СтарДанныеР31 = СтарТабл31[СтрокаТЗПров31.СтарИнд].Данные;
			Для каждого ЭлСтрукт Из НачСтруктураДанных31 Цикл
				Если СтарДанныеР31.Свойство(ЭлСтрукт.Ключ) Тогда
					ТекВетка31.Данные.Вставить(ЭлСтрукт.Ключ, СтарДанныеР31[ЭлСтрукт.Ключ]);
				Иначе
					ТекВетка31.Данные.Вставить(ЭлСтрукт.Ключ, ЭлСтрукт.Значение);
				КонецЕсли;
			КонецЦикла;
			
		Иначе // при сохранении в 2.0 раздела 3.1 был пропущен "Уникальный номер"
			
			ТекВетка31.Данные = ОбщегоНазначения.СкопироватьРекурсивно(НачСтруктураДанных31);
			
		КонецЕсли;
		
		ТекВетка31.ДанныеМногострочныхЧастей = Новый Структура;
		
		// Заполнение экземпляров разделов 3.2.
		ТЗПров32_ПодчСтроки = ТЗПров32.Скопировать(Новый Структура("УникНом", УникНом));
		Если ТЗПров32_ПодчСтроки.Количество() = 0 Тогда
			МаксПорядНом32 = 1;
		Иначе
			ТЗПров32_ПодчСтроки.Сортировать("ПорядНом");
			МаксПорядНом32 = ТЗПров32_ПодчСтроки[ТЗПров32_ПодчСтроки.Количество() - 1].ПорядНом;
		КонецЕсли;
		
		ТЗПров33_ПодчСтроки = ТЗПров33.Скопировать(Новый Структура("УникНом", УникНом));
		Если ТЗПров33_ПодчСтроки.Количество() = 0 Тогда
			МаксПорядНом33 = 1;
		Иначе
			ТЗПров33_ПодчСтроки.Сортировать("ПорядНом");
			МаксПорядНом33 = ТЗПров33_ПодчСтроки[ТЗПров33_ПодчСтроки.Количество() - 1].ПорядНом;
		КонецЕсли;
		
		МаксПорядНом = Макс(МаксПорядНом32, МаксПорядНом33);
		
		Для ПорядНом = 1 По МаксПорядНом Цикл
			
			Если ТекВетка31.Строки.Количество() = 0 Тогда
				ТекВетка32 = ТекВетка31.Строки.Добавить().Строки.Добавить();
			Иначе
				ТекВетка32 = ТекВетка31.Строки[0].Строки.Добавить();
			КонецЕсли;
			
			СтрокаТЗПров32_ПодчСтроки = ТЗПров32_ПодчСтроки.Найти(ПорядНом, "ПорядНом");
			
			Если СтрокаТЗПров32_ПодчСтроки <> Неопределено Тогда
				
				ТекВетка32.Данные = Новый Структура;
				СтарДанныеР32 = СтарТабл32[СтрокаТЗПров32_ПодчСтроки.СтарИнд].Данные;
				Для каждого ЭлСтрукт Из НачСтруктураДанных32 Цикл
					Если СтарДанныеР32.Свойство(ЭлСтрукт.Ключ) Тогда
						ТекВетка32.Данные.Вставить(ЭлСтрукт.Ключ, СтарДанныеР32[ЭлСтрукт.Ключ]);
					Иначе
						ТекВетка32.Данные.Вставить(ЭлСтрукт.Ключ, ЭлСтрукт.Значение);
					КонецЕсли;
				КонецЦикла;
				
			Иначе // при сохранении в 2.0 раздела 3.2 был пропущен "Порядковый номер"
				
				ТекВетка32.Данные = ОбщегоНазначения.СкопироватьРекурсивно(НачСтруктураДанных32);
				
			КонецЕсли;
			
			ТекВетка32.ДанныеМногострочныхЧастей = Новый Структура;
			
			// Заполнение экземпляров разделов 3.3.
			Массив33_ПодчСтроки = ТЗПров33.НайтиСтроки(Новый Структура("УникНом,ПорядНом", УникНом, ПорядНом));
			
			Если Массив33_ПодчСтроки.Количество() = 0 Тогда
				
				ТекВетка33 = ТекВетка32.Строки.Добавить().Строки.Добавить();
				
				ТекВетка33.Данные = ОбщегоНазначения.СкопироватьРекурсивно(НачСтруктураДанных33);
				ТекВетка33.ДанныеМногострочныхЧастей = Новый Структура;
				
			Иначе
				
				Для каждого ЭлМассив33_ПодчСтроки Из Массив33_ПодчСтроки Цикл
					
					Если ТекВетка32.Строки.Количество() = 0 Тогда
						ТекВетка33 = ТекВетка32.Строки.Добавить().Строки.Добавить();
					Иначе
						ТекВетка33 = ТекВетка32.Строки[0].Строки.Добавить();
					КонецЕсли;
					
					ТекВетка33.Данные = Новый Структура;
					СтарДанныеР33 = СтарТабл33[ЭлМассив33_ПодчСтроки.СтарИнд].Данные;
					Для каждого ЭлСтрукт Из НачСтруктураДанных33 Цикл
						Если СтарДанныеР33.Свойство(ЭлСтрукт.Ключ) Тогда
							ТекВетка33.Данные.Вставить(ЭлСтрукт.Ключ, СтарДанныеР33[ЭлСтрукт.Ключ]);
						Иначе
							ТекВетка33.Данные.Вставить(ЭлСтрукт.Ключ, ЭлСтрукт.Значение);
						КонецЕсли;
					КонецЦикла;
					ТекВетка33.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "П000310003003"
		ИЛИ Область.Имя = "П000310008003"
		ИЛИ Область.Имя = "П000330007003"
		ИЛИ Область.Имя = "П000330009003"
		ИЛИ Область.Имя = "П000330020003"
		ИЛИ Область.Имя = "П000330028003" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Область.Имя = "П000320005003" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект);
		ФормаВыбора.Заголовок = "Выбор кода валюты";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если Область.Имя = "П000310002003" ИЛИ Область.Имя = "П000310002004" Тогда
		ПолнНаимОрг = СокрЛП(Область.Значение);
		ПолнНаимОргДлина = СтрДлина(ПолнНаимОрг);
		УсловиеНеВыполнено = Ложь;
		Для Ном = 1 По ПолнНаимОргДлина Цикл
			ТекСимв = Сред(ПолнНаимОрг, Ном, 1);
			Если ТекСимв = " " Тогда
				Продолжить;
			ИначеЕсли Область.Имя = "П000310002003" Тогда
				УсловиеНеВыполнено = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ТекСимв);
				ТекстСообщ = НСтр("ru = 'Полное наименование иностранной организации (в русской транскрипции) не должно содержать символы латинского алфавита. Значение очищено';
									|en = 'Полное наименование иностранной организации (в русской транскрипции) не должно содержать символы латинского алфавита. Значение очищено'");
			Иначе
				УсловиеНеВыполнено = СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ТекСимв);
				ТекстСообщ = НСтр("ru = 'Полное наименование иностранной организации (в латинской транскрипции) не должно содержать символы кириллического алфавита. Значение очищено';
									|en = 'Полное наименование иностранной организации (в латинской транскрипции) не должно содержать символы кириллического алфавита. Значение очищено'");
			КонецЕсли;
			Если УсловиеНеВыполнено Тогда
				Область.Очистить();
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000310000103" Тогда
		
		СтрокаИзЦифр = "";
		ДлинаСтроки = СтрДлина(Область.Значение);
		Для ПозицияСимвола = 1 По ДлинаСтроки Цикл
			ТекущийСимвол = Сред(Область.Значение, ПозицияСимвола, 1);
			Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
				СтрокаИзЦифр = СтрокаИзЦифр + ТекущийСимвол;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаИзЦифр) Тогда
			СтрокаИзЦифр = Формат(Число(СтрокаИзЦифр), "ЧЦ=12; ЧВН=; ЧГ=");
		КонецЕсли;
		
		ПредставлениеСтраницыРаздела3НайденнойПоЗначениюВСтроке001
		= ПредставлениеСтраницыРаздела3НайденнойПоЗначениюВСтроке001(СтрокаИзЦифр);
		
		Если ЗначениеЗаполнено(ПредставлениеСтраницыРаздела3НайденнойПоЗначениюВСтроке001) Тогда
			Область.Очистить();
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Номер %1 уже используется на странице ""%2"". Значение в строке 001 очищено';
				|en = 'Номер %1 уже используется на странице ""%2"". Значение в строке 001 очищено'"),
				СтрокаИзЦифр, ПредставлениеСтраницыРаздела3НайденнойПоЗначениюВСтроке001));
		Иначе
			Область.Значение = СтрокаИзЦифр;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела);
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел32" Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	СформироватьСпискиВыбора();
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеСтраницыРаздела3НайденнойПоЗначениюВСтроке001(УникальныйНомер)
	
	Если ЗначениеЗаполнено(УникальныйНомер) Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел31"]);
		
		Для Инд = 0 По ДеревоДанных.Строки.Количество() - 1 Цикл
			ОбрИнд = ДеревоДанных.Строки.Количество() - 1 - Инд;
			ДанныеСтраницы = ДеревоДанных.Строки[ОбрИнд].Данные;
			Если (ОбрИнд + 1 <> СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0])
				И (УникальныйНомер = СокрЛП(ДанныеСтраницы["П000310000103"])) Тогда
				Возврат "Раздел 3.1. Стр. " + Формат(ОбрИнд + 1, "ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		ЦифровойКодСтраны = КодЭлементаСправочника(Результат);
		Если Область.Значение = ЦифровойКодСтраны Тогда
			Область.Очистить();
		Иначе
			Область.Значение = ЦифровойКодСтраны;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		
		КодВалюты = КодЭлементаСправочника(Результат);
		
		Если Область.Значение = КодВалюты Тогда
			Область.Очистить();
		Иначе
			Область.Значение = КодВалюты;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
		РасчетНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Область.Имя);
		
		УстановитьФорматВыводаДляРаздела32НаКлиентеНаСервереБезКонтекста(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодЭлементаСправочника(Ссылка)
	
	Возврат Ссылка.Код;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ОблНаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.СекцияПояснение.Видимость
		= Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение > 0;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
		
		Инд  = 1;
		_Инд = "1";
		Пока Форма.ТабличныйДокумент.Области.Найти("П000200002003_" + _Инд) <> Неопределено Цикл
			Обл = Форма.ТабличныйДокумент.Области.Найти("П000200002003_" + _Инд);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				Обл.Защита   = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			Инд  = Инд + 1;
			_Инд = Формат(Инд, "ЧГ=");
		КонецЦикла
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел32" Тогда
		
		// Переопределение свойств ячеек с показателями строк 080-140.
		ИменаПок080_140 = Новый Массив;
		ИменаПок080_140.Добавить("П000320008003");
		ИменаПок080_140.Добавить("П000320009003");
		ИменаПок080_140.Добавить("П000320010003");
		ИменаПок080_140.Добавить("П000320011003");
		ИменаПок080_140.Добавить("П000320012003");
		ИменаПок080_140.Добавить("П000320013003");
		ИменаПок080_140.Добавить("П000320014003");
		
		ОпредЗначение = Форма.ТабличныйДокумент.Области.П000320007003.Значение;
		Для каждого ИмяПок Из ИменаПок080_140 Цикл
			Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
			Если Обл <> Неопределено Тогда
				Если ОпредЗначение = 0 ИЛИ ОпредЗначение = 99.99 Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				Иначе
					Если ИмяПок = "П000320010003" Тогда
						// Особая обработка ячейки с показателем строки 100.
						Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000320009003"].Значение) Тогда
							РазрешитьВводДанныхВОбласть(Форма, Обл);
						Иначе
							Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
								РазрешитьВводДанныхВОбласть(Форма, Обл);
							Иначе
								Обл.Защита   = Истина;
								Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ИмяПок = "П000320012003" Тогда
						// Особая обработка ячейки с показателем строки 120.
						Если СокрЛП(Форма.ТабличныйДокумент.Области["П000320005003"].Значение) = "643" Тогда
							ЗапретитьВводДанныхВОбласть(Форма, Обл);
						Иначе
							РазрешитьВводДанныхВОбласть(Форма, Обл);
						КонецЕсли;
					ИначеЕсли ИмяПок = "П000320014003" Тогда
						// Особая обработка ячейки с показателем строки 140.
						Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
							РазрешитьВводДанныхВОбласть(Форма, Обл);
						Иначе
							Обл.Защита   = Истина;
							Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
						КонецЕсли;
					Иначе
						РазрешитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел33" Тогда
		
		// Переопределение свойств групп ячеек с показателями:
		// "Данные о юридическом лице или иностранной структуре без образования юридического лица",
		// "Данные о физическом лице".
		Признаки_ЮЛ_Или_Иностр = Новый Массив;
		Признаки_ЮЛ_Или_Иностр.Добавить("1");
		Признаки_ЮЛ_Или_Иностр.Добавить("3");
		Признаки_ЮЛ_Или_Иностр.Добавить("5");
		
		Признаки_ФЛ = Новый Массив;
		Признаки_ФЛ.Добавить("2");
		Признаки_ФЛ.Добавить("4");
		
		ИменаПок_ЮЛ_Или_Иностр = Новый Массив;
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330008003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330009003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330010003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330011003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330012003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330013003");
		ИменаПок_ЮЛ_Или_Иностр.Добавить("П000330014003");
		
		ИменаПок_ФЛ = Новый Массив;
		ИменаПок_ФЛ.Добавить("П000330015003");
		ИменаПок_ФЛ.Добавить("П000330016003");
		ИменаПок_ФЛ.Добавить("П000330017003");
		ИменаПок_ФЛ.Добавить("П000330018003");
		ИменаПок_ФЛ.Добавить("П000330019003");
		ИменаПок_ФЛ.Добавить("П000330020003");
		ИменаПок_ФЛ.Добавить("П000330021003");
		ИменаПок_ФЛ.Добавить("П000330022003");
		ИменаПок_ФЛ.Добавить("П000330023003");
		ИменаПок_ФЛ.Добавить("П000330024003");
		ИменаПок_ФЛ.Добавить("П000330025003");
		ИменаПок_ФЛ.Добавить("П000330026003");
		ИменаПок_ФЛ.Добавить("П000330027003");
		ИменаПок_ФЛ.Добавить("П000330028003");
		ИменаПок_ФЛ.Добавить("П000330029003");
		
		ОпредЗначение = СокрЛП(Форма.ТабличныйДокумент.Области.П000330002003.Значение);
		Если Признаки_ЮЛ_Или_Иностр.Найти(ОпредЗначение) <> Неопределено Тогда
			Для каждого ИмяПок Из ИменаПок_ЮЛ_Или_Иностр Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			Для каждого ИмяПок Из ИменаПок_ФЛ Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Признаки_ФЛ.Найти(ОпредЗначение) <> Неопределено Тогда
			Для каждого ИмяПок Из ИменаПок_ЮЛ_Или_Иностр Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			Для каждого ИмяПок Из ИменаПок_ФЛ Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ИмяПок Из ИменаПок_ЮЛ_Или_Иностр Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			Для каждого ИмяПок Из ИменаПок_ФЛ Цикл
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок);
				Если Обл <> Неопределено Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	// Обычные разделы.
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("УникальныйНомер");
		Если Обл <> Неопределено Тогда
			Обл.Текст = ДеревоДанныхРаздела.Строки[НовыеНомераСтрокМногоуровнегоРаздела[0] - 1].Данные["П000310000103"];
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ПорядковыйНомерДохода");
		Если Обл <> Неопределено Тогда
			Обл.Текст = НовыеНомераСтрокМногоуровнегоРаздела[2];
		КонецЕсли;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел32" Тогда
		
		УстановитьФорматВыводаДляРаздела32НаКлиентеНаСервереБезКонтекста(ЭтотОбъект);
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел31" Тогда
		ДобавитьСтраницуРаздел31();
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда
		ДобавитьСтраницуРаздел32();
	ИначеЕсли ИмяРаздела = "Раздел33" Тогда
		ДобавитьСтраницуРаздел33();
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуРаздел31()
	
	ИмяРаздела = "Раздел31";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	МаксУникальныйНомер = 0;
	Для Инд = 0 По ДеревоРаздела.Строки.Количество() - 1 Цикл
		ОбрИнд = ДеревоРаздела.Строки.Количество() - 1 - Инд;
		Если ОбрИнд + 1 = НомерНовВетки Тогда
			Продолжить;
		КонецЕсли;
		УникальныйНомер = СокрЛП(ДеревоРаздела.Строки[ОбрИнд].Данные["П000310000103"]);
		Если ЗначениеЗаполнено(УникальныйНомер) Тогда
			МаксУникальныйНомер = Макс(МаксУникальныйНомер, Число(УникальныйНомер));
		КонецЕсли;
	КонецЦикла;
	Если МаксУникальныйНомер > 0 И МаксУникальныйНомер < 999999999999 Тогда
		ТабличныйДокумент.Область("П000310000103").Значение = Формат(МаксУникальныйНомер + 1, "ЧЦ=12; ЧВН=; ЧГ=")
	КонецЕсли;
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуРаздел32()
	
	ИмяГлРаздела = "Раздел31";
	ИмяРаздела = "Раздел32";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница31 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела31 = НайденнаяСтраница31;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница32.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуРаздел33()
	
	ИмяГлРаздела = "Раздел31";
	ИмяРаздела = "Раздел33";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[3] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[3] - 1].Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[3] - 1].Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница31 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела31 = НайденнаяСтраница31;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			ТекСтраницаРаздела32 = НайденнаяСтраница32;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница33 Из ТекСтраницаРаздела32.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница33.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница33.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Если ИмяРаздела = "Раздел31" Тогда
		УдалитьСтраницуРаздел31();
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда
		УдалитьСтраницуРаздел32();
	ИначеЕсли ИмяРаздела = "Раздел33" Тогда
		УдалитьСтраницуРаздел33();
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуРаздел31()
	
	ИмяРаздела = "Раздел31";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница31 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуРаздел32()
	
	ИмяГлРаздела = "Раздел31";
	ИмяРаздела = "Раздел32";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница31 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела31 = НайденнаяСтраница31;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница32.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуРаздел33()
	
	ИмяГлРаздела = "Раздел31";
	ИмяРаздела = "Раздел33";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[3] - 1].Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[3] - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница31 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела31 = НайденнаяСтраница31;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			ТекСтраницаРаздела32 = НайденнаяСтраница32;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница33 Из ТекСтраницаРаздела32.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница33.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[4] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница33.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ВремТаблДок.Область("УдалитьСтроку" + НачПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Если НовИндекс_Число = 2 Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
														|en = 'Не выбрана удаляемая строка многострочного раздела'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200002003, ОбластьИмяБезИнд) > 0 Тогда
					Форма.ТабличныйДокумент.Области["П000200002003" + _Инд].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П000200003003" + _Инд].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П000200004003" + _Инд].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П000200005003" + _Инд].Значение);
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				КодВалютыВыплатыДохода = СокрЛП(Форма.ТабличныйДокумент.Области["П000320005003"].Значение);
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320010003, ОбластьИмя) > 0 Тогда
					
					Если НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000320009003"].Значение) Тогда
						
						Ставка = Форма.ТабличныйДокумент.Области["П000320007003"].Значение;
						
						СтавкаДляРасчета = ?(Ставка = 0 ИЛИ Ставка = 99.99, 0, Ставка);
						
						Если КодВалютыВыплатыДохода = "643" Тогда
							
							Форма.ТабличныйДокумент.Области["П000320010003"].Значение
							= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							Форма.ТабличныйДокумент.Области["П000320004003"].Значение) * СтавкаДляРасчета / 100;
							
						Иначе
							
							Форма.ТабличныйДокумент.Области["П000320010003"].Значение
							= Форма.ТабличныйДокумент.Области["П000320004003"].Значение * СтавкаДляРасчета / 100;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320014003, ОбластьИмя) > 0 Тогда
					
					Если КодВалютыВыплатыДохода = "643" Тогда
						
						Форма.ТабличныйДокумент.Области["П000320014003"].Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
						Форма.ТабличныйДокумент.Области["П000320010003"].Значение);
						
					Иначе
						
						Форма.ТабличныйДокумент.Области["П000320014003"].Значение
						= Форма.ТабличныйДокумент.Области["П000320010003"].Значение
						* Форма.ТабличныйДокумент.Области["П000320012003"].Значение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
				
			КонецЕсли;
			
		Иначе
			
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел32");
		Расчет(Форма, "Раздел2");
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы2;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка_2 Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧ = Ветка_2.ДанныеМногострочныхЧастей.П0002000;
			
			Если Ветка_2 = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						СтрокаМнЧ.Данные.Вставить(
						ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				СтрокаМнЧ.Данные["П000200002003"]
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000200003003"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000200004003"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000200005003"]);
			КонецЦикла;
			
			Если Ветка_2 = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Форма.ТабличныйДокумент.Области["П000200002003_" + ИндСтроки].Значение
					= СтрокаМнЧ.Данные["П000200002003"];
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Для каждого Ветка_31 Из ДеревоДанных.Строки Цикл
			
			Для каждого Ветка_32 Из Ветка_31.Строки[0].Строки Цикл
				
				Если Ветка_32 = АктивнаяВетка Тогда
					Для каждого Пок Из Ветка_32.Данные Цикл
						Ветка_32.Данные.Вставить(
						Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
					КонецЦикла;
				КонецЕсли;
				
				КодВалютыВыплатыДохода = СокрЛП(Ветка_32.Данные["П000320005003"]);
				
				Если НЕ ЗначениеЗаполнено(Ветка_32.Данные["П000320009003"]) Тогда
					
					Ставка = Ветка_32.Данные["П000320007003"];
					
					СтавкаДляРасчета = ?(Ставка = 0 ИЛИ Ставка = 99.99, 0, Ставка);
					
					Если КодВалютыВыплатыДохода = "643" Тогда
						
						Ветка_32.Данные["П000320010003"]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
						Ветка_32.Данные["П000320004003"]) * СтавкаДляРасчета / 100;
						
					Иначе
						
						Ветка_32.Данные["П000320010003"]
						= Ветка_32.Данные["П000320004003"] * СтавкаДляРасчета / 100;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если КодВалютыВыплатыДохода = "643" Тогда
					
					Ветка_32.Данные["П000320014003"]
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Ветка_32.Данные["П000320010003"]);
					
				Иначе
					
					Ветка_32.Данные["П000320014003"]
					= Ветка_32.Данные["П000320010003"] * Ветка_32.Данные["П000320012003"];
					
				КонецЕсли;
				
				Если Ветка_32 = АктивнаяВетка Тогда
					
					Форма.ТабличныйДокумент.Области["П000320010003"].Значение
					= Ветка_32.Данные["П000320010003"];
					
					Форма.ТабличныйДокумент.Области["П000320014003"].Значение
					= Ветка_32.Данные["П000320014003"];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200002003", "П000200003003;П000200004003;П000200005003");
	
	// Раздел 3.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320010003", "П000320004003;П000320005003;П000320007003;П000320009003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320014003", "П000320004003;П000320005003;П000320007003;П000320009003;П000320010003;П000320012003");
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставления

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
																	|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
																	|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ПроверятьВозможностьВыгрузки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
															|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если ПроверятьВозможностьВыгрузки И НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ДохИнОрг");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_DOHINORG"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("245");
	ВозможныеКодыПоМесту.Добавить("331");
	ВозможныеКодыПоМесту.Добавить("332");
	ВозможныеКодыПоМесту.Добавить("333");
	ВозможныеКодыПоМесту.Добавить("335");
	ВозможныеКодыПоМесту.Добавить("350");
	
	ВозможныеКодыПериода = "21|31|33|34|35|36|37|38|39|40|41|42|43|44|45|46|50";
	
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	ВозможныеКодыДохода = Новый Массив;
	ВозможныеКодыДохода.Добавить("01");
	ВозможныеКодыДохода.Добавить("02");
	ВозможныеКодыДохода.Добавить("03");
	ВозможныеКодыДохода.Добавить("04");
	ВозможныеКодыДохода.Добавить("05");
	ВозможныеКодыДохода.Добавить("06");
	ВозможныеКодыДохода.Добавить("07");
	ВозможныеКодыДохода.Добавить("08");
	ВозможныеКодыДохода.Добавить("09");
	ВозможныеКодыДохода.Добавить("10");
	ВозможныеКодыДохода.Добавить("11");
	ВозможныеКодыДохода.Добавить("12");
	ВозможныеКодыДохода.Добавить("13");
	ВозможныеКодыДохода.Добавить("14");
	ВозможныеКодыДохода.Добавить("15");
	ВозможныеКодыДохода.Добавить("16");
	ВозможныеКодыДохода.Добавить("17");
	ВозможныеКодыДохода.Добавить("18");
	ВозможныеКодыДохода.Добавить("19");
	ВозможныеКодыДохода.Добавить("20");
	ВозможныеКодыДохода.Добавить("21");
	ВозможныеКодыДохода.Добавить("22");
	ВозможныеКодыДохода.Добавить("23");
	ВозможныеКодыДохода.Добавить("24");
	ВозможныеКодыДохода.Добавить("25");
	ВозможныеКодыДохода.Добавить("26");
	ВозможныеКодыДохода.Добавить("27");
	ВозможныеКодыДохода.Добавить("28");
	
	ВозможныеПрПолучДохода = Новый Массив;
	ВозможныеПрПолучДохода.Добавить("1");
	ВозможныеПрПолучДохода.Добавить("2");
	ВозможныеПрПолучДохода.Добавить("3");
	ВозможныеПрПолучДохода.Добавить("4");
	
	ВозможныеКодыФактПраваНаДоход = Новый Массив;
	ВозможныеКодыФактПраваНаДоход.Добавить("00");
	ВозможныеКодыФактПраваНаДоход.Добавить("01");
	ВозможныеКодыФактПраваНаДоход.Добавить("02");
	ВозможныеКодыФактПраваНаДоход.Добавить("03");
	ВозможныеКодыФактПраваНаДоход.Добавить("04");
	ВозможныеКодыФактПраваНаДоход.Добавить("05");
	
	ВозможныеКодыПрЛица = Новый Массив;
	ВозможныеКодыПрЛица.Добавить("1");
	ВозможныеКодыПрЛица.Добавить("2");
	ВозможныеКодыПрЛица.Добавить("3");
	ВозможныеКодыПрЛица.Добавить("4");
	ВозможныеКодыПрЛица.Добавить("5");
	
	ВозможныеКодыПола = Новый Массив;
	ВозможныеКодыПола.Добавить("1");
	ВозможныеКодыПола.Добавить("2");
	
	ВозможныеКодыВидаДокУдЛич = Новый Массив;
	ВозможныеКодыВидаДокУдЛич.Добавить("21");
	ВозможныеКодыВидаДокУдЛич.Добавить("03");
	ВозможныеКодыВидаДокУдЛич.Добавить("07");
	ВозможныеКодыВидаДокУдЛич.Добавить("08");
	ВозможныеКодыВидаДокУдЛич.Добавить("10");
	ВозможныеКодыВидаДокУдЛич.Добавить("11");
	ВозможныеКодыВидаДокУдЛич.Добавить("12");
	ВозможныеКодыВидаДокУдЛич.Добавить("13");
	ВозможныеКодыВидаДокУдЛич.Добавить("14");
	ВозможныеКодыВидаДокУдЛич.Добавить("15");
	ВозможныеКодыВидаДокУдЛич.Добавить("18");
	ВозможныеКодыВидаДокУдЛич.Добавить("23");
	ВозможныеКодыВидаДокУдЛич.Добавить("24");
	ВозможныеКодыВидаДокУдЛич.Добавить("91");
	
	ВозможныеПризнакиАдреса = Новый Массив;
	ВозможныеПризнакиАдреса.Добавить("1");
	ВозможныеПризнакиАдреса.Добавить("2");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогового агента", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогового агента, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогового агента", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогового агента, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП налогового агента", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП налогового агента, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места, по которому представляется налоговый расчет", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места, по которому представляется налоговый расчет", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код отчетного (налогового) периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.Период) = 0 Тогда
		СообщитьВТС("Задано некорректное значение кода отчетного (налогового) периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации)", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			Если СтрНайти(ВозможныеКодыФормыРеорганизции, ПараметрыВыгрузки.ФормРеорг) = 0 Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации (ликвидации)",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	ДеревоРаздела1 = ДанныеМногоуровневыхРазделов.Раздел1;
	Данные1 = ДеревоРаздела1.Строки[0].Данные;
	НомерСтраницы1 = 1;
	
	// ОКТМО.
	ОКТМОДлина = СтрДлина(СокрЛП(Данные1["П000100001003"]));
	Если НЕ (ОКТМОДлина = 8 ИЛИ ОКТМОДлина = 11) Тогда
		СообщитьВТС("Раздел 1: не" + ?(ОКТМОДлина = 0, "", "верно")
		+ " задан код по ОКТМО", "Раздел1", "П000100001003", НомерСтраницы1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеМнЧ1 = ДеревоРаздела1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	Для Каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
		
		Инд = Формат(ДанныеМнЧ1.Строки.Индекс(СтрокаМнЧ1) + 1, "ЧГ=");
		
		ИмяПокКБК = "П000100002003";
		ИмяПокСрокУпл = "П000100003003";
		
		КБК = СокрЛП(СтрокаМнЧ1.Данные[ИмяПокКБК]);
		СрокУпл = СтрокаМнЧ1.Данные[ИмяПокСрокУпл];
		
		ДлинаКБК = СтрДлина(КБК);
		
		Если НЕ ДлинаКБК = 20 Тогда
			
			СообщитьВТС("Раздел 1: в строке " + Инд + " не" + ?(ДлинаКБК = 0, "", "верно")
			+ " задан код бюджетной классификации", "Раздел1", ИмяПокКБК + "_" + Инд);
			СтатусПроверки = Ложь;
			
		КонецЕсли;

	КонецЦикла;
	
	// Раздел 2.
	ДеревоРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	ДанныеМнЧ2 = ДеревоРаздела2.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы2];
	ЗаполненХотяБыОдинИзБлоковРаздела2 = Ложь;
	Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
		Инд = Формат(ДанныеМнЧ2.Строки.Индекс(СтрокаМнЧ2) + 1, "ЧГ=");
		
		ИмяПокКодДох      = "П000200001003";
		ИмяПокСумНачПер   = "П000200002003";
		ИмяПокСумУплПред  = "П000200003003";
		ИмяПокСумУплКв    = "П000200004003";
		ИмяПокСумУплНеПер = "П000200005003";
		
		КодДох      = СокрЛП(СтрокаМнЧ2.Данные[ИмяПокКодДох]);
		СумНачПер   = СтрокаМнЧ2.Данные[ИмяПокСумНачПер];
		СумУплПред  = СтрокаМнЧ2.Данные[ИмяПокСумУплПред];
		СумУплКв    = СтрокаМнЧ2.Данные[ИмяПокСумУплКв];
		СумУплНеПер = СтрокаМнЧ2.Данные[ИмяПокСумУплНеПер];
		
		Если НЕ (ЗначениеЗаполнено(КодДох)
			ИЛИ ЗначениеЗаполнено(СумНачПер)
			ИЛИ ЗначениеЗаполнено(СумУплПред)
			ИЛИ ЗначениеЗаполнено(СумУплКв)
			ИЛИ ЗначениеЗаполнено(СумУплНеПер)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела2 = Истина;
		
		ДлинаКодДох = СтрДлина(КодДох);
		Если ВозможныеКодыДохода.Найти(КодДох) = Неопределено Тогда
			СообщитьВТС("Раздел 2: в строке " + Инд + " не" + ?(ДлинаКодДох = 0, "", "верно")
			+ " задан код дохода", "Раздел2", ИмяПокКодДох + "_" + Инд);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела2 Тогда
		СообщитьВТС("Раздел 2: не заполнен ни один из блоков строки 010-050",
		"Раздел2", "П000200001003_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Разделы 3.1.
	ДеревоРаздела31 = ДанныеМногоуровневыхРазделов.Раздел31;
	
	Если ЗаполненРаздел3(ДеревоРаздела31) Тогда
		
		ПредставленияСтраницРаздела3СНеуникальнымиНомерами = Новый Массив;
		
		ТаблУникальныхНомеров = Новый ТаблицаЗначений;
		ТаблУникальныхНомеров.Колонки.Добавить("УникальныйНомер");
		ТаблУникальныхНомеров.Колонки.Добавить("ИндексСтраницы");
		ТаблУникальныхНомеров.Колонки.Добавить("СчетчикСтраниц");
		
		Для каждого СтраницаРаздела31 Из ДеревоРаздела31.Строки Цикл
			
			ИндСтраницы31       = ДеревоРаздела31.Строки.Индекс(СтраницаРаздела31);
			НомерСтраницы31     = ИндСтраницы31 + 1;
			НомерСтраницы31_Стр = Формат(НомерСтраницы31, "ЧГ=");
			
			КоординатыСтраницы31 = НомерСтраницы31_Стр;
			
			Данные31 = СтраницаРаздела31.Данные;
			
			ИмяПокНомерУник  = "П000310000103";
			ИмяПокПрПолучДох = "П000310001003";
			ИмяПокНаимРус    = "П000310002003";
			ИмяПокСтрРег     = "П000310003003";
			ИмяПокКодНПРег   = "П000310005003";
			ИмяПокДатаДок    = "П000310006003";
			ИмяПокНомДок     = "П000310007003";
			ИмяПокОКСМ       = "П000310008003";
			
			НомерУник        = СокрЛП(Данные31[ИмяПокНомерУник]);
			ПрПолучДох       = СокрЛП(Данные31[ИмяПокПрПолучДох]);
			НаимРус          = СокрЛП(Данные31[ИмяПокНаимРус]);
			СтрРег           = СокрЛП(Данные31[ИмяПокСтрРег]);
			КодНПРег         = СокрЛП(Данные31[ИмяПокКодНПРег]);
			ДокПдтвМНДатаДок = Данные31[ИмяПокДатаДок];
			ДокПдтвМННомДок  = СокрЛП(Данные31[ИмяПокНомДок]);
			ДокПдтвМНОКСМ    = СокрЛП(Данные31[ИмяПокОКСМ]);
			
			Если НЕ ЗначениеЗаполнено(НомерУник) Тогда
				СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + ": не задан уникальный номер",
				"Раздел31", ИмяПокНомерУник, КоординатыСтраницы31);
				СтатусПроверки = Ложь;
			Иначе
				НоваяСтрокаТаблУникальныхНомеров = ТаблУникальныхНомеров.Добавить();
				НоваяСтрокаТаблУникальныхНомеров.УникальныйНомер = НомерУник;
				НоваяСтрокаТаблУникальныхНомеров.ИндексСтраницы = ИндСтраницы31;
				НоваяСтрокаТаблУникальныхНомеров.СчетчикСтраниц = 1;
			КонецЕсли;
			
			ДлинаПрПолучДох = СтрДлина(ПрПолучДох);
			Если ВозможныеПрПолучДохода.Найти(ПрПолучДох) = Неопределено Тогда
				СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
				+ ": не" + ?(ДлинаПрПолучДох = 0, "", "верно") + " задан признак получателя дохода",
				"Раздел31", ИмяПокПрПолучДох, КоординатыСтраницы31);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаимРус) Тогда
				СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
				+ ": не задано полное наименование иностранной организации (в русской транскрипции)",
				"Раздел31", ИмяПокНаимРус, КоординатыСтраницы31);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаСтрРег = СтрДлина(СтрРег);
			Если ДлинаСтрРег <> 3 Тогда
				СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
				+ ": не" + ?(ДлинаСтрРег = 0, "", "верно") + " задан код страны регистрации (инкорпорации)",
				"Раздел31", ИмяПокСтрРег, КоординатыСтраницы31);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КодНПРег) Тогда
				СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
				+ ": не задан код налогоплательщика в стране регистрации (инкорпорации) / СВИФТ код",
				"Раздел31", ИмяПокКодНПРег, КоординатыСтраницы31);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокПдтвМНДатаДок)
				ИЛИ ЗначениеЗаполнено(ДокПдтвМННомДок)
				ИЛИ ЗначениеЗаполнено(ДокПдтвМНОКСМ) Тогда
				Если НЕ ЗначениеЗаполнено(ДокПдтвМНДатаДок) Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
					+ ": не задана дата документа, подтверждающего постоянное местонахождение (резидентство) в иностранном государстве получателя дохода",
					"Раздел31", ИмяПокДатаДок, КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДокПдтвМННомДок) Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
					+ ": не задан номер документа, подтверждающего постоянное местонахождение (резидентство) в иностранном государстве получателя дохода",
					"Раздел31", ИмяПокНомДок, КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаОКСМ = СтрДлина(ДокПдтвМНОКСМ);
				Если ДлинаОКСМ <> 3 Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр
					+ ": не" + ?(ДлинаОКСМ = 0, "", "верно")
					+ " задан код страны в документе, подтверждающем постоянное местонахождение (резидентство) в иностранном государстве получателя дохода",
					"Раздел31", ИмяПокОКСМ, КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Разделы 3.2.
			Для каждого СтраницаРаздела32 Из СтраницаРаздела31.Строки[0].Строки Цикл
				
				ИндСтраницы32       = СтраницаРаздела31.Строки[0].Строки.Индекс(СтраницаРаздела32);
				НомерСтраницы32     = ИндСтраницы32 + 1;
				НомерСтраницы32_Стр = Формат(НомерСтраницы32, "ЧГ=");
				
				КоординатыСтраницы32 = НомерСтраницы31_Стр + ",1," + НомерСтраницы32_Стр;
				
				Данные32 = СтраницаРаздела32.Данные;
				
				ИмяПокКодДох         = "П000320002003";
				ИмяПокСимвДох        = "П000320003003";
				ИмяПокВалюта         = "П000320005003";
				ИмяПокДатаВыплДох    = "П000320006003";
				ИмяПокСтавкаНал      = "П000320007003";
				ИмяПокКурсПрчислБюдж = "П000320012003";
				ИмяПокКодПравДох     = "П000320015003";
				
				ИмяПокСвРосОргЭЦБНаимОрг = "П000320017003";
				ИмяПокСвРосОргЭЦБИННЮЛ   = "П000320018003";
				ИмяПокСвРосОргЭЦБКПП     = "П000320019003";
				
				КодДох         = СокрЛП(Данные32[ИмяПокКодДох]);
				СимвДох        = СокрЛП(Данные32[ИмяПокСимвДох]);
				Валюта         = СокрЛП(Данные32[ИмяПокВалюта]);
				ДатаВыплДох    = Данные32[ИмяПокДатаВыплДох];
				СтавкаНал      = Данные32[ИмяПокСтавкаНал];
				КурсПрчислБюдж = Данные32[ИмяПокКурсПрчислБюдж];
				КодПравДох     = СокрЛП(Данные32[ИмяПокКодПравДох]);
				
				СвРосОргЭЦБНаимОрг = СокрЛП(Данные32[ИмяПокСвРосОргЭЦБНаимОрг]);
				СвРосОргЭЦБИННЮЛ   = СокрЛП(Данные32[ИмяПокСвРосОргЭЦБИННЮЛ]);
				СвРосОргЭЦБКПП     = СокрЛП(Данные32[ИмяПокСвРосОргЭЦБКПП]);
				
				ДлинаКодДох = СтрДлина(КодДох);
				Если ВозможныеКодыДохода.Найти(КодДох) = Неопределено Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
					+ НомерСтраницы32_Стр + ": не" + ?(ДлинаКодДох = 0, "", "верно") + " задан код дохода",
					"Раздел32", ИмяПокКодДох, КоординатыСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ВыпУсловиеОбязательностиСимвДох = (ПрПолучДох = "1" ИЛИ ПрПолучДох = "3" ИЛИ ЗначениеЗаполнено(СимвДох));
				Если ВыпУсловиеОбязательностиСимвДох Тогда
					ДлинаСимвДох = СтрДлина(СимвДох);
					Если ДлинаСимвДох <> 5 Тогда
						СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
						+ НомерСтраницы32_Стр + ": не" + ?(ДлинаСимвДох = 0, "", "верно") + " задан символ дохода",
						"Раздел32", ИмяПокСимвДох, КоординатыСтраницы32);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ДлинаВалюта = СтрДлина(Валюта);
				Если ДлинаВалюта <> 3 Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
					+ НомерСтраницы32_Стр + ": не" + ?(ДлинаВалюта = 0, "", "верно") + " задан код валюты выплаты дохода",
					"Раздел32", ИмяПокВалюта, КоординатыСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДатаВыплДох) Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
					+ НомерСтраницы32_Стр + ": не задана дата выплаты дохода",
					"Раздел32", ИмяПокДатаВыплДох, КоординатыСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если СтавкаНал > 0 И СтавкаНал < 99.99 И Валюта <> "643" Тогда
					Если НЕ ЗначениеЗаполнено(КурсПрчислБюдж) Тогда
						СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
						+ НомерСтраницы32_Стр + ": не задан официальный курс рубля на дату перечисления налога в бюджет",
						"Раздел32", ИмяПокКурсПрчислБюдж, КоординатыСтраницы32);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ДлинаКодПравДох = СтрДлина(КодПравДох);
				Если ВозможныеКодыФактПраваНаДоход.Найти(КодПравДох) = Неопределено Тогда
					СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
					+ НомерСтраницы32_Стр + ": не" + ?(ДлинаКодПравДох = 0, "", "верно") + " задан код фактического права на доход",
					"Раздел32", ИмяПокКодПравДох, КоординатыСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(СвРосОргЭЦБНаимОрг)
					ИЛИ ЗначениеЗаполнено(СвРосОргЭЦБИННЮЛ)
					ИЛИ ЗначениеЗаполнено(СвРосОргЭЦБКПП) Тогда
					Если НЕ ЗначениеЗаполнено(СвРосОргЭЦБНаимОрг) Тогда
						СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница " + НомерСтраницы32_Стр
						+ ": не задано наименование российской организации - эмитента эмиссионных ценных бумаг",
						"Раздел32", ИмяПокСвРосОргЭЦБНаимОрг, КоординатыСтраницы32);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ДлинаСвРосОргЭЦБИННЮЛ = СтрДлина(СвРосОргЭЦБИННЮЛ);
					Если ДлинаСвРосОргЭЦБИННЮЛ <> 10 Тогда
						СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
						+ НомерСтраницы32_Стр + ": не" + ?(ДлинаСвРосОргЭЦБИННЮЛ = 0, "", "верно")
						+ " задан ИНН российской организации - эмитента эмиссионных ценных бумаг",
						"Раздел32", ИмяПокСвРосОргЭЦБИННЮЛ, КоординатыСтраницы32);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ДлинаСвРосОргЭЦБКПП = СтрДлина(СвРосОргЭЦБКПП);
					Если ДлинаСвРосОргЭЦБКПП <> 9 Тогда
						СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
						+ НомерСтраницы32_Стр + ": не" + ?(ДлинаСвРосОргЭЦБКПП = 0, "", "верно")
						+ " задан КПП российской организации - эмитента эмиссионных ценных бумаг",
						"Раздел32", ИмяПокСвРосОргЭЦБКПП, КоординатыСтраницы32);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				// Разделы 3.3.
				Для каждого СтраницаРаздела33 Из СтраницаРаздела32.Строки[0].Строки Цикл
					
					Данные33 = СтраницаРаздела33.Данные;
					
					Проверять33 = Ложь;
					Для каждого Пок Из Данные33 Цикл
						Если ЗначениеЗаполнено(Пок.Значение) Тогда
							Проверять33 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Проверять33 Тогда
						
						ИндСтраницы33       = СтраницаРаздела32.Строки[0].Строки.Индекс(СтраницаРаздела33);
						НомерСтраницы33     = ИндСтраницы33 + 1;
						НомерСтраницы33_Стр = Формат(НомерСтраницы33, "ЧГ=");
						
						КоординатыСтраницы33 = НомерСтраницы31_Стр + ",1," + НомерСтраницы32_Стр + ",1," + НомерСтраницы33_Стр;
						
						ИмяПокКодПрЛиц = "П000330002003";
						КодПрЛиц = СокрЛП(Данные33[ИмяПокКодПрЛиц]);
						ДлинаКодПрЛиц = СтрДлина(КодПрЛиц);
						Если ВозможныеКодыПрЛица.Найти(КодПрЛиц) = Неопределено Тогда
							СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
							+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
							+ ": не" + ?(ДлинаКодПрЛиц = 0, "", "верно") + " задан код признака лица",
							"Раздел33", ИмяПокКодПрЛиц, КоординатыСтраницы33);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПокДатаСобщ = "П000330003003";
						ИмяПокНомСобщ1 = "П000330004003";
						ИмяПокНомСобщ2 = "П000330004004";
						ДатаСобщ = Данные33[ИмяПокДатаСобщ];
						НомСобщ1 = СокрЛП(Данные33[ИмяПокНомСобщ1]);
						НомСобщ2 = СокрЛП(Данные33[ИмяПокНомСобщ2]);
						
						ЗаполненоСообщениеОНалогообложенииНаправленноеВНО
							= ЗначениеЗаполнено(ДатаСобщ)
							ИЛИ ЗначениеЗаполнено(НомСобщ1)
							ИЛИ ЗначениеЗаполнено(НомСобщ2);
						
						Если ЗаполненоСообщениеОНалогообложенииНаправленноеВНО Тогда
							Если НЕ ЗначениеЗаполнено(ДатаСобщ) Тогда
								СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
								+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
								+ ": не задана дата сообщения о налогообложении доходов (их части), направленного налоговым агентом в налоговый орган",
								"Раздел33", ИмяПокДатаСобщ, КоординатыСтраницы33);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если НЕ (ЗначениеЗаполнено(НомСобщ1) И ЗначениеЗаполнено(НомСобщ2)) Тогда
								ИмяПокНомСобщ = ?(ЗначениеЗаполнено(НомСобщ1), ИмяПокНомСобщ2, ИмяПокНомСобщ1);
								СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
								+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
								+ ": не" + ?(НЕ ЗначениеЗаполнено(НомСобщ1) И НЕ ЗначениеЗаполнено(НомСобщ2), "", "верно")
								+ " задан номер сообщения о налогообложении доходов (их части), направленного налоговым агентом в налоговый орган",
								"Раздел33", ИмяПокНомСобщ, КоординатыСтраницы33);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
						
						ИмяПокДатаДок = "П000330005003";
						ИмяПокНомДок  = "П000330006003";
						ИмяПокОКСМ    = "П000330007003";
						ДатаДок = Данные33[ИмяПокДатаДок];
						НомДок  = СокрЛП(Данные33[ИмяПокНомДок]);
						ОКСМ    = СокрЛП(Данные33[ИмяПокОКСМ]);
						Если ЗначениеЗаполнено(ДатаДок)
							ИЛИ ЗначениеЗаполнено(НомДок)
							ИЛИ ЗначениеЗаполнено(ОКСМ) Тогда
							Если НЕ ЗначениеЗаполнено(ДатаДок) Тогда
								СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
								+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
								+ ": не задана дата документа, подтверждающего постоянное местонахождение (резидентство) в иностранном государстве",
								"Раздел33", ИмяПокДатаДок, КоординатыСтраницы33);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(НомДок) Тогда
								СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
								+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
								+ ": не задан номер документа, подтверждающего постоянное местонахождение (резидентство) в иностранном государстве",
								"Раздел33", ИмяПокНомДок, КоординатыСтраницы33);
								СтатусПроверки = Ложь;
							КонецЕсли;
							ДлинаОКСМ = СтрДлина(ОКСМ);
							Если ДлинаОКСМ <> 3 Тогда
								СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
								+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
								+ ": не" + ?(ДлинаОКСМ = 0, "", "верно") + " задан код страны в документе, подтверждающем постоянное местонахождение (резидентство) в иностранном государстве",
								"Раздел33", ИмяПокОКСМ, КоординатыСтраницы33);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
						
						// Проверка блока "Сведения о юридическом лице или иностранной структуре без образования юридического лица".
						Если КодПрЛиц = "1" ИЛИ КодПрЛиц = "3" ИЛИ КодПрЛиц = "5" Тогда
							
							ЗаполненыСведенияОЮрЛице
							= ЗначениеЗаполнено(Данные33["П000330008003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330009003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330010003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330011003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330012003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330013003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330014003"]);
							
							Если НЕ ЗаполненоСообщениеОНалогообложенииНаправленноеВНО
								ИЛИ ЗаполненыСведенияОЮрЛице Тогда
								ИмяПокНаимОрг = "П000330008003";
								ИмяПокСтрРег  = "П000330009003";
								ИмяПокИННЮЛ   = "П000330010003";
								ИмяПокКПП     = "П000330011003";
								НаимОрг = СокрЛП(Данные33[ИмяПокНаимОрг]);
								СтрРег  = СокрЛП(Данные33[ИмяПокСтрРег]);
								ИННЮЛ   = СокрЛП(Данные33[ИмяПокИННЮЛ]);
								КПП     = СокрЛП(Данные33[ИмяПокКПП]);
								Если НЕ ЗначениеЗаполнено(НаимОрг) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задано наименование юридического лица или иностранной структуры без образования юридического лица",
									"Раздел33", ИмяПокНаимОрг, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								ДлинаСтрРег = СтрДлина(СтрРег);
								Если ДлинаСтрРег <> 3 Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не" + ?(ДлинаСтрРег = 0, "", "верно")
									+ " задан код страны регистрации (инкорпорации) юридического лица или иностранной структуры без образования юридического лица",
									"Раздел33", ИмяПокСтрРег, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если ЗначениеЗаполнено(ИННЮЛ) Тогда
									ДлинаИННЮЛ = СтрДлина(ИННЮЛ);
									Если ДлинаИННЮЛ <> 10 Тогда
										СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
										+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
										+ ": неверно задан ИНН организации в Российской Федерации в сведениях о юридическом лице или иностранной структуре без образования юридического лица",
										"Раздел33", ИмяПокИННЮЛ, КоординатыСтраницы33);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
								Если ЗначениеЗаполнено(КПП) Тогда
									ДлинаКПП = СтрДлина(КПП);
									Если ДлинаКПП <> 9 Тогда
										СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
										+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
										+ ": неверно задан КПП организации в Российской Федерации в сведениях о юридическом лице или иностранной структуре без образования юридического лица",
										"Раздел33", ИмяПокКПП, КоординатыСтраницы33);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						// Проверка блока "Сведения о физическом лице".
						Если КодПрЛиц = "2" ИЛИ КодПрЛиц = "4" Тогда
							
							ЗаполненыСведенияОФизЛице
							= ЗначениеЗаполнено(Данные33["П000330015003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330016003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330017003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330018003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330019003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330020003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330021003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330022003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330023003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330024003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330025003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330026003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330027003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330028003"])
							ИЛИ ЗначениеЗаполнено(Данные33["П000330029003"]);
							
							Если НЕ ЗаполненоСообщениеОНалогообложенииНаправленноеВНО
								ИЛИ ЗаполненыСведенияОФизЛице Тогда
								ИмяПокФамилия = "П000330015003";
								ИмяПокИмя     = "П000330016003";
								Фамилия = СокрЛП(Данные33[ИмяПокФамилия]);
								Имя     = СокрЛП(Данные33[ИмяПокИмя]);
								Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задана фамилия физического лица",
									"Раздел33", ИмяПокФамилия, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(Имя) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задано имя физического лица",
									"Раздел33", ИмяПокИмя, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								
								ИмяПокПол       = "П000330018003";
								ИмяПокДатаРожд  = "П000330019003";
								ИмяПокГражд     = "П000330020003";
								ИмяПокМестоРожд = "П000330021003";
								ИмяПокИННФЛ     = "П000330023003";
								Пол       = СокрЛП(Данные33[ИмяПокПол]);
								ДатаРожд  = Данные33[ИмяПокДатаРожд];
								Гражд     = СокрЛП(Данные33[ИмяПокГражд]);
								МестоРожд = СокрЛП(Данные33[ИмяПокМестоРожд]);
								ИННФЛ     = СокрЛП(Данные33[ИмяПокИННФЛ]);
								ДлинаПол  = СтрДлина(Пол);
								Если ВозможныеКодыПола.Найти(Пол) = Неопределено Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не" + ?(ДлинаПол = 0, "", "верно") + " задан пол физического лица",
									"Раздел33", ИмяПокПол, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(ДатаРожд) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задана дата рождения физического лица",
									"Раздел33", ИмяПокДатаРожд, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								ДлинаГражд = СтрДлина(Гражд);
								Если ДлинаГражд <> 3 Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр + ": не"
									+ ?(ДлинаГражд = 0, "", "верно") + " задано гражданство (код страны) физического лица",
									"Раздел33", ИмяПокГражд, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(МестоРожд) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задано место рождения физического лица",
									"Раздел33", ИмяПокМестоРожд, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если ЗначениеЗаполнено(ИННФЛ) Тогда
									ДлинаИННФЛ = СтрДлина(ИННФЛ);
									Если ДлинаИННФЛ <> 12 Тогда
										СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
										+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
										+ ": неверно задан ИНН физического лица",
										"Раздел33", ИмяПокИННФЛ, КоординатыСтраницы33);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
								
								ИмяПокКодВидДок = "П000330024003";
								ИмяПокСерНомДок = "П000330025003";
								ИмяПокДатаДок   = "П000330026003";
								КодВидДок = СокрЛП(Данные33[ИмяПокКодВидДок]);
								СерНомДок = СокрЛП(Данные33[ИмяПокСерНомДок]);
								ДатаДок   = Данные33[ИмяПокДатаДок];
								
								ДлинаКодВидДок = СтрДлина(КодВидДок);
								Если ВозможныеКодыВидаДокУдЛич.Найти(КодВидДок) = Неопределено Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не" + ?(ДлинаКодВидДок = 0, "", "верно")
									+ " задан код вида документа, удостоверяющего личность",
									"Раздел33", ИмяПокКодВидДок, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(СерНомДок) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не заданы серия и номер документа, удостоверяющего личность",
									"Раздел33", ИмяПокСерНомДок, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(ДатаДок) Тогда
									СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
									+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
									+ ": не задана дата выдачи документа, удостоверяющего личность",
									"Раздел33", ИмяПокДатаДок, КоординатыСтраницы33);
									СтатусПроверки = Ложь;
								КонецЕсли;
								
								ИмяПокОКСМ  = "П000330028003";
								ИмяПокАдрИн = "П000330027003";
								ОКСМ  = СокрЛП(Данные33[ИмяПокОКСМ]);
								АдрИн = СокрЛП(Данные33[ИмяПокАдрИн]);
								Если ЗначениеЗаполнено(ОКСМ)
									ИЛИ ЗначениеЗаполнено(АдрИн) Тогда
									ДлинаОКСМ = СтрДлина(ОКСМ);
									Если ДлинаОКСМ <> 3 Тогда
										СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
										+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
										+ ": не" + ?(ДлинаОКСМ = 0, "", "верно")
										+ " задан код страны места жительства (места пребывания) за пределами Российской Федерации",
										"Раздел33", ИмяПокОКСМ, КоординатыСтраницы33);
										СтатусПроверки = Ложь;
									КонецЕсли;
									Если НЕ ЗначениеЗаполнено(АдрИн) Тогда
										СообщитьВТС("Раздел 3.1. Страница " + НомерСтраницы31_Стр + " -> Раздел 3.2. Страница "
										+ НомерСтраницы32_Стр + " -> Раздел 3.3. Страница " + НомерСтраницы33_Стр
										+ ": не задан адрес места жительства (места пребывания) за пределами Российской Федерации",
										"Раздел33", ИмяПокАдрИн, КоординатыСтраницы33);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблУникНом = ТаблУникальныхНомеров.Скопировать();
		ТаблУникНом.Свернуть("УникальныйНомер", "СчетчикСтраниц");
		
		ИндексПервойСтраницыРаздела3СНеуникальнымНомером = Неопределено;
		
		Если ТаблУникальныхНомеров.Количество() <> ТаблУникНом.Количество() Тогда
			
			Для каждого СтрокаТаблУникНом Из ТаблУникНом Цикл
				
				Если СтрокаТаблУникНом.СчетчикСтраниц > 1 Тогда
					
					СтрокиТаблУникальныхНомеров = ТаблУникальныхНомеров.НайтиСтроки(
					Новый Структура("УникальныйНомер", СтрокаТаблУникНом.УникальныйНомер));
					
					Для каждого СтрокаТаблУникальныхНомеров Из СтрокиТаблУникальныхНомеров Цикл
						
						ПредставленияСтраницРаздела3СНеуникальнымиНомерами.Добавить("""Стр. "
						+ Формат(СтрокаТаблУникальныхНомеров.ИндексСтраницы + 1, "ЧГ=") + """");
						
						Если ИндексПервойСтраницыРаздела3СНеуникальнымНомером = Неопределено Тогда
							ИндексПервойСтраницыРаздела3СНеуникальнымНомером = СтрокаТаблУникальныхНомеров.ИндексСтраницы;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПредставленияСтраницРаздела3СНеуникальнымиНомерами.Количество() > 0 Тогда
			
			СообщитьВТС("Раздел 3: заданы неуникальные значения строки 001 на страницах "
			+ СтрСоединить(ПредставленияСтраницРаздела3СНеуникальнымиНомерами, ", "),
			"Раздел31", "П000310000103", Формат(ИндексПервойСтраницыРаздела3СНеуникальнымНомером + 1, "ЧГ="));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел3(ДеревоРаздела31)
	
	ЕстьЗаполненныйРаздел31 = Ложь;
	ЕстьЗаполненныйРаздел32 = Ложь;
	ЕстьЗаполненныйРаздел33 = Ложь;
	Для каждого СтраницаРаздела31 Из ДеревоРаздела31.Строки Цикл
		Данные31 = СтраницаРаздела31.Данные;
		Для каждого Пок Из Данные31 Цикл
			Если ЗначениеЗаполнено(Пок.Значение) Тогда
				ЕстьЗаполненныйРаздел31 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьЗаполненныйРаздел31 Тогда
			Прервать;
		Иначе
			Для каждого СтраницаРаздела32 Из СтраницаРаздела31.Строки[0].Строки Цикл
				Данные32 = СтраницаРаздела32.Данные;
				Для каждого Пок Из Данные32 Цикл
					Если ЗначениеЗаполнено(Пок.Значение) Тогда
						ЕстьЗаполненныйРаздел32 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьЗаполненныйРаздел32 Тогда
					Прервать;
				Иначе
					Для каждого СтраницаРаздела33 Из СтраницаРаздела32.Строки[0].Строки Цикл
						Данные33 = СтраницаРаздела33.Данные;
						Для каждого Пок Из Данные33 Цикл
							Если ЗначениеЗаполнено(Пок.Значение) Тогда
								ЕстьЗаполненныйРаздел33 = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЕстьЗаполненныйРаздел33 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьЗаполненныйРаздел31 ИЛИ ЕстьЗаполненныйРаздел32 ИЛИ ЕстьЗаполненныйРаздел33;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоДанныхРаздел1  = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоДанныхРаздел2  = ДанныеМногоуровневыхРазделов["Раздел2"];
	ДеревоДанныхРаздел31 = ДанныеМногоуровневыхРазделов["Раздел31"];
	
	// Раздел 1 (единственная страница).
	Ветка1 = ДеревоДанныхРаздел1.Строки[0];
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Для каждого Эл Из СумНалПУ.Строки Цикл
		Если Эл.Код = "ОКТМО" Тогда
			ВывестиПоказательВXML(Эл, Ветка1.Данные[Эл.Ключ]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СумНалПУКод = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумНалПУКод");
	ДанныеМнЧ1 = Ветка1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
		ЭкзСумНалПУКод = СкопироватьУзел(СумНалПУ, СумНалПУКод);
		Для каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧ1.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 2 (единственная страница).
	Ветка2 = ДеревоДанныхРаздел2.Строки[0];
	НалВыплДох = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалВыплДох");
	НалВыплДохКод = ПолучитьПодчиненныйЭлемент(НалВыплДох, "НалВыплДохКод");
	ДанныеМнЧ2 = Ветка2.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы2];
	Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
		ЭкзНалВыплДохКод = СкопироватьУзел(НалВыплДох, НалВыплДохКод);
		Для каждого Эл Из ЭкзНалВыплДохКод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧ2.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 3 (иерархический).
	Если ЗаполненРаздел3(ДеревоДанныхРаздел31) Тогда
		
		РасчВыплДох = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчВыплДох");
		Для каждого Ветка31 Из ДеревоДанныхРаздел31.Строки Цикл
			
			// Раздел 3.
			ЭкзРасчВыплДох = СкопироватьУзел(УзелРодитель, РасчВыплДох);
			Для каждого Эл Из ЭкзРасчВыплДох.Строки Цикл
				Если Эл.Код = "НомерУник" Тогда
					// Отсечение лидирующих нулей и выгрузка "уникальных номеров" экземпляров Раздела 3.
					НомерУник = СокрЛП(Ветка31.Данные[Эл.Ключ]);
					Пока Лев(НомерУник, 1) = "0" Цикл
						НомерУник = Сред(НомерУник, 2);
					КонецЦикла;
					ВывестиПоказательВXML(Эл, НомерУник);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 3.1.
			СвИОПолучДох = ПолучитьПодчиненныйЭлемент(ЭкзРасчВыплДох, "СвИОПолучДох");
			Для каждого Эл Из СвИОПолучДох.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка31.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			ДокПдтвМН = ПолучитьПодчиненныйЭлемент(СвИОПолучДох, "ДокПдтвМН");
			Для каждого Эл Из ДокПдтвМН.Строки Цикл
				ВывестиПоказательВXML(Эл, Ветка31.Данные[Эл.Ключ]);
			КонецЦикла;
			
			// Раздел 3.2.
			ДохРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзРасчВыплДох, "ДохРасчНал");
			Для каждого Ветка32 Из Ветка31.Строки[0].Строки Цикл
				ЭкзДохРасчНал = СкопироватьУзел(ЭкзРасчВыплДох, ДохРасчНал);
				
				КодВалютыВыплатыДохода = СокрЛП(Ветка32.Данные.П000320005003);
				
				Для каждого Эл Из ЭкзДохРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если Эл.Код = "НомерДох" Тогда
							// Генерирование "порядковых номеров" экземпляров Раздела 3.2
							// для "уникального номера" текущего экземпляра Раздела 3.
							ВывестиПоказательВXML(Эл, Ветка31.Строки[0].Строки.Индекс(Ветка32) + 1);
							
						ИначеЕсли Эл.Код = "СумДохДоНал"
							ИЛИ Эл.Код = "СумНалРЕПО"
							ИЛИ Эл.Код = "СумНалог" Тогда
							
							Если КодВалютыВыплатыДохода = "643" Тогда
								ФорматПоказателей = "ЧЦ=15;ЧДЦ=0;ЧРД=.;ЧН=0;ЧГ=;";
							Иначе
								ФорматПоказателей = "ЧЦ=15;ЧДЦ=2;ЧРД=.;ЧН=0;ЧГ=;";
							КонецЕсли;
							ВывестиПоказательВXML(Эл, Формат(Ветка32.Данные[Эл.Ключ], ФорматПоказателей));
							
						ИначеЕсли Эл.Код = "КурсПрчислБюдж"
							И КодВалютыВыплатыДохода = "643" Тогда
							
							ВывестиПоказательВXML(Эл, 0);
							
						Иначе
							
							ВывестиПоказательВXML(Эл, Ветка32.Данные[Эл.Ключ]);
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				СвРосОргЭЦБ = ПолучитьПодчиненныйЭлемент(ЭкзДохРасчНал, "СвРосОргЭЦБ");
				Для каждого Эл Из СвРосОргЭЦБ.Строки Цикл
					ВывестиПоказательВXML(Эл, Ветка32.Данные[Эл.Ключ]);
				КонецЦикла;
				
				// Раздел 3.3.
				СвЛицПравДох = ПолучитьПодчиненныйЭлемент(ЭкзДохРасчНал, "СвЛицПравДох");
				Для каждого Ветка33 Из Ветка32.Строки[0].Строки Цикл
					ЭкзСвЛицПравДох = СкопироватьУзел(ЭкзДохРасчНал, СвЛицПравДох);
					
					Для каждого Эл Из ЭкзСвЛицПравДох.Строки Цикл
						Если Эл.Код = "КодПрЛиц" Тогда
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					СобщНалНО = ПолучитьПодчиненныйЭлемент(ЭкзСвЛицПравДох, "СобщНалНО");
					Для каждого Эл Из СобщНалНО.Строки Цикл
						Если Эл.Код = "НомСобщ" Тогда
							НомСобщ_Часть1 = СокрЛП(Ветка33.Данные["П000330004003"]);
							НомСобщ_Часть2 = СокрЛП(Ветка33.Данные["П000330004004"]);
							Если ЗначениеЗаполнено(НомСобщ_Часть1) И ЗначениеЗаполнено(НомСобщ_Часть2) Тогда
								ВывестиПоказательВXML(Эл, НомСобщ_Часть1 + "-" + НомСобщ_Часть2);
							Иначе
								ВывестиПоказательВXML(Эл, "");
							КонецЕсли;
						Иначе
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					
					ДокПдтвМН = ПолучитьПодчиненныйЭлемент(ЭкзСвЛицПравДох, "ДокПдтвМН");
					Для каждого Эл Из ДокПдтвМН.Строки Цикл
						ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
					КонецЦикла;
					
					// Сведения о юридическом лице или иностранной структуре без образования юридического лица.
					СведЮЛ = ПолучитьПодчиненныйЭлемент(ЭкзСвЛицПравДох, "СведЮЛ");
					Для каждого Эл Из СведЮЛ.Строки Цикл
						ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
					КонецЦикла;
					
					// Сведения о физическом лице.
					СведФЛ = ПолучитьПодчиненныйЭлемент(ЭкзСвЛицПравДох, "СведФЛ");
					Для каждого Эл Из СведФЛ.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
						КонецЕсли;
						ФИО = ПолучитьПодчиненныйЭлемент(СведФЛ, "ФИО");
						Для каждого Эл Из ФИО.Строки Цикл
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
						КонецЦикла;
						УдЛичнФЛ = ПолучитьПодчиненныйЭлемент(СведФЛ, "УдЛичнФЛ");
						Для каждого Эл Из УдЛичнФЛ.Строки Цикл
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
						КонецЦикла;
						АдрМЖИн = ПолучитьПодчиненныйЭлемент(СведФЛ, "АдрМЖИн");
						Для каждого Эл Из АдрМЖИн.Строки Цикл
							ВывестиПоказательВXML(Эл, Ветка33.Данные[Эл.Ключ]);
						КонецЦикла;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДоходыИностраннымОрганизациям");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
		
		УстановитьФорматВыводаДляРаздела32НаКлиентеНаСервереБезКонтекста(ЭтотОбъект);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
				|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
				|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
				|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
	
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя			 = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность	 = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме	 = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя		 = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя			 = ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаДляРаздела32НаКлиентеНаСервереБезКонтекста(Форма)
	
	КодВалютыВыплатыДохода = СокрЛП(Форма.ТабличныйДокумент.Области["П000320005003"].Значение);
	
	Если КодВалютыВыплатыДохода = "643" Тогда
		
		ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела();
		
		ФорматПоказателей = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
		
	Иначе
		
		ФорматПоказателей = "ЧЦ=15;ЧДЦ=2;ЧРД=,;ЧН=-";
		
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.П000320004003.Формат = ФорматПоказателей;
	Форма.ТабличныйДокумент.Области.П000320009003.Формат = ФорматПоказателей;
	Форма.ТабличныйДокумент.Области.П000320010003.Формат = ФорматПоказателей;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТабличныйДокумент.Очистить();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел33" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
																				|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Иначе
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = '%1. Формируется печатная форма...';
		|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела1 = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел1");
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
		
		// Определение количества листов раздела 1.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол = КолСтрокМнЧ1 / 7;
		ЦелКол  = Цел(КолСтрокМнЧ1 / 7);
		КолЛистовРаздела1 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
		
		// Подготовка многострочных данных для заполнения листов раздела 1.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			ПриращениеКНомеру = (НомЛиста - 1) * 7;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ1 = 1 По 7 Цикл
				_ИндСтрокиМнЧ1 = "_" + Формат(ИндСтрокиМнЧ1, "ЧГ=");
				ИндСПриращением = ИндСтрокиМнЧ1 + ПриращениеКНомеру;
				
				ИмяП000100002003 = "П000100002003";
				ИмяП000100003003 = "П000100003003";
				ИмяП000100004003 = "П000100004003";
				НовИмяП000100002003 = ИмяП000100002003 + _ИндСтрокиМнЧ1;
				НовИмяП000100003003 = ИмяП000100003003 + _ИндСтрокиМнЧ1;
				НовИмяП000100004003 = ИмяП000100004003 + _ИндСтрокиМнЧ1;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000100002003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000100003003, '00010101');
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000100004003, 0);
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати[НовИмяП000100002003]
						= ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000100002003];
					ДанныеМнЧ1ДляПечати[НовИмяП000100003003]
						= ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000100003003];
					ДанныеМнЧ1ДляПечати[НовИмяП000100004003]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						ЭтотОбъект, ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000100004003]);
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
		КонецЦикла;
		
		// Вывод листов раздела 1.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела1);
			Для Ном = 1 По 6 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппы1 + "_" + Формат(Ном, "ЧГ=");
				ВставитьДопСтроку(СтруктураРеквизитовФормы.мИдГруппы1, ИмяОбластиПреемника);
			КонецЦикла;
			
			НемногострочныеДанные1 = ДеревоДанныхРаздела.Строки[0].Данные;
			Для каждого Пок Из НемногострочныеДанные1 Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела1 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
				СтруктураПараметровРаздела1.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметровРаздела1.Вставить("ИмяСтраницы", "Раздел1");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела1, ОбщиеРеквизитыРазделов, СтрПоля);
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела2 = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел2");
		
		ДанныеМнЧ2 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы2];
		
		// Определение количества листов раздела 2.
		КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
		ДробКол = КолСтрокМнЧ2 / 4;
		ЦелКол  = Цел(КолСтрокМнЧ2 / 4);
		КолЛистовРаздела2 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
		
		// Подготовка многострочных данных для заполнения листов раздела 2.
		МассивДанныхМнЧ2ДляПечати = Новый Массив;
		Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
			ПриращениеКНомеру = (НомЛиста - 1) * 4;
			ДанныеМнЧ2ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ2 = 1 По 4 Цикл
				_ИндСтрокиМнЧ2 = "_" + Формат(ИндСтрокиМнЧ2, "ЧГ=");
				ИндСПриращением = ИндСтрокиМнЧ2 + ПриращениеКНомеру;
				
				ИмяП000200001003 = "П000200001003";
				ИмяП000200002003 = "П000200002003";
				ИмяП000200003003 = "П000200003003";
				ИмяП000200004003 = "П000200004003";
				ИмяП000200005003 = "П000200005003";
				НовИмяП000200001003 = ИмяП000200001003 + _ИндСтрокиМнЧ2;
				НовИмяП000200002003 = ИмяП000200002003 + _ИндСтрокиМнЧ2;
				НовИмяП000200003003 = ИмяП000200003003 + _ИндСтрокиМнЧ2;
				НовИмяП000200004003 = ИмяП000200004003 + _ИндСтрокиМнЧ2;
				НовИмяП000200005003 = ИмяП000200005003 + _ИндСтрокиМнЧ2;
				
				ДанныеМнЧ2ДляПечати.Вставить(НовИмяП000200001003, "");
				ДанныеМнЧ2ДляПечати.Вставить(НовИмяП000200002003, 0);
				ДанныеМнЧ2ДляПечати.Вставить(НовИмяП000200003003, 0);
				ДанныеМнЧ2ДляПечати.Вставить(НовИмяП000200004003, 0);
				ДанныеМнЧ2ДляПечати.Вставить(НовИмяП000200005003, 0);
				
				Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
					ДанныеМнЧ2ДляПечати[НовИмяП000200001003]
						= ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000200001003];
					ДанныеМнЧ2ДляПечати[НовИмяП000200002003]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						ЭтотОбъект, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000200002003]);
					ДанныеМнЧ2ДляПечати[НовИмяП000200003003]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						ЭтотОбъект, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000200003003]);
					ДанныеМнЧ2ДляПечати[НовИмяП000200004003]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						ЭтотОбъект, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000200004003]);
					ДанныеМнЧ2ДляПечати[НовИмяП000200005003]
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						ЭтотОбъект, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000200005003]);
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
		КонецЦикла;
		
		// Вывод листов раздела 2.
		Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела2);
			Для Ном = 1 По 3 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппы2 + "_" + Формат(Ном, "ЧГ=");
				ВставитьДопСтроку(СтруктураРеквизитовФормы.мИдГруппы2, ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела2 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
				СтруктураПараметровРаздела2.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметровРаздела2.Вставить("ИмяСтраницы", "Раздел2");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела2, ОбщиеРеквизитыРазделов, СтрПоля);
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел31" Тогда
		
		МакетРаздела31 = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31");
		МакетРаздела32 = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел32");
		МакетРаздела33 = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + "Раздел33");
		
		// Вывод листов подраздела 3.1.
		КолЛистовРаздела31 = ДеревоДанныхРаздела.Строки.Количество();
		Для НомЛиста31 = 1 По КолЛистовРаздела31 Цикл
			
			Данные31 = ДеревоДанныхРаздела.Строки[НомЛиста31 - 1].Данные;
			
			УникНомСтрока = СокрЛП(Данные31["П000310000103"]);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела31);
			
			Для каждого Пок Из Данные31 Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела3 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
				СтруктураПараметровРаздела3.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметровРаздела3.Вставить("ИмяСтраницы", "Раздел31");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела3, ОбщиеРеквизитыРазделов, СтрПоля);
			
			// Вывод листов подраздела 3.2.
			КолЛистовРаздела32 = ДеревоДанныхРаздела.Строки[НомЛиста31 - 1].Строки[0].Строки.Количество();
			Для НомЛиста32 = 1 По КолЛистовРаздела32 Цикл
				
				ПорядНомДоходаСтрока = Формат(НомЛиста32, "ЧГ=;ЧВН=;ЧЦ=12");
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела32);
				
				Обл = ТабличныйДокумент.Области.Найти("УникальныйНомер");
				Если Обл <> Неопределено Тогда
					Обл.Текст = УникНомСтрока;
				КонецЕсли;
				
				Обл = ТабличныйДокумент.Области.Найти("ПорядковыйНомерДохода");
				Если Обл <> Неопределено Тогда
					Обл.Текст = ПорядНомДоходаСтрока;
				КонецЕсли;
				
				Данные32 = ДеревоДанныхРаздела.Строки[НомЛиста31 - 1].Строки[0].Строки[НомЛиста32 - 1].Данные;
				КодВалютыВыплатыДохода = СокрЛП(Данные32["П000320005003"]);
				Для каждого Пок Из Данные32 Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Если Пок.Ключ = "П000320004003"
							ИЛИ Пок.Ключ = "П000320009003"
							ИЛИ Пок.Ключ = "П000320010003" Тогда
							Если КодВалютыВыплатыДохода = "643" Тогда
								Обл.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
								ЭтотОбъект, Пок.Значение);
							Иначе
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						ИначеЕсли Пок.Ключ = "П000320012003" Тогда
							Если КодВалютыВыплатыДохода = "643" Тогда
								Обл.Значение = 0;
							Иначе
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						ИначеЕсли Пок.Ключ = "П000320014003" Тогда
							Обл.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							ЭтотОбъект, Пок.Значение);
						Иначе
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела3 = Новый Структура;
				Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
					СтруктураПараметровРаздела3.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
				КонецЦикла;
				СтруктураПараметровРаздела3.Вставить("ИмяСтраницы", "Раздел32_Лист1");
				ТД = ТабличныйДокумент.ПолучитьОбласть();
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела3, ОбщиеРеквизитыРазделов, СтрПоля);
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ТД);
				
				СтруктураПараметровРаздела3 = Новый Структура;
				Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
					СтруктураПараметровРаздела3.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
				КонецЦикла;
				СтруктураПараметровРаздела3.Вставить("ИмяСтраницы", "Раздел32_Лист2");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела3, ОбщиеРеквизитыРазделов, СтрПоля);
				
				// Вывод листов подраздела 3.3.
				КолЛистовРаздела33 = ДеревоДанныхРаздела.Строки[НомЛиста31 - 1].Строки[0].Строки[
				НомЛиста32 - 1].Строки[0].Строки.Количество();
				Для НомЛиста33 = 1 По КолЛистовРаздела33 Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела33);
					
					Обл = ТабличныйДокумент.Области.Найти("УникальныйНомер");
					Если Обл <> Неопределено Тогда
						Обл.Текст = УникНомСтрока;
					КонецЕсли;
					
					Обл = ТабличныйДокумент.Области.Найти("ПорядковыйНомерДохода");
					Если Обл <> Неопределено Тогда
						Обл.Текст = ПорядНомДоходаСтрока;
					КонецЕсли;
					
					Данные33 = ДеревоДанныхРаздела.Строки[НомЛиста31 - 1].Строки[0].Строки[
					НомЛиста32 - 1].Строки[0].Строки[НомЛиста33 - 1].Данные;
					Для каждого Пок Из Данные33 Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела3 = Новый Структура;
					Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
						СтруктураПараметровРаздела3.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
					КонецЦикла;
					СтруктураПараметровРаздела3.Вставить("ИмяСтраницы", "Раздел33_Лист1");
					ТД = ТабличныйДокумент.ПолучитьОбласть();
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела3, ОбщиеРеквизитыРазделов, СтрПоля);
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ТД);
					
					СтруктураПараметровРаздела3 = Новый Структура;
					Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
						СтруктураПараметровРаздела3.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
					КонецЦикла;
					СтруктураПараметровРаздела3.Вставить("ИмяСтраницы", "Раздел33_Лист2");
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела3, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2020Кв1_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	Область = ИсходныйМакет.Области.Найти("УникальныйНомер");
	Если Область <> Неопределено Тогда
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Ложь Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Текст;
			НовСтр.ЗначениеМЧБ = Область.Текст;
		КонецЕсли;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ПорядковыйНомерДохода");
	Если Область <> Неопределено Тогда
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Ложь Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПорядковыйНомерДохода";
			НовСтр.Значение = Область.Текст;
			НовСтр.ЗначениеМЧБ = Область.Текст;
		КонецЕсли;
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	// Особая обработка ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Показатель Из Показатели Цикл
		
		Если Показатель.Имя = "П000100001003" Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
		
		Если СтрЧислоВхождений(Показатель.Имя, "П000100004003") > 0
		 И НЕ ЗначениеЗаполнено(Показатель.Значение)
		 И Показатели.Найти("П000100002003_" + Прав(Показатель.Имя, 1), "Имя").Значение = "00000000000000000000"
		 И НЕ ЗначениеЗаполнено(Показатели.Найти("П000100003003_" + Прав(Показатель.Имя, 1), "Имя").Значение) Тогда
			Показатель.ЗначениеМЧБ = "0";
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = 'Не удалось заполнить область ""%1""';
						|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти));
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = Обл.Значение;
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ИНН,КПП,ДатаПодписи", МассивИНН, МассивКПП, МассивДатаПодписи);
	
КонецФункции

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"	, 0);
	ДанныеКС.Вставить("КолНеОшибок"	, 0);
	ДанныеКС.Вставить("Результат"	, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"		, Истина);;
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОтчета"	, ДанныеКС.Отчет.ДатаОкончания);
	ДанныеКС.Вставить("Ошибка"		, Истина);
	
	СформироватьТаблицыОтчета();
	СформироватьДанныеОтчета(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчетаПРП();
	СформироватьВременныеТаблицы();
	СформироватьДанныеОтчета2021(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	
	Если ДанныеКС.Ошибка Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	
	// проверки Раздела 2
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	
	// проверки Раздела 3
	ПроверкаКС_1_05_1();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19_1();
	ПроверкаКС_1_19_2();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	
	// проверки Дополнительные
	ПроверкаКС_1_22();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Доходы, выплаченные иностранным организациям");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2020Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	
	// проверки Раздела 2
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	
	// проверки Раздела 3
	ПроверкаКС_1_05_1();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19_1();
	ПроверкаКС_1_19_2();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	
	// проверки Дополнительные
	ПроверкаКС_1_22();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р32", "подраздела 3.2 Раздела 3");
	ПредставлениеРазделов.Вставить("Р33", "подраздела 3.3 Раздела 3");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р32", "Раздел32");
	РазделыПоказателей.Вставить("Р33", "Раздел33");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р32");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("Страница");
	МассивПолейИсключений.Добавить("П000100001003");
	МассивПолейИсключений.Добавить("П000310000103");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицыОтчета()
	
	ТипСтрока	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока5	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(5));
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ТипДата		= Новый ОписаниеТипов("Дата");
	ТипРО		= Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет");

	ТаблицаР01 = Новый ТаблицаЗначений;
	ТаблицаР01.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР01.Колонки.Добавить("НомСтраницы"	, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("НомСтроки"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("МесОтчета"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("П000100004003"	, ТипЧисло);

	ТаблицаР02 = Новый ТаблицаЗначений;
	ТаблицаР02.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР02.Колонки.Добавить("НомСтраницы"	, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("НомСтроки"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("МесОтчета"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("П000200001003"	, ТипСтрока5);
	ТаблицаР02.Колонки.Добавить("П000200002003"	, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("П000200003003"	, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("П000200004003"	, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("П000200005003"	, ТипЧисло);

	ТаблицаР32 = Новый ТаблицаЗначений;
	ТаблицаР32.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР32.Колонки.Добавить("НомСтраницы"	, ТипСтрока5);
	ТаблицаР32.Колонки.Добавить("НомСтроки"		, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("МесОтчета"		, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320002003"	, ТипСтрока5);
	ТаблицаР32.Колонки.Добавить("П000320004003"	, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320005003"	, ТипСтрока5);
	ТаблицаР32.Колонки.Добавить("П000320007003"	, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320009003"	, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320010003"	, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320012003"	, ТипЧисло);
	ТаблицаР32.Колонки.Добавить("П000320014003"	, ТипЧисло);
	
	ДанныеКС.Вставить("ТаблицаР01"				, ТаблицаР01);
	ДанныеКС.Вставить("ТаблицаР02"				, ТаблицаР02);
	ДанныеКС.Вставить("ТаблицаР32"				, ТаблицаР32);

КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета, ЭтоОтчетПРП = Ложь)
	
	СтруктураДанных = ОтчетСсылка.ДанныеОтчета.Получить();
	
	СлужебныеДанные = Новый Структура("Отчет,НомСтраницы, НомСтроки, МесОтчета, МассивСтраниц");
	ЗаполнитьЗначенияСвойств(СлужебныеДанные, СтруктураОтчета);
	СлужебныеДанные.НомСтраницы = 1;
	СлужебныеДанные.МассивСтраниц = Новый Массив(2);
	
	Если СтруктураДанных.Свойство("ДанныеМногоуровневыхРазделов") Тогда
		
		Разделы = СтруктураДанных.ДанныеМногоуровневыхРазделов;
		
		ПолучитьДанныеРаздела(Разделы.Раздел2	, СлужебныеДанные, ДанныеКС.ТаблицаР02);
				
		Если ЭтоОтчетПРП Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеКС.Вставить("НомКорректировки", 
			СтруктураДанных.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.НомерКорректировки);
		
		ПолучитьДанныеРаздела(Разделы.Раздел1	, СлужебныеДанные, ДанныеКС.ТаблицаР01);
		ПолучитьДанныеРаздела(Разделы.Раздел31	, СлужебныеДанные, ДанныеКС.ТаблицаР32);
		СтруктураОтчета.Вставить("Ошибка"		, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчетаПРП()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, ДанныеКС.ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Отчет,
	|	ДокументРО.Вид КАК Вид,
	|	МЕСЯЦ(ДокументРО.ДатаОкончания) КАК МесОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетДоходыИностраннымОрганизациям""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) < &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесОтчета УБЫВ,
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СформироватьДанныеОтчета(Выборка.Отчет, Выборка, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеРаздела(ДанныеОтчета, СлужебныеДанные, Таблица);
	
	КолвоСтрок = ДанныеОтчета.Строки.Количество();
	Для Счетчик = 1 По КолвоСтрок Цикл
	
		СлужебныеДанные.МассивСтраниц.Установить(0, Счетчик);
		Элемент = ДанныеОтчета.Строки[Счетчик - 1];
		ПолучитьДанныеЭлемента(Элемент, СлужебныеДанные, Таблица);
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЭлемента(ДанныеОтчета, СлужебныеДанные, Таблица, Знач Уровень = 0);
	
	Уровень = Уровень + 1;
	СтрокаСоздана = Ложь;
	
	Если НЕ ДанныеОтчета.Данные = Неопределено И НЕ ДанныеОтчета.Данные.Количество() = 0 Тогда
		Для каждого Колонка Из Таблица.Колонки Цикл
			Если ДанныеОтчета.Данные.Свойство(Колонка.Имя) Тогда
				
				Если НЕ СтрокаСоздана Тогда
					НоваяСтрока = Таблица.Добавить();
					СтрокаСоздана = Истина;
				КонецЕсли;
				
				НоваяСтрока[Колонка.Имя] = ДанныеОтчета.Данные[Колонка.Имя];
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СлужебныеДанные);
				
				Если Уровень = 3 Тогда
					НоваяСтрока.НомСтраницы = СтрСоединить(СлужебныеДанные.МассивСтраниц, ",,");
				КонецЕсли; 
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ДанныеОтчета.ДанныеМногострочныхЧастей = Неопределено 
		И НЕ ДанныеОтчета.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
		Для каждого ТабличнаяЧасть Из ДанныеОтчета.ДанныеМногострочныхЧастей Цикл
			НомСтроки = 1;
			Для каждого Элемент Из ТабличнаяЧасть.Значение.Строки Цикл
				
				СлужебныеДанные.НомСтроки = НомСтроки;
				ПолучитьДанныеЭлемента(Элемент, СлужебныеДанные, Таблица, Уровень);
				НомСтроки = НомСтроки + 1;
			
			КонецЦикла;
			СлужебныеДанные.НомСтроки = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ДанныеОтчета.Строки.Количество() = 0 Тогда
		КолвоСтрок = ДанныеОтчета.Строки.Количество();
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			Если Уровень > 2 Тогда
				Возврат;
			КонецЕсли; 
			
			Если Уровень = 2 Тогда
				СлужебныеДанные.МассивСтраниц.Установить(1, Счетчик);
			КонецЕсли;
			
			Элемент = ДанныеОтчета.Строки[Счетчик - 1];
			ПолучитьДанныеЭлемента(Элемент, СлужебныеДанные, Таблица, Уровень);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВременныеТаблицы()
	
	ВременныеТаблицы	= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса		= Новый СхемаЗапроса;
	
	ИменаТаблиц			= Новый Структура;
	ИменаТаблиц.Вставить("ТаблицаР01"	, "Т_Р01");
	ИменаТаблиц.Вставить("ТаблицаР02"	, "Т_Р02");
	ИменаТаблиц.Вставить("ТаблицаР32"	, "Т_Р32");
	
	// Формирование временных таблиц с данными разделов
	Для каждого Таблица Из ИменаТаблиц Цикл
		
		Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
		Оператор	= Пакет.Операторы[0];
		ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&" + Таблица.Значение);
		Пакет.ТаблицаДляПомещения = "В" + Таблица.Значение;
		
		Для каждого Колонка Из ДанныеКС[Таблица.Ключ].Колонки Цикл
			ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
			Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		КонецЦикла;
		
	КонецЦикла;
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.УстановитьПараметр("Т_Р01"		, ДанныеКС.ТаблицаР01);
	Запрос.УстановитьПараметр("Т_Р02"		, ДанныеКС.ТаблицаР02);
	Запрос.УстановитьПараметр("Т_Р32"		, ДанныеКС.ТаблицаР32);
	
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("ВременныеТаблицы"	, ВременныеТаблицы);
	
КонецПроцедуры

// данные для доп КС 2021

&НаСервере
Процедура СформироватьДанныеОтчета2021(ОтчетСсылка, СтруктураОтчета)
	
	СтруктураДанных = СохраненныеДанныеОтчета();
	
	Если СтруктураДанных.Свойство("ДанныеМногоуровневыхРазделов") Тогда
	
		Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
			
			ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
				
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
					Новый Структура("Наименование, Уровень", Раздел.Ключ, 1));
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			
			ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ПоказателиОтчета") Тогда
	
		Для каждого Раздел Из СтруктураДанных.ПоказателиОтчета Цикл
			
			КлючРаздела = Сред(Раздел.Ключ, 24);
			ДанныеКС.Вставить("КолвоСтраниц" + КлючРаздела, 1);
			ДанныеКС.Вставить(КлючРаздела, ОбщегоНазначения.СкопироватьРекурсивно(Раздел.Значение));
			ДанныеКС[КлючРаздела].Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеКС[КлючРаздела]));
			
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКС.Вставить("Раздел1", ДанныеКС.Раздел1[0]);
	ДанныеКС.Вставить("Раздел2", ДанныеКС.Раздел2[0]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел)
									
	Если НЕ СтруктураИсточник.Данные = Неопределено Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли; 
									
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ, 
					МнЧасть.Значение.Строки.Количество());
				Если НЕ СтрокаМнЧасти.Данные = Неопределено Тогда
					Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
						СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + "_" + XMLСтрока(НомерСтроки), 
							ПоказательСтроки.Значение);
					КонецЦикла;
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
									
	Если ТипЗнч(СтруктураИсточник) = Тип("СтрокаДереваЗначений") И НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		Если ВходящийРаздел.Уровень = 1 ИЛИ ВходящийРаздел.Уровень = 3 Тогда
			Для каждого СтраницаПодраздела Из СтруктураИсточник.Строки Цикл
				
				ПолучитьДанныеСтраницы(СтруктураПриемник, СтраницаПодраздела, 
					Новый Структура("Наименование, Уровень", ВходящийРаздел.Наименование, ВходящийРаздел.Уровень + 1));
				
			КонецЦикла;
		Иначе
			КлючПриложения = ВходящийРаздел.Наименование + ВходящийРаздел.Уровень;
			СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, СтруктураИсточник.Строки.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаПодраздела Из СтруктураИсточник.Строки Цикл
		
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + ",," +
					XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПодраздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПодраздела, 
					Новый Структура("Наименование, Уровень", КлючПриложения, ВходящийРаздел.Уровень + 1));
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		ПодстрокаСтроки			= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы			= Сред(Элемент.Значение, 13,1);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.ИмяПоказателя];
		
		Показатель.Отчет	= Источник.Отчет;
		Показатель.Страница = Источник.НомСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат()
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураРеквизитовФормы.КС_АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассив(ИсходнаяСтрока, Разделитель = ",", СтрокуВЧисло = Ложь)
	
	Результат = СтрРазделить(ИсходнаяСтрока, Разделитель, Истина);
	
	Если СтрокуВЧисло Тогда
		
		ВсегоЭлементов = Результат.Количество();
		Для Счетчик = 1 По ВсегоЭлементов Цикл
		
			Результат.Установить(Счетчик - 1, Число(Результат[Счетчик - 1]));
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// сервис для доп КС 2021

&НаСервере
Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено
			ИЛИ СтрНайти(Элемент.Ключ, "П00") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "Колво") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "МнЧасть") = 0
			Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2, 4 ст.287 НК РФ';
													|en = 'п.2, 4 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1 равна сумме всех ';
														|en = 'Сумма налога к уплате в стр.040 Раздела 1 равна сумме всех '") +
		НСтр("ru = 'стр. 140 пдр.3.2 Раздела 3 при условии представления первичного отчета (номер корректировки = 0)';
			|en = 'стр. 140 пдр.3.2 Раздела 3 при условии представления первичного отчета (номер корректировки = 0)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С040"		, "П000100004003_");
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел01.Отчет КАК Отчет,
	|	Раздел01.НомСтраницы КАК НомСтраницы,
	|	Раздел01.НомСтроки КАК НомСтроки,
	|	Раздел01.П000100004003 КАК П000100004003_
	|ИЗ
	|	ВТ_Р01 КАК Раздел01
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320014003 КАК П000320014003
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтраницы";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР01 = Результат[0].Выбрать();
	ВыборкаР32 = Результат[1].Выбрать();
	
	ЗарегистрироватьФормулу(Настройки);
	
	Пока ВыборкаР01.Следующий() Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С040, ВыборкаР01);
	КонецЦикла;
	
	Пока ВыборкаР32.Следующий() Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С140, ВыборкаР32);
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ДанныеКС.НомКорректировки = 0 И НЕ Показатели.Р01С040.Итог = Показатели.Р32С140.Итог;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С040.Итог, Показатели.Р32С140.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2, 4 ст.287 НК РФ';
													|en = 'п.2, 4 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1 равна сумме ';
														|en = 'Сумма налога к уплате в стр.040 Раздела 1 равна сумме '") +
		НСтр("ru = 'всех стр.040, 050 Раздела 2 ';
			|en = 'всех стр.040, 050 Раздела 2 '"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С040"		, "П000100004003_");
	ИменаПоказателей.Вставить("Р02С040"		, "П000200004003_");
	ИменаПоказателей.Вставить("Р02С050"		, "П000200005003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МесОтчета", ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел01.Отчет КАК Отчет,
	|	Раздел01.НомСтраницы КАК НомСтраницы,
	|	Раздел01.НомСтроки КАК НомСтроки,
	|	Раздел01.П000100004003 КАК П000100004003_
	|ИЗ
	|	ВТ_Р01 КАК Раздел01
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел02.Отчет КАК Отчет,
	|	Раздел02.НомСтраницы КАК НомСтраницы,
	|	Раздел02.НомСтроки КАК НомСтроки,
	|	Раздел02.П000200004003 КАК П000200004003_,
	|	Раздел02.П000200005003 КАК П000200005003_
	|ИЗ
	|	ВТ_Р02 КАК Раздел02
	|ГДЕ
	|	Раздел02.МесОтчета = &МесОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР01 = Результат[0].Выбрать();
	ВыборкаР02 = Результат[1].Выбрать();
	
	ЗарегистрироватьФормулу(Настройки);
	
	Пока ВыборкаР01.Следующий() Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С040, ВыборкаР01);
	КонецЦикла;
	
	Пока ВыборкаР02.Следующий() Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С040, ВыборкаР02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С050, ВыборкаР02);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Р02С040.Итог + Показатели.Р02С050.Итог;
	Настройки.ЭтоОшибка = НЕ Показатели.Р01С040.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С040.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_1_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.3';
													|en = '1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога с начала периода в стр.020 Раздела 2 ';
														|en = 'Сумма налога с начала периода в стр.020 Раздела 2 '") +
		НСтр("ru = 'равна сумме стр.030, 040, 050 Раздела 2 по каждому коду дохода в стр.010 Раздела 2';
			|en = 'равна сумме стр.030, 040, 050 Раздела 2 по каждому коду дохода в стр.010 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду дохода %3';
													|en = '%1 = %2 по коду дохода %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000200001003_");
	ИменаПоказателей.Вставить("Р02С020"		, "П000200002003_");
	ИменаПоказателей.Вставить("Р02С030"		, "П000200003003_");
	ИменаПоказателей.Вставить("Р02С040"		, "П000200004003_");
	ИменаПоказателей.Вставить("Р02С050"		, "П000200005003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МесОтчета", ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел02.Отчет КАК Отчет,
	|	Раздел02.НомСтраницы КАК НомСтраницы,
	|	Раздел02.НомСтроки КАК НомСтроки,
	|	Раздел02.П000200001003 КАК П000200001003_,
	|	Раздел02.П000200002003 КАК П000200002003_,
	|	Раздел02.П000200003003 КАК П000200003003_,
	|	Раздел02.П000200004003 КАК П000200004003_,
	|	Раздел02.П000200005003 КАК П000200005003_
	|ИЗ
	|	ВТ_Р02 КАК Раздел02
	|ГДЕ
	|	Раздел02.МесОтчета = &МесОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтроки";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьПоказатель(Показатели.Р02С010, Выборка);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С020, Выборка);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С030, Выборка);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С040, Выборка);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С050, Выборка);
		
		РасчетнаяСумма = Показатели.Р02С030.Значение + Показатели.Р02С040.Значение + Показатели.Р02С050.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С020.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С020.Значение, РасчетнаяСумма, Показатели.Р02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4';
													|en = '1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.289 НК РФ';
													|en = 'п.1 ст.289 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма уплаченного налога в стр.030 Раздела 2 равна ';
														|en = 'Сумма уплаченного налога в стр.030 Раздела 2 равна '") +
		НСтр("ru = 'стр. 020 Раздела 2 отчета предыдущего отчетного периода по соответствующему коду дохода';
			|en = 'стр. 020 Раздела 2 отчета предыдущего отчетного периода по соответствующему коду дохода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду дохода %3';
													|en = '%1 = %2 по коду дохода %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000200001003_");
	ИменаПоказателей.Вставить("Р02С030"		, "П000200003003_");
	ИменаПоказателей.Вставить("Р02С010П"	, "П000200001003_");
	ИменаПоказателей.Вставить("Р02С020П"	, "П000200002003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МесОтчета", ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел02.Отчет КАК Отчет,
	|	Раздел02.НомСтраницы КАК НомСтраницы,
	|	Раздел02.НомСтроки КАК НомСтроки,
	|	Раздел02.П000200001003 КАК П000200001003_,
	|	Раздел02.П000200003003 КАК П000200003003_
	|ИЗ
	|	ВТ_Р02 КАК Раздел02
	|ГДЕ
	|	Раздел02.МесОтчета = &МесОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000200001003_,
	|	НомСтроки
	|ИТОГИ
	|	СУММА(П000200003003_)
	|ПО
	|	П000200001003_
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел02.Отчет КАК Отчет,
	|	Раздел02.НомСтраницы КАК НомСтраницы,
	|	Раздел02.НомСтроки КАК НомСтроки,
	|	Раздел02.П000200001003 КАК П000200001003_,
	|	Раздел02.П000200002003 КАК П000200002003_
	|ИЗ
	|	ВТ_Р02 КАК Раздел02
	|ГДЕ
	|	Раздел02.МесОтчета < &МесОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000200001003_,
	|	НомСтроки
	|ИТОГИ
	|	СУММА(П000200002003_)
	|ПО
	|	П000200001003_";
	
	Результат	= Запрос.ВыполнитьПакет();
	ВыборкаР02	= Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР02П	= Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПРПНайдены = НЕ Результат[1].Пустой();
	
	Пока ВыборкаР02.Следующий() Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		
		Выборка = ВыборкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьПоказатель(Показатели.Р02С010, Выборка);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С030, Выборка);
		
		КонецЦикла; 
		
		Если ВыборкаР02П.НайтиСледующий(ВыборкаР02.П000200001003_, "П000200001003_") Тогда
			
			Выборка = ВыборкаР02П.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С020П, Выборка);
			
			КонецЦикла; 
		КонецЕсли;
	
		Настройки.ЭтоОшибка = ДанныеПРПНайдены И НЕ Показатели.Р02С030.Итог = Показатели.Р02С020П.Итог;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С030.Итог, Показатели.Р02С020П.Итог, Показатели.Р02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
		ВыборкаР02П.Сбросить();
		Показатели.Р02С030.Итог		= 0;
		Показатели.Р02С020П.Итог	= 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5';
													|en = '1.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2, 4 ст.287 НК РФ';
													|en = 'п.2, 4 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.040, 050 Раздела 2 равна сумме всех ';
														|en = 'Сумма налога в стр.040, 050 Раздела 2 равна сумме всех '") +
		НСтр("ru = 'стр. 140 пдр.3.2 Раздела 3 по соответствующему коду дохода, при условии представления первичного ';
			|en = 'стр. 140 пдр.3.2 Раздела 3 по соответствующему коду дохода, при условии представления первичного '") +
		НСтр("ru = 'отчета (номер корректировки = 0)';
			|en = 'отчета (номер корректировки = 0)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду дохода %3';
													|en = '%1 = %2 по коду дохода %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000200001003_");
	ИменаПоказателей.Вставить("Р02С040"		, "П000200004003_");
	ИменаПоказателей.Вставить("Р02С050"		, "П000200005003_");
	ИменаПоказателей.Вставить("Р32С020"		, "П000320002003");
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МесОтчета", ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел02.Отчет КАК Отчет,
	|	Раздел02.НомСтраницы КАК НомСтраницы,
	|	Раздел02.НомСтроки КАК НомСтроки,
	|	Раздел02.П000200001003 КАК П000200001003_,
	|	Раздел02.П000200004003 КАК П000200004003_,
	|	Раздел02.П000200005003 КАК П000200005003_
	|ИЗ
	|	ВТ_Р02 КАК Раздел02
	|ГДЕ
	|	Раздел02.МесОтчета = &МесОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000200001003_,
	|	НомСтроки
	|ИТОГИ ПО
	|	П000200001003_
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320002003 КАК П000320002003,
	|	Раздел32.П000320014003 КАК П000320014003
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000320002003,
	|	НомСтраницы
	|ИТОГИ ПО
	|	П000320002003";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР32 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР02.Следующий() Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		
		Выборка = ВыборкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьПоказатель(Показатели.Р02С010, Выборка);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С040, Выборка);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С050, Выборка);
		
		КонецЦикла; 
		
		Если ВыборкаР32.НайтиСледующий(ВыборкаР02.П000200001003_, "П000320002003") Тогда
			
			Выборка = ВыборкаР32.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С140, Выборка);
			
			КонецЦикла; 
		КонецЕсли;
		
		РасчетнаяСуммаР02 = Показатели.Р02С040.Итог + Показатели.Р02С050.Итог;
		Настройки.ЭтоОшибка = ДанныеКС.НомКорректировки = 0 И НЕ РасчетнаяСуммаР02 = Показатели.Р32С140.Итог;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			РасчетнаяСуммаР02, Показатели.Р32С140.Итог, Показатели.Р02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР32.Сбросить();
		Показатели.Р02С040.Итог = 0;
		Показатели.Р02С050.Итог = 0;
		Показатели.Р32С140.Итог = 0;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_1_05_1()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.1';
													|en = '1.5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма дохода в стр.040 пдр.3.2 Раздела 3 должна быть больше 0';
														|en = 'Сумма дохода в стр.040 пдр.3.2 Раздела 3 должна быть больше 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0';
													|en = '%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма дохода';
														|en = 'Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С040"		, "П000320004003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Показатели.Р32С040.Округление = Показатели.Р32С050.Значение = "643";
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С040, Раздел32);
			
			Настройки.ЭтоОшибка = Раздел32.РазделЗаполнен И НЕ Показатели.Р32С040.Значение > 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р32С040.Значение); 
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6';
													|en = '1.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Утратило силу. Письмо ФНС от 17.09.2021г. № СД-4-3/13310@';
													|en = 'Утратило силу. Письмо ФНС от 17.09.2021г. № СД-4-3/13310@'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.100 пдр.3.2 Раздела 3 равна стр.040 ';
														|en = 'Сумма налога в стр.100 пдр.3.2 Раздела 3 равна стр.040 '") +
		НСтр("ru = 'х стр.070 пдр.3.2 Раздела 3 / 100 при условии, что ставка налога в стр.070 пдр.3.2 Раздела 3 ';
			|en = 'х стр.070 пдр.3.2 Раздела 3 / 100 при условии, что ставка налога в стр.070 пдр.3.2 Раздела 3 '") +
		НСтр("ru = '> 0 и не равна 99,99, код дохода в стр.020 пдр.3.2 Раздела 3 равен 01 - 13, 15, 18 - 23, ';
			|en = '> 0 и не равна 99,99, код дохода в стр.020 пдр.3.2 Раздела 3 равен 01 - 13, 15, 18 - 23, '") +
		НСтр("ru = '26 - 28 и стр.090 пдр.3.2 Раздела 3 не больше 0';
			|en = '26 - 28 и стр.090 пдр.3.2 Раздела 3 не больше 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 * %3 / 100 Итог [%4] по коду дохода %5';
													|en = '%1 = %2 * %3 / 100 Итог [%4] по коду дохода %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7';
													|en = '1.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в рублях в стр.140 пдр.3.2 Раздела 3 равна ';
														|en = 'Сумма налога в рублях в стр.140 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = 'стр.100 пдр.3.2 Раздела 3 при условии, что код валюты в стр.050 пдр.3.2 Раздела 3 равен ""643""';
			|en = 'стр.100 пдр.3.2 Раздела 3 при условии, что код валюты в стр.050 пдр.3.2 Раздела 3 равен ""643""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду валюты %3';
													|en = '%1 = %2 по коду валюты %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320005003 КАК П000320005003,
	|	Раздел32.П000320010003 КАК П000320010003,
	|	Раздел32.П000320014003 КАК П000320014003
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
		
		УсловиеВыполнено = Показатели.Р32С050.ЗначениеСтр = "643";
		Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р32С140.Значение = Показатели.Р32С100.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р32С140.Значение, Показатели.Р32С100.Значение, Показатели.Р32С050.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.8';
													|en = '1.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в рублях в стр.140 пдр.3.2 Раздела 3 равна ';
														|en = 'Сумма налога в рублях в стр.140 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = 'стр.100 х стр.120 пдр.3.2 Раздела 3 при условии, что стр.100, 120 пдр.3.2 Раздела 3 > 0';
			|en = 'стр.100 х стр.120 пдр.3.2 Раздела 3 при условии, что стр.100, 120 пдр.3.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С120"		, "П000320012003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р32С100.Округление = Ложь;
	Показатели.Р32С120.Округление = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320010003 КАК П000320010003,
	|	Раздел32.П000320012003 КАК П000320012003,
	|	Раздел32.П000320014003 КАК П000320014003,
	|	Раздел32.П000320010003 * Раздел32.П000320012003 КАК РасчетнаяСумма
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
		
		УсловиеВыполнено = ЗначениеЗаполнено(Выборка.П000320010003) И ЗначениеЗаполнено(Выборка.П000320012003);
		Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р32С140.Значение = Окр(Выборка.РасчетнаяСумма);
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р32С140.Значение, Показатели.Р32С100.Значение, Показатели.Р32С120.Значение, Окр(Выборка.РасчетнаяСумма));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9';
													|en = '1.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 15%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 15%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '15% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 01, 02';
			|en = '15% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 01, 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 15 по коду дохода %2';
													|en = '%1 = 15 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("01,02"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("15",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10';
													|en = '1.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 15%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 15%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '15% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 03 - 05';
			|en = '15% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 03 - 05'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 15 по коду дохода %2';
													|en = '%1 = 15 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("03,04,05"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("15",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.11';
													|en = '1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 30%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 30%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '30% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 06 - 08';
			|en = '30% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 06 - 08'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 30 по коду дохода %2';
													|en = '%1 = 30 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("06,07,08"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("30",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.12';
													|en = '1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 20%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 20%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 09, 11, 12, 26 - 28';
			|en = '20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 09, 11, 12, 26 - 28'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 20 по коду дохода %2';
													|en = '%1 = 20 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("09,11,12,26,27,28"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("20",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.13';
													|en = '1.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 20%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 20%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 13, 18';
			|en = '20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 13, 18'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 20 по коду дохода %2';
													|en = '%1 = 20 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("13,18"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("20",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.14';
													|en = '1.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 <> 10% или 20%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 <> 10% или 20%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '10% или 20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 19, 20, 21';
			|en = '10% или 20% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 19, 20, 21'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 10 или 20 по коду дохода %2';
													|en = '%1 = 10 или 20 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("19,20,21"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("10,20",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.15';
													|en = '1.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Если стр.070 < 10%, то возможно необоснованное применение пониженной ставки налога ';
			|en = 'Если стр.070 < 10%, то возможно необоснованное применение пониженной ставки налога '") +
		НСтр("ru = 'или положений международного договора.';
			|en = 'или положений международного договора.'") + Символы.ПС +
		НСтр("ru = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения';
			|en = 'Если стр.070 = 0 или 99.99%, то возможно необоснованное освобождение от налогообложения'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.310 НК РФ';
													|en = 'ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна ';
														|en = 'Ставка налога в стр.070 пдр.3.2 Раздела 3 равна '") +
		НСтр("ru = '10% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 22';
			|en = '10% при условии, что код дохода в стр.020 пдр.3.2 Раздела 3 равен 22'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 10 по коду дохода %2';
													|en = '%1 = 10 по коду дохода %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("МассивКодов"		, РазложитьСтрокуВМассив("22"));
	Настройки.Вставить("МассивСтавок"		, РазложитьСтрокуВМассив("10",,Истина));
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С020"		, "П000320002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С070.Округление = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320002003 КАК П000320002003,
	|	Раздел32.П000320007003 КАК П000320007003
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
		
		УсловиеВыполнено = НЕ Настройки.МассивКодов.Найти(Выборка.П000320002003) = Неопределено;
		Настройки.ЭтоОшибка = УсловиеВыполнено И ЗначениеЗаполнено(Выборка.П000320007003) 
			И Настройки.МассивСтавок.Найти(Выборка.П000320007003) = Неопределено;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р32С070.Значение, Показатели.Р32С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.16';
													|en = '1.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.310 НК РФ';
													|en = 'п.1 ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.100 пдр.3.2 Раздела 3 равна стр.040 ';
														|en = 'Сумма налога в стр.100 пдр.3.2 Раздела 3 равна стр.040 '") +
		НСтр("ru = 'х стр.070 пдр.3.2 Раздела 3 / 100 при условии, что ставка налога в стр.070 пдр.3.2 Раздела 3 ';
			|en = 'х стр.070 пдр.3.2 Раздела 3 / 100 при условии, что ставка налога в стр.070 пдр.3.2 Раздела 3 '") +
		НСтр("ru = '> 0 и не равна 99,99, код дохода в стр.020 пдр.3.2 Раздела 3 равен 01 - 13, 15, 18 - 23, ';
			|en = '> 0 и не равна 99,99, код дохода в стр.020 пдр.3.2 Раздела 3 равен 01 - 13, 15, 18 - 23, '") +
		НСтр("ru = '26 - 28 и стр.090 пдр.3.2 Раздела 3 не больше 0';
			|en = '26 - 28 и стр.090 пдр.3.2 Раздела 3 не больше 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 * %3 / 100 Итог [%4] по коду дохода %5';
													|en = '%1 = %2 * %3 / 100 Итог [%4] по коду дохода %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С040"		, "П000320004003");
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С020"		, "П000320002003");
	ИменаПоказателей.Вставить("Р32С090"		, "П000320009003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р32С070.Округление = Ложь;
	МассивКодов = РазложитьСтрокуВМассив("01,02,03,04,05,06,07,08,09,10,11,12,13,15,18,19,20,21,22,23,26,27,28");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел32.Отчет КАК Отчет,
	|	Раздел32.НомСтраницы КАК НомСтраницы,
	|	Раздел32.П000320002003 КАК П000320002003,
	|	Раздел32.П000320004003 КАК П000320004003,
	|	Раздел32.П000320005003 КАК П000320005003,
	|	Раздел32.П000320007003 КАК П000320007003,
	|	Раздел32.П000320009003 КАК П000320009003,
	|	Раздел32.П000320010003 КАК П000320010003
	|ИЗ
	|	ВТ_Р32 КАК Раздел32
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтраницы";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Показатели.Р32С040.Округление = Выборка.П000320005003 = "643";
		Показатели.Р32С100.Округление = Выборка.П000320005003 = "643";
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
		
		УсловиеВыполнено = Выборка.П000320007003 > 0 И НЕ Выборка.П000320007003 = 99.99 
			И НЕ МассивКодов.Найти(Выборка.П000320002003) = Неопределено И НЕ Выборка.П000320009003 > 0;
			
		РазрядностьСуммы = ?(Выборка.П000320005003 = "643", 0, 2);
		РасчетнаяСумма = Окр(Показатели.Р32С040.Значение * Показатели.Р32С070.Значение / 100, РазрядностьСуммы);
			
		Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р32С100.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р32С100.Значение, Показатели.Р32С040.Значение, Показатели.Р32С070.Значение, РасчетнаяСумма, 
			Показатели.Р32С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_1()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.1';
													|en = '1.17.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.140 пдр.3.2 Раздела 3 не равна стр.100 ';
														|en = 'Сумма налога в стр.140 пдр.3.2 Раздела 3 не равна стр.100 '") +
		НСтр("ru = 'пдр.3.2 Раздела 3, если стр.050 пдр.3.2 Раздела 3 не равна 643 и ';
			|en = 'пдр.3.2 Раздела 3, если стр.050 пдр.3.2 Раздела 3 не равна 643 и '") +
		НСтр("ru = 'ставка налога в стр.070 пдр.3.2 Раздела 3 > 0 и не равна 99,99';
			|en = 'ставка налога в стр.070 пдр.3.2 Раздела 3 > 0 и не равна 99,99'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 не равно %2, когда %3 не равно 643 и %4 не равно 0 или 99,99';
			|en = '%1 не равно %2, когда %3 не равно 643 и %4 не равно 0 или 99,99'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С070.Округление = Ложь;
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Показатели.Р32С100.Округление = Показатели.Р32С050.Значение = "643";
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел32);
			
			УсловиеВыполнено = ЗначениеЗаполнено(Показатели.Р32С050.Значение) И НЕ Показатели.Р32С050.Значение = "643"
				И НЕ (Показатели.Р32С070.Значение = 0 ИЛИ Показатели.Р32С070.Значение = 99.99);
			Настройки.ЭтоОшибка = УсловиеВыполнено И Показатели.Р32С140.Значение = Показатели.Р32С100.Значение; 
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р32С140.Значение, Показатели.Р32С100.Значение, Показатели.Р32С050.ЗначениеСтр, 
				Показатели.Р32С070.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_2()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.2';
													|en = '1.17.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.140 пдр.3.2 Раздела 3 не равна стр.040 ';
														|en = 'Сумма налога в стр.140 пдр.3.2 Раздела 3 не равна стр.040 '") +
		НСтр("ru = 'пдр.3.2 Раздела 3 х стр.070 пдр.3.2 Раздела 3 / 100, если стр.050 пдр.3.2 Раздела 3 не равна 643 ';
			|en = 'пдр.3.2 Раздела 3 х стр.070 пдр.3.2 Раздела 3 / 100, если стр.050 пдр.3.2 Раздела 3 не равна 643 '") +
		НСтр("ru = 'и ставка налога в стр.070 пдр.3.2 Раздела 3 > 0 и не равна 99,99';
			|en = 'и ставка налога в стр.070 пдр.3.2 Раздела 3 > 0 и не равна 99,99'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 не равно %2 х %3 / 100 Итог [%4], когда %5 не равно 643 и %3 не равно 0 или 99,99';
			|en = '%1 не равно %2 х %3 / 100 Итог [%4], когда %5 не равно 643 и %3 не равно 0 или 99,99'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	ИменаПоказателей.Вставить("Р32С040"		, "П000320004003");
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С070.Округление = Ложь;
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Округление = Показатели.Р32С050.Значение = "643";
			Показатели.Р32С040.Округление = Округление;
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел32);
	
			УсловиеВыполнено = ЗначениеЗаполнено(Показатели.Р32С050.Значение) И НЕ Показатели.Р32С050.Значение = "643"
				И НЕ (Показатели.Р32С070.Значение = 0 ИЛИ Показатели.Р32С070.Значение = 99.99);
			РасчетнаяСумма = Окр(Показатели.Р32С040.Значение * Показатели.Р32С070.Значение / 100, ?(Округление, 0, 2));
			Настройки.ЭтоОшибка = УсловиеВыполнено И Показатели.Р32С140.Значение = РасчетнаяСумма; 
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р32С140.Значение, Показатели.Р32С040.Значение, Показатели.Р32С070.Значение, 
				РасчетнаяСумма, Показатели.Р32С050.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.18';
													|en = '1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.310 НК РФ';
													|en = 'п.1 ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 равна 0 или ';
														|en = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 равна 0 или '") +
		НСтр("ru = 'равна 99,99, то стр.080, 090, 100, 110, 120, 130, 140 пдр.3.2 Раздела 3 должны быть не заполнены';
			|en = 'равна 99,99, то стр.080, 090, 100, 110, 120, 130, 140 пдр.3.2 Раздела 3 должны быть не заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1, %2, %3, %4, %5, %6, %7 не заполнены, когда %8 = 0 или 99,99';
			|en = '%1, %2, %3, %4, %5, %6, %7 не заполнены, когда %8 = 0 или 99,99'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное заполнение стр.080 - 140';
														|en = 'Ошибочное заполнение стр.080 - 140'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С080"		, "П000320008003");
	ИменаПоказателей.Вставить("Р32С090"		, "П000320009003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С110"		, "П000320011003");
	ИменаПоказателей.Вставить("Р32С120"		, "П000320012003");
	ИменаПоказателей.Вставить("Р32С130"		, "П000320013003");
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С050.Расшифровывать = Ложь;
	Показатели.Р32С070.Округление = Ложь;
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Показатели.Р32С090.Округление = Показатели.Р32С050.Значение = "643";
			Показатели.Р32С100.Округление = Показатели.Р32С050.Значение = "643";
			Показатели.Р32С120.Округление = Показатели.Р32С050.Значение = "643";
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел32);
			
			Настройки.ЭтоОшибка = (Показатели.Р32С070.Значение = 0 ИЛИ Показатели.Р32С070.Значение = 99.99) И (
				ЗначениеЗаполнено(Показатели.Р32С080.Значение) ИЛИ ЗначениеЗаполнено(Показатели.Р32С090.Значение) ИЛИ 
				ЗначениеЗаполнено(Показатели.Р32С100.Значение) ИЛИ ЗначениеЗаполнено(Показатели.Р32С110.Значение) ИЛИ 
				ЗначениеЗаполнено(Показатели.Р32С120.Значение) ИЛИ ЗначениеЗаполнено(Показатели.Р32С130.Значение) ИЛИ 
				ЗначениеЗаполнено(Показатели.Р32С140.Значение));
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р32С080.ЗначениеСтр, Показатели.Р32С090.Значение, Показатели.Р32С100.Значение, 
				Показатели.Р32С110.ЗначениеСтр, Показатели.Р32С120.Значение, Показатели.Р32С130.ЗначениеСтр, 
				Показатели.Р32С140.Значение, Показатели.Р32С070.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19_1()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.19.1';
													|en = '1.19.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.310 НК РФ';
													|en = 'п.1 ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 не равна 0 или ';
														|en = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 не равна 0 или '") +
		НСтр("ru = '99,99, а стр.050 пдр.3.2 Раздела 3 = 643, то стр.080, 100, 110 пдр.3.2 Раздела 3 должны быть заполнены';
			|en = '99,99, а стр.050 пдр.3.2 Раздела 3 = 643, то стр.080, 100, 110 пдр.3.2 Раздела 3 должны быть заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1, %2, %3 заполнены, когда %4 не равно 0 или 99,99 и %5 = 643';
			|en = '%1, %2, %3 заполнены, когда %4 не равно 0 или 99,99 и %5 = 643'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочно не заполнены  стр.080, 100, 110';
														|en = 'Ошибочно не заполнены  стр.080, 100, 110'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	ИменаПоказателей.Вставить("Р32С080"		, "П000320008003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С110"		, "П000320011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С070.Округление = Ложь;
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Показатели.Р32С100.Округление = Показатели.Р32С050.Значение = "643";
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел32);
			
			Настройки.ЭтоОшибка = НЕ (Показатели.Р32С070.Значение = 0 ИЛИ Показатели.Р32С070.Значение = 99.99) 
				И Показатели.Р32С050.Значение = "643" И НЕ (
				ЗначениеЗаполнено(Показатели.Р32С080.Значение) И ЗначениеЗаполнено(Показатели.Р32С100.Значение) И 
				ЗначениеЗаполнено(Показатели.Р32С110.Значение));
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р32С080.ЗначениеСтр, Показатели.Р32С100.Значение, Показатели.Р32С110.ЗначениеСтр, 
				Показатели.Р32С070.Значение, Показатели.Р32С050.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19_2()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.19.2';
													|en = '1.19.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.310 НК РФ';
													|en = 'п.1 ст.310 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 не равна 0 или ';
														|en = 'Если ставка налога в стр.070 пдр.3.2 Раздела 3 не равна 0 или '") +
		НСтр("ru = '99,99, а стр.050 пдр.3.2 Раздела 3 не равна 643, то стр.080, 100, 110, 120, 130, 140 пдр.3.2 Раздела 3 ';
			|en = '99,99, а стр.050 пдр.3.2 Раздела 3 не равна 643, то стр.080, 100, 110, 120, 130, 140 пдр.3.2 Раздела 3 '") +
		НСтр("ru = 'должны быть заполнены';
			|en = 'должны быть заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1, %2, %3, %4, %5, %6 заполнены, когда %7 не равно 0 или 99,99 и %8 не равно 643';
			|en = '%1, %2, %3, %4, %5, %6 заполнены, когда %7 не равно 0 или 99,99 и %8 не равно 643'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочно не заполнены  стр.080, 100, 110, 120, 130, 140';
														|en = 'Ошибочно не заполнены  стр.080, 100, 110, 120, 130, 140'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С070"		, "П000320007003");
	ИменаПоказателей.Вставить("Р32С050"		, "П000320005003");
	ИменаПоказателей.Вставить("Р32С080"		, "П000320008003");
	ИменаПоказателей.Вставить("Р32С100"		, "П000320010003");
	ИменаПоказателей.Вставить("Р32С110"		, "П000320011003");
	ИменаПоказателей.Вставить("Р32С120"		, "П000320012003");
	ИменаПоказателей.Вставить("Р32С130"		, "П000320013003");
	ИменаПоказателей.Вставить("Р32С140"		, "П000320014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р32С070.Округление = Ложь;
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.Р32С050, Раздел32);
			Показатели.Р32С100.Округление = Показатели.Р32С050.Значение = "643";
			Показатели.Р32С120.Округление = Показатели.Р32С050.Значение = "643";
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Раздел32);
			
			Настройки.ЭтоОшибка = НЕ (Показатели.Р32С070.Значение = 0 ИЛИ Показатели.Р32С070.Значение = 99.99) 
				И НЕ Показатели.Р32С050.Значение = "643" И НЕ (
				ЗначениеЗаполнено(Показатели.Р32С080.Значение) И ЗначениеЗаполнено(Показатели.Р32С100.Значение) И 
				ЗначениеЗаполнено(Показатели.Р32С110.Значение) И ЗначениеЗаполнено(Показатели.Р32С120.Значение) И
				ЗначениеЗаполнено(Показатели.Р32С130.Значение) И ЗначениеЗаполнено(Показатели.Р32С140.Значение));
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р32С080.ЗначениеСтр, Показатели.Р32С100.Значение, Показатели.Р32С110.ЗначениеСтр,
				Показатели.Р32С120.Значение, Показатели.Р32С130.ЗначениеСтр, Показатели.Р32С140.Значение,
				Показатели.Р32С070.Значение, Показатели.Р32С050.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.20';
													|en = '1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.312 НК РФ';
													|en = 'п.1 ст.312 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Если код фактического права на доход в стр.150 пдр.3.2 Раздела 3 ';
														|en = 'Если код фактического права на доход в стр.150 пдр.3.2 Раздела 3 '") +
		НСтр("ru = 'равен 02 или 03, то стр.080, 090 (или 120), или 150, 220 пдр.3.3 Раздела 3 должны быть заполнены';
			|en = 'равен 02 или 03, то стр.080, 090 (или 120), или 150, 220 пдр.3.3 Раздела 3 должны быть заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '(%1, (%2 или %3)) или (%4, %5) заполнены, когда %6 равно 02 или 03';
			|en = '(%1, (%2 или %3)) или (%4, %5) заполнены, когда %6 равно 02 или 03'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочно не заполнены  стр.080, 090, 120, 150, 220';
														|en = 'Ошибочно не заполнены  стр.080, 090, 120, 150, 220'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С150"		, "П000320015003");
	ИменаПоказателей.Вставить("Р33С080"		, "П000330008003");
	ИменаПоказателей.Вставить("Р33С090"		, "П000330009003");
	ИменаПоказателей.Вставить("Р33С120"		, "П000330012003");
	ИменаПоказателей.Вставить("Р33С150"		, "П000330015003");
	ИменаПоказателей.Вставить("Р33С220"		, "П000330022003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Раздел31 Из ДанныеКС.Раздел31 Цикл
		Для каждого Раздел32 Из Раздел31.Раздел312 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р32С150, Раздел32);
			
			Для каждого Раздел33 Из Раздел32.Раздел3124 Цикл
			
				ЗарегистрироватьФормулу(Настройки);
				
				РасшифроватьПоказатель(Показатели.Р32С150);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С080, Раздел33);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С090, Раздел33);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С120, Раздел33);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С150, Раздел33);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С220, Раздел33);
				
				УсловиеВыполнено = ЗначениеЗаполнено(Показатели.Р33С080.Значение) И (ЗначениеЗаполнено(Показатели.Р33С090.Значение)
					ИЛИ ЗначениеЗаполнено(Показатели.Р33С120.Значение))
					ИЛИ ЗначениеЗаполнено(Показатели.Р33С150.Значение) И ЗначениеЗаполнено(Показатели.Р33С220.Значение);
				Настройки.ЭтоОшибка = (Показатели.Р32С150.Значение = "02" ИЛИ Показатели.Р32С150.Значение = "03")
					И НЕ УсловиеВыполнено;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
					Показатели.Р33С080.ЗначениеСтр, Показатели.Р33С090.ЗначениеСтр, Показатели.Р33С120.ЗначениеСтр,
					Показатели.Р33С150.ЗначениеСтр, Показатели.Р33С220.ЗначениеСтр, Показатели.Р32С150.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
		
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.21';
													|en = '1.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'В случае представления корректировочного отчета, он должен ';
														|en = 'В случае представления корректировочного отчета, он должен '") +
		НСтр("ru = 'содержать Титульный лист, Раздел 1, Раздел 2, Раздел 3. При этом Раздел 3 заполняется только в ';
			|en = 'содержать Титульный лист, Раздел 1, Раздел 2, Раздел 3. При этом Раздел 3 заполняется только в '") +
		НСтр("ru = 'отношении тех налогоплательщиков, в отношении которых обнаружены факты неотражения или неполноты  ';
			|en = 'отношении тех налогоплательщиков, в отношении которых обнаружены факты неотражения или неполноты  '") +
		НСтр("ru = 'отражения сведений, а также ошибки, приводящие к занижение или завышению суммы налога на прибыль  ';
			|en = 'отражения сведений, а также ошибки, приводящие к занижение или завышению суммы налога на прибыль  '") +
		НСтр("ru = 'организаций';
			|en = 'организаций'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное заполнение Раздела 3';
														|en = 'Ошибочное заполнение Раздела 3'"));
	Настройки = ОбработатьНастройки(Заголовки);
		
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Дополнительные

&НаСервере
Процедура ПроверкаКС_1_22()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.22';
													|en = '1.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога к уплате в стр.040 >= 0';
														|en = 'Сумма налога к уплате в стр.040 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С040"		, "П000100004003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МесОтчета", ДанныеКС.МесОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел01.Отчет КАК Отчет,
	|	Раздел01.НомСтраницы КАК НомСтраницы,
	|	Раздел01.НомСтроки КАК НомСтроки,
	|	Раздел01.П000100004003 КАК П000100004003_
	|ИЗ
	|	ВТ_Р01 КАК Раздел01
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомСтроки";
	
	Результат = Запрос.Выполнить();
	ВыборкаР01 = Результат.Выбрать();
	
	
	Пока ВыборкаР01.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С040, ВыборкаР01);
		
		Настройки.ЭтоОшибка = Показатели.Р01С040.Значение < 0;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р01С040.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтотОбъект, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1"
		ИЛИ Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел31" Тогда
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница31 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел32" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
				Для каждого НайденнаяСтраница31 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела31 = НайденнаяСтраница31;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница32.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел33" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
				Для каждого НайденнаяСтраница31 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела31 = НайденнаяСтраница31;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница32 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница32.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				ТекСтраницаРаздела32 = НайденнаяСтраница32;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница33 Из ТекСтраницаРаздела32.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница33.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[4]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница33.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						НаимСтраницы = "Стр.";
						Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
							НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
						КонецЕсли;
						ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы
							+ ?(НаимСтраницы = "Стр.", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
									
									КолСтрокВДеревеДанныхПодчРаздела
										= Макс(ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Строки[ИндПодчРаздела].Строки.Количество(), 1);
									
									Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
										
										ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
										НаимСтраницы = "Стр.";
										Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
											НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
										КонецЕсли;
										ЭлементПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы
											+ ?(НаимСтраницы = "Стр.", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
										ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
										ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
										
										Если СтруктураПодчРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
											
											ИменаПодПодчиненныхРазделов = СтруктураПодчРаздела["ИменаПодчиненныхРазделов"];
											КолПодПодчРазделов = ИменаПодПодчиненныхРазделов.Количество();
											
											Для ИндПодПодчРаздела = 0 По КолПодПодчРазделов - 1 Цикл
												
												ИмяПодПодчРаздела = ИменаПодПодчиненныхРазделов[ИндПодПодчРаздела];
												СтруктураПодПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодПодчРаздела];
												
												Если СтруктураПодПодчРаздела.Свойство("Многостраничность") Тогда
													
													КолСтрокВДеревеДанныхПодПодчРаздела
														= Макс(ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Строки[ИндПодчРаздела].Строки[НомерСтраницыПодчРаздела - 1].Строки[ИндПодПодчРаздела].Строки.Количество(), 1);
													
													Для НомерСтраницыПодПодчРаздела = 1 По КолСтрокВДеревеДанныхПодПодчРаздела Цикл
														
														ЭлементПодПодчРаздел = ЭлементПодчРаздел.ПолучитьЭлементы().Добавить();
														НаимСтраницы = "Стр.";
														Если СтруктураПодПодчРаздела.Свойство("НаимСтраницы") Тогда
															НаимСтраницы = СтруктураПодПодчРаздела["НаимСтраницы"];
														КонецЕсли;
														ЭлементПодПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы
															+ ?(НаимСтраницы = "Стр.", "", ". Стр. ") + Формат(НомерСтраницыПодПодчРаздела, "ЧГ=");
														ЭлементПодПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодПодчРаздела;
														ЭлементПодПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодПодчРаздела;
														
													КонецЦикла;
													
												КонецЕсли;
												
											КонецЦикла;
											
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
				= "Добавить страницу ""Раздел 3.1""";
			ИначеЕсли Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел32" Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
				= "Добавить страницу ""Раздел 3.2""";
			ИначеЕсли Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел33" Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
				= "Добавить страницу ""Раздел 3.3""";
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) Экспорт 
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ СтруктураРеквизитовФормы.ВозможноВосстановитьДанныеРеглОтчета Тогда
		
		Если ЗначениеЗаполнено(
			СтруктураРеквизитовФормы.ТекстСообщенияВСлучаеНесовместимостиОтчетаСтарогоОбразца) Тогда
			
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
				ДействиеСОтч = "Копирование";
			Иначе
				ДействиеСОтч = "Открытие";
			КонецЕсли;
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1 %2 прервано';
				|en = '%1 %2 прервано'"), СтруктураРеквизитовФормы.ТекстСообщенияВСлучаеНесовместимостиОтчетаСтарогоОбразца,
				ДействиеСОтч));
			
		КонецЕсли;
		
		Модифицированность = Ложь;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтотОбъектИмя)
	Форма_Имя = СтрЗаменить(ЭтотОбъектИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
