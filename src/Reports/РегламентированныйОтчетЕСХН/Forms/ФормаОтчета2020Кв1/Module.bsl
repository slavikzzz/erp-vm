
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"	, 0);
	ДанныеКС.Вставить("КолНеОшибок"	, 0);
	ДанныеКС.Вставить("Результат"	, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"		, Истина);;
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок);
	ДанныеКС.Вставить("ДатаОтчета"	, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.ДатаОтчета));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.ДатаОтчета));
	
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета();
	СформироватьДанныеОтчетаПРП();

	// критические проверки НК РФ
	ПроверкаКС_15_1_1_к();
	ПроверкаКС_15_1_2_к();
	ПроверкаКС_15_1_3_к();
	ПроверкаКС_15_2_к();
	ПроверкаКС_15_3_к();

	// проверки
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_08_1();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	
	// проверки дополнительные
	ПроверкаКС_1_17();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "ЕСХН");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2020Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();

	// критические проверки НК РФ
	ПроверкаКС_15_1_1_к();
	ПроверкаКС_15_1_2_к();
	ПроверкаКС_15_1_3_к();
	ПроверкаКС_15_2_к();
	ПроверкаКС_15_3_к();

	// проверки
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_08_1();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	
	// проверки дополнительные
	ПроверкаКС_1_17();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "на Титульном листе");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р21", "Раздела 2.1");
	ПредставлениеРазделов.Вставить("Р03", "Раздела 3");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел12");
	РазделыПоказателей.Вставить("Р02", "Раздел12");
	РазделыПоказателей.Вставить("Р21", "Раздел21");
	РазделыПоказателей.Вставить("Р03", "Раздел3");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р21");
	ЦелочисленныеРазделы.Добавить("Р03");
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МногострочныеЧасти = Новый Соответствие;
	МногострочныеЧасти.Вставить("П000030000101", "П000030");
	ДанныеКС.Вставить("МногострочныеЧасти", МногострочныеЧасти);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			ПреобразоватьВЧисло = Ложь;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если ПреобразоватьВЧисло Тогда
					СоответствиеЗначений.Вставить(СтрокаВЧисло(СтрокаЗначения.Код), 1);
				Иначе
					СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
				КонецЕсли;
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
	ЗаменаНекорректныхСтрок = Новый Соответствие;
	ДанныеКС.Вставить("ЗаменаНекорректныхСтрок", ЗаменаНекорректныхСтрок);
	
	ЗаменаНекорректныхГраф = Новый Соответствие;
	ДанныеКС.Вставить("ЗаменаНекорректныхГраф", ЗаменаНекорректныхГраф);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета()
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	Для каждого РазделОтчета Из мДанныеОтчета Цикл
		
		КлючРаздела = Сред(РазделОтчета.Ключ, 24);
		РазделОтчетаКопия = ОбщегоНазначения.СкопироватьРекурсивно(РазделОтчета.Значение);
		ПересчетСтрокМногострочныхЧастей(РазделОтчетаКопия);
		ДанныеКС.Вставить(КлючРаздела, РазделОтчетаКопия);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчетаПРП()
	
	ОтчетПРП = Неопределено;
	Раздел21ПРП = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"			, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"			, ДанныеКС.ГодОтчета - 1);
	Запрос.УстановитьПараметр("КодНалоговогоОргана"	, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетЕСХН""
	|	И ДокументРО.Организация = &Организация
	|	И ДокументРО.КодНалоговогоОргана = &КодНалоговогоОргана
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтчетПРП = Выборка.Ссылка;
		ДанныеОтчета = ОтчетПРП.ДанныеОтчета.Получить();
		Раздел21ПРП = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел21;
	КонецЕсли;
	
	ДанныеКС.Вставить("ОтчетПРП"	, ОтчетПРП);
	ДанныеКС.Вставить("Раздел21ПРП"	, Раздел21ПРП);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСтрокМногострочныхЧастей(ДанныеСтраницы)

	Для каждого Элемент Из ДанныеКС.МногострочныеЧасти Цикл
		Если ДанныеСтраницы.Свойство(Элемент.Ключ + "_1") Тогда
			
			Счетчик = 1;
			Пока ДанныеСтраницы.Свойство(Элемент.Ключ + "_" + (Счетчик + 1)) Цикл
				Счетчик = Счетчик + 1
			КонецЦикла;
			
			ДанныеСтраницы.Вставить("КолвоСтрок" + Элемент.Значение, Счетчик);
		
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры // ПересчетСтрокМногострочныхЧастей()

#КонецОбласти

#Область Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		
		ПодстрокаСтроки 		= ДанныеКС.ЗаменаНекорректныхСтрок.Получить(Элемент.Значение);
		ПодстрокаСтроки			= ?(ПодстрокаСтроки = Неопределено, Сред(Элемент.Значение, 9, 3), ПодстрокаСтроки);
		
		ПодстрокаГрафы 			= ДанныеКС.ЗаменаНекорректныхГраф.Получить(Элемент.Значение);
		ПодстрокаГрафы			= ?(ПодстрокаГрафы = Неопределено, Сред(Элемент.Значение, 13,1), ПодстрокаГрафы);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет"			, ?(ПодстрокаДополнения = "П", ДанныеКС.ОтчетПРП, ДанныеКС.Отчет));
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.ИмяПоказателя];
		
		Показатель.Отчет	= Источник.Отчет;
		Показатель.Страница = Источник.НомСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, 
	Параметр4 = Неопределено)
	
	Если Параметр2 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1);
	
	ИначеЕсли Параметр3 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2);
	
	ИначеЕсли Параметр4 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3);
		
	Иначе
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);
	
	КонецЕсли;

КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат()
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураРеквизитовФормы.КС_АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СтрокаВЧисло(ИсходнаяСтрока)

	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходнаяСтрока);
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проверки

#Область КС_Проверки_Критические_НК_РФ

&НаСервере
Процедура ПроверкаКС_15_1_1_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15.1.1.к';
													|en = '15.1.1.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма авансового платежа в стр.002 Раздела 1 >= 0';
														|en = 'Сумма авансового платежа в стр.002 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма авансового платежа';
														|en = 'Возможно ошибочная сумма авансового платежа'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000203");
	
	ПроверкаКС_15_1_1_к_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_1_1_к_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Настройки.ЭтоОшибка = Показатели.Р01С001.Значение < 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_1_2_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15.1.2.к';
													|en = '15.1.2.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.004 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.004 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000403");
	
	ПроверкаКС_15_1_1_к_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_1_3_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15.1.3.к';
													|en = '15.1.3.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.005 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.005 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000503");
	
	ПроверкаКС_15_1_1_к_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_2_к()
	
	Перем Показатели;

	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15.2.к';
													|en = '15.2.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма авансового платежа в стр.002 Раздела 1 >= стр.005 Раздела 1';
														|en = 'Сумма авансового платежа в стр.002 Раздела 1 >= стр.005 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма авансового платежа';
														|en = 'Возможно ошибочная сумма авансового платежа'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001", "П000120000203");
	ИменаПоказателей.Вставить("Р01С002", "П000120000503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Настройки.ЭтоОшибка = Показатели.Р01С001.Значение < Показатели.Р01С002.Значение;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С001.Значение, Показатели.Р01С002.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_3_к()
	
	Перем Показатели;

	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15.3.к';
													|en = '15.3.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.050 Раздела 1 = стр.(002 + 004 - 005) Раздела 1';
			|en = 'Сумма налога в стр.050 Раздела 1 = стр.(002 + 004 - 005) Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 (%3 + %4 - %5)';
													|en = '%1 = %2 (%3 + %4 - %5)'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С001", "П000120005003");
	ИменаПоказателей.Вставить("Р01С001", "П000120000203");
	ИменаПоказателей.Вставить("Р01С002", "П000120000403");
	ИменаПоказателей.Вставить("Р01С003", "П000120000503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р01С001.Значение + Показатели.Р01С002.Значение - Показатели.Р01С003.Значение; 
	Настройки.ЭтоОшибка = НЕ Показатели.Р02С001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, 
		Показатели.Р02С001.Значение, РасчетнаяСумма, Показатели.Р01С001.Значение, Показатели.Р01С002.Значение,
		Показатели.Р01С003.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Основные

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.3 ст.346.9 НК РФ';
													|en = 'п.3 ст.346.9 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.004 Раздела 1 = стр.050 Раздела 2 - стр.002 Раздела 1, если ';
			|en = 'Сумма налога в стр.004 Раздела 1 = стр.050 Раздела 2 - стр.002 Раздела 1, если '") +
		НСтр("ru = 'результат вычисления > 0';
			|en = 'результат вычисления > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %4 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %4 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С004"		, "П000120000403");
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	ИменаПоказателей.Вставить("Р01С002"		, "П000120000203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р02С050.Значение - Показатели.Р01С002.Значение;
	УсловиеВыполнено = РасчетнаяСумма > 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С004.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С004.Значение,
		Показатели.Р02С050.Значение, Показатели.Р01С002.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.3 ст.346.9 НК РФ';
													|en = 'п.3 ст.346.9 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.004 Раздела 1 = 0, если стр.050 Раздела 2 <= стр.002 Раздела 1';
			|en = 'Сумма налога в стр.004 Раздела 1 = 0, если стр.050 Раздела 2 <= стр.002 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 <= %3';
													|en = '%1 = 0, когда %2 <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С004"		, "П000120000403");
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	ИменаПоказателей.Вставить("Р01С002"		, "П000120000203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р02С050.Значение - Показатели.Р01С002.Значение;
	УсловиеВыполнено = РасчетнаяСумма <= 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С004.Значение = 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С004.Значение,
		Показатели.Р02С050.Значение, Показатели.Р01С002.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.3';
													|en = '1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.3 ст.346.9 НК РФ';
													|en = 'п.3 ст.346.9 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.005 Раздела 1 = стр.002 Раздела 1 - стр.050 Раздела 2, если ';
			|en = 'Сумма налога в стр.005 Раздела 1 = стр.002 Раздела 1 - стр.050 Раздела 2, если '") +
		НСтр("ru = 'результат вычисления > 0';
			|en = 'результат вычисления > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %4 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %4 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С005"		, "П000120000503");
	ИменаПоказателей.Вставить("Р01С002"		, "П000120000203");
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р01С002.Значение - Показатели.Р02С050.Значение;
	УсловиеВыполнено = РасчетнаяСумма > 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С005.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С005.Значение,
		Показатели.Р01С002.Значение, Показатели.Р02С050.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4';
													|en = '1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.3 ст.346.9 НК РФ';
													|en = 'п.3 ст.346.9 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.005 Раздела 1 = 0, если стр.002 Раздела 1 <= стр.050 Раздела 2';
			|en = 'Сумма налога в стр.005 Раздела 1 = 0, если стр.002 Раздела 1 <= стр.050 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 <= %3';
													|en = '%1 = 0, когда %2 <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С005"		, "П000120000503");
	ИменаПоказателей.Вставить("Р01С002"		, "П000120000203");
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р01С002.Значение - Показатели.Р02С050.Значение;
	УсловиеВыполнено = РасчетнаяСумма <= 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С005.Значение = 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С005.Значение,
		Показатели.Р01С002.Значение, Показатели.Р02С050.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5';
													|en = '1.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.346.6 НК РФ';
													|en = 'п.1 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.030 Раздела 2 = стр.010 Раздела 2 - стр.020 Раздела 2, если ';
			|en = 'Сумма налоговой базы в стр.030 Раздела 2 = стр.010 Раздела 2 - стр.020 Раздела 2, если '") +
		НСтр("ru = 'результат вычисления > 0';
			|en = 'результат вычисления > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %4 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %4 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С030"		, "П000120003003");
	ИменаПоказателей.Вставить("Р02С010"		, "П000120001003");
	ИменаПоказателей.Вставить("Р02С020"		, "П000120002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р02С010.Значение - Показатели.Р02С020.Значение;
	УсловиеВыполнено = РасчетнаяСумма > 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р02С030.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С030.Значение,
		Показатели.Р02С010.Значение, Показатели.Р02С020.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6';
													|en = '1.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.346.6 НК РФ';
													|en = 'п.1 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.030 Раздела 2 = 0, если стр.010 Раздела 2 <= стр.020 Раздела 2';
			|en = 'Сумма налоговой базы в стр.030 Раздела 2 = 0, если стр.010 Раздела 2 <= стр.020 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 <= %3';
													|en = '%1 = 0, когда %2 <= %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С030"		, "П000120003003");
	ИменаПоказателей.Вставить("Р02С010"		, "П000120001003");
	ИменаПоказателей.Вставить("Р02С020"		, "П000120002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р02С010.Значение - Показатели.Р02С020.Значение;
	УсловиеВыполнено = РасчетнаяСумма <= 0;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р02С030.Значение = 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С030.Значение,
		Показатели.Р02С010.Значение, Показатели.Р02С020.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7';
													|en = '1.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.040 Раздела 2 <= стр.010 Раздела 2.1';
			|en = 'Сумма убытка в стр.040 Раздела 2 <= стр.010 Раздела 2.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С040"		, "П000120004003");
	ИменаПоказателей.Вставить("Р21С010"		, "П000210001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С040, ДанныеКС.Раздел12);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С010, ДанныеКС.Раздел21);
	
	Настройки.ЭтоОшибка = Показатели.Р02С040.Значение > Показатели.Р21С010.Значение;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С040.Значение,
		Показатели.Р21С010.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.8';
													|en = '1.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.040 Раздела 2 <= стр.030 Раздела 2';
			|en = 'Сумма убытка в стр.040 Раздела 2 <= стр.030 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С040"		, "П000120004003");
	ИменаПоказателей.Вставить("Р02С030"		, "П000120003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Настройки.ЭтоОшибка = Показатели.Р02С040.Значение > Показатели.Р02С030.Значение;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С040.Значение,
		Показатели.Р02С030.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_08_1()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.8.1';
													|en = '1.8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.346.8 НК РФ';
													|en = 'ст.346.8 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение налоговой ставки в стр.045 Раздела 2 должно быть больше или равно 0, и меньше или равно 6';
			|en = 'Значение налоговой ставки в стр.045 Раздела 2 должно быть больше или равно 0, и меньше или равно 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '0 <= %1 <= 6';
													|en = '0 <= %1 <= 6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение налоговой ставки';
														|en = 'Ошибочное значение налоговой ставки'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С045"		, "П000120004503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С045.Округление = Ложь;
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Настройки.ЭтоОшибка = Показатели.Р02С045.Значение < 0 ИЛИ  Показатели.Р02С045.Значение > 6;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С045.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9';
													|en = '1.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.346.8 НК РФ';
													|en = 'ст.346.8 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.050 Раздела 2 = (стр.030 - стр.040 Раздела 2) х стр.045 Раздела 2, если ';
			|en = 'Сумма налога в стр.050 Раздела 2 = (стр.030 - стр.040 Раздела 2) х стр.045 Раздела 2, если '") +
		НСтр("ru = 'стр.030 Раздела 2 > стр.040 Раздела 2';
			|en = 'стр.030 Раздела 2 > стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 - %3) х %4 / 100 Итог [%5], когда %2 > %3';
													|en = '%1 = (%2 - %3) х %4 / 100 Итог [%5], когда %2 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	ИменаПоказателей.Вставить("Р02С030"		, "П000120003003");
	ИменаПоказателей.Вставить("Р02С040"		, "П000120004003");
	ИменаПоказателей.Вставить("Р02С045"		, "П000120004503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С045.Округление = Ложь;
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Разность = Показатели.Р02С030.Значение - Показатели.Р02С040.Значение;
	РасчетнаяСумма = Окр(Разность * Показатели.Р02С045.Значение / 100);
	Настройки.ЭтоОшибка = Разность > 0 И НЕ Показатели.Р02С050.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02С050.Значение, Показатели.Р02С030.Значение, Показатели.Р02С040.Значение, 
		Показатели.Р02С045.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10';
													|en = '1.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.050 Раздела 2 = 0, если стр.030 Раздела 2 = стр.040 Раздела 2';
			|en = 'Сумма налога в стр.050 Раздела 2 = 0, если стр.030 Раздела 2 = стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 = %3';
													|en = '%1 = 0, когда %2 = %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С050"		, "П000120005003");
	ИменаПоказателей.Вставить("Р02С030"		, "П000120003003");
	ИменаПоказателей.Вставить("Р02С040"		, "П000120004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Разность = Показатели.Р02С030.Значение - Показатели.Р02С040.Значение;
	Настройки.ЭтоОшибка = Разность = 0 И НЕ Показатели.Р02С050.Значение = 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02С050.Значение, 
		Показатели.Р02С030.Значение, Показатели.Р02С040.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11()
	
	Перем ПоказателиОНП;
	Перем ПоказателиПНП;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.11';
													|en = '1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2.1';
														|en = 'Раздел 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.010 - 110 Раздела 2.1 за отчетный налоговый период = сумме убытка ';
			|en = 'Сумма убытка в стр.010 - 110 Раздела 2.1 за отчетный налоговый период = сумме убытка '") +
		НСтр("ru = 'в стр.130 - 230 Раздела 2.1 за предыдущий налоговый период';
			|en = 'в стр.130 - 230 Раздела 2.1 за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателейОНП = Новый Структура;
	ИменаПоказателейОНП.Вставить("Р21С010"		, "П000210001003");
	ИменаПоказателейОНП.Вставить("Р21С020"		, "П000210002003");
	ИменаПоказателейОНП.Вставить("Р21С030"		, "П000210003003");
	ИменаПоказателейОНП.Вставить("Р21С040"		, "П000210004003");
	ИменаПоказателейОНП.Вставить("Р21С050"		, "П000210005003");
	ИменаПоказателейОНП.Вставить("Р21С060"		, "П000210006003");
	ИменаПоказателейОНП.Вставить("Р21С070"		, "П000210007003");
	ИменаПоказателейОНП.Вставить("Р21С080"		, "П000210008003");
	ИменаПоказателейОНП.Вставить("Р21С090"		, "П000210009003");
	ИменаПоказателейОНП.Вставить("Р21С100"		, "П000210010003");
	ИменаПоказателейОНП.Вставить("Р21С110"		, "П000210011003");
	
	СформироватьПоказатели(ПоказателиОНП, ИменаПоказателейОНП);

	ИменаПоказателейПНП = Новый Структура;
	ИменаПоказателейПНП.Вставить("Р21С130П"		, "П000210013003");
	ИменаПоказателейПНП.Вставить("Р21С140П"		, "П000210014003");
	ИменаПоказателейПНП.Вставить("Р21С150П"		, "П000210015003");
	ИменаПоказателейПНП.Вставить("Р21С160П"		, "П000210016003");
	ИменаПоказателейПНП.Вставить("Р21С170П"		, "П000210017003");
	ИменаПоказателейПНП.Вставить("Р21С180П"		, "П000210018003");
	ИменаПоказателейПНП.Вставить("Р21С190П"		, "П000210019003");
	ИменаПоказателейПНП.Вставить("Р21С200П"		, "П000210020003");
	ИменаПоказателейПНП.Вставить("Р21С210П"		, "П000210021003");
	ИменаПоказателейПНП.Вставить("Р21С220П"		, "П000210022003");
	ИменаПоказателейПНП.Вставить("Р21С230П"		, "П000210023003");
	
	СформироватьПоказатели(ПоказателиПНП, ИменаПоказателейПНП);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиОНП, ДанныеКС.Раздел21);
	
	Если НЕ ДанныеКС.Раздел21ПРП = Неопределено Тогда
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиПНП, ДанныеКС.Раздел21ПРП);
	КонецЕсли;
	
	Настройки.ЭтоОшибка = НЕ ДанныеКС.ОтчетПРП = Неопределено 
		И НЕ ПоказателиОНП.Р21С010.Значение = ПоказателиПНП.Р21С130П.Значение;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, ПоказателиОНП.Р21С010.Значение, 
		?(ДанныеКС.Раздел21ПРП = Неопределено, "(...)", ПоказателиПНП.Р21С130П.Значение));
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.12';
													|en = '1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2.1';
														|en = 'Раздел 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.010 Раздела 2.1 = стр.020 + стр.030 + стр.040 + стр.050 + стр.060 + стр.070 + ';
			|en = 'Сумма убытка в стр.010 Раздела 2.1 = стр.020 + стр.030 + стр.040 + стр.050 + стр.060 + стр.070 + '") +
		НСтр("ru = 'стр.080 + стр.090 + стр.100 + стр.110 Раздела 2.1';
			|en = 'стр.080 + стр.090 + стр.100 + стр.110 Раздела 2.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С010"		, "П000210001003");
	ИменаПоказателей.Вставить("Р21С020"		, "П000210002003");
	ИменаПоказателей.Вставить("Р21С030"		, "П000210003003");
	ИменаПоказателей.Вставить("Р21С040"		, "П000210004003");
	ИменаПоказателей.Вставить("Р21С050"		, "П000210005003");
	ИменаПоказателей.Вставить("Р21С060"		, "П000210006003");
	ИменаПоказателей.Вставить("Р21С070"		, "П000210007003");
	ИменаПоказателей.Вставить("Р21С080"		, "П000210008003");
	ИменаПоказателей.Вставить("Р21С090"		, "П000210009003");
	ИменаПоказателей.Вставить("Р21С100"		, "П000210010003");
	ИменаПоказателей.Вставить("Р21С110"		, "П000210011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);

	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел21);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Р21С010.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р21С010.Значение = РасчетнаяСумма; 
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р21С010.Значение, 
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.13';
													|en = '1.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2.1';
														|en = 'Раздел 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.120 Раздела 2.1 = стр.020 Раздела 2 - стр.010 Раздела 2, если ';
			|en = 'Сумма убытка в стр.120 Раздела 2.1 = стр.020 Раздела 2 - стр.010 Раздела 2, если '") +
		НСтр("ru = 'стр.020 Раздела 2 > стр.010 Раздела 2';
			|en = 'стр.020 Раздела 2 > стр.010 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %2 > %3';
													|en = '%1 = %2 - %3 Итог [%4], когда %2 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С120"		, "П000210012003");
	ИменаПоказателей.Вставить("Р02С020"		, "П000120002003");
	ИменаПоказателей.Вставить("Р02С010"		, "П000120001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);

	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С120, ДанныеКС.Раздел21);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С020, ДанныеКС.Раздел12);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С010, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р02С020.Значение - Показатели.Р02С010.Значение;
	УсловиеВыполнено = Показатели.Р02С020.Значение > Показатели.Р02С010.Значение;
	Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р21С120.Значение = РасчетнаяСумма; 
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р21С120.Значение, 
		Показатели.Р02С020.Значение, Показатели.Р02С010.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.14';
													|en = '1.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2.1';
														|en = 'Раздел 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.130 Раздела 2.1 = стр.010 Раздела 2.1 - стр.040 Раздела 2 + ';
			|en = 'Сумма убытка в стр.130 Раздела 2.1 = стр.010 Раздела 2.1 - стр.040 Раздела 2 + '") +
		НСтр("ru = 'стр.120 Раздела 2.1';
			|en = 'стр.120 Раздела 2.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 + %4 Итог [%5]';
													|en = '%1 = %2 - %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С130"		, "П000210013003");
	ИменаПоказателей.Вставить("Р21С010"		, "П000210001003");
	ИменаПоказателей.Вставить("Р02С040"		, "П000120004003");
	ИменаПоказателей.Вставить("Р21С120"		, "П000210012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);

	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С130, ДанныеКС.Раздел21);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С010, ДанныеКС.Раздел21);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С040, ДанныеКС.Раздел12);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С120, ДанныеКС.Раздел21);
	
	РасчетнаяСумма = Показатели.Р21С010.Значение - Показатели.Р02С040.Значение + Показатели.Р21С120.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р21С130.Значение = РасчетнаяСумма; 
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р21С130.Значение, Показатели.Р21С010.Значение, Показатели.Р02С040.Значение, 
		Показатели.Р21С120.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.15';
													|en = '1.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2.1';
														|en = 'Раздел 2.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.5 ст.346.6 НК РФ';
													|en = 'п.5 ст.346.6 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.130 Раздела 2.1 = стр.140 + стр.150 + стр.160 + стр.170 + стр.180 + стр.190 + ';
			|en = 'Сумма убытка в стр.130 Раздела 2.1 = стр.140 + стр.150 + стр.160 + стр.170 + стр.180 + стр.190 + '") +
		НСтр("ru = 'стр.200 + стр.210 + стр.220 + стр.230 Раздела 2.1';
			|en = 'стр.200 + стр.210 + стр.220 + стр.230 Раздела 2.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С130"		, "П000210013003");
	ИменаПоказателей.Вставить("Р21С140"		, "П000210014003");
	ИменаПоказателей.Вставить("Р21С150"		, "П000210015003");
	ИменаПоказателей.Вставить("Р21С160"		, "П000210016003");
	ИменаПоказателей.Вставить("Р21С170"		, "П000210017003");
	ИменаПоказателей.Вставить("Р21С180"		, "П000210018003");
	ИменаПоказателей.Вставить("Р21С190"		, "П000210019003");
	ИменаПоказателей.Вставить("Р21С200"		, "П000210020003");
	ИменаПоказателей.Вставить("Р21С210"		, "П000210021003");
	ИменаПоказателей.Вставить("Р21С220"		, "П000210022003");
	ИменаПоказателей.Вставить("Р21С230"		, "П000210023003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел21);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Р21С130.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р21С130.Значение = РасчетнаяСумма; 
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р21С130.Значение, 
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.16';
													|en = '1.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма средств в гр.7 Раздела 3 = гр.3 - гр.4 - гр.6 Раздела 3';
			|en = 'Сумма средств в гр.7 Раздела 3 = гр.3 - гр.4 - гр.6 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма средств';
														|en = 'Ошибочная сумма средств'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03Г007"		, "П000030000107_");
	ИменаПоказателей.Вставить("Р03Г003"		, "П000030000103_");
	ИменаПоказателей.Вставить("Р03Г004"		, "П000030000104_");
	ИменаПоказателей.Вставить("Р03Г006"		, "П000030000106_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел3.КолвоСтрокП000030 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел3, Счетчик);
		
		РасчетнаяСумма = Показатели.Р03Г003.Значение - Показатели.Р03Г004.Значение - Показатели.Р03Г006.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.Р03Г007.Значение = РасчетнаяСумма; 
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03Г007.Значение, Показатели.Р03Г003.Значение, Показатели.Р03Г004.Значение, 
			Показатели.Р03Г006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17';
													|en = '1.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.005 Раздела 1 <= (стр.002 + стр.004) Раздела 1';
														|en = 'Сумма налога в стр.005 Раздела 1 <= (стр.002 + стр.004) Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= (%2 + %3) Итог [%4]';
													|en = '%1 <= (%2 + %3) Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С005"		, "П000120000503");
	ИменаПоказателей.Вставить("Р01С002"		, "П000120000203");
	ИменаПоказателей.Вставить("Р01С004"		, "П000120000403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	РасчетнаяСумма = Показатели.Р01С002.Значение + Показатели.Р01С004.Значение;
	Настройки.ЭтоОшибка = Показатели.Р01С005.Значение > РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С005.Значение, Показатели.Р01С002.Значение, Показатели.Р01С004.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.18';
													|en = '1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.002 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.002 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000203");
	ПроверкаКС_1_18_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001"		, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел12);
	
	Настройки.ЭтоОшибка = Показатели.Р01С001.Значение < 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.19';
													|en = '1.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.004 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.004 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000403");
	ПроверкаКС_1_18_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.20';
													|en = '1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.005 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.005 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000120000503");
	ПроверкаКС_1_18_код(Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел12  = Новый Структура;
	СтруктураДанныхРаздел21  = Новый Структура;
	СтруктураДанныхРаздел3   = Новый Структура;
	
	КолИсхСтрокИдГруппы = 1;
	КолКолонокИдГруппы  = 7;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, СтруктураРеквизитовФормы.мИдГруппы);
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, КолИсхСтрокИдГруппы);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, КолКолонокИдГруппы);
		
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела      = ИмяРаздела;
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мНеВызыватьРасчет = Ложь;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		
		СформироватьСпискиВыбора();
	
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения   = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки(ЭтаФорма);
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			ИсходныйГод    = Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
			НазначаемыйГод = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			НазначаемыйГод_Строка = Формат(НазначаемыйГод, "ЧГ=");
			
			Если ИсходныйГод <> НазначаемыйГод Тогда
				СтруктураДанныхТитульный.ОтчетГод = НазначаемыйГод_Строка;
				УдалитьНеактуальныеУбыткиРаздела21(НазначаемыйГод);
				ПолныйРасчетНаСервере();
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьПустыеСтруктурыДанных();
		СтруктураДанныхРаздел12.П000120004503 = 6;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеактуальныеУбыткиРаздела21(ОтчетныйГод)
	
	НижняяГраницаПериода = ОтчетныйГод - 10;
	ВерхняяГраницаПериода = ОтчетныйГод - 1;
	
	ОписаниеТиповЧисло4_0 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0));
	
	ТаблицаПереноса = Новый ТаблицаЗначений;
	ТаблицаПереноса.Колонки.Добавить("Год",   ОписаниеТиповЧисло4_0);
	ТаблицаПереноса.Колонки.Добавить("Сумма", СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
	
	Для Инд = 2 По 11 Цикл
		ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
		ГодУбытка = СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"];
		СуммаУбытка = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"]);
		
		Если ГодУбытка >= НижняяГраницаПериода И ГодУбытка <= ВерхняяГраницаПериода Тогда
			СтрокаПереноса = ТаблицаПереноса.Добавить();
			СтрокаПереноса.Год = ГодУбытка;
			СтрокаПереноса.Сумма = СуммаУбытка;
		КонецЕсли;
		
		СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"] = 0;
		СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"] = 0;
	КонецЦикла;
	
	ТаблицаПереноса.Сортировать("Год");
	
	Инд = 2;
	Для Каждого СтрокаПереноса Из ТаблицаПереноса Цикл
		ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
		СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"] = СтрокаПереноса.Год;
		СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"] = СтрокаПереноса.Сумма;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не СтруктураРеквизитовФормы.мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
								
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Разделы 1, 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2020Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода налогового периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["КодыПоМестуПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации, ликвидации", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030000101", 3, , "Выбор кода вида поступления", КоллекцияСписковВыбора["КодыВидовПоступления"]);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН = Лев(СтруктураДанныхТитульный.ИНН, СтрНайти(СтруктураДанныхТитульный.ИНН, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ?(ПоказателиТаблПоле["КПП1_" + Ном] = "-", "", ПоказателиТаблПоле["КПП1_" + Ном]);
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			СтруктураДанныхТитульный.Вставить("НалоговыйОрган");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.НалоговыйОрган = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ПоказателиТаблПоле["НалоговыйОрган" + Ном];
				СтруктураДанныхТитульный.Удалить("НалоговыйОрган1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ОГРНИП = СокрЛП(СтруктураДанныхТитульный.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРНИП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил1_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Список листов, выводимых на печать.
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Строка(НомерКорр);
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
Конецпроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// Определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам.
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	Если СокрЛП(ТабличныйДокумент.Области.Период.Значение) = "" Тогда
		КодОтчетногоПериода = "34";
		ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
	КонецЕсли;
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		Форма.ТабличныйДокумент.Области["ИНН"].Значение = СведенияОбОрганизации.ИННЮЛ;
		Форма.ТабличныйДокумент.Области["КПП"].Значение = СведенияОбОрганизации.КППЮЛ;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Форма.ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
		
		ПоМесту = "   ";
		Если СведенияОбОрганизации.ТипНП = 1 Тогда
			ПоМесту = "214";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			ПоМесту = "120";
		ИначеЕсли СведенияОбОрганизации.ТипНП = 5 Тогда
			ПоМесту = "331";
		КонецЕсли;
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			Если Сред(КПП, 5, 2) = "50"
				И РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
				
				ПоМесту = "213";
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.ПоМесту.Значение = ПоМесту;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		Форма.СтруктураДанныхРаздел12.Вставить("П000120000103", СокрЛП(СведенияОбОрганизации.ОКТМО));
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя                = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСведенияРаздела21()
	
	ТребуетсяСортировка = Ложь;
	
	ЕстьНезаполненныйГод = Ложь;
	МаксимальныйГод = -1;
	
	Для Инд = 2 По 11 Цикл
		ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			ГодУбытка = ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение;
		Иначе
			ГодУбытка = СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"];
		КонецЕсли;
		
		Если ГодУбытка <> 0 И ГодУбытка < МаксимальныйГод Тогда
			// Обнаружена строка с указанием года, нарушающим возрастающую последовательность.
			ТребуетсяСортировка = Истина;
			Прервать;
		КонецЕсли;
		
		МаксимальныйГод = Макс(МаксимальныйГод, ГодУбытка);
		
		Если ГодУбытка = 0 Тогда
			ЕстьНезаполненныйГод = Истина;
		Иначе
			Если ЕстьНезаполненныйГод Тогда
				// Обнаружена строка с незаполненным годом, предшествующая заполненному.
				ТребуетсяСортировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяСортировка Тогда
		
		СписокСортировки = Новый СписокЗначений;
		
		СуммыНезаполненныхЛет = Новый Массив;
		
		Для Инд = 2 По 11 Цикл
			ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				
				ГодУбытка = ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение;
				СуммаУбытка = ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "03"].Значение;
				
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение = 0;
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "03"].Значение = 0;
				
			Иначе
				
				ГодУбытка   = СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"];
				СуммаУбытка = СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"];
				
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"] = 0;
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"] = 0;
				
			КонецЕсли;
			
			Если ГодУбытка <> 0 Тогда
				СписокСортировки.Добавить(СуммаУбытка, СтрокаЧГ0(ГодУбытка));
			ИначеЕсли СуммаУбытка <> 0 Тогда
				СуммыНезаполненныхЛет.Добавить(СуммаУбытка);
			КонецЕсли;
		КонецЦикла;
		
		СписокСортировки.СортироватьПоПредставлению();
		
		Инд = 2;
		Для Каждого СтрокаУбытка Из СписокСортировки Цикл
			
			ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение = Число(СтрокаУбытка.Представление);
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "03"].Значение = СтрокаУбытка.Значение;
			Иначе
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"] = Число(СтрокаУбытка.Представление);
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"] = СтрокаУбытка.Значение;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЦикла;
		
		Для Каждого СуммаУбытка Из СуммыНезаполненныхЛет Цикл
			
			ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
			
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение = 0;
				ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "03"].Значение = СуммаУбытка;
			Иначе
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"] = 0;
				СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"] = СуммаУбытка;
			КонецЕсли;
			
			Инд = Инд + 1;
		КонецЦикла;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Произведена сортировка списка сумм убытков в строках 020-110 раздела 2.1';
								|en = 'Произведена сортировка списка сумм убытков в строках 020-110 раздела 2.1'");
		Сообщение.Сообщить();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СортироватьСведенияРаздела21();
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	ЗаполнитьПустыеСтруктурыДанных();
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	СписокСохранения = Новый Структура();
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяЯчейки = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли ИмяЯчейки = "П000120004603" ИЛИ ИмяЯчейки = "П000120004604" ИЛИ ИмяЯчейки = "П000120004605" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Парам = Новый Структура;
		Парам.Вставить("НомерСтатьи",    СокрЛП(ТабличныйДокумент.Области["П000120004603"].Значение));
		Парам.Вставить("ПунктСтатьи",    СокрЛП(ТабличныйДокумент.Области["П000120004604"].Значение));
		Парам.Вставить("ПодпунктСтатьи", СокрЛП(ТабличныйДокумент.Области["П000120004605"].Значение));
		
		ФормаВвода = ПолучитьФорму("Отчет.РегламентированныйОтчетЕСХН.Форма.ФормаВводаСтатьиЗаконаСубъектаРФ", Парам);
		
		ФормаВвода.ОписаниеОповещенияОЗакрытии
		= Новый ОписаниеОповещения("ОткрытьФормуВводаСтатьиЗаконаСубъектаРФЗавершение", ЭтотОбъект);
		ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВвода.Открыть();
		
	КонецЕсли;
	
	// Выбор года убытка.
	СписокСписокПоказателейЛет
	= "П000210002001,П000210003001,П000210004001,П000210005001,П000210006001,П000210007001,П000210008001,П000210009001,П000210010001,П000210011001";
	МассивИменПоказателейЛет = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокСписокПоказателейЛет);
	Если МассивИменПоказателейЛет.Найти(ИмяЯчейки) <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		СписокЛет = Новый СписокЗначений;
		
		ВерхняяГраница = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1;
		НижняяГраница = ВерхняяГраница - 9;
		Для ГодУбытка = НижняяГраница По ВерхняяГраница Цикл
			СписокЛет.Добавить(ГодУбытка);
		КонецЦикла;
		
		Для Каждого ИмяПоказателяГода Из МассивИменПоказателейЛет Цикл
			ГодУбытка = ТабличныйДокумент.Области[ИмяПоказателяГода].Значение;
			Если ЗначениеЗаполнено(ГодУбытка) Тогда
				НайденныйЭлемент = СписокЛет.НайтиПоЗначению(ГодУбытка);
				Если НайденныйЭлемент <> Неопределено Тогда
					СписокЛет.Удалить(НайденныйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеОбласти = Область.Значение;
		Если ЗначениеЗаполнено(ЗначениеОбласти) Тогда
			СписокЛет.Добавить(ЗначениеОбласти);
		КонецЕсли;
		
		СписокЛет.СортироватьПоЗначению();
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(0, "Пустое значение");
		
		Для Каждого СтрокаГода Из СписокЛет Цикл
			СписокВыбора.Добавить(СтрокаГода.Значение, Формат(СтрокаГода.Значение, "ЧН=; ЧГ=0"));
		КонецЦикла;
		
		ТекЭлементСписка = СписокВыбора.НайтиПоЗначению(Область.Значение);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораГодаУбытка", ЭтаФорма, Область);
		СписокВыбора.ПоказатьВыборЭлемента(Оповещение, "Выбор года убытка", ТекЭлементСписка);
		
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяЯчейки));
	
	Если ПараметрВводаПоля.Количество() = 0 Тогда
		
		ПараметрВводаПоля = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(ИмяЯчейки, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе,
		ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГодаУбытка(ВыбЭлемент, ТекОбласть) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		
		ВыбЗначение = ?(ВыбЭлемент.Значение = "Пустое значение", 0, СокрЛП(ВыбЭлемент.Значение));
		ТекОбласть.Значение = ВыбЗначение;
		
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(ТабличныйДокумент, ТекОбласть);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
								|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области.КПП.Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСтатьиЗаконаСубъектаРФЗавершение(Результат, ДопПараметр) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТабличныйДокумент.Области["П000120004603"].Значение = Результат.НомерСтатьи;
		ТабличныйДокумент.Области["П000120004604"].Значение = Результат.ПунктСтатьи;
		ТабличныйДокумент.Области["П000120004605"].Значение = Результат.ПодпунктСтатьи;
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120000403", "П000120005003;П000120000203;П000120003003;П000120004003;П000120004503;П000120001003;П000120002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120000503", "П000120000203;П000120005003;П000120003003;П000120004003;П000120004503;П000120001003;П000120002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120003003", "П000120001003;П000120002003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000120005003", "П000120003003;П000120004003;П000120004503;П000120001003;П000120002003");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Или (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел12" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120003003, ОбластьИмя) > 0 Тогда
				
				ОкрП000120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120001003.Значение);
				ОкрП000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120002003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000120003003.Значение = Макс(ОкрП000120001003 - ОкрП000120002003, 0);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120005003, ОбластьИмя) > 0 Тогда
				
				ОкрП000120003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120003003.Значение);
				ОкрП000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120004003.Значение);
				
				Форма.ТабличныйДокумент.Области.П000120005003.Значение
				= Макс((ОкрП000120003003 - ОкрП000120004003) * Форма.ТабличныйДокумент.Области.П000120004503.Значение / 100, 0);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120000403, ОбластьИмя) > 0
												  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120000503, ОбластьИмя) > 0 Тогда
				
				ОкрП000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120005003.Значение);
				ОкрП000120000203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000120000203.Значение);
				
				Форма.ТабличныйДокумент.Области.П000120000403.Значение = Макс(ОкрП000120005003 - ОкрП000120000203, 0);
				Форма.ТабличныйДокумент.Области.П000120000503.Значение = Макс(ОкрП000120000203 - ОкрП000120005003, 0);
				
			КонецЕсли;
			
			Форма.СтруктураДанныхРаздел12.Вставить("П000120001003", ОкрП000120001003);
			Форма.СтруктураДанныхРаздел12.Вставить("П000120002003", ОкрП000120002003);
			Форма.СтруктураДанныхРаздел12.Вставить("П000120003003", ОкрП000120003003);
			Форма.СтруктураДанныхРаздел12.Вставить("П000120004003", ОкрП000120004003);
			Форма.СтруктураДанныхРаздел12.Вставить("П000120005003", ОкрП000120005003);
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120003003, ОбластьИмя) > 0 Тогда
				
				ОкрП000120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120001003);
				ОкрП000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
				
				Форма.СтруктураДанныхРаздел12.П000120003003 = Макс(ОкрП000120001003 - ОкрП000120002003, 0);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120005003, ОбластьИмя) > 0 Тогда
				
				ОкрП000120003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120003003);
				ОкрП000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
				
				Форма.СтруктураДанныхРаздел12.П000120005003
				= Макс((ОкрП000120003003 - ОкрП000120004003) * Форма.СтруктураДанныхРаздел12.П000120004503 / 100, 0);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120000403, ОбластьИмя) > 0
												  ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000120000503, ОбластьИмя) > 0 Тогда
				
				ОкрП000120005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120005003);
				ОкрП000120000203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120000203);
				
				Форма.СтруктураДанныхРаздел12.П000120000403 = Макс(ОкрП000120005003 - ОкрП000120000203, 0);
				Форма.СтруктураДанныхРаздел12.П000120000503 = Макс(ОкрП000120000203 - ОкрП000120005003, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Расчет(Форма, "Раздел21");
		
		ИзменитьФорматПоказателей(Форма);
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			
			ОкрП000210002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210002003.Значение);
			ОкрП000210003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210003003.Значение);
			ОкрП000210004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210004003.Значение);
			ОкрП000210005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210005003.Значение);
			ОкрП000210006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210006003.Значение);
			ОкрП000210007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210007003.Значение);
			ОкрП000210008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210008003.Значение);
			ОкрП000210009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210009003.Значение);
			ОкрП000210010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210010003.Значение);
			ОкрП000210011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210011003.Значение);
			
			Форма.ТабличныйДокумент.Области.П000210001003.Значение = ОкрП000210002003 + ОкрП000210003003 
			+ ОкрП000210004003 + ОкрП000210005003
			+ ОкрП000210006003 + ОкрП000210007003
			+ ОкрП000210008003 + ОкрП000210009003
			+ ОкрП000210010003 + ОкрП000210011003;
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120001003") Тогда
				ОкрП000120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120001003);
			Иначе
				ОкрП000120001003 = 0;
			КонецЕсли;
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120002003") Тогда
				ОкрП000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Иначе
				ОкрП000120002003 = 0;
			КонецЕсли;
			
			Форма.ТабличныйДокумент.Области.П000210012003.Значение = Макс(ОкрП000120002003 - ОкрП000120001003, 0);
			ОкрП000210012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210012003.Значение);
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120004003") Тогда
				ОкрП000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Иначе
				ОкрП000120004003 = 0;
			КонецЕсли;
			
			Для Индекс = 14 По 23 Цикл
				Форма.ТабличныйДокумент.Область("П0002100" + Индекс + "001").Значение = 0;
				Форма.ТабличныйДокумент.Область("П0002100" + Индекс + "003").Значение = 0;
			КонецЦикла;
			
			// Заполнение нижней части данными верхней.
			
			СписокПереноса = Новый СписокЗначений;
			
			ЗаполненаСтрока040Раздел2 = ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел12.П000120004003);
			ЗаполненаСтрока010 = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000210001003.Значение);
			ЗаполненаСтрока120 = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000210012003.Значение);
			
			ОтчетныйГод = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ЗаполненаСтрока010 Тогда
				НижняяГраницаПериода = ?(ЗаполненаСтрока040Раздел2, ОтчетныйГод - 10, ОтчетныйГод - 9);
				Для Инд = 2 По 11 Цикл
					ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
					ГодУбытка = Форма.ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "01"].Значение;
					СуммаУбытка = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области[ОсновнаяЧастьИмени + "03"].Значение);
					Если ГодУбытка >= НижняяГраницаПериода Тогда
						СписокПереноса.Добавить(СуммаУбытка, Формат(ГодУбытка, "ЧГ=0"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СписокПереноса.СортироватьПоПредставлению();
			
			ОтчетныйГод = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Остаток = ОкрП000120004003;
			
			// Уменьшение остатка.
			ОстатокОтСуммыПоИндексу = 0;
			ПорядковыйНомерВерхнейСтроки = 0;
			Если Остаток > 0 Тогда
				Для Каждого СтрокаПереноса Из СписокПереноса Цикл
					ГодПоИндексу = СтрокаПереноса.Представление;
					ГодПоИндексу = ?(ПустаяСтрока(ГодПоИндексу), 0, Число(ГодПоИндексу));
					СуммаПоИндексу = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаПереноса.Значение);
					Если ГодПоИндексу <> 0 Тогда
						Если Остаток > СуммаПоИндексу Тогда
							Остаток = Остаток - СуммаПоИндексу;
						Иначе
							Если Остаток = СуммаПоИндексу Тогда
								ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;	
							Иначе
								Если ГодПоИндексу > ОтчетныйГод - 10 Тогда
									ОстатокОтСуммыПоИндексу = СуммаПоИндексу - Остаток;
								КонецЕсли; 
							КонецЕсли;
							Остаток = 0;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
				КонецЦикла;
			КонецЕсли;
			
			ПорядковыйНомерНижнейСтроки = 0;
			Для Индекс = 14 По 23 Цикл
				ИндексВерхний = ПорядковыйНомерВерхнейСтроки;
				
				Если ИндексВерхний > СписокПереноса.Количество() - 1 Тогда
					// Заполнение завершено.
					Прервать;
				КонецЕсли;
				
				// Год и сумма из верхней части.
				ГодПоИндексу = СписокПереноса[ИндексВерхний].Представление;
				ГодПоИндексу = ?(ПустаяСтрока(ГодПоИндексу), 0, Число(ГодПоИндексу));
				СуммаПоИндексу = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СписокПереноса[ИндексВерхний].Значение);
				Если (СуммаПоИндексу > 0) И (ГодПоИндексу > ОтчетныйГод - 10) Тогда
					Если ОстатокОтСуммыПоИндексу > 0 Тогда
						СуммаПоИндексу = ОстатокОтСуммыПоИндексу;
						ОстатокОтСуммыПоИндексу = 0;
					КонецЕсли;
					Форма.ТабличныйДокумент.Область("П000210" + Формат(14 + ПорядковыйНомерНижнейСтроки, "ЧЦ=3; ЧВН=") + "001").Значение = ГодПоИндексу;
					Форма.ТабличныйДокумент.Область("П000210" + Формат(14 + ПорядковыйНомерНижнейСтроки, "ЧЦ=3; ЧВН=") + "003").Значение = СуммаПоИндексу;
				Иначе
					ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
					Продолжить;
				КонецЕсли;
				ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
				ПорядковыйНомерНижнейСтроки = ПорядковыйНомерНижнейСтроки + 1;
			КонецЦикла;
			
			Если ОкрП000210012003 > 0 Тогда
				ИндексНижний = 14 + ПорядковыйНомерНижнейСтроки;
				Форма.ТабличныйДокумент.Область("П000210" + Формат(ИндексНижний, "ЧЦ=3; ЧВН=") + "001").Значение = ОтчетныйГод;
				Форма.ТабличныйДокумент.Область("П000210" + Формат(ИндексНижний, "ЧЦ=3; ЧВН=") + "003").Значение = ОкрП000210012003;
			КонецЕсли;
			
			ОкрП000210014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210014003.Значение);
			ОкрП000210015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210015003.Значение);
			ОкрП000210016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210016003.Значение);
			ОкрП000210017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210017003.Значение);
			ОкрП000210018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210018003.Значение);
			ОкрП000210019003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210019003.Значение);
			ОкрП000210020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210020003.Значение);
			ОкрП000210021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210021003.Значение);
			ОкрП000210022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210022003.Значение);
			ОкрП000210023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000210023003.Значение);
			
			Форма.ТабличныйДокумент.Области.П000210013003.Значение = ОкрП000210014003 + ОкрП000210015003 
			+ ОкрП000210016003 + ОкрП000210017003
			+ ОкрП000210018003 + ОкрП000210019003
			+ ОкрП000210020003 + ОкрП000210021003
			+ ОкрП000210022003 + ОкрП000210023003;
			
		Иначе
			
			ОкрП000210002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210002003);
			ОкрП000210003003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210003003);
			ОкрП000210004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210004003);
			ОкрП000210005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210005003);
			ОкрП000210006003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210006003);
			ОкрП000210007003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210007003);
			ОкрП000210008003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210008003);
			ОкрП000210009003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210009003);
			ОкрП000210010003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210010003);
			ОкрП000210011003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210011003);
			
			Форма.СтруктураДанныхРаздел21.П000210001003 = ОкрП000210002003 + ОкрП000210003003 
			+ ОкрП000210004003 + ОкрП000210005003
			+ ОкрП000210006003 + ОкрП000210007003
			+ ОкрП000210008003 + ОкрП000210009003
			+ ОкрП000210010003 + ОкрП000210011003;
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120001003") Тогда
				ОкрП000120001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120001003);
			Иначе
				ОкрП000120001003 = 0;
			КонецЕсли;
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120002003") Тогда
				ОкрП000120002003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120002003);
			Иначе
				ОкрП000120002003 = 0;
			КонецЕсли;
			
			Форма.СтруктураДанныхРаздел21.П000210012003 = Макс(ОкрП000120002003 - ОкрП000120001003, 0);
			ОкрП000210012003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210012003);
			
			Если Форма.СтруктураДанныхРаздел12.Свойство("П000120004003") Тогда
				ОкрП000120004003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел12.П000120004003);
			Иначе
				ОкрП000120004003 = 0;
			КонецЕсли;
			
			Для Индекс = 14 По 23 Цикл
				Форма.СтруктураДанныхРаздел21.Вставить("П0002100" + Индекс + "001", "");
				Форма.СтруктураДанныхРаздел21.Вставить("П0002100" + Индекс + "003", 0);
			КонецЦикла;
			
			// Заполнение нижней части данными верхней.
			
			СписокПереноса = Новый СписокЗначений;
			
			ЗаполненаСтрока040Раздел2 = ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел12.П000120004003);
			ЗаполненаСтрока010 = ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел21.П000210001003);
			ЗаполненаСтрока120 = ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел21.П000210012003);
			
			ОтчетныйГод = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ЗаполненаСтрока010 Тогда
				НижняяГраницаПериода = ?(ЗаполненаСтрока040Раздел2, ОтчетныйГод - 10, ОтчетныйГод - 9);
				Для Инд = 2 По 11 Цикл
					ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
					ГодУбытка = Форма.СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "01"];
					СуммаУбытка = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.СтруктураДанныхРаздел21[ОсновнаяЧастьИмени + "03"]);
					Если ГодУбытка >= НижняяГраницаПериода Тогда
						СписокПереноса.Добавить(СуммаУбытка, Формат(ГодУбытка, "ЧГ=0"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СписокПереноса.СортироватьПоПредставлению();
			
			ОтчетныйГод = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Остаток = ОкрП000120004003;
			
			// Уменьшение остатка.
			ОстатокОтСуммыПоИндексу = 0;
			ПорядковыйНомерВерхнейСтроки = 0;
			Если Остаток > 0 Тогда
				Для Каждого СтрокаПереноса Из СписокПереноса Цикл
					ГодПоИндексу = СтрокаПереноса.Представление;
					ГодПоИндексу = ?(ПустаяСтрока(ГодПоИндексу), 0, Число(ГодПоИндексу));
					СуммаПоИндексу = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаПереноса.Значение);
					Если ГодПоИндексу <> 0 Тогда
						Если Остаток > СуммаПоИндексу Тогда
							Остаток = Остаток - СуммаПоИндексу;
						Иначе
							Если Остаток = СуммаПоИндексу Тогда
								ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;	
							Иначе
								Если ГодПоИндексу > ОтчетныйГод - 10 Тогда
									ОстатокОтСуммыПоИндексу = СуммаПоИндексу - Остаток;
								КонецЕсли; 
							КонецЕсли;
							Остаток = 0;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
				КонецЦикла;
			КонецЕсли;
			
			ПорядковыйНомерНижнейСтроки = 0;
			Для Индекс = 14 По 23 Цикл
				ИндексВерхний = ПорядковыйНомерВерхнейСтроки;
				
				Если ИндексВерхний > СписокПереноса.Количество() - 1 Тогда
					// Заполнение завершено.
					Прервать;
				КонецЕсли;
				
				// Год и сумма из верхней части.
				ГодПоИндексу = СписокПереноса[ИндексВерхний].Представление;
				ГодПоИндексу = ?(ПустаяСтрока(ГодПоИндексу), 0, Число(ГодПоИндексу));
				СуммаПоИндексу = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СписокПереноса[ИндексВерхний].Значение);
				Если (СуммаПоИндексу > 0) И (ГодПоИндексу > ОтчетныйГод - 10) Тогда
					Если ОстатокОтСуммыПоИндексу > 0 Тогда
						СуммаПоИндексу = ОстатокОтСуммыПоИндексу;
						ОстатокОтСуммыПоИндексу = 0;
					КонецЕсли;
					Форма.СтруктураДанныхРаздел21.Вставить("П000210" + Формат(14 + ПорядковыйНомерНижнейСтроки, "ЧЦ=3; ЧВН=") + "001", ГодПоИндексу);
					Форма.СтруктураДанныхРаздел21.Вставить("П000210" + Формат(14 + ПорядковыйНомерНижнейСтроки, "ЧЦ=3; ЧВН=") + "003", СуммаПоИндексу);
				Иначе
					ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
					Продолжить;
				КонецЕсли;
				ПорядковыйНомерВерхнейСтроки = ПорядковыйНомерВерхнейСтроки + 1;
				ПорядковыйНомерНижнейСтроки = ПорядковыйНомерНижнейСтроки + 1;
			КонецЦикла;
			
			Если ОкрП000210012003 > 0 Тогда
				ИндексНижний = 14 + ПорядковыйНомерНижнейСтроки;
				Форма.СтруктураДанныхРаздел21.Вставить("П000210" + Формат(ИндексНижний, "ЧЦ=3; ЧВН=") + "001", Формат(ОтчетныйГод, "ЧГ="));
				Форма.СтруктураДанныхРаздел21.Вставить("П000210" + Формат(ИндексНижний, "ЧЦ=3; ЧВН=") + "003", ОкрП000210012003);
			КонецЕсли;
			
			ОкрП000210014003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210014003);
			ОкрП000210015003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210015003);
			ОкрП000210016003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210016003);
			ОкрП000210017003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210017003);
			ОкрП000210018003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210018003);
			ОкрП000210019003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210019003);
			ОкрП000210020003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210020003);
			ОкрП000210021003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210021003);
			ОкрП000210022003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210022003);
			ОкрП000210023003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхРаздел21.П000210023003);
			
			Форма.СтруктураДанныхРаздел21.Вставить("П000210013003", ОкрП000210014003 + ОкрП000210015003
																  + ОкрП000210016003 + ОкрП000210017003
																  + ОкрП000210018003 + ОкрП000210019003
																  + ОкрП000210020003 + ОкрП000210021003
																  + ОкрП000210022003 + ОкрП000210023003);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		// Расчет в графе 7 текущей строки многострочной части раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000107, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Расчет в текущей строке многострочной части табличного документа.
				НомСтроки = Сред(ОбластьИмя, 15);
				Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + НомСтроки].Значение);
				Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + НомСтроки].Значение);
				Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + НомСтроки].Значение);
				
				Форма.ТабличныйДокумент.Области["П000030000107_" + НомСтроки].Значение
					= Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
						
						// Расчет во всех строках многострочной части табличного документа.
						НомСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
						Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + НомСтроки].Значение);
						Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + НомСтроки].Значение);
						Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + НомСтроки].Значение);
						
						Форма.ТабличныйДокумент.Области["П000030000107_" + НомСтроки].Значение
							= Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
						
					Иначе
						
						// Расчет во всех записях, хранящихся в реквизите формы.
						Окр_П000030000103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000103);
						Окр_П000030000104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000104);
						Окр_П000030000106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000030000106);
						
						Зап.П000030000107 = Окр_П000030000103 - Окр_П000030000104 - Окр_П000030000106;
					
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет в графе 3 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000203, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка3 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000103_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000103);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000203.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000203", Колонка3);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 4 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000204, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка4 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000104_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000104);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000204.Значение = Колонка4;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000204", Колонка4);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 6 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000206, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка6 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000106_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000106);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000206.Значение = Колонка6;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000206", Колонка6);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 7 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030000207, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка7 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000030000107_" + Формат(Ном, "ЧГ=")].Значение);
				Иначе
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000030000107);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
				Форма.ТабличныйДокумент.Области.П000030000207.Значение = Колонка7;
			Иначе
				Форма.СтруктураДанныхРаздел3.Вставить("П000030000207", Колонка7);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел3",  "");
		Расчет(Форма, "Раздел12", "");
		Расчет(Форма, "Раздел21", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ИмяОбласти = Область.Имя;
	
	Если ИмяОбласти = "ДатаПодписи" Тогда
		Модифицированность = Истина;
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		ЗаполнитьДатуПодписи(ЭтаФорма);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли ИмяОбласти = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли ИмяОбласти = "П000120000103" ИЛИ ИмяОбласти = "П000120000303"
		И ЗначениеЗаполнено(Область.Значение) Тогда
		Область.Значение = СтрЗаменить(СокрЛП(Область.Значение), " ", "");
		ДлинаЗначения = СтрДлина(Область.Значение);
		Если НЕ ДлинаЗначения = 8 И НЕ ДлинаЗначения = 11 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код ОКТМО должен состоять из 8 или 11 цифр.';
									|en = 'Код ОКТМО должен состоять из 8 или 11 цифр.'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли Область.Имя = "П000120004503" Тогда
		Если Область.Значение < 0 ИЛИ Область.Значение > 6 Тогда
			ПоказатьПредупреждение(, НСтр(
			"ru = 'Ставка единого сельскохозяйственного налога может быть установлена в пределах от 0 до 6 процентов.';
			|en = 'Ставка единого сельскохозяйственного налога может быть установлена в пределах от 0 до 6 процентов.'"));
			Область.Значение = 6;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		Если ИмяОбласти = "П000210002001" ИЛИ ИмяОбласти = "П000210003001"
		 ИЛИ ИмяОбласти = "П000210004001" ИЛИ ИмяОбласти = "П000210005001"
		 ИЛИ ИмяОбласти = "П000210006001" ИЛИ ИмяОбласти = "П000210007001"
		 ИЛИ ИмяОбласти = "П000210008001" ИЛИ ИмяОбласти = "П000210009001"
		 ИЛИ ИмяОбласти = "П000210010001" ИЛИ ИмяОбласти = "П000210011001" Тогда
			
			// Проверка: за последние 10 лет.
			
			ВведенныйГод = Область.Значение;
			ВведенныйГод = ?(ПустаяСтрока(ВведенныйГод), 0, Число(ВведенныйГод));
			ОтчетныйГод  = Год(СтруктурареквизитовФормы.мДатаКонцаПериодаОтчета);
			
			МинГод  = ОтчетныйГод - 10;
			МаксГод = ОтчетныйГод - 1;
			
			Если ВведенныйГод <> 0 И (ВведенныйГод < МинГод ИЛИ ВведенныйГод > МаксГод) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Отмена ввода: разрешены к вводу года %1-%2';
				|en = 'Отмена ввода: разрешены к вводу года %1-%2'"), Формат(МинГод, "ЧГ="), Формат(МаксГод, "ЧГ="));
				Сообщение.Сообщить();
				Область.Значение = "";
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Длина значения показателя должна быть равна %1.';
			|en = 'Длина значения показателя должна быть равна %1.'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
			Модифицированность = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
	
	Если ИмяРаздела = "Раздел12" ИЛИ ИмяРаздела = "Раздел21" Тогда
		
		Раздел12Строка030 = 0;
		Раздел12Строка040 = 0;
		Раздел21Строка010 = 0;
		
		Если ИмяРаздела = "Раздел12" Тогда
			Раздел12Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ТабличныйДокумент.Области.П000120003003.Значение);
			Раздел12Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ТабличныйДокумент.Области.П000120004003.Значение);
			Раздел21Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтруктураДанныхРаздел21.П000210001003);
		ИначеЕсли ИмяРаздела = "Раздел21" Тогда
			Раздел12Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтруктураДанныхРаздел12.П000120003003);
			Раздел12Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, СтруктураДанныхРаздел12.П000120004003);
			Раздел21Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				ЭтаФорма, ТабличныйДокумент.Области.П000210001003.Значение);
		КонецЕсли;
		
		Если Раздел12Строка040 > Раздел12Строка030 ИЛИ Раздел12Строка040 > Раздел21Строка010 Тогда
			
			Если ИмяРаздела = "Раздел12" Тогда
				ТабличныйДокумент.Области.П000120004003.Значение = 0;
			ИначеЕсли ИмяРаздела = "Раздел21" Тогда
				СтруктураДанныхРаздел12.П000120004003 = 0;
			КонецЕсли;
			
			Сообщение = Новый СообщениеПользователю;
			Если Раздел12Строка040 > Раздел12Строка030 Тогда
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Значение показателя строки 040 раздела 2 (%1) не должно превышать значение налоговой базы, "
				+ "которую оно уменьшает (%2).%3Значение показателя строки 040 раздела 2 было очищено.'"),
				Раздел12Строка040, Раздел12Строка030, Символы.ПС);
			ИначеЕсли Раздел12Строка040 > Раздел21Строка010 Тогда
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Значение показателя строки 040 раздела 2 (%1) не должно превышать значение суммы убытка, "
				+ "полученного в предыдущем (предыдущих) налоговом (налоговых) периоде (периодах) (%2).%3Значение "
				+ "показателя строки 040 раздела 2 было очищено.'"), Раздел12Строка040, Раздел21Строка010, Символы.ПС);
			КонецЕсли;
			Сообщение.Сообщить();
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
	Конецесли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многострочные разделы.
	Если НаимРаздела = "Раздел3" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многострочные разделы.
	Если ИмяТекРаздела = "Раздел3" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел12" Тогда
			ИзменитьФорматПоказателей(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели = "")
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		КодПериода = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "Период");
		ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		Если КодПериода = "50" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОпределяющаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОпределяющаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
		 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
		НомКорр = СокрЛП(Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение);
		Форма.ТабличныйДокумент.Области["СекцияПояснение"].Видимость = ЗначениеЗаполнено(НомКорр) И НомКорр <> "0";
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел12" Тогда
		
		Если Форма.ТабличныйДокумент.Области.П000120003003.Значение <> 0 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120004003");
			Форма.ТабличныйДокумент.Области.П000120004003.Защита = Ложь;
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120004003");
			Форма.ТабличныйДокумент.Области.П000120004003.Защита = Истина;
		КонецЕсли;
		
		Если Форма.ТабличныйДокумент.Области.П000120004503.Значение < 6 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120004603");
			Форма.ТабличныйДокумент.Области.П000120004603.Защита = Ложь;
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120004604");
			Форма.ТабличныйДокумент.Области.П000120004604.Защита = Ложь;
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120004605");
			Форма.ТабличныйДокумент.Области.П000120004605.Защита = Ложь;
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120004603");
			Форма.ТабличныйДокумент.Области.П000120004603.Защита = Истина;
			Форма.ТабличныйДокумент.Области.П000120004603.Значение = "";
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120004604");
			Форма.ТабличныйДокумент.Области.П000120004604.Защита = Истина;
			Форма.ТабличныйДокумент.Области.П000120004604.Значение = "";
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120004605");
			Форма.ТабличныйДокумент.Области.П000120004605.Защита = Истина;
			Форма.ТабличныйДокумент.Области.П000120004605.Значение = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
	
	Если НовыйВариант = 4 И Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	ОбрабатываемаяОбласть.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Истина;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"] И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область МеханизмДобавленияИУдаленияСтрокМногострочнойЧасти

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
								|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
			КонецЕсли;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 2) = "01" Тогда
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы.
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// Установим фокус на поле табличн. документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// Предварительно обновим структуру многострочных разделов.
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если НомерГрафы = 1 Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
					КонецЕсли;
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки.
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							// Обновляем значение элемента таблицы значений.
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличн. документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1);
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// Устанавливаем порядковый номер строки.
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы Тогда
		
		ТекТабличноеПоле = "Раздел3";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Создаем исходную структуру многострочных разделов.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		СтруктураРеквизитовФормы.ВидДокумента = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(ТабличныйДокумент, ТабличныйДокумент.Области["П000120001003"]);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(ТабличныйДокумент, ТабличныйДокумент.Области["П000210002003"]);
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мИнтервалАвтосохранения", СтруктураРеквизитовФормы.мИнтервалАвтосохранения);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			ИзменитьФорматПоказателей(Этаформа);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	ПолныйРасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	ИзменитьФорматПоказателей(Этаформа);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПолныйРасчетНаСервере()
	
	РасчетНаСервере();
	
	Раздел12Строка030 = 0;
	Раздел12Строка040 = 0;
	Раздел21Строка010 = 0;
	
	ТекРаздел = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Если ТекРаздел = "Раздел12" Тогда
		Раздел12Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, ТабличныйДокумент.Области.П000120003003.Значение);
		Раздел12Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, ТабличныйДокумент.Области.П000120004003.Значение);
		Раздел21Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел21.П000210001003);
	ИначеЕсли ТекРаздел = "Раздел21" Тогда
		Раздел12Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел12.П000120003003);
		Раздел12Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел12.П000120004003);
		Раздел21Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, ТабличныйДокумент.Области.П000210001003.Значение);
	Иначе
		Раздел12Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел12.П000120003003);
		Раздел12Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел12.П000120004003);
		Раздел21Строка010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			ЭтаФорма, СтруктураДанныхРаздел21.П000210001003);
	КонецЕсли;
	
	Если Раздел12Строка040 > Раздел12Строка030
	 ИЛИ Раздел12Строка040 > Раздел21Строка010 Тогда
		
		Если ТекРаздел = "Раздел12" Тогда
			ТабличныйДокумент.Области.П000120004003.Значение = 0;
		Иначе
			СтруктураДанныхРаздел12.П000120004003 = 0;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		
		Если Раздел12Строка040 > Раздел12Строка030 Тогда
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Значение показателя строки 040 раздела 2 (%1) не должно превышать значение налоговой базы, "
			+ "которую оно уменьшает (%2).%3Значение показателя строки 040 раздела 2 было очищено.'"),
			Раздел12Строка040, Раздел12Строка030, Символы.ПС);
		ИначеЕсли Раздел12Строка040 > Раздел21Строка010 Тогда
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='Значение показателя строки 040 раздела 2 (%1) не должно превышать значение суммы убытка, "
			+ "полученного в предыдущем (предыдущих) налоговом (налоговых) периоде (периодах) (%2).%3Значение "
			+ "показателя строки 040 раздела 2 было очищено.'"), Раздел12Строка040, Раздел21Строка010, Символы.ПС);
		КонецЕсли;
		Сообщение.Сообщить();
		
		РасчетНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета	= ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны			= ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм				= ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт					= ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
																							|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
																							|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
																							|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПечатьЗаполненногоНеобязательногоРаздела(ИмяРаздела)
	
	ОбязательныеРазделы = Новый Массив;
	ОбязательныеРазделы.Добавить("Титульный");
	ОбязательныеРазделы.Добавить("Раздел12");
	
	Если ОбязательныеРазделы.Найти(ИмяРаздела) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", ИмяРаздела);
	Если НастройкиСтраницыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВРазделеОтключенаПечать = (НастройкиСтраницыРаздела.ВыводНаПечать = 0);
	
	Если ВРазделеОтключенаПечать Тогда
		Если РазделЗаполнен(ИмяРаздела) Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать = 1;
		КонецЕсли;
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция РазделЗаполнен(ИмяСтраницы)
	
	Если ИмяСтраницы = "Раздел21" Тогда
		
		Возврат ЗаполненРаздел21();
		
	ИначеЕсли ИмяСтраницы = "Раздел3" Тогда
		
		Возврат ЗаполненРаздел3();
		
	Иначе
		
		Возврат Истина; // остальные разделы считаются всегда заполненными
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполненРаздел21()
	
	ПрефиксПоказателейРаздела = "П00021";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (СтрНайти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из СтруктураДанныхРаздел21 Цикл
			ЭтоПоказатель = (СтрНайти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполненРаздел3()
	
	ПрефиксПоказателейРаздела = "П00003";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (СтрНайти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из СтруктураДанныхРаздел21 Цикл
			ЭтоПоказатель = (СтрНайти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПоказательЗаполнен(ОбластьПоказателя)
	
	Если ОбластьПоказателя.СодержитЗначение Тогда
		ЗначениеОбласти = ОбластьПоказателя.Значение;
		ТипЗначенияОбласти = ТипЗнч(ЗначениеОбласти);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			Возврат (ЗначениеОбласти <> 0);
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			Возврат (НЕ ПустаяСтрока(ЗначениеОбласти));
		Иначе
			Возврат ЗначениеЗаполнено(ЗначениеОбласти);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
	  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
	 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".';
								|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СортироватьСведенияРаздела21();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	ДанныеРазделов.Вставить("Раздел12",  СтруктураДанныхРаздел12);
	ДанныеРазделов.Вставить("Раздел21",  СтруктураДанныхРаздел21);
	ДанныеРазделов.Вставить("Раздел3",   СтруктураДанныхРаздел3);
	ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 
		ДанныеФормыВЗначение(ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы], Тип("ТаблицаЗначений")));
		
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма", 		   	 СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов", 		   	 ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати", 			   	 ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц", 	 ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц,
													   	 Тип("ДеревоЗначений")));
													   	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).ПечатныйБланк(ПараметрыПечати);
	
	СтруктураДанныхТитульный.Вставить("НомерКорректировки", Строка(НомерКорректировки));
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатныеЛисты[0].Значение, СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭтаФорма[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(СтруктураПараметровЛиста.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыОтчета = ПараметрыВыгрузкиОтчета();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML();
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыОтчета = ПараметрыВыгрузкиОтчета();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях"".';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0"".';
									|en = 'Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ИзвлечьСохраненныеПоказателиОтчета()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСохраненныеПоказателиОтчета()
	
	Раздел12 = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	
	Раздел12.Вставить("П100120000403", Раздел12["П000120000403"] - Раздел12["П000120000503"]);
	
	П100120004603 = Раздел12["П000120004603"] + "/" + Раздел12["П000120004604"] + "/" + Раздел12["П000120004605"];
	
	Раздел12.Вставить("П100120004603", ?(СтрДлина(П100120004603) = 14, П100120004603, ""));
	
	ВставитьДанныеБлокаУбытков(020);
	ВставитьДанныеБлокаУбытков(140);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДанныеБлокаУбытков(НомерПервойСтрокиБлока)
	
	Раздел21 = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	ДобавленоСтрок = 0;
	Для Инд = 1 По 10 Цикл
		ОснованиеИмени = "П00021" + Формат(НомерПервойСтрокиБлока + (Инд - 1) * 10, "ЧЦ=5; ЧВН=; ЧГ=0");
		ИмяПоказателяГр1 = ОснованиеИмени + "01";
		ИмяПоказателяГр3 = ОснованиеИмени + "03";
		
		Графа1 = Формат(Раздел21[ИмяПоказателяГр1], "ЧЦ=4; ЧВН=; ЧГ=0");
		Графа3 = Раздел21[ИмяПоказателяГр3];
		
		Если ЗначениеЗаполнено(Графа1) ИЛИ ЗначениеЗаполнено(Графа3) Тогда
			ДобавленоСтрок = ДобавленоСтрок + 1;
			ДобавленоСтрокСтр = Формат(ДобавленоСтрок, "ЧГ=");
			Раздел21.Вставить("П10021" + Формат(НомерПервойСтрокиБлока, "ЧЦ=5; ЧВН=; ЧГ=0") + "01_" + ДобавленоСтрокСтр, Графа1);
			Раздел21.Вставить("П10021" + Формат(НомерПервойСтрокиБлока, "ЧЦ=5; ЧВН=; ЧГ=0") + "03_" + ДобавленоСтрокСтр, Графа3);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленоСтрок = 0 Тогда
		Раздел21.Вставить("П10021" + Формат(НомерПервойСтрокиБлока, "ЧЦ=5; ЧВН=; ЧГ=0") + "01_1", "");
		Раздел21.Вставить("П10021" + Формат(НомерПервойСтрокиБлока, "ЧЦ=5; ЧВН=; ЧГ=0") + "03_1", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ПараметрыВыгрузкиОтчета()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("Тлф",     СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	
	// Случай перехода 2.0 -> 3.0.
	Если НЕ Титульный.Свойство("КПП") И Титульный.Свойство("КПП1_1")Тогда
		Титульный.Вставить("КПП");
		Для Ном = 1 По 9 Цикл
			Титульный.КПП = СокрЛП(Титульный.КПП) + ?(Титульный["КПП1_" + Ном] = "-", "", Титульный["КПП1_" + Ном]);
			Титульный.Удалить("КПП1_" + Ном);
		КонецЦикла;
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИОИП.Отчество);
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
		ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
		ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_ESHN");
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел12(СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел21(СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел3(СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	ЭтоПБОЮЛ = ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("34,50,95,96"); // ограничено форматом выгрузки
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("120,213,214,215,216,331"); // ограничено форматом выгрузки
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код налогового периода.", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места, по которому представляется документ.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места, по которому представляется документ.", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН индивидуального предпринимателя.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН индивидуального предпринимателя.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе  не указана фамилия индивидуального предпринимателя.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе  не указано имя индивидуального предпринимателя.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН организации.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан КПП организации.", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации.", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.", "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.", "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И ПараметрыВыгрузки.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта.", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел12(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел12;
	
	ОКТМО = ДанныеРаздела.П000120000103;
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В строке 001 раздела 1 не указан код по ОКТМО.", "Раздел12", "П000120000103");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В строке 001 раздела 1 неверно указан код по ОКТМО.", "Раздел12", "П000120000103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ОКТМО_Пер = ДанныеРаздела.П000120000303;
	
	Если ЗначениеЗаполнено(ОКТМО_Пер) И СтрДлина(ОКТМО_Пер) <> 11 И СтрДлина(ОКТМО_Пер) <> 8 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		"В строке 003 раздела 1 неверно указан код по ОКТМО.", "Раздел12", "П000120000303");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРаздела["П000120004603"]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000120004604"])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000120004605"]) Тогда
		
		ИмяПок = "П000120004603";
		ДлинаЗначПок = СтрДлина(СокрЛП(ДанныеРаздела[ИмяПок]));
		Если ДлинаЗначПок <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"В строке 046 раздела 2" + ?(ДлинаЗначПок = 0, " не", "")
			+ " задан номер статьи закона субъекта Российской Федерации, которым установлена налоговая ставка"
			+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Раздел12", ИмяПок);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПок = "П000120004604";
		ДлинаЗначПок = СтрДлина(СокрЛП(ДанныеРаздела[ИмяПок]));
		Если ДлинаЗначПок <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"В строке 046 раздела 2" + ?(ДлинаЗначПок = 0, " не", "")
			+ " задан номер пункта статьи закона субъекта Российской Федерации, которым установлена налоговая ставка"
			+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Раздел12", ИмяПок);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПок = "П000120004605";
		ДлинаЗначПок = СтрДлина(СокрЛП(ДанныеРаздела[ИмяПок]));
		Если ДлинаЗначПок <> 4 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"В строке 046 раздела 2" + ?(ДлинаЗначПок = 0, " не", "")
			+ " задан номер подпункта статьи закона субъекта Российской Федерации, которым установлена налоговая ставка"
			+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Раздел12", ИмяПок);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел21(СтатусПроверки)
	
	ПроверитьЗаполнениеСтрокУбытка(2, СтатусПроверки); // строки 020-110
	ПроверитьЗаполнениеСтрокУбытка(14, СтатусПроверки); // строки 140-230
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтрокУбытка(ПерваяСтрока, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел21;
	
	Для Инд = ПерваяСтрока По ПерваяСтрока + 9 Цикл
		ОсновнаяЧастьИмени = "П00021" + Формат(Инд * 10, "ЧЦ=5; ЧВН=; ЧГ=");
		ГодУбытка = ДанныеРаздела[ОсновнаяЧастьИмени + "01"];
		СуммаУбытка = ДанныеРаздела[ОсновнаяЧастьИмени + "03"];
		
		Если ЗначениеЗаполнено(СуммаУбытка) И НЕ ЗначениеЗаполнено(ГодУбытка) Тогда
			НомерСтроки = Формат(Инд * 10, "ЧЦ=3; ЧВН=; ЧГ=");
			СообщениеОбОшибке = "В строке " + НомерСтроки + " раздела 2.1 не указан год";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Раздел21", ОсновнаяЧастьИмени + "01");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел3(СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	Инд = 1;
	Пока ДанныеРаздела.Свойство("П000030000101_" + СтрокаЧГ0(Инд)) Цикл
		
		НомерСтроки = СтрокаЧГ0(Инд);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000030000101_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000102_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000103_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000104_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000105_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000106_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000107_" + НомерСтроки]);
		
		Если СтрокаЗаполнена Тогда
			
			КодВидаПоступления = СокрЛП(ДанныеРаздела["П000030000101_" + НомерСтроки]);
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки + " раздела 3 не указан код вида поступлений.", "Раздел3", "П000030000101_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(КодВидаПоступления) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки + " раздела 3 неверно указан код вида поступлений.", "Раздел3", "П000030000101_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ТекЗнач1_Корректно = Ложь;
			ТекЗнач1 = ДанныеРаздела["П000030000102_" + НомерСтроки];
			Если НЕ ЗначениеЗаполнено(ТекЗнач1) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки
					+ " раздела 3 не указана дата поступления.", "Раздел3", "П000030000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ТекЗнач1) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки
					+ " раздела 3 указана дата поступления, выходящая за пределы периода с 01.1900 по 12.2099.",
					"Раздел3", "П000030000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			Иначе
				ТекЗнач1_Корректно = Истина;
			КонецЕсли;
			
			ТекЗнач2_Корректно = Ложь;
			ТекЗнач2 = ДанныеРаздела["П000030000105_" + НомерСтроки];
			Если НЕ ЗначениеЗаполнено(ТекЗнач2) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки
					+ " раздела 3 не указан срок использования.", "Раздел3", "П000030000105_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ТекЗнач2) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки
					+ " раздела 3 указан срок использования, выходящий за пределы периода с 01.1900 по 12.2099.",
					"Раздел3", "П000030000105_" + НомерСтроки);
				СтатусПроверки = Ложь;
			Иначе
				ТекЗнач2_Корректно = Истина;
			КонецЕсли;
			
			Если ТекЗнач1_Корректно И ТекЗнач2_Корректно И ТекЗнач1 > ТекЗнач2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + НомерСтроки
					+ " раздела 3 дата поступления не может быть позднее срока использования.",
					"Раздел3", "П000030000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СхемаВыгрузки505");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФорматПоказателей(Форма)
	
	СписокДляИзменения = Новый СписокЗначений; //список показателей с представлением нуля "0"
	
	Попытка
		
		П000120000403 = Форма.ТабличныйДокумент.Области.П000120000403.Значение;
		П000120000503 = Форма.ТабличныйДокумент.Области.П000120000503.Значение;
		
		Если П000120000403 = 0 И П000120000503 = 0 Тогда
			СписокДляИзменения.Добавить("П000120000403","0");
		Иначе
			СписокДляИзменения.Добавить("П000120000403","-");
		КонецЕсли;
		
		СписокДляИзменения.Добавить("П000120003003","0");
		СписокДляИзменения.Добавить("П000120005003","0");
		
	Исключение
		
	КонецПопытки;
	
	Для каждого Показатель Из СписокДляИзменения Цикл
		КодПоказателя = Показатель.Значение;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		ТекущийФормат = Форма[ИмяПоляТаблДокумента].Области[КодПоказателя].Формат;
		ПозЧН = СтрНайти(ТекущийФормат,"ЧН=");
		ТекЗначЧН = Сред(ТекущийФормат, ПозЧН, 4);
		НовЗначЧН = Лев(ТекЗначЧН, 3) + Показатель.Представление;
		
		Форма[ИмяПоляТаблДокумента].Области[КодПоказателя].Формат = СтрЗаменить(ТекущийФормат, ТекЗначЧН, НовЗначЧН);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000300001") > 0
	   И СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = СтрНайти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел21.Очистить();
	СтруктураДанныхРаздел12.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
