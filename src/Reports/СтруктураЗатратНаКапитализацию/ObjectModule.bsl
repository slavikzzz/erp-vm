
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета:
//   	* Параметры - Структура - может содержать свойства:
//				** ПараметрКоманды -  СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.НематериальныеАктивы, СправочникСсылка.ТемыЭтапыИсследованийИРазработок -
//				** ОписаниеКоманды - Структура - может содержать свойства:
//					*** ДополнительныеПараметры - Структура - 
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;

	Если Параметры.Свойство("ПараметрКоманды") Тогда 

		ОписаниеКоманды = Параметры.ОписаниеКоманды; //Структура - 
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Объект", Параметры.ПараметрКоманды);
		Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
			ДополнительныеПараметры = Параметры.ОписаниеКоманды.ДополнительныеПараметры;
			ПараметрыОтчета.Вставить("ИмяКоманды", ДополнительныеПараметры.ИмяКоманды);
		КонецЕсли;

		ЭтаФорма.НастройкиОтчета.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		ЭтаФорма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Истина;
		ЭтаФорма.НастройкиОтчета.РазрешеноИзменятьВарианты = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли.
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Если НовыеПользовательскиеНастройкиКД = Неопределено Тогда
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, Контекст.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		Иначе
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		КонецЕсли;
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
		КомпоновщикНастроекФормы = Контекст.Отчет.КомпоновщикНастроек;
		Параметры = Контекст.Параметры;
		
		Если Параметры.Свойство("ПользовательскиеПараметры") Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьПараметрыВПользовательскиеНастройки(КомпоновщикНастроекФормы, Параметры.ПользовательскиеПараметры);
			НовыеПользовательскиеНастройкиКД = КомпоновщикНастроекФормы.ПользовательскиеНастройки;
		КонецЕсли;
		
		НастроитьПараметрыОтборыПоФункциональнымОпциям(НовыеНастройкиКД);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	Объект = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Объект")).Значение;
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда	
		ТекстЗапроса = УчетРасходовПоИсследованиямИРазработкам.ТекстЗапросаСтруктураКапитализацииНМА();
		НастроитьВыбранныеПоляКомпоновкиДанных(НастройкиОтчета, Истина);
	Иначе
		ТекстЗапроса = УчетРасходовПоИсследованиямИРазработкам.ТекстЗапросаСтруктураКапитализации();
		НастроитьВыбранныеПоляКомпоновкиДанных(НастройкиОтчета, ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы"));
	КонецЕсли;
	
	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТабличныйДокумент = ПроцессорВывода.ЗакончитьВывод();
		
	// удалим служебные тексты
	
	ЗаменяемыйТекстРасширенный = "%1% И
						|";
	ЗаменяемыйТекстБезРасширения = "%1%";
	
	ОбластьРасширенная = ТабличныйДокумент.НайтиТекст(ЗаменяемыйТекстРасширенный);
	ОбластьБезРасширения = ТабличныйДокумент.НайтиТекст(ЗаменяемыйТекстБезРасширения);
	Если ОбластьРасширенная <> Неопределено Тогда
		ОбластьРасширенная.Текст = СтрЗаменить(ОбластьРасширенная.Текст, ЗаменяемыйТекстРасширенный, "");
	ИначеЕсли ОбластьБезРасширения <> Неопределено Тогда
		ОбластьБезРасширения.Текст = СтрЗаменить(ОбластьБезРасширения.Текст, ЗаменяемыйТекстБезРасширения, "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Настраивает доступные значения у параметров компоновки данных в зависимости от выбранного варианта настройки.
// 
// Параметры:
//	Документ - ДокументСсылка.РаспределениеПрочихЗатрат - расшифровывающийся документ.
//	НовыеНастройкиКД - НастройкиКомпоновкиДанных - переопределяемые настройки отчета.
//	НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - настройки схемы компоновки данных.
//
Процедура НастроитьПараметрыОтчетаПоВариантуОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
		
	КлючиВариантов = КлючиПредопределенныхВариантов();
	ПредопределенныйВариант = ПолучитьПредопределенныйВариант(НастройкиОтчета.ВариантСсылка);
	КлючПредопределенногоВарианта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенныйВариант, "КлючВарианта");
	Если Не ЗначениеЗаполнено(ПредопределенныйВариант) 
		Или КлючиВариантов.Найти(КлючПредопределенногоВарианта) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеПоЗатратам");
	ПараметрПоПредприятию = СхемаКомпоновкиДанных.Параметры.Найти("ПоПредприятию");
		
	СписокВыбора = Новый СписокЗначений;

	Если КлючПредопределенногоВарианта = "СтруктураЗатратПоПредприятию" Тогда
		
		СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета с НДС';
										|en = 'In management accounting currency, including VAT'"));
		ПараметрПоПредприятию.Значение = Истина;
		
	Иначе
		
		Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
			СписокВыбора.Добавить(2, НСтр("ru = 'В валюте упр. учета';
											|en = 'In management accounting currency'"));
		КонецЕсли;
		СписокВыбора.Добавить(3, НСтр("ru = 'В валюте регл. учета';
										|en = 'In local accounting currency'"));
		ПараметрПоПредприятию.Значение = Ложь;
		
	КонецЕсли;
	
	ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ПараметрыОтчета") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НовыеПользовательскиеНастройкиКД, "Объект", НастройкиОтчета.ПараметрыОтчета.Объект);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НовыеНастройкиКД, "Объект", НастройкиОтчета.ПараметрыОтчета.Объект);
	КонецЕсли;
	
	ЗначениеПараметраДанныеПоЗатратам = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеПоЗатратам"));
	НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеПоЗатратам.ИдентификаторПользовательскойНастройки);
	
	Если Не НастройкаДанныеОтчета = Неопределено
		И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
		НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредопределенныйВариант(Знач Вариант)
	
	КлючиВариантов = КлючиПредопределенныхВариантов();
	
	Пока КлючиВариантов.Найти(Вариант.КлючВарианта) = Неопределено
		И ЗначениеЗаполнено(Вариант.Родитель) Цикл
		Вариант = Вариант.Родитель;
	КонецЦикла;
	
	Возврат Вариант;
	
КонецФункции

Функция КлючиПредопределенныхВариантов()
	
	КлючиВариантов = Новый Массив;
	КлючиВариантов.Добавить("СтруктураЗатрат");
	КлючиВариантов.Добавить("СтруктураЗатратПоПредприятию");
	
	Возврат КлючиВариантов;
	
КонецФункции

Процедура НастроитьВыбранныеПоляКомпоновкиДанных(НастройкиОтчета, ОтчетПоНМА = Ложь)
	
	ДанныеПоЗатратам = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеПоЗатратам")).Значение;
	
	ПоляНМА = ПоляДанныхПоНМА();
	ПоляРегл = ПоляДанныхРегл();
	
	ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;

	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл 
		Если ПоляНМА.Найти(Строка(ВыбранноеПоле.Поле)) <> Неопределено Тогда
			ВыбранноеПоле.Использование = ОтчетПоНМА;
		КонецЕсли;
		Если ПоляРегл.Найти(Строка(ВыбранноеПоле.Поле)) <> Неопределено Тогда
			ВыбранноеПоле.Использование = ДанныеПоЗатратам = 3;
		КонецЕсли;
	КонецЦикла;
	
	Отборы = НастройкиОтчета.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если ЭлементОтбора.Представление = "%1%" Тогда
			Для Каждого Элемент Из ЭлементОтбора.Элементы Цикл
				Если ПоляРегл.Найти(Строка(Элемент.ЛевоеЗначение)) <> Неопределено Тогда
					Элемент.Использование = ДанныеПоЗатратам = 3;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПоляДанныхПоНМА()
	
	ПоляДанных = Новый Массив;
	ПоляДанных.Добавить("ТемаЭтап");
	
	Возврат ПоляДанных;
	
КонецФункции

Функция ПоляДанныхРегл()
	
	ПоляДанных = Новый Массив;
	ПоляДанных.Добавить("СуммаПР");
	ПоляДанных.Добавить("СуммаВР");
	ПоляДанных.Добавить("СуммаНУ");
	
	Возврат ПоляДанных;
	
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	ВедетсяУчетПостоянныхИВременныхРазниц = Ложь; 
	//++ НЕ УТ
	
	//++ Локализация
	ВедетсяУчетПостоянныхИВременныхРазниц = Истина;
	//-- Локализация
	
	//-- НЕ УТ
	Если НЕ ВедетсяУчетПостоянныхИВременныхРазниц Тогда
		УдаляемыеПоля = ПоляДанныхРегл();
		РасчетСебестоимостиПрикладныеАлгоритмы.ОграничитьИспользованиеПолейСКД(УдаляемыеПоля, СхемаКомпоновкиДанных,
			КомпоновщикНастроек, "", Истина);
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля);
		КомпоновкаДанныхСервер.УдалитьВыбранноеПолеИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли