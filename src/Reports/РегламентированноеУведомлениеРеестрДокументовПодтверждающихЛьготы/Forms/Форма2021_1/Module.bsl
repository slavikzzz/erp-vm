#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	Если ЗначениеЗаполнено(ЭтотОбъект["СтруктураРеквизитовФормы"].ПоследнийЦиклОбмена) Тогда 
		ДоступностьРеквизитов(Ложь);
	КонецЕсли;
	
	_Период = НачалоКвартала(ТекущаяДатаСеанса());
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Организация = Объект.Организация;
		ЭтоЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	Иначе
		Организация = Параметры.Организация;
		ЭтоЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		Параметры.Свойство("Организация", Объект.Организация);
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные) И ТипЗнч(Данные) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			ЗаполнитьДаннымиТребования(Данные);
		КонецЕсли;
		
		УстановитьДанныеОрганизации();
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	
	НачальнаяИнициализация();
	
	Разложение = СтрРазделить(ИмяФормы, ".");
	Объект.ИмяФормы = Разложение[3];
	Объект.ИмяОтчета = Разложение[1];
	
	ЗагрузитьДанные();
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = ЭтотОбъект["РазрешитьВыгружатьСОшибками"];
	Элементы._НаимДок.АвтоОтметкаНезаполненного = (_ПрПодп = 2);
	
	ЭтаФормаИмя = СтрЗаменить(ИмяФормы, "Отчет.", "");
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7);
	ПараметрыОтчета = Новый Структура("Организация, ДатаПодписи, РегистрацияВИФНС",
		Объект.Организация, Объект.ДатаПодписи, Объект.РегистрацияВИФНС);
	ПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
		
	Если ПоказателиОтчета = Неопределено
		Или (ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Количество() = 0) Тогда 
		
		Элементы.ФормаЗаполнить.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СоздатьНаОснованииТребования.Видимость = ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(Объект.Организация);
	УведомлениеОСпецрежимахНалогообложения.СпрятатьКнопкиВыгрузкиОтправкиУНеактуальныхФорм(ЭтотОбъект);
	ПодключенДокументооборотСКонтролирующимОрганом = 
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗагрузитьДанные()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		СтруктураПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
		СтруктураРеквизитов = СтруктураПараметров.СтруктураРеквизитов;
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		СтруктураПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДанныеУведомления").Получить();
		СтруктураРеквизитов = СтруктураПараметров.СтруктураРеквизитов;
	Иначе 
		Возврат;
	КонецЕсли;
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Рекв Из Реквизиты Цикл 
		Если СтруктураРеквизитов.Свойство(Рекв.Имя) Тогда 
			Если ТипЗнч(СтруктураРеквизитов[Рекв.Имя]) = Тип("ТаблицаЗначений")
				Или ТипЗнч(СтруктураРеквизитов[Рекв.Имя]) = Тип("ДеревоЗначений") Тогда 
				ЗначениеВРеквизитФормы(СтруктураРеквизитов[Рекв.Имя], Рекв.Имя);
			Иначе
				ЭтотОбъект[Рекв.Имя] = СтруктураРеквизитов[Рекв.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Свойство("РазрешитьВыгружатьСОшибками", ЭтотОбъект["РазрешитьВыгружатьСОшибками"]);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы;
		Объект.Организация = Организация;
		Объект.Дата = ТекущаяДатаСеанса(); 
	КонецЕсли;
	
	_Дата = Объект.ДатаПодписи;
	Реквизиты = ПолучитьРеквизиты();
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Рекв Из Реквизиты Цикл 
		Если СтрНачинаетсяС(Рекв.Имя, "_") Тогда 
			Если ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("ДанныеФормыКоллекция")
				Или ТипЗнч(ЭтотОбъект[Рекв.Имя]) = Тип("ДанныеФормыДерево") Тогда 
				СтруктураРеквизитов.Вставить(Рекв.Имя, РеквизитФормыВЗначение(Рекв.Имя));
			Иначе
				СтруктураРеквизитов.Вставить(Рекв.Имя, ЭтотОбъект[Рекв.Имя]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("СтруктураРеквизитов, РазрешитьВыгружатьСОшибками", 
		СтруктураРеквизитов, ЭтотОбъект["РазрешитьВыгружатьСОшибками"]);
	УведомлениеОСпецрежимахНалогообложения.СохранитьДанные(ЭтотОбъект, СтруктураПараметров);
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеОрганизации()
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, 
			ТекущаяДатаСеанса(), СтрокаСведений);
		_ИННЮЛ = СведенияОбОрганизации.ИННЮЛ;
		_КПП = СведенияОбОрганизации.КППЮЛ;
		_НаимОрг = СведенияОбОрганизации.НаимЮЛПол;
	Иначе
		СтрокаСведений = "ИННФЛ,ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, 
			ТекущаяДатаСеанса(), СтрокаСведений);
		_ИННФЛ = СведенияОбОрганизации.ИННФЛ;
		_Фамилия = СведенияОбОрганизации.ФамилияИП;
		_Имя = СведенияОбОрганизации.ИмяИП;
		_Отчество = СведенияОбОрганизации.ОтчествоИП;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачальнаяИнициализация()
	СформироватьСпискиВыбора();
	Элементы.ДатаПодписи.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИмяФайлТреб.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Тлф.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ФамилияПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИмяПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ОтчествоПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимДок.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ПрПодп.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимОрг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИННЮЛ.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КПП.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Фамилия.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Имя.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Отчество.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИННФЛ.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ИННЮЛРеорг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._КППРеорг.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НаимОргПред.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ПредТипДогТекСумОпер.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._РеестрДокПОбНЛСумНеоблОпер.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._ОтчетГод.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._Период.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	Элементы._НомКорр.УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизитов");
	
	Элементы.ОргЮЛ.Видимость = ЭтоЮрЛицо;
	Элементы.ОргФЛ.Видимость = Не ЭтоЮрЛицо;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	Если Модифицированность Тогда 
		СинхронизироватьСтроки();
	КонецЕсли;
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СформироватьXML(Команда)
	Если Модифицированность Тогда 
		Сохранить(Неопределено);
	КонецЕсли;
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Модифицированность Тогда 
		СинхронизироватьСтроки();
	КонецЕсли;
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	Если Модифицированность Тогда 
		СинхронизироватьСтроки();
	КонецЕсли;
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что уведомление уже сдано?';
													|en = 'Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	Если Модифицированность Тогда 
		Сохранить(Неопределено);
	КонецЕсли;
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПроверитьВыгрузку(ЭтотОбъект, ПроверитьВыгрузкуНаСервере());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитов(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииТребования(Команда)
	ОбработкаВыбораТребования();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиТребования(Требование) Экспорт
	Объект.Основание = Требование;
	ДанныеТребования = УведомлениеОСпецрежимахНалогообложения.ДанныеТребования(Требование);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеТребования);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТребования);
	УстановитьДанныеПоРегистрацииВИФНС();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВИФНСПриИзменении(Элемент)
	УстановитьДанныеПоРегистрацииВИФНС();
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	Если ЗначениеЗаполнено(Физлицо) Тогда 
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			Объект.Организация, _КодНО, _КПП);
			
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда 
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			Объект.ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			Объект.ПодписантИмя = СокрЛП(ФИО.Имя);
			Объект.ПодписантОтчество = СокрЛП(ФИО.Отчество);
			_НаимОргПред = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
			Объект.ПодписантФамилия = СокрЛП(ДанныеПредставителя.Фамилия);
			Объект.ПодписантИмя = СокрЛП(ДанныеПредставителя.Имя);
			Объект.ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			_НаимОргПред = "";
		КонецЕсли;
	Иначе
		Объект.ПодписантФамилия = "";
		Объект.ПодписантИмя = "";
		Объект.ПодписантОтчество = "";
	КонецЕсли;
	
	_ФамилияПодп = Объект.ПодписантФамилия;
	_ИмяПодп = Объект.ПодписантИмя;
	_ОтчествоПодп = Объект.ПодписантОтчество;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьДанныеРуководителя(Объект);
	_ФамилияПодп = Объект.ПодписантФамилия;
	_ИмяПодп = Объект.ПодписантИмя;
	_ОтчествоПодп = Объект.ПодписантОтчество;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Объект.РегистрацияВИФНС);
	_КодНО = Реквизиты.Код;
	_КПП = Реквизиты.КПП;
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		_ПрПодп = 2;
		_НаимДок = Реквизиты.ДокументПредставителя;
		Элементы._НаимДок.АвтоОтметкаНезаполненного = Истина;
	Иначе
		УстановитьПредставителяПоОрганизации();
		_ПрПодп = 1;
		_НаимДок = "";
		_НаимОргПред = "";
		Элементы._НаимДок.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	Если Модифицированность Тогда 
		Сохранить(Неопределено);
	КонецЕсли;
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, "Открыть", Ложь, ЭтотОбъект["СтруктураРеквизитовУведомления"].СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Процедура ПечатьБРОНаСервере()
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаРазрешитьВыгружатьСОшибками(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда 
		Попытка
			Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы[Параметр.ИмяСтраницы];
			ТекущийЭлемент = Элементы[Параметр.ИмяОбласти];
			
			Если Параметр.ИмяОбласти = "_РеестрДокПОбНЛ" Тогда 
				Строки = _РеестрДокПОбНЛ.НайтиСтроки(Новый Структура("УИД", Параметр.УИДСтраницы));
				Если Строки.Количество() > 0 Тогда 
					Элементы._РеестрДокПОбНЛ.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Активизировать();
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И Источник.Открыта() Тогда 
			Источник.Закрыть( );
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПрПодпПриИзменении(Элемент)
	Элементы._НаимДок.АвтоОтметкаНезаполненного = (_ПрПодп = 2);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДоступностьКнопок();
	Элементы._ПредТипДогТек.КонтекстноеМеню.Доступность = Ложь;
	Элементы._РеестрДокПОбНЛ.КонтекстноеМеню.Доступность = Ложь;
	Для Каждого Элт Из Элементы._РеестрДокПОбНЛ.КонтекстноеМеню.ПодчиненныеЭлементы Цикл 
		Элт.Видимость = Ложь;
	КонецЦикла;
	Для Каждого Элт Из Элементы._РеестрДокПОбНЛ.КонтекстноеМеню.ПодчиненныеЭлементы Цикл 
		Элт.Видимость = Ложь;
	КонецЦикла;
	_ФормРеоргПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	МакетСписковВыбора = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, "СпискиВыбора2021_1");
	Список = МакетСписковВыбора.Область("СписокКодовВидовОпераций2023");
	ТС = Список.Верх;
	Пока ТС <= Список.Низ Цикл
		Код = МакетСписковВыбора.Область(ТС, 1, ТС, 1).Текст;
		Наименование = МакетСписковВыбора.Область(ТС, 2, ТС, 2).Текст;
		Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда 
			Прервать;
		КонецЕсли;
		
		НовСтр = СпискиВыбораКодов2023.Добавить();
		НовСтр.Код = Код;
		НовСтр.Название = Наименование;
		ТС = ТС + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛКодОперПриИзменении(Элемент)
	Элементы._РеестрДокПОбНЛ.ТекущиеДанные.ОписаниеОперации = "";
	Модифицированность = Истина;
	ДоступностьКнопок();
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛКодОперНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Выбор кода");
	ПараметрыФормы.Вставить("ТаблицаЗначений", СпискиВыбораКодов2023);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Элементы._РеестрДокПОбНЛ.ТекущиеДанные.КодОпер));

	ДополнительныеПараметры = Новый Структура("ТекущиеДанные", Элементы._РеестрДокПОбНЛ.ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("_РеестрДокПОбНЛКодОперВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛКодОперВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Если ЗначениеЗаполнено(РезультатВыбора.Код) Тогда 
		ТекущиеДанные.КодОпер = РезультатВыбора.Код;
		ТекущиеДанные.ОписаниеОперации = РезультатВыбора.Название;
	Иначе
		ТекущиеДанные.КодОпер = "";
		ТекущиеДанные.ОписаниеОперации = "";
	КонецЕсли;
	Модифицированность = Истина;
	ДоступностьКнопок();
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодОперации(Команда)
	НовСтр = _РеестрДокПОбНЛ.Добавить();
	НовСтр.УИД = Новый УникальныйИдентификатор;
	Элементы._РеестрДокПОбНЛ.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	
	_РеестрДокПОбНЛКодОперНачалоВыбора(Элементы._РеестрДокПОбНЛ, Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКодОперации(Команда)
	Если Элементы._РеестрДокПОбНЛ.ТекущаяСтрока = Неопределено Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать строку в списке';
														|en = 'Необходимо выбрать строку в списке'"));
		Возврат;
	КонецЕсли;
	
	ПредТипДогТек.ПолучитьЭлементы().Очистить();
	СтрКУдалению = _РеестрДокПОбНЛ.НайтиПоИдентификатору(Элементы._РеестрДокПОбНЛ.ТекущиеДанные.ПолучитьИдентификатор());
	_РеестрДокПОбНЛ.Удалить(СтрКУдалению);
	Модифицированность = Истина;
	ДоступностьКнопок();
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьТиповойДоговор(Команда)
	Текст = Ждать ВвестиСтрокуАсинх(, "Имя файла типового документа (при наличии)", 255);
	Если ТипЗнч(Текст) = Тип("Строка") Тогда
		НовСтр = ПредТипДогТек.ПолучитьЭлементы().Добавить();
		НовСтр.УИД = ТекУИД;
		НовСтр.УИДЛок = Новый УникальныйИдентификатор;
		НовСтр.ОписаниеКА = ?(ЗначениеЗаполнено(Текст), Текст, "<типовой договор не представлен>");
		НовСтр.ИмяФайлДог = Текст;
		Модифицированность = Истина;
		КА = НовСтр.ПолучитьЭлементы().Добавить();
		КА.ОписаниеКА = "<Необходимо заполнить реквизиты контрагента>";
		КА.ФлагОшибки = Истина;
		КА.УИДЛок = Новый УникальныйИдентификатор;
		КА = КА.ПолучитьЭлементы().Добавить();
		КА.ОписаниеКА = "<Необходимо заполнить реквизиты документа>";
		КА.ФлагОшибки = Истина;
		КА.УИДЛок = Новый УникальныйИдентификатор;
		Элементы._ПредТипДогТек.Развернуть(НовСтр.ПолучитьИдентификатор(), Истина);
		ДоступностьКнопок();
		ПересчетИтогов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура РедактироватьТиповойДоговор(ТекстДоговора, ТекущиеДанные)
	Текст = Ждать ВвестиСтрокуАсинх(ТекстДоговора, "Имя файла типового документа (при наличии)", 255);
	Если ТипЗнч(Текст) = Тип("Строка") Тогда
		ТекущиеДанные.ОписаниеКА = ?(ЗначениеЗаполнено(Текст), Текст, "<типовой договор не представлен>");
		ТекущиеДанные.ИмяФайлДог = Текст;
		Модифицированность = Истина;
		ДоступностьКнопок();
		ПересчетИтогов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДоговорКА(Команда)
	Если Элементы._ПредТипДогТек.ТекущаяСтрока = Неопределено Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать строку в списке';
														|en = 'Необходимо выбрать строку в списке'"));
		Возврат;
	КонецЕсли;
	
	СтрКУдалению = ПредТипДогТек.НайтиПоИдентификатору(Элементы._ПредТипДогТек.ТекущиеДанные.ПолучитьИдентификатор());
	Если СтрКУдалению.ПолучитьРодителя() = Неопределено Тогда 
		Если ПредТипДогТек.ПолучитьЭлементы().Количество() = 1 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке должен быть хотя бы один типовой договор';
															|en = 'В списке должен быть хотя бы один типовой договор'"));
			Возврат;
		КонецЕсли;
		ПредТипДогТек.ПолучитьЭлементы().Удалить(СтрКУдалению);
	Иначе
		Если СтрКУдалению.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке должен быть хотя бы один контрагент/документ';
															|en = 'В списке должен быть хотя бы один контрагент/документ'"));
			Возврат;
		КонецЕсли;
		СтрКУдалению.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрКУдалению);
	КонецЕсли;
	Модифицированность = Истина;
	ПересчетИтогов();
	ДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагент(Команда)
	ТекущиеДанные = Элементы._ПредТипДогТек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или УровеньГруппировки(ТекущиеДанные) > 1 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать типовой договор';
														|en = 'Необходимо выбрать типовой договор'"));
		Возврат;
	КонецЕсли;
	
	Если УровеньГруппировки(ТекущиеДанные) = 1 Тогда 
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Истина, Ложь, ТекущиеДанные);
	ПараметрыОткрытия = Новый Структура;
	ОО = Новый ОписаниеОповещения("ДобавитьКонтрагентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Отчет." + СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[1]  + ".Форма.ФормаВводаРеквизитовКонтрагента",
		ПараметрыОткрытия, ЭтотОбъект ,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагентЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда 
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Добавление = Истина Тогда 
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные.ПолучитьЭлементы().Добавить();
		ТекущиеДанные.УИДЛок = Новый УникальныйИдентификатор;
		КА = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		КА.ОписаниеКА = "<Необходимо заполнить реквизиты документа>";
		КА.ФлагОшибки = Истина;
		КА.УИДЛок = Новый УникальныйИдентификатор;
		Элементы._ПредТипДогТек.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
	Иначе
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Ответ);
	Элементы._ПредТипДогТек.Развернуть(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	Модифицированность = Истина;
	ДоступностьКнопок();
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопок()
	Если Не ЗначениеЗаполнено(ЭтотОбъект["СтруктураРеквизитовФормы"].ПоследнийЦиклОбмена) Тогда 
		ТДЛ = Элементы._РеестрДокПОбНЛ.ТекущиеДанные;
		Элементы._РеестрДокПОбНЛУдалитьКодОперации.Доступность = (ТДЛ <> Неопределено);
		Элементы._ПредТипДогТек.КоманднаяПанель.Доступность = (ТДЛ <> Неопределено);
		
		ТДП = Элементы._ПредТипДогТек.ТекущиеДанные;
		Элементы._ПредТипДогТекУдалитьДоговорКА.Доступность = (ТДП <> Неопределено) 
			И ((УровеньГруппировки(ТДП) = 0)
			Или (ТДП.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1));
		Элементы._ПредТипДогТекДобавитьКонтрагент.Доступность = (ТДП <> Неопределено);
		Элементы._ПредТипДогТекДобавитьДокумент.Доступность = (ТДП <> Неопределено) И УровеньГруппировки(ТДП) > 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция КоличествоСтрокВРазвернутомПоддереве()
	Счетчик = 0;
	Для Каждого Стр1 Из ПредТипДогТек.ПолучитьЭлементы() Цикл 
		Счетчик = Счетчик + 1;
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл 
			Счетчик = Счетчик + Стр2.ПолучитьЭлементы().Количество();
		КонецЦикла;
	КонецЦикла;
	Возврат Счетчик;
КонецФункции

&НаКлиенте
Процедура _РеестрДокПОбНЛПриАктивизацииСтроки(Элемент)
	Если ЗначениеЗаполнено(ТекУИД) 
		И Элементы._РеестрДокПОбНЛ.ТекущиеДанные <> Неопределено
		И ТекУИД <> Элементы._РеестрДокПОбНЛ.ТекущиеДанные.УИД Тогда 
		
		СинхронизироватьСтроки();
	КонецЕсли;
	
	Если Элементы._РеестрДокПОбНЛ.ТекущиеДанные <> Неопределено
		И ТекУИД <> Элементы._РеестрДокПОбНЛ.ТекущиеДанные.УИД Тогда 
		
		ТекУИД = Элементы._РеестрДокПОбНЛ.ТекущиеДанные.УИД;
		
		ПредТипДогТек.ПолучитьЭлементы().Очистить();
		Для Каждого Стр Из _ПредТипДог.ПолучитьЭлементы() Цикл 
			Если Стр.УИД = ТекУИД Тогда 
				СкопироватьРекурсивно(ПредТипДогТек.ПолучитьЭлементы().Добавить(), Стр);
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСтрокВРазвернутомПоддереве() < 1000 И Элементы._ПредТипДогТек.Видимость = Истина Тогда 
			Для Каждого Стр Из ПредТипДогТек.ПолучитьЭлементы() Цикл
				Элементы._ПредТипДогТек.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		КонецЕсли;
		ДоступностьКнопок();
		ПересчетИтогов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтогов()
	ИтогСправа = 0;
	Для Каждого Стр1 Из ПредТипДогТек.ПолучитьЭлементы() Цикл 
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			ИтогСправа = ИтогСправа + Стр2.СумОпер;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекПриАктивизацииСтроки(Элемент)
	ДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	ТекущиеДанные = Элементы._ПредТипДогТек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или УровеньГруппировки(ТекущиеДанные) = 0 Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать контрагента, с которым заключен договор';
														|en = 'Необходимо выбрать контрагента, с которым заключен договор'"));
		Возврат;
	КонецЕсли;
	
	Если УровеньГруппировки(ТекущиеДанные) = 2 Тогда 
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Истина, Ложь, ТекущиеДанные);
	ПараметрыОткрытия = Новый Структура;
	ОО = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Отчет." + СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[1]  + ".Форма.ФормаВводаРеквизитовДокумента",
		ПараметрыОткрытия, ЭтотОбъект ,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Добавление = Истина Тогда 
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные.ПолучитьЭлементы().Добавить();
		ТекущиеДанные.УИДЛок = Новый УникальныйИдентификатор;
	Иначе
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Ответ);
	Элементы._ПредТипДогТек.Развернуть(ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	Модифицированность = Истина;
	ДоступностьКнопок();
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Функция УровеньГруппировки(ТекущиеДанные)
	Возврат ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, 0, 1 + УровеньГруппировки(ТекущиеДанные.ПолучитьРодителя()));
КонецФункции

&НаКлиенте
Процедура _ПредТипДогТекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭтотОбъект["СтруктураРеквизитовФормы"].ПоследнийЦиклОбмена) Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПредТипДогТек.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "_ПредТипДогТекСумОпер" Тогда
		Если УровеньГруппировки(ТекущиеДанные) <> 1 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли Поле.Имя = "_ПредТипДогТекОписаниеКА" Тогда
		УровеньГруппировки = УровеньГруппировки(ТекущиеДанные);
		Если УровеньГруппировки = 0 Тогда
			СтандартнаяОбработка = Ложь;
			РедактироватьТиповойДоговор(ТекущиеДанные.ИмяФайлДог, Элемент.ТекущиеДанные);
		ИначеЕсли УровеньГруппировки = 1 Тогда
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Ложь, Истина, ТекущиеДанные);
			ПараметрыОткрытия = Новый Структура;
			Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Имя,ИННФЛ,ИННЮЛ,КПП,НаимОрг,Отчество,Фамилия,СумОпер", ",") Цикл 
				ПараметрыОткрытия.Вставить(Элт, ТекущиеДанные[Элт]);
			КонецЦикла;
			ОО = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Отчет." + СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[1]  + ".Форма.ФормаВводаРеквизитовКонтрагента",
				ПараметрыОткрытия, ЭтотОбъект ,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли УровеньГруппировки = 2 Тогда 
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Ложь, Истина, ТекущиеДанные);
			ПараметрыОткрытия = Новый Структура;
			Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДатаДок,НомДок,ТипДок", ",") Цикл 
				ПараметрыОткрытия.Вставить(Элт, ТекущиеДанные[Элт]);
			КонецЦикла;
			ОО = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Отчет." + СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[1]  + ".Форма.ФормаВводаРеквизитовДокумента",
				ПараметрыОткрытия, ЭтотОбъект ,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРекурсивно(Приемник, Источник)
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Приемник.ПолучитьЭлементы().Очистить();
	Для Каждого Элт Из Источник.ПолучитьЭлементы() Цикл 
		СкопироватьРекурсивно(Приемник.ПолучитьЭлементы().Добавить(), Элт);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСтроки()
	КУдалению = Новый Массив;
	Для Каждого Стр1 Из _ПредТипДог.ПолучитьЭлементы() Цикл 
		Найдено = Ложь;
		Для Каждого Стр2 Из ПредТипДогТек.ПолучитьЭлементы() Цикл 
			Если Стр1.УИД = Стр2.УИД 
				И Стр1.УИДЛок = Стр2.УИДЛок Тогда 
				
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найдено 
			И ТекУИД = Стр1.УИД Тогда 
			КУдалению.Добавить(Стр1);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр1 Из КУдалению Цикл 
		_ПредТипДог.ПолучитьЭлементы().Удалить(_ПредТипДог.ПолучитьЭлементы().Индекс(Стр1));
	КонецЦикла;
	
	Для Каждого Стр1 Из ПредТипДогТек.ПолучитьЭлементы() Цикл 
		Найдено = Неопределено;
		Для Каждого Стр2 Из _ПредТипДог.ПолучитьЭлементы() Цикл 
			Если Стр1.УИД = Стр2.УИД 
				И Стр1.УИДЛок = Стр2.УИДЛок Тогда 
				
				Найдено = Стр2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найдено = Неопределено Тогда 
			Найдено = _ПредТипДог.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		СкопироватьРекурсивно(Найдено, Стр1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ФормРеоргПриИзменении(Элемент)
	Если _ФормРеорг = "" Или _ФормРеорг = "0" Тогда 
		_ИННЮЛРеорг = "";
		_КППРеорг = "";
		Элементы._ИННЮЛРеорг.Доступность = Ложь;
		Элементы._КППРеорг.Доступность = Ложь;
	Иначе 
		Элементы._ИННЮЛРеорг.Доступность = Истина;
		Элементы._КППРеорг.Доступность = Истина;
	КонецЕсли;
	Если Элемент <> Неопределено Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если ЭтотОбъект["ОТЧ"].ПривестиЗначение(_ОтчетГод) < 2010 Или ЭтотОбъект["ОТЧ"].ПривестиЗначение(_ОтчетГод) > 2099 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Некорректно указан год", , "_ОтчетГод");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(_Период) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан период", , "_Период");
		Возврат;
	КонецЕсли;
	
	Доступность = Ложь;
	РезультатВыполнения = ЗаполнитьАвтоНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершениеПослеЗаполнения", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется заполнение по данным информационной базы';
												|en = 'Выполняется заполнение по данным информационной базы'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершениеПослеЗаполнения(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	
	Если РезультатЗагрузки = Неопределено
		ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить автозаполнение...';
														|en = 'Не удалось выполнить автозаполнение...'"));
		Возврат;
	КонецЕсли;

	ЗагрузитьПодготовленныеДанные();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	Если _Период = "21" Или _Период = "51" Тогда 
		_ПериодЗаполнения = _ОтчетГод + "0101";
	ИначеЕсли _Период = "22" Или _Период = "54" Тогда
		_ПериодЗаполнения = _ОтчетГод + "0401";
	ИначеЕсли _Период = "23" Или _Период = "55" Тогда
		_ПериодЗаполнения = _ОтчетГод + "0701";
	ИначеЕсли _Период = "24" Или _Период = "56" Тогда
		_ПериодЗаполнения = _ОтчетГод + "1001";
	Иначе
		_ПериодЗаполнения = "00010101";
	КонецЕсли;
	_ПериодЗаполнения = Дата(_ПериодЗаполнения);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Объект.Организация);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ВидУведомления", Объект.ВидУведомления);
	ПараметрыОтчета.Вставить("РегистрацияВИФНС", Объект.РегистрацияВИФНС);
	ПараметрыОтчета.Вставить("ДатаПодписи", Объект.ДатаПодписи);
	ПараметрыОтчета.Вставить("ПериодОтчета", _ПериодЗаполнения);
	
	Контейнер = Новый Структура();
	
	Контейнер.Вставить("РегистрацияВИФНС", Объект.РегистрацияВИФНС);
	Контейнер.Вставить("ДатаПодписи", Объект.ДатаПодписи);
	Контейнер.Вставить("Реестр", Новый ДеревоЗначений);
	Контейнер.Реестр.Колонки.Добавить("КодОпер", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	Контейнер.Реестр.Колонки.Добавить("ВидОпер", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	Контейнер.Реестр.Колонки.Добавить("СумНеоблОпер", ОбщегоНазначения.ОписаниеТипаЧисло(17, 2));
	Контейнер.Реестр.Колонки.Добавить("ИмяФайлДог", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	Контейнер.Реестр.Колонки.Добавить("СумОпер", ОбщегоНазначения.ОписаниеТипаЧисло(17, 2));
	Контейнер.Реестр.Колонки.Добавить("НаимОрг", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Контейнер.Реестр.Колонки.Добавить("ИННЮЛ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Контейнер.Реестр.Колонки.Добавить("КПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Контейнер.Реестр.Колонки.Добавить("ИННФЛ", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Контейнер.Реестр.Колонки.Добавить("Фамилия", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	Контейнер.Реестр.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	Контейнер.Реестр.Колонки.Добавить("Отчество", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	Контейнер.Реестр.Колонки.Добавить("ТипДок", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	Контейнер.Реестр.Колонки.Добавить("НомДок", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Контейнер.Реестр.Колонки.Добавить("ДатаДок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ЭтаФормаИмя = СтрЗаменить(ИмяФормы, "Отчет.", "");
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне_Уведомления",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ЭтотОбъект["АдресХранилища"] = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	ТекУИД = Неопределено;
	ПараметрыСтраницы = Неопределено;
	СтруктураДанных = ПолучитьИзВременногоХранилища(ЭтотОбъект["АдресХранилища"]);
	_РеестрДокПОбНЛ.Очистить();
	_ПредТипДог.ПолучитьЭлементы().Очистить();
	ПредТипДогТек.ПолучитьЭлементы().Очистить();
	
	СтруктураПоискаПоКоду = Новый Структура("Код");
	
	Для Каждого СтрКодВид Из СтруктураДанных.Контейнер.Реестр.Строки Цикл 
		УИДКодВид = Новый УникальныйИдентификатор;
		
		НовСтрКодВид = _РеестрДокПОбНЛ.Добавить();
		НовСтрКодВид.УИД = УИДКодВид;
		НовСтрКодВид.КодОпер = СтрКодВид.КодОпер;
		НовСтрКодВид.ВидОпер = СтрКодВид.ВидОпер;
		НовСтрКодВид.СумНеоблОпер = СтрКодВид.СумНеоблОпер;
		
		СтруктураПоискаПоКоду.Код = СтрКодВид.КодОпер;
		ОтборПоКоду = СпискиВыбораКодов2023.НайтиСтроки(СтруктураПоискаПоКоду);
		Если ОтборПоКоду.Количество() > 0 Тогда
			НовСтрКодВид.ОписаниеОперации = ОтборПоКоду[0].Название;
		Иначе
			НовСтрКодВид.ОписаниеОперации = "Операции по коду " + СтрКодВид.КодОпер;
		КонецЕсли;
		
		Для Каждого СтрИмяФайлДог Из СтрКодВид.Строки Цикл
			УИДЛок = Новый УникальныйИдентификатор;
			ЭлементДерева = _ПредТипДог.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементДерева, СтрИмяФайлДог);
			ЭлементДерева.УИД = УИДКодВид;
			ЭлементДерева.УИДЛок = УИДЛок;
			ЭлементДерева.ОписаниеКА = ?(ЗначениеЗаполнено(СтрИмяФайлДог.ИмяФайлДог), 
										СтрИмяФайлДог.ИмяФайлДог, 
										"<типовой договор не представлен>");
			
			Для Каждого СтрКонтрагент Из СтрИмяФайлДог.Строки Цикл
				ЭлементДереваКонтрагент = ЭлементДерева.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементДереваКонтрагент, СтрКонтрагент);
				ЭлементДереваКонтрагент.УИДЛок = Новый УникальныйИдентификатор;
				
				Если ЗначениеЗаполнено(СтрКонтрагент.ИННЮЛ) Или ЗначениеЗаполнено(СтрКонтрагент.НаимОрг) Тогда 
					ЭлементДереваКонтрагент.ОписаниеКА = СтрКонтрагент.НаимОрг + ", ИНН/КПП: " + СтрКонтрагент.ИННЮЛ + "/" + СтрКонтрагент.КПП;
					
					Если (ЗначениеЗаполнено(СтрКонтрагент.ИННЮЛ) 
						И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрКонтрагент.ИННЮЛ, Истина, ""))
						Или (ЗначениеЗаполнено(СтрКонтрагент.КПП) 
						И Не РегламентированнаяОтчетностьВызовСервера.КППСоответствуетТребованиямФНС(СтрКонтрагент.КПП))
						Или (Не ЗначениеЗаполнено(СтрКонтрагент.НаимОрг)) Тогда 
						
						ЭлементДереваКонтрагент.ФлагОшибки = Истина;
					КонецЕсли;
				Иначе
					ЭлементДереваКонтрагент.ОписаниеКА = СтрКонтрагент.Фамилия + " " + СтрКонтрагент.Имя + " "
						+ СтрКонтрагент.Отчество + ?(ЗначениеЗаполнено(СтрКонтрагент.ИННФЛ), ", ИНН: " + СтрКонтрагент.ИННФЛ, "");
						
					Если (ЗначениеЗаполнено(СтрКонтрагент.ИННФЛ) 
							И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрКонтрагент.ИННФЛ, Ложь, "")) 
						Или (ЗначениеЗаполнено(СтрКонтрагент.Фамилия) И Не ЗначениеЗаполнено(СтрКонтрагент.Имя))
						Или (Не ЗначениеЗаполнено(СтрКонтрагент.Фамилия) И ЗначениеЗаполнено(СтрКонтрагент.Имя)) Тогда 
						ЭлементДереваКонтрагент.ФлагОшибки = Истина;
					КонецЕсли;
				КонецЕсли;
					
				Для Каждого СтрДокумент Из СтрКонтрагент.Строки Цикл
					ЭлементДереваДокумент = ЭлементДереваКонтрагент.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементДереваДокумент, СтрДокумент);
					ЭлементДереваДокумент.УИДЛок = Новый УникальныйИдентификатор;
					
					ЭлементДереваДокумент.ОписаниеКА = СтрДокумент.ТипДок + " №" + 
						?(ЗначениеЗаполнено(СтрДокумент.НомДок), СтрДокумент.НомДок, "б/н") + " от " +
						Формат(СтрДокумент.ДатаДок, "ДЛФ=DD; ДП=-");
						
						Если (Не ЗначениеЗаполнено(СтрДокумент.ТипДок))
							Или (Не ЗначениеЗаполнено(СтрДокумент.НомДок))
							Или (Не ЗначениеЗаполнено(СтрДокумент.ДатаДок))
							Или (ТипЗнч(СтрДокумент.ДатаДок) <> Тип("Дата"))
							Или (Год(СтрДокумент.ДатаДок) < 1900) Тогда 
							
							ЭлементДереваДокумент.ФлагОшибки = Истина;
						КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Модифицированность = Истина;
	Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Выполнение = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ПараметрыПеретаскивания.Значение.Количество() <> 1 Тогда 
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	Родитель = ПредТипДогТек.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).ПолучитьРодителя();
	Если Родитель = Неопределено
		Или Родитель.ПолучитьЭлементы().Количество() <= 1 Тогда
		
		Выполнение = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Строка = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	УровеньГруппировкиПолучатель = УровеньГруппировки(ПредТипДогТек.НайтиПоИдентификатору(Строка));
	УровеньГруппировкиЗначение = УровеньГруппировки(ПредТипДогТек.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]));
	Если УровеньГруппировкиПолучатель + 1 <> УровеньГруппировкиЗначение Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _РеестрДокПОбНЛПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекСумОперПриИзменении(Элемент)
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Процедура _ПредТипДогТекПриИзменении(Элемент)
	ПересчетИтогов();
КонецПроцедуры

&НаКлиенте
Процедура _ИмяФайлТребНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаВыбораТребования();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДерева(Команда)
	Если Модифицированность Тогда 
		СинхронизироватьСтроки();
	КонецЕсли;
	Доступность = Ложь;
	РезультатВыполнения = ПроверкаДереваНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаДереваЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка контрагентов';
												|en = 'Выполняется проверка контрагентов'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ВывестиТекущееДерево();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаДереваНаСервере()
	Контейнер = Новый Структура();
	Контейнер.Вставить("_ПредТипДог", ДанныеФормыВЗначение(_ПредТипДог, Тип("ДеревоЗначений")));
	Контейнер.Вставить("ИДРедакцииОтчета", Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7));
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты." + Объект.ИмяОтчета + ".ПроверкаОтчета",
		Контейнер, ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ЭтотОбъект["АдресХранилища"] = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПроверочныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПроверочныеДанные()
	СтруктураДанных = ПолучитьИзВременногоХранилища(ЭтотОбъект["АдресХранилища"]);
	ЗначениеВДанныеФормы(СтруктураДанных._ПредТипДог, _ПредТипДог);
	Модифицированность = Истина;
	Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДереваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	
	Если Результат = Неопределено ИЛИ Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку...';
														|en = 'Не удалось выполнить проверку...'"));
		Возврат;
	КонецЕсли;

	ЗагрузитьПроверочныеДанные();
	ВывестиТекущееДерево();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекущееДерево()
	Если Элементы._РеестрДокПОбНЛ.ТекущиеДанные <> Неопределено Тогда 
		ПредТипДогТек.ПолучитьЭлементы().Очистить();
		Для Каждого Стр Из _ПредТипДог.ПолучитьЭлементы() Цикл 
			Если Стр.УИД = ТекУИД Тогда 
				СкопироватьРекурсивно(ПредТипДогТек.ПолучитьЭлементы().Добавить(), Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоСтрокВРазвернутомПоддереве() < 1000 И Элементы._ПредТипДогТек.Видимость = Истина Тогда 
		Для Каждого Стр Из ПредТипДогТек.ПолучитьЭлементы() Цикл
			Элементы._ПредТипДогТек.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	НайденаОшибка = Ложь;
	СпозиционироватьсяНаОшибочнойСтроке(ПредТипДогТек, НайденаОшибка);
	Если НайденаОшибка Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибочные данные подсвечены красным цветом");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Для данного кода/вида операции ошибок не обнаружено");
	КонецЕсли;
	ДоступностьКнопок();
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаОшибочнойСтроке(ТекущийЭлемент, НайденаОшибка)
	Для Каждого Элемент Из ТекущийЭлемент.ПолучитьЭлементы() Цикл
		Если НайденаОшибка Тогда 
			Возврат;
		КонецЕсли;
		Если Элемент.ФлагОшибки Тогда
			Элементы._ПредТипДогТек.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
			НайденаОшибка = Истина;
			Возврат;
		КонецЕсли;
		
		СпозиционироватьсяНаОшибочнойСтроке(Элемент, НайденаОшибка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТребования()
	Если ПодключенДокументооборотСКонтролирующимОрганом Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ВыбратьТребование(ЭтотОбъект);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Для выбора входящего требования должна быть подключена 1С-Отчетность")
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	ДоступностьРеквизитов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДоступностьРеквизитов(Доступность)
	РеквизитыДляРедактирования = "ГруппаПериод;ГруппаИсходноеТребование;ГруппаЭтоУведомление;ГруппаП;ГруппаРеестрВерх";
	
	Элементы._РеестрДокПОбНЛ.КоманднаяПанель.Доступность = Ложь;
	Элементы._ПредТипДогТек.КоманднаяПанель.Доступность = Ложь;
	
	Для Каждого Элт Из СтрРазделить(РеквизитыДляРедактирования, ";", Ложь) Цикл 
		Элементы[Элт].Доступность = Доступность;
	КонецЦикла;
КонецПроцедуры

#Область ЗагрузкаИзЭлектронногоПредставления

&НаКлиенте
Процедура ЗаполнениеИзФайловНажатие(Элемент)
	ПараметрыПодбора = Новый Структура;
	ВерсияФормата = Новый СписокЗначений;
	ВерсияФормата.Добавить("5.02");
	ПараметрыПодбора.Вставить("ВерсияФормата", ВерсияФормата);
	ПараметрыПодбора.Вставить("КНД", "1155127");
	ПараметрыПодбора.Вставить("ПрефиксФайлаВыгрузки", "KO_RROBNL");
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаПодбораФайловДляЗагрузки",
		ПараметрыПодбора, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаОснованииФайлов(ФайлыВыгрузки, Очищать) Экспорт 
	Доступность = Ложь;
	РезультатВыполнения = ЗаполнитьНаОснованииФайловНаСервере(ФайлыВыгрузки, Очищать);
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьНаОснованииФайловПослеЗаполнения", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется формирование данных на основании файлов выгрузки';
												|en = 'Выполняется формирование данных на основании файлов выгрузки'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаОснованииФайловПослеЗаполнения(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	
	Если РезультатЗагрузки = Неопределено
		ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать данные...';
														|en = 'Не удалось сформировать данные...'"));
		Возврат;
	КонецЕсли;

	ЗагрузитьДанныеКонсолидации();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаОснованииФайловНаСервере(ФайлыВыгрузки, Очищать)
	КонтекстЗаполнения = Новый Структура;
	КонтекстЗаполнения.Вставить("_РеестрДокПОбНЛ", ДанныеФормыВЗначение(_РеестрДокПОбНЛ, Тип("ТаблицаЗначений")));
	КонтекстЗаполнения.Вставить("_ПредТипДог", ДанныеФормыВЗначение(_ПредТипДог, Тип("ДеревоЗначений")));
	Если Очищать Тогда
		КонтекстЗаполнения._РеестрДокПОбНЛ.Очистить();
		КонтекстЗаполнения._ПредТипДог.Строки.Очистить();
	КонецЕсли;
	КонтекстЗаполнения.Вставить("ОТЧ", Новый ОписаниеТипов("Число"));
	КонтекстЗаполнения.Вставить("ОтборВДереве", Новый Структура("ИмяЭлемента"));
	КонтекстЗаполнения.Вставить("ФайлыВыгрузки", ПолучитьИзВременногоХранилища(ФайлыВыгрузки));
	КонтекстЗаполнения.Вставить("СпискиВыбораКодов2023", ДанныеФормыВЗначение(СпискиВыбораКодов2023, Тип("ТаблицаЗначений")));
	КонтекстЗаполнения.ФайлыВыгрузки.Колонки.Добавить("Дерево");
	Для Каждого Стр Из КонтекстЗаполнения.ФайлыВыгрузки Цикл 
		Стр.Дерево = ПолучитьИзВременногоХранилища(Стр.Адрес);
		ПоместитьВоВременноеХранилище(Неопределено, Стр.Адрес);
	КонецЦикла;
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты." + Объект.ИмяОтчета + ".КонсолидироватьВФоне",
		КонтекстЗаполнения, ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ЭтотОбъект["АдресХранилища"] = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьДанныеКонсолидации();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеКонсолидации()
	КонтекстЗаполнения = ПолучитьИзВременногоХранилища(ЭтотОбъект["АдресХранилища"]);
	ЗначениеВДанныеФормы(КонтекстЗаполнения._РеестрДокПОбНЛ, _РеестрДокПОбНЛ);
	ЗначениеВДанныеФормы(КонтекстЗаполнения._ПредТипДог, _ПредТипДог);
	Модифицированность = Истина;
	Доступность = Истина;
КонецПроцедуры

#КонецОбласти