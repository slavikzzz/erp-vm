#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(НовыеНастройкиКД);

КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
// Параметры:
//	Контекст							- Произвольный									- параметры контекста, в котором используется отчет.
//	КлючСхемы							- Строка										- идентификатор текущей схемы компоновщика настроек.
//	КлючВарианта						- Строка, Неопределено							- имя предопределенного или уникальный идентификатор пользовательского
//																							варианта отчета.
//																							Неопределено когда вызов для варианта расшифровки или без контекста.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных, Неопределено		- настройки варианта отчета, которые будут загружены
//																							в компоновщик настроек после его инициализации.
//																							Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных,
//											Неопределено								- пользовательские настройки, которые будут загружены в компоновщик
//																							настроек после его инициализации.
//																							Неопределено когда пользовательские настройки не надо загружать
//																							(уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	КлючСхемы = КлючВарианта;
	
	УстановитьОграничениеПоФункциональнымОпциям(Контекст, КлючСхемы);
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиПолей = ПараметризуемыеЗаголовкиПолей();
	КомпоновкаДанныхСервер.УстановитьЗаголовкиВыбранныхПолей(НовыеНастройкиКД.Выбор.Элементы, ЗаголовкиПолей);
	
	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = НовыеНастройкиКД.Структура.ИдентификаторПользовательскойНастройки;
	
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		НайденныйЭлементНастройки = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ИдентификаторНастройки);
		
		Если НайденныйЭлементНастройки <> Неопределено Тогда 
			КомпоновкаДанныхСервер.УстановитьЗаголовкиПолейГруппировки(НайденныйЭлементНастройки.Элементы, ЗаголовкиПолей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;

	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ВыпускПродукции.Запрос;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения", "ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения", "ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Номенклатура"));
	
	СхемаКомпоновкиДанных.НаборыДанных.ВыпускПродукции.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(ПараметризуемыеЗаголовкиПолей(), МакетКомпоновки);
	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураДинамическихЗаголовков(), МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ВспомогательныеПараметрыОтчета()
	
	ВспомогательныеПараметры = Новый Массив;
	
	ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
	
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;

КонецФункции

Функция ПараметризуемыеЗаголовкиПолей()
	
	Возврат КомпоновкаДанныхСервер.СоответствиеЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек);
	
КонецФункции

Функция СтруктураДинамическихЗаголовков()
	ДинамическиеЗаголовки = Новый Структура;
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГруппировкаНоменклатуры");
	ДоступнаяНастройка = ОтчетыКлиентСервер.НайтиДоступнуюНастройку(КомпоновщикНастроек.Настройки, Параметр);
	Если ДоступнаяНастройка <> Неопределено Тогда
		ПредставлениеЗначенияПараметра = ДоступнаяНастройка.ДоступныеЗначения[Параметр.Значение-1];
		ДинамическиеЗаголовки.Вставить("ГруппировкаНоменклатуры", ПредставлениеЗначенияПараметра);
	КонецЕсли;
	
	Возврат ДинамическиеЗаголовки;
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(Настройки)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(Настройки, "ЕдиницыКоличества");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
		Или ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(Настройки, "ЗаказНаПроизводство21");
		УдалитьУсловноеОформлениеПоля(Настройки, "ЗаказНаПроизводство21");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
		Или ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(Настройки, "ЗаказНаПроизводство");
		УдалитьУсловноеОформлениеПоля(Настройки, "ЗаказНаПроизводство");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(Настройки, "ТипЗапасов");
		УдалитьУсловноеОформлениеПоля(Настройки, "ТипЗапасов");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеПоФункциональнымОпциям(Контекст, КлючСхемы)
	
	ЕстьИзменения = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
		Или ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ЕстьИзменения = Истина;
		УстановитьОграничениеИспользованияПоля("ЗаказНаПроизводство21");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
		Или ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ЕстьИзменения = Истина;
		УстановитьОграничениеИспользованияПоля("ЗаказНаПроизводство");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ЕстьИзменения = Истина;
		УстановитьОграничениеИспользованияПоля("ТипЗапасов");
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеИспользованияПоля(ИмяПоля, Ограничивать = Истина)
	
	Для Каждого ТекНабор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		
		ТекПоле = ТекНабор.Поля.Найти(ИмяПоля);
		
		Если Не ТекПоле = Неопределено Тогда
			
			ТекПоле.ОграничениеИспользования.Группировка = Ограничивать;
			ТекПоле.ОграничениеИспользования.Поле = Ограничивать;
			ТекПоле.ОграничениеИспользования.Порядок = Ограничивать;
			ТекПоле.ОграничениеИспользования.Условие = Ограничивать;
			
			ТекПоле.ОграничениеИспользованияРеквизитов.Группировка = Ограничивать;
			ТекПоле.ОграничениеИспользованияРеквизитов.Поле = Ограничивать;
			ТекПоле.ОграничениеИспользованияРеквизитов.Порядок = Ограничивать;
			ТекПоле.ОграничениеИспользованияРеквизитов.Условие = Ограничивать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет условное оформление заданного поля.
// 
// Параметры:
// 	Настройки - НастройкиКомпоновкиДанных - настройки отчета.
// 	ИмяПоля - Строка - имя поля.
//
Процедура УдалитьУсловноеОформлениеПоля(Настройки, ИмяПоля)
	
	ОформлениеКУдалению = Новый Массив;
	Для Каждого ТекОформление Из Настройки.УсловноеОформление.Элементы Цикл
		
		ПоляКУдалению = Новый Массив;
		Для Каждого ТекПоле Из ТекОформление.Поля.Элементы Цикл
			Если ТекПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				ПоляКУдалению.Добавить(ТекПоле);
			КонецЕсли;
		КонецЦикла;
		
		Если ПоляКУдалению.Количество() = ТекОформление.Поля.Элементы.Количество() Тогда
			ОформлениеКУдалению.Добавить(ТекОформление);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекПоле Из ПоляКУдалению Цикл
			ТекОформление.Поля.Элементы.Удалить(ТекПоле);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекОформление Из ОформлениеКУдалению Цикл
		Настройки.УсловноеОформление.Элементы.Удалить(ТекОформление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли