
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	ВнеоборотныеАктивыСлужебный.ПроверитьПериодОтчетаВерсии24(
		ЗначенияОтбораДанных.НачалоПериода, 
		ЗначенияОтбораДанных.ОкончаниеПериода, 
		НСтр("ru = 'Отчет не поддерживает получение данных до даты начала учета внеоборотных активов версии 2.4 - %1.';
			|en = 'Report does not support data retrieval prior to the commencement date of accounting of non-current assets 2.4 -%1.'"),
		Отказ); 
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	УстановитьПараметрыОтчета(НастройкиОсновнойСхемы);
	
	ОбесценениеВНАСервер.УстановитьВидимостьДанныхОбесцененияВОтчете(НастройкиОсновнойСхемы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Неопределено, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ОформитьШапкуОтчета(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета:
//   	* Параметры - Структура - может содержать свойства:
//				** ПараметрКоманды - СправочникСсылка.НематериальныеАктивы -
//				** ОписаниеКоманды - Структура - может содержать свойства:
//					*** ДополнительныеПараметры - Структура - 
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда 
		
		ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;
		Параметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;
		
		Если ТипЗнч(Параметры.ПараметрКоманды) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ЭтаФорма.ФормаПараметры.Отбор.Вставить("НематериальныйАктив", Параметры.ПараметрКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета
 
Процедура ОформитьШапкуОтчета(ТабДок)
	
	СписокГруппЯчеек = Новый Массив;
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Показатели';
									|en = 'Indicators'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Дата принятия к учету';
									|en = 'Date of recognition'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Первоначальная стоимость';
									|en = 'Initial cost'"));
	
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Стоимость';
									|en = 'Profit'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Амортизация';
									|en = 'Depreciation'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Остаточная стоимость';
									|en = 'Net book value'"));
	
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Увеличение стоимости';
									|en = 'Cost increase'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Начисление амортизации';
									|en = 'Depreciation charge'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Уменьшение стоимости';
									|en = 'Cost reduction'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Списание амортизации';
									|en = 'Depreciation write-off'"));
	
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Обесценение';
									|en = 'Impairment'"));
	
	СписокПодчиненныхЯчеек = Новый Массив;
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'БУ';
										|en = 'BKG'"));
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'НУ';
										|en = 'TA'"));
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'ПР';
										|en = 'PD'"));
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'ВР';
										|en = 'TD'"));
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'УУ';
										|en = 'MA'"));
	
	ВнеоборотныеАктивыСлужебный.ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек);
	
КонецПроцедуры

Процедура УстановитьПараметрыОтчета(НастройкиОсновнойСхемы)

	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоказательБУ", НСтр("ru = 'БУ';
																								|en = 'BKG'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоказательНУ", НСтр("ru = 'НУ';
																								|en = 'TA'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоказательПР", НСтр("ru = 'ПР';
																								|en = 'PD'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоказательВР", НСтр("ru = 'ВР';
																								|en = 'TD'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ПоказательУУ", НСтр("ru = 'УУ';
																								|en = 'MA'"));
	
	// ТипыДокументовСписаниеАмортизации
	ТипыДокументов = Новый СписокЗначений;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ТипыДокументовСписаниеАмортизации", ТипыДокументов);
	
	// ТипыДокументовНачислениеАмортизации
	ТипыДокументов = Новый СписокЗначений;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РаспределениеНДС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.УлучшениеНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ТипыДокументовНачислениеАмортизации", ТипыДокументов);
	
	// ТипыДокументовУвеличениеСтоимости
	ТипыДокументов = Новый СписокЗначений;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.УлучшениеНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РаспределениеНДС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ТипыДокументовУвеличениеСтоимости", ТипыДокументов);
	
	// ТипыДокументовУменьшениеСтоимости
	ТипыДокументов = Новый СписокЗначений;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.УлучшениеНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РаспределениеНДС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.УлучшениеНМА"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "ТипыДокументовУменьшениеСтоимости", ТипыДокументов);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы)

	ЗначенияОтбораДанных = Новый Структура;
	
	ОтчетыУТСервер.ПериодОтчета(НастройкиОсновнойСхемы, ЗначенияОтбораДанных);
	
	Возврат ЗначенияОтбораДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли