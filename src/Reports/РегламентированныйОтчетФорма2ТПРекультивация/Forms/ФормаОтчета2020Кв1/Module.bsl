&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/02/2021";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета   = "0609015";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы["ИмяМакетаТабличногоДокумента"]));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"] = "СхемаВыгрузкиXML2020Кв1";
	СтруктураРеквизитовФормы["ИмяМакетаТабличногоДокумента"] = "ФормаОтчета2020Кв1_ФормаОтчета";
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СформироватьСпискиВыбора();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	ФормироватьСтруктуруСвойствСтраниц();
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
			_Приложения.ПолучитьЭлементы().Очистить();
			ИмяФайлаДоверенности = "";
			Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
			ХешДоверенности = "";
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			_Приложения.ПолучитьЭлементы().Очистить();
			ИмяФайлаДоверенности = "";
			Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
			ХешДоверенности = "";
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "РПН");
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	РегламентированнаяОтчетность.ЗагрузитьОбщиеСправочникиРПН(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// 6. Обязательный раздел для выгрузки или нет
	// 7. Обязательный раздел для выгрузки или нет
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                    = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	СписокСохранения.Свойство("Доверенность", Доверенность);
	СписокСохранения.Свойство("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Свойство("ХешДоверенности", ХешДоверенности);
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета );
	Если СписокСохранения.Свойство("_Приложения") Тогда 
		ЗначениеВДанныеФормы(СписокСохранения._Приложения, _Приложения);
	КонецЕсли;
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			РегламентированнаяОтчетность.УстановитьЗначениеИФорматВПоле(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "по состоянию на 1 января "
	+ НРег(Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, 1), "ДФ = 'гггг'")) + " года";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, 1), "ДФ = 'гггг'")) + " года";
	
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата1.Текст = "Наличие нарушенных земель на 01.01."
		+ Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=") + "г." + Символы.ПС + "  - всего";
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата2.Текст = "За отчетный "
		+ Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=") + "г." + Символы.ПС + "  Нарушено земель - всего";
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата3.Текст = "Наличие нарушенных земель на 01.01."
		+ Формат((Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) + 1), "ЧГ=") + "г." + Символы.ПС + "  - всего";
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата4.Текст = "Наличие заскладированного плодородного слоя почвы" + Символы.ПС + "на "
		+ Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=") + "г. - всего";
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата5.Текст = "За отчетный "
		+ Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=") + "г." + Символы.ПС + "Снято плодородного слоя почвы: "
		+ Символы.ПС + "  площадь";
	ПолеТабличногоДокументаФормаОтчета.Области.ТекстДата6.Текст = "Наличие заскладированного плодородного слоя почвы" + Символы.ПС + "на "
		+ Формат((Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) + 1), "ЧГ=") + "г. - всего";
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтотОбъект, ВПрограммеИзмененаДатаПодписи);
	Сведения = "ИННЮЛ,ОГРН,НаимЮЛПол,НаимЮЛСокр,КППЮЛ,ОКПО,ОКВЭД,ФИОРук,ДолжнРук,ОКТМО,ОргИндекс,"
		+ "АдрЮР,ФИОРук,ДолжнРук,ТелОрганизации,АдресЭлектроннойПочтыОрганизации";
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	ПолеТабличногоДокументаФормаОтчета.Области.inn.Значение = ОргСведения.ИННЮЛ;
	ПолеТабличногоДокументаФормаОтчета.Области.ogrn.Значение = ОргСведения.ОГРН;
	ПолеТабличногоДокументаФормаОтчета.Области.kpp.Значение = ОргСведения.КППЮЛ;
	ПолеТабличногоДокументаФормаОтчета.Области.full_name_organization.Значение = ОргСведения.НаимЮЛПол;
	ПолеТабличногоДокументаФормаОтчета.Области.short_name_organization.Значение = ОргСведения.НаимЮЛСокр;
	ПолеТабличногоДокументаФормаОтчета.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ПолеТабличногоДокументаФормаОтчета.Области.okved.Значение = ОргСведения.ОКВЭД;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_full_name.Значение = ОргСведения.ФИОРук;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_position.Значение = ОргСведения.ДолжнРук;
	ПолеТабличногоДокументаФормаОтчета.Области.post_address_post.Значение = ОргСведения.ОргИндекс;
	ПолеТабличногоДокументаФормаОтчета.Области.post_address_street.Значение = ОргСведения.АдрЮР;
	ПолеТабличногоДокументаФормаОтчета.Области.legal_address_post.Значение = ОргСведения.ОргИндекс;
	ПолеТабличногоДокументаФормаОтчета.Области.legal_address_street.Значение = ОргСведения.АдрЮР;
	ПолеТабличногоДокументаФормаОтчета.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_full_name.Значение = ОргСведения.ФИОРук;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_position.Значение = ОргСведения.ДолжнРук;
	ПолеТабличногоДокументаФормаОтчета.Области.phone.Значение = ОргСведения.ТелОрганизации;
	ПолеТабличногоДокументаФормаОтчета.Области.email.Значение = ОргСведения.АдресЭлектроннойПочтыОрганизации;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " по состоянию на 1 января " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	ИначеЕсли Область.Имя = "is_separate" 
		Или Область.Имя = "is_ceo"
		Или Область.Имя = "is_non_resident" Тогда
		Область.Значение = Не Область.Значение;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Область.Имя = "region_oktmo" Или Область.Имя = "region_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМОРегионы");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["region_oktmo"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "post_address_municipality_oktmo" Или Область.Имя = "post_address_municipality_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_oktmo"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "legal_address_municipality_oktmo" Или Область.Имя = "legal_address_municipality_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_oktmo"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "territory_org_code" Или Область.Имя = "territory_org_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "РПН");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_code"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "okved" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКВЭД");
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, Неопределено);
	ИначеЕсли Область.Имя = "ФайлДоверенностиДобавить" Тогда
		Если Не ЗначениеЗаполнено(Доверенность) Тогда 
			Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
				ТекстВопроса = "Перед добавлением доверенности необходимо сохранить отчет. Продолжить?";
				ОО = Новый ОписаниеОповещения("ВопросДоверенностьЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Иначе
				ВопросДоверенностьЗавершение(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		Иначе
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(Доверенность), Ложь);
		КонецЕсли;
	ИначеЕсли Область.Имя = "ФайлДоверенностиУдалить" И Область.Гиперссылка = Истина И ЗначениеЗаполнено(Доверенность) Тогда
		УдалитьФайлДоверенности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, ОбластьНаименование = Неопределено) Экспорт
	
	Если ТаблицаВыбора = Неопределено Или СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ИсходноеЗначение = Область.Значение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("Область, ОбластьНаименование", Область, ОбластьНаименование);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ОбластьНаименование = ДополнительныеПараметры.ОбластьНаименование;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П000004") = 1 Тогда 
		ДругаяОбласть1Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000004", "П000002")];
		ДругаяОбласть2Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000004", "П000002")];
		ДругаяОбласть1Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000004", "П000002")]);
		ДругаяОбласть2Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000004", "П000002")]);
	ИначеЕсли СтрНайти(Область.Имя, "П000005") = 1 Тогда 
		ДругаяОбласть1Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000005", "П000006")];
		ДругаяОбласть2Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000005", "П000007")];
		ДругаяОбласть1Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000005", "П000006")]);
		ДругаяОбласть2Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000005", "П000007")]);
	ИначеЕсли Область.Имя = "КодОргРПН" Тогда 
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["ОргРПН"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["ОргРПН"];
	ИначеЕсли Область.Имя = "region_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
	ИначеЕсли Область.Имя = "post_address_municipality_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_name"];
	ИначеЕсли Область.Имя = "legal_address_municipality_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_name"];
	ИначеЕсли Область.Имя = "territory_org_code" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
	ИначеЕсли Область.Имя = "okved" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = Неопределено;
		ДругаяОбласть2Наименование = Неопределено;
	КонецЕсли;
	
	Область.Значение = СокрЛ(РезультатВыбора["Код"]);
	ДругаяОбласть1Код.Значение = Область.Значение;
	ДругаяОбласть2Код.Значение = Область.Значение;
	
	Если ОбластьНаименование <> Неопределено Тогда
		РезультатВыбораНазвание = РезультатВыбора.Название;
		Если Область.Значение = "" Тогда 
			РезультатВыбораНазвание = "";
		КонецЕсли;
		ОбластьНаименование.Значение = РезультатВыбораНазвание;
		ДругаяОбласть1Наименование.Значение = РезультатВыбораНазвание;
		ДругаяОбласть2Наименование.Значение = РезультатВыбораНазвание;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтображениеГиперссылокДоверенности(Форма)
	ФайлДоверенностиУдалить = Форма.ПолеТабличногоДокументаФормаОтчета.Области["ФайлДоверенностиУдалить"];
	ФайлДоверенностиДобавить = Форма.ПолеТабличногоДокументаФормаОтчета.Области["ФайлДоверенностиДобавить"];
	Если ЗначениеЗаполнено(Форма.Доверенность) Тогда 
		ФайлДоверенностиУдалить.Гиперссылка = Истина;
		ФайлДоверенностиУдалить.Текст = "х";
		ФайлДоверенностиДобавить.Текст = Форма.ИмяФайлаДоверенности;
	Иначе
		ФайлДоверенностиУдалить.Гиперссылка = Ложь;
		ФайлДоверенностиУдалить.Текст = "";
		ФайлДоверенностиДобавить.Текст = "Добавить файл доверенности";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлДоверенности()
	Попытка
		ПрисоединенныйФайлОбъект = Доверенность.ПолучитьОбъект();
		Если ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы) Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
		ХешДоверенности = "";
		ПолеТабличногоДокументаФормаОтчета.Области["attorney_file_attachment_file"].Значение = "";
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю("При установке файла доверенности произошли ошибки");
		Возврат;
	КонецПопытки;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВопросДоверенностьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияЗавершениеЗавершение", ЭтотОбъект);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияЗавершениеЗавершение(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьДоверенностьЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоверенностьЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("ПодписатьГОСТ2012Завершение", ЭтотОбъект, Новый Структура("СтрокаПоиска, АдресФайла", ВыбИмяФайла, АдресФайла));
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		ХешДоверенности = НРег(Результат.Хеш);
	Иначе
		ХешДоверенности = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ХешДоверенности) Тогда 
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог) Экспорт 
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	Доверенность = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ИмяФайлаДоверенности = ИмяФайла;
	ПолеТабличногоДокументаФормаОтчета.Области["attorney_file_attachment_file"].Значение = ИмяФайла;
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?';
																				|en = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда     
		Возврат;       
	Иначе       
		Очистить();       
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	
	// Устанавливаем флаг модифицированности формы.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Код4");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки, не подлежащие очистке.
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;
	
	Расчет(Форма, "", "");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?';
		|en = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	
	КодВозврата = Результат;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СписокСохранения = Новый Структура();
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("Доверенность", Доверенность);
	СписокСохранения.Вставить("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Вставить("ХешДоверенности", ХешДоверенности);
	СписокСохранения.Вставить("_Приложения", ДанныеФормыВЗначение(_Приложения, Тип("ДеревоЗначений")));
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Перед формированием печатных форм необходимо определить"
			+"в системе принтер и задать его в качестве используемого по умолчанию!'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТабличныйДокумент = ЭтаФорма["ПолеТабличногоДокументаФормаОтчета"];
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть1б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП(рекультивация)");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть2"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП(рекультивация)");

	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть("ОсновнаяЧасть3"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП(рекультивация)");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	// Процедура "заглушка", для роОчистить.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru = 'В ходе выгрузки были найдены ошибки.';
							|en = 'В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки);
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки)
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПустаяСтруктураВыгрузки()
	Возврат Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, КодировкаФайлаВыгрузки, ТипФайлаВыгрузки");
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	РезультатВыгрузки = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "utf-8");
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ФайлВыгрузки);
	
	ОсновнаяВыгрузка = ПустаяСтруктураВыгрузки();
	ОсновнаяВыгрузка.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	ОсновнаяВыгрузка.ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	ОсновнаяВыгрузка.КодировкаФайлаВыгрузки = "utf-8";
	ОсновнаяВыгрузка.ТипФайлаВыгрузки = "ОсновныеСведения";
	РезультатВыгрузки.Добавить(ОсновнаяВыгрузка);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		Приложение = ПустаяСтруктураВыгрузки();
		Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Доверенность), Новый УникальныйИдентификатор);
		Приложение.ИмяФайлаВыгрузки = ИмяФайлаДоверенности;
		Приложение.КодировкаФайлаВыгрузки = "";
		Приложение.ТипФайлаВыгрузки = "2ТПРЕКУЛЬТИВАЦИЯ.ПРИЛОЖЕНИЕ";
		РезультатВыгрузки.Добавить(Приложение);
	КонецЕсли;
	
	Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
		Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
			Приложение = ПустаяСтруктураВыгрузки();
			Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(СтрФайл.ПрисоединенныйФайл), Новый УникальныйИдентификатор);
			Приложение.ИмяФайлаВыгрузки = СтрФайл.ОписаниеДокумента;
			Приложение.КодировкаФайлаВыгрузки = "";
			Приложение.ТипФайлаВыгрузки = "2ТПРЕКУЛЬТИВАЦИЯ.ПРИЛОЖЕНИЕ";
			РезультатВыгрузки.Добавить(Приложение);
		КонецЦикла;
	КонецЦикла;
	
	ТекстВыгрузки = РезультатВыгрузки;
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	СтатусПроверки = Истина;
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	Возврат СтатусПроверки;
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки)
	ПараметрыВыгрузки.Вставить("UUID", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаФормированияФайла", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=yyyy"));
	ПараметрыВыгрузки.Вставить("is_ceo_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_ceo.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_non_resident_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_non_resident.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_separate_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_separate.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("register_date_str", Формат(ПолеТабличногоДокументаФормаОтчета.Области.register_date.Значение, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("egrul_egrip_date_str", Формат(ПолеТабличногоДокументаФормаОтчета.Области.egrul_egrip_date.Значение, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ЕстьПриложения", (_Приложения.ПолучитьЭлементы().Количество() > 0));
	
	ПараметрыВыгрузки.Вставить("ЕстьДоверенность", ЗначениеЗаполнено(Доверенность));
	ПараметрыВыгрузки.Вставить("Доверенность_УИД", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("Доверенность_Файл", ИмяФайлаДоверенности);
	ПараметрыВыгрузки.Вставить("Доверенность_Хеш", ХешДоверенности);
	
	ИндексТочки = СтрНайти(ИмяФайлаДоверенности, ".", НаправлениеПоиска.СКонца);
	Если ИндексТочки = 0 Тогда 
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", ИмяФайлаДоверенности);
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", );
	Иначе
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", Лев(ИмяФайлаДоверенности, ИндексТочки - 1));
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", Сред(ИмяФайлаДоверенности, ИндексТочки + 1));
	КонецЕсли;
	
	Для Инд = 1 По 11 Цикл 
		Для Гр = 3 По 11 Цикл 
			ПараметрыВыгрузки.Вставить("П0000000101" + Формат(Гр, "ЧЦ=2; ЧВН=") + "_" + Инд,
				ПолеТабличногоДокументаФормаОтчета.Области["П01" + Формат(Инд, "ЧЦ=2; ЧВН=") + Формат(Гр, "ЧЦ=2; ЧВН=")].Значение);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("П000000010101_11", "worked_out_period_end");
	ПараметрыВыгрузки.Вставить("П000000010101_10", "disturbed_lands_period_end_total");
	ПараметрыВыгрузки.Вставить("П000000010101_9", "water_bodies");
	ПараметрыВыгрузки.Вставить("П000000010101_8", "forest_stands");
	ПараметрыВыгрузки.Вставить("П000000010101_7", "other_agricultural_land");
	ПараметрыВыгрузки.Вставить("П000000010101_6", "arable_land");
	ПараметрыВыгрузки.Вставить("П000000010101_5", "reclaimed_land_total");
	ПараметрыВыгрузки.Вставить("П000000010101_4", "developed_from_total_disturbed_lands");
	ПараметрыВыгрузки.Вставить("П000000010101_3", "disturbed_lands_period_total");
	ПараметрыВыгрузки.Вставить("П000000010101_2", "worked_out_period_start");
	ПараметрыВыгрузки.Вставить("П000000010101_1", "disturbed_lands_period_start_total");
	
	Для Инд = 1 По 11 Цикл
		ПараметрыВыгрузки.Вставить("П000000010102_" + Инд, Формат(Инд, "ЧЦ=2; ЧВН="));
	КонецЦикла;
	
	ГодСтрокой = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПараметрыВыгрузки.Вставить("П000000010199_11", "в т.ч. отработано");
	ПараметрыВыгрузки.Вставить("П000000010199_10", "Наличие нарушенных земель на 31.12." + ГодСтрокой + " - всего");
	ПараметрыВыгрузки.Вставить("П000000010199_9", "водоемы и другие цели");
	ПараметрыВыгрузки.Вставить("П000000010199_8", "лесные насаждения");
	ПараметрыВыгрузки.Вставить("П000000010199_7", "другие сельскохозяйственные угодья");
	ПараметрыВыгрузки.Вставить("П000000010199_6", "в том числе под пашню");
	ПараметрыВыгрузки.Вставить("П000000010199_5", "Рекультивировано земель - всего");
	ПараметрыВыгрузки.Вставить("П000000010199_4", "Отработано из общей площади нарушенных земель");
	ПараметрыВыгрузки.Вставить("П000000010199_3", "За отчетный " + ГодСтрокой + "г. Нарушено земель - всего");
	ПараметрыВыгрузки.Вставить("П000000010199_2", "в том числе отработано");
	ПараметрыВыгрузки.Вставить("П000000010199_1", "Наличие нарушенных земель на 01.01." + ГодСтрокой + " всего");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки) Экспорт 
	ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	Если ПараметрыВыгрузки.ЕстьПриложения Тогда 
		Узел_response = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "response");
		Узел_data = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_response, "data");
		Узел_service_request = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_data, "service_request");
		Узел_attached_documents = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_service_request, "attached_documents");
		Узел_attached_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_attached_documents, "attached_document");
		
		Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
			НовыйУзел_attached_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_attached_document);
			
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "number", Стр.Номер);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "name", Стр.Название);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "comment", Стр.Комментарий);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "date", Формат(Стр.Дата, "ДФ='yyyy-MM-dd HH:mm:ss'; ДП=' '"));
			
			Узел_documents_attachments_files = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовыйУзел_attached_document, "documents_attachments_files");
			Узел_documents_attachments_file = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_documents_attachments_files, "documents_attachments_file");
			Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
				НовыйУзел_documents_attachments_file = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_documents_attachments_file);
				
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "uuid", Строка(Новый УникальныйИдентификатор));
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "gost", СтрФайл.Комментарий);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "name", СтрФайл.ОписаниеДокумента);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "file_name", СтрФайл.ОписаниеДокумента);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "extension", СтрФайл.Название);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_documents_attachments_file);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_attached_document);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда 
				НомСтр = 1;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ + Формат(НомСтр, "ЧГ=")) Цикл
					Если Не ЗначениеЗаполнено(ПараметрыВыгрузки[Стр.Ключ + Формат(НомСтр, "ЧГ=")]) Тогда 
						НомСтр = НомСтр + 1;
						Продолжить;
					КонецЕсли;
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
			Иначе
				Если ЗначениеЗаполнено(Стр.ЗначениеПоУмолчанию) Тогда
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
				КонецЕсли;
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла()
	Возврат "2tp_recl.xml";
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров() Экспорт 
	Перем ПолученноеЗначение;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла());
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "RPT_2TP_WASTE_FACT_SECTION_");
	
	Для Каждого КЗ Из ТабДокумент Цикл 
		Если Не ПараметрыВыгрузки.Свойство(КЗ.Ключ) Тогда 
			ПараметрыВыгрузки.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ДоступностьКнопокПрисоединенныеФайлы()
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Ложь;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Ложь;
	Иначе
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Истина;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньГруппировки(ТекущиеДанные)
	Возврат ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, 0, 1 + УровеньГруппировки(ТекущиеДанные.ПолучитьРодителя()));
КонецФункции

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	ПараметрыВводаРеквизитов = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Истина, Ложь, Неопределено);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
	
	ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыВводаРеквизитов, ЭтотОбъект);
	ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитовДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Добавление Тогда 
			ЗаполнитьЗначенияСвойств(_Приложения.ПолучитьЭлементы().Добавить(), Результат);
		ИначеЕсли ДополнительныеПараметры.Редактирование Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущиеДанные, Результат);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если УровеньГруппировки(ТекущиеДанные) = 1 Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
		ТекстВопроса = "Перед добавлением приложения необходимо сохранить отчет. Продолжить?";
		ОО = Новый ОписаниеОповещения("ВопросФайлЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ВопросФайлЗавершение(КодВозвратаДиалога.Да, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросФайлЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияФайлЗавершениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияФайлЗавершениеЗавершение(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайлЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаПоиска", ВыбИмяФайла);
	ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
	ОО = Новый ОписаниеОповещения("ПодписатьФайлГОСТ2012Завершение", ЭтотОбъект, ДополнительныеПараметры);
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		НовСтрКомментарий = НРег(Результат.Хеш);
	Иначе
		НовСтрКомментарий = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовСтрКомментарий) Тогда 
		Возврат;
	КонецЕсли;
	НовСтр = ДополнительныеПараметры.ТекущиеДанные.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = НовСтрКомментарий;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог, НовСтр.ПолучитьИдентификатор());
		Элементы.ПриложенияКОтчету.Развернуть(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор());
		ДоступностьКнопокПрисоединенныеФайлы();
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ПолноеИмяФайла, Каталог, НовСтр) Экспорт 
	НовСтрСтр = _Приложения.НайтиПоИдентификатору(НовСтр);
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	ПрисоединенныйФайл = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	НовСтрСтр.ПрисоединенныйФайл = ПрисоединенныйФайл;
	НовСтрСтр.ОписаниеДокумента = ИмяФайла;
	НовСтрСтр.Название = СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", "");
	Сохранить(,,,,ПоказателиОтчета);
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	УдалитьПрисоединенныйФайл(ТекущиеДанные.ПолучитьИдентификатор());
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайл(ИдВДереве)
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ИдВДереве);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПравоДоступаУдаление = ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ПрисоединенныйФайлОбъект = Стр.ПрисоединенныйФайл.ПолучитьОбъект();
			Если ПравоДоступаУдаление Тогда 
				ПрисоединенныйФайлОбъект.Удалить();
			Иначе
				ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		_Приложения.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		ПрисоединенныйФайлОбъект = ТекущиеДанные.ПрисоединенныйФайл.ПолучитьОбъект();
		Если ПравоДоступаУдаление Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		ПараметрыВводаРеквизитов = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Ложь, Истина, ТекущиеДанные);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Номер", ТекущиеДанные.Номер);
		ПараметрыОткрытияФормы.Вставить("Название", ТекущиеДанные.Название);
		ПараметрыОткрытияФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
		ПараметрыОткрытияФормы.Вставить("Дата", ТекущиеДанные.Дата);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
		
		ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыОткрытияФормы, ЭтотОбъект);
		ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаРеквизитовДокумента.Открыть();
	Иначе
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл), Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуПриАктивизацииСтроки(Элемент)
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаСервере
Функция ДанныеФайла(ПрисоединенныйФайл)
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	ФормаНастройкиОтчета.Элементы.Страницы.ПодчиненныеЭлементы.СвойстваРазделов.Видимость = Ложь;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета", ЗначениеАвторасчета);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Модифицированность = Истина;
КонецПроцедуры
