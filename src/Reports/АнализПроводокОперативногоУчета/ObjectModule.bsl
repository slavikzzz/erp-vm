
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример добавления команды:
//    Команда = Форма.Команды.Добавить("<ИмяКоманды>");
//    Команда.Действие  = "Подключаемый_Команда";
//    Команда.Заголовок = НСтр("ru = '<Представление команды...>'");
//    ОтчетыСервер.ВывестиКоманду(Форма, Команда, "<ВидГруппы>");
// Обработчик команды пишется в процедуре ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиОтчета.ДополнительныеСвойства, "КлючВарианта") Тогда
		КлючВарианта = НастройкиОтчета.ДополнительныеСвойства.КлючВарианта;
	Иначе
		КлючВарианта = "АнализПроводокОперативногоУчета";
	КонецЕсли;
	
	ПараметрыЗапроса = МеждународныйУчетПоДаннымФинансовыхРегистров.ПараметрыЗапросаДанныхФинансовыхРегистров();
	ПараметрыЗапроса.КлючВарианта = КлючВарианта;
	ПараметрыЗапроса.Вставить("ДополнительныйОтбор", КомпоновщикНастроек.ФиксированныеНастройки.Отбор);
	
	ПериодОтчета = ЗначениеПараметраКомпоновкиДанных(НастройкиОтчета, "ПериодОтчета");// СтандартныйПериод - 
	Если ПериодОтчета <> Неопределено Тогда
		ПараметрыЗапроса.ДатаНачала = ПериодОтчета.ДатаНачала;
		ПараметрыЗапроса.ДатаОкончания = ПериодОтчета.ДатаОкончания;
	КонецЕсли;
	
	НеОтраженныеВУчете = ЗначениеПараметраКомпоновкиДанных(НастройкиОтчета, "НеОтраженныеВУчете");
	Если НеОтраженныеВУчете <> Неопределено Тогда
		ПараметрыЗапроса.НеОтраженныеВУчете = НеОтраженныеВУчете;
	КонецЕсли;
	
	ЭлементыОтбора = Новый Массив();
	ЗаполнитьЭлементыОтбора(ЭлементыОтбора, НастройкиОтчета.Отбор.Элементы);
	
	УстановитьПараметрПоНастройкеОтбора(ПараметрыЗапроса, ЭлементыОтбора, "Регистратор");
	УстановитьПараметрПоНастройкеОтбора(ПараметрыЗапроса, ЭлементыОтбора, "ПланСчетов", ТекстЗапросаПланыСчетов());
	УстановитьПараметрПоНастройкеОтбора(ПараметрыЗапроса, ЭлементыОтбора, "Организация", ТекстЗапросаОрганизации());
	
	Запрос = МеждународныйУчетПоДаннымФинансовыхРегистров.ЗапросАнализаКорреспонденцийОперативногоУчета(ПараметрыЗапроса);
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДвижений.Запрос = ТекстЗапросаНабораДвижений();
	
	УстановитьПараметрКомпоновкиДанных(НастройкиОтчета, "ИмяРегистраСлужебныхОбъектовУчета", Запрос.Параметры.ИмяРегистраСлужебныхОбъектовУчета);
	УстановитьПараметрКомпоновкиДанных(НастройкиОтчета, "Дт", Запрос.Параметры.Дт);
	УстановитьПараметрКомпоновкиДанных(НастройкиОтчета, "Кт", Запрос.Параметры.Кт);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Скомпонуем результат
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина,, Запрос.МенеджерВременныхТаблиц);
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПользовательскиеНастройки(УстанавливаемыеЗначения) Экспорт
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого УстанавливаемоеЗначение Из УстанавливаемыеЗначения Цикл
		Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(УстанавливаемоеЗначение.Ключ) Тогда
				ПользовательскаяНастройка = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					Если ТипЗнч(УстанавливаемоеЗначение.Значение) = Тип("СписокЗначений") Тогда
						ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ПользовательскаяНастройка.ПравоеЗначение = УстанавливаемоеЗначение.Значение;
					ИначеЕсли ТипЗнч(УстанавливаемоеЗначение.Значение) = Тип("Массив") Тогда
						ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ПользовательскаяНастройка.ПравоеЗначение = Новый СписокЗначений();
						ПользовательскаяНастройка.ПравоеЗначение.ЗагрузитьЗначения(УстанавливаемоеЗначение.Значение);
					Иначе
						ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ПользовательскаяНастройка.ПравоеЗначение = УстанавливаемоеЗначение.Значение;
					КонецЕсли;
					ПользовательскаяНастройка.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПараметрДанных Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			Если ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(УстанавливаемоеЗначение.Ключ) Тогда
				ПользовательскаяНастройка = ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
				Если ПользовательскаяНастройка <> Неопределено Тогда
					Если УстанавливаемоеЗначение.Ключ = "ПериодОтчета" Тогда
						Если ТипЗнч(УстанавливаемоеЗначение.Значение) = Тип("ВариантСтандартногоПериода") Тогда
							ПользовательскаяНастройка.Значение = Новый СтандартныйПериод(УстанавливаемоеЗначение.Значение);
						Иначе
							ПользовательскаяНастройка.Значение = УстанавливаемоеЗначение.Значение;
						КонецЕсли;
					КонецЕсли;
					ПользовательскаяНастройка.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значение параметра компоновки данных.
//
// Параметры:
//  НастройкиОтчета - НастройкиКомпоновкиДанных - формируемые настройки отчета,
//  ИмяПараметра - Строка - имя параметра, значение которого требуется получить.
// 
// Возвращаемое значение:
//  Произвольный - значение параметра компоновки данных
//
Функция ЗначениеПараметраКомпоновкиДанных(НастройкиОтчета, ИмяПараметра) Экспорт
	
	Параметр = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если Параметр <> Неопределено Тогда
		Если Параметр.Использование Тогда
			Возврат Параметр.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает значение параметра компоновки данных.
//
// Параметры:
//  НастройкиОтчета - НастройкиКомпоновкиДанных - формируемые настройки отчета,
//  ИмяПараметра - Строка - имя параметра, значение которого требуется получить.
//  ЗначениеПараметра - Произвольный - устанавливаемое значение параметра
//
Процедура УстановитьПараметрКомпоновкиДанных(НастройкиОтчета, ИмяПараметра, ЗначениеПараметра)
	
	Параметр = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = ЗначениеПараметра;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрПоНастройкеОтбора(ПараметрыЗапроса, ЭлементыОтбора, ИмяПоля, ТекстЗапроса = "")
	
	ЭлементОтбораПоПолю = Неопределено;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			ЭлементОтбораПоПолю = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораПоПолю = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтбораПоПолю.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		ПараметрыЗапроса[ИмяПоля] = ЭлементОтбораПоПолю.ПравоеЗначение;
	ИначеЕсли ЭлементОтбораПоПолю.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		ПараметрыЗапроса[ИмяПоля] = ЭлементОтбораПоПолю.ПравоеЗначение.ВыгрузитьЗначения();
	ИначеЕсли НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		СлужебнаяСхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
		НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СлужебнаяСхемаКомпоновкиДанных);
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Запрос = ТекстЗапроса;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СлужебнаяСхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		СлужебныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		СлужебныйКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
		ВыбранноеПоле = СлужебныйКомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		ДетальныеЗаписи = СлужебныйКомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ЭлементОтбора = СлужебныйКомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, ЭлементОтбораПоПолю);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СлужебнаяСхемаКомпоновкиДанных, СлужебныйКомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
		
		ПроцессорВыводаВТаблицуЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ТаблицаРезультата = ПроцессорВыводаВТаблицуЗначений.Вывести(ПроцессорКомпоновкиДанных, Ложь);
		
		ПараметрыЗапроса[ИмяПоля] = ТаблицаРезультата.ВыгрузитьКолонку(ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыОтбора(Массив, ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ЗаполнитьЭлементыОтбора(Массив, ЭлементОтбора.Элементы);
			Иначе
				Массив.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПланыСчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланыСчетов.Ссылка КАК ПланСчетов
	|ИЗ
	|	Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетов
	|ГДЕ
	|	НЕ ПланыСчетов.ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОрганизации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНабораДвижений()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЧастиДвойнойЗаписи.ДтКт = &Кт КАК ДебетКредит,
	|	НаборДвижений.НомерЗаписи КАК НомерКорреспонденции,
	|	НаборДвижений.ПланСчетов КАК ПланСчетов,
	|	НаборДвижений.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НаборДвижений.Период КАК Период,
	|	НаборДвижений.Организация КАК Организация,
	|	НаборДвижений.Регистратор КАК Регистратор,
	|	НаборДвижений.СтатусОтражения КАК СтатусОтражения,
	|	НаборДвижений.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		  ИЛИ НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|			ТОГДА НаборДвижений.НастройкаХозОперации
	|		КОГДА НаборДвижений.ПланСчетов.ПроводкиБезКорреспонденции
	|		  И НаборДвижений.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|		  И НаборДвижений.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|		  И (НаборДвижений.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ИЛИ НаборДвижений.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета)
	|			ТОГДА НаборДвижений.НастройкаХозОперации
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ИдентификаторФинЗаписи
	|		ИНАЧЕ НаборДвижений.НастройкаХозОперации
	|	КОНЕЦ КАК КлючКорреспонденции,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.СчетУчетаКт
	|		ИНАЧЕ НаборДвижений.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ДолгосрочныйКт
	|		ИНАЧЕ НаборДвижений.ДолгосрочныйДт
	|	КОНЕЦ КАК Долгосрочный,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ИмяРегистраКт
	|		ИНАЧЕ НаборДвижений.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ОбъектУчетаКт
	|		ИНАЧЕ НаборДвижений.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ОбъектНастройкиКт
	|		ИНАЧЕ НаборДвижений.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.ВалютаКт
	|		ИНАЧЕ НаборДвижений.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.СуммаУпрКт
	|		ИНАЧЕ НаборДвижений.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.СуммаРеглКт
	|		ИНАЧЕ НаборДвижений.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.СуммаВалКт
	|		ИНАЧЕ НаборДвижений.СуммаВалДт
	|	КОНЕЦ КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА НаборДвижений.КоличествоКт
	|		ИНАЧЕ НаборДвижений.КоличествоДт
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ПланСчетов.ПроводкиБезКорреспонденции
	|			ТОГДА НаборДвижений.СуммаУпрДт
	|		КОГДА НаборДвижений.ИмяРегистраДт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|			ТОГДА 0
	|		ИНАЧЕ НаборДвижений.СуммаУпрДт
	|	КОНЕЦ КАК СлужебнаяСуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ПланСчетов.ПроводкиБезКорреспонденции
	|			ТОГДА НаборДвижений.СуммаУпрКт
	|		КОГДА НаборДвижений.ИмяРегистраКт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|			ТОГДА 0
	|		ИНАЧЕ НаборДвижений.СуммаУпрКт
	|	КОНЕЦ КАК СлужебнаяСуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ПланСчетов.ПроводкиБезКорреспонденции
	|			ТОГДА НаборДвижений.СуммаРеглДт
	|		КОГДА НаборДвижений.ИмяРегистраДт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|			ТОГДА 0
	|		ИНАЧЕ НаборДвижений.СуммаРеглДт
	|	КОНЕЦ КАК СлужебнаяСуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ПланСчетов.ПроводкиБезКорреспонденции
	|			ТОГДА НаборДвижений.СуммаРеглКт
	|		КОГДА НаборДвижений.ИмяРегистраКт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА 0
	|		КОГДА НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|			ТОГДА 0
	|		ИНАЧЕ НаборДвижений.СуммаРеглКт
	|	КОНЕЦ КАК СлужебнаяСуммаРеглКт,
	|	НаборДвижений.ИдентификаторФинЗаписи = """" КАК НеЗаполненИдентификаторФинЗаписи,
	|	НаборДвижений.ИмяРегистраДт = """"
	|		ИЛИ НаборДвижений.ИмяРегистраКт = """" КАК ОтсутствуетКорреспонденция,
	|	НаборДвижений.СуммаУпрДт <> НаборДвижений.СуммаУпрКт
	|		ИЛИ НаборДвижений.СуммаРеглДт <> НаборДвижений.СуммаРеглКт КАК НарушенБаланс
	|ИЗ
	|	втНаборДвижений КАК НаборДвижений
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Дт
	|		И НаборДвижений.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		И (НаборДвижений.ПланСчетов.ПроводкиСКорреспонденцией
	|			ИЛИ НаборДвижений.ИмяРегистраДт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ИЛИ НаборДвижений.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)))
	|	ИЛИ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Кт
	|		И НаборДвижений.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		И (НаборДвижений.ПланСчетов.ПроводкиСКорреспонденцией
	|			ИЛИ НаборДвижений.ИмяРегистраКт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ИЛИ НаборДвижений.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли