&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
		
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021Кв1";
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.Тип20_10             = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 10));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы3     = "П0000300010";
	СтруктураРеквизитовФормы.мИдГруппы4     = "П0000400010";
	СтруктураРеквизитовФормы.мИдГруппы5     = "П0000500010";
	СтруктураРеквизитовФормы.мИдГруппы6     = "П1003100000";
	СтруктураРеквизитовФормы.мИдГруппы7     = "П1005100000";
	СтруктураРеквизитовФормы.мИдГруппы8     = "П1007100000";
	СтруктураРеквизитовФормы.мИдГруппы9     = "П1009100000";
	СтруктураРеквизитовФормы.мИдГруппы10    = "П1010100000";
	СтруктураРеквизитовФормы.мИдГруппы11    = "П0000600010";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы3     = 1;
	КолИсхСтрокИдГруппы4     = 1;
	КолИсхСтрокИдГруппы5     = 1;
	КолИсхСтрокИдГруппы6     = 1;
	КолИсхСтрокИдГруппы7     = 1;
	КолИсхСтрокИдГруппы8     = 1;
	КолИсхСтрокИдГруппы9     = 1;
	
	КолКолонокИдГруппы3     = 27;
	КолКолонокИдГруппы4     = 22;
	КолКолонокИдГруппы5     = 30;
	КолКолонокИдГруппы6     = 25;
	КолКолонокИдГруппы7     = 1;
	КолКолонокИдГруппы8     = 1;
	КолКолонокИдГруппы9     = 1;
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
				
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     СтруктураРеквизитовФормы.мИдГруппы7);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     СтруктураРеквизитовФормы.мИдГруппы8);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     СтруктураРеквизитовФормы.мИдГруппы9);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10,    СтруктураРеквизитовФормы.мИдГруппы10);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,    СтруктураРеквизитовФормы.мИдГруппы11);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10,    Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,    Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Расчет",      "ТаблицаСтраницыРасчет");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3",     "ТаблицаСтраницыРаздела3");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3_1",   "ТаблицаСтраницыРаздела3_1");
	
	ИнициализироватьМногоуровневыеРазделы();

	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,    КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,    КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,   КолИсхСтрокИдГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,    КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,    1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,    1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,    1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,    1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10,   1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,    КолКолонокИдГруппы6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы10,    1);
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "";
	СтруктураРеквизитовФормы.мКодОтчета = "";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы9");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы10");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("Тип20_10");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписиДоИзменения");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Функция ПустоеОписаниеРаздела()
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("ИмяОбласти");
	Результат.Вставить("ИмяОбластиДобСтр");
	Результат.Вставить("ИмяОбластиУдСтр");
	Результат.Вставить("Подчиненные", Новый Массив);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПолучитьВерхНизМногоуровневойЧасти(НаимРаздела, Верх, Низ)
	ОписаниеСтруктуры = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	МакетСтраницы = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Верх = 9999;
	Низ = 0;
	Для Каждого Стр Из ОписаниеСтруктуры Цикл 
		Обл = МакетСтраницы.Область(Стр.ИмяОбласти);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		Обл = МакетСтраницы.Область(Стр.ИмяОбластиДобСтр);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		
		ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, Стр.Подчиненные, Верх, Низ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, ОписаниеСтруктуры, Верх, Низ)
	Для Каждого Стр Из ОписаниеСтруктуры Цикл 
		Обл = МакетСтраницы.Область(Стр.ИмяОбласти);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		Обл = МакетСтраницы.Область(Стр.ИмяОбластиДобСтр);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		
		ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, Стр.Подчиненные, Верх, Низ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_0");
	мСтруктураМногоуровневыхРазделов["Раздел1_0"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_0"].Добавить(ПустоеОписаниеРаздела());
	мСтруктураМногоуровневыхРазделов["Раздел1_0"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_0 = мСтруктураМногоуровневыхРазделов["Раздел1_0"][0];
	Раздел1_0["Имя"] = "П10000";
	Раздел1_0["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_0["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_0["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_0["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_0["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	Раздел1_0 = мСтруктураМногоуровневыхРазделов["Раздел1_0"][1];
	Раздел1_0["Имя"] = "П20000";
	Раздел1_0["ИмяОбласти"] = "МногострочнаяЧастьП20000";
	Раздел1_0["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП20000";
	Раздел1_0["ИмяОбластиУдСтр"] = "УдалитьСтрокуП20000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_1");
	мСтруктураМногоуровневыхРазделов["Раздел1_1"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_1"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_1 = мСтруктураМногоуровневыхРазделов["Раздел1_1"][0];
	Раздел1_1["Имя"] = "П10000";
	Раздел1_1["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_1["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_1["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_1["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_1["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_2");
	мСтруктураМногоуровневыхРазделов["Раздел1_2"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_2"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_2 = мСтруктураМногоуровневыхРазделов["Раздел1_2"][0];
	Раздел1_2["Имя"] = "П10000";
	Раздел1_2["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_2["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_2["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2");
	мСтруктураМногоуровневыхРазделов["Раздел2"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел2"].Добавить(ПустоеОписаниеРаздела());
	мСтруктураМногоуровневыхРазделов["Раздел2"].Добавить(ПустоеОписаниеРаздела());
	Раздел2 = мСтруктураМногоуровневыхРазделов["Раздел2"][0];
	Раздел2["Имя"] = "П10000";
	Раздел2["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел2["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел2["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	Раздел2 = мСтруктураМногоуровневыхРазделов["Раздел2"][1];
	Раздел2["Имя"] = "П20000";
	Раздел2["ИмяОбласти"] = "МногострочнаяЧастьП20000";
	Раздел2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП20000";
	Раздел2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП20000";
КонецПроцедуры

&НаСервере
Функция ПолучитьПустуюСтруктуруДанных(НаимРаздела)
	Прототип = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Результат = Новый Структура;
	Для Каждого Элт Из Прототип Цикл 
		Результат.Вставить(Элт.Имя, Новый СписокЗначений);
		ЗаполнитьПустуюСтруктуруДанныхРек(Элт, Результат[Элт.Имя], Макет);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьПустуюФиксированнуюСтруктуруДанных(НаимРаздела)
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Результат = Новый Структура;
	Верх = Неопределено;
	Низ = Неопределено;
	ПолучитьВерхНизМногоуровневойЧасти(НаимРаздела, Верх, Низ);
	
	Для Каждого Обл Из Макет.Области Цикл 
		Если Обл.Низ < Верх И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение Тогда 
		
			Результат.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьПустуюСтруктуруДанныхРек(Элт, СписокЗначений, Макет)
	Значение = Новый Структура("Данные, ДопСтроки", Новый Структура, Новый Структура);
	Область = Макет.ПолучитьОбласть(Элт.ИмяОбласти);
	Для Каждого Обл Из Область.Области Цикл 
		Если СтрНачинаетсяС(Обл.Имя, Элт.Имя) И Обл.СодержитЗначение = Истина Тогда 
			Значение.Данные.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Подч Из Элт.Подчиненные Цикл 
		Значение.ДопСтроки.Вставить(Подч.Имя, Новый СписокЗначений);
		ЗаполнитьПустуюСтруктуруДанныхРек(Подч, Значение.ДопСтроки[Подч.Имя], Макет);
	КонецЦикла;
	
	СписокЗначений.Добавить(Значение);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Элт, СписокЗначений, ПустаяСтруктура, Путь)
	КоличествоСтрок = 0;
	Для Каждого КЗ Из ПустаяСтруктура.Данные Цикл
		Пока Истина Цикл
			Если ТабличныйДокумент.Области.Найти(КЗ.Ключ + Путь + "_" + Формат(КоличествоСтрок + 1, "ЧГ=")) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	Для Инд = 1 По КоличествоСтрок Цикл 
		Значение = Новый Структура("Данные, ДопСтроки", Новый Структура, Новый Структура);
		Постфикс = Путь + "_" + Формат(Инд, "ЧГ=");
		Для Каждого КЗ Из ПустаяСтруктура.Данные Цикл
			Значение.Данные.Вставить(КЗ.Ключ, ТабличныйДокумент.Области[КЗ.Ключ + Постфикс].Значение);
		КонецЦикла;
		
		Для Каждого Подч Из Элт.Подчиненные Цикл 
			Значение.ДопСтроки.Вставить(Подч.Имя, Новый СписокЗначений);
			ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Подч, Значение.ДопСтроки[Подч.Имя], ПустаяСтруктура.ДопСтроки[Подч.Имя][0].Значение, Постфикс)
		КонецЦикла;
		
		СписокЗначений.Добавить(Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаполненнуюСтруктуруДанных(НаимРаздела)
	Прототип = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	ПустаяСтруктура = ПолучитьПустуюСтруктуруДанных(НаимРаздела);
	
	Результат = Новый Структура;
	Для Каждого Элт Из Прототип Цикл 
		Результат.Вставить(Элт.Имя, Новый СписокЗначений);
		ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Элт, Результат[Элт.Имя], ПустаяСтруктура[Элт.Имя][0].Значение, "");
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СобратьДанныеМногоуровневогоРаздела(НаимРаздела, Приемник)
	Приемник.Данные = ПолучитьЗаполненнуюСтруктуруДанных(НаимРаздела);
	Если Не Приемник.ФиксированныеДанные.Свойство("UID_файла") Тогда 
		Приемник.ФиксированныеДанные.Вставить("UID_файла");
		Приемник.ФиксированныеДанные.Вставить("ПрисоединенныйФайлРаздела");
		Приемник.ФиксированныеДанные.Вставить("ХешФайлРаздела");
		Приемник.ФиксированныеДанные.Вставить("ИмяФайлРаздела");
		Приемник.ФиксированныеДанные.Вставить("alloted_by");
	КонецЕсли;
	
	
	Для Каждого КЗ Из Приемник.ФиксированныеДанные Цикл 
		ОблИсточник = ТабличныйДокумент.Области.Найти(КЗ.Ключ);
		Если ТипЗнч(ОблИсточник) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
			Приемник.ФиксированныеДанные[КЗ.Ключ] = ОблИсточник.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРасчет.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_0.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекущейСтраницыПанели) Тогда 
		СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
		Таблица = ЭтотОбъект["ТаблицаСтраницы"+ИмяТекущейСтраницыПанели];
		НовСтр = Таблица.Добавить();
		Для Каждого Стр Из Таблица Цикл 
			Стр.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		Прототип = мСтруктураМногоуровневыхРазделов[ИмяТекущейСтраницыПанели];
		НовСтр.Данные = ПолучитьПустуюСтруктуруДанных(ИмяТекущейСтраницыПанели);
		НовСтр.ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(ИмяТекущейСтраницыПанели);
		РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекущейСтраницыПанели);

	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтотОбъект, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтотОбъект, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Расчет
	СтрокаУровня1.ИмяСтраницы                          = "Расчет";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть6";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть7";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы8;
	НовСтр.Область = "МногострочнаяЧасть8";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы9;
	НовСтр.Область = "МногострочнаяЧасть9";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы10;
	НовСтр.Область = "МногострочнаяЧасть10";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_0";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы11",    СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",     СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",     СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",     СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",     СтруктураРеквизитовФормы.мИдГруппы9);
	ИдГрупп.Вставить("мИдГруппы10",    СтруктураРеквизитовФормы.мИдГруппы10);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы11",    СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",     СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",     СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",     СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",     СтруктураРеквизитовФормы.мИдГруппы9);
	ИдГрупп.Вставить("мИдГруппы10",    СтруктураРеквизитовФормы.мИдГруппы10);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы3 Или ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Раздел3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы6 Или ИдГруппы = ИдГрупп.мИдГруппы7 
		Или ИдГруппы = ИдГрупп.мИдГруппы8 Или ИдГруппы = ИдГрупп.мИдГруппы9 Или ИдГруппы = ИдГрупп.мИдГруппы10 Тогда
		ТекТабличноеПоле = "Расчет";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Или ИдГруппы = ИдГрупп.мИдГруппы11 Тогда
		ТекТабличноеПоле = "Раздел3_1";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",    СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",    СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",    СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",    СтруктураРеквизитовФормы.мИдГруппы9);
	ИдГрупп.Вставить("мИдГруппы10",   СтруктураРеквизитовФормы.мИдГруппы10);
	ИдГрупп.Вставить("мИдГруппы11",   СтруктураРеквизитовФормы.мИдГруппы11);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",    СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",    СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",    СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",    СтруктураРеквизитовФормы.мИдГруппы9);
	ИдГрупп.Вставить("мИдГруппы10",   СтруктураРеквизитовФормы.мИдГруппы10);
	ИдГрупп.Вставить("мИдГруппы11",   СтруктураРеквизитовФормы.мИдГруппы11);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()

	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	ПолеТабличногоДокументаТитульный.Области.ГодОтчета.Значение   = НомерГода;

	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтотОбъект, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтотОбъект, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	СтрокаСведений = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		СтрокаСведений = "НаимЮЛПол, ТелОрганизации, АдрЮР, ";
	КонецЕсли;

	СтрокаСведений = СтрокаСведений + "ФИОРук, ФИОБух, ТипНП";

	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтотОбъект, СтрокаСведений);

	ИННКПП = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ");

	ТабличныйДокумент.Области.ИНН1.Значение = ИННКПП.ИННЮЛ;
	ТабличныйДокумент.Области.КПП1.Значение = ИННКПП.КППЮЛ;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		Если (НЕ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) И (НЕ СтруктураРеквизитовФормы.мДокументВосстановлен) Тогда
						
			Если ДатаПодписи >= '20120101' Тогда	
				КБК = "";
			Иначе
				КБК = "04811201000010000120";
			КонецЕсли;
			
			ТаблицаРасчет = ЭтотОбъект[мСтруктураМногостраничныхРазделов["Расчет"]];
			АктСтраницыРасчет = ТаблицаРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктСтраницыРасчет.Количество() > 0 Тогда
				Данные = АктСтраницыРасчет[0].Данные[0].Значение;
			Иначе
				Данные = ТаблицаРасчет[0].Данные[0].Значение;
			КонецЕсли;
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				Данные.Вставить("КБК1", КБК);
			КонецЕсли; 

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			ТабличныйДокумент.Области.АдрЮР.Значение = "";
		Иначе
			ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
		КонецЕсли;

		Если Результат.ТипНП = 2 Тогда
			
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтотОбъект);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		Если Результат.ТипНП = 2 Тогда
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;

	Сведения = "ИННЮЛ,ОГРН,НаимЮЛПол,НаимЮЛСокр,КППЮЛ,ОКПО,ОКВЭД,ФИОРук,ДолжнРук,ОКТМО,ОргИндекс,АдрЮР,ФИОИсп,ДолжнИсп,ОКПО,"
					+ "АдресЭлектроннойПочтыОрганизации,ТелОрганизации";
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	ТабличныйДокумент.Области.inn.Значение = ОргСведения.ИННЮЛ;
	ТабличныйДокумент.Области.ogrn.Значение = ОргСведения.ОГРН;
	ТабличныйДокумент.Области.kpp.Значение = ОргСведения.КППЮЛ;
	ТабличныйДокумент.Области.full_name_organization.Значение = ОргСведения.НаимЮЛПол;
	ТабличныйДокумент.Области.short_name_organization.Значение = ОргСведения.НаимЮЛСокр;
	ТабличныйДокумент.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ТабличныйДокумент.Области.okved.Значение = ОргСведения.ОКВЭД;
	ТабличныйДокумент.Области.ceo_full_name.Значение = ОргСведения.ФИОРук;
	ТабличныйДокумент.Области.ceo_position.Значение = ОргСведения.ДолжнРук;
	ТабличныйДокумент.Области.post_address_municipality_oktmo.Значение = ОргСведения.ОКТМО;
	ТабличныйДокумент.Области.post_address_post.Значение = ОргСведения.ОргИндекс;
	ТабличныйДокумент.Области.post_address_street.Значение = ОргСведения.АдрЮР;
	ТабличныйДокумент.Области.work_position.Значение = ОргСведения.ДолжнИсп;
	ТабличныйДокумент.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ТабличныйДокумент.Области.email.Значение = ОргСведения.АдресЭлектроннойПочтыОрганизации;
	ТабличныйДокумент.Области.phone.Значение = ОргСведения.ТелОрганизации;
	ФИОИсп = РегламентированнаяОтчетность.РазложитьФИО(ОргСведения.ФИОИсп);
	ТабличныйДокумент.Области.surname.Значение = ФИОИсп.Фамилия;
	ТабличныйДокумент.Области.name.Значение = ФИОИсп.Имя;
	ТабличныйДокумент.Области.patronymic.Значение = ФИОИсп.Отчество;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	ФормаНастройкиОтчета.Элементы.СвойстваРазделов.Видимость = Ложь;
	ФормаНастройкиОтчета.Элементы.Дерево.Видимость = Ложь;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПерекраситьМногоуровневыйРаздел(ИмяСтраницы)
	СохранитьДанныеРаздела(ИмяСтраницы, Истина);
	Таблица = ЭтотОбъект["ТаблицаСтраницы" + ИмяСтраницы];
	СтрТаблицыСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицыСтраницы[0]);
	ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ИндексТекСтраницыРаздела+1);
	Расчет(ЭтотОбъект, ИмяСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		ИмяСтраницы = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		Если ЗначениеЗаполнено(ИмяСтраницы) И мСтруктураМногоуровневыхРазделов.Свойство(ИмяСтраницы) Тогда 
			ПерекраситьМногоуровневыйРаздел(ИмяСтраницы);
		КонецЕсли;
		
		Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3 Тогда 
		ИмяМнгЧ = "МногострочнаяЧасть1";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть2";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть6";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы7 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть7";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы8 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть8";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы9 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть9";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы10 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть10";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы4 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть1";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы11 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть2";
	Иначе
		ИмяМнгЧ = "МногострочнаяЧасть2";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяМнгЧ);
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяМнгЧ].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяМнгЧ].Верх, , ТекТабличноеПоле.Области[ИмяМнгЧ].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяМнгЧ;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
	Расчет(ЭтотОбъект, ВыбТабличноеПолеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВывод(Обл, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
	Если Не нСтр.ПроверитьВывод(Обл) Тогда 
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблЗаголовокТаблицы);
	КонецЕсли;
	нСтр.Вывести(Обл);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластьДанными(Данные, Область)
	Для Каждого Обл Из Область.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
			Данные.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СтрокаВКвадраты(Строка, ИмяПараметра, Область)
	ИмяПараметраИтог = ИмяПараметра + "_";
	Для Инд = 1 По СтрДлина(Строка) Цикл 
		Обл = Область.Области.Найти(ИмяПараметраИтог + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Обл.Значение = Сред(Строка, Инд, 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЧислоВКвадраты(Число, ИмяПараметра, Область)
	Если Число = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяПараметраИтог = ИмяПараметра + "_";
	Для ИндДл = 1 По 20 Цикл 
		Обл = Область.Области.Найти(ИмяПараметраИтог + Формат(ИндДл, "ЧГ="));
		Если Обл = Неопределено Тогда 
			ИндДл = ИндДл - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндДл = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЧислоСтр = Прав("                             " + Формат(Число, "ЧДЦ=2; ЧН=0,00; ЧГ="), ИндДл);
	Для Инд = 1 По ИндДл Цикл 
		Область.Области.Найти(ИмяПараметраИтог + Формат(Инд, "ЧГ=")).Значение = Сред(ЧислоСтр, Инд, 1);
	КонецЦикла
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьСтруктурыСтроками(Стр)
	Для Каждого КЗ Из Стр Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("Строка") И ЗначениеЗаполнено(КЗ.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ПечатьНаСервере_Раздел3(МассивДляПроверки, ДП)
	Лист1 = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_Раздел3ч1");
	Лист2 = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_Раздел3ч2");
	ОблШапка1 = Лист1.ПолучитьОбласть("Шапка");
	ОблШапка2 = Лист2.ПолучитьОбласть("Шапка");
	ОблНумератор1 = Лист1.ПолучитьОбласть("ОбластьНумератор");
	ОблНумератор2 = Лист2.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы1 = Лист1.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблЗаголовокТаблицы2 = Лист2.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблСтрока1_1 = Лист1.ПолучитьОбласть("Строка1");
	ОблСтрока2_1 = Лист2.ПолучитьОбласть("Строка1");
	ОблСтрока1_2 = Лист1.ПолучитьОбласть("Строка2");
	ОблСтрока2_2 = Лист2.ПолучитьОбласть("Строка2");
	ОблПодвал1 = Лист1.ПолучитьОбласть("Подвал");
	ОблПодвал2 = Лист2.ПолучитьОбласть("Подвал");
	ОблИтог1 = Лист1.ПолучитьОбласть("Итоги");
	ОблИтог2 = Лист2.ПолучитьОбласть("Итоги");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал1.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
		ОблПодвал2.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл 
		МассивДляПроверки.Очистить();
		МассивДляПроверки.Вставить(0, ОблПодвал1);
		МассивДляПроверки.Вставить(1, ОблИтог1);
		Данные = Стр.Данные[0].Значение;
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Данные) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДопСтроки = Стр.ДанныеДопСтрок[0].Значение;
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Данные, ОблШапка1);
		ЗаполнитьОбластьДанными(Данные, ОблИтог2);
		нСтр.Вывести(ОблНумератор1);
		нСтр.Вывести(ОблШапка1);
		нСтр.Вывести(ОблЗаголовокТаблицы1);
		
		нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
		нСтр2.Вывести(ОблНумератор2);
		нСтр2.Вывести(ОблШапка2);
		нСтр2.Вывести(ОблЗаголовокТаблицы2);
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы3] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1_1);
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока2_1);
			ОблСтрока1_1.Области["П000030001001"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 2 Тогда 
				МассивДляПроверки[2] = ОблСтрока1_1;
			Иначе 
				МассивДляПроверки.Вставить(2, ОблСтрока1_1);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор1);
				нСтр.Вывести(ОблЗаголовокТаблицы1);
				нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр2.Вывести(ОблНумератор2);
				нСтр2.Вывести(ОблЗаголовокТаблицы2);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1_1);
			нСтр2.Вывести(ОблСтрока2_1);
		КонецЦикла;
		
		нСтр.Вывести(ОблИтог1);
		нСтр2.Вывести(ОблИтог2);
		МассивДляПроверки.Удалить(1);
		Если Не нСтр.ПроверитьВывод(ОблИтог1) Тогда
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор1);
			нСтр.Вывести(ОблЗаголовокТаблицы1);
			нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр2.Вывести(ОблНумератор2);
			нСтр2.Вывести(ОблЗаголовокТаблицы2);
		КонецЕсли;
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы5] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1_2);
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока2_2);
			ОблСтрока1_2.Области["П000050001001"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 1 Тогда 
				МассивДляПроверки[1] = ОблСтрока1_2;
			Иначе 
				МассивДляПроверки.Вставить(1, ОблСтрока1_2);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор1);
				нСтр.Вывести(ОблЗаголовокТаблицы1);
				нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр2.Вывести(ОблНумератор2);
				нСтр2.Вывести(ОблЗаголовокТаблицы2);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1_2);
			нСтр2.Вывести(ОблСтрока2_2);
		КонецЦикла;
		
		нСтр.Вывести(ОблПодвал1);
		нСтр2.Вывести(ОблПодвал2);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел3_1(МассивДляПроверки, ДП)
	Лист = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_Раздел3_1");
	ОблШапка = Лист.ПолучитьОбласть("Шапка");
	ОблНумератор = Лист.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы = Лист.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблСтрока1 = Лист.ПолучитьОбласть("Строка4");
	ОблСтрока2 = Лист.ПолучитьОбласть("Строка6");
	ОблПодвал = Лист.ПолучитьОбласть("Подвал");
	ОблИтог = Лист.ПолучитьОбласть("Итоги");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл 
		МассивДляПроверки.Очистить();
		МассивДляПроверки.Вставить(0, ОблПодвал);
		МассивДляПроверки.Вставить(1, ОблИтог);
		Данные = Стр.Данные[0].Значение;
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Данные) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДопСтроки = Стр.ДанныеДопСтрок[0].Значение;
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Данные, ОблШапка);
		ЗаполнитьОбластьДанными(Данные, ОблИтог);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка);
		нСтр.Вывести(ОблЗаголовокТаблицы);
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы4] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1);
			ОблСтрока1.Области[СтруктураРеквизитовФормы.мИдГруппы4 + "01"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 2 Тогда 
				МассивДляПроверки[2] = ОблСтрока1;
			Иначе 
				МассивДляПроверки.Вставить(2, ОблСтрока1);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор);
				нСтр.Вывести(ОблЗаголовокТаблицы);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1);
		КонецЦикла;
		
		нСтр.Вывести(ОблИтог);
		МассивДляПроверки.Удалить(1);
		Если Не нСтр.ПроверитьВывод(ОблИтог) Тогда
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор);
			нСтр.Вывести(ОблЗаголовокТаблицы);
		КонецЕсли;
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы11] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока2);
			ОблСтрока2.Области[СтруктураРеквизитовФормы.мИдГруппы11 + "01"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 1 Тогда 
				МассивДляПроверки[1] = ОблСтрока2;
			Иначе 
				МассивДляПроверки.Вставить(1, ОблСтрока2);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор);
				нСтр.Вывести(ОблЗаголовокТаблицы);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока2);
		КонецЦикла;
		
		нСтр.Вывести(ОблПодвал);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, ИмяРаздела)
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_" + ИмяРаздела);
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблНумератор = Макет.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблУровень1Заголовок = Макет.ПолучитьОбласть("Уровень1Заголовок");
	ОблУровень1Строка = Макет.ПолучитьОбласть("Уровень1Строка");
	ОблУровень1Итоги = Макет.ПолучитьОбласть("Уровень1Итоги");
	ОблУровень0Итоги = Макет.ПолучитьОбласть("Уровень0Итоги");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	МассивДляПроверки.Вставить(0, ОблПодвал);
	
	Для Каждого Стр Из ЭтотОбъект["ТаблицаСтраницы" + ИмяРаздела] Цикл 
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Стр.ФиксированныеДанные) Тогда 
			Продолжить;
		КонецЕсли;
		
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблШапка);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка);
		нСтр.Вывести(ОблЗаголовокТаблицы);
		
		Для Каждого КЗНаСтр Из Стр.Данные Цикл
			НомЭлт1 = 0;
			Для Каждого Элт1 Из КЗНаСтр.Значение Цикл 
				НомЭлт1 = НомЭлт1 + 1;
				Данные = Элт1.Значение.Данные;
				ЗаполнитьОбластьДанными(Данные, ОблУровень1Заголовок);
				ПроверитьВывод(ОблУровень1Заголовок, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
				
				Для Каждого ДопСтр2 Из Элт1.Значение.ДопСтроки Цикл 
					НомДопСтр = 0;
					Для Каждого ДопСтр2Стр Из ДопСтр2.Значение Цикл 
						НомДопСтр = НомДопСтр + 1;
						Данные = ДопСтр2Стр.Значение.Данные;
						ЗаполнитьОбластьДанными(Данные, ОблУровень1Строка);
						ОблНумераторСтрок = ОблУровень1Строка.Области.Найти("П1100001");
						Если ОблНумераторСтрок <> Неопределено Тогда 
							ОблНумераторСтрок.Значение = Формат(НомДопСтр, "ЧГ=");
						КонецЕсли;
						ПроверитьВывод(ОблУровень1Строка, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
					КонецЦикла;
				КонецЦикла;
				
				Данные = Элт1.Значение.Данные;
				ЗаполнитьОбластьДанными(Данные, ОблУровень1Итоги);
				ПроверитьВывод(ОблУровень1Итоги, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблУровень0Итоги);
		МассивДляПроверки.Вставить(1, ОблУровень0Итоги);
		Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор);
			нСтр.Вывести(ОблЗаголовокТаблицы);
		КонецЕсли;
		
		нСтр.Вывести(ОблУровень0Итоги);
		нСтр.Вывести(ОблПодвал);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, ИмяРаздела)
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_" + ИмяРаздела);
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблНумератор = Макет.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблУровень1Заголовок = Макет.ПолучитьОбласть("Уровень1Заголовок");
	ОблУровень1Строка = Макет.ПолучитьОбласть("Уровень1Строка");
	ОблУровень1Итоги = Макет.ПолучитьОбласть("Уровень1Итоги");
	ОблУровень0Итоги = Макет.ПолучитьОбласть("Уровень0Итоги");
	ОблРасшифровка = Макет.ПолучитьОбласть("Расшифровка");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	МассивДляПроверки.Вставить(0, ОблПодвал);
	
	Для Каждого Стр Из ЭтотОбъект["ТаблицаСтраницы" + ИмяРаздела] Цикл
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Стр.ФиксированныеДанные) Тогда 
			Продолжить;
		КонецЕсли;
		
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблШапка);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка);
		нСтр.Вывести(ОблЗаголовокТаблицы);
		
		НомЭлт1 = 0;
		Для Каждого Элт1 Из Стр.Данные.П10000 Цикл 
			НомЭлт1 = НомЭлт1 + 1;
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблУровень1Заголовок);
			ПроверитьВывод(ОблУровень1Заголовок, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
			
			Для Каждого ДопСтр2 Из Элт1.Значение.ДопСтроки Цикл 
				НомДопСтр = 0;
				Для Каждого ДопСтр2Стр Из ДопСтр2.Значение Цикл 
					НомДопСтр = НомДопСтр + 1;
					Данные = ДопСтр2Стр.Значение.Данные;
					ЗаполнитьОбластьДанными(Данные, ОблУровень1Строка);
					ОблНумераторСтрок = ОблУровень1Строка.Области.Найти("П1100001");
					Если ОблНумераторСтрок <> Неопределено Тогда 
						ОблНумераторСтрок.Значение = Формат(НомДопСтр, "ЧГ=");
					КонецЕсли;
					ПроверитьВывод(ОблУровень1Строка, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
				КонецЦикла;
			КонецЦикла;
			
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблУровень1Итоги);
			ПроверитьВывод(ОблУровень1Итоги, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
		КонецЦикла;
		
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблУровень0Итоги);
		МассивДляПроверки.Вставить(1, ОблУровень0Итоги);
		Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор);
			нСтр.Вывести(ОблЗаголовокТаблицы);
		КонецЕсли;
		
		нСтр.Вывести(ОблУровень0Итоги);
		
		НомЭлт1 = 0;
		Для Каждого Элт1 Из Стр.Данные.П20000 Цикл 
			НомЭлт1 = НомЭлт1 + 1;
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблРасшифровка);
			ОблНумераторСтрок = ОблРасшифровка.Области.Найти("П2000001");
			Если ОблНумераторСтрок <> Неопределено Тогда 
				ОблНумераторСтрок.Значение = Формат(НомЭлт1, "ЧГ=");
			КонецЕсли;
			ПроверитьВывод(ОблРасшифровка, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
		КонецЦикла;
		
		нСтр.Вывести(ОблПодвал);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Расчет(ДП)
	Лист = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_Расчет");
	ОблНомСтр = Лист.ПолучитьОбласть("ОблНомСтр");
	
	Для Каждого Стр Из ТаблицаСтраницыРасчет Цикл
		КолСтр1 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6].Количество();
		КолСтр2 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7].Количество();
		КолСтраницВсего = ?(КолСтр1 < КолСтр2, КолСтр2 + КолСтр2%2, КолСтр1 + КолСтр1%2) / 2;
		Данные = Стр.Данные[0].Значение;
		
		Если Данные.Свойство("КодКБКОтходы") И Данные.КодКБКОтходы = "04811201042021000120" Тогда 
			КБКСбрКод = "2";
		Иначе
			КБКСбрКод = "1";
		КонецЕсли;
		
		Для Инд = 1 По КолСтраницВсего Цикл
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр1");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если Инд = 1 И ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
						ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
					КонецЕсли;
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			
			ИндСтр1 = 2*(Инд-1);
			ИндСтр2 = ИндСтр1 + 1;
			Если ИндСтр1 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6][ИндСтр1].П100310000001, "ОКТМО311", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6][ИндСтр2].П100310000001, "ОКТМО312", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр1 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7][ИндСтр1].П100510000001, "ОКТМО511", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7][ИндСтр2].П100510000001, "ОКТМО512", ОблОблСтр1);
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
		
		КолСтр1 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8].Количество();
		КолСтр2 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9].Количество();
		КолСтр3 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы10].Количество();
		КолСтраницВсего = Макс((КолСтр1 + КолСтр1%2) / 2, (КолСтр2 + КолСтр2%2) / 2, (КолСтр3 + КолСтр3%2) / 2, 1);
		Для Инд = 1 По КолСтраницВсего Цикл
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр2");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если Инд = 1 И ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			
			ИндСтр1 = 2*(Инд-1);
			ИндСтр2 = ИндСтр1 + 1;
			Если ИндСтр1 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8][ИндСтр1].П100710000001, "ОКТМО711", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8][ИндСтр2].П100710000001, "ОКТМО712", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр1 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр1].П100910000001, "ОКТМО911", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр2].П100910000001, "ОКТМО912", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр1 < КолСтр3 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр1].П100910000001, "ОКТМО1111", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр3 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр2].П100910000001, "ОКТМО1112", ОблОблСтр1);
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
		
		Для Ном = 3 По 7 Цикл 
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр" + Ном);
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			Если Ном = 7 Тогда 
				Для Инд = 1 По 8 Цикл 
					ОблОблСтр1.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
				КонецЦикла;
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Титульный(ДП)
	Лист = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2021Кв1_Титульный");
	ОблОсновнаяЧасть = Лист.ПолучитьОбласть("ОсновнаяЧасть1");
	
	Для Каждого Обл Из ОблОсновнаяЧасть.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда 
			СтруктураДанныхТитульный.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаВКвадраты(Прав("00" + СтруктураДанныхТитульный.ИНН1, 12), "ИНН1", ОблОсновнаяЧасть);
	СтрокаВКвадраты(СтруктураДанныхТитульный.КПП1, "КПП1", ОблОсновнаяЧасть);
	СтрокаВКвадраты(ДП, "ДП", ОблОсновнаяЧасть);
	СтрокаВКвадраты(СтруктураДанныхТитульный.Прил, "Прил", ОблОсновнаяЧасть);
	
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргДиректор) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргДиректор", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргДиректорОбособ) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргДиректорОбособ", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.Исполнитель) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиИсполнитель", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргБухгалтер) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргБухгалтер", ОблОсновнаяЧасть);
	КонецЕсли;
	
	нСтр = РегламентированнаяОтчетность.НоваяСтраница();
	нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	нСтр.Вывести(ОблОсновнаяЧасть);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	
	ОблОсновнаяЧасть = Лист.ПолучитьОбласть("ОсновнаяЧасть2");
	Для Инд = 1 По 8 Цикл 
		ОблОсновнаяЧасть.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	Для Инд = 1 По 4 Цикл
		ОблОсновнаяЧасть.Области["П990"+Инд+"01"].Значение = СтруктураДанныхТитульный["П990"+Инд+"01"];
	КонецЦикла;
	Для Инд = 1 По 5 Цикл
		ОблОсновнаяЧасть.Области["П990"+Инд+"02"].Значение = СтруктураДанныхТитульный["П990"+Инд+"02"];
	КонецЦикла;
	
	нСтр = РегламентированнаяОтчетность.НоваяСтраница();
	нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	нСтр.Вывести(ОблОсновнаяЧасть);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	НомСтр = 0;
	ДП = Формат(ДатаПодписи, "ДФ=ddММyyyy; ДП=--------");
	МассивДляПроверки = Новый Массив;
	
	ПечатьНаСервере_Титульный(ДП);
	ПечатьНаСервере_Расчет(ДП);
	ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, "Раздел1_0");
	ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, "Раздел1_1");
	ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, "Раздел1_2");
	ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, "Раздел2");
	ПечатьНаСервере_Раздел3(МассивДляПроверки, ДП);
	ПечатьНаСервере_Раздел3_1(МассивДляПроверки, ДП);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	НомСтр = 0;
	Для Каждого Элт Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл 
		НомСтр = НомСтр + 1;
		ТД = ПолучитьИзВременногоХранилища(Элт.Значение[0]);
		Если ТД.Области.Найти("СквознойНумераторСтраниц") <> Неопределено Тогда 
			ТД.Области.Найти("СквознойНумераторСтраниц").Значение = Формат(НомСтр, "ЧГ=");
		КонецЕсли;
		Элт.Значение[0] = ПоместитьВоВременноеХранилище(ТД, Элт.Значение[0]);
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтруктураДанныхТитульный.НомКоррект)) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого КЗ Из мСтруктураМногоуровневыхРазделов Цикл
		Ключ = "ТаблицаСтраницы" + КЗ.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Ключ, РеквизитФормыВЗначение(Ключ));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
						Если ТипЗнч(ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение) = Тип("Структура") Тогда 
							СтрокаТаблЗнач.ДанныеДопСтрок = Новый Структура;
							Для Каждого КЗ Из ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл 
								СтрокаТаблЗнач.ДанныеДопСтрок.Вставить(КЗ.Ключ, ДанныеФормыВЗначение(КЗ.Значение, Тип("ТаблицаЗначений")));
							КонецЦикла;
						Иначе 
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						КонецЕсли;
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтотОбъект[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("Доверенность", Доверенность);
	СписокСохранения.Вставить("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Вставить("ХешДоверенности", ХешДоверенности);
	СписокСохранения.Вставить("_Приложения", ДанныеФормыВЗначение(_Приложения, Тип("ДеревоЗначений")));

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			СтрТаблицыСтраниц = ЭтотОбъект["ТаблицаСтраницы" + Раздел.ИмяСтраницы][0];
			Прототип = мСтруктураМногоуровневыхРазделов[Раздел.ИмяСтраницы];
			Если СтрТаблицыСтраниц.Данные = Неопределено Тогда 
				СтрТаблицыСтраниц.Данные = ПолучитьПустуюСтруктуруДанных(Раздел.ИмяСтраницы);
				СтрТаблицыСтраниц.ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(Раздел.ИмяСтраницы);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтотОбъект[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ДанныеМногоуровневыхРазделов;
	
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
		// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтотОбъект[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого КЗ Из ДанныеМногоуровневыхРазделов Цикл
			ЗначениеВРеквизитФормы(КЗ.Значение, КЗ.Ключ)
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтотОбъект[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
							Если Не СохранятьМногострКакТЗ Тогда 
								НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							КонецЕсли;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								Если СохранятьМногострКакТЗ Тогда 
									ТаблЗнач = ЭлСтруктуры.Значение;
									ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								Иначе
									СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
									НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЕсли;
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	СписокСохранения.Свойство("Доверенность", Доверенность);
	СписокСохранения.Свойство("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Свойство("ХешДоверенности", ХешДоверенности);
	Если СписокСохранения.Свойство("_Приложения") Тогда 
		Для Каждого Стр1 Из СписокСохранения._Приложения.Строки Цикл 
			НовЭлт = _Приложения.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовЭлт, Стр1);
			Для Каждого Стр2 Из Стр1.Строки Цикл 
				ЗаполнитьЗначенияСвойств(НовЭлт.ПолучитьЭлементы().Добавить(), Стр2);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	Если Не ТаблицаСтраницыРаздел2[0].ФиксированныеДанные.Свойство("П10000014") Тогда 
		Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл 
			Стр.ФиксированныеДанные.Вставить("П10000013");
			Стр.ФиксированныеДанные.Вставить("П10000014", 1);
		КонецЦикла;
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца()
	
	НужноОбновлятьТаблицуВариантовЗаполнения = Ложь;
	
	Для Каждого ЭлТаблицаРаздела Из мСтруктураМногостраничныхРазделов Цикл
		
		Для Каждого СтраницаРаздела Из ЭтотОбъект[ЭлТаблицаРаздела.Значение] Цикл
			
			СтраницаРаздела.АктивнаяСтраница = Ложь;
			
			ПоказателиТаблПоле = СтраницаРаздела.Данные[0].Значение;
			СтруктураДанных    = СтраницаРаздела.Данные[0].Значение;

			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				
				ИмяПоказателя = Показатель.Ключ;
				
				Если ЭлТаблицаРаздела.Ключ = "Расчет" Тогда
					
					Если ИмяПоказателя = "КБК1_1" Тогда
						СтруктураДанных.Вставить("КБК1");
						Для Ном = 1 По 20 Цикл
							СтруктураДанных.КБК1 = СокрЛП(СтруктураДанных.КБК1) + ПоказателиТаблПоле["КБК1_" + Ном];
							СтруктураДанных.Удалить("КБК1_" + Ном);
						КонецЦикла;
					ИначеЕсли ИмяПоказателя = "ОКАТО1_1" Тогда
						СтруктураДанных.Вставить("ОКАТО1");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО1 = СокрЛП(СтруктураДанных.ОКАТО1) + ПоказателиТаблПоле["ОКАТО1_" + Ном];
							СтруктураДанных.Удалить("ОКАТО1_" + Ном);
						КонецЦикла;
						
					ИначеЕсли ИмяПоказателя = "СуммаБезЛьгот1_1" Тогда
						СтруктураДанных.Вставить("СуммаБезЛьгот1");
						СтрСуммаБезЛьгот1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаБезЛьгот1 = СокрЛП(СтрСуммаБезЛьгот1) + ПоказателиТаблПоле["СуммаБезЛьгот1_" + Ном];
							СтруктураДанных.Удалить("СуммаБезЛьгот1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаБезЛьгот1 = ?(ПустаяСтрока(СтрСуммаБезЛьгот1), 0, Число(СтрСуммаБезЛьгот1));
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "Сумма031_1" Тогда
						Для НомПок = 1 По 9 Цикл
							СтруктураДанных.Вставить("Сумма03" + НомПок);
							СтрСумма = "";
							Для Ном = 1 По 12 Цикл
								СтрСумма = СокрЛП(СтрСумма) + ПоказателиТаблПоле["Сумма03" + НомПок + "_" + Ном];
								СтруктураДанных.Удалить("Сумма03" + НомПок + "_" + Ном);
							КонецЦикла;
							СтруктураДанных["Сумма03" + НомПок] = ?(ПустаяСтрока(СтрСумма), 0, Число(СтрСумма));
						КонецЦикла;
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "СуммаЗачет1_1" Тогда
						СтруктураДанных.Вставить("СуммаЗачет1");
						СтрСуммаЗачет1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЗачет1 = СокрЛП(СтрСуммаЗачет1) + ПоказателиТаблПоле["СуммаЗачет1_" + Ном];
							СтруктураДанных.Удалить("СуммаЗачет1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЗачет1 = ?(ПустаяСтрока(СтрСуммаЗачет1), 0, Число(СтрСуммаЗачет1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОргСоц1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОргСоц1");
						СтрСуммаЛьготОргСоц1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОргСоц1 = СокрЛП(СтрСуммаЛьготОргСоц1) + ПоказателиТаблПоле["СуммаЛьготОргСоц1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОргСоц1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОргСоц1 = ?(ПустаяСтрока(СтрСуммаЛьготОргСоц1), 0, Число(СтрСуммаЛьготОргСоц1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОрг1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОрг1");
						СтрСуммаЛьготОрг1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОрг1 = СокрЛП(СтрСуммаЛьготОрг1) + ПоказателиТаблПоле["СуммаЛьготОрг1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОрг1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОрг1 = ?(ПустаяСтрока(СтрСуммаЛьготОрг1), 0, Число(СтрСуммаЛьготОрг1));
					ИначеЕсли ИмяПоказателя = "СуммаПлат1_1" Тогда
						СтруктураДанных.Вставить("СуммаПлат1");
						СтрСуммаПлат1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаПлат1 = СокрЛП(СтрСуммаПлат1) + ПоказателиТаблПоле["СуммаПлат1_" + Ном];
							СтруктураДанных.Удалить("СуммаПлат1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаПлат1 = ?(ПустаяСтрока(СтрСуммаПлат1), 0, Число(СтрСуммаПлат1));
					КонецЕсли;
						
				Иначе
					
					Если ИмяПоказателя = "ОКАТО1" Тогда
						СтруктураДанных.Вставить("ОКАТО");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО = СокрЛП(СтруктураДанных.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
							СтруктураДанных.Удалить("ОКАТО" + Ном);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НужноОбновлятьТаблицуВариантовЗаполнения Тогда
	
		ОбновитьВариантыЗаполнения();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.';
																					|en = 'Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Обновление пользовательских настроек успешно завершено!';
								|en = 'Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Изменения в структуре пользовательских настроек не обнаружены!';
								|en = 'Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					// КопироватьДанныеФормы(ЭлементМассива,ТаблДляЦикла);
					
					МассивДляУдаления = Новый Массив;
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокаВЭлементеМассива.Количество() > 0 Тогда
								СтрокаВЭлементеМассива = СтрокаВЭлементеМассива[0];
								МассивДляУдаления.Добавить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаВЭлементе Из МассивДляУдаления Цикл
						ЭлементМассива.Удалить(СтрокаВЭлементе);
					КонецЦикла; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтотОбъект[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	мСтруктураПеременных = Новый Структура;

	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);

        КонецЕсли;
	
	КонецЕсли;

	ЗаполнитьПустыеСтруктурыДанных();

	ПоказатьПериод();
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) 
		ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ТабличныйДокумент.Области.ДатаПодписи.Значение;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "РПН");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Или СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	Если НомерКорректировки = 0 Тогда 
		ТабличныйДокумент.Области.ВидДок.Значение = "V";
		ТабличныйДокумент.Области.Корректировка.Значение = "";
	Иначе
		ТабличныйДокумент.Области.ВидДок.Значение = "";
		ТабличныйДокумент.Области.Корректировка.Значение = "V";
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("Списки2021Кв1");
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Строка16  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(20,  ДопустимаяДлина.Переменная));
	Строка512 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(1024, ДопустимаяДлина.Переменная));
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",     Строка16   ,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",Строка512  ,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлассОпасностиОтходов", 512, , "Выбор класса опасности отходов", КоллекцияСписковВыбора["КлассОпасностиОтходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ОрганыРПН", 512, , "Выбор органа РосПриродНадзора", КоллекцияСписковВыбора["ОрганыРПН"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидыДокументов", 512, , "Выбор вида документа", КоллекцияСписковВыбора["ВидыДокументов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВВРаздел1", 512, , "Выбор вещества", КоллекцияСписковВыбора["ВВРаздел1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВВРаздел2", 512, , "Выбор вещества", КоллекцияСписковВыбора["ВВРаздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ФККО", 512, , "Выбор кода ФККО", КоллекцияСписковВыбора["ФККО"]);
	РегламентированнаяОтчетность.ЗагрузитьОбщиеСправочникиРПН(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Расчет";
	СтрокаУровня1.Представление            = "Расчет суммы" + Символы.ПС + "платежа";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_0";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
			
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
				
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Форма["мСтруктураМногоуровневыхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим) Тогда
				НайденноеЗначение = Форма["ТаблицаСтраницы" + ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим];
				
				ЭлементРазделовОтчета.ИндексКартинки        = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
					
					СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
					СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
					СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
					СтраницаРазделаОтчета.ИндексКартинки                    = 1;
					СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
#Если Не ВебКлиент Тогда 
		КМенюРО.Видимость = Ложь;
#КонецЕсли
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                                   = Истина;
	Иначе
		Элементы.Обновить.Доступность                                   = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Расчет" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтотОбъект);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		ТаблицаСтраницРаздела = ЭтотОбъект["ТаблицаСтраницы" + НаимРаздела];
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			СобратьДанныеМногоуровневогоРаздела(НаимРаздела, СтрТаблицаСтраницы);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Многостраничные и многострочные разделы.
	//
	Если  НаимРаздела = "Раздел3" Или НаимРаздела = "Раздел3_1" Или НаимРаздела = "Расчет" Тогда
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтотОбъект, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
	ИначеЕсли НаимРаздела <> "Титульный" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтотОбъект, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "-" Тогда
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногоуровневуюЧасть(СписокДанных, Макет, Путь, ОписаниеРаздела, ТД)
	Для Каждого Элт Из ОписаниеРаздела Цикл 
		Данные = СписокДанных[Элт.Имя];
		Инд = 0;
		ВыводитьЗначкиУдаленияСтрок = (СписокДанных[Элт.Имя].Количество() > 1);
		
		ТД.Очистить();
		ОблРазделитель = Макет.Области.Найти("РазделительДо" + Элт.Имя);
		Если ОблРазделитель <> Неопределено Тогда 
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РазделительДо" + Элт.Имя));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТД);
		
		Для Каждого Стр Из СписокДанных[Элт.Имя] Цикл 
			Инд = Инд + 1;
			Постфикс = Путь + "_" + Формат(Инд, "ЧГ=");
			
			ТД.Очистить();
			ТД.Вывести(Макет.ПолучитьОбласть(Элт.ИмяОбласти));
			Для Каждого Обл Из ТД.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
					Если Обл.СодержитЗначение = Истина Тогда 
						Обл.Значение = Стр.Значение.Данные[Обл.Имя];
						Обл.Имя = Обл.Имя + Постфикс;
					ИначеЕсли СтрНачинаетсяС(Обл.Имя, Элт.ИмяОбластиУдСтр) Тогда 
						Если ВыводитьЗначкиУдаленияСтрок Тогда 
							Обл.Имя = Обл.Имя + Постфикс;
						Иначе
							Обл.Имя = Обл.Имя + Постфикс;
							Обл.Гиперссылка = Ложь;
							Обл.Текст = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ТД);
			
			ВывестиМногоуровневуюЧасть(Стр.Значение.ДопСтроки, Макет, Путь + Постфикс, Элт.Подчиненные, ТД);
		КонецЦикла;
		
		ТД.Очистить();
		ТД.Вывести(Макет.ПолучитьОбласть(Элт.ИмяОбластиДобСтр));
		Для Каждого Обл Из ТД.Области Цикл
			Обл.Имя = Обл.Имя + Путь;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ТД);
		
		ТД.Очистить();
		ОблРазделитель = Макет.Области.Найти("РазделительПосле" + Элт.Имя);
		Если ОблРазделитель <> Неопределено Тогда 
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РазделительПосле" + Элт.Имя));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТД);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьУдалениеСтраниц(НаимТаблицыСтраницы)
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ЭтотОбъект[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СделатьЛистПолностьюДоступным()
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Для Каждого Обл Из ТабличныйДокумент.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
				И Обл.СодержитЗначение = Истина
				И Обл.Защита = Истина
				И Обл.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика Тогда 
				
				Обл.ЦветФона = мСтруктураЦветовРаскраски["_0"];
				Обл.Защита = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		СписокДанных = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекРаздела][НомерСтраницыРазделаОтчета - 1].Данные;
		ФиксированныеДанные = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекРаздела][НомерСтраницыРазделаОтчета - 1].ФиксированныеДанные; 
		Верх = Неопределено;
		Низ = Неопределено;
		ПолучитьВерхНизМногоуровневойЧасти(ИмяТекРаздела, Верх, Низ);
		
		ТабличныйДокумент.Очистить();
		Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
		
		ТД = Новый ТабличныйДокумент;
		ВывестиМногоуровневуюЧасть(СписокДанных, Макет, "", мСтруктураМногоуровневыхРазделов[ИмяТекРаздела], ТД);
		Таблица = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекРаздела];
		Для Каждого Стр Из Таблица Цикл 
			Стр.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		Для Каждого КЗ Из ФиксированныеДанные Цикл
			ОблВывода = ТабличныйДокумент.Области.Найти(КЗ.Ключ);
			Если ТипЗнч(ОблВывода) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
				ОблВывода.Значение = ФиксированныеДанные[КЗ.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		Таблица[НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		ОтрисоватьУдалениеСтраниц("ТаблицаСтраницы" + ИмяТекРаздела);
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		СделатьЛистПолностьюДоступным();
		Расчет(ЭтотОбъект, ИмяТекРаздела);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел3_1" Или ИмяТекРаздела = "Раздел3" Или ИмяТекРаздела = "Расчет" Тогда
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтотОбъект[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтотОбъект, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтотОбъект[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтотОбъект[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект);
		ИмяТаблицы = ?(ИмяТекРаздела = "Расчет", "ТаблицаСтраницыРасчет", "ТаблицаСтраницыРаздела3");
		ОтрисоватьУдалениеСтраниц(ИмяТаблицы);
	ИначеЕсли ИмяТекРаздела = "-" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтотОбъект[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
		
	Иначе
	// Обычные разделы.
	//
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ИмяТекРаздела <> "Титульный" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект);
			УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
			УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Расчет" Тогда
		МногостраничностьВРазделе = Истина;
	ИначеЕсли ИмяРаздела = "Раздел3" Или ИмяРаздела = "Раздел3_1" Тогда
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	Иначе
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	СтруктураГруппы = Неопределено;

	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							СтруктураГруппы = Форма[СтруктураГруппы];
							
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			ЗначПоказателя = ЗначениеПоказателя;
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
				Если (Инд > 0) И СтруктураГруппы.Количество() >= Инд Тогда
					СтруктураГруппы[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначПоказателя);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	ТаблицаГруппы = Неопределено;
	ИмяКолонкиТаблицы = "";
	
	Если ТаблицаГруппы <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из ТаблицаГруппы Цикл
			ИмяПоказателя = ИмяКолонкиТаблицы + "_" + Формат(ТаблицаГруппы.Индекс(СтрокаТаблицы) + 1, "ЧГ=");
			ТекОбласть = ТабличныйДокумент.Области.Найти(ИмяПоказателя);
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ТабличныйДокумент.Области.НомКоррект.Значение = "0";
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
			ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_0(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;

	Тот15=0;
	Тот16=0;
	Тот17=0;
	Тот18=0;
	
	СтрокаУровня1 = 1;
	Пока Области.Найти("П1000001_" + Формат(СтрокаУровня1, "ЧГ=")) <> Неопределено Цикл 
		Лок15=0;
		Лок16=0;
		Лок17=0;
		Лок18=0;
		
		СтрСтрокаУровня1 = "_" + Формат(СтрокаУровня1, "ЧГ=");
		СтрокаУровня2 = 1;
		
		Пока Области.Найти("П1100001" + СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=")) <> Неопределено Цикл 
			СтрСтрокаУровня2 = СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=");
			
			Области["П1100005" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																+ Области["П1100007" + СтрСтрокаУровня2].Значение
																+ Области["П1100008" + СтрСтрокаУровня2].Значение;
																
			Области["П1100015" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100010" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение;
			
			Области["П1100016" + СтрСтрокаУровня2].Значение = Области["П1100007" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100011" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение;
			
			Области["П1100017" + СтрСтрокаУровня2].Значение = Области["П1100008" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100012" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение;;
																
			Области["П1100018" + СтрСтрокаУровня2].Значение = Области["П1100015" + СтрСтрокаУровня2].Значение
																+ Области["П1100016" + СтрСтрокаУровня2].Значение
																+ Области["П1100017" + СтрСтрокаУровня2].Значение;
																
			Тот15 = Тот15 + Области["П1100015" + СтрСтрокаУровня2].Значение;
			Тот16 = Тот16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Тот17 = Тот17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			Тот18 = Тот18 + Области["П1100018" + СтрСтрокаУровня2].Значение;
			Лок15 = Лок15 + Области["П1100015" + СтрСтрокаУровня2].Значение;
			Лок16 = Лок16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Лок17 = Лок17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			Лок18 = Лок18 + Области["П1100018" + СтрСтрокаУровня2].Значение;
			СтрокаУровня2 = СтрокаУровня2 + 1;
		КонецЦикла;
		
		Области["П1000015" + СтрСтрокаУровня1].Значение = Лок15;
		Области["П1000016" + СтрСтрокаУровня1].Значение = Лок16;
		Области["П1000017" + СтрСтрокаУровня1].Значение = Лок17;
		Области["П1000018" + СтрСтрокаУровня1].Значение = Лок18;
		
		СтрокаУровня1 = СтрокаУровня1 + 1;
	КонецЦикла;

	Области["П0000015"].Значение = Тот15;
	Области["П0000016"].Значение = Тот16;
	Области["П0000017"].Значение = Тот17;
	Области["П0000018"].Значение = Тот18;
	
	Если ИмяТекущейСтраницы = "Раздел1_0" Тогда 
		Тот15=0;
		Тот16=0;
		Тот17=0;
		Тот18=0;
		
		СтрокаУровня1 = 1;
		Пока Области.Найти("П2000001_" + Формат(СтрокаУровня1, "ЧГ=")) <> Неопределено Цикл 
			СуффСтр = Формат(СтрокаУровня1, "ЧГ=");
			Области["П2000005_" + СуффСтр].Значение = Области["П2000006_" + СуффСтр].Значение 
														+ Области["П2000007_" + СуффСтр].Значение
														+ Области["П2000008_" + СуффСтр].Значение;
														
			Области["П2000015_" + СуффСтр].Значение = Области["П2000006_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000010_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение
														* Области["П2000014_" + СуффСтр].Значение;
														
			Области["П2000016_" + СуффСтр].Значение = Области["П2000007_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000011_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение
														* Области["П2000014_" + СуффСтр].Значение;
														
			Области["П2000017_" + СуффСтр].Значение = Области["П2000008_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000012_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение
														* Области["П2000014_" + СуффСтр].Значение;
														
			Области["П2000018_" + СуффСтр].Значение = Области["П2000015_" + СуффСтр].Значение 
														+ Области["П2000016_" + СуффСтр].Значение
														+ Области["П2000017_" + СуффСтр].Значение;
			
			Тот15 = Тот15 + Области["П2000015_" + СуффСтр].Значение;
			Тот16 = Тот16 + Области["П2000016_" + СуффСтр].Значение;
			Тот17 = Тот17 + Области["П2000017_" + СуффСтр].Значение;
			Тот18 = Тот18 + Области["П2000018_" + СуффСтр].Значение;
			СтрокаУровня1 = СтрокаУровня1 + 1;
		КонецЦикла;
		
		Области["П3000015"].Значение = Тот15;
		Области["П3000016"].Значение = Тот16;
		Области["П3000017"].Значение = Тот17;
		Области["П3000018"].Значение = Тот18;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_1(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;

	Тот16=0;
	Тот17=0;
	Тот18=0;
	Тот19=0;
	
	СтрокаУровня1 = 1;
	Пока Области.Найти("П1000001_" + Формат(СтрокаУровня1, "ЧГ=")) <> Неопределено Цикл 
		Лок16=0;
		Лок17=0;
		Лок18=0;
		Лок19=0;
		
		СтрСтрокаУровня1 = "_" + Формат(СтрокаУровня1, "ЧГ=");
		СтрокаУровня2 = 1;
		
		Пока Области.Найти("П1100001" + СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=")) <> Неопределено Цикл 
			СтрСтрокаУровня2 = СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=");
			
			Области["П1100005" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																+ Области["П1100007" + СтрСтрокаУровня2].Значение
																+ Области["П1100008" + СтрСтрокаУровня2].Значение;
																
			Области["П1100016" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100010" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение
																* Области["П1100015" + СтрСтрокаУровня2].Значение;
			
			Области["П1100017" + СтрСтрокаУровня2].Значение = Области["П1100007" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100011" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение
																* Области["П1100015" + СтрСтрокаУровня2].Значение;
			
			Области["П1100018" + СтрСтрокаУровня2].Значение = Области["П1100008" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100012" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение
																* Области["П1100014" + СтрСтрокаУровня2].Значение
																* Области["П1100015" + СтрСтрокаУровня2].Значение;
																
			Области["П1100019" + СтрСтрокаУровня2].Значение = Области["П1100016" + СтрСтрокаУровня2].Значение
																+ Области["П1100017" + СтрСтрокаУровня2].Значение
																+ Области["П1100018" + СтрСтрокаУровня2].Значение;
																
			Тот16 = Тот16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Тот17 = Тот17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			Тот18 = Тот18 + Области["П1100018" + СтрСтрокаУровня2].Значение;
			Тот19 = Тот19 + Области["П1100019" + СтрСтрокаУровня2].Значение;
			Лок16 = Лок16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Лок17 = Лок17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			Лок18 = Лок18 + Области["П1100018" + СтрСтрокаУровня2].Значение;
			Лок19 = Лок19 + Области["П1100019" + СтрСтрокаУровня2].Значение;
			СтрокаУровня2 = СтрокаУровня2 + 1;
		КонецЦикла;
		
		Области["П1000016" + СтрСтрокаУровня1].Значение = Лок16;
		Области["П1000017" + СтрСтрокаУровня1].Значение = Лок17;
		Области["П1000018" + СтрСтрокаУровня1].Значение = Лок18;
		Области["П1000019" + СтрСтрокаУровня1].Значение = Лок19;
		
		СтрокаУровня1 = СтрокаУровня1 + 1;
	КонецЦикла;

	Области["П0000016"].Значение = Тот16;
	Области["П0000017"].Значение = Тот17;
	Области["П0000018"].Значение = Тот18;
	Области["П0000019"].Значение = Тот19;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	
	Тот9=0;
	Тот13=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П1000009_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Лок9=0;
		Лок13=0;
		
		Инд2 = 0;
		Пока Истина Цикл 
			Инд2 = Инд2 + 1;
			Инд2Стр = Формат(Инд2, "ЧГ=");
			Если Области.Найти("П1100009_" + Инд1Стр + "_" + Инд2Стр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			СтрВрем = Инд1Стр + "_" + Инд2Стр;
			
			Области["П1100009_" + СтрВрем].Значение = Области["П1100003_" + СтрВрем].Значение
													* Области["П1100004_" + СтрВрем].Значение
													* Области["П1100005_" + СтрВрем].Значение
													* Области["П1100006_" + СтрВрем].Значение
													* Области["П1100007_" + СтрВрем].Значение
													* Области["П1100008_" + СтрВрем].Значение;
			
			Лок9 = Лок9 + Области["П1100009_" + СтрВрем].Значение;
			Области["П1100013_" + СтрВрем].Значение = Области["П1100009_" + СтрВрем].Значение
													* Области["П1100012_" + СтрВрем].Значение;
			Лок13 = Лок13 + Области["П1100013_" + СтрВрем].Значение;
		КонецЦикла;
		
		Тот9 = Тот9 + Лок9;
		Тот13 = Тот13 + Лок13;
		Области["П1000009_" + Инд1Стр].Значение = Лок9;
		Области["П1000013_" + Инд1Стр].Значение = Лок13;
	КонецЦикла;
	Области["П0000009"].Значение = Тот9;
	Области["П0000013"].Значение = Тот13;
		
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел2(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	
	Тот17=0;
	Тот18=0;
	Тот19=0;
	Тот20=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П1000020_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Лок17=0;
		Лок18=0;
		Лок19=0;
		Лок20=0;
		
		Инд2 = 0;
		Пока Истина Цикл 
			Инд2 = Инд2 + 1;
			Инд2Стр = Формат(Инд2, "ЧГ=");
			Если Области.Найти("П1100015_" + Инд1Стр + "_" + Инд2Стр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			СтрВрем = Инд1Стр + "_" + Инд2Стр;
			Области["П1100005_" + СтрВрем].Значение = Области["П1100006_" + СтрВрем].Значение
													+ Области["П1100007_" + СтрВрем].Значение
													+ Области["П1100008_" + СтрВрем].Значение;
			Области["П1100017_" + СтрВрем].Значение = Области["П1100006_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100010_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение
													* Области["П1100015_" + СтрВрем].Значение
													* Области["П1100016_" + СтрВрем].Значение;
			Области["П1100018_" + СтрВрем].Значение = Области["П1100007_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100011_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение
													* Области["П1100015_" + СтрВрем].Значение
													* Области["П1100016_" + СтрВрем].Значение;
			Области["П1100019_" + СтрВрем].Значение = Области["П1100008_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100012_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение
													* Области["П1100015_" + СтрВрем].Значение
													* Области["П1100016_" + СтрВрем].Значение;
			Области["П1100020_" + СтрВрем].Значение = Области["П1100017_" + СтрВрем].Значение
													+ Области["П1100018_" + СтрВрем].Значение
													+ Области["П1100019_" + СтрВрем].Значение
													* Области["П1100015_" + СтрВрем].Значение
													* Области["П1100016_" + СтрВрем].Значение;
			
			Лок17 = Лок17 + Области["П1100017_" + СтрВрем].Значение;
			Лок18 = Лок18 + Области["П1100018_" + СтрВрем].Значение;
			Лок19 = Лок19 + Области["П1100019_" + СтрВрем].Значение;
			Лок20 = Лок20 + Области["П1100020_" + СтрВрем].Значение;
		КонецЦикла;
		
		Тот17 = Тот17 + Лок17;
		Тот18 = Тот18 + Лок18;
		Тот19 = Тот19 + Лок19;
		Тот20 = Тот20 + Лок20;
		Области["П1000017_" + Инд1Стр].Значение = Лок17;
		Области["П1000018_" + Инд1Стр].Значение = Лок18;
		Области["П1000019_" + Инд1Стр].Значение = Лок19;
		Области["П1000020_" + Инд1Стр].Значение = Лок20;
	КонецЦикла;
	Области["П0000017"].Значение = Тот17;
	Области["П0000018"].Значение = Тот18;
	Области["П0000019"].Значение = Тот19;
	Области["П0000020"].Значение = Тот20;
	
	Тот17=0;
	Тот18=0;
	Тот19=0;
	Тот20=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П2000020_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П2000005_" + Инд1Стр].Значение = Области["П2000006_" + Инд1Стр].Значение
												+ Области["П2000007_" + Инд1Стр].Значение
												+ Области["П2000008_" + Инд1Стр].Значение;
		Области["П2000017_" + Инд1Стр].Значение = Области["П2000006_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000010_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение
												* Области["П2000015_" + Инд1Стр].Значение
												* Области["П2000016_" + Инд1Стр].Значение;
		Области["П2000018_" + Инд1Стр].Значение = Области["П2000007_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000011_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение
												* Области["П2000015_" + Инд1Стр].Значение
												* Области["П2000016_" + Инд1Стр].Значение;
		Области["П2000019_" + Инд1Стр].Значение = Области["П2000008_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000012_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение
												* Области["П2000015_" + Инд1Стр].Значение
												* Области["П2000016_" + Инд1Стр].Значение;
		Области["П2000020_" + Инд1Стр].Значение = Области["П2000017_" + Инд1Стр].Значение
												+ Области["П2000018_" + Инд1Стр].Значение
												+ Области["П2000019_" + Инд1Стр].Значение;
		
		Тот17 = Тот17 + Области["П2000017_" + Инд1Стр].Значение;
		Тот18 = Тот18 + Области["П2000018_" + Инд1Стр].Значение;
		Тот19 = Тот19 + Области["П2000019_" + Инд1Стр].Значение;
		Тот20 = Тот20 + Области["П2000020_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П3000017"].Значение = Тот17;
	Области["П3000018"].Значение = Тот18;
	Области["П3000019"].Значение = Тот19;
	Области["П3000020"].Значение = Тот20;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРасчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	Области["П020"].Значение = Области["П021"].Значение + Области["П022"].Значение + Области["П023"].Значение + Области["П024"].Значение + Области["П025"].Значение;
	Области["П040"].Значение = Области["П041"].Значение + Области["П042"].Значение + Области["П043"].Значение;
	Области["П060"].Значение = Области["П061"].Значение + Области["П062"].Значение + Области["П063"].Значение;
	Области["П080"].Значение = Области["П081"].Значение + Области["П082"].Значение + Области["П083"].Значение;
	Области["П100"].Значение = Области["П101"].Значение + Области["П102"].Значение;
	Области["П120"].Значение = Области["П121"].Значение + Области["П122"].Значение + Области["П123"].Значение;
	Области["П130"].Значение = Области["П131"].Значение + Области["П132"].Значение + Области["П133"].Значение + Области["П134"].Значение + Области["П135"].Значение;
	Области["П140"].Значение = Области["П141"].Значение + Области["П142"].Значение + Области["П143"].Значение + Области["П144"].Значение + Области["П145"].Значение;
	Области["П151"].Значение = Области["П040"].Значение - Области["П131"].Значение;
	Области["П152"].Значение = Области["П060"].Значение - Области["П132"].Значение;
	Области["П153"].Значение = Области["П080"].Значение - Области["П133"].Значение;
	Области["П154"].Значение = Области["П100"].Значение - Области["П134"].Значение;
	Области["П155"].Значение = Области["П120"].Значение - Области["П135"].Значение;
	Области["П150"].Значение = Области["П151"].Значение + Области["П152"].Значение + Области["П153"].Значение + Области["П154"].Значение + Области["П155"].Значение;
	Области["П160"].Значение = Области["П161"].Значение + Области["П162"].Значение + Области["П163"].Значение + Области["П164"].Значение + Области["П165"].Значение;
	Области["П170"].Значение = Области["П171"].Значение + Области["П172"].Значение + Области["П173"].Значение + Области["П174"].Значение + Области["П175"].Значение;
	Области["П180"].Значение = Области["П181"].Значение + Области["П182"].Значение + Области["П183"].Значение + Области["П184"].Значение + Области["П185"].Значение;
	Области["П190"].Значение = Области["П191"].Значение + Области["П192"].Значение + Области["П193"].Значение + Области["П194"].Значение + Области["П195"].Значение;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел3_1(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Для _Итер = 2 по 3 Цикл 
		ИтерСтр = "" + (_Итер * 2);
		Области = Форма.ТабличныйДокумент.Области;
		Тот18 = 0;
		Тот19 = 0;
		Тот20 = 0;
		Тот21 = 0;
		
		Инд1 = 0;
		Пока Истина Цикл 
			Инд1 = Инд1 + 1;
			Инд1Стр = Формат(Инд1, "ЧГ=");
			Если Области.Найти("П0000" + ИтерСтр + "0001008_" + Инд1Стр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			Области["П0000" + ИтерСтр + "0001007_" + Инд1Стр].Значение = Области["П0000" + ИтерСтр + "0001008_" + Инд1Стр].Значение
														+ Области["П0000" + ИтерСтр + "0001009_" + Инд1Стр].Значение
														+ Области["П0000" + ИтерСтр + "0001010_" + Инд1Стр].Значение;
														
			Области["П0000" + ИтерСтр + "0001018_" + Инд1Стр].Значение = Области["П0000" + ИтерСтр + "0001008_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001011_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001015_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001016_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001017_" + Инд1Стр].Значение;
			Области["П0000" + ИтерСтр + "0001019_" + Инд1Стр].Значение = Области["П0000" + ИтерСтр + "0001009_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001011_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001012_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001014_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001015_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001016_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001017_" + Инд1Стр].Значение;
			Области["П0000" + ИтерСтр + "0001020_" + Инд1Стр].Значение = Области["П0000" + ИтерСтр + "0001010_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001011_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001013_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001015_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001016_" + Инд1Стр].Значение
														* Области["П0000" + ИтерСтр + "0001017_" + Инд1Стр].Значение;
														
			Области["П0000" + ИтерСтр + "0001021_" + Инд1Стр].Значение = Области["П0000" + ИтерСтр + "0001018_" + Инд1Стр].Значение
														+ Области["П0000" + ИтерСтр + "0001019_" + Инд1Стр].Значение
														+ Области["П0000" + ИтерСтр + "0001020_" + Инд1Стр].Значение;
			Тот18 = Тот18 + Области["П0000" + ИтерСтр + "0001018_" + Инд1Стр].Значение;
			Тот19 = Тот19 + Области["П0000" + ИтерСтр + "0001019_" + Инд1Стр].Значение;
			Тот20 = Тот20 + Области["П0000" + ИтерСтр + "0001020_" + Инд1Стр].Значение;
			Тот21 = Тот21 + Области["П0000" + ИтерСтр + "0001021_" + Инд1Стр].Значение;
		КонецЦикла;
		
		Области["П0000" + ИтерСтр + "0002018"].Значение = Тот18;
		Области["П0000" + ИтерСтр + "0002019"].Значение = Тот19;
		Области["П0000" + ИтерСтр + "0002021"].Значение = Тот20;
		Области["П0000" + ИтерСтр + "0002021"].Значение = Тот21;
	КонецЦикла;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел3(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	Тот24 = 0;
	Тот25 = 0;
	Тот26 = 0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П000030001001_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П000030001012_" + Инд1Стр].Значение = Области["П000030001013_" + Инд1Стр].Значение
													+ Области["П000030001014_" + Инд1Стр].Значение;
													
		Области["П000030001024_" + Инд1Стр].Значение = Области["П000030001013_" + Инд1Стр].Значение
													* Области["П000030001015_" + Инд1Стр].Значение
													* Области["П000030001017_" + Инд1Стр].Значение
													* Области["П000030001019_" + Инд1Стр].Значение
													* Области["П000030001020_" + Инд1Стр].Значение
													* Области["П000030001021_" + Инд1Стр].Значение
													* Области["П000030001022_" + Инд1Стр].Значение
													* Области["П000030001023_" + Инд1Стр].Значение;
													
		Области["П000030001025_" + Инд1Стр].Значение = Области["П000030001014_" + Инд1Стр].Значение
													* Области["П000030001015_" + Инд1Стр].Значение
													* Области["П000030001018_" + Инд1Стр].Значение
													* Области["П000030001019_" + Инд1Стр].Значение
													* Области["П000030001021_" + Инд1Стр].Значение
													* Области["П000030001022_" + Инд1Стр].Значение
													* Области["П000030001023_" + Инд1Стр].Значение;
		
		Области["П000030001026_" + Инд1Стр].Значение = Области["П000030001024_" + Инд1Стр].Значение
													+ Области["П000030001025_" + Инд1Стр].Значение;
													
		Тот24 = Тот24 + Области["П000030001024_" + Инд1Стр].Значение;
		Тот25 = Тот25 + Области["П000030001025_" + Инд1Стр].Значение;
		Тот26 = Тот26 + Области["П000030001026_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П000030002024"].Значение = Тот24;
	Области["П000030002025"].Значение = Тот25;
	Области["П000030002026"].Значение = Тот26;
	
	Тот24 = 0;
	Тот25 = 0;
	Тот26 = 0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П000050001001_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П000050001012_" + Инд1Стр].Значение = Области["П000050001013_" + Инд1Стр].Значение
													+ Области["П000050001014_" + Инд1Стр].Значение;
													
		Области["П000050001024_" + Инд1Стр].Значение = Области["П000050001013_" + Инд1Стр].Значение
													* Области["П000050001015_" + Инд1Стр].Значение
													* Области["П000050001017_" + Инд1Стр].Значение
													* Области["П000050001019_" + Инд1Стр].Значение
													* Области["П000050001020_" + Инд1Стр].Значение
													* Области["П000050001021_" + Инд1Стр].Значение
													* Области["П000050001022_" + Инд1Стр].Значение
													* Области["П000050001023_" + Инд1Стр].Значение;
													
		Области["П000050001025_" + Инд1Стр].Значение = Области["П000050001014_" + Инд1Стр].Значение
													* Области["П000050001015_" + Инд1Стр].Значение
													* Области["П000050001018_" + Инд1Стр].Значение
													* Области["П000050001019_" + Инд1Стр].Значение
													* Области["П000050001021_" + Инд1Стр].Значение
													* Области["П000050001022_" + Инд1Стр].Значение
													* Области["П000050001023_" + Инд1Стр].Значение;
		
		Области["П000050001026_" + Инд1Стр].Значение = Области["П000050001025_" + Инд1Стр].Значение
													+ Области["П000050001024_" + Инд1Стр].Значение;
													
		Тот24 = Тот24 + Области["П000050001024_" + Инд1Стр].Значение;
		Тот25 = Тот25 + Области["П000050001025_" + Инд1Стр].Значение;
		Тот26 = Тот26 + Области["П000050001026_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П000050002024"].Значение = Тот24;
	Области["П000050002025"].Значение = Тот25;
	Области["П000050002026"].Значение = Тот26;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаСтраниц;
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Области = Форма.ТабличныйДокумент.Области;
	Если ИмяТекущейСтраницы = "Раздел1_0" Тогда
		РасчетРаздел1_0(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел1_1" Тогда
		РасчетРаздел1_1(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел1_2" Тогда
		РасчетРаздел1_2(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		РасчетРаздел2(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3_1" Тогда
		РасчетРаздел3_1(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3" Тогда
		РасчетРаздел3(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Расчет" Тогда
		РасчетРасчет(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Форма.Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "" Тогда
		
		Расчет(Форма, "Расчет");
		
	ИначеЕсли НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраниц) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтраниц = Форма[ТаблицаСтраниц];
	СтрТаблицаСтраницы = ТаблицаСтраниц.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраница = СтрТаблицаСтраницы[0];
	Данные = АктивнаяСтраница.Данные[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраниц;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекущейСтраницыПанели) Тогда 
		Таблица = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекущейСтраницыПанели];
		СтрТаблицаСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицаСтраницы[0]);
		Таблица.Удалить(СтрТаблицаСтраницы[0]);
		Возврат;
	КонецЕсли;
	
	мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтотОбъект[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	ИндексТекСтраницыРаздела = ЭтотОбъект[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);

	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;

	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ТабличныйДокумент.ТекущаяОбласть.Имя);
КонецПроцедуры

&НаСервере
Функция НайтиПутьДляДобавления(Путь, Данные, ИмяОблДоб)
	Для Каждого Элт Из Данные Цикл 
		Если Элт.ИмяОбластиДобСтр = ИмяОблДоб Тогда 
			Возврат Путь + ?(ЗначениеЗаполнено(Путь), ";", "") + Элт.Имя;
		КонецЕсли;
		
		Рез = НайтиПутьДляДобавления(Элт.Имя, Элт.Подчиненные, ИмяОблДоб);
		Если ЗначениеЗаполнено(Рез) Тогда 
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВМногоуровневыйРаздел(КолонкаРазделыОтчетаСокрНаим, ОблИмя)
	ОблИмяИтог = СтрЗаменить(СтрЗаменить(ОблИмя, "Значок", ""), "ДобавитьСтроку", "ДобавлениеСтроки");
	ИндПодч = СтрНайти(ОблИмяИтог, "_");
	Если ИндПодч > 0 Тогда 
		ОблИмяИтог = Лев(ОблИмяИтог, ИндПодч - 1);
	КонецЕсли;
	
	Прототип = мСтруктураМногоуровневыхРазделов[КолонкаРазделыОтчетаСокрНаим];
	Путь = НайтиПутьДляДобавления("", Прототип, ОблИмяИтог);
	
	М1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОблИмя, "_");
	М2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, ";");
	Постфикс = "";
	Для Инд = 1 По М1.ВГраница() Цикл 
		Постфикс = Постфикс + "_" + М1[Инд];
	КонецЦикла;
	
	Данные = ЭтотОбъект["ТаблицаСтраницы" + КолонкаРазделыОтчетаСокрНаим].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0].Данные[М2[0]];
	ОТЧ = Новый ОписаниеТипов("Число");
	Для Инд = 1 По М2.ВГраница() Цикл 
		Данные = Данные[ОТЧ.ПривестиЗначение(М1[Инд]) - 1].Значение.ДопСтроки[М2[Инд]];
	КонецЦикла;
	КДобавлению = Постфикс + "_" + Формат(Данные.Количество() + 1, "ЧГ=");
	
	ВерхОбласти = ТабличныйДокумент.Область(ОблИмя).Верх - 1;
	ПрототипДобавляемойСтроки = Прототип;
	Для Каждого Элт Из М2 Цикл
		Для Каждого Элт2 Из ПрототипДобавляемойСтроки Цикл 
			Если Элт = Элт2.Имя Тогда 
				ДобСтр = Элт2;
				ПрототипДобавляемойСтроки = Элт2.Подчиненные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТД = Новый ТабличныйДокумент;
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + КолонкаРазделыОтчетаСокрНаим);
	ДобавитьСтрокуВМногоуровневуюЧасть(Макет, КДобавлению, ДобСтр, ТД, 0);
	ВставляемаяОбласть = ТД.Область(1, , ТД.ВысотаТаблицы);
	ВставляемаяПреемник = ТабличныйДокумент.Область(ВерхОбласти + 1, , ВерхОбласти + ТД.ВысотаТаблицы);
	
	ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ВставляемаяПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	Для Каждого Обл Из ТД.Области Цикл 
		ОблПриемник = ТабличныйДокумент.Область(ВерхОбласти + Обл.Верх, Обл.Лево, ВерхОбласти + Обл.Низ, Обл.Право);
		ОблПриемник.Имя = Обл.Имя;
	КонецЦикла;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТабличныйДокумент.Области.Найти(ДобСтр.ИмяОбластиУдСтр + Постфикс + "_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	СделатьЛистПолностьюДоступным();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВМногоуровневуюЧасть(Макет, Постфикс, ОписаниеРаздела, ТД, Уровень)
	ОблДляВывода = Макет.ПолучитьОбласть(ОписаниеРаздела.ИмяОбласти);
	ТД.Вывести(ОблДляВывода);
	Для Каждого Обл Из ОблДляВывода.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
			ТД.Области[Обл.Имя].Имя = Обл.Имя + Постфикс;
		Иначе
			ТД.Области[Обл.Имя].Имя = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Подч Из ОписаниеРаздела.Подчиненные Цикл 
		ДобавитьСтрокуВМногоуровневуюЧасть(Макет, Постфикс + "_1", Подч, ТД, Уровень + 1);
	КонецЦикла;
	
	Если Уровень > 0 Тогда
		ОблДобСтр = Макет.ПолучитьОбласть(ОписаниеРаздела.ИмяОбластиДобСтр);
		Для Каждого Обл Из ОблДобСтр.Области Цикл
			Обл.Имя = Обл.Имя + Лев(Постфикс, СтрДлина(Постфикс) - 2);
		КонецЦикла;
		ТД.Вывести(ОблДобСтр);
		ТД.Области[ОписаниеРаздела.ИмяОбластиУдСтр + Постфикс].Гиперссылка = Ложь;
		ТД.Области[ОписаниеРаздела.ИмяОбластиУдСтр + Постфикс].Текст = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим, Область = Неопределено)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(КолонкаРазделыОтчетаСокрНаим) Тогда 
		ДобавитьСтрокуВМногоуровневыйРаздел(КолонкаРазделыОтчетаСокрНаим, Область);
	Иначе 
		ВставитьДополнительнуюСтроку(ЭтотОбъект, КолонкаРазделыОтчетаСокрНаим, Область);
	КонецЕсли;
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(КолонкаРазделыОтчетаСокрНаим) Тогда 
		Расчет(ЭтотОбъект, КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтотОбъект["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтотОбъект, ТекущаяОбласть, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ТабличныйДокумент.ТекущаяОбласть.Имя);
КонецПроцедуры

&НаСервере
Функция НайтиПутьДляУдаления(Путь, Данные, ИмяОблДоб)
	Для Каждого Элт Из Данные Цикл 
		Если Элт.ИмяОбластиУдСтр = ИмяОблДоб Тогда 
			Возврат Путь + ?(ЗначениеЗаполнено(Путь), ";", "") + Элт.Имя;
		КонецЕсли;
		
		Рез = НайтиПутьДляУдаления(Элт.Имя, Элт.Подчиненные, ИмяОблДоб);
		Если ЗначениеЗаполнено(Рез) Тогда 
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ПереименоватьЯчейкиПослеУдаления(М1)
	ОТЧ = Новый ОписаниеТипов("Число");
	ТекущаяПозиция = ОТЧ.ПривестиЗначение(М1[М1.ВГраница()]);
	ЧастьИмени = "_";
	Для Инд = 1 По М1.ВГраница() - 1 Цикл 
		ЧастьИмени = ЧастьИмени + Формат(М1[Инд], "ЧГ=") + "_";
	КонецЦикла;
	
	Переименовано = Истина;
	Пока Переименовано Цикл 
		Переименовано = Ложь;
		ПредПозицияСтр = Формат(ТекущаяПозиция, "ЧГ=");
		ЧастьИмениПред = ЧастьИмени + ПредПозицияСтр;
		ТекущаяПозиция = ТекущаяПозиция + 1;
		ТекущаяПозицияСтр = Формат(ТекущаяПозиция, "ЧГ=");
		ЧастьИмениТек = ЧастьИмени + ТекущаяПозицияСтр;
		ЧастьИмениДлина = СтрДлина(ЧастьИмениТек);
		
		Для Каждого Обл Из ТабличныйДокумент.Области Цикл
			ОблИмя = Обл.Имя;
			ИндПодч = СтрНайти(ОблИмя, "_");
			Если ИндПодч = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Сред(ОблИмя, ИндПодч, ЧастьИмениДлина) = ЧастьИмениТек Тогда 
				СледСимвол = Сред(ОблИмя, ИндПодч + ЧастьИмениДлина, 1);
				Если СледСимвол = "" Или СледСимвол = "_" Тогда 
					ОблИмяНов = Лев(ОблИмя, ИндПодч - 1) + ЧастьИмениПред + Сред(ОблИмя, ИндПодч + ЧастьИмениДлина);
					Обл.Имя = ОблИмяНов;
					Переименовано = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиИмяОбластиДобавленияСтроки(Прототип, М2)
	Прт = Прототип;
	Для Инд = 0 По М2.ВГраница() Цикл
		ПртПодч = Неопределено;
		Для Каждого Элт Из Прт Цикл 
			Если Элт.Имя = М2[Инд] Тогда 
				ПртПодч = Элт.Подчиненные;
				Если Инд = М2.ВГраница() Тогда 
					Возврат Элт.ИмяОбластиДобСтр;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Прт = ПртПодч;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура УдалитьОбласть(ОблИмя, Данные, М1, М2, Прототип, КУдалению)
	ВерхОбласти = ТабличныйДокумент.Области[ОблИмя].Верх;
	
	Если Данные.Количество() = 2 Тогда
		ЛевОблИмя = Лев(ОблИмя, СтрДлина(ОблИмя) - 1);
		Для Инд = 1 По 2 Цикл 
			Обл = ТабличныйДокумент.Области[ЛевОблИмя + Инд];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Количество() = КУдалению + 1 Тогда 
		
		НовОблИмя = НайтиИмяОбластиДобавленияСтроки(Прототип, М2);
		Для Инд = 1 По М1.ВГраница()-1 Цикл 
			НовОблИмя = НовОблИмя + "_" + М1[Инд];
		КонецЦикла;
		
		НизОбласти = ТабличныйДокумент.Области[НовОблИмя].Верх - 1;
	Иначе
		НовОблИмя = "";
		Для Инд = 0 По М1.ВГраница()-1 Цикл 
			НовОблИмя = НовОблИмя + М1[Инд] + "_";
		КонецЦикла;
		
		НовОблИмя = НовОблИмя + Формат(КУдалению + 2, "ЧГ=");
		НизОбласти = ТабличныйДокумент.Области[НовОблИмя].Верх - 1;
	КонецЕсли;
	
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(ВерхОбласти,0,НизОбласти,0), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Данные.Удалить(КУдалению);
	
	Если Данные.Количество() > КУдалению Тогда 
		ПереименоватьЯчейкиПослеУдаления(М1);
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуИзМногоуровневогоРаздела(КолонкаРазделыОтчетаСокрНаим, ОблИмя)
	ОблИмяИтог = Лев(ОблИмя, СтрНайти(ОблИмя, "_") - 1);
	
	Прототип = мСтруктураМногоуровневыхРазделов[КолонкаРазделыОтчетаСокрНаим];
	Путь = НайтиПутьДляУдаления("", Прототип, ОблИмяИтог);
	
	М1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОблИмя, "_");
	М2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, ";");
	Постфикс = "";
	Для Инд = 1 По М1.ВГраница() Цикл 
		Постфикс = Постфикс + "_" + М1[Инд];
	КонецЦикла;
	
	Данные = ЭтотОбъект["ТаблицаСтраницы" + КолонкаРазделыОтчетаСокрНаим].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0].Данные[М2[0]];
	ОТЧ = Новый ОписаниеТипов("Число");
	Для Инд = 1 По М2.ВГраница() Цикл 
		Данные = Данные[ОТЧ.ПривестиЗначение(М1[Инд]) - 1].Значение.ДопСтроки[М2[Инд]];
	КонецЦикла;
	
	Если Данные.Количество() = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	КУдалению = ОТЧ.ПривестиЗначение(М1[М1.ВГраница()]) - 1;
	УдалитьОбласть(ОблИмя, Данные, М1, М2, Прототип, КУдалению);
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница, ОбластьИмя)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ТекущаяСтраница) Тогда 
		УдалитьСтрокуИзМногоуровневогоРаздела(ТекущаяСтраница, ОбластьИмя);
	Иначе 
		УдалитьДополнительнуюСтроку(ЭтотОбъект, , , ТекущаяСтраница, ОбластьИмя);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтотОбъект, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершениеПослеСохраненияЗавершение", ЭтотОбъект, Новый Структура("КомандаИмя", ДополнительныеПараметры.Команда.Имя));
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершениеПослеСохраненияЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Печать(ДополнительныеПараметры.КомандаИмя);
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтотОбъект, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") ИЛИ ПустаяСтрока(КодПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "E" ИЛИ ТипДанныхПоказателя = "Е") И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = СтрЗаменить(Заголовок, " (сводная форма)", "");
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница, Область)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	Если Область = "ДобавитьСтрокуЗначок3" Или Область = "ДобавитьСтроку3" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок4" Или Область = "ДобавитьСтроку4" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок5" Или Область = "ДобавитьСтроку5" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок6" Или Область = "ДобавитьСтроку6" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок7" Или Область = "ДобавитьСтроку7" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок8" Или Область = "ДобавитьСтроку8" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы8;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок9" Или Область = "ДобавитьСтроку9" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы9;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок10" Или Область = "ДобавитьСтроку10" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы10;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок11" Или Область = "ДобавитьСтроку11" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы11;
	Иначе
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
		#КонецЕсли
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
								|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	Возврат Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница, ОбластьИмя) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	СредОбластьИмя = Сред(ОбластьИмя, 14, 11);
	ИмяГруппы = "";
	Для Каждого КЗ Из Форма.СтруктураРеквизитовФормы Цикл 
		Если СредОбластьИмя = КЗ.Значение Тогда 
			ИмяГруппы = СредОбластьИмя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяГруппы = "" Тогда 
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
		#КонецЕсли
	КонецЕсли;
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + НомУдаляемойСтроки;
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяСтраницы) Тогда 
			Таблица = ЭтотОбъект["ТаблицаСтраницы" + ИмяСтраницы];
			СтрТаблицыСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			СтрТаблицыСтраницы[0].Данные = ПолучитьПустуюСтруктуруДанных(ИмяСтраницы);
			СтрТаблицыСтраницы[0].ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(ИмяСтраницы);
			ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицыСтраницы[0]);
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ИндексТекСтраницыРаздела+1);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницы);
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
		Возврат;
	ИначеЕсли Область.Имя = "is_ceo"
		Или Область.Имя = "is_separate"
		Или Область.Имя = "is_non_resident" Тогда
		Область.Значение = Не Область.Значение;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ЗаполнитьПоОКТМО" Тогда 
		ОКТМО = СокрЛП(ТабличныйДокумент.Области.П010.Значение);
		Если ПустаяСтрока(ОКТМО) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Для заполнения данных необходимо заполнить код ОКТМО (строка 010)");
		Иначе
			ЗаполнитьПоОКТМО(ОКТМО);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "ЗаполнитьПоДаннымРазделов" Тогда 
		СобратьДанныеПоВсемОКТМО();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "is_overlimit"
		Или Область.Имя = "ПР0301"
		Или Область.Имя = "ПР0302"
		Или Область.Имя = "ПР0303" Тогда 
		Область.Значение = Не Область.Значение;
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "ФайлДоверенностиДобавить" Тогда
		Если Не ЗначениеЗаполнено(Доверенность) Тогда 
			Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
				ТекстВопроса = "Перед добавлением доверенности необходимо сохранить отчет. Продолжить?";
				ОО = Новый ОписаниеОповещения("ВопросДоверенностьЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Иначе
				ВопросДоверенностьЗавершение(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		Иначе
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(Доверенность), Ложь);
		КонецЕсли;
		Возврат;
	ИначеЕсли Область.Имя = "ФайлДоверенностиУдалить" И Область.Гиперссылка = Истина И ЗначениеЗаполнено(Доверенность) Тогда
		УдалитьФайлДоверенности();
		Возврат;
	ИначеЕсли Область.Имя = "ДобавитьСканКопию" Тогда 
		ТекДокумент = ТабличныйДокумент.Области.ПрисоединенныйФайлРаздела.Значение;
		Если ТекДокумент = ПредопределенноеЗначение("Справочник.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка") Тогда
			Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
				ТекстВопроса = "Перед добавлением доверенности необходимо сохранить отчет. Продолжить?";
				ОО = Новый ОписаниеОповещения("ВопросДобавитьПрисоединенныйФайлРазделаЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Иначе
				ДобавитьПрисоединенныйФайлРазделаПослеСохраненияЗавершение(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		Иначе
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(ТекДокумент), Ложь);
		КонецЕсли;
	ИначеЕсли Область.Имя = "ДобавитьСканКопиюЗначок" И Область.Гиперссылка = Истина И ЗначениеЗаполнено(Область.Текст) Тогда
		УдалитьФайлРаздела();
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	// Титульный
	Если СтрНайти(Область.Имя,"ПредставляетсяВ") > 0 И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Возврат;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Выбор органа Росприроднадзора");
		
		ПараметрыФормы.Вставить("ТаблицаЗначений", мОрганыРПН);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумОрганыРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "ПоПроизТерр" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоХозСуб.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "ПоХозСуб" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоПроизТерр.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "Флаг1" Или Область.Имя = "Флаг2" Тогда
		НовЗнач = ?(ЗначениеЗаполнено(Область.Значение), "", "Х");
		ТабличныйДокумент.Области.Флаг1.Значение = "";
		ТабличныйДокумент.Области.Флаг2.Значение = "";
		Область.Значение = НовЗнач;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	ИначеЕсли (СтрНайти(Область.Имя, "РазмерОрганизации") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Список = Новый СписокЗначений;
		Список.Добавить(0, "Пустое значение");
		Список.Добавить(3, "3 - МКП (микро предприятие)");
		Список.Добавить(4, "4 - МП (малое предприятие)");
		Список.Добавить(5, "5 - СП (среднее предприятие)");
		Список.Добавить(6, "6 - КП (крупное предприятие)");
		
		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаРазмерОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,, НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Расчет" Тогда 
		Если СтрНачинаетсяС(Область.Имя, "ПФ0") Тогда 
			НовЗнач = Не Область.Значение;
			Для Инд = 1 По 3 Цикл 
				ТабличныйДокумент.Области[Лев(Область.Имя, 6) + Инд].Значение = Ложь;
			КонецЦикла;
			Область.Значение = НовЗнач;
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			Возврат;
		КонецЕсли;
	ИначеЕсли (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный") И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Если Область.Имя = "region_oktmo" Или Область.Имя = "region_name" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМОРегионы");
			ОбластьНаименование = ТабличныйДокумент.Области["region_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["region_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "post_address_municipality_oktmo" Или Область.Имя = "post_address_municipality_name" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["post_address_municipality_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["post_address_municipality_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "legal_address_municipality_oktmo" Или Область.Имя = "legal_address_municipality_name" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["legal_address_municipality_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["legal_address_municipality_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "territory_org_code" Или Область.Имя = "territory_org_name" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "РПН");
			ОбластьНаименование = ТабличныйДокумент.Области["territory_org_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["territory_org_code"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "okved" Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКВЭД");
			ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, Неопределено);
		КонецЕсли;
	ИначеЕсли (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_0") И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1000004") Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100002") Или СтрНачинаетсяС(Область.Имя, "П1100019") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел1");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100019", "П1100002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100002", "П1100019"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П2000002") Или СтрНачинаетсяС(Область.Имя, "П2000019") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел1");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П2000019", "П2000002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П2000002", "П2000019"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1") И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1000004") Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100002") Или СтрНачинаетсяС(Область.Имя, "П1100020") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел1");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100020", "П1100002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100002", "П1100020"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1000004") Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100002") Или СтрНачинаетсяС(Область.Имя, "П1100014") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел1");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100014", "П1100002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100002", "П1100014"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1000004") Тогда
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П1100002") Или СтрНачинаетсяС(Область.Имя, "П1100021") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел2");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100021", "П1100002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П1100002", "П1100021"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П2000002") Или СтрНачинаетсяС(Область.Имя, "П2000021") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВВРаздел2");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П2000021", "П2000002"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П2000002", "П2000021"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда 
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "onvos_oktmo1" Или Область.Имя = "onvos_name1" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name1"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo1"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000030001002_") Или СтрНачинаетсяС(Область.Имя, "П000030001003_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ФККО");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000030001003_", "П000030001002_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000030001002_", "П000030001003_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000050001002_") Или СтрНачинаетсяС(Область.Имя, "П000050001003_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ФККО");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000050001003_", "П000050001002_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000050001002_", "П000050001003_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000030001004_") Или СтрНачинаетсяС(Область.Имя, "П000030001027_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000030001027_", "П000030001004_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000030001004_", "П000030001027_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000050001004_") Или СтрНачинаетсяС(Область.Имя, "П000050001027_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000050001027_", "П000050001004_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000050001004_", "П000050001027_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3_1" Тогда 
		Если Область.Имя = "onvos_oktmo" Или Область.Имя = "onvos_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "onvos_oktmo1" Или Область.Имя = "onvos_name1" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМО");
			ОбластьНаименование = ТабличныйДокумент.Области["onvos_name1"];
			ОбластьДляВвода = ТабличныйДокумент.Области["onvos_oktmo1"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли Область.Имя = "permitting_type_id" Или Область.Имя = "permitting_type_name" Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ВидыДокументов");
			ОбластьНаименование = ТабличныйДокумент.Области["permitting_type_name"];
			ОбластьДляВвода = ТабличныйДокумент.Области["permitting_type_id"];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000040001002_") Или СтрНачинаетсяС(Область.Имя, "П000040001003_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ФККО");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000040001003_", "П000040001002_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000040001002_", "П000040001003_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000060001002_") Или СтрНачинаетсяС(Область.Имя, "П000060001003_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ФККО");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000060001003_", "П000060001002_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000060001002_", "П000060001003_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000040001004_") Или СтрНачинаетсяС(Область.Имя, "П000040001022_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000040001022_", "П000040001004_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000040001004_", "П000040001022_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П000060001004_") Или СтрНачинаетсяС(Область.Имя, "П000060001022_") Тогда 
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ОбластьНаименование = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000060001022_", "П000060001004_"));
			ОбластьДляВвода = ТабличныйДокумент.Области.Найти(СтрЗаменить(Область.Имя, "П000060001004_", "П000060001022_"));
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		КонецЕсли;
	ИначеЕсли (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Расчет") И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьПрисоединенныйФайлРазделаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ДобавитьПрисоединенныйФайлРазделаПослеСохраненияЗавершение", ЭтотОбъект);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ДобавитьПрисоединенныйФайлРазделаПослеСохраненияЗавершение(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлРазделаПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьПрисоединенныйФайлРазделаЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлРазделаЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("ПодписатьГОСТ2012ПрисоединенныйФайлРазделаЗавершение", ЭтотОбъект, Новый Структура("СтрокаПоиска, АдресФайла", ВыбИмяФайла, АдресФайла));
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьГОСТ2012ПрисоединенныйФайлРазделаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		ТабличныйДокумент.Области.ХешФайлРаздела.Значение = НРег(Результат.Хеш);
	Иначе
		ТабличныйДокумент.Области.ХешФайлРаздела.Значение = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТабличныйДокумент.Области.ХешФайлРаздела.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайлаРаздела(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		ТабличныйДокумент.Области.ХешФайлРаздела.Значение = "";
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайлаРаздела(АдресФайла, ПолноеИмяФайла, Каталог) Экспорт 
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	ФайлРаздела = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ТабличныйДокумент.Области.ПрисоединенныйФайлРаздела.Значение = ФайлРаздела;
	ТабличныйДокумент.Области.ИмяФайлРаздела.Значение = ИмяФайла;
	ТабличныйДокумент.Области.ДобавитьСканКопию.Текст = ИмяФайла;
	ТабличныйДокумент.Области.UID_файла.Значение = Строка(Новый УникальныйИдентификатор);
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлРаздела()
	Попытка
		ПрисоединенныйФайлОбъект = ТабличныйДокумент.Области.ПрисоединенныйФайлРаздела.Значение.ПолучитьОбъект();
		Если ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы) Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		ТабличныйДокумент.Области.ПрисоединенныйФайлРаздела.Значение =
			Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
		ТабличныйДокумент.Области.UID_файла.Значение = "";
		ТабличныйДокумент.Области.ХешФайлРаздела.Значение = "";
		ТабличныйДокумент.Области.ИмяФайлРаздела.Значение = "";
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю("При установке файла доверенности произошли ошибки");
		Возврат;
	КонецПопытки;
	
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлДоверенности()
	Попытка
		ПрисоединенныйФайлОбъект = Доверенность.ПолучитьОбъект();
		Если ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы) Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
		ХешДоверенности = "";
		ТабличныйДокумент.Области["attorney_file_attachment_file"].Значение = "";
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю("При установке файла доверенности произошли ошибки");
		Возврат;
	КонецПопытки;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВопросДоверенностьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияЗавершениеЗавершение", ЭтотОбъект);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияЗавершениеЗавершение(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьДоверенностьЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоверенностьЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("ПодписатьГОСТ2012Завершение", ЭтотОбъект, Новый Структура("СтрокаПоиска, АдресФайла", ВыбИмяФайла, АдресФайла));
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		ХешДоверенности = НРег(Результат.Хеш);
	Иначе
		ХешДоверенности = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ХешДоверенности) Тогда 
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог) Экспорт 
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	Доверенность = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ИмяФайлаДоверенности = ИмяФайла;
	ТабличныйДокумент.Области["attorney_file_attachment_file"].Значение = ИмяФайла;
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтображениеГиперссылокДоверенности(Форма)
	ФайлДоверенностиУдалить = Форма.ТабличныйДокумент.Области.Найти("ФайлДоверенностиУдалить");
	ФайлДоверенностиДобавить = Форма.ТабличныйДокумент.Области.Найти("ФайлДоверенностиДобавить");
	Если Не ФайлДоверенностиУдалить = Неопределено
		И Не ФайлДоверенностиДобавить = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(Форма.Доверенность) Тогда 
			ФайлДоверенностиУдалить.Гиперссылка = Истина;
			ФайлДоверенностиУдалить.Текст = "х";
			ФайлДоверенностиДобавить.Текст = Форма.ИмяФайлаДоверенности;
		Иначе
			ФайлДоверенностиУдалить.Гиперссылка = Ложь;
			ФайлДоверенностиУдалить.Текст = "";
			ФайлДоверенностиДобавить.Текст = "Добавить файл доверенности";
		КонецЕсли;
	КонецЕсли;
	
	ФайлДоверенностиУдалить = Форма.ТабличныйДокумент.Области.Найти("ДобавитьСканКопиюЗначок");
	ФайлДоверенностиДобавить = Форма.ТабличныйДокумент.Области.Найти("ДобавитьСканКопию");
	Если Не ФайлДоверенностиУдалить = Неопределено
		И Не ФайлДоверенностиДобавить = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.Найти("ПрисоединенныйФайлРаздела").Значение) Тогда 
			ФайлДоверенностиУдалить.Гиперссылка = Истина;
			ФайлДоверенностиУдалить.Текст = "х";
			ФайлДоверенностиДобавить.Текст = Форма.ТабличныйДокумент.Области.Найти("ИмяФайлРаздела").Значение;
		Иначе
			ФайлДоверенностиУдалить.Гиперссылка = Ложь;
			ФайлДоверенностиУдалить.Текст = "";
			ФайлДоверенностиДобавить.Текст = "Добавить скан-копию";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, ОбластьНаименование = Неопределено) Экспорт
	
	Если ТаблицаВыбора = Неопределено Или СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ИсходноеЗначение = Область.Значение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("Область, ОбластьНаименование", Область, ОбластьНаименование);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	ОбластьНаименование = ДополнительныеПараметры.ОбластьНаименование;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = СокрЛ(РезультатВыбора["Код"]);
	
	Если ОбластьНаименование <> Неопределено Тогда
		РезультатВыбораНазвание = РезультатВыбора.Название;
		Если Область.Значение = "" Тогда 
			РезультатВыбораНазвание = "";
		КонецЕсли;
		ОбластьНаименование.Значение = РезультатВыбораНазвание;
		
		Если СтрНайти(Область.Имя, "0001027_") > 0
			И СтрНайти(РезультатВыбораНазвание, " ") > 0 Тогда 
			
			ОбластьНаименование.Значение = Лев(РезультатВыбораНазвание, СтрНайти(РезультатВыбораНазвание, " ") - 1);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуОКТМО(ОКТМО, ИмяГруппы, ИндексТекСтраницыРаздела)
	ТекСтр = ТаблицаСтраницыРасчет[ИндексТекСтраницыРаздела];
	СтруктураГруппы = ТекСтр.ДанныеДопСтрок[0].Значение[ИмяГруппы];
	ИсхКоличествоСтрок = СтруктураГруппы.Количество();
	СтруктураГруппы.Очистить();
	Для Каждого Элт Из ОКТМО Цикл 
		НовСтр = СтруктураГруппы.Добавить();
		НовСтр[ИмяГруппы + "01"] = Элт.Ключ;
	КонецЦикла;
	Если СтруктураГруппы.Количество() = 0 Тогда 
		СтруктураГруппы.Добавить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОКТМО(ОКТМО)
	СтрТаблицыСтраницы = ТаблицаСтраницыРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	ИндексТекСтраницыРаздела = ТаблицаСтраницыРасчет.Индекс(СтрТаблицыСтраницы[0]);
	Данные = СобратьДанныеПоОКТМО(ОКТМО);
	
	ТабличныйДокумент.Области.П041.Значение = Данные.Раздел1_0.П0000015;
	ТабличныйДокумент.Области.П042.Значение = Данные.Раздел1_0.П0000016;
	ТабличныйДокумент.Области.П043.Значение = Данные.Раздел1_0.П0000017;
	
	ТабличныйДокумент.Области.П061.Значение = Данные.Раздел1_1.П0000016;
	ТабличныйДокумент.Области.П062.Значение = Данные.Раздел1_1.П0000017;
	ТабличныйДокумент.Области.П063.Значение = Данные.Раздел1_1.П0000018;
	
	ТабличныйДокумент.Области.П081.Значение = Данные.Раздел2.П0000017;
	ТабличныйДокумент.Области.П082.Значение = Данные.Раздел2.П0000018;
	ТабличныйДокумент.Области.П083.Значение = Данные.Раздел2.П0000019;
	
	ТабличныйДокумент.Области.П101.Значение = Данные.Разделы3.П000030002024;
	ТабличныйДокумент.Области.П102.Значение = Данные.Разделы3.П000030002025;
	
	ТабличныйДокумент.Области.П121.Значение = Данные.Разделы3_1.П000040002018;
	ТабличныйДокумент.Области.П122.Значение = Данные.Разделы3_1.П000040002019;
	ТабличныйДокумент.Области.П123.Значение = Данные.Разделы3_1.П000040002021;
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	ЗаполнитьГруппуОКТМО(Данные.Раздел1_0.ОКТМО, "П1003100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Раздел1_1.ОКТМО, "П1005100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Раздел2.ОКТМО, "П1007100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Разделы3.ОКТМО, "П1009100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Разделы3_1.ОКТМО, "П1010100000", ИндексТекСтраницыРаздела);
	
	ВывестиМакетВТаблДокНаСервере("Расчет", ИндексТекСтраницыРаздела + 1, Ложь);
	РасчетРасчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СобратьДанныеПоОКТМО(ОКТМО)
	ОТЧ = Новый ОписаниеТипов("Число");
	
	СводныеДанные = Новый Структура;
	СводныеДанные.Вставить("Раздел1_0", Новый Структура("П0000015, П0000016, П0000017, П0000018, П3000018"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел1_0 Цикл 
				СводныеДанные.Раздел1_0[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел1_0[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел1_0.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел1_0.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Раздел1_1", Новый Структура("П0000016, П0000017, П0000018, П0000019"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел1_1 Цикл 
				СводныеДанные.Раздел1_1[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел1_1[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел1_1.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел1_1.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Раздел2", Новый Структура("П0000017, П0000018, П0000019, П3000020"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел2 Цикл 
				СводныеДанные.Раздел2[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел2[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел2.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел2.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Разделы3", Новый Структура("П000030002024, П000030002025, П000050002026"));
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл
		Если СокрЛП(Стр.Данные[0].Значение.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Разделы3 Цикл 
				СводныеДанные.Разделы3[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Разделы3[КЗ.Ключ]) + Стр.Данные[0].Значение[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Разделы3.Вставить("ОКТМО", Новый Соответствие);
	
	СводныеДанные.Вставить("Разделы3_1", Новый Структура("П000040002018, П000040002019, П000040002021, П000040002021"));
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл
		Если СокрЛП(Стр.Данные[0].Значение.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Разделы3_1 Цикл 
				СводныеДанные.Разделы3_1[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Разделы3_1[КЗ.Ключ]) + Стр.Данные[0].Значение[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Разделы3_1.Вставить("ОКТМО", Новый Соответствие);
	
	Возврат СводныеДанные;
КонецФункции

&НаСервере
Процедура СобратьДанныеПоВсемОКТМО()
	ДанныеПоОКТМО = Новый Соответствие;
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл
		ОКТМО = СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный);
		Если ЗначениеЗаполнено(ОКТМО) И ДанныеПоОКТМО.Получить(ОКТМО) = Неопределено Тогда 
			ДанныеПоОКТМО.Вставить(ОКТМО, СобратьДанныеПоОКТМО(ОКТМО));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл
		ОКТМО = СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный);
		Если ЗначениеЗаполнено(ОКТМО) И ДанныеПоОКТМО.Получить(ОКТМО) = Неопределено Тогда 
			ДанныеПоОКТМО.Вставить(ОКТМО, СобратьДанныеПоОКТМО(ОКТМО));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл
		ОКТМО = СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный);
		Если ЗначениеЗаполнено(ОКТМО) И ДанныеПоОКТМО.Получить(ОКТМО) = Неопределено Тогда 
			ДанныеПоОКТМО.Вставить(ОКТМО, СобратьДанныеПоОКТМО(ОКТМО));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл
		ОКТМО = СокрЛП(Стр.Данные[0].Значение.ОКТМОГруппировочный);
		Если ЗначениеЗаполнено(ОКТМО) И ДанныеПоОКТМО.Получить(ОКТМО) = Неопределено Тогда 
			ДанныеПоОКТМО.Вставить(ОКТМО, СобратьДанныеПоОКТМО(ОКТМО));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл
		ОКТМО = СокрЛП(Стр.Данные[0].Значение.ОКТМОГруппировочный);
		Если ЗначениеЗаполнено(ОКТМО) И ДанныеПоОКТМО.Получить(ОКТМО) = Неопределено Тогда 
			ДанныеПоОКТМО.Вставить(ОКТМО, СобратьДанныеПоОКТМО(ОКТМО));
		КонецЕсли;
	КонецЦикла;
	
	Пока ТаблицаСтраницыРасчет.Количество() > 1 Цикл 
		УдалитьДополнительнуюСтраницуНаСервере("Расчет");
	КонецЦикла;
	ОчиститьТабличноеПолеНаСервере("Расчет");
	
	Инд = 1;
	ВывестиМакетВТаблДокНаСервере("Расчет", Инд, Ложь);
	Для Каждого КЗ Из ДанныеПоОКТМО Цикл 
		ВывестиМакетВТаблДокНаСервере("Расчет", Инд, Ложь);
		Данные = КЗ.Значение;
		ТабличныйДокумент.Области.П010.Значение = КЗ.Ключ;
		ТабличныйДокумент.Области.П041.Значение = Данные.Раздел1_0.П0000015;
		ТабличныйДокумент.Области.П042.Значение = Данные.Раздел1_0.П0000016;
		ТабличныйДокумент.Области.П043.Значение = Данные.Раздел1_0.П0000017;
		
		ТабличныйДокумент.Области.П061.Значение = Данные.Раздел1_1.П0000016;
		ТабличныйДокумент.Области.П062.Значение = Данные.Раздел1_1.П0000017;
		ТабличныйДокумент.Области.П063.Значение = Данные.Раздел1_1.П0000018;
		
		ТабличныйДокумент.Области.П081.Значение = Данные.Раздел2.П0000017;
		ТабличныйДокумент.Области.П082.Значение = Данные.Раздел2.П0000018;
		ТабличныйДокумент.Области.П083.Значение = Данные.Раздел2.П0000019;
		
		ТабличныйДокумент.Области.П101.Значение = Данные.Разделы3.П000030002024;
		ТабличныйДокумент.Области.П102.Значение = Данные.Разделы3.П000030002025;
		
		ТабличныйДокумент.Области.П121.Значение = Данные.Разделы3_1.П000040002018;
		ТабличныйДокумент.Области.П122.Значение = Данные.Разделы3_1.П000040002019;
		ТабличныйДокумент.Области.П123.Значение = Данные.Разделы3_1.П000040002021;

		СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
		
		ЗаполнитьГруппуОКТМО(Данные.Раздел1_0.ОКТМО, "П1003100000", Инд-1);
		ЗаполнитьГруппуОКТМО(Данные.Раздел1_1.ОКТМО, "П1005100000", Инд-1);
		ЗаполнитьГруппуОКТМО(Данные.Раздел2.ОКТМО, "П1007100000", Инд-1);
		ЗаполнитьГруппуОКТМО(Данные.Разделы3.ОКТМО, "П1009100000", Инд-1);
		ЗаполнитьГруппуОКТМО(Данные.Разделы3.ОКТМО, "П1010100000", Инд-1);
		ВывестиМакетВТаблДокНаСервере("Расчет", Инд, Ложь);
		РасчетРасчет(ЭтотОбъект);
		СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
		
		Если Инд = ДанныеПоОКТМО.Количество() Тогда
			Прервать;
		КонецЕсли;
		Инд = Инд + 1;
		ВставитьДополнительнуюСтраницуНаСервере("Расчет");
	КонецЦикла;
	
	ЭлементыРасчет = РазделыОтчета.ПолучитьЭлементы()[1].ПолучитьЭлементы();
	ЭлементыРасчет.Очистить();
	Инд = 0;
	Для Каждого КЗ Из ДанныеПоОКТМО Цикл
		Инд = Инд + 1;
		ЭлементРазделовОтчета = ЭлементыРасчет.Добавить();
		ЭлементРазделовОтчета.КолонкаРазделыОтчета         = "Стр. " + Инд;
		ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Расчет";
		ЭлементРазделовОтчета.ИндексКартинки               = 1;
		ЭлементРазделовОтчета.РазделМногостраничный        = Истина;
		ЭлементРазделовОтчета.РазделМногострочный          = Истина;
		ЭлементРазделовОтчета.КолонкаНомерСтраницыРазделаОтчета = Инд;
	КонецЦикла;
	
	Если Инд = 0 Тогда
		ЭлементРазделовОтчета = ЭлементыРасчет.Добавить();
		ЭлементРазделовОтчета.КолонкаРазделыОтчета         = "Стр. 1";
		ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Расчет";
		ЭлементРазделовОтчета.ИндексКартинки               = 1;
		ЭлементРазделовОтчета.РазделМногостраничный        = Истина;
		ЭлементРазделовОтчета.РазделМногострочный          = Истина;
		ЭлементРазделовОтчета.КолонкаНомерСтраницыРазделаОтчета = Инд;
	КонецЕсли;
	
	ТС = РазделыОтчета.ПолучитьЭлементы()[1].ПолучитьЭлементы()[0];
	Элементы.РазделыОтчета.ТекущаяСтрока = ТС.ПолучитьИдентификатор();
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(ТС.КолонкаРазделыОтчетаСокрНаим, ТС.КолонкаНомерСтраницыРазделаОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумОрганыРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Области["ПредставляетсяВ"].Значение = ?(ПустаяСтрока(Результат.Код), "", Результат.Название);
	ТабличныйДокумент.Области["ПредставляетсяВКод"].Значение = Результат.Код;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаРазмерОрганизацииЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
		
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если Область.Имя = "НомКоррект" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Если НомерКорректировки = 0 Тогда 
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
		Иначе
			ТабличныйДокумент.Области.ВидДок.Значение = "";
			ТабличныйДокумент.Области.Корректировка.Значение = "V";
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		
		СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ДатаПодписи;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКАТО") > 0
	   И ЗначениеЗаполнено(ЗначПоказателя)
	   И НЕ СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2014-01-01' Тогда
		
		ДлинаЗначения = СтрДлина(СокрЛП(ЗначПоказателя));
		
		Для Инд = ДлинаЗначения + 1 По 11 Цикл
			
			ЗначПоказателя = СокрЛП(ЗначПоказателя) + "0";
			
			Область.Значение = ЗначПоказателя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяРаздела = "Раздел1_0" 
		Или ИмяРаздела = "Раздел1_1" 
		Или ИмяРаздела = "Раздел1_2" 
		Или ИмяРаздела = "Раздел2" Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	ИначеЕсли ИмяРаздела <> "Титульный" Тогда 
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
			
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
			
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРасчет.Очистить();
	ТаблицаСтраницыРаздела3.Очистить();
	ТаблицаСтраницыРаздела3_1.Очистить();
	ТаблицаСтраницыРаздел1_0.Очистить();
	ТаблицаСтраницыРаздел1_1.Очистить();
	ТаблицаСтраницыРаздел1_2.Очистить();
	ТаблицаСтраницыРаздел2.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтотОбъект[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru = 'В ходе выгрузки были найдены ошибки.';
							|en = 'В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2021Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2021Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПустаяСтруктураВыгрузки()
	Возврат Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, КодировкаФайлаВыгрузки, ТипФайлаВыгрузки");
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ФормироватьПараметры = Истина) Экспорт
	
	СформироватьСтруктуруПоказателей();
	Если ФормироватьПараметры Тогда 
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КонецЕсли;
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXML2021Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	РезультатВыгрузки = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "utf-8");
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ФайлВыгрузки);
	
	ОсновнаяВыгрузка = ПустаяСтруктураВыгрузки();
	ОсновнаяВыгрузка.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	ОсновнаяВыгрузка.ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	ОсновнаяВыгрузка.КодировкаФайлаВыгрузки = "utf-8";
	ОсновнаяВыгрузка.ТипФайлаВыгрузки = "ОсновныеСведения";
	РезультатВыгрузки.Добавить(ОсновнаяВыгрузка);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		Приложение = ПустаяСтруктураВыгрузки();
		Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Доверенность), Новый УникальныйИдентификатор);
		Приложение.ИмяФайлаВыгрузки = ИмяФайлаДоверенности;
		Приложение.КодировкаФайлаВыгрузки = "";
		Приложение.ТипФайлаВыгрузки = "ДЕКЛАРАЦИЯНВОС.ПРИЛОЖЕНИЕ";
		РезультатВыгрузки.Добавить(Приложение);
	КонецЕсли;
	
	Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
		Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
			Приложение = ПустаяСтруктураВыгрузки();
			Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(СтрФайл.ПрисоединенныйФайл), Новый УникальныйИдентификатор);
			Приложение.ИмяФайлаВыгрузки = СтрФайл.ОписаниеДокумента;
			Приложение.КодировкаФайлаВыгрузки = "";
			Приложение.ТипФайлаВыгрузки = "ДЕКЛАРАЦИЯНВОС.ПРИЛОЖЕНИЕ";
			РезультатВыгрузки.Добавить(Приложение);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Стр0 Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1_0,1_1,1_2,2") Цикл 
		Для Каждого Стр Из ЭтотОбъект["ТаблицаСтраницыРаздел" + Стр0] Цикл
			Если Стр.ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(Стр.ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				
			Приложение = ПустаяСтруктураВыгрузки();
			Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Стр.ФиксированныеДанные.ПрисоединенныйФайлРаздела),
																				Новый УникальныйИдентификатор);
			Приложение.ИмяФайлаВыгрузки = Стр.ФиксированныеДанные.ИмяФайлРаздела;
			Приложение.КодировкаФайлаВыгрузки = "";
			Приложение.ТипФайлаВыгрузки = "ДЕКЛАРАЦИЯНВОС.ПРИЛОЖЕНИЕ";
			РезультатВыгрузки.Добавить(Приложение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстВыгрузки = РезультатВыгрузки;
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен.");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	СтатусПроверки = Истина;
	Возврат СтатусПроверки;
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки)
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	ПараметрыВыгрузки.Вставить("UUID", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаФормированияФайла", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=yyyy"));
	ПараметрыВыгрузки.Вставить("is_ceo_en", ?(СтруктураДанныхТитульный.is_ceo = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_non_resident_en", ?(СтруктураДанныхТитульный.is_non_resident = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_separate_en", ?(СтруктураДанныхТитульный.is_separate = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("ЕстьПриложения", (_Приложения.ПолучитьЭлементы().Количество() > 0));
	ПараметрыВыгрузки.Вставить("register_date_str", Формат(СтруктураДанныхТитульный.register_date, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("egrul_egrip_date_str", Формат(СтруктураДанныхТитульный.egrul_egrip_date, "ДФ=yyyy-MM-dd"));
	
	ПараметрыВыгрузки.Вставить("ЕстьДоверенность", ЗначениеЗаполнено(Доверенность));
	ПараметрыВыгрузки.Вставить("Доверенность_УИД", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("Доверенность_Файл", ИмяФайлаДоверенности);
	ПараметрыВыгрузки.Вставить("Доверенность_Хеш", ХешДоверенности);
	ИндексТочки = СтрНайти(ИмяФайлаДоверенности, ".", НаправлениеПоиска.СКонца);
	Если ИндексТочки = 0 Тогда 
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", ИмяФайлаДоверенности);
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", );
	Иначе
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", Лев(ИмяФайлаДоверенности, ИндексТочки - 1));
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", Сред(ИмяФайлаДоверенности, ИндексТочки + 1));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными(ДеревоВыгрузки)
	Узел = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "response");
	Узел = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "data");
	Узел = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "service_request");
	Узел = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "report");
	ЗаполнитьРаздел10(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r10"));
	ЗаполнитьРаздел11(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r11"));
	ЗаполнитьРаздел12(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r12"));
	ЗаполнитьРаздел20(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r20"));
	ЗаполнитьРаздел30(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r30"));
	ЗаполнитьРаздел31(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "r31"));
	ЗаполнитьРазделИтоги(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "total"));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел10(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П10000012");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.onvos_oktmo = Стр.ФиксированныеДанные.onvos_oktmo;
		НовСтр.П10000012 = Стр.ФиксированныеДанные.П10000012;
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П10000012");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П10000012) Тогда 
			
			Продолжить;
		КонецЕсли;
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздел1_0 Цикл 
			Если Стр2.ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или Стр2.ФиксированныеДанные.П10000012 <> Стр.П10000012 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					Стр2.ФиксированныеДанные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					Стр2.ФиксированныеДанные.П10000011);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					Стр2.ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					Стр2.ФиксированныеДанные.П10000010);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(Стр2.ФиксированныеДанные.П10000010), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					Стр2.ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Стр2.ФиксированныеДанные.onvos_oktmo);
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(Стр2.ФиксированныеДанные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				Стр2.ФиксированныеДанные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(Стр2.ФиксированныеДанные.Свойство("alloted_by"), Стр2.ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(Стр2.ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(Стр2.ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				Стр2.ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				Стр2.ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если Стр2.ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(Стр2.ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", Стр2.ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(Стр2.ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_source = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "sources"), "source");
			
			Для Каждого Стр3 Из Стр2.Данные.П10000 Цикл
				Данные = Стр3.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П1000002) 
					Или Не ЗначениеЗаполнено(Данные.П1000003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_source = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_source);
				УстановитьЗначениеЭлемента(НовУзел_source, "number", 
					Данные.П1000003);
				УстановитьЗначениеЭлемента(НовУзел_source, "name", 
					Данные.П1000002);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Данные.П1000004);
					
				Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
					РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "calc"), "calc");
				Для Каждого Стр4 Из Стр3.Значение.ДопСтроки.П11000 Цикл 
					Данные = Стр4.Значение.Данные;
					Если Не ЗначениеЗаполнено(Данные.П1100002) 
						Или Не ЗначениеЗаполнено(Данные.П1100019) Тогда 
						
						Продолжить;
					КонецЕсли;
					НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
					
					УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "pollutant");
					УстановитьЗначениеЭлемента(УзелВещество, "name", 
						Данные.П1100002);
					УстановитьЗначениеЭлемента(УзелВещество, "code", 
						Данные.П1100019);
						
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_pvd", 
						Данные.П1100003);
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_vsv", 
						Данные.П1100004);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em", 
						Данные.П1100005);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_pvd", 
						Данные.П1100006);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_vsv", 
						Данные.П1100007);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_overlimit", 
						Данные.П1100008);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
						Данные.П1100009);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_knd", 
						Данные.П1100010);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kvr", 
						Данные.П1100011);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_overlimit", 
						Данные.П1100012);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
						Данные.П1100013);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
						Данные.П1100014);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_pvd", 
						Данные.П1100015);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_vsv", 
						Данные.П1100016);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
						Данные.П1100017);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
						Данные.П1100018);
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_source);
			
			Узел_correction = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "corrections"), "correction");
			Для Каждого Стр4 Из Стр2.Данные.П20000 Цикл 
				Данные = Стр4.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П2000002) 
					Или Не ЗначениеЗаполнено(Данные.П2000019) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_correction = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_correction);
				
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_correction, "pollutant");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Данные.П2000002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Данные.П2000019);
					
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_pvd", 
					Данные.П2000015);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_vsv", 
					Данные.П2000016);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_overlimit", 
					Данные.П2000017);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_all", 
					Данные.П2000018);
				УстановитьЗначениеЭлемента(НовУзел_correction, "oktmo", 
					Данные.П2000020);
				УстановитьЗначениеЭлемента(НовУзел_correction, "events_sum", 
					Данные.П2000021);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_with_correction", 
					Данные.П2000022);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_correction);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел11(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П10000012");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.onvos_oktmo = Стр.ФиксированныеДанные.onvos_oktmo;
		НовСтр.П10000012 = Стр.ФиксированныеДанные.П10000012;
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П10000012");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П10000012) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздел1_1 Цикл 
			Если Стр2.ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или Стр2.ФиксированныеДанные.П10000012 <> Стр.П10000012 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					Стр2.ФиксированныеДанные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					Стр2.ФиксированныеДанные.П10000011);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					Стр2.ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					Стр2.ФиксированныеДанные.П10000010);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(Стр2.ФиксированныеДанные.П10000010), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					Стр2.ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Стр2.ФиксированныеДанные.onvos_oktmo);
					
				УзелПоказатели = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "torch");
				УстановитьЗначениеЭлемента(УзелПоказатели, "method", 
					Стр2.ФиксированныеДанные.П000010000010);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_extracting", 
					Стр2.ФиксированныеДанные.П000010000011);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_flaring", 
					Стр2.ФиксированныеДанные.П000010000012);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_using", 
					Стр2.ФиксированныеДанные.П000010000013);
				УстановитьЗначениеЭлемента(УзелПоказатели, "efficiency", 
					Стр2.ФиксированныеДанные.П000010000014);
				УстановитьЗначениеЭлемента(УзелПоказатели, "use_level", 
					Стр2.ФиксированныеДанные.П000010000015);
				УстановитьЗначениеЭлемента(УзелПоказатели, "is_overlimit", 
					?(Стр2.ФиксированныеДанные.is_overlimit = Истина, "true", "false"));
				ПервыйПроход = Ложь;
			КонецЕсли;
				
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(Стр2.ФиксированныеДанные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				Стр2.ФиксированныеДанные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(Стр2.ФиксированныеДанные.Свойство("alloted_by"), Стр2.ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(Стр2.ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(Стр2.ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				Стр2.ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				Стр2.ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если Стр2.ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(Стр2.ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", Стр2.ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(Стр2.ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_source = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "sources"), "source");
			
			Для Каждого Стр3 Из Стр2.Данные.П10000 Цикл
				Данные = Стр3.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П1000002) 
					Или Не ЗначениеЗаполнено(Данные.П1000003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_source = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_source);
				УстановитьЗначениеЭлемента(НовУзел_source, "number", 
					Данные.П1000003);
				УстановитьЗначениеЭлемента(НовУзел_source, "name", 
					Данные.П1000002);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Данные.П1000004);
					
				Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
					РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "calc"), "calc");
				Для Каждого Стр4 Из Стр3.Значение.ДопСтроки.П11000 Цикл 
					Данные = Стр4.Значение.Данные;
					Если Не ЗначениеЗаполнено(Данные.П1100002) 
						Или Не ЗначениеЗаполнено(Данные.П1100020) Тогда 
						
						Продолжить;
					КонецЕсли;
					НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
					
					УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "pollutant");
					УстановитьЗначениеЭлемента(УзелВещество, "name", 
						Данные.П1100002);
					УстановитьЗначениеЭлемента(УзелВещество, "code", 
						Данные.П1100020);
						
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_pvd", 
						Данные.П1100003);
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_vsv", 
						Данные.П1100004);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em", 
						Данные.П1100005);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_pvd", 
						Данные.П1100006);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_vsv", 
						Данные.П1100007);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_overlimit", 
						Данные.П1100008);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
						Данные.П1100009);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_knd", 
						Данные.П1100010);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kvr", 
						Данные.П1100011);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_overlimit", 
						Данные.П1100012);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
						Данные.П1100013);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_k", 
						Данные.П1100014);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
						Данные.П1100015);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_pvd", 
						Данные.П1100016);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_vsv", 
						Данные.П1100017);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
						Данные.П1100018);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
						Данные.П1100019);
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_source);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел12(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П10000012");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_2 Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.onvos_oktmo = Стр.ФиксированныеДанные.onvos_oktmo;
		НовСтр.П10000012 = Стр.ФиксированныеДанные.П10000012;
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П10000012");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П10000012) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздел1_2 Цикл 
			Если Стр2.ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или Стр2.ФиксированныеДанные.П10000012 <> Стр.П10000012 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда 
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					Стр2.ФиксированныеДанные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					Стр2.ФиксированныеДанные.П10000011);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					Стр2.ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					Стр2.ФиксированныеДанные.П10000010);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(Стр2.ФиксированныеДанные.П10000010), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					Стр2.ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Стр2.ФиксированныеДанные.onvos_oktmo);
					
				УзелПоказатели = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "torch");
				УстановитьЗначениеЭлемента(УзелПоказатели, "method", 
					Стр2.ФиксированныеДанные.П000010000010);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_extracting", 
					Стр2.ФиксированныеДанные.П000010000011);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_flaring", 
					Стр2.ФиксированныеДанные.П000010000012);
				УстановитьЗначениеЭлемента(УзелПоказатели, "volume_using", 
					Стр2.ФиксированныеДанные.П000010000013);
				УстановитьЗначениеЭлемента(УзелПоказатели, "efficiency", 
					Стр2.ФиксированныеДанные.П000010000014);
				УстановитьЗначениеЭлемента(УзелПоказатели, "use_level", 
					Стр2.ФиксированныеДанные.П000010000015);
				УстановитьЗначениеЭлемента(УзелПоказатели, "is_overlimit", 
					?(Стр2.ФиксированныеДанные.is_overlimit = Истина, "true", "false"));
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(Стр2.ФиксированныеДанные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				Стр2.ФиксированныеДанные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(Стр2.ФиксированныеДанные.Свойство("alloted_by"), Стр2.ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(Стр2.ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(Стр2.ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				Стр2.ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				Стр2.ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если Стр2.ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(Стр2.ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", Стр2.ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(Стр2.ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_source = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "sources"), "source");
			
			Для Каждого Стр3 Из Стр2.Данные.П10000 Цикл
				Данные = Стр3.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П1000002) 
					Или Не ЗначениеЗаполнено(Данные.П1000003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_source = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_source);
				УстановитьЗначениеЭлемента(НовУзел_source, "number", 
					Данные.П1000003);
				УстановитьЗначениеЭлемента(НовУзел_source, "name", 
					Данные.П1000002);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Данные.П1000004);
					
				Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
					РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "calc"), "calc");
				Для Каждого Стр4 Из Стр3.Значение.ДопСтроки.П11000 Цикл 
					Данные = Стр4.Значение.Данные;
					Если Не ЗначениеЗаполнено(Данные.П1100002) 
						Или Не ЗначениеЗаполнено(Данные.П1100014) Тогда 
						
						Продолжить;
					КонецЕсли;
					НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
					
					УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "pollutant");
					УстановитьЗначениеЭлемента(УзелВещество, "name", 
						Данные.П1100002);
					УстановитьЗначениеЭлемента(УзелВещество, "code", 
						Данные.П1100014);
						
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em", 
						Данные.П1100003);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
						Данные.П1100004);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kpr", 
						Данные.П1100005);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_knmm", 
						Данные.П1100006);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
						Данные.П1100007);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
						Данные.П1100008);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
						Данные.П1100009);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost_coverage", 
						Данные.П1100010);
					УстановитьЗначениеЭлемента(НовУзел_calc, "diff", 
						Данные.П1100011);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost_coverage_ratio", 
						Данные.П1100012);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
						Данные.П1100013);
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_source);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел20(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П10000012");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл 
		НовСтр = ТЗ.Добавить();
		НовСтр.onvos_oktmo = Стр.ФиксированныеДанные.onvos_oktmo;
		НовСтр.П10000012 = Стр.ФиксированныеДанные.П10000012;
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П10000012");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П10000012) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздел2 Цикл 
			Если Стр2.ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или Стр2.ФиксированныеДанные.П10000012 <> Стр.П10000012 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда 
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					Стр2.ФиксированныеДанные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					Стр2.ФиксированныеДанные.П10000011);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					Стр2.ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					Стр2.ФиксированныеДанные.П10000010);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(Стр2.ФиксированныеДанные.П10000010), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					Стр2.ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Стр2.ФиксированныеДанные.onvos_oktmo);
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(Стр2.ФиксированныеДанные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				Стр2.ФиксированныеДанные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(Стр2.ФиксированныеДанные.Свойство("alloted_by"), Стр2.ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(Стр2.ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(Стр2.ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				Стр2.ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				Стр2.ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если Стр2.ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(Стр2.ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", Стр2.ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", Стр2.ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(Стр2.ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(Стр2.ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_source = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "sources"), "source");
			
			Для Каждого Стр3 Из Стр2.Данные.П10000 Цикл
				Данные = Стр3.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П1000002) 
					Или Не ЗначениеЗаполнено(Данные.П1000003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_source = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_source);
				УстановитьЗначениеЭлемента(НовУзел_source, "number", 
					Данные.П1000003);
				УстановитьЗначениеЭлемента(НовУзел_source, "name", 
					Данные.П1000002);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					Данные.П1000004);
					
				Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
					РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_source, "calc"), "calc");
				Для Каждого Стр4 Из Стр3.Значение.ДопСтроки.П11000 Цикл 
					Данные = Стр4.Значение.Данные;
					Если Не ЗначениеЗаполнено(Данные.П1100002) 
						Или Не ЗначениеЗаполнено(Данные.П1100021) Тогда 
						
						Продолжить;
					КонецЕсли;
					НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
					
					УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "pollutant");
					УстановитьЗначениеЭлемента(УзелВещество, "name", 
						Данные.П1100002);
					УстановитьЗначениеЭлемента(УзелВещество, "code", 
						Данные.П1100021);
						
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_nds", 
						Данные.П1100003);
					УстановитьЗначениеЭлемента(НовУзел_calc, "established_em_vrs", 
						Данные.П1100004);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em", 
						Данные.П1100005);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_nds", 
						Данные.П1100006);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_em_vrs", 
						Данные.П1100007);
					УстановитьЗначениеЭлемента(НовУзел_calc, "actual_overlimit", 
						Данные.П1100008);
					УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
						Данные.П1100009);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_knd", 
						Данные.П1100010);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kvr", 
						Данные.П1100011);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_overlimit", 
						Данные.П1100012);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kp", 
						Данные.П1100013);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
						Данные.П1100014);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kvo", 
						Данные.П1100015);
					УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
						Данные.П1100016);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_nds", 
						Данные.П1100017);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_vrs", 
						Данные.П1100018);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
						Данные.П1100019);
					УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
						Данные.П1100020);
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_source);
			
			Узел_correction = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "corrections"), "correction");
			Для Каждого Стр4 Из Стр2.Данные.П20000 Цикл 
				Данные = Стр4.Значение.Данные;
				Если Не ЗначениеЗаполнено(Данные.П2000002) 
					Или Не ЗначениеЗаполнено(Данные.П2000021) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_correction = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_correction);
				
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_correction, "pollutant");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Данные.П2000002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Данные.П2000021);
					
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_nds", 
					Данные.П2000017);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_vrs", 
					Данные.П2000018);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_overlimit", 
					Данные.П2000019);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_all", 
					Данные.П2000020);
					
				УстановитьЗначениеЭлемента(НовУзел_correction, "oktmo", 
					Данные.П2000022);
				УстановитьЗначениеЭлемента(НовУзел_correction, "events_sum", 
					Данные.П2000023);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_with_correction", 
					Данные.П2000024);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_correction);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел30(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П000010000003");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл 
		Данные = Стр.Данные[0].Значение;
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Данные);
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П000010000003");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П000010000003) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздела3 Цикл
			ФиксированныеДанные = Стр2.Данные[0].Значение;
			Если ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или ФиксированныеДанные.П000010000003 <> Стр.П000010000003 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					ФиксированныеДанные.П000010000003);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					ФиксированныеДанные.П000010000002);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					ФиксированныеДанные.П000010000001);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(ФиксированныеДанные.П000010000001), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					ФиксированныеДанные.onvos_oktmo);
				
				Узелoro = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "oro");
				УстановитьЗначениеЭлемента(Узелoro, "name", 
					ФиксированныеДанные.П000010000008);
				УстановитьЗначениеЭлемента(Узелoro, "number", 
					ФиксированныеДанные.П000010000009);
				УстановитьЗначениеЭлемента(Узелoro, "address", 
					ФиксированныеДанные.П000010000010);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узелoro, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					ФиксированныеДанные.onvos_name1);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					ФиксированныеДанные.onvos_oktmo1);
					
				Если ФиксированныеДанные.ПР0301 = Истина Тогда
					УстановитьЗначениеЭлемента(Узелoro, "is_include", 1);
				Иначе
					УстановитьЗначениеЭлемента(Узелoro, "is_include", 0);
				КонецЕсли;
				Если ФиксированныеДанные.ПР0303 = Истина Тогда
					УстановитьЗначениеЭлемента(Узелoro, "is_clear", 1);
				Иначе
					УстановитьЗначениеЭлемента(Узелoro, "is_clear", 0);
				КонецЕсли;
				УстановитьЗначениеЭлемента(Узелoro, "solution_details", ФиксированныеДанные.П10000011);
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(ФиксированныеДанные.П50002026, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				ФиксированныеДанные.П50002027);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(ФиксированныеДанные.Свойство("alloted_by"), ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "calc"), "calc");
			Для Каждого Стр3 Из Стр2.ДанныеДопСтрок[0].Значение.П0000300010 Цикл
				Если Не ЗначениеЗаполнено(Стр3.П000030001002)
					И Не ЗначениеЗаполнено(Стр3.П000030001003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "fkko");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Стр3.П000030001002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Стр3.П000030001003);
				УзелКлассОпасности = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "waste_hazard_class");
				УстановитьЗначениеЭлемента(УзелКлассОпасности, "name", 
					Стр3.П000030001004);
				УстановитьЗначениеЭлемента(УзелКлассОпасности, "id", 
					Стр3.П000030001027);
					
				УстановитьЗначениеЭлемента(НовУзел_calc, "established_limit", 
					Стр3.П000030001005);
				УстановитьЗначениеЭлемента(НовУзел_calc, "utilized", 
					Стр3.П000030001007);
				УстановитьЗначениеЭлемента(НовУзел_calc, "neutralized", 
					Стр3.П000030001008);
				УстановитьЗначениеЭлемента(НовУзел_calc, "actual_prev_period", 
					Стр3.П000030001009);
				УстановитьЗначениеЭлемента(НовУзел_calc, "actual_balance", 
					Стр3.П000030001010);
				УстановитьЗначениеЭлемента(НовУзел_calc, "transferred", 
					Стр3.П000030001011);
				УстановитьЗначениеЭлемента(НовУзел_calc, "underlimit", 
					Стр3.П000030001013);
				УстановитьЗначениеЭлемента(НовУзел_calc, "overlimit", 
					Стр3.П000030001014);
				УстановитьЗначениеЭлемента(НовУзел_calc, "place_in_period", 
					Стр3.П000030001012);
				УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
					Стр3.П000030001015);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kisp", 
					Стр3.П000030001016);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kl", 
					Стр3.П000030001017);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_ksl", 
					Стр3.П000030001018);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kod", 
					Стр3.П000030001019);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kpo", 
					Стр3.П000030001020);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kst", 
					Стр3.П000030001021);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
					Стр3.П000030001022);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
					Стр3.П000030001023);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_underlimit", 
					Стр3.П000030001024);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
					Стр3.П000030001025);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
					Стр3.П000030001026);
				УстановитьЗначениеЭлемента(НовУзел_calc, "all", 
					Стр3.П000030001006);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			
			Узел_correction = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "corrections"), "correction");
			Для Каждого Стр3 Из Стр2.ДанныеДопСтрок[0].Значение.П0000500010 Цикл 
				Если Не ЗначениеЗаполнено(Стр3.П000050001002)
					И Не ЗначениеЗаполнено(Стр3.П000050001003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_correction = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_correction);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_underlimit", 
					Стр3.П000050001024);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_overlimit", 
					Стр3.П000050001025);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_all", 
					Стр3.П000050001026);
				УстановитьЗначениеЭлемента(НовУзел_correction, "events_sum", 
					Стр3.П000050001029);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_with_correction", 
					Стр3.П000050001030);
					
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_correction, "fkko");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Стр3.П000050001002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Стр3.П000050001003);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_correction);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел31(Узел)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("onvos_oktmo");
	ТЗ.Колонки.Добавить("П000010000003");
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл 
		Данные = Стр.Данные[0].Значение;
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Данные);
	КонецЦикла;
	ТЗ.Свернуть("onvos_oktmo, П000010000003");
	
	Узел_onvos = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "onvos"), "onvos");
	Для Каждого Стр Из ТЗ Цикл
		Если Не ЗначениеЗаполнено(Стр.onvos_oktmo)
			Или Не ЗначениеЗаполнено(Стр.П000010000003) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел, "enabled", "true");
		НовУзел_onvos = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_onvos);
		Узел_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
			РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "documents"), "document");
		ПервыйПроход = Истина;
		Для Каждого Стр2 Из ТаблицаСтраницыРаздела3_1 Цикл
			ФиксированныеДанные = Стр2.Данные[0].Значение;
			Если ФиксированныеДанные.onvos_oktmo <> Стр.onvos_oktmo
				Или ФиксированныеДанные.П000010000003 <> Стр.П000010000003 Тогда 
				
				Продолжить;
			КонецЕсли;
			
			Если ПервыйПроход Тогда
				УстановитьЗначениеЭлемента(НовУзел_onvos, "number", 
					ФиксированныеДанные.П000010000003);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "name", 
					ФиксированныеДанные.П000010000002);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "address", 
					ФиксированныеДанные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "category", 
					ФиксированныеДанные.П000010000001);
				УстановитьЗначениеЭлемента(НовУзел_onvos, "is_without_category", 
					?(ЗначениеЗаполнено(ФиксированныеДанные.П000010000001), "false", "true"));
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					ФиксированныеДанные.onvos_name);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					ФиксированныеДанные.onvos_oktmo);
				
				Узелoro = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_onvos, "oro");
				УстановитьЗначениеЭлемента(Узелoro, "name", 
					ФиксированныеДанные.П000010000008);
				УстановитьЗначениеЭлемента(Узелoro, "number", 
					ФиксированныеДанные.П000010000009);
				УстановитьЗначениеЭлемента(Узелoro, "address", 
					ФиксированныеДанные.П000010000010);
				УзелОКТМО = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узелoro, "municipality");
				УстановитьЗначениеЭлемента(УзелОКТМО, "name", 
					ФиксированныеДанные.onvos_name1);
				УстановитьЗначениеЭлемента(УзелОКТМО, "oktmo", 
					ФиксированныеДанные.onvos_oktmo1);
					
				Если ФиксированныеДанные.ПР0301 = Истина Тогда
					УстановитьЗначениеЭлемента(Узелoro, "is_include", 1);
				Иначе
					УстановитьЗначениеЭлемента(Узелoro, "is_include", 0);
				КонецЕсли;
				Если ФиксированныеДанные.ПР0303 = Истина Тогда
					УстановитьЗначениеЭлемента(Узелoro, "is_clear", 1);
				Иначе
					УстановитьЗначениеЭлемента(Узелoro, "is_clear", 0);
				КонецЕсли;
				УстановитьЗначениеЭлемента(Узелoro, "solution_details", ФиксированныеДанные.П000010000010);
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НовУзел_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_document);
			УстановитьЗначениеЭлемента(НовУзел_document, "date", 
				Формат(ФиксированныеДанные.П50002026, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "number", 
				ФиксированныеДанные.П50002027);
			УстановитьЗначениеЭлемента(НовУзел_document, "alloted_by", 
				?(ФиксированныеДанные.Свойство("alloted_by"), ФиксированныеДанные.alloted_by, ""));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_start", 
				Формат(ФиксированныеДанные.period_start, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел_document, "period_finish", 
				Формат(ФиксированныеДанные.period_finish, "ДФ=yyyy-MM-dd"));
				
			УзелТип = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "permitting_type");
			УстановитьЗначениеЭлемента(УзелТип, "root_id", 
				ФиксированныеДанные.permitting_type_id);
			УстановитьЗначениеЭлемента(УзелТип, "name", 
				ФиксированныеДанные.permitting_type_name);
				
			Аттачи = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "attachments_files");
			Если ФиксированныеДанные.Свойство("ПрисоединенныйФайлРаздела")
				И ЗначениеЗаполнено(ФиксированныеДанные.ПрисоединенныйФайлРаздела) Тогда 
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				УстановитьЗначениеЭлемента(Аттач, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(Аттач, "gost", ФиксированныеДанные.ХешФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "name", ФиксированныеДанные.ИмяФайлРаздела);
				УстановитьЗначениеЭлемента(Аттач, "file_name", ФиксированныеДанные.ИмяФайлРаздела);
				ИмяБезРасширения = Лев(ФиксированныеДанные.ИмяФайлРаздела,
									СтрНайти(ФиксированныеДанные.ИмяФайлРаздела, ".", НаправлениеПоиска.СКонца) - 1);
				Расширение = СтрЗаменить(ФиксированныеДанные.ИмяФайлРаздела, ИмяБезРасширения + ".", "");
				УстановитьЗначениеЭлемента(Аттач, "extension", Расширение);
			Иначе
				Аттач = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Аттачи, "attachments_file");
				РегламентированнаяОтчетность.УдалитьУзел(Аттач);
			КонецЕсли;
				
			Узел_calc = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "calc"), "calc");
			Для Каждого Стр3 Из Стр2.ДанныеДопСтрок[0].Значение.П0000400010 Цикл
				Если Не ЗначениеЗаполнено(Стр3.П000040001002)
					И Не ЗначениеЗаполнено(Стр3.П000040001003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_calc = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_calc);
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "fkko");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Стр3.П000040001002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Стр3.П000040001003);
				УзелКлассОпасности = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_calc, "waste_hazard_class");
				УстановитьЗначениеЭлемента(УзелКлассОпасности, "name", 
					Стр3.П000040001004);
				УстановитьЗначениеЭлемента(УзелКлассОпасности, "id", 
					Стр3.П000040001022);
					
				УстановитьЗначениеЭлемента(НовУзел_calc, "established_limit", 
					Стр3.П000040001005);
				УстановитьЗначениеЭлемента(НовУзел_calc, "formed", 
					Стр3.П000040001006);
				УстановитьЗначениеЭлемента(НовУзел_calc, "place_in_period", 
					Стр3.П000040001007);
				УстановитьЗначениеЭлемента(НовУзел_calc, "received", 
					Стр3.П000040001008);
				УстановитьЗначениеЭлемента(НовУзел_calc, "underlimit", 
					Стр3.П000040001009);
				УстановитьЗначениеЭлемента(НовУзел_calc, "overlimit", 
					Стр3.П000040001010);
				УстановитьЗначениеЭлемента(НовУзел_calc, "cost", 
					Стр3.П000040001011);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kl", 
					Стр3.П000040001012);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_ksl", 
					Стр3.П000040001013);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kpo", 
					Стр3.П000040001014);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kst", 
					Стр3.П000040001015);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kot", 
					Стр3.П000040001016);
				УстановитьЗначениеЭлемента(НовУзел_calc, "ratio_kind", 
					Стр3.П000040001017);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum", 
					Стр3.П000040001018);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_underlimit", 
					Стр3.П000040001019);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_overlimit", 
					Стр3.П000040001020);
				УстановитьЗначениеЭлемента(НовУзел_calc, "sum_all", 
					Стр3.П000040001021);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_calc);
			
			Узел_correction = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(
				РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_document, "corrections"), "correction");
			Для Каждого Стр3 Из Стр2.ДанныеДопСтрок[0].Значение.П0000600010 Цикл 
				Если Не ЗначениеЗаполнено(Стр3.П000060001002)
					И Не ЗначениеЗаполнено(Стр3.П000060001003) Тогда 
					
					Продолжить;
				КонецЕсли;
				НовУзел_correction = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_correction);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_underlimit", 
					Стр3.П000060001019);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_overlimit", 
					Стр3.П000060001020);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_all", 
					Стр3.П000060001018);
				УстановитьЗначениеЭлемента(НовУзел_correction, "events_sum", 
					Стр3.П000060001024);
				УстановитьЗначениеЭлемента(НовУзел_correction, "sum_with_correction", 
					Стр3.П000060001025);
					
				УзелВещество = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовУзел_correction, "fkko");
				УстановитьЗначениеЭлемента(УзелВещество, "name", 
					Стр3.П000060001002);
				УстановитьЗначениеЭлемента(УзелВещество, "code", 
					Стр3.П000060001003);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_correction);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_document);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_onvos);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделИтоги(Узел)
	Узел_Итоги = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел, "total");
	
	Для Каждого Стр Из ТаблицаСтраницыРасчет Цикл
		Данные = Стр.Данные[0].Значение;
		Если Не ЗначениеЗаполнено(Данные.П010) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовУзел_Итоги = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_Итоги);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "onvos_oktmo_10", 
			Данные.П010);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_total_20", 
			Данные.П020);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_stationary_dumps_21", 
			Данные.П021);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_torch_dumps_22", 
			Данные.П022);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_water_dumps_23", 
			Данные.П023);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_wastes_24", 
			Данные.П024);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "payment_without_correction_wastes_tko_25", 
			Данные.П025);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_kbk_30", 
			"04811201010016000120");
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_oktmo_31", 
			Данные.П100310000001_1);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_total_40", 
			Данные.П040);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_pdv_41", 
			Данные.П041);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_vcv_42", 
			Данные.П042);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_cost_over_limit_43", 
			Данные.П043);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_kbk_50", 
			"04811201070016000120");
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_oktmo_51", 
			Данные.П100510000001_1);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_total_60", 
			Данные.П060);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_pdv_61", 
			Данные.П061);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_vcv_62", 
			Данные.П062);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "discharges_png_cost_over_limit_63", 
			Данные.П063);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_kbk_70", 
			"04811201030016000120");
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_oktmo_71", 
			Данные.П100710000001_1);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_total_80", 
			Данные.П080);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_pdv_81", 
			Данные.П081);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_vcc_82", 
			Данные.П082);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "dumps_cost_over_limit_83", 
			Данные.П083);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_kbk_90", 
			"04811201041016000120");
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_oktmo_91", 
			Данные.П100910000001_1);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_total_100", 
			Данные.П100);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_in_limit_101", 
			Данные.П101);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_over_limit_102", 
			Данные.П102);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_kbk_tko_110", 
			"04811201042016000120");
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_oktmo_tko_111", 
			Данные.П101010000001_1);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_total_tko_120", 
			Данные.П120);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_accepted_tko_121", 
			Данные.П121);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_in_limit_tko_122", 
			Данные.П122);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "waste_disposal_fee_over_limit_tko_123", 
			Данные.П123);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_total_130", 
			Данные.П130);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_disharges_131", 
			Данные.П131);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_disharges_png_132", 
			Данные.П132);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_dumps_133", 
			Данные.П133);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_wates_134", 
			Данные.П134);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "activities_cost_wates_tko_135", 
			Данные.П135);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_total_140", 
			Данные.П140);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_disharges_141", 
			Данные.П141);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_disharges_png_142", 
			Данные.П142);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_dumps_143", 
			Данные.П143);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_wates_144", 
			Данные.П144);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "corrections_cost_wates_tko_145", 
			Данные.П145);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_total_150", 
			Данные.П150);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_disharges_151", 
			Данные.П151);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_disharges_png_152", 
			Данные.П152);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_dumps_153", 
			Данные.П153);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_wates_154", 
			Данные.П154);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "budget_cost_wates_tko_155", 
			Данные.П155);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_total_160", 
			Данные.П160);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_disharges_161", 
			Данные.П161);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_disharges_png_162", 
			Данные.П162);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_dumps_163", 
			Данные.П163);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_wates_164", 
			Данные.П164);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "previous_payments_wates_tko_165", 
			Данные.П165);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_170", 
			Данные.П170);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_discharges_total_171", 
			Данные.П171);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_discharges_total_1711", 
			Данные.П1711);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_discharges_total_1712", 
			Данные.П1712);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_discharges_total_1713", 
			Данные.П1713);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_burnes_total_172", 
			Данные.П172);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_burnes_total_1721", 
			Данные.П1721);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_burnes_total_1722", 
			Данные.П1722);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_burnes_total_1723", 
			Данные.П1723);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_dumps_total_173", 
			Данные.П173);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_dumps_total_1731", 
			Данные.П1731);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_dumps_total_1732", 
			Данные.П1732);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_dumps_total_1733", 
			Данные.П1733);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_total_174", 
			Данные.П174);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_total_1741", 
			Данные.П1741);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_total_1742", 
			Данные.П1742);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_total_1743", 
			Данные.П1743);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_tko_total_175", 
			Данные.П175);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_tko_total_1751", 
			Данные.П1751);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_tko_total_1752", 
			Данные.П1752);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "advance_payments_wastes_tko_total_1753", 
			Данные.П1753);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_total_180", 
			Данные.П180);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_discharges_181", 
			Данные.П181);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_discharges_png_182", 
			Данные.П182);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_dumps_183", 
			Данные.П183);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_wastes_184", 
			Данные.П184);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_payment_wastes_tko_185", 
			Данные.П185);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_total_190", 
			Данные.П190);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_discharges_191", 
			Данные.П191);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_discharges_png_192", 
			Данные.П192);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_dumps_193", 
			Данные.П193);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_wastes_194", 
			Данные.П194);
		УстановитьЗначениеЭлемента(НовУзел_Итоги, "total_fee_return_offset_wastes_tko_195", 
			Данные.П195);
			
		Для Инд = 1 По 5 Цикл 
			ИмяДочернегоУзла = "advance_payment_way_20" + Инд + "_id";
			ЗначениеУзла = "";
			Для Гр = 1 По 3 Цикл 
				Если Данные["ПФ0" + (Инд + 1) + "00" + Гр] = Истина Тогда 
					ЗначениеУзла = "" + Гр;
				КонецЕсли;
			КонецЦикла;
			УстановитьЗначениеЭлемента(НовУзел_Итоги, ИмяДочернегоУзла, ЗначениеУзла);
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел_Итоги);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если ЗначениеПоказателя = 0 И (Узел.Обязательность = "О" Или Узел.Обязательность = "O") Тогда 
			Узел.Значение = "0";
		Иначе
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДополнительнымиДанными(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	Если ПараметрыВыгрузки.ЕстьПриложения Тогда 
		Узел_response = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "response");
		Узел_data = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_response, "data");
		Узел_service_request = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_data, "service_request");
		Узел_report = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_service_request, "report");
		Узел_attached_documents = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_report, "documents");
		Узел_attached_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_attached_documents, "document");
		
		Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
			НовыйУзел_attached_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_attached_document);
			
			УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "number", Стр.Номер);
			УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "name", Стр.Название);
			УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "comment", Стр.Комментарий);
			УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "is_waste_movement_log", ?(Стр.ЖурналУчетаОтходов , "true", "false"));
			УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "date", Формат(Стр.Дата, "ДФ='yyyy-MM-dd HH:mm:ss'; ДП=' '"));
			
			Узел_documents_attachments_files = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовыйУзел_attached_document, "attachments_files");
			Узел_documents_attachments_file = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_documents_attachments_files, "attachments_file");
			Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
				НовыйУзел_documents_attachments_file = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_documents_attachments_file);
				
				УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "uuid", Строка(Новый УникальныйИдентификатор));
				УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "gost", СтрФайл.Комментарий);
				УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "name", СтрФайл.ОписаниеДокумента);
				УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "file_name", СтрФайл.ОписаниеДокумента);
				УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "extension", СтрФайл.Название);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_documents_attachments_file);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_attached_document);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И РегламентированнаяОтчетность.УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И РегламентированнаяОтчетность.УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						ДанныеЛиста = Лист.Данные[0].Значение;
						ДанныеЛиста.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти","");
						Если ДанныеЛиста.Свойство("ОКАТО") И ТипЗнч(ДанныеЛиста.ОКАТО) = Тип("Строка") Тогда 
							ДанныеЛиста.ОКАТО = СокрЛП(ДанныеЛиста.ОКАТО);
						КонецЕсли;
						
						Если Стр.Многострочность Тогда
							НомСтр = 1;
							ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
							КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
							Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
								УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСоответствующийСтроке, НомСтр);
								НомСтр = НомСтр + 1;
							КонецЦикла;
						Иначе
							УзелМногостраничногоРаздела = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелМногостраничногоРаздела);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	РегламентированнаяОтчетность.ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	Возврат "dpnvos.xml";
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтотОбъект[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
							Если Не СохранятьМногострКакТЗ Тогда 
								НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							КонецЕсли;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								Если СохранятьМногострКакТЗ Тогда 
									ТаблЗнач = ЭлСтруктуры.Значение;
									ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								Иначе
									СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
									НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтотОбъект[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить("ПолеТабличногоДокумента" + Раздел.Ключ, ЭтотОбъект[Раздел.Значение]);
	КонецЦикла;
	
	мДанныеОтчета.Вставить("ОКАТОФильтр", "");
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	ТабДокументТитульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	СтрокаСведений = "ОКВЭД2, ОКАТО, ОКПО, ОГРН, ТипНП, ДатаРегистрации, ИННЮЛ, КППЮЛ, НаимЮЛПол, АдрЮР, АдрФакт, АдрПочт, ";
	СтрокаСведений = СтрокаСведений + "ОргИндекс, ОргСубъект, ОргРайон, ОргГород, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ";
	СтрокаСведений = СтрокаСведений + "БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка, ";
	СтрокаСведений = СтрокаСведений + "ТелОрганизации, ФаксОрганизации, ЭлектроннаяПочта, ФИОРук, ТелРук, ФИОБух, ТелБух";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "NVOS_");
	ПараметрыВыгрузки.Вставить("НомКорр", ?(ТабДокументТитульный.НомКоррект = "0" Или Не ЗначениеЗаполнено(ТабДокументТитульный.НомКоррект), "1", "2"));
	ПараметрыВыгрузки.Вставить("НомУточн", "");
	Если ТабДокументТитульный.Свойство("serial_number") И ПараметрыВыгрузки.НомКорр = "2" Тогда 
		ПараметрыВыгрузки.Вставить("НомУточн", ТабДокументТитульный.serial_number);
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыгрузкиПакета", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыгрузкиПакета(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета';
														|en = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В РПН

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ТекущаяСтраница = "")

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если ЗначениеЗаполнено(ТекущаяСтраница) 
		И Форма.мСтруктураМногоуровневыхРазделов.Свойство(ТекущаяСтраница)
		И СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда 
		
		Возврат ТекущаяСтраница;
	КонецЕсли;
	
	Если ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку8" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы8;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку9" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы9;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку10" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы10;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку11" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы11;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел3" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы5);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы3, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел3 = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел3);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, ТаблицаДопСтрокРаздел3);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы5, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел5 = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы5].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел5);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаДопСтрокРаздел5);
	ИначеЕсли ИмяСтраницы = "Раздел3_1" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы4);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы11);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы4, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел4 = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы4].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел4);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, ТаблицаДопСтрокРаздел4);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы11, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел11 = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы11].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел11);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, ТаблицаДопСтрокРаздел11);
	ИначеЕсли ИмяСтраницы = "Расчет" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы6);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы7);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы8);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы9);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.мИдГруппы10);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		Для Инд = 6 По 10 Цикл 
			ПромежуточнаяТаблица = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы["мИдГруппы" + Инд], ПромежуточнаяТаблица);
			ПромежуточнаяТаблица = ЭтотОбъект[ПромежуточнаяТаблица];
			ТаблицаДопСтрокРаздел = ЭтотОбъект["Хранилище" + СтруктураРеквизитовФормы["мИдГруппы" + Инд]].Добавить().Таблица;
			КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел);
			СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы["мИдГруппы" + Инд], ТаблицаДопСтрокРаздел);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя1 = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		ТестовоеИмя2 = ИмяГруппы + "15_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			(ТабличныйДокумент.Области.Найти(ТестовоеИмя1) <> Неопределено Или ТабличныйДокумент.Области.Найти(ТестовоеИмя2) <> Неопределено) Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопокПрисоединенныеФайлы()
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Ложь;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Ложь;
	Иначе
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Истина;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньГруппировки(ТекущиеДанные)
	Возврат ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, 0, 1 + УровеньГруппировки(ТекущиеДанные.ПолучитьРодителя()));
КонецФункции

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	ПараметрыВводаРеквизитов = Новый Структура;
	ПараметрыВводаРеквизитов.Вставить("Добавление", Истина);
	ПараметрыВводаРеквизитов.Вставить("Редактирование", Ложь);
	ПараметрыВводаРеквизитов.Вставить("ТекущиеДанные", Неопределено);
	ПараметрыВводаРеквизитов.Вставить("ЖурналУчетаОтходов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
	ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыВводаРеквизитов, ЭтотОбъект);
	ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитовДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Добавление Тогда 
			ЗаполнитьЗначенияСвойств(_Приложения.ПолучитьЭлементы().Добавить(), Результат);
		ИначеЕсли ДополнительныеПараметры.Редактирование Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущиеДанные, Результат);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если УровеньГруппировки(ТекущиеДанные) = 1 Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
		ТекстВопроса = "Перед добавлением приложения необходимо сохранить отчет. Продолжить?";
		ОО = Новый ОписаниеОповещения("ВопросФайлЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ВопросФайлЗавершение(КодВозвратаДиалога.Да, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросФайлЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияФайлЗавершениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияФайлЗавершениеЗавершение(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайлЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаПоиска", ВыбИмяФайла);
	ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
	ОО = Новый ОписаниеОповещения("ПодписатьФайлГОСТ2012Завершение", ЭтотОбъект, ДополнительныеПараметры);
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		НовСтрКомментарий = НРег(Результат.Хеш);
	Иначе
		НовСтрКомментарий = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовСтрКомментарий) Тогда 
		Возврат;
	КонецЕсли;
	НовСтр = ДополнительныеПараметры.ТекущиеДанные.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = НовСтрКомментарий;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог, НовСтр.ПолучитьИдентификатор());
		Элементы.ПриложенияКОтчету.Развернуть(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор());
		ДоступностьКнопокПрисоединенныеФайлы();
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ПолноеИмяФайла, Каталог, НовСтр) Экспорт 
	НовСтрСтр = _Приложения.НайтиПоИдентификатору(НовСтр);
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	ПрисоединенныйФайл = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	НовСтрСтр.ПрисоединенныйФайл = ПрисоединенныйФайл;
	НовСтрСтр.ОписаниеДокумента = ИмяФайла;
	НовСтрСтр.Название = СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", "");
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	УдалитьПрисоединенныйФайл(ТекущиеДанные.ПолучитьИдентификатор());
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайл(ИдВДереве)
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ИдВДереве);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПравоДоступаУдаление = ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ПрисоединенныйФайлОбъект = Стр.ПрисоединенныйФайл.ПолучитьОбъект();
			Если ПравоДоступаУдаление Тогда 
				ПрисоединенныйФайлОбъект.Удалить();
			Иначе
				ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		_Приложения.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		ПрисоединенныйФайлОбъект = ТекущиеДанные.ПрисоединенныйФайл.ПолучитьОбъект();
		Если ПравоДоступаУдаление Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,СтруктураРеквизитовФормы.НаимТекущегоРаздела);
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		ПараметрыВводаРеквизитов = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Ложь, Истина, ТекущиеДанные);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Номер", ТекущиеДанные.Номер);
		ПараметрыОткрытияФормы.Вставить("Название", ТекущиеДанные.Название);
		ПараметрыОткрытияФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
		ПараметрыОткрытияФормы.Вставить("Дата", ТекущиеДанные.Дата);
		ПараметрыОткрытияФормы.Вставить("ЖурналУчетаОтходов", ТекущиеДанные.ЖурналУчетаОтходов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
		ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыОткрытияФормы, ЭтотОбъект);
		ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаРеквизитовДокумента.Открыть();
	Иначе
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл), Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуПриАктивизацииСтроки(Элемент)
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаСервере
Функция ДанныеФайла(ПрисоединенныйФайл)
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
