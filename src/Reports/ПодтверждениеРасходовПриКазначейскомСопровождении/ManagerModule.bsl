#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует табличную часть отчета
// 
// Параметры:
//  ПараметрыОтчета - Структура
//  АдресХранилища - Строка
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Неопределено;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху = 20;
	ДокументРезультат.ПолеСнизу = 20;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 10;

	Если ПараметрыОтчета.НомерПриложения = 1 Тогда
		Результат = СформироватьПриложение1(ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.НомерПриложения = 2 Тогда
		Результат = СформироватьПриложение2(ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.НомерПриложения = 3 Тогда
		Результат = СформироватьПриложение3(ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.НомерПриложения = 4 Тогда
		Результат = СформироватьПриложение4(ПараметрыОтчета);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Таблица правил расчета показателей приложение2.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - колонки:
//  * ГруппаПоказателей1 - Строка - Группа показателей первого уровня.
//  * ГруппаПоказателей2 - Строка - Группа показателей второго уровня.
//  * Заголовок - Строка - Заголовок правила.
//  * КодПоказателя - Строка - Код показателя.
//  * Графа - Строка - Графа заполнения в отчете.
//  * ИсточникДанных - Строка - Источник данных для получения данных.
//  * ЭтоГруппа - Булево - Признак группы.
//  * ОтборОборотов - СписокЗначений - значение - Структура
//  
Функция ТаблицаПравилРасчетаПоказателейПриложение2(ПараметрыОтчета) Экспорт
	
	РасшифровкаДоОборотов = ПараметрыОтчета.РасшифровкаДоОборотов;
	
	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателей();

	// 1 "Цена государственного контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.КодПоказателя = "100";
	НовоеПравило.КодПредставление = "1";
	НовоеПравило.Заголовок = НСтр("ru = 'Цена государственного (муниципального) контракта, договора (соглашения), контракта (договора)';
									|en = 'Price of the state (municipal) contract, contract (agreement)'");
	НовоеПравило.ЭтоГруппа = Истина;

	// 1.1 "НДС10 государственного контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.КодПоказателя = "101";
	НовоеПравило.КодПредставление = "1.1";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС 10%';
									|en = 'VAT 10%'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаНДС";
	ОтборОборотовКассаФакт.СтавкаНДС = МассивНДС10_110();
	ОтборОборотовКассаФакт.ТипРегистратора = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.КодПоказателя = "101";
	НовоеПравило.КодПредставление = "1.1";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС 10%';
									|en = 'VAT 10%'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.Субконто2 = МассивНДС10_110();
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 1.2 "НДС20 государственного контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.КодПоказателя = "102";
	НовоеПравило.КодПредставление = "1.2";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС 20%';
									|en = 'VAT 20%'"); 
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаНДС";
	ОтборОборотовКассаФакт.СтавкаНДС = МассивНДС20_120();
	ОтборОборотовКассаФакт.ТипРегистратора = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.КодПоказателя = "102";
	НовоеПравило.КодПредставление = "1.2";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС 20%';
									|en = 'VAT 20%'"); 
	НовоеПравило.ИсточникДанных = "ДанныеБух";
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.Субконто2 = МассивНДС20_120();
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 2 "Заработная плата"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0100001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0100001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 3 "Страховые взносы обязательного социального страхования"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0813001, 0814001, 0815001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0813001, 0814001, 0815001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);

	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 4 "Работы выполняемые сторонними организациями"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Работы, выполняемые сторонними организациями';
									|en = 'Works performed by third parties'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ДетализированныеКоды = "0200001, 0200002, 0200003,0200004,0200005,0200006, 0200007, 0200010, 0200011,
							|0200012, 0200013, 0200014, 0200015, 0200016, 0200017, 0200018, 0200019, 0200020,
							|0200021, 0200022, 0200028, 0200023, 0200024, 0200025, 0200026, 0200027, 0200029,
							|0200030, 0200031, 0200032, 0410001, 0410002, 0410003, 0410008";

	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Работы, выполняемые сторонними организациями';
									|en = 'Works performed by third parties'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Работы, выполняемые сторонними организациями';
									|en = 'Works performed by third parties'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);

	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5 "Налоги, сборы, иные платежи в бюджет"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	УкрупненныеКоды = "0811, 0812";
	ДетализированныеКоды = "0810001, 0810002, 0810003, 0810004, 0811001";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = ДетализированныеКоды;
	ОтборОборотовКассаПлан.УкрупненныеКоды = УкрупненныеКоды;
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;
	ОтборОборотовКассаФакт.УкрупненныеКоды = УкрупненныеКоды;
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	// 5.1 "НДФЛ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "151";
	НовоеПравило.КодПредставление = "5.1";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0812001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
 	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "151";
	НовоеПравило.КодПредставление = "5.1";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0812001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "151";
	НовоеПравило.КодПредставление = "5.1";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	// 6 "Накладные расходы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Накладные расходы';
									|en = 'Overheads'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

    ДетализированныеКоды = "0888001, 0888002, 0888003, 0888017, 0888018, 0888005, 0888006, 0888007,
							|0888008, 0888009, 0888010, 0888019, 0888020, 0888021, 0888011, 0888012,
							|0888013, 0888022, 0888014, 0888015, 0888016";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Накладные расходы';
									|en = 'Overheads'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Накладные расходы';
									|en = 'Overheads'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 7 "Прибыль"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "170";
	НовоеПравило.КодПредставление = "7";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0999001, 0991001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);

	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "170";
	НовоеПравило.КодПредставление = "7";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0999001, 0991001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "170";
	НовоеПравило.КодПредставление = "7";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	// 8 "Прочие выплаты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "180";
	НовоеПравило.КодПредставление = "8";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие выплаты';
									|en = 'Other payments'");
	НовоеПравило.ЭтоГруппа = Истина;
	
	// 8.1 "Выплаты персоналу"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "181";
	НовоеПравило.КодПредставление = "8.1";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Выплаты персоналу';
									|en = 'Payments to employees'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0100002, 0100003, 0100004, 0100005, 0100006, 0100007";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "181";
	НовоеПравило.КодПредставление = "8.1";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Выплаты персоналу';
									|en = 'Payments to employees'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0100002, 0100003, 0100004, 0100005, 0100006, 0100007";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "181";
	НовоеПравило.КодПредставление = "8.1";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Выплаты персоналу';
									|en = 'Payments to employees'");;
	НовоеПравило.ИсточникДанных = "КассаФакт";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	// 8.2 "Закупка"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "182";
	НовоеПравило.КодПредставление = "8.2";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Закупка непроизведенных активов, нематериальных активов, материальных запасов и основных средств и прочих активов (за исключением выплат на капитальные вложения),
									|в том числе на основании договора гражданско-правового характера, исполнителем по которому является физическое лицо или индивидуальный предприниматель';
									|en = 'Purchase of non-produced assets, intangible assets, inventory, fixed assets, and other assets (except for payments for capital expenditure).
									|Purchasing is also based on a civil law contract whose contractor is an individual or an individual entrepreneur'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ДетализированныеКоды = "0300001, 0300002, 0300030, 0300003, 0300004, 0300005, 0300006, 0300007, 0300031,
							|0300008, 0300009, 0300010, 0300011, 0300012, 0300013, 0300014, 0300015, 0300016,
							|0300017, 0300018, 0300019, 0300020, 0300021, 0300033, 0300034, 0300022, 0300023,
							|0300024, 0300025, 0300026, 0300027, 0300028, 0300029, 0300032";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "182";
	НовоеПравило.КодПредставление = "8.2";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Закупка непроизведенных активов, нематериальных активов, материальных запасов и основных средств и прочих активов (за исключением выплат на капитальные вложения),
									|в том числе на основании договора гражданско-правового характера, исполнителем по которому является физическое лицо или индивидуальный предприниматель';
									|en = 'Purchase of non-produced assets, intangible assets, inventory, fixed assets, and other assets (except for payments for capital expenditure).
									|Purchasing is also based on a civil law contract whose contractor is an individual or an individual entrepreneur'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "182";
	НовоеПравило.КодПредставление = "8.2";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Закупка непроизведенных активов, нематериальных активов, материальных запасов и основных средств и прочих активов (за исключением выплат на капитальные вложения),
									|в том числе на основании договора гражданско-правового характера, исполнителем по которому является физическое лицо или индивидуальный предприниматель';
									|en = 'Purchase of non-produced assets, intangible assets, inventory, fixed assets, and other assets (except for payments for capital expenditure).
									|Purchasing is also based on a civil law contract whose contractor is an individual or an individual entrepreneur'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";
	
	// 8.2 "Закупка" отбор оборотов бухгалтерского учета [0]
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Тара);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 8.2 "Закупка" отбор оборотов бухгалтерского учета [1]
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 8.2 "Закупка" отбор оборотов бухгалтерского учета [2]
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 8.3 "Капитальные вложения"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "183";
	НовоеПравило.КодПредставление = "8.3";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Капитальные вложения';
									|en = 'Capital investments'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0410004, 0410005, 0410006, 0410007";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "183";
	НовоеПравило.КодПредставление = "8.3";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Капитальные вложения';
									|en = 'Capital investments'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0410004, 0410005, 0410006, 0410007";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "183";
	НовоеПравило.КодПредставление = "8.3";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Капитальные вложения';
									|en = 'Capital investments'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	// 8.3 "Капитальные вложения" отбор оборотов [0] Дт 08.03
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 8.4 "Иные выплаты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "184";
	НовоеПравило.КодПредставление = "8.4";
	НовоеПравило.Графа = "4";
	НовоеПравило.Заголовок = НСтр("ru = 'Иные выплаты';
									|en = 'Other payments'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ДетализированныеКоды = "0820001, 0820002, 0820003, 0820004, 0820005, 0820006, 0820007, 0820008";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = ДетализированныеКоды;			
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "184";
	НовоеПравило.КодПредставление = "8.4";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Иные выплаты';
									|en = 'Other payments'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = ДетализированныеКоды;			
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "180";
	НовоеПравило.КодПоказателя = "184";
	НовоеПравило.КодПредставление = "8.4";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Иные выплаты';
									|en = 'Other payments'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	Возврат ПравилаРасчетаПоказателей;
	
КонецФункции

// Таблица правил расчета показателей приложение3.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - колонки:
//  * ГруппаПоказателей1 - Строка - Группа показателей первого уровня.
//  * ГруппаПоказателей2 - Строка - Группа показателей второго уровня.
//  * Заголовок - Строка - Заголовок правила.
//  * КодПоказателя - Строка - Код показателя.
//  * Графа - Строка - Графа заполнения в отчете.
//  * ИсточникДанных - Строка - Источник данных для получения данных.
//  * ЭтоГруппа - Булево - Признак группы.
//  * ОтборОборотов - СписокЗначений - значение - Структура
//  
Функция ТаблицаПравилРасчетаПоказателейПриложение3(ПараметрыОтчета) Экспорт

	РасшифровкаДоОборотов = ПараметрыОтчета.РасшифровкаДоОборотов;

	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателей();
	
	// 1 "Цена государственного контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.КодПоказателя = "100";
	НовоеПравило.КодПредставление = "1";
	НовоеПравило.Заголовок = НСтр("ru = 'Цена государственного (муниципального) контракта, договора (соглашения), контракта (договора)';
									|en = 'Price of the state (municipal) contract, contract (agreement)'");
	НовоеПравило.ЭтоГруппа = Истина;

	// 2 "Заработная плата"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0100001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0100001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "120";
	НовоеПравило.КодПредставление = "2";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'Заработная плата';
									|en = 'Payroll'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 3 "Страховые взносы обязательного социального страхования"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0813001, 0814001, 0815001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0813001, 0814001, 0815001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "130";
	НовоеПравило.КодПредставление = "3";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'Страховые взносы на обязательное социальное страхование';
									|en = 'Insurance contributions for compulsory social insurance'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);

	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 4 "Налоги, сборы, иные платежи в бюджет"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0810001, 0810002, 0810003, 0810004, 0811001, 0812001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0810001, 0810002, 0810003, 0810004, 0811001, 0812001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "140";
	НовоеПравило.КодПредставление = "4";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'Налоги, сборы, иные платежи в бюджеты бюджетной системы российской федерации';
									|en = 'Taxes, fees, and other payments to the budget of the budgetary system of the Russian Federation'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	// 4.1 "НДФЛ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "141";
	НовоеПравило.КодПредставление = "4.1";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.ДетализированныеКоды = "0812001";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "141";
	НовоеПравило.КодПредставление = "4.1";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0812001";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "141";
	НовоеПравило.КодПредставление = "4.1";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'НДФЛ';
									|en = 'PIT'");
	НовоеПравило.ИсточникДанных = "КассаФакт";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	// 5 "Прочие затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "5";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие затраты';
									|en = 'Other expenses'");
	НовоеПравило.ИсточникДанных = "КассаПлан";

	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.УкрупненныеКоды = "0100, 0300, 0410, 0820, 0888";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие затраты';
									|en = 'Other expenses'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт(); 
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.УкрупненныеКоды = "0100, 0300, 0410, 0820, 0888";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие затраты';
									|en = 'Other expenses'");
	НовоеПравило.ИсточникДанных = "ДанныеБух";

	// 5.1 "Работы выполняемые сторонними организациями"
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);

	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.КорСубконто1 = ТипыЗатрат;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5.2 "Накладные расходы"
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорНаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5.3 "Закупка" отбор оборотов бухгалтерского учета [0]
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Тара);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.КорСчет = СчетаВИерархии(КорСчета);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5.3 "Закупка" отбор оборотов бухгалтерского учета [1]
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5.3 "Закупка" отбор оборотов бухгалтерского учета [2]
	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	// 5.4 "Капитальные вложения" отбор оборотов
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);

	ОтборОборотовБухгалтерскогоУчета = ОтборОборотовБухгалтерскогоУчета();
	ОтборОборотовБухгалтерскогоУчета.Счет = СчетаВИерархии(Счета);
	ОтборОборотовБухгалтерскогоУчета.НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	ОтборОборотовБухгалтерскогоУчета.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОборотыБухгалтерскогоУчета(НовоеПравило, ОтборОборотовБухгалтерскогоУчета, РасшифровкаДоОборотов);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "150";
	НовоеПравило.КодПредставление = "5";
	НовоеПравило.Графа = "7";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие затраты';
									|en = 'Other expenses'");
	НовоеПравило.ИсточникДанных = "КассаФакт";

	// 5.5 "Выплаты персоналу"
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0100002, 0100003, 0100004, 0100005, 0100006, 0100007";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	// 5.6 "Иные выплаты"
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.ДетализированныеКоды = "0820001, 0820002, 0820003, 0820004, 0820005, 0820006, 0820007, 0820008";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	// 6 "Прибыль"
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.Графа = "5";
	НовоеПравило.ИсточникДанных = "КассаПлан";
	
	ОтборОборотовКассаПлан = ОтборОборотовКассаПлан();
	ОтборОборотовКассаПлан.УкрупненныеКоды = "0999, 0991";
	ДобавитьОборотКассаПлан(НовоеПравило, ОтборОборотовКассаПлан);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.Графа = "6";
	НовоеПравило.ИсточникДанных = "КассаФакт";
	
	ОтборОборотовКассаФакт = ОтборОборотовКассаФакт();
	ОтборОборотовКассаФакт.ИмяРесурса = "СуммаОплаты";
	ОтборОборотовКассаФакт.УкрупненныеКоды = "0999, 0991";
	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);
	
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить();
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.КодПоказателя = "160";
	НовоеПравило.КодПредставление = "6";
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль';
									|en = 'Profit'");
	НовоеПравило.Графа = "7";
	НовоеПравило.ИсточникДанных = "КассаФакт";

	ДобавитьОборотКассаФакт(НовоеПравило, ОтборОборотовКассаФакт);

	Возврат ПравилаРасчетаПоказателей;
	
КонецФункции

// Получение данных.
// 
// Параметры:
//  ПараметрыОтчета - структура - Параметры отчета
//  ПравилаРасчетаПоказателей - ТаблицаЗначений - Правила расчета показателей
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - колонки:
//  * ГруппаПоказателей1 - Строка - Группа показателей первого уровня.
//  * ГруппаПоказателей2 - Строка - Группа показателей второго уровня.
//  * Заголовок - Строка - Заголовок правила.
//  * КодПоказателя - Строка - Код показателя.
//  * Графа - Строка - Графа заполнения в отчете.
//  * ИсточникДанных - Строка - Источник данных для получения данных.
//  * ИндексОборота - Число - Индекс оборота в списке.
//  * Оборот - Строка - Заголовок оборота
//  * Множитель - Число - Отражает операцию сложения или вычитания оборота
//  * Сумма - Число - Сумма
//  
Функция ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаИсточниковДанных();
	УстановитьОбщиеПараметрыЗапроса(Запрос, ПараметрыОтчета);
	
	Запрос.Выполнить();
	
	ДанныеПоказателей = Новый ТаблицаЗначений;
	ДанныеПоказателей.Колонки.Добавить("ГруппаПоказателей1", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("ГруппаПоказателей2", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("Графа", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("ИндексОборота", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("Оборот", Новый ОписаниеТипов("Строка"));
	ДанныеПоказателей.Колонки.Добавить("Множитель", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Запрос.Текст = "";
	Показатели = ПравилаРасчетаПоказателей.ВыгрузитьКолонку("КодПоказателя");
	Показатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Показатели); //Массив -
	Для каждого Показатель Из Показатели Цикл
		МассивОбъединений = Новый Массив;
		ПравилаПоРазделу = ПравилаРасчетаПоказателей.НайтиСтроки(Новый Структура("КодПоказателя", Показатель));
		Для каждого Правило Из ПравилаПоРазделу Цикл
			Если Правило.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			Если Правило.ИсточникДанных = "ДанныеБух" Тогда
				ТекстЗапросаПоПравилу = ТекстЗапросаБухгалтерскогоУчетаПоПравилу(Правило, ПараметрыОтчета, Запрос);
			ИначеЕсли Правило.ИсточникДанных = "КассаФакт" Тогда
				ТекстЗапросаПоПравилу = ТекстЗапросаКассаФактПоПравилу(Правило, ПараметрыОтчета, Запрос);
			ИначеЕсли Правило.ИсточникДанных = "КассаПлан" Тогда
				ТекстЗапросаПоПравилу = ТекстЗапросаКассаПланПоПравилу(Правило, ПараметрыОтчета, Запрос);
			КонецЕсли;
			Если ТекстЗапросаПоПравилу <> "" Тогда
				МассивОбъединений.Добавить(ТекстЗапросаПоПравилу);
			КонецЕсли;
		КонецЦикла;
		Если МассивОбъединений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос.Текст = СтрСоединить(МассивОбъединений, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ДанныеПоказателей);
	КонецЦикла;
	
	ДанныеПоказателей.Индексы.Добавить("КодПоказателя");
	
	Возврат ДанныеПоказателей;
	
КонецФункции

#Область Расшифровки

// Параметры формы расшифровки показателя кассы.
// 
// Параметры:
//  Параметры - Структура - Параметры
//  СтруктураОтбораОборотов - Структура - структура отбора оборота:
//  ДополнительныеПараметры - Структура - Дополнительные параметры
// 
// Возвращаемое значение: 
// 	Структура - параметры формы, где:
// 	*Отбор - Структура из
// 	*СформироватьПриОткрытии - Булево
//  
Функция ПараметрыФормыРасшифровкиПоказателяКассы(Параметры, СтруктураОтбораОборотов, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация" , Параметры.Организация);
	Отбор.Вставить("НачалоПериода" , Параметры.НачалоПериода);
	Отбор.Вставить("КонецПериода",  КонецДня(Параметры.КонецПериода));
	Отбор.Вставить("НаправлениеДеятельности", Параметры.НаправлениеДеятельности);
	Отбор.Вставить("КодПредставление", ДополнительныеПараметры.КодПредставление);
	Отбор.Вставить("ЗаголовокПоказателя", ДополнительныеПараметры.ЗаголовокПоказателя);
	Отбор.Вставить("Графа", ДополнительныеПараметры.Графа);
	Отбор.Вставить("ИмяРесурса", СтруктураОтбораОборотов.ИмяРесурса);
	
	Если СтруктураОтбораОборотов.УкрупненныеКоды.Количество() Тогда 
		Отбор.Вставить("УкрупненныйКод",  СтруктураОтбораОборотов.УкрупненныеКоды);
	КонецЕсли;
	Если СтруктураОтбораОборотов.ДетализированныеКоды.Количество() Тогда 
		Отбор.Вставить("ДетализированныйКод", СтруктураОтбораОборотов.ДетализированныеКоды);
	КонецЕсли;
	Если СтруктураОтбораОборотов.СтавкаНДС.Количество() Тогда 
		Отбор.Вставить("СтавкаНДС", СтруктураОтбораОборотов.СтавкаНДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.ТипРегистратора) Тогда 
		Отбор.Вставить("ТипРегистратора", СтруктураОтбораОборотов.ТипРегистратора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Параметры формы расшифровки показателя бух.
// 
// Параметры:
//  Параметры - Структура - Параметры
//  СтруктураОтбораОборотов - Структура - структура отбора оборота:
// 
// Возвращаемое значение: 
// 	Структура - параметры формы, где:
// 	*ВидРасшифровки - Число
// 	*ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
// 	*СформироватьПриОткрытии - Булево
//  
Функция ПараметрыФормыРасшифровкиПоказателяБух(Параметры, СтруктураОтбораОборотов) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация", Параметры.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", Параметры.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(Параметры.КонецПериода));
	
	ДополнительныеСвойства.Вставить("ПоСубсчетам", Ложь);
	ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов", Истина);
	ДополнительныеСвойства.Вставить("СальдоНаНачалоДт", Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаНачалоКт", Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаКонецДт", Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаКонецКт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыЗаПериодДт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыЗаПериодКт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыСоСчетамиДт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыСоСчетамиКт", Ложь);
	
	Если СтруктураОтбораОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт Тогда
		ДополнительныеСвойства.Вставить("ОборотыСоСчетамиДт", Истина);
	ИначеЕсли СтруктураОтбораОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
		ДополнительныеСвойства.Вставить("ОборотыСоСчетамиКт", Истина)
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Счет", СтруктураОтбораОборотов.Счет);
	
	ПользовательскиеОтборыДляСчета = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.КорСчет) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"КорСчет", 
		МассивВСписокЗначений(СтруктураОтбораОборотов.КорСчет), 
		ВидСравненияКомпоновкиДанных.ВСписке);
	ИначеЕсли ЗначениеЗаполнено(СтруктураОтбораОборотов.ИсключаемыйКорСчет) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"КорСчет", 
		МассивВСписокЗначений(СтруктураОтбораОборотов.ИсключаемыйКорСчет), 
		ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.НаправлениеДеятельности) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"НаправлениеДеятельности", 
		СтруктураОтбораОборотов.НаправлениеДеятельности, 
		ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.КорНаправлениеДеятельности) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"НаправлениеДеятельностиКор", 
		СтруктураОтбораОборотов.КорНаправлениеДеятельности, 
		ВидСравненияКомпоновкиДанных.Равно);
	ИначеЕсли ЗначениеЗаполнено(СтруктураОтбораОборотов.ИсключаемыйКорНаправлениеДеятельности) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"НаправлениеДеятельностиКор", 
		СтруктураОтбораОборотов.ИсключаемыйКорНаправлениеДеятельности, 
		ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.Субконто1) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"Субконто1", 
		МассивВСписокЗначений(СтруктураОтбораОборотов.Субконто1), 
		ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.Субконто2) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"Субконто2", 
		МассивВСписокЗначений(СтруктураОтбораОборотов.Субконто2), 
		ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбораОборотов.КорСубконто1) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ПользовательскиеОтборыДляСчета, 
		"Субконто1Кор", 
		МассивВСписокЗначений(СтруктураОтбораОборотов.КорСубконто1), 
		ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Приложение1

// Сформировать приложение1.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  ТабличныйДокумент
//  
Функция СформироватьПриложение1(ПараметрыОтчета)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху = 20;
	ДокументРезультат.ПолеСнизу = 20;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 10;
    ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеРасходовПриКазначейскомСопровождении_Приложение1";
	
	Макет = ПолучитьМакет("Приложение1");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ДанныеЗаполненияШапки(ПараметрыОтчета));
	ДокументРезультат.Вывести(Шапка);
	
	Запрос = ЗапросДанныхПриложения1(ПараметрыОтчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	ИтогоСебестоимостьКонтракта = 0;
	СписокПериодов = Новый СписокЗначений;
	ОбщепроизводственныеРасходы = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	ОбщехозяйственныеРасходы = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	ВыборкаСчетКт = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетКт.Следующий() Цикл

		ВидЗатрат = "";
		Если ОбщепроизводственныеРасходы.Найти(ВыборкаСчетКт.СчетКТ) <> Неопределено Тогда
			ВидЗатрат = НСтр("ru = 'Общепроизводственные,';
							|en = 'General production costs'");
		ИначеЕсли ОбщехозяйственныеРасходы.Найти(ВыборкаСчетКт.СчетКТ) <> Неопределено Тогда
			ВидЗатрат = НСтр("ru = 'Общехозяйственные,';
							|en = 'General business costs'");
		КонецЕсли;
		
		СтрокаВидЗатрат = Макет.ПолучитьОбласть("СтрокаВидЗатрат");
		СтрокаВидЗатрат.Параметры.Заполнить(ВыборкаСчетКт);
		СтрокаВидЗатрат.Параметры.ВидЗатрат = ВидЗатрат;
		ДокументРезультат.Вывести(СтрокаВидЗатрат);
		
		ВыборкаПериодМесяц = ВыборкаСчетКт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериодМесяц.Следующий() Цикл
			
			Если ВыборкаПериодМесяц.Количество() > 1 Тогда
				
				СтрокаПериод = Макет.ПолучитьОбласть("СтрокаПериод");
				СтрокаПериод.Параметры.Заполнить(ВыборкаПериодМесяц);
				ДокументРезультат.Вывести(СтрокаПериод);
				
				Если СписокПериодов.НайтиПоЗначению(ВыборкаПериодМесяц.ПериодМесяц) = Неопределено Тогда
					СписокПериодов.Добавить(ВыборкаПериодМесяц.ПериодМесяц);
				КонецЕсли;
				
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = ВыборкаПериодМесяц.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				СтрокаДетально = Макет.ПолучитьОбласть("СтрокаДетально");
				СтрокаДетально.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				СтрокаДетально.Параметры.ДанныеРасхода = "" + ВыборкаДетальныеЗаписи.СтатьяРасходов + ", " + ВыборкаДетальныеЗаписи.АналитикаРасходов + ", " + ВыборкаДетальныеЗаписи.Подразделение;
				СтрокаДетально.Параметры.Коэффициент = ?(ВыборкаДетальныеЗаписи.БазаРаспределения = 0, 0, ВыборкаДетальныеЗаписи.СуммаКонтракта/ВыборкаДетальныеЗаписи.БазаРаспределения);
				ДокументРезультат.Вывести(СтрокаДетально);
				
				ИтогоСебестоимостьКонтракта = ИтогоСебестоимостьКонтракта + ВыборкаДетальныеЗаписи.СебестоимостьКонтракта;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Список = новый СписокЗначений;
	
	Если СписокПериодов.Количество() > 1 Тогда
		СписокПериодов.СортироватьПоЗначению();
		Для Каждого Элемент из СписокПериодов Цикл
			СтрокаПериод = Макет.ПолучитьОбласть("СтрокаПериод");
			СтрокаПериод.Параметры.ПериодМесяц = Элемент.Значение;
			ДокументРезультат.Вывести(СтрокаПериод);
			
			СтрокаРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
			ДокументРезультат.Вывести(СтрокаРучногоЗаполнения);
		КонецЦикла;
	Иначе
		СтрокаРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
		ДокументРезультат.Вывести(СтрокаРучногоЗаполнения);
	КонецЕсли;

	ТаблицаИтого = Макет.ПолучитьОбласть("ТаблицаИтого");
	ТаблицаИтого.Параметры.ИтогоСебестоимостьКонтракта = ИтогоСебестоимостьКонтракта;
	ДокументРезультат.Вывести(ТаблицаИтого);
	
	Подписи = Макет.ПолучитьОбласть("Подписи");
	Подписи.Параметры.Заполнить(ДанныеЗаполненияПодвала(ПараметрыОтчета));
	ДокументРезультат.Вывести(Подписи);
	
	Возврат ДокументРезультат;
	
КонецФункции

// Запрос данных приложения1.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  Запрос
//  
Функция ЗапросДанныхПриложения1(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Регистратор КАК Регистратор,
		|	Хозрасчетный.СчетКт КАК СчетКт
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.СчетКт В(&МассивСчетов)
		|	И Хозрасчетный.НаправлениеДеятельностиДт = &НаправлениеДеятельности
		|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Хозрасчетный.Организация = &Организация
		|	И Хозрасчетный.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	СчетКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор КАК Регистратор,
		|	Регистраторы.СчетКт КАК СчетКт,
		|	КОНЕЦПЕРИОДА(ПрочиеРасходы.Период, МЕСЯЦ) КАК ПериодМесяц,
		|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
		|	ПрочиеРасходы.Подразделение КАК Подразделение,
		|	СУММА(ПрочиеРасходы.СуммаРегл) КАК СуммаЗатрат,
		|	СУММА(ПрочиеРасходы.БазаРаспределения) КАК БазаРаспределения,
		|	СУММА(ВЫБОР
		|			КОГДА ПрочиеРасходы.КорНаправлениеДеятельности = &НаправлениеДеятельности
		|				ТОГДА ПрочиеРасходы.БазаРаспределения
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаКонтракта,
		|	СУММА(ВЫБОР
		|			КОГДА ПрочиеРасходы.КорНаправлениеДеятельности = &НаправлениеДеятельности
		|				ТОГДА ПрочиеРасходы.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СебестоимостьКонтракта
		|ПОМЕСТИТЬ ДанныеРегистра
		|ИЗ
		|	Регистраторы КАК Регистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ПО Регистраторы.Регистратор = ПрочиеРасходы.Регистратор
		|ГДЕ
		|	ПрочиеРасходы.Регистратор В
		|			(ВЫБРАТЬ
		|				Т.Регистратор
		|			ИЗ
		|				Регистраторы КАК Т)
		|	И ПрочиеРасходы.СуммаРегл <> 0
		|	И ПрочиеРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПрочиеРасходы.Активность
		|	И ПрочиеРасходы.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	Регистраторы.СчетКт,
		|	ПрочиеРасходы.СтатьяРасходов,
		|	КОНЕЦПЕРИОДА(ПрочиеРасходы.Период, МЕСЯЦ),
		|	ПрочиеРасходы.АналитикаРасходов,
		|	ПрочиеРасходы.Подразделение,
		|	Регистраторы.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетКт,
		|	ПериодМесяц,
		|	СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.СчетКт КАК СчетКт,
		|	ДанныеРегистра.ПериодМесяц КАК ПериодМесяц,
		|	ПРЕДСТАВЛЕНИЕ(ДанныеРегистра.СтатьяРасходов) КАК СтатьяРасходов,
		|	ПРЕДСТАВЛЕНИЕ(ДанныеРегистра.АналитикаРасходов) КАК АналитикаРасходов,
		|	ПРЕДСТАВЛЕНИЕ(ДанныеРегистра.Подразделение) КАК Подразделение,
		|	ДанныеРегистра.СуммаЗатрат КАК СуммаЗатрат,
		|	ДанныеРегистра.БазаРаспределения КАК БазаРаспределения,
		|	ДанныеРегистра.СуммаКонтракта КАК СуммаКонтракта,
		|	ДанныеРегистра.СебестоимостьКонтракта КАК СебестоимостьКонтракта
		|ИЗ
		|	ДанныеРегистра КАК ДанныеРегистра
		|ИТОГИ
		|	СУММА(СуммаЗатрат),
		|	СУММА(БазаРаспределения),
		|	СУММА(СуммаКонтракта),
		|	СУММА(СебестоимостьКонтракта)
		|ПО
		|	СчетКт,
		|	ПериодМесяц";
	
	МассивСчетов = СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетов, СчетаВИерархии(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы));

	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчета.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);

	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область Приложение2

// Сформировать приложение2.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  ТабличныйДокумент
//  
Функция СформироватьПриложение2(ПараметрыОтчета)

	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху = 20;
	ДокументРезультат.ПолеСнизу = 20;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 10;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеРасходовПриКазначейскомСопровождении_Приложение2";
	
	Макет = ПолучитьМакет("Приложение2");
	
	ТитульныйЛист = Макет.ПолучитьОбласть("ТитульныйЛист");
	ТитульныйЛист.Параметры.Заполнить(ДанныеЗаполненияШапки(ПараметрыОтчета));
	ДокументРезультат.Вывести(ТитульныйЛист);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателейПриложение2(ПараметрыОтчета);
	ДанныеПоказателей = ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей);
	
	ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
	ЗаполнитьОбластьТаблица(ПараметрыОтчета.НомерПриложения, ОбластьТаблица, ПравилаРасчетаПоказателей, ДанныеПоказателей);
	ДокументРезультат.Вывести(ОбластьТаблица);
	
	Подписи = Макет.ПолучитьОбласть("Подписи");
	Подписи.Параметры.Заполнить(ДанныеЗаполненияПодвала(ПараметрыОтчета));
	ДокументРезультат.Вывести(Подписи);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область Приложение3

// Сформировать приложение3.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  ТабличныйДокумент
//  
Функция СформироватьПриложение3(ПараметрыОтчета)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху = 20;
	ДокументРезультат.ПолеСнизу = 20;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 10;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеРасходовПриКазначейскомСопровождении_Приложение2";
	
	Макет = ПолучитьМакет("Приложение3");

	ТитульныйЛист = Макет.ПолучитьОбласть("ТитульныйЛист");
	ТитульныйЛист.Параметры.Заполнить(ДанныеЗаполненияШапки(ПараметрыОтчета));
	ДокументРезультат.Вывести(ТитульныйЛист);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателейПриложение3(ПараметрыОтчета);
	ДанныеПоказателей = ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей);
	
	ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
	ЗаполнитьОбластьТаблица(ПараметрыОтчета.НомерПриложения, ОбластьТаблица, ПравилаРасчетаПоказателей, ДанныеПоказателей);
	ДокументРезультат.Вывести(ОбластьТаблица);
	
	Подписи = Макет.ПолучитьОбласть("Подписи");
	Подписи.Параметры.Заполнить(ДанныеЗаполненияПодвала(ПараметрыОтчета));
	ДокументРезультат.Вывести(Подписи);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область Приложение4

// Сформировать приложение4.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  ТабличныйДокумент
//  
Функция СформироватьПриложение4(ПараметрыОтчета)

	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху = 20;
	ДокументРезультат.ПолеСнизу = 20;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 10;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеРасходовПриКазначейскомСопровождении_Приложение4";

	Макет = ПолучитьМакет("Приложение4");

	ДанныеЗаполненияШапки = ДанныеЗаполненияШапки(ПараметрыОтчета);

	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ДанныеЗаполненияШапки);
	ДокументРезультат.Вывести(Шапка);
	
	ТаблицаДанных = ТаблицаДанныхПриложения4(ПараметрыОтчета);
	
	КоличествоСтрок = ТаблицаДанных.Количество();
	
	НомерСтроки = 0;
	ИтогоСумма = 0;
	ИтогоПартияСумма = 0;
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки = 1 Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ПерваяСтрока");
			ОбластьСтрока.Параметры.ИдентификаторКонтракта = ДанныеЗаполненияШапки.ИдентификаторКонтракта;
		ИначеЕсли НомерСтроки = КоличествоСтрок Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ПоследняяСтрока");
		Иначе
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		
		МассивПолей = Новый Массив;
		МассивПолей.Добавить(Строка.РегистраторТип);
		
		Если ЗначениеЗаполнено(Строка.Аналитика1) Тогда
			МассивПолей.Добавить(Строка.Аналитика1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Аналитика2) Тогда
			МассивПолей.Добавить(Строка.Аналитика2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Аналитика2) Тогда
			МассивПолей.Добавить(Строка.Аналитика2);
		КонецЕсли;
		
		НаименованиеДокумента = СтрСоединить(МассивПолей, ", ");
		
		ПартияКонтрагент = "";
		Если ЗначениеЗаполнено(Строка.ПартияКонтрагентНаименование) Тогда
			ПартияКонтрагент = Строка.ПартияКонтрагентНаименование;
		Иначе 
			ПартияКонтрагент = Строка.ПартияКонтрагент;
		КонецЕсли;
		
        ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НаименованиеДокумента = НаименованиеДокумента;
		ОбластьСтрока.Параметры.ПартияКонтрагент = ПартияКонтрагент;
		ДокументРезультат.Вывести(ОбластьСтрока);
		
		ИтогоСумма = ИтогоСумма + Строка.Сумма;
		ИтогоПартияСумма = ИтогоПартияСумма + Строка.ПартияСумма;

	КонецЦикла;
	
	ТаблицаИтого = Макет.ПолучитьОбласть("ТаблицаИтого");
	ТаблицаИтого.Параметры.ИтогоСумма = ИтогоСумма;                      
	ТаблицаИтого.Параметры.ИтогоПартияСумма = ИтогоПартияСумма;
	ДокументРезультат.Вывести(ТаблицаИтого);
	
	Подписи = Макет.ПолучитьОбласть("Подписи");
	Подписи.Параметры.Заполнить(ДанныеЗаполненияПодвала(ПараметрыОтчета));
	ДокументРезультат.Вывести(Подписи);
	
	Возврат ДокументРезультат;
	
КонецФункции

// Таблица данных приложения4.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//  
Функция ТаблицаДанныхПриложения4(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПорядокОтражения.Организация КАК Организация,
		|	ПорядокОтражения.АналитикаУчета КАК АналитикаУчета,
		|	ПорядокОтражения.МестоУчета КАК МестоУчета,
		|	ПорядокОтражения.ВидСчета КАК ВидСчета,
		|	ПорядокОтражения.СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ ПорядокОтраженияНаСчетахУчета
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтражения
		|ГДЕ
		|	ПорядокОтражения.ВидСчета В (&ВидыСчетов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПорядокОтражения.Организация,
		|	ПорядокОтражения.АналитикаУчета,
		|	ПорядокОтражения.МестоУчета,
		|	ВидСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.Партия КАК Партия,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
		|ПОМЕСТИТЬ СебестоимостьРасход
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоМестуУчета
		|		ПО (НастройкиПоМестуУчета.Организация = СебестоимостьТоваров.Организация)
		|		И (НастройкиПоМестуУчета.МестоУчета = СебестоимостьТоваров.АналитикаУчетаНоменклатуры.МестоХранения)
		|		И (НастройкиПоМестуУчета.АналитикаУчета = СебестоимостьТоваров.ВидЗапасов.ГруппаФинансовогоУчета)
		|		И (НастройкиПоМестуУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
		|		ПО (НастройкиПоОрганизации.Организация = НастройкиПоМестуУчета.Организация)
		|		И (НастройкиПоОрганизации.АналитикаУчета = СебестоимостьТоваров.ВидЗапасов.ГруппаФинансовогоУчета)
		|		И (НастройкиПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО)
		|		И (НастройкиПоОрганизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
		|		ПО (НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И (НастройкиПоАналитике.АналитикаУчета = СебестоимостьТоваров.ВидЗапасов.ГруппаФинансовогоУчета)
		|		И (НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО)
		|		И (НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе))
		|ГДЕ
		|	СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И СебестоимостьТоваров.Организация = &Организация
		|	И СебестоимостьТоваров.РазделУчета В (&РазделыРасходаСебестоимости)
		|	И СебестоимостьТоваров.ИдентификаторФинЗаписи <> """"
		|	И ЕСТЬNULL(НастройкиПоМестуУчета.СчетУчета, ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета,
		|		ЕСТЬNULL(НастройкиПоАналитике.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)))) В (&СчетаКТСебестоимости)
		|	И СебестоимостьТоваров.Активность
		|	И СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи,
		|	СебестоимостьТоваров.Партия,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.АналитикаУчетаПартий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия,
		|	ИдентификаторФинЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.Регистратор КАК Регистратор,
		|	СебестоимостьТоваров.Организация КАК Организация,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.Партия КАК Партия,
		|	СУММА(СебестоимостьТоваров.Количество) КАК Количество,
		|	СУММА(СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл +
		|		СебестоимостьТоваров.ТрудозатратыРегл + СебестоимостьТоваров.ПостатейныеПостоянныеРегл +
		|		СебестоимостьТоваров.ПостатейныеПеременныеРегл) КАК Сумма,
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
		|ПОМЕСТИТЬ СебестоимостьПриход
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СебестоимостьТоваров.Организация = &Организация
		|	И СебестоимостьТоваров.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		|	И СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности = &НаправлениеДеятельности
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.Регистратор,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.Партия,
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи,
		|	СебестоимостьТоваров.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия,
		|	ИдентификаторФинЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьПриход.Регистратор КАК Регистратор,
		|	СебестоимостьПриход.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СебестоимостьРасход.Партия КАК Партия,
		|	СебестоимостьРасход.АналитикаУчетаНоменклатуры КАК ПартияАналитикаУчетаНоменклатуры,
		|	СебестоимостьРасход.АналитикаУчетаПартий КАК ПартияАналитикаУчетаПартий,
		|	СебестоимостьПриход.Количество КАК Количество,
		|	СебестоимостьПриход.Сумма КАК Сумма
		|ПОМЕСТИТЬ Товары_Себестоимость
		|ИЗ
		|	СебестоимостьПриход КАК СебестоимостьПриход
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СебестоимостьРасход КАК СебестоимостьРасход
		|		ПО СебестоимостьПриход.ИдентификаторФинЗаписи = СебестоимостьРасход.ИдентификаторФинЗаписи
		|		И СебестоимостьПриход.Партия = СебестоимостьРасход.Партия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	ПартияАналитикаУчетаНоменклатуры,
		|	ПартияАналитикаУчетаПартий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыФинансовогоУчетаДоходовРасходов.Ссылка КАК ГруппаФинансовогоУчета,
		|	ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета,
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) КАК СчетУчета
		|ПОМЕСТИТЬ ГФУРасходов
		|ИЗ
		|	Справочник.ГруппыФинансовогоУчетаДоходовРасходов КАК ГруппыФинансовогоУчетаДоходовРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
		|		ПО (НастройкиПоОрганизации.Организация = &Организация)
		|		И (НастройкиПоОрганизации.АналитикаУчета = ГруппыФинансовогоУчетаДоходовРасходов.Ссылка)
		|		И (НастройкиПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО)
		|		И (НастройкиПоОрганизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
		|		ПО (НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И (НастройкиПоАналитике.АналитикаУчета = ГруппыФинансовогоУчетаДоходовРасходов.Ссылка)
		|		И (НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО)
		|		И (НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы))
		|ГДЕ
		|	ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета,
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))) В (&СчетаРасходов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГруппаФинансовогоУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходы.Регистратор КАК Регистратор,
		|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
		|	ПрочиеРасходы.СуммаРегл КАК Сумма,
		|	ПрочиеРасходы.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ГФУРасходов.СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ ПриходОС
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГФУРасходов КАК ГФУРасходов
		|		ПО ПрочиеРасходы.СтатьяРасходов.ГруппаФинансовогоУчетаРегл = ГФУРасходов.ГруппаФинансовогоУчета
		|ГДЕ
		|	ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|	И ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПрочиеРасходы.Организация = &Организация
		|	И ПрочиеРасходы.ИдентификаторФинЗаписи <> """"
		|	И ГФУРасходов.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию))
		|	И ПрочиеРасходы.Активность
		|	И ПрочиеРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПрочиеРасходы.НаправлениеДеятельности = &НаправлениеДеятельности
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторФинЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	СебестоимостьТоваров.Партия КАК Партия,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
		|ПОМЕСТИТЬ РасходОС_Себестоимость
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И СебестоимостьТоваров.Организация = &Организация
		|	И СебестоимостьТоваров.РазделУчета В (&РазделыРасходаСебестоимости)
		|	И СебестоимостьТоваров.ИдентификаторФинЗаписи <> """"
		|	И СебестоимостьТоваров.Активность
		|	И СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.ИдентификаторФинЗаписи,
		|	СебестоимостьТоваров.Партия,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.АналитикаУчетаПартий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторФинЗаписи,
		|	АналитикаУчетаНоменклатуры,
		|	АналитикаУчетаПартий,
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходОС.Регистратор КАК Регистратор,
		|	ПриходОС.СтатьяРасходов КАК СтатьяРасходов,
		|	ПриходОС.Сумма КАК Сумма,
		|	РасходОС.Партия КАК Партия,
		|	РасходОС.АналитикаУчетаНоменклатуры КАК ПартияАналитикаУчетаНоменклатуры,
		|	РасходОС.АналитикаУчетаПартий КАК ПартияАналитикаУчетаПартий
		|ПОМЕСТИТЬ ОС_Себестоимость
		|ИЗ
		|	РасходОС_Себестоимость КАК РасходОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходОС КАК ПриходОС
		|		ПО РасходОС.ИдентификаторФинЗаписи = ПриходОС.ИдентификаторФинЗаписи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партия,
		|	ПартияАналитикаУчетаНоменклатуры,
		|	ПартияАналитикаУчетаПартий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
		|ПОМЕСТИТЬ РасходРасчетыСПоставщиками
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
		|	И РасчетыСПоставщиками.ИдентификаторФинЗаписи <> """"
		|	И РасчетыСПоставщиками.Активность
		|	И РасчетыСПоставщиками.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.ИдентификаторФинЗаписи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторФинЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходОС.Регистратор КАК Регистратор,
		|	ПриходОС.АналитикаРасходов КАК АналитикаРасходов,
		|	ПриходОС.СтатьяРасходов КАК СтатьяРасходов,
		|	ПриходОС.Сумма КАК Сумма,
		|	ПриходОС.Регистратор КАК Партия,
		|	ПриходОС.Сумма КАК ПартияСумма
		|ПОМЕСТИТЬ ОС_Расчеты
		|ИЗ
		|	РасходРасчетыСПоставщиками КАК РасходРасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходОС КАК ПриходОС
		|		ПО РасходРасчетыСПоставщиками.ИдентификаторФинЗаписи = ПриходОС.ИдентификаторФинЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходы.Регистратор КАК Регистратор,
		|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходы.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ПрочиеРасходы.СуммаРегл КАК Сумма,
		|	ПрочиеРасходы.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ГФУРасходов.СчетУчета КАК СчетУчета,
		|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов
		|ПОМЕСТИТЬ ПриходНМА
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГФУРасходов КАК ГФУРасходов
		|		ПО ПрочиеРасходы.СтатьяРасходов.ГруппаФинансовогоУчетаРегл = ГФУРасходов.ГруппаФинансовогоУчета
		|ГДЕ
		|	ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|	И ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПрочиеРасходы.Организация = &Организация
		|	И ПрочиеРасходы.ИдентификаторФинЗаписи <> """"
		|	И ГФУРасходов.СчетУчета В ИЕРАРХИИ (&СчетаНМАИВнеоборотныхАктивов)
		|	И ПрочиеРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПрочиеРасходы.НаправлениеДеятельности = &НаправлениеДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходНМА.Регистратор КАК Регистратор,
		|	ПриходНМА.СтатьяРасходов КАК СтатьяРасходов,
		|	ПриходНМА.Сумма КАК Сумма,
		|	ПриходНМА.Регистратор КАК Партия,
		|	ПриходНМА.Сумма КАК ПартияСумма,
		|	ПриходНМА.АналитикаРасходов КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ПриходНМА.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.хозрасчетный.ПриобретениеНематериальныхАктивов))
		|			ТОГДА ""0300""
		|		ИНАЧЕ ""0410""
		|	КОНЕЦ КАК УкрупненныйКод
		|ПОМЕСТИТЬ НМА
		|ИЗ
		|	РасходРасчетыСПоставщиками КАК РасходРасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходНМА КАК ПриходНМА
		|		ПО (ПриходНМА.ИдентификаторФинЗаписи = РасходРасчетыСПоставщиками.ИдентификаторФинЗаписи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары_Себестоимость.Регистратор КАК Регистратор,
		|	Товары_Себестоимость.АналитикаУчетаНоменклатуры.Номенклатура КАК Аналитика1,
		|	Товары_Себестоимость.АналитикаУчетаНоменклатуры.Характеристика КАК Аналитика2,
		|	Товары_Себестоимость.АналитикаУчетаНоменклатуры.Серия КАК Аналитика3,
		|	Товары_Себестоимость.Количество КАК Количество,
		|	Товары_Себестоимость.Сумма КАК Сумма,
		|	ЕСТЬNULL(СебестоимостьТоваров.Регистратор, Товары_Себестоимость.Партия) КАК Партия,
		|	ЕСТЬNULL(СебестоимостьТоваров.Количество, Товары_Себестоимость.Количество) КАК ПартияКоличество,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.Регистратор ЕСТЬ NULL
		|			ТОГДА Товары_Себестоимость.Сумма
		|		ИНАЧЕ СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл +
		|			СебестоимостьТоваров.ТрудозатратыРегл + СебестоимостьТоваров.ПостатейныеПостоянныеРегл +
		|			СебестоимостьТоваров.ПостатейныеПеременныеРегл
		|	КОНЕЦ КАК ПартияСумма,
		|	""0300"" КАК УкрупненныйКод,
		|	1 КАК Поле1
		|ПОМЕСТИТЬ ПредварительныеДанные
		|ИЗ
		|	Товары_Себестоимость КАК Товары_Себестоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|		ПО Товары_Себестоимость.Партия = СебестоимостьТоваров.Регистратор
		|		И Товары_Себестоимость.ПартияАналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
		|		И Товары_Себестоимость.ПартияАналитикаУчетаПартий = СебестоимостьТоваров.АналитикаУчетаПартий
		|		И (СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (СебестоимостьТоваров.Организация = &Организация)
		|		И (СебестоимостьТоваров.Активность)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОС_Себестоимость.Регистратор,
		|	ОС_Себестоимость.СтатьяРасходов,
		|	NULL,
		|	NULL,
		|	СебестоимостьТоваров.Количество,
		|	ОС_Себестоимость.Сумма,
		|	ЕСТЬNULL(СебестоимостьТоваров.Регистратор, ОС_Себестоимость.Регистратор),
		|	1,
		|	ВЫБОР
		|		КОГДА СебестоимостьТоваров.Регистратор ЕСТЬ NULL
		|			ТОГДА ОС_Себестоимость.Сумма
		|		ИНАЧЕ СебестоимостьТоваров.СтоимостьРегл + СебестоимостьТоваров.ДопРасходыРегл +
		|			СебестоимостьТоваров.ТрудозатратыРегл + СебестоимостьТоваров.ПостатейныеПостоянныеРегл +
		|			СебестоимостьТоваров.ПостатейныеПеременныеРегл
		|	КОНЕЦ,
		|	""0300"",
		|	2
		|ИЗ
		|	ОС_Себестоимость КАК ОС_Себестоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|		ПО ОС_Себестоимость.Партия = СебестоимостьТоваров.Регистратор
		|		И ОС_Себестоимость.ПартияАналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
		|		И ОС_Себестоимость.ПартияАналитикаУчетаПартий = СебестоимостьТоваров.АналитикаУчетаПартий
		|		И (СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (СебестоимостьТоваров.Организация = &Организация)
		|		И (СебестоимостьТоваров.Активность)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОС_Расчеты.Регистратор,
		|	ОС_Расчеты.АналитикаРасходов,
		|	NULL,
		|	NULL,
		|	1,
		|	ОС_Расчеты.Сумма,
		|	ОС_Расчеты.Партия,
		|	1,
		|	ОС_Расчеты.ПартияСумма,
		|	""0300"",
		|	3
		|ИЗ
		|	ОС_Расчеты КАК ОС_Расчеты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НМА.Регистратор,
		|	НМА.АналитикаРасходов,
		|	NULL,
		|	NULL,
		|	1,
		|	НМА.Сумма,
		|	НМА.Партия,
		|	1,
		|	НМА.ПартияСумма,
		|	НМА.УкрупненныйКод,
		|	4
		|ИЗ
		|	НМА КАК НМА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредварительныеДанные.УкрупненныйКод КАК УкрупненныйКод,
		|	ТИПЗНАЧЕНИЯ(ПредварительныеДанные.Регистратор) КАК РегистраторТип,
		|	ПредварительныеДанные.Регистратор КАК Регистратор,
		|	ДанныеПервичныхДокументов.НомерРегистратора КАК РегистраторНомер,
		|	ДанныеПервичныхДокументов.ДатаРегистратора КАК РегистраторДата,
		|	ПредварительныеДанные.Аналитика1 КАК Аналитика1,
		|	ПредварительныеДанные.Аналитика2 КАК Аналитика2,
		|	ПредварительныеДанные.Аналитика3 КАК Аналитика3,
		|	ПредварительныеДанные.Количество КАК Количество,
		|	ПредварительныеДанные.Сумма КАК Сумма,
		|	ПредварительныеДанные.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.НаименованиеПервичногоДокумента = """"
		|			ТОГДА ТИПЗНАЧЕНИЯ(ПредварительныеДанные.Партия)
		|		ИНАЧЕ РеестрДокументов.НаименованиеПервичногоДокумента
		|	КОНЕЦ КАК ПартияТип,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РеестрДокументов.ДатаДокументаИБ
		|		ИНАЧЕ РеестрДокументов.ДатаПервичногоДокумента
		|	КОНЕЦ КАК ПартияДата,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.НомерПервичногоДокумента = """"
		|			ТОГДА РеестрДокументов.НомерДокументаИБ
		|		ИНАЧЕ РеестрДокументов.НомерПервичногоДокумента
		|	КОНЕЦ КАК ПартияНомер,
		|	ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты) КАК ПартияКонтрагент,
		|	ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты).НаименованиеПолное КАК
		|		ПартияКонтрагентНаименование,
		|	ПредварительныеДанные.ПартияКоличество КАК ПартияКоличество,
		|	ПредварительныеДанные.ПартияСумма КАК ПартияСумма
		|ИЗ
		|	ПредварительныеДанные КАК ПредварительныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ПредварительныеДанные.Регистратор = ДанныеПервичныхДокументов.Документ
		|		И (ДанныеПервичныхДокументов.Организация = &Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ПредварительныеДанные.Партия = РеестрДокументов.Ссылка
		|		И (РеестрДокументов.Организация = &Организация)";
	
	
	РазделыРасходаСебестоимости = Новый Массив;
	РазделыРасходаСебестоимости.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах);
	РазделыРасходаСебестоимости.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию);
	РазделыРасходаСебестоимости.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику);
	РазделыРасходаСебестоимости.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыПереданныеПартнерам);
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	СчетаРасходов = СчетаВИерархии(СчетаРасходов);
	
	СчетаКТСебестоимости = Новый Массив;
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.Тара);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СчетаКТСебестоимости.Добавить(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);
	СчетаКТСебестоимости = СчетаВИерархии(СчетаКТСебестоимости);
	
	СчетаНМАИВнеоборотныхАктивов = Новый Массив;
	СчетаНМАИВнеоборотныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	СчетаНМАИВнеоборотныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	СчетаНМАИВнеоборотныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	СчетаНМАИВнеоборотныхАктивов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	
	ВидыСчетов = Новый Массив;
	ВидыСчетов.Добавить(Перечисления.ВидыСчетовРеглУчета.НаСкладе);
	ВидыСчетов.Добавить(Перечисления.ВидыСчетовРеглУчета.Расходы);

	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчета.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("РазделыРасходаСебестоимости", РазделыРасходаСебестоимости);
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	Запрос.УстановитьПараметр("СчетаКТСебестоимости", СчетаКТСебестоимости);
	Запрос.УстановитьПараметр("СчетаНМАИВнеоборотныхАктивов", СчетаНМАИВнеоборотныхАктивов);
	Запрос.УстановитьПараметр("ВидыСчетов", ВидыСчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Данные заполнения шапки.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  Структура
//  
Функция ДанныеЗаполненияШапки(ПараметрыОтчета)	
	
	НачалоПериода = ПараметрыОтчета.НачалоПериода;
	КонецПериода = ПараметрыОтчета.КонецПериода;
	Организация = ПараметрыОтчета.Организация;
	НаправлениеДеятельности = ПараметрыОтчета.НаправлениеДеятельности;
	НомерПриложения = ПараметрыОтчета.НомерПриложения;
	ДатаФормирования = ПараметрыОтчета.ДатаФормирования;
	
	ДатаОтбора = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаОтбора);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеГосКонтракта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаправлениеДеятельности, "ГосударственныйКонтракт, ДатаЗаключенияКонтракта");
	
	МесяцыПрописью = МесяцыПрописью();
	
	Данные = Новый Структура;
	
	Данные.Вставить("ДатаФормированияЧисло", Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=dd"));
	Данные.Вставить("ДатаФормированияМесяц", МесяцыПрописью.Получить(Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=ММ")));
	Данные.Вставить("ДатаФормированияГод", Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=yy"));
	
	Данные.Вставить("НачалоПериода", Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
	Данные.Вставить("КонецПериода", Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy"));

	Данные.Вставить("НачалоПериодаЧисло", Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd"));
	Данные.Вставить("НачалоПериодаМесяц", Формат(ПараметрыОтчета.НачалоПериода, "ДФ=ММ"));
	Данные.Вставить("НачалоПериодаГод", Формат(ПараметрыОтчета.НачалоПериода, "ДФ=yyyy"));
	
	Данные.Вставить("КонецПериодаЧисло", Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd"));
	Данные.Вставить("КонецПериодаМесяц", Формат(ПараметрыОтчета.КонецПериода, "ДФ=ММ"));
	Данные.Вставить("КонецПериодаГод", Формат(ПараметрыОтчета.КонецПериода, "ДФ=yyyy"));

	Данные.Вставить("НаименованиеОрганизации", СведенияОЮрФизЛице.НаименованиеДляПечатныхФорм);
	Данные.Вставить("ИНН", СведенияОЮрФизЛице.ИНН);
	Данные.Вставить("КПП", СведенияОЮрФизЛице.КПП);
	
	Данные.Вставить("ГосКонтрактДата", Формат(ДанныеГосКонтракта.ДатаЗаключенияКонтракта, "ДФ=dd.MM.yyyy"));
	Данные.Вставить("ИдентификаторКонтракта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеГосКонтракта.ГосударственныйКонтракт, "НомерИГК"));

	Возврат Данные;
	
КонецФункции

// Данные заполнения подвала.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
// 
// Возвращаемое значение:
//  Структура
//  
Функция ДанныеЗаполненияПодвала(ПараметрыОтчета)	
	
	ДатаПодписания = ПараметрыОтчета.ДатаПодписания;
	Руководитель = ПараметрыОтчета.Руководитель;
	
	МесяцыПрописью = МесяцыПрописью();
	
	Данные = Новый Структура;
	Данные.Вставить("Должность", Руководитель.Должность);
	Данные.Вставить("РасшифровкаПодписи", Руководитель);
	Данные.Вставить("ДатаПодписанияЧисло", Формат(ПараметрыОтчета.ДатаПодписания, "ДФ=д"));
	Данные.Вставить("ДатаПодписанияМесяц", МесяцыПрописью.Получить(Формат(ПараметрыОтчета.ДатаПодписания, "ДФ=ММ")));
	Данные.Вставить("ДатаПодписанияГод", Формат(ПараметрыОтчета.ДатаПодписания, "ДФ=yy"));

	Возврат Данные;
КонецФункции

// Текст запроса источников данных.
// 
// Возвращаемое значение:
//  Строка
//  
Функция ТекстЗапросаИсточниковДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств КАК
	|		НаправлениеРасходованияЦелевыхСредств,
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств.Код КАК ДетализированныйКодРасходов,
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств.УкрупненныйКодРасходов КАК
	|		УкрупненныйКодРасходов,
	|	СУММА(ПлановыеЗатратыПоГосударственнымКонтрактам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ КассаПлан
	|ИЗ
	|	РегистрСведений.ПлановыеЗатратыПоГосударственнымКонтрактам КАК ПлановыеЗатратыПоГосударственнымКонтрактам
	|ГДЕ
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеДеятельности = &ОтборНаправлениеДеятельности
	|	И ПлановыеЗатратыПоГосударственнымКонтрактам.Организация = &ОтборОрганизация
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств,
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств.Код,
	|	ПлановыеЗатратыПоГосударственнымКонтрактам.НаправлениеРасходованияЦелевыхСредств.УкрупненныйКодРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДетализированныйКодРасходов,
	|	УкрупненныйКодРасходов,
	|	НаправлениеРасходованияЦелевыхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагент.Период КАК Период,
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор КАК Регистратор,
	|	ДвиженияДенежныеСредстваКонтрагент.СтавкаНДС.ПеречислениеСтавкаНДС КАК СтавкаНДС,
	|	ДвиженияДенежныеСредстваКонтрагент.СуммаОплатыРегл КАК СуммаОплаты,
	|	ДвиженияДенежныеСредстваКонтрагент.СуммаНДСРегл КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ДвиженияДенежныеСредстваКонтрагент.СтатьяЦелевыхСредств КАК
	|		Справочник.НаправленияРасходованияЦелевыхСредств) КАК СтатьяЦелевыхСредств,
	|	ТИПЗНАЧЕНИЯ(ДвиженияДенежныеСредстваКонтрагент.Регистратор) КАК ТипРегистратора
	|ПОМЕСТИТЬ ДанныеОбороты
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
	|ГДЕ
	|	ДвиженияДенежныеСредстваКонтрагент.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДвиженияДенежныеСредстваКонтрагент.НаправлениеДеятельностиДС = &ОтборНаправлениеДеятельности
	|	И ДвиженияДенежныеСредстваКонтрагент.Организация = &ОтборОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Период,
	|	ДвиженияДенежныеСредстваДоходыРасходы.Регистратор,
	|	ДвиженияДенежныеСредстваДоходыРасходы.СтавкаНДС.ПеречислениеСтавкаНДС,
	|	ДвиженияДенежныеСредстваДоходыРасходы.СуммаРегл,
	|	ДвиженияДенежныеСредстваДоходыРасходы.СуммаНДСРегл,
	|	ВЫРАЗИТЬ(ДвиженияДенежныеСредстваДоходыРасходы.СтатьяЦелевыхСредств КАК
	|		Справочник.НаправленияРасходованияЦелевыхСредств),
	|	ТИПЗНАЧЕНИЯ(ДвиженияДенежныеСредстваДоходыРасходы.Регистратор)
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияДенежныеСредстваДоходыРасходы
	|ГДЕ
	|	ДвиженияДенежныеСредстваДоходыРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДвиженияДенежныеСредстваДоходыРасходы.НаправлениеДеятельностиДС = &ОтборНаправлениеДеятельности
	|	И ДвиженияДенежныеСредстваДоходыРасходы.Организация = &ОтборОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредств.Период,
	|	ДвиженияДенежныхСредств.Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка),
	|	ДвиженияДенежныхСредств.СуммаРегл,
	|	0,
	|	ВЫРАЗИТЬ(ДвиженияДенежныхСредств.СтатьяЦелевыхСредств КАК Справочник.НаправленияРасходованияЦелевыхСредств),
	|	ТИПЗНАЧЕНИЯ(ДвиженияДенежныхСредств.Регистратор)
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДвиженияДенежныхСредств
	|ГДЕ
	|	ДвиженияДенежныхСредств.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДвиженияДенежныхСредств.НаправлениеДеятельности = &ОтборНаправлениеДеятельности
	|	И ДвиженияДенежныхСредств.Организация = &ОтборОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2 КАК КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3 КАК КорСубконто3,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор КАК КорНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК КорПодразделение,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК ОборотКт
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор,,, Организация = &ОтборОрганизация
	|	И (НаправлениеДеятельности = &ОтборНаправлениеДеятельности
	|	ИЛИ НаправлениеДеятельностиКор = &ОтборНаправлениеДеятельности),
	|	НЕ КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов)),) КАК ХозрасчетныйОбороты
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКассаПланПоПравилу(Правило, ПараметрыОтчета, Запрос)
	
	Фрагменты = Новый Массив;
	
	Шаблон =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей1%"" КАК СТРОКА(3)) КАК ГруппаПоказателей1,
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей2%"" КАК СТРОКА(3)) КАК ГруппаПоказателей2,
	|	ВЫРАЗИТЬ(""%КодПоказателя%"" КАК СТРОКА(3)) КАК КодПоказателя,
	|	ВЫРАЗИТЬ(""%Графа%"" КАК СТРОКА(50)) КАК Графа,
	|	ВЫРАЗИТЬ(""%ИсточникДанных%"" КАК СТРОКА(50)) КАК ИсточникДанных,
	|	&ИндексОборота КАК ИндексОборота,
	|	ВЫРАЗИТЬ(&ЗаголовокОборот КАК СТРОКА(100)) КАК Оборот,
	|	&Множитель КАК Множитель,
	|	СУММА(&Множитель * КассаПлан.Сумма) КАК Сумма
	|ИЗ
	|	КассаПлан КАК КассаПлан
	|ГДЕ
	|	&ОтборУкрупненныеКоды
	|	И &ОтборДетализированныеКоды
	|ИМЕЮЩИЕ
	|	СУММА(КассаПлан.Сумма) <> 0";
	
	КодПоказателя = Правило.КодПоказателя;
	Графа = Правило.Графа;
	ИсточникДанных = Правило.ИсточникДанных;
	
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей1%", Правило.ГруппаПоказателей1);
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей2%", Правило.ГруппаПоказателей2);
	Шаблон = СтрЗаменить(Шаблон, "%КодПоказателя%", КодПоказателя);
	Шаблон = СтрЗаменить(Шаблон, "%Графа%", Графа);
	Шаблон = СтрЗаменить(Шаблон, "%ИсточникДанных%", ИсточникДанных);
	
	ОтборОборотов = Правило.ОтборОборотов; // СписокЗначений -

	Для каждого Оборот Из ОтборОборотов Цикл
		
		ТекстОборот = Шаблон;                                
		
		ИндексОборота = ОтборОборотов.Индекс(Оборот);
		
		Параметр = СтрШаблон("ИндексОборота_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ИндексОборота", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, ИндексОборота);
		
		Параметр = СтрШаблон("ЗаголовокОборот_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ЗаголовокОборот", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Представление);

		Параметр = СтрШаблон("Множитель_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Множитель", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Множитель); 
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.УкрупненныеКоды) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборУкрупненныеКоды", "ИСТИНА // ОтборУкрупненныеКоды");
		Иначе
			Параметр = СтрШаблон("УкрупненныеКоды__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборУкрупненныеКоды = СтрШаблон("КассаПлан.УкрупненныйКодРасходов В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборУкрупненныеКоды", ОтборУкрупненныеКоды);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.УкрупненныеКоды);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ДетализированныеКоды) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборДетализированныеКоды", "ИСТИНА // ОтборДетализированныеКоды");
		Иначе
			Параметр = СтрШаблон("ДетализированныеКоды__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборДетализированныеКоды = СтрШаблон("КассаПлан.ДетализированныйКодРасходов В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборДетализированныеКоды", ОтборДетализированныеКоды);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ДетализированныеКоды);
		КонецЕсли;
		
		Фрагменты.Добавить(ТекстОборот);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(Фрагменты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКассаФактПоПравилу(Правило, ПараметрыОтчета, Запрос)
	
	Фрагменты = Новый Массив;
	
	Шаблон =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей1%"" КАК СТРОКА(3)) КАК ГруппаПоказателей1,
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей2%"" КАК СТРОКА(3)) КАК ГруппаПоказателей2,
	|	ВЫРАЗИТЬ(""%КодПоказателя%"" КАК СТРОКА(3)) КАК КодПоказателя,
	|	ВЫРАЗИТЬ(""%Графа%"" КАК СТРОКА(50)) КАК Графа,
	|	ВЫРАЗИТЬ(""%ИсточникДанных%"" КАК СТРОКА(50)) КАК ИсточникДанных,
	|	&ИндексОборота КАК ИндексОборота,
	|	ВЫРАЗИТЬ(&ЗаголовокОборот КАК СТРОКА(100)) КАК Оборот,
	|	&Множитель КАК Множитель,
	|	СУММА(&Множитель * &ИмяРесурса) КАК Сумма
	|ИЗ
	|	ДанныеОбороты КАК ДанныеОбороты
	|ГДЕ
	|	&ОтборТипРегистратора
	|	И &ОтборСтавкаНДС
	|	И &ОтборУкрупненныеКоды
	|	И &ОтборДетализированныеКоды
	|ИМЕЮЩИЕ
	|	СУММА(&ИмяРесурса) <> 0";
	
	КодПоказателя = Правило.КодПоказателя;
	Графа = Правило.Графа;
	ИсточникДанных = Правило.ИсточникДанных;
	
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей1%", Правило.ГруппаПоказателей1);
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей2%", Правило.ГруппаПоказателей2);
	Шаблон = СтрЗаменить(Шаблон, "%КодПоказателя%", КодПоказателя);
	Шаблон = СтрЗаменить(Шаблон, "%Графа%", Графа);
	Шаблон = СтрЗаменить(Шаблон, "%ИсточникДанных%", ИсточникДанных);
	
	ОтборОборотов = Правило.ОтборОборотов; // СписокЗначений -

	Для каждого Оборот Из ОтборОборотов Цикл
		
		ТекстОборот = Шаблон;                                
		
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ИмяРесурса", "ДанныеОбороты." + Оборот.Значение.ИмяРесурса);
		
		ИндексОборота = ОтборОборотов.Индекс(Оборот);
		
		Параметр = СтрШаблон("ИндексОборота_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ИндексОборота", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, ИндексОборота);
		
		Параметр = СтрШаблон("ЗаголовокОборот_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ЗаголовокОборот", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Представление);

		Параметр = СтрШаблон("Множитель_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Множитель", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Множитель); 
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ТипРегистратора) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборТипРегистратора", "ИСТИНА // ОтборТипРегистратора");
		Иначе
			Параметр = СтрШаблон("ТипРегистратора__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборТипРегистратора = СтрШаблон("ДанныеОбороты.ТипРегистратора = &%1", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборТипРегистратора", ОтборТипРегистратора);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипРегистратора);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Оборот.Значение.СтавкаНДС) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСтавкаНДС", "ИСТИНА // ОтборСтавкаНДС");
		Иначе
			Параметр = СтрШаблон("СтавкаНДС__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборСтавкаНДС = СтрШаблон("ДанныеОбороты.СтавкаНДС В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСтавкаНДС", ОтборСтавкаНДС);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.СтавкаНДС);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Оборот.Значение.УкрупненныеКоды) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборУкрупненныеКоды", "ИСТИНА // ОтборУкрупненныеКоды");
		Иначе
			Параметр = СтрШаблон("УкрупненныеКоды__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборУкрупненныеКоды = СтрШаблон("ДанныеОбороты.СтатьяЦелевыхСредств.УкрупненныйКодРасходов В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборУкрупненныеКоды", ОтборУкрупненныеКоды);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.УкрупненныеКоды);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ДетализированныеКоды) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборДетализированныеКоды", "ИСТИНА // ОтборДетализированныеКоды");
		Иначе
			Параметр = СтрШаблон("ДетализированныеКоды__%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборДетализированныеКоды = СтрШаблон("ДанныеОбороты.СтатьяЦелевыхСредств.Код В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборДетализированныеКоды", ОтборДетализированныеКоды);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ДетализированныеКоды);
		КонецЕсли;
		
		Фрагменты.Добавить(ТекстОборот);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(Фрагменты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаБухгалтерскогоУчетаПоПравилу(Правило, ПараметрыОтчета, Запрос)
	
	Фрагменты = Новый Массив;
	
	Шаблон =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей1%"" КАК СТРОКА(3)) КАК ГруппаПоказателей1,
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей2%"" КАК СТРОКА(3)) КАК ГруппаПоказателей2,
	|	ВЫРАЗИТЬ(""%КодПоказателя%"" КАК СТРОКА(3)) КАК КодПоказателя,
	|	ВЫРАЗИТЬ(""%Графа%"" КАК СТРОКА(50)) КАК Графа,
	|	ВЫРАЗИТЬ(""%ИсточникДанных%"" КАК СТРОКА(50)) КАК ИсточникДанных,
	|	&ИндексОборота КАК ИндексОборота,
	|	ВЫРАЗИТЬ(&ЗаголовокОборот КАК СТРОКА(100)) КАК Оборот,
	|	&Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт))
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт))
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Счет В(&Счет)
	|	И &ОтборСубконто1
	|	И &ОтборСубконто2
	|	И &ОтборКорСчет
	|	И &ОтборКорСубконто1
	|	И &ОтборНаправлениеДеятельности
	|	И &ОтборКорНаправлениеДеятельности
	|	И &ОтборИсключаемыйКорСчет
	|	И &ОтборИсключаемыйКорНаправлениеДеятельности
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт))
	|					ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт))
	|					ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)";
	
	КодПоказателя = Правило.КодПоказателя;
	Графа = Правило.Графа;
	ИсточникДанных = Правило.ИсточникДанных;

	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей1%", Правило.ГруппаПоказателей1);
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей2%", Правило.ГруппаПоказателей2);
	Шаблон = СтрЗаменить(Шаблон, "%КодПоказателя%", КодПоказателя);
	Шаблон = СтрЗаменить(Шаблон, "%Графа%", Графа);
	Шаблон = СтрЗаменить(Шаблон, "%ИсточникДанных%", ИсточникДанных);
	
	ОтборОборотов = Правило.ОтборОборотов; // СписокЗначений -
	
	Для каждого Оборот Из ОтборОборотов Цикл
		
		ТекстОборот = Шаблон;
		
		ИндексОборота = ОтборОборотов.Индекс(Оборот);
		
		Параметр = СтрШаблон("ИндексОборота_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ИндексОборота", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, ИндексОборота);
		
		Параметр = СтрШаблон("ЗаголовокОборот_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ЗаголовокОборот", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Представление);
		
		Параметр = СтрШаблон("Множитель_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Множитель", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Множитель); 
		
		Параметр = СтрШаблон("ТипИтогов_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ТипИтогов", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипИтогов); 
		
		Параметр = СтрШаблон("Счет_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Счет", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Счет);
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.Субконто1) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто1", "ИСТИНА // Субконто1");
		Иначе
			Параметр = СтрШаблон("Субконто1_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборСубконто1 = СтрШаблон("ХозрасчетныйОбороты.Субконто1 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто1", ОтборСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Субконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.Субконто2) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто2", "ИСТИНА // Субконто2");
		Иначе
			Параметр = СтрШаблон("Субконто2_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборСубконто2 = СтрШаблон("ХозрасчетныйОбороты.Субконто2 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто2", ОтборСубконто2);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Субконто2);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСчет) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСчет", "ИСТИНА // КорСчет");
		Иначе
			Параметр = СтрШаблон("КорСчет_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборКорСчет = СтрШаблон("ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.КорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСубконто1) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСубконто1", "ИСТИНА // КорСубконто1");
		Иначе
			Параметр = СтрШаблон("КорСубконто1_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборКорСубконто1 = СтрШаблон("ХозрасчетныйОбороты.КорСубконто1 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСубконто1", ОтборКорСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.КорСубконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ИсключаемыйКорСчет) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорСчет", "ИСТИНА // ИсключаемыйКорСчет");
		Иначе
			Параметр = СтрШаблон("ИсключаемыйКорСчет_%1_%2_%3_%4", КодПоказателя, Графа, ИсточникДанных, ИндексОборота);
			ОтборКорСчет = СтрШаблон("НЕ ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.ИсключаемыйКорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.НаправлениеДеятельности) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборНаправлениеДеятельности", "ИСТИНА // НаправлениеДеятельности");
		Иначе
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборНаправлениеДеятельности", "ХозрасчетныйОбороты.НаправлениеДеятельности = &ОтборНаправлениеДеятельности");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорНаправлениеДеятельности) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорНаправлениеДеятельности", "ИСТИНА // КорНаправлениеДеятельности");
		Иначе
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорНаправлениеДеятельности", "ХозрасчетныйОбороты.КорНаправлениеДеятельности = &ОтборНаправлениеДеятельности");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ИсключаемыйКорНаправлениеДеятельности) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорНаправлениеДеятельности", "ИСТИНА // ИсключаемыйКорНаправлениеДеятельности");
		Иначе
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорНаправлениеДеятельности", "ХозрасчетныйОбороты.КорНаправлениеДеятельности <> &ОтборНаправлениеДеятельности");
 		КонецЕсли;

		Фрагменты.Добавить(ТекстОборот);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(Фрагменты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОтборОборотовКассаПлан()
	
	ОтборОборота = Новый Структура();
	ОтборОборота.Вставить("УкрупненныеКоды");
	ОтборОборота.Вставить("ДетализированныеКоды");
	ОтборОборота.Вставить("Множитель", 1);
	
	Возврат ОтборОборота;
	
КонецФункции

Процедура ДобавитьОборотКассаПлан(Правило, ОтборОборота)
	
	Оборот = Новый Структура;
	
	УкрупненныеКоды = ОтборОборота.УкрупненныеКоды;
	ДетализированныеКоды = ОтборОборота.ДетализированныеКоды;
	
	МассивУкрупненныхКодов = Новый Массив;
	Если ЗначениеЗаполнено(УкрупненныеКоды) Тогда
		УкрупненныеКоды = СтрЗаменить(УкрупненныеКоды, " ", "");
		УкрупненныеКоды = СтрЗаменить(УкрупненныеКоды, Символы.ПС, "");
		МассивУкрупненныхКодов = СтрРазделить(УкрупненныеКоды, ",");
	КонецЕсли;
	Оборот.Вставить("УкрупненныеКоды", МассивУкрупненныхКодов);

	МассивДетализированныхКодов = Новый Массив;
	Если ЗначениеЗаполнено(ДетализированныеКоды) Тогда
		ДетализированныеКоды = СтрЗаменить(ДетализированныеКоды, " ", "");
		ДетализированныеКоды = СтрЗаменить(ДетализированныеКоды, Символы.ПС, "");
		МассивДетализированныхКодов = СтрРазделить(ДетализированныеКоды, ", ");
	КонецЕсли;
	Оборот.Вставить("ДетализированныеКоды", МассивДетализированныхКодов);

	Оборот.Вставить("Множитель", ОтборОборота.Множитель);

	МассивПодстрок = Новый Массив;
	Если Оборот.Множитель = -1 Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(-)';
									|en = '(-)'"));
	КонецЕсли;
	МассивПодстрок.Добавить(Перечисления.ТипыИтогов.Оборот);
	Если ЗначениеЗаполнено(Оборот.УкрупненныеКоды) Тогда
		ОтборУкрупненныеКоды = СтрШаблон(НСтр("ru = '(по группам кодов расхода: %1)';
												|en = '(by expense code groups: %1)'"), СтрСоединить(Оборот.УкрупненныеКоды, ","));
		МассивПодстрок.Добавить(ОтборУкрупненныеКоды);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ДетализированныеКоды) Тогда
		ОтборДетализированныеКоды = СтрШаблон(НСтр("ru = '(по кодам расхода: %1)';
													|en = '(by expense codes: %1)'"), СтрСоединить(Оборот.ДетализированныеКоды, ","));
		МассивПодстрок.Добавить(ОтборДетализированныеКоды);
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Правило.ОтборОборотов.Добавить(Оборот, Представление);
	
КонецПроцедуры

Функция ОтборОборотовКассаФакт()
	
	ОтборОборота = Новый Структура();
	ОтборОборота.Вставить("ИмяРесурса");
	ОтборОборота.Вставить("ТипРегистратора");
	ОтборОборота.Вставить("СтавкаНДС");
	ОтборОборота.Вставить("СтатьяЦелевыхСредств");
	
	ОтборОборота.Вставить("УкрупненныеКоды");
	ОтборОборота.Вставить("ДетализированныеКоды");
	ОтборОборота.Вставить("Множитель", 1);
	
	Возврат ОтборОборота;
	
КонецФункции

Процедура ДобавитьОборотКассаФакт(Правило, ОтборОборота)
	
	Оборот = Новый Структура;
	
	Оборот.Вставить("ИмяРесурса",      ОтборОборота.ИмяРесурса);
	Оборот.Вставить("ТипРегистратора", ОтборОборота.ТипРегистратора);
	
	МассивСтавкиНДС = Новый Массив;
	Если ТипЗнч(ОтборОборота.СтавкаНДС) = Тип("Массив") Тогда
		МассивСтавкиНДС =  ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.СтавкаНДС);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.СтавкаНДС) Тогда
		МассивСтавкиНДС.Добавить(ОтборОборота.СтавкаНДС);
	КонецЕсли;
	Оборот.Вставить("СтавкаНДС", МассивСтавкиНДС);
	
	УкрупненныеКоды = ОтборОборота.УкрупненныеКоды;
	ДетализированныеКоды = ОтборОборота.ДетализированныеКоды;
	
	МассивУкрупненныхКодов = Новый Массив;
	Если ЗначениеЗаполнено(УкрупненныеКоды) Тогда
		УкрупненныеКоды = СтрЗаменить(УкрупненныеКоды, " ", "");
		УкрупненныеКоды = СтрЗаменить(УкрупненныеКоды, Символы.ПС, "");
		МассивУкрупненныхКодов = СтрРазделить(УкрупненныеКоды, ",");
	КонецЕсли;
	Оборот.Вставить("УкрупненныеКоды", МассивУкрупненныхКодов);

	МассивДетализированныхКодов = Новый Массив;
	Если ЗначениеЗаполнено(ДетализированныеКоды) Тогда
		ДетализированныеКоды = СтрЗаменить(ДетализированныеКоды, " ", "");
		ДетализированныеКоды = СтрЗаменить(ДетализированныеКоды, Символы.ПС, "");
		МассивДетализированныхКодов = СтрРазделить(ДетализированныеКоды, ", ");
	КонецЕсли;
	Оборот.Вставить("ДетализированныеКоды", МассивДетализированныхКодов);

	Оборот.Вставить("Множитель", ОтборОборота.Множитель);

	МассивПодстрок = Новый Массив;
	Если Оборот.Множитель = -1 Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(-)';
									|en = '(-)'"));
	КонецЕсли;
	МассивПодстрок.Добавить(Перечисления.ТипыИтогов.Оборот);
	Если ЗначениеЗаполнено(Оборот.ИмяРесурса) Тогда
		ИмяРесурса = СтрШаблон(НСтр("ru = '%1';
									|en = '%1'"), Оборот.ИмяРесурса);
		МассивПодстрок.Добавить(ИмяРесурса);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ТипРегистратора) Тогда
		ОтборТипРегистратора = СтрШаблон(НСтр("ru = '(тип регистратора %1)';
												|en = '(recorder type %1)'"), Оборот.ТипРегистратора);
		МассивПодстрок.Добавить(ОтборТипРегистратора);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.СтавкаНДС) Тогда
		ОтборСтавкиНДС = СтрШаблон(НСтр("ru = '(ставки НДС: %1)';
										|en = '(VAT rates: %1)'"), СтрСоединить(Оборот.СтавкаНДС, ","));
		МассивПодстрок.Добавить(ОтборСтавкиНДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.УкрупненныеКоды) Тогда
		ОтборУкрупненныеКоды = СтрШаблон(НСтр("ru = '(по группам кодов расхода: %1)';
												|en = '(by expense code groups: %1)'"), СтрСоединить(Оборот.УкрупненныеКоды, ","));
		МассивПодстрок.Добавить(ОтборУкрупненныеКоды);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ДетализированныеКоды) Тогда
		ОтборДетализированныеКоды = СтрШаблон(НСтр("ru = '(по кодам расхода: %1)';
													|en = '(by expense codes: %1)'"), СтрСоединить(Оборот.ДетализированныеКоды, ","));
		МассивПодстрок.Добавить(ОтборДетализированныеКоды);
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Правило.ОтборОборотов.Добавить(Оборот, Представление);
	
КонецПроцедуры

Функция ОтборОборотовБухгалтерскогоУчета() 
	
	ОтборОборота = Новый Структура();
	ОтборОборота.Вставить("Счет");
	ОтборОборота.Вставить("Субконто1");
	ОтборОборота.Вставить("Субконто2");
	ОтборОборота.Вставить("НаправлениеДеятельности");
	ОтборОборота.Вставить("КорСчет");
	ОтборОборота.Вставить("КорСубконто1");
	ОтборОборота.Вставить("КорНаправлениеДеятельности");
	ОтборОборота.Вставить("ИсключаемыйКорСчет");
	ОтборОборота.Вставить("ИсключаемыйКорНаправлениеДеятельности");
	ОтборОборота.Вставить("ТипИтогов", Перечисления.ТипыИтогов.ОборотКт);
	ОтборОборота.Вставить("Множитель", 1);
	
	Возврат ОтборОборота;
	
КонецФункции

Процедура ДобавитьОборотыБухгалтерскогоУчета(Правило, ОтборОборотов, ДоОборотов);
	
	Если ДоОборотов Тогда
		Для каждого Счет Из ОтборОборотов.Счет Цикл
			ОтборОборота = ОтборОборотовБухгалтерскогоУчета();
			ОтборОборота.Счет = Счет; 
			ЗаполнитьЗначенияСвойств(ОтборОборота, ОтборОборотов, , "Счет");
			ДобавитьОборотБухгалтерскогоУчета(Правило, ОтборОборота);
		КонецЦикла;
	Иначе
		ДобавитьОборотБухгалтерскогоУчета(Правило, ОтборОборотов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОборотБухгалтерскогоУчета(Правило, ОтборОборота)
	
	Оборот = Новый Структура;
	
	Оборот.Вставить("Счет",      ОтборОборота.Счет);
	
	МассивСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.Субконто1) = Тип("Массив") Тогда
		МассивСубконто1 = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.Субконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.Субконто1) Тогда
		МассивСубконто1.Добавить(ОтборОборота.Субконто1);
	КонецЕсли;
	Оборот.Вставить("Субконто1", МассивСубконто1);
	
	МассивСубконто2 = Новый Массив;
	Если ТипЗнч(ОтборОборота.Субконто2) = Тип("Массив") Тогда
		МассивСубконто2 = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.Субконто2);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.Субконто2) Тогда
		МассивСубконто2.Добавить(ОтборОборота.Субконто1);
	КонецЕсли;
	Оборот.Вставить("Субконто2", МассивСубконто2);
	Оборот.Вставить("НаправлениеДеятельности", ОтборОборота.НаправлениеДеятельности);
	
	МассивКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСчет) = Тип("Массив") Тогда
		МассивКорСчетов = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.КорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.КорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивКорСчетов.Добавить(ОтборОборота.КорСчет);
	КонецЕсли;
	Оборот.Вставить("КорСчет", МассивКорСчетов);
	
	МассивКорСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСубконто1) = Тип("Массив") Тогда
		МассивКорСубконто1 = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.КорСубконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.КорСубконто1) Тогда
		МассивКорСубконто1.Добавить(ОтборОборота.КорСубконто1);
	КонецЕсли;
	Оборот.Вставить("КорСубконто1", МассивКорСубконто1);
	Оборот.Вставить("КорНаправлениеДеятельности", ОтборОборота.КорНаправлениеДеятельности);
	 
	МассивИсключаемыхКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("Массив") Тогда
		МассивИсключаемыхКорСчетов = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.ИсключаемыйКорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивИсключаемыхКорСчетов.Добавить(ОтборОборота.ИсключаемыйКорСчет);
	КонецЕсли;
	Оборот.Вставить("ИсключаемыйКорСчет", МассивИсключаемыхКорСчетов);
	
	МассивИсключаемыхКорНаправленийДеятельности = Новый Массив;
	Если ТипЗнч(ОтборОборота.ИсключаемыйКорНаправлениеДеятельности) = Тип("Массив") Тогда
		МассивИсключаемыхКорНаправленийДеятельности = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОборота.ИсключаемыйКорНаправлениеДеятельности);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.ИсключаемыйКорНаправлениеДеятельности) Тогда
		МассивИсключаемыхКорНаправленийДеятельности.Добавить(ОтборОборота.ИсключаемыйКорНаправлениеДеятельности);
	КонецЕсли;
	Оборот.Вставить("ИсключаемыйКорНаправлениеДеятельности", МассивИсключаемыхКорНаправленийДеятельности);
	
	Оборот.Вставить("ТипИтогов", ОтборОборота.ТипИтогов);
	Оборот.Вставить("Множитель", ОтборОборота.Множитель);
	
	МассивПодстрок = Новый Массив;
	Если Оборот.Множитель = -1 Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(-)';
									|en = '(-)'"));
	КонецЕсли;
	МассивПодстрок.Добавить(Оборот.ТипИтогов);
	Если ТипЗнч(Оборот.Счет) = Тип("Массив") Тогда
		МассивПодстрок.Добавить(СтрСоединить(Оборот.Счет, ","));
	Иначе
		МассивПодстрок.Добавить(Оборот.Счет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.Субконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.Субконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.Субконто2) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.Субконто2, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.НаправлениеДеятельности) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(в рамках контракта)';
									|en = '(under contract)'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСчет) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(СтрСоединить(Оборот.КорСчет, ","));
	ИначеЕсли Оборот.ТипИтогов = Перечисления.ТипыИтогов.Оборот
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт 
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(НСтр("ru = 'все счета';
									|en = 'all accounts'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСубконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.КорСубконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ИсключаемыйКорСчет) Тогда
		ОтборИсключаемыйКорСчет = СтрШаблон(НСтр("ru = '(за исключением кор. счетов: %1)';
												|en = '(except for corr. accounts: %1)'"), СтрСоединить(Оборот.ИсключаемыйКорСчет, ","));
		МассивПодстрок.Добавить(ОтборИсключаемыйКорСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ИсключаемыйКорНаправлениеДеятельности) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(за исключением контракта)';
									|en = '(except for the contract)'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорНаправлениеДеятельности) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(в рамках контракта)';
									|en = '(under contract)'"));
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Правило.ОтборОборотов.Добавить(Оборот, Представление);
	
КонецПроцедуры

Функция СчетаВИерархии(Счета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счета)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	
	Запрос.УстановитьПараметр("Счета", Счета);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОбщиеПараметрыЗапроса(Запрос, ПараметрыОтчета)
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("ОтборОрганизация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", ПараметрыОтчета.НаправлениеДеятельности);
	
КонецПроцедуры

Функция ТаблицаПравилРасчетаПоказателей()
	
	ПравилаРасчетаПоказателей = Новый ТаблицаЗначений;
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей1",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей2",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("КодПредставление", Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Графа", Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ОтборОборотов", Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат ПравилаРасчетаПоказателей;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция МассивНДС10_110()
	
	МассивНДС10_110 = Новый Массив;
	МассивНДС10_110.Добавить(Перечисления.СтавкиНДС.НДС10);
	МассивНДС10_110.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	Возврат МассивНДС10_110;
	
КонецФункции

Функция МассивНДС20_120()
	
	МассивНДС20_120 = Новый Массив;
	МассивНДС20_120.Добавить(Перечисления.СтавкиНДС.НДС20);
	МассивНДС20_120.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	Возврат МассивНДС20_120;
	
КонецФункции


Процедура ЗаполнитьОбластьТаблица(НомерПриложения, ОбластьТаблица, ПравилаРасчетаПоказателей, ДанныеПоказателей)
	
	Показатели = ПравилаРасчетаПоказателей.Скопировать();
	Показатели.Свернуть("Заголовок, КодПредставление, КодПоказателя, ЭтоГруппа");
	
	Для каждого СтрокаПоказатель Из Показатели Цикл
		КодПоказателя = СтрокаПоказатель.КодПоказателя;
		Если СтрокаПоказатель.ЭтоГруппа Тогда
			НомерГруппы = Сред(КодПоказателя, 2, 1);
			Если НомерГруппы = "0" Тогда
				ГруппаПоказателей = "ГруппаПоказателей1";
				ГруппируемыеКолонки = "ГруппаПоказателей1, Графа";
			Иначе
				ГруппаПоказателей = "ГруппаПоказателей2";
				ГруппируемыеКолонки = "ГруппаПоказателей2, Графа";
			КонецЕсли;
			ОтборДанных = Новый Структура;       
			ОтборДанных.Вставить(ГруппаПоказателей, КодПоказателя);
			ТаблицаПоПоказателю = ДанныеПоказателей.Скопировать(ОтборДанных);
			ТаблицаПоПоказателю.Свернуть(ГруппируемыеКолонки, "Сумма");
		Иначе
			ОтборДанных = Новый Структура;
			ОтборДанных.Вставить("КодПоказателя", КодПоказателя);
			ТаблицаПоПоказателю = ДанныеПоказателей.Скопировать(ОтборДанных);
			ТаблицаПоПоказателю.Свернуть("КодПоказателя, Графа", "Сумма");
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура;
		Для Каждого Строка Из ТаблицаПоПоказателю Цикл
			Ячейка = "" + КодПоказателя + "_" + Строка.Графа;
			СтруктураЗаполнения.Вставить("П_" + Ячейка, Строка.Сумма);
			СтруктураЗаполнения.Вставить("Р_" + Ячейка, ПараметрыРасшифровки(СтрокаПоказатель, Строка));
		КонецЦикла;

		ОбластьТаблица.Параметры.Заполнить(СтруктураЗаполнения); 

	КонецЦикла;

КонецПроцедуры

Функция ПараметрыРасшифровки(СтрокаПоказатель, Строка)

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ЗаголовокПоказателя", СтрокаПоказатель.Заголовок);
	СтруктураЗаполнения.Вставить("КодПредставление", СтрокаПоказатель.КодПредставление);
	СтруктураЗаполнения.Вставить("КодПоказателя", СтрокаПоказатель.КодПоказателя);
	СтруктураЗаполнения.Вставить("Графа", Строка.Графа);
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

Функция МесяцыПрописью()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("01", НСтр("ru = 'Января';
									|en = 'January'"));
	Соответствие.Вставить("02", НСтр("ru = 'Февраля';
									|en = 'February'"));
	Соответствие.Вставить("03", НСтр("ru = 'Марта';
									|en = 'March'"));
	Соответствие.Вставить("04", НСтр("ru = 'Апреля';
									|en = 'April'"));
	Соответствие.Вставить("05", НСтр("ru = 'Мая';
									|en = 'May'"));
	Соответствие.Вставить("06", НСтр("ru = 'Июня';
									|en = 'June'"));
	Соответствие.Вставить("07", НСтр("ru = 'Июля';
									|en = 'July'"));
	Соответствие.Вставить("08", НСтр("ru = 'Августа';
									|en = 'August'"));
	Соответствие.Вставить("09", НСтр("ru = 'Сентября';
									|en = 'September'"));
	Соответствие.Вставить("10", НСтр("ru = 'Октября';
									|en = 'October'"));
	Соответствие.Вставить("11", НСтр("ru = 'Ноября';
									|en = 'November'"));
	Соответствие.Вставить("12", НСтр("ru = 'Декабря';
									|en = 'December'"));
	
	Возврат Соответствие;
	
КонецФункции

Функция МассивВСписокЗначений(Массив)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Массив);
	Возврат СписокЗначений; 
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли