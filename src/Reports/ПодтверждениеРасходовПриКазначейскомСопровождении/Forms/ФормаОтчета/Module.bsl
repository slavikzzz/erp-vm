
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.АвтоМасштаб = Истина;

	НомерПриложения = 2;      
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ДатаПодписания = ТекущаяДатаСеанса();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	
	Элементы.ОткрытьПлановыеЗатраты.Видимость = ПолучитьФункциональнуюОпцию("СведенияОбОперацияхСЦелевымиСредствами");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	Элементы.ОткрытьПлановыеЗатраты.Доступность = ЗначениеЗаполнено(Отчет.НаправлениеДеятельности);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И (ВыбранноеЗначение.Свойство("ДатаПодписания")
		Или ВыбранноеЗначение.Свойство("ДатаФормирования")
		Или ВыбранноеЗначение.Свойство("Руководитель")) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(Отчет.НачалоПериода);
	КонецЕсли;
	
	ОбновитьТекстЗаголовкаИАктуализации();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	КонецЕсли;
	
	ОбновитьТекстЗаголовкаИАктуализации();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовкаИАктуализации();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	БухгалтерскийУчетКлиентПереопределяемый.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаПодписания", ДатаПодписания);
	СтруктураПараметров.Вставить("ДатаФормирования", ДатаФормирования);
	СтруктураПараметров.Вставить("Руководитель", Руководитель);
	
	ОткрытьФорму("Отчет.ПодтверждениеРасходовПриКазначейскомСопровождении.Форма.ДополнительныеНастройки",
					СтруктураПараметров,
					ЭтаФорма,
					,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Элементы.ОткрытьПлановыеЗатраты.Доступность = ЗначениеЗаполнено(Отчет.НаправлениеДеятельности);
	
	ОбновитьТекстЗаголовкаИАктуализации();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументаРезультат

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ПараметрыОткрытияРасшифровки = ПараметрыОткрытияРасшифровки(Расшифровка);
		ОткрытьФорму(ПараметрыОткрытияРасшифровки.ИмяФормыРасшифровки, ПараметрыОткрытияРасшифровки.ПараметрыФормы,, Истина);
	ИначеЕсли ЗначениеЗаполнено(Расшифровка) Тогда 
		ПоказатьЗначение(,Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)

	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = СформироватьОтчетНаСервере();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗавершенияЗадания", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиАктуальности()

	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеПроверкиАктуальностиОтчета(ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлановыеЗатраты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаправлениеДеятельности" , Отчет.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("Организация" , Отчет.Организация);
	
	ОткрытьФорму("РегистрСведений.ПлановыеЗатратыПоГосударственнымКонтрактам.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	Если Форма.НомерПриложения = 1 Тогда
		ВидОтчета = НСтр("ru = 'Расчет суммы накладных расходов по гос. контракту (Приложение 1 к Приказу №210н)';
						|en = 'Calculation of overhead amount under the state contract (Appendix No. 1 to Order No. 210n)'");
	ИначеЕсли Форма.НомерПриложения = 2 Тогда
		ВидОтчета = НСтр("ru = 'Расходная декларация (Приложение 2 к Приказу №210н)';
						|en = 'Expense declaration (Appendix No. 2 to Order No. 210n)'");
	ИначеЕсли Форма.НомерПриложения = 3 Тогда
		ВидОтчета = НСтр("ru = 'Ресурсная расходная декларация (Приложение 3 к Приказу №210н)';
						|en = 'Consumption declaration (Appendix No. 3 to Order No. 210n)'");
	ИначеЕсли Форма.НомерПриложения = 4 Тогда
		ВидОтчета = НСтр("ru = 'Выписка из регистров аналитического учета (Приложение 4 к Приказу №210н)';
						|en = 'Extract from analytical registers (Appendix No. 4 to Order No. 210n)'");
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ВидОтчета + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуНомераПриложения(Форма)
	
	Форма.Элементы.ФормироватьПриложение1.Пометка = Ложь;
	Форма.Элементы.ФормироватьПриложение2.Пометка = Ложь;
	Форма.Элементы.ФормироватьПриложение3.Пометка = Ложь;
	Форма.Элементы.ФормироватьПриложение4.Пометка = Ложь;
	
	Если Форма.НомерПриложения = 1 Тогда
		Форма.Элементы.ФормироватьПриложение1.Пометка = Истина;
	ИначеЕсли Форма.НомерПриложения = 2 Тогда
		Форма.Элементы.ФормироватьПриложение2.Пометка = Истина;
	ИначеЕсли Форма.НомерПриложения = 3 Тогда
		Форма.Элементы.ФормироватьПриложение3.Пометка = Истина;
	ИначеЕсли Форма.НомерПриложения = 4 Тогда
		Форма.Элементы.ФормироватьПриложение4.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("НаправлениеДеятельности", Отчет.НаправлениеДеятельности);
	ПараметрыОтчета.Вставить("НомерПриложения", НомерПриложения);
	ПараметрыОтчета.Вставить("ДатаФормирования", ДатаФормирования);
	ПараметрыОтчета.Вставить("ДатаПодписания", ДатаПодписания);
	ПараметрыОтчета.Вставить("Руководитель", Руководитель);
	ПараметрыОтчета.Вставить("РасшифровкаДоОборотов", Ложь);
		
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(
		ЭтаФорма);
		
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.СформироватьОтчет",
		ПараметрыОтчета, АдресХранилища);

	Возврат ДлительнаяОперация;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
    ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Статус") Тогда
			Если Результат.Статус = "Ошибка" Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
			ИначеЕсли Результат.Статус = "Выполнено" Тогда
				ИдентификаторЗадания = Неопределено;
				ЗагрузитьПодготовленныеДанные();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма.Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовкаИАктуализации();
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстЗаголовкаИАктуализации()
	
	Если ЗначениеЗаполнено(Отчет.Организация)
		И ЗначениеЗаполнено(Отчет.НаправлениеДеятельности) Тогда 
		
		ОбновитьТекстЗаголовкаИАктуализацииНаСервере();
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗаголовкаИАктуализацииНаСервере()
	
	Если Не ЗначениеЗаполнено(Отчет.НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	ПараметрыПроверки = БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности(ЭтотОбъект);
	ДанныеАктуализации = Новый Структура("ИдентификаторЗаданияАктуализации,АдресХранилищаАктуализации", "", "");
	ЗаполнитьЗначенияСвойств(ДанныеАктуализации, ЭтотОбъект);
	
	БухгалтерскиеОтчеты.ПроверитьАктуальность(ПараметрыПроверки, ДанныеАктуализации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПриложение1(Команда)
	НомерПриложения = 1;
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	ОбновитьТекстЗаголовка(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПриложение2(Команда)
	НомерПриложения = 2;
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	ОбновитьТекстЗаголовка(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПриложение3(Команда)
	НомерПриложения = 3;
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	ОбновитьТекстЗаголовка(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПриложение4(Команда)
	НомерПриложения = 4;
	УстановитьПометкуНомераПриложения(ЭтаФорма);
	ОбновитьТекстЗаголовка(ЭтаФорма)
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияРасшифровки(Расшифровка)
	
	ИмяФормыРасшифровки = "";
	ПараметрыФормыРасшифровки = Новый Структура;
	
	НомерПриложения = НомерПриложения;
	ЗаголовокПоказателя = Расшифровка.ЗаголовокПоказателя;
	КодПредставление = Расшифровка.КодПредставление;
	КодПоказателя = Расшифровка.КодПоказателя;
	Графа = Расшифровка.Графа;
	
	ПараметрыРасшифровки = ПодготовитьПараметрыОтчета();
	ПараметрыРасшифровки.РасшифровкаДоОборотов = Истина;
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	Если НомерПриложения = 2 Тогда
		ТаблицаПравил = Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.ТаблицаПравилРасчетаПоказателейПриложение2(ПараметрыРасшифровки);
	ИначеЕсли НомерПриложения = 3 Тогда
		ТаблицаПравил = Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.ТаблицаПравилРасчетаПоказателейПриложение3(ПараметрыРасшифровки);
	КонецЕсли;
	
	ОтборПравил = Новый Структура;       
	ОтборПравил.Вставить("КодПоказателя", КодПоказателя);
	ОтборПравил.Вставить("Графа", Графа);
	ПравилаПоПоказателю = ТаблицаПравил.Скопировать(ОтборПравил);
	
	ДанныеОборотов = Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.ПолучениеДанных(ПараметрыРасшифровки, ПравилаПоПоказателю);
	
	Если ДанныеОборотов.Количество() > 1 Тогда
		
		ИмяФормыРасшифровки = "Отчет.ПодтверждениеРасходовПриКазначейскомСопровождении.Форма.РасшифровкаОборотов";
		
		ПараметрыФормыРасшифровки.Вставить("Организация" , Отчет.Организация);
		ПараметрыФормыРасшифровки.Вставить("НачалоПериода" , Отчет.НачалоПериода);
		ПараметрыФормыРасшифровки.Вставить("КонецПериода",  КонецДня(Отчет.КонецПериода));
		ПараметрыФормыРасшифровки.Вставить("НаправлениеДеятельности", Отчет.НаправлениеДеятельности);
		
		ПараметрыФормыРасшифровки.Вставить("ЗаголовокПоказателя", ЗаголовокПоказателя);
		ПараметрыФормыРасшифровки.Вставить("КодПредставление", КодПредставление);
		ПараметрыФормыРасшифровки.Вставить("КодПоказателя", КодПоказателя);
		ПараметрыФормыРасшифровки.Вставить("Графа", Графа);
		
		ДанныеРасшифровки = Новый Структура;       
		ДанныеРасшифровки.Вставить("ДанныеОборотов", ДанныеОборотов);
		ДанныеРасшифровки.Вставить("ПравилаПоПоказателю", ПравилаПоПоказателю);

		АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
		ПараметрыФормыРасшифровки.Вставить("АдресВременногоХранилищаРасшифровки", АдресВременногоХранилищаРасшифровки);
		
	Иначе
		
		Правило = ПравилаПоПоказателю[0];
		ОтборОборотов = Правило.ОтборОборотов.Получить(ДанныеОборотов[0].ИндексОборота);
		СтруктураОтбораОборотов = ОтборОборотов.Значение;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КодПоказателя", КодПоказателя);
		ДополнительныеПараметры.Вставить("КодПредставление", КодПредставление);
		ДополнительныеПараметры.Вставить("ЗаголовокПоказателя", ЗаголовокПоказателя);
		ДополнительныеПараметры.Вставить("Графа", Графа);
		
		Если Правило.ИсточникДанных = "КассаФакт" Тогда
			ИмяФормыРасшифровки = "Отчет.РасшифровкаРасходованияДенежныхСредствПоСтатьямЦелевыхСредств.Форма";
			ПараметрыФормыРасшифровки = Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.ПараметрыФормыРасшифровкиПоказателяКассы(Отчет, СтруктураОтбораОборотов, ДополнительныеПараметры);
		ИначеЕсли Правило.ИсточникДанных = "ДанныеБух" Тогда
			ИмяФормыРасшифровки = "Отчет.ОборотыСчета.Форма.ФормаОтчета";
			ПараметрыФормыРасшифровки = Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении.ПараметрыФормыРасшифровкиПоказателяБух(Отчет, СтруктураОтбораОборотов);
		ИначеЕсли Правило.ИсточникДанных = "КассаПлан" Тогда
			ИмяФормыРасшифровки = "РегистрСведений.ПлановыеЗатратыПоГосударственнымКонтрактам.ФормаСписка";
			ПараметрыФормыРасшифровки = ПараметрыФормыРасшифровкиПоказателяКассаПлан(СтруктураОтбораОборотов, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФормыРасшифровки, ПараметрыФормы", ИмяФормыРасшифровки, ПараметрыФормыРасшифровки);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРасшифровкиПоказателяКассаПлан(СтруктураОтбораОборотов, ДополнительныеПараметры)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Организация" , Отчет.Организация);
	ПараметрыФормы.Вставить("НачалоПериода" , Отчет.НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецДня(Отчет.КонецПериода));
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Отчет.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("КодПредставление", ДополнительныеПараметры.КодПредставление);
	ПараметрыФормы.Вставить("КодПоказателя", ДополнительныеПараметры.КодПоказателя);
	ПараметрыФормы.Вставить("ЗаголовокПоказателя", ДополнительныеПараметры.ЗаголовокПоказателя);
	ПараметрыФормы.Вставить("Графа", ДополнительныеПараметры.Графа);
	
	Если СтруктураОтбораОборотов.УкрупненныеКоды.Количество() Тогда 
		ПараметрыФормы.Вставить("УкрупненныеКоды",  СтруктураОтбораОборотов.УкрупненныеКоды);
	КонецЕсли;
	Если СтруктураОтбораОборотов.ДетализированныеКоды.Количество() Тогда 
		ПараметрыФормы.Вставить("ДетализированныеКоды", СтруктураОтбораОборотов.ДетализированныеКоды);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции


#КонецОбласти
