
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКC

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	Если ТипЗнч(Параметры.НалоговыйОрган) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Если НЕ Параметры.НалоговыйОрган.Пустая() Тогда
			СтруктураРеквизитовФормы.РегистрацияВНалОргане = Параметры.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
	= Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета.ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОбъектОтчета.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			Иначе
				ЗаполнитьЗначенияПоУмолчанию = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		СтруктураПараметров
		= Новый Структура("Организация, ДатаЗначения", СтруктураРеквизитовФормы.Организация, ДатаПодписи);
		
		ТабличныйДокумент.Области.ПоМесту.Значение
		= ?(РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров), "213", "214");
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	НастройкиВидимости = РегламентированнаяОтчетность.НастройкиВидимостиЭлементовФормы(ЭтаФорма);
	СтруктураРеквизитовФормы.Вставить("НастройкиВидимостиЭлементовФормы", НастройкиВидимости);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Если НЕ СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ПостояннаяВидимость Тогда
			Элементы.Заполнить.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.имущество 24к4",
		'20241228') Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ОбъектОтчета.ИнициализироватьПодчиненныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													ИмяРаздела,
													Ветка,
													мСтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИмяОтчета(ИмяФормы),
		ИмяФормыОтчета(ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел21";
	СтрокаУровня1.Представление      = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел22";
	СтрокаУровня1.Представление      = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2024Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "ВидыНалоговойЛьготы_Р2Стр160_Р22Стр160_Р3Стр040"
						И (КодПоказателя = "2010345" ИЛИ КодПоказателя = "2010346")
						И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20250101' Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор кода периода", КоллекцияСписковВыбора["Периоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000703", 1, ,
	"Выбор признака СЗПК", КоллекцияСписковВыбора["ПризнакиСЗПК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000101", 2, ,
	"Выбор кода вида имущества", КоллекцияСписковВыбора["ВидыИмущества_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000201", 1, ,
	"Выбор признака СЗПК", КоллекцияСписковВыбора["ПризнакиСЗПК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020021503", 0, ,
	"Выбор коэффициента Кжд", КоллекцияСписковВыбора["Кжд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020016003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр160_Р22Стр160_Р3Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020020003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр200_Р22Стр200_Р3Стр070"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020023003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр230_Р22Стр230_Р3Стр110"]);
	
	//Раздел 2.1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210000200", 1, ,
	"Выбор признака СЗПК", КоллекцияСписковВыбора["ПризнакиСЗПК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210001001", 1, ,
	"Выбор кода номера объекта", КоллекцияСписковВыбора["КодыНомераОбъекта_Раздел21"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003001", 2, ,
	"Выбор кода субъекта Российской Федерации", КоллекцияСписковВыбора["СубъектыРФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003002", 1, ,
	"Выбор вида муниципального образования", КоллекцияСписковВыбора["ВидыМуниципальныхОбразований_Раздел21"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210003004", 1, ,
	"Выбор вида поселения", КоллекцияСписковВыбора["ВидыПоселений_Раздел21"]);
	
	//Раздел 2.2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220000101", 2, ,
	"Выбор кода вида имущества", КоллекцияСписковВыбора["ВидыИмущества_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220001101", 1, ,
	"Выбор кода номера объекта", КоллекцияСписковВыбора["КодыНомераОбъекта_Раздел22"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220000201", 1, ,
	"Выбор признака СЗПК", КоллекцияСписковВыбора["ПризнакиСЗПК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220021503", 0, ,
	"Выбор коэффициента Кжд", КоллекцияСписковВыбора["Кжд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220016003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр160_Р22Стр160_Р3Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220020003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр200_Р22Стр200_Р3Стр070"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220023003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр230_Р22Стр230_Р3Стр110"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220024503", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р22Стр245"]);
	
	//Раздел 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030000101", 2, ,
	"Выбор кода вида имущества", КоллекцияСписковВыбора["ВидыИмущества_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001100", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001401", 1, ,
	"Выбор кода вида сведений", КоллекцияСписковВыбора["ВидыСведений_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030004003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр160_Р22Стр160_Р3Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030007003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр200_Р22Стр200_Р3Стр070"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030011003_КодЛьготы", 7, ,
	"Выбор кода налоговой льготы", КоллекцияСписковВыбора["ВидыНалоговойЛьготы_Р2Стр230_Р22Стр230_Р3Стр110"]);
	
	//Раздел 4.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00004М100001", 2, ,
	"Выбор кода субъекта Российской Федерации", КоллекцияСписковВыбора["СубъектыРФ"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации
	= ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = "34";
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = "50";
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц   = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	СписокСохранения.Вставить("КППДляАвтозаполнения", СтруктураРеквизитовФормы.КППДляАвтозаполнения);
	
	СписокСохранения.Вставить("КППДляАвтозаполненияПоМестуОН", СтруктураРеквизитовФормы.КППДляАвтозаполненияПоМестуОН);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("ФлажокРучнойВводАдреса", СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения, Новый СжатиеДанных(9));
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	СписокСохранения = Неопределено;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1';
				|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Возврат ОбъектОтчета(ЭтотОбъект.ИмяФормы).СохраненныеДанныеОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		
		Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
					СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
				КонецЕсли;
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки
		= ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь,
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если СписокСохранения.Свойство("ФлажокРучнойВводАдреса") Тогда
		СтруктураРеквизитовФормы.Вставить("ФлажокРучнойВводАдреса", СписокСохранения.ФлажокРучнойВводАдреса);
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена",
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСохранения.Свойство("КППДляАвтозаполнения") Тогда
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполнения", СписокСохранения.КППДляАвтозаполнения);
	Иначе
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполнения", СокрЛП(СтруктураДанныхТитульный.КПП));
	КонецЕсли;
	
	Если СписокСохранения.Свойство("КППДляАвтозаполненияПоМестуОН") Тогда
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполненияПоМестуОН", СписокСохранения.КППДляАвтозаполненияПоМестуОН);
	Иначе
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполненияПоМестуОН", СокрЛП(СтруктураДанныхТитульный.КПП));
	КонецЕсли;
	
	СписокСохранения = Неопределено;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "НалоговыйОрганПоМестуОН" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНСПоМестуОН();
		
	ИначеЕсли СтрЗаканчиваетсяНа(Область.Имя, "_Основание") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВвестиОснованиеЛьготы(Область);
		Возврат;
		
	ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса
		И (СтрНачинаетсяС(Область.Имя, "П000210003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00021М103")) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоответствиеПоказателейСтраницыРеквизитамАдреса
		= СоответствиеПоказателейСтраницыРеквизитамАдреса(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтруктураМногострочныхЧастей", СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей);
		ДопПараметры.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
		СоответствиеПоказателейСтраницыРеквизитамАдреса);
		
		РегионНаименование = "";
		ИмяОблКодРегиона = "";
		Для каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
			Если Элем.Значение = "КодРегиона" Тогда
				ИмяОблКодРегиона = Элем.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяОблКодРегиона) Тогда
			ОблКодРегиона = ТабличныйДокумент.Области.Найти(ИмяОблКодРегиона);
			Если ОблКодРегиона <> Неопределено Тогда
				Если Регионы.Количество() = 0 Тогда
					ЗаполнитьРегионыНаСервере();
				КонецЕсли;
				Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(ОблКодРегиона.Значение)));
				Если Регион.Количество() > 0 Тогда
					РегионНаименование = ?(Регион.Количество() > 0, Регион[0].Наим, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДопПараметры.Вставить("РегионНаименование", РегионНаименование);
		
		АдресВФорматеФИАС = РегламентированнаяОтчетностьКлиент.АдресВФорматеФИАСПоДаннымСтраницыРеглОтчета(
		ТабличныйДокумент, ДопПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", ПоляАдресаВJSON(АдресВФорматеФИАС));
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации",
		СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтотОбъект;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиент.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(
			Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000010001003") ИЛИ ИмяПоказателя = "П000020001001"
		ИЛИ ИмяПоказателя = "П000210001000" ИЛИ ИмяПоказателя = "П000220001001" ИЛИ ИмяПоказателя = "П000030001001" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
				|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000010002003") ИЛИ ИмяПоказателя = "П000020001100"
		ИЛИ ИмяПоказателя = "П000210001100" ИЛИ ИмяПоказателя = "П000220001100" ИЛИ ИмяПоказателя = "П000030001100" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
				|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020000101" ИЛИ ИмяПоказателя = "П000220000101" ИЛИ ИмяПоказателя = "П000030000101" Тогда
		КодВидаИмущества = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодВидаИмущества = СтрДлина(КодВидаИмущества);
		Если ДлинаКодВидаИмущества = 2 ИЛИ ДлинаКодВидаИмущества = 0 Тогда
			Область.Значение = КодВидаИмущества;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код вида имущества должен состоять из 2 цифр. Значение очищено';
				|en = 'Код вида имущества должен состоять из 2 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020021503" ИЛИ ИмяПоказателя = "П000220021503" Тогда
		КоэффициентКжд = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначПоказателя);
		Если ЗначениеЗаполнено(ЗначПоказателя) И ТипЗнч(КоэффициентКжд) = Тип("Число")
			И КоэффициентКжд >= 0 И КоэффициентКжд <= 0.8 Тогда
			Область.Значение = Формат(КоэффициентКжд, "ЧДЦ=1;ЧН=0");
		Иначе
			Область.Значение = "";
			Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введен некорректный коэффициент Кжд. Значение очищено';
																|en = 'Введен некорректный коэффициент Кжд. Значение очищено'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210004003" Тогда
		ОКОФ = СокрЛП(ЗначПоказателя);
		ОКОФ = СтрЗаменить(ОКОФ, " ", "");
		ШаблоныОКОФ = Неопределено;
		Если ОКОФСоответствуетШаблонам(ОКОФ, ШаблоныОКОФ) Тогда
			Область.Значение = ОКОФ;
		Иначе
			Область.Значение = "";
			СтрокаСШаблонамиОКОФ = СтрЗаменить(СтрСоединить(ШаблоныОКОФ, ", "), "9", "Х");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Введен код ОКОФ, не соответствующий одному из шаблонов: %1 (Х - любая цифра). Значение очищено';
				|en = 'Введен код ОКОФ, не соответствующий одному из шаблонов: %1 (Х - любая цифра). Значение очищено'"),
				СтрокаСШаблонамиОКОФ));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000030009003_Числ") И ЗначПоказателя > 12 Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Числитель коэффициента Кв не должен быть больше 12. Значение очищено';
			|en = 'Числитель коэффициента Кв не должен быть больше 12. Значение очищено'"));
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000030009003_Знам") И ЗначПоказателя > 12 Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Знаменатель коэффициента Кв не должен быть больше 12. Значение очищено';
			|en = 'Знаменатель коэффициента Кв не должен быть больше 12. Значение очищено'"));
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000030009003") И ТабличныйДокумент.Области["П000030009003_Знам"].Значение > 0
		И (ТабличныйДокумент.Области["П000030009003_Числ"].Значение > ТабличныйДокумент.Области["П000030009003_Знам"].Значение) Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Числитель коэффициента Кв не должен быть больше знаменателя. Значение очищено';
			|en = 'Числитель коэффициента Кв не должен быть больше знаменателя. Значение очищено'"));
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000030009503_Числ") И ЗначПоказателя > 12 Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Числитель коэффициента Ки не должен быть больше 12. Значение очищено';
			|en = 'Числитель коэффициента Ки не должен быть больше 12. Значение очищено'"));
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000030009503_Знам") И ЗначПоказателя > 12 Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Знаменатель коэффициента Ки не должен быть больше 12. Значение очищено';
			|en = 'Знаменатель коэффициента Ки не должен быть больше 12. Значение очищено'"));
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000030009503") И ТабличныйДокумент.Области["П000030009503_Знам"].Значение > 0
		И (ТабличныйДокумент.Области["П000030009503_Числ"].Значение > ТабличныйДокумент.Области["П000030009503_Знам"].Значение) Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Числитель коэффициента Ки не должен быть больше знаменателя. Значение очищено';
			|en = 'Числитель коэффициента Ки не должен быть больше знаменателя. Значение очищено'"));
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 И Сред(ИмяОбласти, ПозицияПодстроки) <> "_КодЛьготы" Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	// Особая обработка для адресных показателей раздела 2.1.
	Если Область.Имя = "П000210001001" И СокрЛП(Область.Значение) <> "3" Тогда
		УдалитьДополнительныеСтрокиВРазделе21();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
		// Особая обработка для адресных показателей раздела 2.1.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000210001001");
			Если Обл <> Неопределено И СокрЛП(Обл.Значение) <> "3" Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = "Добавить строку";
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = "Удалить строку";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОКОФСоответствуетШаблонам(Знач ОКОФ, ШаблоныОКОФ)
	
	ШаблоныОКОФ = Новый Массив;
	ШаблоныОКОФ.Добавить("999.9");
	ШаблоныОКОФ.Добавить("999.99");
	ШаблоныОКОФ.Добавить("999.99.9");
	ШаблоныОКОФ.Добавить("999.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.9");
	ШаблоныОКОФ.Добавить("999.99.99.99.99");
	ШаблоныОКОФ.Добавить("999.99.99.99.999");
	
	Для Инд = 1 По СтрДлина(ОКОФ) Цикл
		ТекСимв = Сред(ОКОФ, Инд, 1);
		Если СтрНайти("0123456789", ТекСимв) > 0 Тогда
			ОКОФ = Лев(ОКОФ, Инд - 1) + "9" + Сред(ОКОФ, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКОФ = "" ИЛИ ШаблоныОКОФ.Найти(ОКОФ) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СтруктураРеквизитовФормы.КППДляАвтозаполнения;
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполнения", РезультатВыбора.КПП);
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСПоМестуОН()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрганПоМестуОН.Значение);
	КПП = СтруктураРеквизитовФормы.КППДляАвтозаполненияПоМестуОН;
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСПоМестуОНЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСПоМестуОНЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрганПоМестуОН"].Значение = ВыбранныйКодНО;
		СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполненияПоМестуОН", РезультатВыбора.КПП);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготы(Область)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", Область.Значение);
	ПараметрыФормы.Вставить("ИнформационныйТекст",
	"Статья закона субъекта Российской Федерации,
	|которым установлена налоговая ставка");
	
	ФормаВвода = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВводаОснованияЛьготы", ПараметрыФормы, ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОснованиеЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаВвода.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОснованиеЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		Подстрока = "строки 007-040";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки 007-040?';
							|en = 'Удалить выбранные строки 007-040?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы21 Тогда
		Подстрока = "здание / сооружение / объект ...";
		ТекстВопроса = НСтр("ru = 'Удалить выбранное здание / сооружение / объект ... ?';
							|en = 'Удалить выбранное здание / сооружение / объект ... ?'");
	Иначе
		Подстрока = "строку";
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг)
			И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" ИЛИ ЗначПоМесту = "281" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		ОблНалоговыйОрганПоМестуОН = ТДО.НалоговыйОрганПоМестуОН;
		
		Если ЗначПоМесту = "213" ИЛИ ЗначПоМесту = "216" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблНалоговыйОрганПоМестуОН);
			ТДО["СекцияПояснение_КодНООб"].Видимость = Ложь;
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблНалоговыйОрганПоМестуОН);
			ТДО["СекцияПояснение_КодНООб"].Видимость = Истина;
		КонецЕсли;
		
		ТДО["СекцияПояснение_НомКорр"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
		Обл = ТДО.Найти("П000010003003" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = ТДО.Найти("П000010003003" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаИмущества = СокрЛП(ТДО["П000020000101"].Значение);
		
		ОблСтр160_КодЛьготы = ТДО["П000020016003_КодЛьготы"];
		ОблСтр160_Основание = ТДО["П000020016003_Основание"];
		Если СокрЛП(ОблСтр160_КодЛьготы.Значение) = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр160_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
		КонецЕсли;
		
		ОблСтр180_Числ = ТДО["П000020018003_Числ"];
		ОблСтр180_Знам = ТДО["П000020018003_Знам"];
		Если КодВидаИмущества = "02" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		КонецЕсли;
		
		ОблСтр200_КодЛьготы = ТДО["П000020020003_КодЛьготы"];
		ОблСтр200_Основание = ТДО["П000020020003_Основание"];
		Если СокрЛП(ОблСтр200_КодЛьготы.Значение) = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр200_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
		КонецЕсли;
		
		ОблСтр215_Кжд = ТДО["П000020021503"];
		Если КодВидаИмущества = "04" ИЛИ КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		КонецЕсли;
		
		ОблСтр230_КодЛьготы = ТДО["П000020023003_КодЛьготы"];
		КодЛьготы = СокрЛП(ОблСтр230_КодЛьготы.Значение);
		ОблСтр230_Основание = ТДО["П000020023003_Основание"];
		ОблСтр240_СуммаЛьготы = ТДО["П000020024003"];
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр230_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр230_Основание);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр240_СуммаЛьготы);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр230_Основание);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр240_СуммаЛьготы);
		КонецЕсли;
		
		ОблСтр250_СуммаНалогаЗаПределамиРФ = ТДО["П000020025003"];
		Если КодВидаИмущества = "04" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаНалогаЗаПределамиРФ);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаНалогаЗаПределамиРФ);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		Стр010 = СокрЛП(ТДО["П000210001001"].Значение);
		
		ТДО["СекцияПояснение_Строка030"].Видимость = Стр010 <> "3";
		
		ТДО["СекцияСлужебная_ИдентификаторАдресногоОбъекта"].Видимость = Ложь;
		
		Для Ном = 1 По 18 Цикл
			Если Ном = 13 Тогда
				НомПреф = 1;
				Обл13 = ТДО["П00021М103013_1"];
				Обл14 = ТДО["П00021М103014_1"];
				Пока Обл13 <> Неопределено Цикл
					Если Стр010 = "3" Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл13);
						РазрешитьВводДанныхВОбласть(Форма, Обл14);
					Иначе
						ЗапретитьВводДанныхВОбласть(Форма, Обл13);
						ЗапретитьВводДанныхВОбласть(Форма, Обл14);
					КонецЕсли;
					НомПреф = НомПреф + 1;
					Обл13 = ТДО.Найти("П00021М103013_" + Формат(НомПреф, "ЧГ="));
					Обл14 = ТДО.Найти("П00021М103014_" + Формат(НомПреф, "ЧГ="));
				КонецЦикла;
			ИначеЕсли Ном = 14 Тогда
				Продолжить;
			Иначе
				Обл = ТДО.Найти("П0002100030" + Формат(Ном, "ЧЦ=2;ЧВН=;ЧН="));
				Если Обл <> Неопределено Тогда
					Если Стр010 = "3" Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл);
					Иначе
						ЗапретитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Обл Из ТДО Цикл
			Если СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00021М1") Тогда
				Если Стр010 = "3" Тогда
					Обл.Видимость = Истина;
				Иначе
					Обл.Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(Обл.Имя, "СекцияСокращение_") Тогда
				Обл.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если Стр010 <> "3" Тогда
			ТДО["П00021УИД3000"].Очистить();
			ТДО["ПС00210003001"].Очистить();
			ТДО["ПС00210003002"].Очистить();
			ТДО["ПС00210003004"].Очистить();
			ТДО["ПС00210003006"].Очистить();
			ТДО["ПС00210003008"].Очистить();
			ТДО["ПС00210003010"].Очистить();
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаИмущества = СокрЛП(ТДО["П000220000101"].Значение);
		
		ОблСтр160_КодЛьготы = ТДО["П000220016003_КодЛьготы"];
		ОблСтр160_Основание = ТДО["П000220016003_Основание"];
		Если СокрЛП(ОблСтр160_КодЛьготы.Значение) = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр160_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр160_Основание);
		КонецЕсли;
		
		ОблСтр180_Числ = ТДО["П000220018003_Числ"];
		ОблСтр180_Знам = ТДО["П000220018003_Знам"];
		Если КодВидаИмущества = "02" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Числ);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр180_Знам);
		КонецЕсли;
		
		ОблСтр200_КодЛьготы = ТДО["П000220020003_КодЛьготы"];
		ОблСтр200_Основание = ТДО["П000220020003_Основание"];
		Если СокрЛП(ОблСтр200_КодЛьготы.Значение) = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр200_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр200_Основание);
		КонецЕсли;
		
		ОблСтр215_Кжд = ТДО["П000220021503"];
		Если КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр215_Кжд);
		КонецЕсли;
		
		ОблСтр230_КодЛьготы = ТДО["П000220023003_КодЛьготы"];
		КодЛьготы = СокрЛП(ОблСтр230_КодЛьготы.Значение);
		ОблСтр230_Основание = ТДО["П000220023003_Основание"];
		ОблСтр240_СуммаЛьготы = ТДО["П000220024003"];
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр230_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр230_Основание);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр240_СуммаЛьготы);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр230_Основание);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр240_СуммаЛьготы);
		КонецЕсли;
		
		ОблСтр245 = ТДО["П000220024503"];
		ОблСтр250_СуммаНалогаЗаПределамиРФ = ТДО["П000220025003"];
		Если КодВидаИмущества = "15" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр245);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаНалогаЗаПределамиРФ);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр245);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр250_СуммаНалогаЗаПределамиРФ);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ОблСтр040_КодЛьготы = ТДО["П000030004003_КодЛьготы"];
		ОблСтр040_Основание = ТДО["П000030004003_Основание"];
		Если СокрЛП(ОблСтр040_КодЛьготы.Значение) = "2012000" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр040_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр040_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр040_Основание);
		КонецЕсли;
		
		ОблСтр070_КодЛьготы = ТДО["П000030007003_КодЛьготы"];
		ОблСтр070_Основание = ТДО["П000030007003_Основание"];
		Если СокрЛП(ОблСтр070_КодЛьготы.Значение) = "2012400" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр070_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр070_Основание);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр070_Основание);
		КонецЕсли;
		
		ОблСтр110_КодЛьготы = ТДО["П000030011003_КодЛьготы"];
		КодЛьготы = СокрЛП(ОблСтр110_КодЛьготы.Значение);
		ОблСтр110_Основание = ТДО["П000030011003_Основание"];
		ОблСтр120_СуммаЛьготы = ТДО["П000030012003"];
		Если ЗначениеЗаполнено(КодЛьготы) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр110_Основание);
			УстановитьОснованиеЛьготыПоУмолчанию(ОблСтр110_Основание);
			РазрешитьВводДанныхВОбласть(Форма, ОблСтр120_СуммаЛьготы);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр110_Основание);
			ЗапретитьВводДанныхВОбласть(Форма, ОблСтр120_СуммаЛьготы);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = ТДО[ИмяПок];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина
			И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
		 ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
			Форма.СтруктураРеквизитовФормы, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	
	Если НЕ ЗначениеЗаполнено(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаАдресаВФорматеФИАС

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ТекстПредупреждения = "";
	
	ОбновитьАдресВМестеХраненияИВТабличномДокументе(Результат, ТекстПредупреждения);
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоляАдресаВJSON(ПоляАдреса)
	
	Возврат РаботаСАдресами.ПоляАдресаВJSON(ПоляАдреса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяРаздела)
	
	Соотв = Новый Структура;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		// Немногострочные данные.
		//
		Соотв.Вставить("П00021УИД3000", "ИдентификаторАдресногоОбъекта");
		
		Соотв.Вставить("П000210003001", "КодРегиона");
		Соотв.Вставить("ПС00210003001", "РегионСокращение");
		
		Соотв.Вставить("П000210003002", "МуниципальныйРайонВид");
		Соотв.Вставить("ПС00210003002", "МуниципальныйРайонСокращение");
		Соотв.Вставить("П000210003003", "МуниципальныйРайон");
		
		Соотв.Вставить("П000210003004", "ПоселениеВид");
		Соотв.Вставить("ПС00210003004", "ПоселениеСокращение");
		Соотв.Вставить("П000210003005", "Поселение");
		
		Соотв.Вставить("П000210003006", "НаселенныйПунктВид");
		Соотв.Вставить("ПС00210003006", "НаселенныйПунктСокращение");
		Соотв.Вставить("П000210003007", "НаселенныйПункт");
		
		Соотв.Вставить("П000210003008", "ТерриторияТип");
		Соотв.Вставить("ПС00210003008", "ТерриторияСокращение");
		Соотв.Вставить("П000210003009", "Территория");
		
		Соотв.Вставить("П000210003010", "УлицаТип");
		Соотв.Вставить("ПС00210003010", "УлицаСокращение");
		Соотв.Вставить("П000210003011", "Улица");
		
		Соотв.Вставить("П000210003012", "НомерЗемельногоУчастка");
		
		Соотв.Вставить("П000210003015", "ПомещениеВЗданииТип");
		Соотв.Вставить("П000210003016", "ПомещениеВЗданииНомер");
		
		Соотв.Вставить("П000210003017", "ПомещениеВКвартиреТип");
		Соотв.Вставить("П000210003018", "ПомещениеВКвартиреНомер");
		
		// Многострочные данные (здание, сооружение, объект незавершенного строительства).
		//
		Здания = Новый Массив;
		Здания.Добавить("Здания");
		Здания.Добавить(Новый Структура("П00021М103013, П00021М103014", "ЗданиеТип", "ЗданиеНомер"));
		Соотв.Вставить("П00021М1", Здания);
		
	КонецЕсли;
	
	Возврат Соотв;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресВМестеХраненияИВТабличномДокументе(Результат, ТекстПредупреждения = "")
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
			
			СохранитьДанныеРаздела(ИмяТекРаздела);
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
			Если ТипЗнч(ТекВетка) = Тип("СтрокаДереваЗначений") Тогда
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("Адрес", Результат.Значение);
				ПараметрыЗаполнения.Вставить("СоответствиеПоказателейСтраницыРеквизитамАдреса",
				СоответствиеПоказателейСтраницыРеквизитамАдреса(ИмяТекРаздела));
				ПараметрыЗаполнения.Вставить("ВерсияАдреса", 3);
				
				РегламентированнаяОтчетность.ЗаполнитьАдресВФорматеФИАСНаСтраницеРеглОтчета(ТекВетка, ПараметрыЗаполнения);
				
				// Особая обработка: возможно не более 3 строк множественного
				// показателя "Здание / сооружение / объект незавершенного строительства".
				//
				Если ИмяГлРаздела = "Раздел21" Тогда
					ДеревоМногострочнойЧасти = ТекВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
					Пока ДеревоМногострочнойЧасти.Строки.Количество() > 3 Цикл
						ДеревоМногострочнойЧасти.Строки.Удалить(ДеревоМногострочнойЧасти.Строки.Количество() - 1);
						ТекстПредупреждения = НСтр(
						"ru = 'Возможно не более 3 строк множественного показателя ""Здание / сооружение / объект незавершенного строительства""';
						|en = 'Возможно не более 3 строк множественного показателя ""Здание / сооружение / объект незавершенного строительства""'");
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	Возврат ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												   НаимРаздела,
												   мСтруктураМногоуровневыхРазделов,
												   ТабличныйДокумент,
												   СтруктураРеквизитовФормы);
	
КонецФункции

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ИмяФормы)].ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ОбъектОтчета.ВставитьДопСтроку(ЭтотОбъект.ИмяФормы,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ЭлемСтруктуры.Ключ,
											   ИмяОбластиПреемника, , Элементы);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел22" ИЛИ ИмяРаздела = "Раздел3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	НовВетка = ДеревоРаздела.Строки.Добавить();
	
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел22" ИЛИ ИмяРаздела = "Раздел3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		
		ИмяПервойГрафы = "";
		
		Если СтрНайти(ИмяТекОбласти, СтруктураРеквизитовФормы.мИдГруппы21) > 0 Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы21]["ИменаГраф"][0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПервойГрафы) И ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_3") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более 3 строк множественного показателя ""Здание / сооружение / объект незавершенного строительства""';
			|en = 'Возможно не более 3 строк множественного показателя ""Здание / сооружение / объект незавершенного строительства""'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяТекОбласти);
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ОбъектОтчета.ВставитьДопСтроку(ЭтотОбъект.ИмяФормы,
									   СтруктураРеквизитовФормы,
									   ТабличныйДокумент,
									   ИмяГруппы,
									   ИмяОбластиПреемника, , Элементы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
														|en = 'Не выбрана удаляемая строка многострочного раздела'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбласти);
	ТекИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительныеСтрокиВРазделе21()
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00021М1_2");
	
	Пока Обл <> Неопределено Цикл
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		
		УдалитьДопСтрокуНаСервере();
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00021М1_2");
		
	КонецЦикла;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ПреКоординаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000010003003, ОбластьИмяБезИнд) > 0
					ИЛИ СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000010004003, ОбластьИмяБезИнд) > 0 Тогда
					Инд = 1;
					Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
					Обл = ТДО.Найти("П000010002103" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						ТекСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТДО.Найти("П000010002303" + Инд_Строка).Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТДО.Найти("П000010002503" + Инд_Строка).Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТДО.Найти("П000010002703" + Инд_Строка).Значение);
						ТДО.Найти("П000010003003" + Инд_Строка).Значение = Макс(ТекСумма, 0);
						ТДО.Найти("П000010004003" + Инд_Строка).Значение = - Мин(ТекСумма, 0);
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П000010002103" + Инд_Строка);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020015003, ОбластьИмя) > 0 Тогда
					
					// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
					//
					Строка150
					= (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020002003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020003003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020004003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020005003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020006003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020007003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020008003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020009003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020010003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020011003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020012003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020013003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020014003"].Значение)) / 13;
					
					ТДО["П000020015003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020017003, ОбластьИмя) > 0 Тогда
					
					// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
					//
					Строка170
					= (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020002004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020003004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020004004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020005004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020006004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020007004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020008004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020009004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020010004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020011004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020012004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020013004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020014004"].Значение)) / 13;
					
					ТДО["П000020017003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020019003, ОбластьИмя) > 0 Тогда
					
					// Стр. 190 = Стр. 150 - Стр. 170.
					//
					Строка190 = Макс(0,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020015003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020017003"].Значение));
					
					КодВидаИмущества = СокрЛП(ТДО["П000020000101"].Значение);
					
					Если КодВидаИмущества = "02" Тогда
						
						// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
						//
						Строка180 = ?(ТДО["П000020018003_Знам"].Значение = 0, 0,
						ТДО["П000020018003_Числ"].Значение / ТДО["П000020018003_Знам"].Значение);
						
						ТДО["П000020019003"].Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка190 * Строка180);
						
					Иначе
						
						ТДО["П000020019003"].Значение = Строка190;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020022003, ОбластьИмя) > 0 Тогда
					
					// Стр. 220 = Стр. 190 х Стр. 210 / 100.
					//
					Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ТДО["П000020019003"].Значение) * ТДО["П000020021003"].Значение;
					
					КодВидаИмущества = СокрЛП(ТДО["П000020000101"].Значение);
					
					Если КодВидаИмущества = "04" ИЛИ КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
						
						// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
						//
						Строка215 = СокрЛП(ТДО["П000020021503"].Значение);
						Строка215 = ?(Строка215 = "", 1, Число(Строка215));
						
						Строка220 = Строка220 * Строка215;
						
					КонецЕсли;
					
					ТДО["П000020022003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка220 / 100);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000020026003, ОбластьИмя) > 0 Тогда
					
					КодВидаИмущества = СокрЛП(ТДО["П000020000101"].Значение);
					
					// Стр. 260 = Стр. 220 - Стр. 240.
					//
					Разность220_240
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020022003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020024003"].Значение);
					
					Строка260 = Макс(0, Разность220_240);
					
					Если КодВидаИмущества = "04" Тогда
						
						// Стр. 260 = 0, если Стр. 250 >= (Стр. 220 - Стр. 240).
						// Стр. 260 = Стр. 220 - Стр. 240 - Стр. 250, если Стр. 250 < (Стр. 220 - Стр. 240).
						//
						Строка250
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000020025003"].Значение);
						
						Строка260 = ?(Строка250 >= Разность220_240, 0, Разность220_240 - Строка250);
						
					КонецЕсли;
					
					ТДО["П000020026003"].Значение = Строка260;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000220015003, ОбластьИмя) > 0 Тогда
					
					// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
					//
					Строка150
					= (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220002003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220003003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220004003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220005003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220006003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220007003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220008003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220009003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220010003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220011003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220012003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220013003"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220014003"].Значение)) / 13;
					
					ТДО["П000220015003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000220017003, ОбластьИмя) > 0 Тогда
					
					// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
					//
					Строка170
					= (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220002004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220003004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220004004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220005004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220006004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220007004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220008004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220009004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220010004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220011004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220012004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220013004"].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220014004"].Значение)) / 13;
					
					ТДО["П000220017003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000220019003, ОбластьИмя) > 0 Тогда
					
					// Стр. 190 = Стр. 150 - Стр. 170.
					//
					Строка190 = Макс(0,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220015003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220017003"].Значение));
					
					КодВидаИмущества = СокрЛП(ТДО["П000220000101"].Значение);
					
					Если КодВидаИмущества = "02" Тогда
						
						// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
						//
						Строка180 = ?(ТДО["П000220018003_Знам"].Значение = 0, 0,
						ТДО["П000220018003_Числ"].Значение / ТДО["П000220018003_Знам"].Значение);
						
						ТДО["П000220019003"].Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка190 * Строка180);
						
					Иначе
						
						ТДО["П000220019003"].Значение = Строка190;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000220022003, ОбластьИмя) > 0 Тогда
					
					// Стр. 220 = Стр. 190 х Стр. 210 / 100.
					//
					Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, ТДО["П000220019003"].Значение) * ТДО["П000220021003"].Значение;
					
					КодВидаИмущества = СокрЛП(ТДО["П000220000101"].Значение);
					
					Если КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
						
						// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
						//
						Строка215 = СокрЛП(ТДО["П000220021503"].Значение);
						Строка215 = ?(Строка215 = "", 1, Число(Строка215));
						
						Строка220 = Строка220 * Строка215;
						
					КонецЕсли;
					
					ТДО["П000220022003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка220 / 100);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000220026003, ОбластьИмя) > 0 Тогда
					
					// Стр. 260.
					//
					Разность220_240
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220022003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220024003"].Значение);
					
					КодВидаИмущества = СокрЛП(ТДО["П000220000101"].Значение);
					
					Если КодВидаИмущества = "15" Тогда
						
						// Стр. 260 = 0, если (Стр. 220 - Стр. 240) < 0.
						// Стр. 260 = Стр. 220 - Стр. 240, если (Стр. 220 - Стр. 240) >= 0.
						//
						Строка260 = Макс(0, Разность220_240);
						
					Иначе
						
						// Стр. 260 = 0, если (Стр. 220 - Стр. 240 - Стр. 250) < 0.
						// Стр. 260 = Стр. 220 - Стр. 240 - Стр. 250, если (Стр. 220 - Стр. 240 - Стр. 250) >= 0.
						//
						Строка250
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000220025003"].Значение);
						
						Строка260 = Макс(0, Разность220_240 - Строка250);
						
					КонецЕсли;
					
					ТДО["П000220026003"].Значение = Строка260;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000030006003, ОбластьИмя) > 0 Тогда
					
					// Стр. 060 = (Стр. 020 - Стр. 025) х Стр. 030 х Стр. 050.
					//
					Строка030 = ?(ТДО["П000030003003_Знам"].Значение = 0, 1,
					ТДО["П000030003003_Числ"].Значение / ТДО["П000030003003_Знам"].Значение);
					
					Строка050 = ?(ТДО["П000030005003_Знам"].Значение = 0, 1,
					ТДО["П000030005003_Числ"].Значение / ТДО["П000030005003_Знам"].Значение);
					
					Строка060
					= (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000030002003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000030002503"].Значение))
					* Строка030 * Строка050;
					
					ТДО["П000030006003"].Значение
					= Макс(0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка060));
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000030010003, ОбластьИмя) > 0 Тогда
					
					// Стр. 100 = Стр. 060 х Стр. 080 х Стр. 090 х Стр. 095 / 100.
					//
					Строка090 = ?(ТДО["П000030009003_Знам"].Значение = 0, 1,
					ТДО["П000030009003_Числ"].Значение / ТДО["П000030009003_Знам"].Значение);
					
					Строка095 = ?(ТДО["П000030009503_Знам"].Значение = 0, 1,
					ТДО["П000030009503_Числ"].Значение / ТДО["П000030009503_Знам"].Значение);
					
					Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					ТДО["П000030006003"].Значение) * ТДО["П000030008003"].Значение * Строка090 * Строка095 / 100;
					
					ТДО["П000030010003"].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка100);
					
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000030013003, ОбластьИмя) > 0 Тогда
					
					// Стр. 130 = Стр. 100 - Стр. 120.
					//
					ТДО["П000030013003"].Значение = Макс(0,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000030010003"].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ТДО["П000030012003"].Значение));
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		ВеткаР1 = ДеревоДанных.Строки[0];
		
		ДеревоМнЧ = ВеткаР1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		Если ВеткаР1 = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ТекСумма
			= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000010002103"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000010002303"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000010002503"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П000010002703"]);
			СтрокаМнЧ.Данные.Вставить("П000010003003", Макс(ТекСумма, 0));
			СтрокаМнЧ.Данные.Вставить("П000010004003", - Мин(ТекСумма, 0));
		КонецЦикла;
		
		Если ВеткаР1 = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР2 Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					ВеткаР2.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			КодВидаИмущества = СокрЛП(ВеткаР2.Данные["П000020000101"]);
			
			// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
			//
			Строка150 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020002003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020003003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020004003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020005003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020006003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020007003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020008003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020009003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020010003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020011003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020012003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020013003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020014003"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000020015003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150));
			
			// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
			//
			Строка170 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020002004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020003004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020004004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020005004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020006004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020007004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020008004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020009004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020010004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020011004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020012004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020013004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020014004"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000020017003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170));
			
			// Стр. 190 = Стр. 150 - Стр. 170.
			//
			Строка190 = Макс(0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020015003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020017003"]));
			
			Если КодВидаИмущества = "02" Тогда
				
				// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
				//
				Строка180 = ?(ВеткаР2.Данные["П000020018003_Знам"] = 0, 0,
				ВеткаР2.Данные["П000020018003_Числ"] / ВеткаР2.Данные["П000020018003_Знам"]);
				
				ВеткаР2.Данные.Вставить("П000020019003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Строка190 * Строка180));
				
			Иначе
				
				ВеткаР2.Данные.Вставить("П000020019003", Строка190);
				
			КонецЕсли;
			
			// Стр. 220 = Стр. 190 х Стр. 210 / 100.
			//
			Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000020019003"]) * ВеткаР2.Данные["П000020021003"];
			
			Если КодВидаИмущества = "04" ИЛИ КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
				
				// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
				//
				Строка215 = СокрЛП(ВеткаР2.Данные["П000020021503"]);
				Строка215 = ?(Строка215 = "", 1, Число(Строка215));
				
				Строка220 = Строка220 * Строка215;
				
			КонецЕсли;
			
			ВеткаР2.Данные.Вставить("П000020022003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Строка220 / 100));
			
			// Стр. 260 = Стр. 220 - Стр. 240.
			//
			Разность220_240
			= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000020022003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000020024003"]);
			
			Строка260 = Макс(0, Разность220_240);
			
			Если КодВидаИмущества = "04" Тогда
				
				// Стр. 260 = 0, если Стр. 250 >= (Стр. 220 - Стр. 240).
				// Стр. 260 = Стр. 220 - Стр. 240 - Стр. 250, если Стр. 250 < (Стр. 220 - Стр. 240).
				//
				Строка250
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000020025003"]);
				
				Строка260 = ?(Строка250 >= Разность220_240, 0, Разность220_240 - Строка250);
				
			КонецЕсли;
			
			ВеткаР2.Данные.Вставить("П000020026003", Строка260);
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР2 Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					ВеткаР2.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			КодВидаИмущества = СокрЛП(ВеткаР2.Данные["П000220000101"]);
			
			// Стр. 150 = (Сумма по графе 3 строк с 020 по 140) / 13.
			//
			Строка150 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220002003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220003003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220004003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220005003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220006003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220007003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220008003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220009003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220010003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220011003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220012003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220013003"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220014003"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000220015003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка150));
			
			// Стр. 170 = (Сумма по графе 4 строк с 020 по 140) / 13.
			//
			Строка170 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220002004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220003004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220004004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220005004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220006004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220007004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220008004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220009004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220010004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220011004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220012004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220013004"])
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220014004"])) / 13;
			
			ВеткаР2.Данные.Вставить("П000220017003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка170));
			
			// Стр. 190 = Стр. 150 - Стр. 170.
			//
			Строка190 = Макс(0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220015003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220017003"]));
			
			Если КодВидаИмущества = "02" Тогда
				
				// Стр. 190 = (Стр. 150 - Стр. 170) х Стр. 180.
				//
				Строка180 = ?(ВеткаР2.Данные["П000220018003_Знам"] = 0, 0,
				ВеткаР2.Данные["П000220018003_Числ"] / ВеткаР2.Данные["П000220018003_Знам"]);
				
				ВеткаР2.Данные.Вставить("П000220019003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Строка190 * Строка180));
				
			Иначе
				
				ВеткаР2.Данные.Вставить("П000220019003", Строка190);
				
			КонецЕсли;
			
			// Стр. 220 = Стр. 190 х Стр. 210 / 100.
			//
			Строка220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР2.Данные["П000220019003"]) * ВеткаР2.Данные["П000220021003"];
			
			Если КодВидаИмущества = "09" ИЛИ КодВидаИмущества = "15" Тогда
				
				// Стр. 220 = Стр. 190 х Стр. 210 х Стр. 215 / 100.
				//
				Строка215 = СокрЛП(ВеткаР2.Данные["П000220021503"]);
				Строка215 = ?(Строка215 = "", 1, Число(Строка215));
				
				Строка220 = Строка220 * Строка215;
				
			КонецЕсли;
			
			ВеткаР2.Данные.Вставить("П000220022003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, Строка220 / 100));
			
			// Стр. 260.
			//
			Разность220_240
			= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000220022003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000220024003"]);
			
			Если КодВидаИмущества = "15" Тогда
				
				// Стр. 260 = 0, если (Стр. 220 - Стр. 240) < 0.
				// Стр. 260 = Стр. 220 - Стр. 240, если (Стр. 220 - Стр. 240) >= 0.
				//
				Строка260 = Макс(0, Разность220_240);
				
			Иначе
				
				// Стр. 260 = 0, если (Стр. 220 - Стр. 240 - Стр. 250) < 0.
				// Стр. 260 = Стр. 220 - Стр. 240 - Стр. 250, если (Стр. 220 - Стр. 240 - Стр. 250) >= 0.
				//
				Строка250
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР2.Данные["П000220025003"]);
				
				Строка260 = Макс(0, Разность220_240 - Строка250);
				
			КонецЕсли;
			
			ВеткаР2.Данные.Вставить("П000220026003", Строка260);
			
			Если ВеткаР2 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР2.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР3 Из ДеревоДанных.Строки Цикл
			
			Если ВеткаР3 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР3.Данные Цикл
					ВеткаР3.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			// Стр. 060 = (Стр. 020 - Стр. 025) х Стр. 030 х Стр. 050.
			//
			Строка030 = ?(ВеткаР3.Данные["П000030003003_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030003003_Числ"] / ВеткаР3.Данные["П000030003003_Знам"]);
			
			Строка050 = ?(ВеткаР3.Данные["П000030005003_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030005003_Числ"] / ВеткаР3.Данные["П000030005003_Знам"]);
			
			Строка060 = (РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР3.Данные["П000030002003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
			Форма, ВеткаР3.Данные["П000030002503"])) * Строка030 * Строка050;
			
			ВеткаР3.Данные.Вставить("П000030006003",
			Макс(0, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка060)));
			
			// Стр. 100 = Стр. 060 х Стр. 080 х Стр. 090 х Стр. 095 / 100.
			//
			Строка090 = ?(ВеткаР3.Данные["П000030009003_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030009003_Числ"] / ВеткаР3.Данные["П000030009003_Знам"]);
			
			Строка095 = ?(ВеткаР3.Данные["П000030009503_Знам"] = 0, 1,
			ВеткаР3.Данные["П000030009503_Числ"] / ВеткаР3.Данные["П000030009503_Знам"]);
			
			Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
			ВеткаР3.Данные["П000030006003"]) * ВеткаР3.Данные["П000030008003"] * Строка090 * Строка095 / 100;
			
			ВеткаР3.Данные.Вставить("П000030010003",
			РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Строка100));
			
			// Стр. 130 = Стр. 100 - Стр. 120.
			//
			ВеткаР3.Данные.Вставить("П000030013003", Макс(0
			, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР3.Данные["П000030010003"])
			- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаР3.Данные["П000030012003"])));
			
			Если ВеткаР3 = АктивнаяВетка Тогда
				Для каждого Пок Из ВеткаР3.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ДеревоРаздел1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ДанныеМнЧР1 = ДеревоРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	ТЗ_Авансы = Новый ТаблицаЗначений;
	ТЗ_Авансы.Колонки.Добавить("ПрСЗПК");
	ТЗ_Авансы.Колонки.Добавить("ОКТМО");
	ТЗ_Авансы.Колонки.Добавить("КБК");
	ТЗ_Авансы.Колонки.Добавить("Сум1Кв");
	ТЗ_Авансы.Колонки.Добавить("Сум2Кв");
	ТЗ_Авансы.Колонки.Добавить("Сум3Кв");
	Для каждого СтрокаМнЧР1 Из ДанныеМнЧР1.Строки Цикл
		НоваяСтрокаТЗ_Авансы = ТЗ_Авансы.Добавить();
		НоваяСтрокаТЗ_Авансы.ПрСЗПК = СтрокаМнЧР1.Данные["П000010000703"];
		НоваяСтрокаТЗ_Авансы.ОКТМО  = СтрокаМнЧР1.Данные["П000010001003"];
		НоваяСтрокаТЗ_Авансы.КБК    = СтрокаМнЧР1.Данные["П000010002003"];
		НоваяСтрокаТЗ_Авансы.Сум1Кв = СтрокаМнЧР1.Данные["П000010002303"];
		НоваяСтрокаТЗ_Авансы.Сум2Кв = СтрокаМнЧР1.Данные["П000010002503"];
		НоваяСтрокаТЗ_Авансы.Сум3Кв = СтрокаМнЧР1.Данные["П000010002703"];
	КонецЦикла;
	ТЗ_Авансы.Свернуть("ПрСЗПК,ОКТМО,КБК", "Сум1Кв,Сум2Кв,Сум3Кв");
	
	ИнициализироватьМногоуровневыйРаздел("Раздел1");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПрСЗПК");
	ТЗ.Колонки.Добавить("ОКТМО");
	ТЗ.Колонки.Добавить("КБК");
	ТЗ.Колонки.Добавить("Сумма");
	ДеревоРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	Для каждого ВеткаРаздел2 Из ДеревоРаздел2.Строки Цикл
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.ПрСЗПК = СокрЛП(ВеткаРаздел2.Данные["П000020000201"]);
		НоваяСтрокаТЗ.ОКТМО  = СокрЛП(ВеткаРаздел2.Данные["П000020001001"]);
		НоваяСтрокаТЗ.КБК    = СокрЛП(ВеткаРаздел2.Данные["П000020001100"]);
		НоваяСтрокаТЗ.Сумма  = ВеткаРаздел2.Данные["П000020026003"];
	КонецЦикла;
	ДеревоРаздел22 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"]);
	Для каждого ВеткаРаздел22 Из ДеревоРаздел22.Строки Цикл
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.ПрСЗПК = СокрЛП(ВеткаРаздел22.Данные["П000220000201"]);
		НоваяСтрокаТЗ.ОКТМО  = СокрЛП(ВеткаРаздел22.Данные["П000220001001"]);
		НоваяСтрокаТЗ.КБК    = СокрЛП(ВеткаРаздел22.Данные["П000220001100"]);
		НоваяСтрокаТЗ.Сумма  = ВеткаРаздел22.Данные["П000220026003"];
	КонецЦикла;
	ДеревоРаздел3 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	Для каждого ВеткаРаздел3 Из ДеревоРаздел3.Строки Цикл
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.ПрСЗПК = "";
		НоваяСтрокаТЗ.ОКТМО  = СокрЛП(ВеткаРаздел3.Данные["П000030001001"]);
		НоваяСтрокаТЗ.КБК    = СокрЛП(ВеткаРаздел3.Данные["П000030001100"]);
		НоваяСтрокаТЗ.Сумма  = ВеткаРаздел3.Данные["П000030013003"];
	КонецЦикла;
	ТЗ.Свернуть("ПрСЗПК,ОКТМО,КБК", "Сумма");
	ТЗ.Сортировать("ПрСЗПК,ОКТМО,КБК");
	
	Если ТЗ.Количество() > 0 Тогда
		СтрокаТЗ = ТЗ[0];
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ПрСЗПК) И НЕ ЗначениеЗаполнено(СтрокаТЗ.ОКТМО)
			И НЕ ЗначениеЗаполнено(СтрокаТЗ.КБК) И НЕ ЗначениеЗаполнено(СтрокаТЗ.Сумма) Тогда
			ТЗ.Удалить(СтрокаТЗ);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРаздел1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	ДанныеМнЧР1 = ДеревоРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	Для Инд = 0 По ТЗ.Количество() - 1 Цикл
		
		СтрокаТЗ = ТЗ[Инд];
		
		Если Инд = 0 Тогда
			СтрокаМнЧР1 = ДанныеМнЧР1.Строки[0];
		Иначе
			СтрокаМнЧР1 = ДанныеМнЧР1.Строки.Добавить();
			СтрокаМнЧР1.Данные = Новый Структура;
			СтрокаМнЧР1.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		
		ДанныеСтрокиМнЧР1 = СтрокаМнЧР1.Данные;
		
		ДанныеСтрокиМнЧР1.Вставить("П000010000703", СтрокаТЗ.ПрСЗПК);
		ДанныеСтрокиМнЧР1.Вставить("П000010001003", СтрокаТЗ.ОКТМО);
		ДанныеСтрокиМнЧР1.Вставить("П000010002003", СтрокаТЗ.КБК);
		ДанныеСтрокиМнЧР1.Вставить("П000010002103", СтрокаТЗ.Сумма);
		
		СтрокиТЗ_Авансы = ТЗ_Авансы.НайтиСтроки(Новый Структура(
		"ПрСЗПК,ОКТМО,КБК", СтрокаТЗ.ПрСЗПК, СтрокаТЗ.ОКТМО, СтрокаТЗ.КБК));
		Если СтрокиТЗ_Авансы.Количество() > 0 Тогда
			ДанныеСтрокиМнЧР1.Вставить("П000010002303", СтрокиТЗ_Авансы[0].Сум1Кв);
			ДанныеСтрокиМнЧР1.Вставить("П000010002503", СтрокиТЗ_Авансы[0].Сум2Кв);
			ДанныеСтрокиМнЧР1.Вставить("П000010002703", СтрокиТЗ_Авансы[0].Сум3Кв);
		Иначе
			ДанныеСтрокиМнЧР1.Вставить("П000010002303", 0);
			ДанныеСтрокиМнЧР1.Вставить("П000010002503", 0);
			ДанныеСтрокиМнЧР1.Вставить("П000010002703", 0);
		КонецЕсли;
		
		ТекСумма
		= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, ДанныеСтрокиМнЧР1["П000010002103"])
		- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, ДанныеСтрокиМнЧР1["П000010002303"])
		- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, ДанныеСтрокиМнЧР1["П000010002503"])
		- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, ДанныеСтрокиМнЧР1["П000010002703"]);
		
		ДанныеСтрокиМнЧР1.Вставить("П000010003003", Макс(ТекСумма, 0));
		ДанныеСтрокиМнЧР1.Вставить("П000010004003", - Мин(ТекСумма, 0));
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздел1, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
		РасчетНаСервере("Раздел1", "П000010002103_1");
	Иначе
		РасчетНаСервере("Раздел1");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 3.
	Структ = Новый Структура;
	Структ.Вставить("П000030006003", "П000030002003;П000030002503;П000030003003_Числ;П000030003003_Знам;П000030005003_Числ;П000030005003_Знам");
	Структ.Вставить("П000030010003", "П000030002003;П000030002503;П000030003003_Числ;П000030003003_Знам;П000030005003_Числ;П000030005003_Знам;П000030008003;П000030009003_Числ;П000030009003_Знам;П000030009503_Числ;П000030009503_Знам");
	Структ.Вставить("П000030013003", "П000030002003;П000030002503;П000030003003_Числ;П000030003003_Знам;П000030005003_Числ;П000030005003_Знам;П000030008003;П000030009003_Числ;П000030009003_Знам;П000030009503_Числ;П000030009503_Знам;П000030011003_КодЛьготы;П000030012003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
	// Раздел 2.2.
	Структ = Новый Структура;
	Структ.Вставить("П000220015003", "П000220002003;П000220003003;П000220004003;П000220005003;П000220006003;П000220007003;П000220008003;П000220009003;П000220010003;П000220011003;П000220012003;П000220013003;П000220014003");
	Структ.Вставить("П000220017003", "П000220002004;П000220003004;П000220004004;П000220005004;П000220006004;П000220007004;П000220008004;П000220009004;П000220010004;П000220011004;П000220012004;П000220013004;П000220014004");
	Структ.Вставить("П000220019003", "П000220000101;П000220002003;П000220003003;П000220004003;П000220005003;П000220006003;П000220007003;П000220008003;П000220009003;П000220010003;П000220011003;П000220012003;П000220013003;П000220014003;П000220002004;П000220003004;П000220004004;П000220005004;П000220006004;П000220007004;П000220008004;П000220009004;П000220010004;П000220011004;П000220012004;П000220013004;П000220014004;П000220018003_Числ;П000220018003_Знам");
	Структ.Вставить("П000220022003", "П000220000101;П000220002003;П000220003003;П000220004003;П000220005003;П000220006003;П000220007003;П000220008003;П000220009003;П000220010003;П000220011003;П000220012003;П000220013003;П000220014003;П000220002004;П000220003004;П000220004004;П000220005004;П000220006004;П000220007004;П000220008004;П000220009004;П000220010004;П000220011004;П000220012004;П000220013004;П000220014004;П000220018003_Числ;П000220018003_Знам;П000220021003;П000220021503");
	Структ.Вставить("П000220026003", "П000220000101;П000220002003;П000220003003;П000220004003;П000220005003;П000220006003;П000220007003;П000220008003;П000220009003;П000220010003;П000220011003;П000220012003;П000220013003;П000220014003;П000220002004;П000220003004;П000220004004;П000220005004;П000220006004;П000220007004;П000220008004;П000220009004;П000220010004;П000220011004;П000220012004;П000220013004;П000220014004;П000220018003_Числ;П000220018003_Знам;П000220021003;П000220021503;П000220023003_КодЛьготы;П000220024003;П000220025003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел22", Структ);
	
	// Раздел 2.
	Структ = Новый Структура;
	Структ.Вставить("П000020015003", "П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003");
	Структ.Вставить("П000020017003", "П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004");
	Структ.Вставить("П000020019003", "П000020000101;П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003;П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004;П000020018003_Числ;П000020018003_Знам");
	Структ.Вставить("П000020022003", "П000020000101;П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003;П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004;П000020018003_Числ;П000020018003_Знам;П000020021003;П000020021503");
	Структ.Вставить("П000020026003", "П000020000101;П000020002003;П000020003003;П000020004003;П000020005003;П000020006003;П000020007003;П000020008003;П000020009003;П000020010003;П000020011003;П000020012003;П000020013003;П000020014003;П000020002004;П000020003004;П000020004004;П000020005004;П000020006004;П000020007004;П000020008004;П000020009004;П000020010004;П000020011004;П000020012004;П000020013004;П000020014004;П000020018003_Числ;П000020018003_Знам;П000020021003;П000020021503;П000020023003_КодЛьготы;П000020024003;П000020025003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
	// Раздел 1.
	Структ = Новый Структура;
	Структ.Вставить("П000010003003", "П000010002103;П000010002303;П000010002503;П000010002703");
	Структ.Вставить("П000010004003", "П000010002103;П000010002303;П000010002503;П000010002703");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки512");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
																	|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки512");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
															|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки512");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ДеревоВыгрузки = Неопределено;
	
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	ТекстВыгр = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	СохрСтруктура = Неопределено;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи",  Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("КодНООб",  СокрЛП(Титульный.НалоговыйОрганПоМестуОН));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ИмущНД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_IMUD"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	СохрСтруктура = Неопределено;
	
	ВозможныеСимволы56КПП_Строка = "01, 51, 52, 55, 56, 63, 64, 65, 91, 92, 70, 4A, 4B, 4C, 4D, 4E, 4F";
	ВозможныеСимволы56КПП = СтрРазделить(ВозможныеСимволы56КПП_Строка, ", ", Ложь);
	
	ВозможныеКодыПериода = ВозможныеЗначенияИзСпискаВыбораПоказателя("Период");
	
	ВозможныеКодыПоМесту = ВозможныеЗначенияИзСпискаВыбораПоказателя("ПоМесту");
	
	ВозможныеКодыФормыРеорганизции = ВозможныеЗначенияИзСпискаВыбораПоказателя("КодФормыРеорганизации");
	
	// Титульный лист.
	//
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	Иначе
		Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
		Если ВозможныеСимволы56КПП.Найти(Символы56КПП) = Неопределено Тогда
			СообщитьВТС("5-й и 6-й символы в КПП налогоплательщика не должны быть равны " + Символы56КПП
			+ ". Возможны значения: " + ВозможныеСимволы56КПП_Строка, "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места нахождения (учета)", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.МассивЗначений.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места нахождения (учета). Возможны значения: "
		+ ВозможныеКодыПоМесту.СтрокаЗначений, "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли (ПараметрыВыгрузки.ПоМесту = "213" ИЛИ ПараметрыВыгрузки.ПоМесту = "216")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНООб) Тогда
		СообщитьВТС("Код налогового органа по месту нахождения объекта налогообложения должен быть указан"
		+ " при заданном значении кода места нахождения (учета)", "Титульный", "НалоговыйОрганПоМестуОН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ (ПараметрыВыгрузки.ПоМесту = "213" ИЛИ ПараметрыВыгрузки.ПоМесту = "216")
		И ЗначениеЗаполнено(ПараметрыВыгрузки.КодНООб) Тогда
		СообщитьВТС("Код налогового органа по месту нахождения объекта налогообложения не должен быть указан,"
		+ " если значение кода места нахождения (учета) не равно 213 или 216", "Титульный", "НалоговыйОрганПоМестуОН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.МассивЗначений.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода. Возможны значения: "
		+ ВозможныеКодыПериода.СтрокаЗначений, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.МассивЗначений.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации. Возможны значения: "
				+ ВозможныеКодыФормыРеорганизции.СтрокаЗначений, "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				Иначе
					Символы56КПП = Сред(ПараметрыВыгрузки.КППРеорг, 5, 2);
					Если Символы56КПП = "50" Тогда
						СообщитьВТС("5-й и 6-й символы КПП реорганизованной организации не должны быть равны 50",
						"Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВозможныеКоды1_2 = СтрРазделить("1,2", ",", Ложь);
	КодыКоды1_2ДляСообщения = СтрСоединить(ВозможныеКоды1_2, ", ");
	
	ВозможныеКоды1_4 = СтрРазделить("1,2,3,4", ",", Ложь);
	КодыКоды1_4ДляСообщения = СтрСоединить(ВозможныеКоды1_4, ", ");
	
	ВозможныеКоды1_5 = СтрРазделить("1,2,3,4,5", ",", Ложь);
	КодыКоды1_5ДляСообщения = СтрСоединить(ВозможныеКоды1_5, ", ");
	
	ВозможныеКоды1_6 = СтрРазделить("1,2,3,4,5,6", ",", Ложь);
	КодыКоды1_6ДляСообщения = СтрСоединить(ВозможныеКоды1_6, ", ");
	
	ВозможныеКоды1__3_6 = СтрРазделить("1,3,4,5,6", ",", Ложь);
	КодыКоды1__3_6ДляСообщения = СтрСоединить(ВозможныеКоды1__3_6, ", ");
	
	// Таблица для проверки сочетаний значений (признака СЗПК, кода по ОКТМО и КБК) раздела 1 с разделами 2, 2.1, 2.2, 3.
	//
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("ПрСЗПК");
	СочетаниеРазделов.Колонки.Добавить("ОКТМО");
	СочетаниеРазделов.Колонки.Добавить("КБК");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик1",  Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик2",  Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик21", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик22", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик3",  Новый ОписаниеТипов("Число"));
	
	СочетаниеРазделов.Индексы.Добавить("Раздел");
	
	ВозможныеПризнакиСЗПК = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000010000703");
	
	// Раздел 1.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1;
	ДанныеМногострочнойЧастиРаздела1
	= ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	НомерСтраницы = 1;
	
	Для каждого СтрокаМнЧРаздела1 Из ДанныеМногострочнойЧастиРаздела1.Строки Цикл
		
		ЗаполненаСтрокаМнЧРаздела1 = Ложь;
		Для каждого Эл Из СтрокаМнЧРаздела1.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтрокаМнЧРаздела1 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтрокаМнЧРаздела1 Тогда
			
			НомСтроки = Формат(ДанныеМногострочнойЧастиРаздела1.Строки.Индекс(СтрокаМнЧРаздела1) + 1, "ЧГ=");
			
			ИмяПокПрСЗПК = "П000010000703";
			ИмяПокОКТМО  = "П000010001003";
			ИмяПокКБК    = "П000010002003";
			
			ИмяОблПрСЗПК = ИмяПокПрСЗПК + "_" + НомСтроки;
			ИмяОблОКТМО  = ИмяПокОКТМО + "_" + НомСтроки;
			ИмяОблКБК    = ИмяПокКБК   + "_" + НомСтроки;
			
			ПрСЗПК = СокрЛП(СтрокаМнЧРаздела1.Данные[ИмяПокПрСЗПК]);
			ОКТМО  = СокрЛП(СтрокаМнЧРаздела1.Данные[ИмяПокОКТМО]);
			КБК    = СокрЛП(СтрокаМнЧРаздела1.Данные[ИмяПокКБК]);
			
			Если ЗначениеЗаполнено(ПрСЗПК) И ВозможныеПризнакиСЗПК.МассивЗначений.Найти(ПрСЗПК) = Неопределено Тогда
				СообщитьВТС("В " + НомСтроки + "-й группе строк 007-040 раздела 1 признак СЗПК может принимать одно из значений: "
				+ ВозможныеПризнакиСЗПК.СтрокаЗначений, "Раздел1", ИмяОблПрСЗПК, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("В " + НомСтроки + "-й группе строк 007-040 раздела 1 не" + ?(ДлинаОКТМО = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел1", ИмяОблОКТМО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("В " + НомСтроки + "-й группе строк 007-040 раздела 1 не" + ?(ДлинаКБК = 0, "", "верно")
				+ " задан КБК", "Раздел1", ИмяОблКБК, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаМнЧРаздела1.Данные["П000010003003"])
				И ЗначениеЗаполнено(СтрокаМнЧРаздела1.Данные["П000010004003"]) Тогда
				СообщитьВТС("В " + НомСтроки
				+ "-й группе строк 007-040 раздела 1 не должны быть одновременно заданы строки 030 и 040",
				"Раздел1", "П000010003003_" + НомСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ПрСЗПК     = ?(ЗначениеЗаполнено(ПрСЗПК), ПрСЗПК, "(не задан)");
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 1;
			Сочетание.Страница   = 1;
			Сочетание.ИмяОбласти = ИмяОблПрСЗПК;
			Сочетание.Счетчик1   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел2;
	
	ВозможныеКодыВидаИмуществаРаздела2 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000020000101");
	
	ВозможныеКодыНалоговойЛьготыРаздела2 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000020023003_КодЛьготы");
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодВидаИмущества = СокрЛП(СтраницаРаздела.Данные.П000020000101);
			Если НЕ ЗначениеЗаполнено(КодВидаИмущества) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не задан код вида имущества",
				"Раздел2", "П000020000101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыВидаИмуществаРаздела2.МассивЗначений.Найти(КодВидаИмущества) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 код вида имущества должен принимать одно из значений: "
				+ ВозможныеКодыВидаИмуществаРаздела2.СтрокаЗначений, "Раздел2", "П000020000101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПрСЗПК = СокрЛП(СтраницаРаздела.Данные.П000020000201);
			Если ЗначениеЗаполнено(ПрСЗПК) И ВозможныеПризнакиСЗПК.МассивЗначений.Найти(ПрСЗПК) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 признак СЗПК может принимать одно из значений: "
				+ ВозможныеПризнакиСЗПК.СтрокаЗначений, "Раздел2", "П000020000201", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000020001001);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не" + ?(ДлинаОКТМО = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел2", "П000020001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000020001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 не" + ?(ДлинаКБК = 0, "", "верно")
				+ " задан КБК", "Раздел2", "П000020001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы.
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000020016003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 задан код налоговой льготы некорректной длины",
				"Раздел2", "П000020016003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля балансовой стоимости.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 не задан числитель в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел2", "П000020018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000020018003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 не задан знаменатель в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел2", "П000020018003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000020018003_Числ > СтраницаРаздела.Данные.П000020018003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2 числитель больше знаменателя в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел2", "П000020018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли КодВидаИмущества = "02" Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2 не задана доля балансовой стоимости объекта недвижимого имущества"
				+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
				"Раздел2", "П000020018003_Числ", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (установленной в виде понижения налоговой ставки).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000020020003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2 задан код налоговой льготы (установленной в виде понижения налоговой ставки) некорректной длины",
				"Раздел2", "П000020020003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).
			КодЛьготы = СокрЛП(СтраницаРаздела.Данные.П000020023003_КодЛьготы);
			Если ЗначениеЗаполнено(КодЛьготы)
				И ВозможныеКодыНалоговойЛьготыРаздела2.МассивЗначений.Найти(КодЛьготы) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2 задан некорректный код налоговой льготы "
				+ "(в виде уменьшения суммы налога, подлежащей уплате в бюджет). Возможно значение: "
				+ ВозможныеКодыНалоговойЛьготыРаздела2.СтрокаЗначений, "Раздел2", "П000020023003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ПрСЗПК       = ?(ЗначениеЗаполнено(ПрСЗПК), ПрСЗПК, "(не задан)");
			Сочетание.ОКТМО        = ОКТМО;
			Сочетание.КБК          = КБК;
			Сочетание.Раздел       = 2;
			Сочетание.Страница     = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти   = "П000020000201";
			Сочетание.Счетчик2     = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.1.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел21;
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеМногострочнойЧастиРаздела21 = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
		
		Если НЕ ЗаполненаСтраницаРаздела Тогда
			Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
				Для каждого Эл Из СтрокаМнЧРаздела21.Данные Цикл
					Если ЗначениеЗаполнено(Эл.Значение) Тогда
						ЗаполненаСтраницаРаздела = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗаполненаСтраницаРаздела Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ПрСЗПК = СокрЛП(СтраницаРаздела.Данные.П000210000200);
			Если ЗначениеЗаполнено(ПрСЗПК) И ВозможныеПризнакиСЗПК.МассивЗначений.Найти(ПрСЗПК) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 признак СЗПК может принимать одно из значений: "
				+ ВозможныеПризнакиСЗПК.СтрокаЗначений, "Раздел21", "П000210000200", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000210001000);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаОКТМО = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел21", "П000210001000", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000210001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаКБК = 0, "", "верно")
				+ " задан КБК", "Раздел21", "П000210001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодНомОбъект = СокрЛП(СтраницаРаздела.Данные.П000210001001);
			Если НЕ ЗначениеЗаполнено(КодНомОбъект) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан код номера объекта",
				"Раздел21", "П000210001001", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКоды1__3_6.Найти(КодНомОбъект) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 код номера объекта должен принимать одно из значений: "
				+ КодыКоды1__3_6ДляСообщения, "Раздел21", "П000210001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомОбъект = СокрЛП(СтраницаРаздела.Данные.П000210002001);
			Если НЕ ЗначениеЗаполнено(НомОбъект) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан номер объекта",
				"Раздел21", "П000210002001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если КодНомОбъект = "3" Тогда
				
				КодРегиона = СокрЛП(СтраницаРаздела.Данные.П000210003001);
				ДлинаКодРегиона = СтрДлина(КодРегиона);
				Если ДлинаКодРегиона <> 2 Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не" + ?(ДлинаКодРегиона = 0, "", "верно")
					+ " задан код субъекта Российской Федерации", "Раздел21", "П000210003001", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				МуниципВид  = СокрЛП(СтраницаРаздела.Данные.П000210003002);
				МуниципНаим = СокрЛП(СтраницаРаздела.Данные.П000210003003);
				Если (ЗначениеЗаполнено(КодРегиона) И КодРегиона <> "99")
					ИЛИ (ЗначениеЗаполнено(МуниципВид) ИЛИ ЗначениеЗаполнено(МуниципНаим)) Тогда
					Если НЕ ЗначениеЗаполнено(МуниципВид) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан вид муниципального образования",
						"Раздел21", "П000210003002", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеКоды1_5.Найти(МуниципВид) = Неопределено Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 вид муниципального образования должен принимать одно из значений: "
						+ КодыКоды1_5ДляСообщения, "Раздел21", "П000210003002", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(МуниципНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задано наименование муниципального образования",
						"Раздел21", "П000210003003", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПоселенВид  = СокрЛП(СтраницаРаздела.Данные.П000210003004);
				ПоселенНаим = СокрЛП(СтраницаРаздела.Данные.П000210003005);
				Если ЗначениеЗаполнено(ПоселенВид) ИЛИ ЗначениеЗаполнено(ПоселенНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ПоселенВид) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан вид поселения (территории)",
						"Раздел21", "П000210003004", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеКоды1_4.Найти(ПоселенВид) = Неопределено Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 вид поселения (территории) должен принимать одно из значений: "
						+ КодыКоды1_4ДляСообщения, "Раздел21", "П000210003004", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПоселенНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задано наименование поселения (территории)",
						"Раздел21", "П000210003005", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НаселенПунктВид  = СокрЛП(СтраницаРаздела.Данные.П000210003006);
				НаселенПунктНаим = СокрЛП(СтраницаРаздела.Данные.П000210003007);
				Если ЗначениеЗаполнено(НаселенПунктВид) ИЛИ ЗначениеЗаполнено(НаселенПунктНаим) Тогда
					Если НЕ ЗначениеЗаполнено(НаселенПунктВид) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан вид населенного пункта",
						"Раздел21", "П000210003006", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НаселенПунктНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задано наименование населенного пункта",
						"Раздел21", "П000210003007", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЭлПланСтруктурТип  = СокрЛП(СтраницаРаздела.Данные.П000210003008);
				ЭлПланСтруктурНаим = СокрЛП(СтраницаРаздела.Данные.П000210003009);
				Если ЗначениеЗаполнено(ЭлПланСтруктурТип) ИЛИ ЗначениеЗаполнено(ЭлПланСтруктурНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ЭлПланСтруктурТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан тип элемента планировочной структуры",
						"Раздел21", "П000210003008", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ЭлПланСтруктурНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задано наименование элемента планировочной структуры",
						"Раздел21", "П000210003009", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЭлУлДорСетиТип  = СокрЛП(СтраницаРаздела.Данные.П000210003010);
				ЭлУлДорСетиНаим = СокрЛП(СтраницаРаздела.Данные.П000210003011);
				Если ЗначениеЗаполнено(ЭлУлДорСетиТип) ИЛИ ЗначениеЗаполнено(ЭлУлДорСетиНаим) Тогда
					Если НЕ ЗначениеЗаполнено(ЭлУлДорСетиТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан тип элемента улично-дорожной сети",
						"Раздел21", "П000210003010", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ЭлУлДорСетиНаим) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задано наименование элемента улично-дорожной сети",
						"Раздел21", "П000210003011", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				КолСтрокРаздела21 = ДанныеМногострочнойЧастиРаздела21.Строки.Количество();
				Если КолСтрокРаздела21 > 3 Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 возможно не более 3 строк множественного показателя ""Здание / сооружение / объект незавершенного строительства""",
					"Раздел21", "П00021М103013_" + Формат(КолСтрокРаздела21, "ЧГ="), НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
						ЗданиеТип   = СокрЛП(СтрокаМнЧРаздела21.Данные.П00021М103013);
						ЗданиеНомер = СокрЛП(СтрокаМнЧРаздела21.Данные.П00021М103014);
						Если ЗначениеЗаполнено(ЗданиеТип) ИЛИ ЗначениеЗаполнено(ЗданиеНомер) Тогда
							НомСтрМнЧ = Формат(ДанныеМногострочнойЧастиРаздела21.Строки.Индекс(СтрокаМнЧРаздела21) + 1, "ЧГ=");
							Если НЕ ЗначениеЗаполнено(ЗданиеТип) Тогда
								СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1" + ?(КолСтрокРаздела21 > 1, " в строке "
								+ НомСтрМнЧ, "") + " не задан тип здания / сооружения / объекта незавершенного строительства",
								"Раздел21", "П00021М103013_" + НомСтрМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(ЗданиеНомер) Тогда
								СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1" + ?(КолСтрокРаздела21 > 1, " в строке "
								+ НомСтрМнЧ, "") + " не задан номер здания / сооружения / объекта незавершенного строительства",
								"Раздел21", "П00021М103014_" + НомСтрМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ПомещЗданияТип   = СокрЛП(СтраницаРаздела.Данные.П000210003015);
				ПомещЗданияНомер = СокрЛП(СтраницаРаздела.Данные.П000210003016);
				Если ЗначениеЗаполнено(ПомещЗданияТип) ИЛИ ЗначениеЗаполнено(ПомещЗданияНомер) Тогда
					Если НЕ ЗначениеЗаполнено(ПомещЗданияТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан тип помещения в пределах здания, сооружения / машино-места",
						"Раздел21", "П000210003015", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПомещЗданияНомер) Тогда
						СообщитьВТС("На странице " + НомСтраницы
						+ " раздела 2.1 не задан номер помещения в пределах здания, сооружения / машино-места",
						"Раздел21", "П000210003016", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПомещКвартирыТип   = СокрЛП(СтраницаРаздела.Данные.П000210003017);
				ПомещКвартирыНомер = СокрЛП(СтраницаРаздела.Данные.П000210003018);
				Если ЗначениеЗаполнено(ПомещКвартирыТип) ИЛИ ЗначениеЗаполнено(ПомещКвартирыНомер) Тогда
					Если НЕ ЗначениеЗаполнено(ПомещКвартирыТип) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан тип помещения в пределах квартиры",
						"Раздел21", "П000210003017", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ПомещКвартирыНомер) Тогда
						СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан номер помещения в пределах квартиры",
						"Раздел21", "П000210003018", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ВывестиСообщение_ЗаполненаСтрока030 = Ложь;
				ИмяПок = Неопределено;
				
				Для Ном = 1 По 18 Цикл
					Если Ном = 13 ИЛИ Ном = 14 Тогда
						Продолжить;
					КонецЕсли;
					ИмяПок = "П0002100030" + Формат(Ном, "ЧЦ=2;ЧВН=;ЧН=");
					Если ЗначениеЗаполнено(СтраницаРаздела.Данные[ИмяПок]) Тогда
						ВывестиСообщение_ЗаполненаСтрока030 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ВывестиСообщение_ЗаполненаСтрока030 Тогда
					Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
						Для каждого Эл Из СтрокаМнЧРаздела21.Данные Цикл
							Если ЗначениеЗаполнено(Эл.Значение) Тогда
								ИмяПок = Эл.Ключ + "_"
								+ Формат(ДанныеМногострочнойЧастиРаздела21.Строки.Индекс(СтрокаМнЧРаздела21) + 1, "ЧГ=");
								ВывестиСообщение_ЗаполненаСтрока030 = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ВывестиСообщение_ЗаполненаСтрока030 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ВывестиСообщение_ЗаполненаСтрока030 Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 строка 030 не должна быть заполнена, если значение в строке 010 не равно 3",
					"Раздел21", ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			КодОКОФ = СокрЛП(СтраницаРаздела.Данные.П000210004003);
			КодОКОФ = СтрЗаменить(КодОКОФ, " ", "");
			Если НЕ ЗначениеЗаполнено(КодОКОФ) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.1 не задан код ОКОФ",
				"Раздел21", "П000210004003", НомСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ШаблоныОКОФ = Неопределено;
				Если НЕ ОКОФСоответствуетШаблонам(КодОКОФ, ШаблоныОКОФ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.1 задан некорректный код ОКОФ. Допустимы значения, соответствующие шаблонам: "
					+ СтрЗаменить(СтрСоединить(ШаблоныОКОФ, ", "), "9", "Х") + " (Х - любая цифра)",
					"Раздел21", "П000210004003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ПрСЗПК     = ?(ЗначениеЗаполнено(ПрСЗПК), ПрСЗПК, "(не задан)");
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 21;
			Сочетание.Страница   = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти = "П000210000200";
			Сочетание.Счетчик21  = 1;
			
		КонецЕсли;
		
		Если ТаблицаСообщений.Количество() >= 100 Тогда
			Возврат СтатусПроверки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 2.2.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел22;
	
	ВозможныеКодыВидаИмуществаРаздела22 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000220000101");
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодВидаИмущества = СокрЛП(СтраницаРаздела.Данные.П000220000101);
			Если НЕ ЗначениеЗаполнено(КодВидаИмущества) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 не задан код вида имущества",
				"Раздел22", "П000220000101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыВидаИмуществаРаздела22.МассивЗначений.Найти(КодВидаИмущества) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 код вида имущества должен принимать одно из значений: "
				+ ВозможныеКодыВидаИмуществаРаздела22.СтрокаЗначений, "Раздел22", "П000220000101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПрСЗПК = СокрЛП(СтраницаРаздела.Данные.П000220000201);
			Если ЗначениеЗаполнено(ПрСЗПК) И ВозможныеПризнакиСЗПК.МассивЗначений.Найти(ПрСЗПК) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 признак СЗПК может принимать одно из значений: "
				+ ВозможныеПризнакиСЗПК.СтрокаЗначений, "Раздел22", "П000220000201", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000220001001);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 не" + ?(ДлинаОКТМО = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел22", "П000220001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000220001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 не" + ?(ДлинаКБК = 0, "", "верно")
				+ " задан КБК", "Раздел22", "П000220001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодНомераОбъекта = СокрЛП(СтраницаРаздела.Данные.П000220001101);
			Если НЕ ЗначениеЗаполнено(КодНомераОбъекта) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 не задан код номера объекта",
				"Раздел22", "П000220001101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКоды1_2.Найти(КодНомераОбъекта) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 код номера объекта должен принимать одно из значений: "
				+ КодыКоды1_2ДляСообщения, "Раздел22", "П000220001101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Номер объекта.
			Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000220001201) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 не задан номер объекта",
				"Раздел22", "П000220001201", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы.
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000220016003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 задан код налоговой льготы некорректной длины",
				"Раздел22", "П000220016003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля балансовой стоимости.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000220018003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000220018003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000220018003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.2 не задан числитель в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел22", "П000220018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000220018003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.2 не задан знаменатель в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел22", "П000220018003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000220018003_Числ > СтраницаРаздела.Данные.П000220018003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 2.2 числитель больше знаменателя в доле балансовой стоимости объекта недвижимого имущества"
					+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
					"Раздел22", "П000220018003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли КодВидаИмущества = "02" Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 2.2 не задана доля балансовой стоимости объекта недвижимого имущества"
				+ " на территории соответствующего субъекта Российской Федерации, федеральной территории ""Сириус""",
				"Раздел22", "П000220018003_Числ", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (установленной в виде понижения налоговой ставки).
			КодЛьготы = СокрЛП(СтраницаРаздела.Данные.П000220020003_КодЛьготы);
			Если ЗначениеЗаполнено(КодЛьготы) И КодЛьготы <> "2012400" Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 задан некорректный код налоговой льготы "
				+ "(установленной в виде понижения налоговой ставки). Возможно значение: 2012400",
				"Раздел22", "П000220020003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).
			КодЛьготы = СокрЛП(СтраницаРаздела.Данные.П000220023003_КодЛьготы);
			Если ЗначениеЗаполнено(КодЛьготы) И КодЛьготы <> "2012500" Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 задан некорректный код налоговой льготы "
				+ "(в виде уменьшения суммы налога, подлежащей уплате в бюджет). Возможно значение: 2012500",
				"Раздел22", "П000220023003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Код налоговой льготы для СЗПК.
			КодЛьготы = СокрЛП(СтраницаРаздела.Данные.П000220024503);
			Если ЗначениеЗаполнено(КодЛьготы) И КодЛьготы <> "2010601" Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 2.2 задан некорректный код налоговой льготы "
				+ "для СЗПК. Возможно значение: 2010601", "Раздел22", "П000220024503", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ПрСЗПК       = ?(ЗначениеЗаполнено(ПрСЗПК), ПрСЗПК, "(не задан)");
			Сочетание.ОКТМО        = ОКТМО;
			Сочетание.КБК          = КБК;
			Сочетание.Раздел       = 22;
			Сочетание.Страница     = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти   = "П000220000201";
			Сочетание.Счетчик22    = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел3;
	
	ВозможныеКодыВидаИмуществаРаздела3 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000030000101");
	
	ВозможныеКодыНалоговойЛьготыРаздела3 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000030011003_КодЛьготы");
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		ЗаполненаСтраницаРаздела = Ложь;
		Для каждого Эл Из СтраницаРаздела.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтраницаРаздела = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтраницаРаздела Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			КодВидаИмущества = СокрЛП(СтраницаРаздела.Данные.П000030000101);
			Если НЕ ЗначениеЗаполнено(КодВидаИмущества) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан код вида имущества",
				"Раздел3", "П000030000101", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыВидаИмуществаРаздела3.МассивЗначений.Найти(КодВидаИмущества) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 код вида имущества должен принимать одно из значений: "
				+ ВозможныеКодыВидаИмуществаРаздела3.СтрокаЗначений, "Раздел3", "П000030000101", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(СтраницаРаздела.Данные.П000030001001);
			ДлинаОКТМО = СтрДлина(ОКТМО);
			Если ДлинаОКТМО <> 11 И ДлинаОКТМО <> 8 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не" + ?(ДлинаОКТМО = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел3", "П000030001001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КБК = СокрЛП(СтраницаРаздела.Данные.П000030001100);
			ДлинаКБК = СтрДлина(КБК);
			Если ДлинаКБК <> 20 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не" + ?(ДлинаКБК = 0, "", "верно")
				+ " задан КБК", "Раздел3", "П000030001100", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодВидаСведений = СокрЛП(СтраницаРаздела.Данные.П000030001401);
			Если НЕ ЗначениеЗаполнено(КодВидаСведений) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан код вида сведений",
				"Раздел3", "П000030001401", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКоды1_2.Найти(КодВидаСведений) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 код вида сведений должен принимать одно из значений: "
				+ КодыКоды1_2ДляСообщения, "Раздел3", "П000030001401", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Кадастровый номер.
			Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030001501) Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан кадастровый номер",
				"Раздел3", "П000030001501", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля в праве общей собственности.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан числитель в доле в праве общей собственности",
					"Раздел3", "П000030003003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан знаменатель в доле в праве общей собственности",
					"Раздел3", "П000030003003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030003003_Числ > СтраницаРаздела.Данные.П000030003003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле в праве общей собственности",
					"Раздел3", "П000030003003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Доля кадастровой стоимости здания.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан числитель в доле кадастровой стоимости здания",
					"Раздел3", "П000030003503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030003503_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан знаменатель в доле кадастровой стоимости здания",
					"Раздел3", "П000030003503_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030003503_Числ > СтраницаРаздела.Данные.П000030003503_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле кадастровой стоимости здания",
					"Раздел3", "П000030003503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Код налоговой льготы.
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000030004003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 задан код налоговой льготы некорректной длины",
				"Раздел3", "П000030004003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Доля кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан числитель в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации",
					"Раздел3", "П000030005003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030005003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 не задан знаменатель в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации",
					"Раздел3", "П000030005003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030005003_Числ > СтраницаРаздела.Данные.П000030005003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы
					+ " раздела 3 числитель больше знаменателя в доле кадастровой стоимости объекта недвижимого имущества на территории субъекта Российской Федерации",
					"Раздел3", "П000030005003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Код льготы (установленной в виде понижения налоговой ставки).
			ДлинаКодаЛьготы = СтрДлина(СокрЛП(СтраницаРаздела.Данные.П000030007003_КодЛьготы));
			Если ДлинаКодаЛьготы <> 0 И ДлинаКодаЛьготы <> 7 Тогда
				СообщитьВТС("На странице " + НомСтраницы
				+ " раздела 3 задан код налоговой льготы (установленной в виде понижения налоговой ставки) некорректной длины",
				"Раздел3", "П000030007003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Коэффициент Кв.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009003_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009003_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009003_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан числитель в коэффициенте Кв",
					"Раздел3", "П000030009003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009003_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан знаменатель в коэффициенте Кв",
					"Раздел3", "П000030009003_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030009003_Числ > СтраницаРаздела.Данные.П000030009003_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 числитель больше знаменателя в коэффициенте Кв",
					"Раздел3", "П000030009003_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан коэффициент Кв",
				"Раздел3", "П000030009003_Числ", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Коэффициент Ки.
			Если ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009503_Числ)
				ИЛИ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009503_Знам) Тогда
				Если НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009503_Числ) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан числитель в коэффициенте Ки",
					"Раздел3", "П000030009503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтраницаРаздела.Данные.П000030009503_Знам) Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 не задан знаменатель в коэффициенте Ки",
					"Раздел3", "П000030009503_Знам", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтраницаРаздела.Данные.П000030009503_Числ > СтраницаРаздела.Данные.П000030009503_Знам Тогда
					СообщитьВТС("На странице " + НомСтраницы + " раздела 3 числитель больше знаменателя в коэффициенте Ки",
					"Раздел3", "П000030009503_Числ", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Код налоговой льготы (в виде уменьшения суммы налога, подлежащей уплате в бюджет).
			КодЛьготы = СокрЛП(СтраницаРаздела.Данные.П000030011003_КодЛьготы);
			Если ЗначениеЗаполнено(КодЛьготы)
				И ВозможныеКодыНалоговойЛьготыРаздела3.МассивЗначений.Найти(КодЛьготы) = Неопределено Тогда
				СообщитьВТС("На странице " + НомСтраницы + " раздела 3 задан некорректный код налоговой льготы "
				+ "(в виде уменьшения суммы налога, подлежащей уплате в бюджет). Возможно значение: "
				+ ВозможныеКодыНалоговойЛьготыРаздела3.СтрокаЗначений, "Раздел3", "П000030011003_КодЛьготы", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Сочетание = СочетаниеРазделов.Добавить();
			Сочетание.ПрСЗПК     = "(не задан)";
			Сочетание.ОКТМО      = ОКТМО;
			Сочетание.КБК        = КБК;
			Сочетание.Раздел     = 3;
			Сочетание.Страница   = ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			Сочетание.ИмяОбласти = "П000030001001";
			Сочетание.Счетчик3   = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сочетания разделов.
	//
	СочетанияРаздела1  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 1));
	СочетанияРаздела2  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 2));
	СочетанияРаздела21 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 21));
	СочетанияРаздела22 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 22));
	СочетанияРаздела3  = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 3));
	
	СокращеннаяПроверка = Ложь;
	
	Если СочетанияРаздела1.Количество() = 0 Тогда
		СообщитьВТС("В разделе 1 не заполнена ни одна группа строк 007-040", "Раздел1", "П000010000703_1", 1);
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если СочетанияРаздела2.Количество() = 0 И СочетанияРаздела3.Количество() = 0 Тогда
		СообщитьВТС("В налоговом расчете отсутствуют заполненные листы раздела 2 или раздела 3",
		"Раздел2", "П000020000101", 1);
		СтатусПроверки = Ложь;
		СокращеннаяПроверка = Истина;
	КонецЕсли;
	
	Если НЕ СокращеннаяПроверка Тогда
		
		ПовторенияРаздела1 = СочетаниеРазделов.Скопировать(СочетанияРаздела1);
		ПовторенияРаздела1.Свернуть("ПрСЗПК, ОКТМО, КБК", "Счетчик1");
		
		Для Каждого СтрокаПроверки Из ПовторенияРаздела1 Цикл
			Если СтрокаПроверки.Счетчик1 > 1
				И ЗначениеЗаполнено(СтрокаПроверки.ОКТМО)
				И ЗначениеЗаполнено(СтрокаПроверки.КБК) Тогда
				
				УсловияПоиска = Новый Структура(
				"ПрСЗПК, ОКТМО, КБК, Раздел", СтрокаПроверки.ПрСЗПК, СтрокаПроверки.ОКТМО, СтрокаПроверки.КБК, 1);
				СтрокиДубликатов = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
				ТаблицаДубликатов = СочетаниеРазделов.Скопировать(СтрокиДубликатов);
				ТаблицаДубликатов.Сортировать("Страница, ИмяОбласти");
				
				ПозицияПерехода = ТаблицаДубликатов[0].ИмяОбласти;
				
				ТаблицаДубликатов.Свернуть("Страница");
				ТаблицаДубликатов.Сортировать("Страница");
				
				СообщитьВТС("В разделе 1 обнаружены дублирующиеся сочетания признака СЗПК " + СтрокаПроверки.ПрСЗПК
				+ ", кода по ОКТМО " + СтрокаПроверки.ОКТМО + " и КБК " + СтрокаПроверки.КБК, "Раздел1", ПозицияПерехода, 1);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		
		СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
		СочетаниеРазделовСвернутое.Свернуть("ПрСЗПК, ОКТМО, КБК", "Счетчик1, Счетчик2, Счетчик21, Счетчик22, Счетчик3");
		
		Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
			
			Если Сочетание.Счетчик1 <> 0 И Сочетание.Счетчик2 = 0 И Сочетание.Счетчик3 = 0
				И ЗначениеЗаполнено(Сочетание.ОКТМО)
				И ЗначениеЗаполнено(Сочетание.КБК) Тогда
				
				// По признаку СЗПК, ОКТМО и КБК группы строк 007-040 раздела 1 не найдены листы разделов 2 или 3.
				//
				УсловияПоиска = Новый Структура(
				"ПрСЗПК, ОКТМО, КБК, Раздел", Сочетание.ПрСЗПК, Сочетание.ОКТМО, Сочетание.КБК, 1);
				
				НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
				ПозицияПерехода = НесвязанныеСтроки[0].ИмяОбласти;
				
				СообщитьВТС("По сочетанию признака СЗПК " + СтрокаПроверки.ПрСЗПК
				+ ", кода по ОКТМО " + Сочетание.ОКТМО + " и КБК " + Сочетание.КБК
				+ " раздела 1 не найдены соответствующие листы раздела 2 или раздела 3", "Раздел1", ПозицияПерехода, 1);
				СтатусПроверки = Ложь;
				
			ИначеЕсли Сочетание.Счетчик1 = 0 Тогда
				
				Если Сочетание.Счетчик2 <> 0
					И ЗначениеЗаполнено(Сочетание.ОКТМО)
					И ЗначениеЗаполнено(Сочетание.КБК) Тогда
					
					// По признаку СЗПК, ОКТМО и КБК раздела 2 не найдена группа строк 007-040 раздела 1.
					//
					УсловияПоиска = Новый Структура(
					"ПрСЗПК, ОКТМО, КБК, Раздел", Сочетание.ПрСЗПК, Сочетание.ОКТМО, Сочетание.КБК, 2);
					
					НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
					СтраницаПерехода = НесвязанныеСтроки[0].Страница;
					ПозицияПерехода = "П000020000201";
					
					СообщитьВТС("По сочетанию признака СЗПК " + Сочетание.ПрСЗПК
					+ ", кода по ОКТМО " + Сочетание.ОКТМО + " и КБК " + Сочетание.КБК + " на странице "
					+ Формат(СтраницаПерехода, "ЧГ=") + " раздела 2 не найдена соответствующая группа строк 007-040 в разделе 1",
					"Раздел2", ПозицияПерехода, СтраницаПерехода);
					СтатусПроверки = Ложь;
					
				ИначеЕсли Сочетание.Счетчик21 <> 0
					И ЗначениеЗаполнено(Сочетание.ОКТМО)
					И ЗначениеЗаполнено(Сочетание.КБК) Тогда
					
					// По признаку СЗПК, ОКТМО и КБК раздела 2.1 не найдена группа строк 007-040 раздела 1.
					//
					УсловияПоиска = Новый Структура(
					"ПрСЗПК, ОКТМО, КБК, Раздел", Сочетание.ПрСЗПК, Сочетание.ОКТМО, Сочетание.КБК, 21);
					
					НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
					СтраницаПерехода = НесвязанныеСтроки[0].Страница;
					ПозицияПерехода = "П000210000200";
					
					СообщитьВТС("По сочетанию признака СЗПК " + Сочетание.ПрСЗПК
					+ ", кода по ОКТМО " + Сочетание.ОКТМО + " и КБК " + Сочетание.КБК + " на странице "
					+ Формат(СтраницаПерехода, "ЧГ=") + " раздела 2.1 не найдена соответствующая группа строк 007-040 в разделе 1",
					"Раздел21", ПозицияПерехода, СтраницаПерехода);
					СтатусПроверки = Ложь;
					
				ИначеЕсли Сочетание.Счетчик22 <> 0
					И ЗначениеЗаполнено(Сочетание.ОКТМО)
					И ЗначениеЗаполнено(Сочетание.КБК) Тогда
					
					// По признаку СЗПК, ОКТМО и КБК раздела 2.2 не найдена группа строк 007-040 раздела 1.
					//
					УсловияПоиска = Новый Структура(
					"ПрСЗПК, ОКТМО, КБК, Раздел", Сочетание.ПрСЗПК, Сочетание.ОКТМО, Сочетание.КБК, 22);
					
					НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
					СтраницаПерехода = НесвязанныеСтроки[0].Страница;
					ПозицияПерехода = "П000220000201";
					
					СообщитьВТС("По сочетанию признака СЗПК " + Сочетание.ПрСЗПК
					+ ", кода по ОКТМО " + Сочетание.ОКТМО + " и КБК " + Сочетание.КБК + " на странице "
					+ Формат(СтраницаПерехода, "ЧГ=") + " раздела 2.2 не найдена соответствующая группа строк 007-040 в разделе 1",
					"Раздел22", ПозицияПерехода, СтраницаПерехода);
					СтатусПроверки = Ложь;
					
				ИначеЕсли Сочетание.Счетчик3 <> 0
					И ЗначениеЗаполнено(Сочетание.ОКТМО)
					И ЗначениеЗаполнено(Сочетание.КБК) Тогда
					
					// По признаку СЗПК, ОКТМО и КБК раздела 3 не найдена группа строк 007-040 раздела 1.
					//
					УсловияПоиска = Новый Структура(
					"ПрСЗПК, ОКТМО, КБК, Раздел", Сочетание.ПрСЗПК, Сочетание.ОКТМО, Сочетание.КБК, 3);
					
					НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
					СтраницаПерехода = НесвязанныеСтроки[0].Страница;
					ПозицияПерехода = "П000030001001";
					
					СообщитьВТС("По сочетанию кода по ОКТМО " + Сочетание.ОКТМО + " и КБК " + Сочетание.КБК + " на странице "
					+ Формат(СтраницаПерехода, "ЧГ=") + " раздела 3 не найдена соответствующая группа строк 007-040 "
					+ "с незаполненным признаком СЗПК в разделе 1", "Раздел3", ПозицияПерехода, СтраницаПерехода);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел4;
	
	ДанныеМногострочнойЧастиРаздела4
	= ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы4];
	
	НомерСтраницы = 1;
	
	ВозможныеКодыСубъектаРФ = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00004М100001");
	
	Для каждого СтрокаМнЧРаздела4 Из ДанныеМногострочнойЧастиРаздела4.Строки Цикл
		
		ЗаполненаСтрокаМнЧРаздела4 = Ложь;
		Для каждого Эл Из СтрокаМнЧРаздела4.Данные Цикл
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				ЗаполненаСтрокаМнЧРаздела4 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненаСтрокаМнЧРаздела4 Тогда
			
			НомСтроки = Формат(ДанныеМногострочнойЧастиРаздела4.Строки.Индекс(СтрокаМнЧРаздела4) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(СтрокаМнЧРаздела4.Данные["П00004М100001"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 4 не задан код субъекта РФ",
				"Раздел4", "П00004М100001_" + НомСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыСубъектаРФ.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 4 код субъекта РФ может принимать одно из значений: "
				+ ВозможныеКодыСубъектаРФ.СтрокаЗначений, "Раздел4", "П00004М100001_" + НомСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = Окр(СтрокаМнЧРаздела4.Данные["П00004М100002"]);
			Если ЗначПок = 0 Тогда
				СообщитьВТС("В строке " + НомСтроки + " раздела 4 не задана среднегодовая стоимость объекта движимого имущества",
				"Раздел4", "П00004М100002_" + НомСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначПок < 0 Тогда
				СообщитьВТС("В строке " + НомСтроки
				+ " раздела 4 значение среднегодовой стоимости объекта движимого имущества должно быть больше нуля",
				"Раздел4", "П00004М100002_" + НомСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтотОбъект, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	СохрСтруктура = Неопределено;
	
	ДеревоДанныхРаздел1  = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоДанныхРаздел2  = ДанныеМногоуровневыхРазделов["Раздел2"];
	ДеревоДанныхРаздел22 = ДанныеМногоуровневыхРазделов["Раздел22"];
	ДеревоДанныхРаздел3  = ДанныеМногоуровневыхРазделов["Раздел3"];
	ДеревоДанныхРаздел4  = ДанныеМногоуровневыхРазделов["Раздел4"];
	
	// Раздел 1.
	//
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	ДанныеМногострочнойЧастиРаздела1
	= ДеревоДанныхРаздел1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1];
	
	Для каждого СтрокаМнЧРаздела1 Из ДанныеМногострочнойЧастиРаздела1.Строки Цикл
		
		ПрСЗПК_Р1 = СокрЛП(СтрокаМнЧРаздела1.Данные["П000010000703"]);
		ОКТМО_Р1  = СтрокаМнЧРаздела1.Данные["П000010001003"];
		КБК_Р1    = СтрокаМнЧРаздела1.Данные["П000010002003"];
		
		Если НЕ (ЗначениеЗаполнено(ОКТМО_Р1) И ЗначениеЗаполнено(КБК_Р1)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Код = "НалПУ" Тогда
					СуммаНалога = СтрокаМнЧРаздела1.Данные["П000010003003"] - СтрокаМнЧРаздела1.Данные["П000010004003"];
					ВывестиПоказательВXML(Эл, СуммаНалога);
				Иначе
					ВывестиПоказательВXML(Эл, СтрокаМнЧРаздела1.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Раздел 2.
		//
		РасОбДеятРФ = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "РасОбДеятРФ");
		РасОб = ПолучитьПодчиненныйЭлемент(РасОбДеятРФ, "РасОб");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел2.Строки Цикл
			
			ПрСЗПК_Р2 = СокрЛП(СтраницаРаздела.Данные["П000020000201"]);
			ОКТМО_Р2  = СтраницаРаздела.Данные["П000020001001"];
			КБК_Р2    = СтраницаРаздела.Данные["П000020001100"];
			
			Если НЕ (ПрСЗПК_Р1 = ПрСЗПК_Р2 И ОКТМО_Р1 = ОКТМО_Р2 И КБК_Р1 = КБК_Р2) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасОб = СкопироватьУзел(РасОбДеятРФ, РасОб);
			Для каждого Эл Из ЭкзРасОб.Строки Цикл
				Если Эл.Код = "ВидИмущ" Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
				ИначеЕсли Эл.Код = "ДанРасСтПер" Тогда
					ЗаполнитьДаннымиУзел(СтраницаРаздела.Данные, Эл);
				ИначеЕсли Эл.Код = "РасчНал" Тогда
					Для каждого Эл_ Из Эл.Строки Цикл
						Если Эл_.Код = "КодНалЛьг" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020016003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020016003_Основание"]);
							Если КодЛьготы = "2012000" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "ДолСт" Тогда
							Числитель   = СтраницаРаздела.Данные["П000020018003_Числ"];
							Знаменатель = СтраницаРаздела.Данные["П000020018003_Знам"];
							Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
								ВывестиПоказательВXML(Эл_, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
							КонецЕсли;
						ИначеЕсли Эл_.Код = "КодЛгПНС" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020020003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020020003_Основание"]);
							Если КодЛьготы = "2012400" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "Кжд" Тогда
							Кжд = СтрЗаменить(СтраницаРаздела.Данные["П000020021503"], ",", ".");
							ВывестиПоказательВXML(Эл_, Кжд);
						ИначеЕсли Эл_.Код = "КодЛгУмен" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000020023003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000020023003_Основание"]);
							Если ЗначениеЗаполнено(КодЛьготы) Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						Иначе
							ВывестиПоказательВXML(Эл_, СтраницаРаздела.Данные[Эл_.Ключ]);
						Конецесли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Раздел 2.2.
		//
		СумНалСЗПК = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумНалСЗПК");
		РасОб = ПолучитьПодчиненныйЭлемент(СумНалСЗПК, "РасОб");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел22.Строки Цикл
			
			ПрСЗПК_Р22 = СокрЛП(СтраницаРаздела.Данные["П000220000201"]);
			ОКТМО_Р22  = СтраницаРаздела.Данные["П000220001001"];
			КБК_Р22    = СтраницаРаздела.Данные["П000220001100"];
			
			Если НЕ (ПрСЗПК_Р1 = ПрСЗПК_Р22 И ОКТМО_Р1 = ОКТМО_Р22 И КБК_Р1 = КБК_Р22) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасОб = СкопироватьУзел(СумНалСЗПК, РасОб);
			Для каждого Эл Из ЭкзРасОб.Строки Цикл
				Если Эл.Код = "ВидИмущ" ИЛИ Эл.Код = "КодНомОбъект" ИЛИ Эл.Код = "НомОбъект" Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
				ИначеЕсли Эл.Код = "ДанРасСтОбПер" Тогда
					ЗаполнитьДаннымиУзел(СтраницаРаздела.Данные, Эл);
				ИначеЕсли Эл.Код = "РасчНал" Тогда
					Для каждого Эл_ Из Эл.Строки Цикл
						Если Эл_.Код = "КодНалЛьг" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000220016003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000220016003_Основание"]);
							Если КодЛьготы = "2012000" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "ДолСт" Тогда
							Числитель   = СтраницаРаздела.Данные["П000220018003_Числ"];
							Знаменатель = СтраницаРаздела.Данные["П000220018003_Знам"];
							Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
								ВывестиПоказательВXML(Эл_, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
							КонецЕсли;
						ИначеЕсли Эл_.Код = "КодЛгПНС" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000220020003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000220020003_Основание"]);
							Если КодЛьготы = "2012400" Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						ИначеЕсли Эл_.Код = "Кжд" Тогда
							Кжд = СтрЗаменить(СтраницаРаздела.Данные["П000220021503"], ",", ".");
							ВывестиПоказательВXML(Эл_, Кжд);
						ИначеЕсли Эл_.Код = "КодЛгУмен" Тогда
							КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000220023003_КодЛьготы"]);
							Основание = СокрЛП(СтраницаРаздела.Данные["П000220023003_Основание"]);
							Если ЗначениеЗаполнено(КодЛьготы) Тогда
								ВывестиПоказательВXML(Эл_, КодЛьготы + "/" + Основание);
							Иначе
								ВывестиПоказательВXML(Эл_, КодЛьготы);
							КонецЕсли;
						Иначе
							ВывестиПоказательВXML(Эл_, СтраницаРаздела.Данные[Эл_.Ключ]);
						Конецесли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Раздел 3.
		//
		РасОБНедИО = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "РасОБНедИО");
		РасОб = ПолучитьПодчиненныйЭлемент(РасОБНедИО, "РасОб");
		
		Для каждого СтраницаРаздела Из ДеревоДанныхРаздел3.Строки Цикл
			
			ПрСЗПК_Р3 = "";
			ОКТМО_Р3  = СтраницаРаздела.Данные["П000030001001"];
			КБК_Р3    = СтраницаРаздела.Данные["П000030001100"];
			
			Если НЕ (ПрСЗПК_Р1 = ПрСЗПК_Р3 И ОКТМО_Р1 = ОКТМО_Р3 И КБК_Р1 = КБК_Р3) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭкзРасОб = СкопироватьУзел(РасОБНедИО, РасОб);
			Для каждого Эл Из ЭкзРасОб.Строки Цикл
				Если Эл.Код = "ДоляПравСоб" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030003003_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030003003_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "Доля_6.378.2" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030003503_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030003503_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодНалЛьг" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030004003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030004003_Основание"]);
					Если КодЛьготы = "2012000" Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				ИначеЕсли Эл.Код = "ДолСт" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030005003_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030005003_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодЛгПНС" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030007003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030007003_Основание"]);
					Если КодЛьготы = "2012400" Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				ИначеЕсли Эл.Код = "КоэфКв" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030009003_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030009003_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КоэфКи" Тогда
					Числитель   = СтраницаРаздела.Данные["П000030009503_Числ"];
					Знаменатель = СтраницаРаздела.Данные["П000030009503_Знам"];
					Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
						ВывестиПоказательВXML(Эл, СокрЛП(Формат(Числитель, "ЧГ=") + "/" + Формат(Знаменатель, "ЧГ=")));
					КонецЕсли;
				ИначеЕсли Эл.Код = "КодЛгУмен" Тогда
					КодЛьготы = СокрЛП(СтраницаРаздела.Данные["П000030011003_КодЛьготы"]);
					Основание = СокрЛП(СтраницаРаздела.Данные["П000030011003_Основание"]);
					Если ЗначениеЗаполнено(КодЛьготы) Тогда
						ВывестиПоказательВXML(Эл, КодЛьготы + "/" + Основание);
					Иначе
						ВывестиПоказательВXML(Эл, КодЛьготы);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Эл, СтраницаРаздела.Данные[Эл.Ключ]);
				Конецесли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 4.
	//
	СвСтОбДвИм = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвСтОбДвИм");
	СвСтОбДвИмКод = ПолучитьПодчиненныйЭлемент(СвСтОбДвИм, "СвСтОбДвИмКод");
	ДанныеМногострочнойЧастиРаздела4
	= ДеревоДанныхРаздел4.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы4];
	Для каждого СтрокаМнЧРаздела4 Из ДанныеМногострочнойЧастиРаздела4.Строки Цикл
		ЗаполнитьДаннымиУзел(СтрокаМнЧРаздела4.Данные, СкопироватьУзел(СвСтОбДвИм, СвСтОбДвИмКод));
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СвСтОбДвИмКод);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если Стр.Код = "ОбъектОблНал" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M")
			<> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоНалогуНаИмущество");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
			
		ИначеЕсли СтрокаДерева.Код = "СумНалПУ" Тогда
			ПрСЗПК_Р1 = "";
			ОКТМО_Р1  = "";
			КБК_Р1    = "";
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				
				Если Лист.Код = "СЗПК" Тогда
					
					ПрСЗПК_Р1 = Лист.Значение;
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
					
				ИначеЕсли Лист.Код = "ОКТМО" Тогда
					
					ОКТМО_Р1 = Лист.Значение;
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
					
				ИначеЕсли Лист.Код = "КБК" Тогда
					
					КБК_Р1 = Лист.Значение;
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
					
				ИначеЕсли Лист.Код = "ОбъектОблНал" Тогда
					
					СохрСтруктура = СохраненныеДанныеОтчета();
					ДеревоДанныхРаздел21 = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел21"];
					
					СохрСтруктура = Неопределено;
					
					НайденаХотяБыОднаПодходящаяСтраницаРаздела21 = Ложь;
					
					Для каждого СтраницаРаздела Из ДеревоДанныхРаздел21.Строки Цикл
						
						ПрСЗПК_Р21 = СокрЛП(СтраницаРаздела.Данные["П000210000200"]);
						ОКТМО_Р21  = СтраницаРаздела.Данные["П000210001000"];
						КБК_Р21    = СтраницаРаздела.Данные["П000210001100"];
						
						Если НЕ (ПрСЗПК_Р1 = ПрСЗПК_Р21 И ОКТМО_Р1 = ОКТМО_Р21 И КБК_Р1 = КБК_Р21) Тогда
							Продолжить;
						КонецЕсли;
						
						Если НЕ НайденаХотяБыОднаПодходящаяСтраницаРаздела21 Тогда
							
							ПотокXML.ЗаписатьНачалоЭлемента("ОбъектОблНал");
							НайденаХотяБыОднаПодходящаяСтраницаРаздела21 = Истина;
							
						КонецЕсли;
						
						ПотокXML.ЗаписатьНачалоЭлемента("ИнфОбъект");
						
						ПотокXML.ЗаписатьАтрибут("КодНомОбъект", СокрЛП(СтраницаРаздела.Данные["П000210001001"]));
						ПотокXML.ЗаписатьАтрибут("НомОбъект",    СокрЛП(СтраницаРаздела.Данные["П000210002001"]));
						ПотокXML.ЗаписатьАтрибут("ОКОФ",         СокрЛП(СтраницаРаздела.Данные["П000210004003"]));
						ПотокXML.ЗаписатьАтрибут("СтОст3112",    СокрЛП(Формат(СтраницаРаздела.Данные["П000210005003"], "ЧРД=.;ЧН=0;ЧГ=;ЧЦ=15")));
						
						Если СокрЛП(СтраницаРаздела.Данные["П000210001001"]) = "3" Тогда
							
							ПотокXML.ЗаписатьНачалоЭлемента("АдрОбъектРФ");
							
							ПотокXML.ЗаписатьНачалоЭлемента("Регион");
							ПотокXML.ЗаписатьТекст(СокрЛП(СтраницаРаздела.Данные["П000210003001"]));
							ПотокXML.ЗаписатьКонецЭлемента();// "Регион"
							
							П000210003002 = СокрЛП(СтраницаРаздела.Данные["П000210003002"]);
							П000210003003 = СокрЛП(СтраницаРаздела.Данные["П000210003003"]);
							Если ЗначениеЗаполнено(П000210003002) И ЗначениеЗаполнено(П000210003003) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("МуниципРайон");
								ПотокXML.ЗаписатьАтрибут("ВидКод", П000210003002);
								ПотокXML.ЗаписатьАтрибут("Наим",   П000210003003);
								ПотокXML.ЗаписатьКонецЭлемента();// "МуниципРайон"
							КонецЕсли;
							
							П000210003004 = СокрЛП(СтраницаРаздела.Данные["П000210003004"]);
							П000210003005 = СокрЛП(СтраницаРаздела.Данные["П000210003005"]);
							Если ЗначениеЗаполнено(П000210003004) И ЗначениеЗаполнено(П000210003005) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ГородСелПоселен");
								ПотокXML.ЗаписатьАтрибут("ВидКод", П000210003004);
								ПотокXML.ЗаписатьАтрибут("Наим",   П000210003005);
								ПотокXML.ЗаписатьКонецЭлемента();// "ГородСелПоселен"
							КонецЕсли;
							
							П000210003006 = СокрЛП(СтраницаРаздела.Данные["П000210003006"]);
							П000210003007 = СокрЛП(СтраницаРаздела.Данные["П000210003007"]);
							Если ЗначениеЗаполнено(П000210003006) И ЗначениеЗаполнено(П000210003007) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("НаселенПункт");
								ПотокXML.ЗаписатьАтрибут("Вид",  П000210003006);
								ПотокXML.ЗаписатьАтрибут("Наим", П000210003007);
								ПотокXML.ЗаписатьКонецЭлемента();// "НаселенПункт"
							КонецЕсли;
							
							П000210003008 = СокрЛП(СтраницаРаздела.Данные["П000210003008"]);
							П000210003009 = СокрЛП(СтраницаРаздела.Данные["П000210003009"]);
							Если ЗначениеЗаполнено(П000210003008) И ЗначениеЗаполнено(П000210003009) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ЭлПланСтруктур");
								ПотокXML.ЗаписатьАтрибут("Тип",  П000210003008);
								ПотокXML.ЗаписатьАтрибут("Наим", П000210003009);
								ПотокXML.ЗаписатьКонецЭлемента();// "ЭлПланСтруктур"
							КонецЕсли;
							
							П000210003010 = СокрЛП(СтраницаРаздела.Данные["П000210003010"]);
							П000210003011 = СокрЛП(СтраницаРаздела.Данные["П000210003011"]);
							Если ЗначениеЗаполнено(П000210003010) И ЗначениеЗаполнено(П000210003011) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ЭлУлДорСети");
								ПотокXML.ЗаписатьАтрибут("Тип",  П000210003010);
								ПотокXML.ЗаписатьАтрибут("Наим", П000210003011);
								ПотокXML.ЗаписатьКонецЭлемента();// "ЭлУлДорСети"
							КонецЕсли;
							
							П000210003012 = СокрЛП(СтраницаРаздела.Данные["П000210003012"]);
							Если ЗначениеЗаполнено(П000210003012) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ЗемелУчасток");
								ПотокXML.ЗаписатьТекст(П000210003012);
								ПотокXML.ЗаписатьКонецЭлемента();// "ЗемелУчасток"
							КонецЕсли;
							
							ДанныеМногострочнойЧастиРаздела21
							= СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы21];
							Для каждого СтрокаМнЧРаздела21 Из ДанныеМногострочнойЧастиРаздела21.Строки Цикл
								П00021М103013 = СокрЛП(СтрокаМнЧРаздела21.Данные["П00021М103013"]);
								П00021М103014 = СокрЛП(СтрокаМнЧРаздела21.Данные["П00021М103014"]);
								Если ЗначениеЗаполнено(П00021М103013) И ЗначениеЗаполнено(П00021М103014) Тогда
									ПотокXML.ЗаписатьНачалоЭлемента("Здание");
									ПотокXML.ЗаписатьАтрибут("Тип",   П00021М103013);
									ПотокXML.ЗаписатьАтрибут("Номер", П00021М103014);
									ПотокXML.ЗаписатьКонецЭлемента();// "Здание"
								КонецЕсли;
							КонецЦикла;
							
							П000210003015 = СокрЛП(СтраницаРаздела.Данные["П000210003015"]);
							П000210003016 = СокрЛП(СтраницаРаздела.Данные["П000210003016"]);
							Если ЗначениеЗаполнено(П000210003015) И ЗначениеЗаполнено(П000210003016) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ПомещЗдания");
								ПотокXML.ЗаписатьАтрибут("Тип",   П000210003015);
								ПотокXML.ЗаписатьАтрибут("Номер", П000210003016);
								ПотокXML.ЗаписатьКонецЭлемента();// "ПомещЗдания"
							КонецЕсли;
							
							П000210003017 = СокрЛП(СтраницаРаздела.Данные["П000210003017"]);
							П000210003018 = СокрЛП(СтраницаРаздела.Данные["П000210003018"]);
							Если ЗначениеЗаполнено(П000210003017) И ЗначениеЗаполнено(П000210003018) Тогда
								ПотокXML.ЗаписатьНачалоЭлемента("ПомещКвартиры");
								ПотокXML.ЗаписатьАтрибут("Тип",   П000210003017);
								ПотокXML.ЗаписатьАтрибут("Номер", П000210003018);
								ПотокXML.ЗаписатьКонецЭлемента();// "ПомещКвартиры"
							КонецЕсли;
							
							ПотокXML.ЗаписатьКонецЭлемента();// "АдрОбъектРФ"
							
						КонецЕсли;
						
						ПотокXML.ЗаписатьКонецЭлемента();// "ИнфОбъект"
						
					КонецЦикла;
					
					Если НайденаХотяБыОднаПодходящаяСтраницаРаздела21 Тогда
						
						ПотокXML.ЗаписатьКонецЭлемента();
						
					КонецЕсли;
					
					ДеревоДанныхРаздел21 = Неопределено;
					
				Иначе
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
				
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
			
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки512");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	мПараметры.Вставить("РучнойВводАдреса", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ФлажокРучнойВводАдреса", СтруктураРеквизитовФормы.ФлажокРучнойВводАдреса);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
					|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
					|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
					|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).УстановитьФорматВывода(
		ЭтотОбъект.ИмяФормы, ИмяРаздела, ТабличныйДокумент, СтруктураРеквизитовФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[
			ИмяОтчета(ИмяФормы)].ПолучитьМакет(
			Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		ЗаполнитьПериодОтчета(ЭтотОбъект);
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = '%1. Формируется печатная форма...';
		|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
	  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
	 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма",					СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов",					ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати",						ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы",		СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц",
		ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).ПечатныйБланк(ПараметрыПечати);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	Отказ = Ложь;
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.АвтозаполнениеБудетРеализованоВБудущихВерсиях(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = СокрЛП(ТабличныйДокумент.Области["ПоМесту"].Значение);
		ЗаполненНалоговыйОрганПоМестуОН = ЗначениеЗаполнено(ТабличныйДокумент.Области["НалоговыйОрганПоМестуОН"].Значение);
	Иначе
		ПоМесту = СокрЛП(СтруктураДанныхТитульный["ПоМесту"]);
		ЗаполненНалоговыйОрганПоМестуОН = ЗначениеЗаполнено(СтруктураДанныхТитульный["НалоговыйОрганПоМестуОН"]);
	КонецЕсли;
	Если (ПоМесту = "213" ИЛИ ПоМесту = "216") И НЕ ЗаполненНалоговыйОрганПоМестуОН Тогда
		ПоказатьПредупреждение(, НСтр(
		"ru = 'Укажите код налогового органа по месту
		|нахождения объекта налогообложения
		|на Титульном листе';
		|en = 'Укажите код налогового органа по месту
		|нахождения объекта налогообложения
		|на Титульном листе'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапуска = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = СокрЛП(ТабличныйДокумент.Области["ПоМесту"].Значение);
	Иначе
		ПоМесту = СокрЛП(СтруктураДанныхТитульный["ПоМесту"]);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Если ПоМесту = "213" ИЛИ ПоМесту = "216" Тогда
		ПараметрыОтчета.Вставить("КодНалоговогоОргана",      СтруктураДанныхТитульный.НалоговыйОрганПоМестуОН);
		ПараметрыОтчета.Вставить("КПП",                      СтруктураРеквизитовФормы.КППДляАвтозаполненияПоМестуОН);
	Иначе
		ПараметрыОтчета.Вставить("КодНалоговогоОргана",      СтруктураДанныхТитульный.НалоговыйОрган);
		ПараметрыОтчета.Вставить("КПП",                      СтруктураРеквизитовФормы.КППДляАвтозаполнения);
	КонецЕсли;
	ПараметрыОтчета.Вставить("ДатаПодписи",                  ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
			Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока
				= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.';
											|en = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение данных из контейнера.
	СтруктураДанныхТитульный = Контейнер["Титульный"];
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Если Раздел.Ключ = "Раздел2" Тогда
				ДеревоРаздела2 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела2 Из ДеревоРаздела2.Строки Цикл
					ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
					ДанныеСтраницыРаздела2.П000020001001 = СокрЛП(ДанныеСтраницыРаздела2.П000020001001);
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020016003_КодЛьготы"]) = "2012000" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020016003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020016003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020020003_КодЛьготы"]) = "2012400" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020020003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020020003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела2["П000020023003_КодЛьготы"]) = "2012500" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела2["П000020023003_Основание"]) Тогда
							ДанныеСтраницыРаздела2.П000020023003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Раздел.Ключ = "Раздел21" Тогда
				ДеревоРаздела21 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела21 Из ДеревоРаздела21.Строки Цикл
					ДанныеСтраницыРаздела21 = СтраницаРаздела21.Данные;
					ДанныеСтраницыРаздела21.П000210001000 = СокрЛП(ДанныеСтраницыРаздела21.П000210001000);
				КонецЦикла;
			ИначеЕсли Раздел.Ключ = "Раздел22" Тогда
				ДеревоРаздела22 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела22 Из ДеревоРаздела22.Строки Цикл
					ДанныеСтраницыРаздела22 = СтраницаРаздела22.Данные;
					ДанныеСтраницыРаздела22.П000220001001 = СокрЛП(ДанныеСтраницыРаздела22.П000220001001);
					Если СокрЛП(ДанныеСтраницыРаздела22["П000220016003_КодЛьготы"]) = "2012000" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела22["П000220016003_Основание"]) Тогда
							ДанныеСтраницыРаздела22.П000220016003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела22["П000220020003_КодЛьготы"]) = "2012400" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела22["П000220020003_Основание"]) Тогда
							ДанныеСтраницыРаздела22.П000220020003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела22["П000220023003_КодЛьготы"]) = "2012500" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела22["П000220023003_Основание"]) Тогда
							ДанныеСтраницыРаздела22.П000220023003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Раздел.Ключ = "Раздел3" Тогда
				ДеревоРаздела3 = Контейнер[Раздел.Ключ];
				Для Каждого СтраницаРаздела3 Из ДеревоРаздела3.Строки Цикл
					ДанныеСтраницыРаздела3 = СтраницаРаздела3.Данные;
					ДанныеСтраницыРаздела3.П000030001001 = СокрЛП(ДанныеСтраницыРаздела3.П000030001001);
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030004003_КодЛьготы"]) = "2012000" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030004003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030004003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030007003_КодЛьготы"]) = "2012400" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030007003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030007003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
					Если СокрЛП(ДанныеСтраницыРаздела3["П000030011003_КодЛьготы"]) = "2012500" Тогда
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницыРаздела3["П000030011003_Основание"]) Тогда
							ДанныеСтраницыРаздела3.П000030011003_Основание = "000000000000";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере();
	
	СформироватьРаздел1();
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	НомерТекущейСтраницы = 0;
	Если мСтруктураМногоуровневыхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела) Тогда
		СтруктураМногоуровневогоРаздела
		= мСтруктураМногоуровневыхРазделов[СтруктураРеквизитовФормы.НаимТекущегоРаздела];
		Если СтруктураМногоуровневогоРаздела.Свойство("Многостраничность") Тогда
			НомерТекущейСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерТекущейСтраницы",    НомерТекущейСтраницы);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ИмяФормы),
	ИмяФормыОтчета(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
		
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КС_АдресРезультата);
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КС_АдресРасшифровки);
		
	СписочныеЗначения = Новый Структура;
	
	СписочныеЗначения.Вставить("П000010000703"			); // признак сзпк
	СписочныеЗначения.Вставить("П000010002003"			); // кбк
	
	СписочныеЗначения.Вставить("П000020000101"			); // код вида имущества
	СписочныеЗначения.Вставить("П000020000201"			); // признак сзпк
	СписочныеЗначения.Вставить("П000020001100"			); // кбк
	СписочныеЗначения.Вставить("П000020016003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000020020003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000020021503"			); // кжд
	СписочныеЗначения.Вставить("П000020023003_КодЛьготы"); // код льготы
	
	СписочныеЗначения.Вставить("П000210001100"			); // кбк
	СписочныеЗначения.Вставить("П000210001001"			); // код номера объекта
	СписочныеЗначения.Вставить("П000210003001"			); // код субъекта
	СписочныеЗначения.Вставить("П000210003002"			); // код муниципального образования
	СписочныеЗначения.Вставить("П000210003004"			); // код поселения
	
	СписочныеЗначения.Вставить("П000220000101"			); // код вида имущества
	СписочныеЗначения.Вставить("П000220000201"			); // признак сзпк
	СписочныеЗначения.Вставить("П000220001100"			); // кбк
	СписочныеЗначения.Вставить("П000220001101"			); // код номера объекта
	СписочныеЗначения.Вставить("П000220016003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000220020003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000220021503"			); // кжд
	СписочныеЗначения.Вставить("П000220023003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000220024503"			); // код льготы
	
	СписочныеЗначения.Вставить("П000030000101"			); // код вида имущества
	СписочныеЗначения.Вставить("П000030001100"			); // кбк
	СписочныеЗначения.Вставить("П000030001401"			); // код вида сведений
	СписочныеЗначения.Вставить("П000030004003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000030007003_КодЛьготы"); // код льготы
	СписочныеЗначения.Вставить("П000030011003_КодЛьготы"); // код льготы
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если СписочныеЗначения.Свойство(СтрокаТЗ.Показатель) Тогда
			МассивЗначений = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
			СписочныеЗначения.Вставить(СтрокаТЗ.Показатель, МассивЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяФормы"								, ИмяФормы);
	ПараметрыВыполнения.Вставить("мСохраненныйДок"						, СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыполнения.Вставить("мВыбраннаяФорма"						, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыВыполнения.Вставить("СтруктураРеквизитовФормы"				, СтруктураРеквизитовФормы);
	ПараметрыВыполнения.Вставить("мСтруктураМногоуровневыхРазделов"		, мСтруктураМногоуровневыхРазделов);
	ПараметрыВыполнения.Вставить("СоответствиеЕдиницыИзмеренияДелителю"	, СоответствиеЕдиницыИзмеренияДелителю);
	ПараметрыВыполнения.Вставить("СтруктураДанныхТитульный"				, СтруктураДанныхТитульный);
	ПараметрыВыполнения.Вставить("СписочныеЗначения"					, СписочныеЗначения);
	ПараметрыВыполнения.Вставить("АдресРезультата"						, СтруктураРеквизитовФормы.КС_АдресРезультата);
	ПараметрыВыполнения.Вставить("АдресРасшифровки"						, СтруктураРеквизитовФормы.КС_АдресРасшифровки);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Проверка контрольных соотношений Декларации по имуществу';
			|en = 'Проверка контрольных соотношений Декларации по имуществу'");
	ИмяПроцедуры = "РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияДлительнаяОперация";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
	Возврат ОбъектОтчета.ВыполнитьДокументированиеОбъект2024();
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ГоловнаяОрганизация = РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация);
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ПоМесту = СокрП(ТабличныйДокумент.Области.ПоМесту.Значение);
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.РегистрацияВНалОргане) Тогда
			
			Если ПоМесту = "213" ИЛИ ПоМесту = "216" Тогда
				
				СведОбОрг = Новый Структура("КодНО", СведенияОбОрганизации.КодНО);
				
				СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведОбОрг);
				РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
				СтруктураПараметров);
				
				КодНО = СведОбОрг.КодНО;
				Для Инд = СтрДлина(СведОбОрг.КодНО) + 1 По 4 Цикл
					КодНО = " " + КодНО;
				КонецЦикла;
				ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
				
				ТабличныйДокумент.Области["НалоговыйОрганПоМестуОН"].Значение
					= СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.Код);
				
				СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполненияПоМестуОН",
					СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.КПП));
				
			Иначе
				
				ТабличныйДокумент.Области["НалоговыйОрган"].Значение
					= СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.Код);
				
				СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполнения",
				СокрЛП(СтруктураРеквизитовФормы.РегистрацияВНалОргане.КПП));
				
			КонецЕсли;
			
		Иначе
			
			Если ПоМесту = "213" ИЛИ ПоМесту = "216" Тогда
				
				СведОбОрг = Новый Структура("КодНО", СведенияОбОрганизации.КодНО);
				
				СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведОбОрг);
				РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
				СтруктураПараметров);
				
				КодНО = СведОбОрг.КодНО;
				Для Инд = СтрДлина(СведОбОрг.КодНО) + 1 По 4 Цикл
					КодНО = " " + КодНО;
				КонецЦикла;
				ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
				
			Иначе
				
				КодНО = СведенияОбОрганизации.КодНО;
				Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
					КодНО = " " + КодНО;
				КонецЦикла;
				ТабличныйДокумент.Области["НалоговыйОрган"].Значение = КодНО;
				
				СтруктураРеквизитовФормы.Вставить("КППДляАвтозаполнения", СокрЛП(СведенияОбОрганизации.КППЮЛ));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ГоловнаяОрганизация <> СтруктураРеквизитовФормы.Организация Тогда
			
			ТабличныйДокумент.Области.КПП.Значение
			= СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ГоловнаяОрганизация, ДатаПодписи, "КППЮЛ")["КППЮЛ"]);
			
		Иначе
			
			ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = ТабличныйДокумент.Области.НаимОрг.Значение;
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СтруктураРеквизитовФормы.КППДляАвтозаполнения;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "ПоМесту" ИЛИ КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыйРаздел(ИмяРаздела)
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, ТекВетка);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел4" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел21" ИЛИ Ячейка.Раздел = "Раздел22"
		ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						НаимСтраницы = "Стр. ";
						Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
							НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
						КонецЕсли;
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = "Стр. ";
								Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
									НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
								КонецЕсли;
								ЭлементПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтотОбъектИмя)
	Форма_Имя = СтрЗаменить(ЭтотОбъектИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтотОбъектИмя)
	Возврат Сред(ЭтотОбъектИмя, СтрНайти(ЭтотОбъектИмя, ".Форма.") + 7);
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
