#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Отбор на ресурсы дублируется из строк в колонки (для кросс-таблицы) и в подчиненные группировки
	// Применяется для отбора "Только проблемные позиции"
	Для каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ОтборВСтроках = Неопределено;
			Для каждого Строка Из ЭлементСтруктуры.Строки Цикл
				Для каждого Элемент Из Строка.Отбор.Элементы Цикл
					Если Не ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки) Тогда
						ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
							Элемент.ИдентификаторПользовательскойНастройки);
						Если ПользовательскаяНастройка <> Неопределено
							И ПользовательскаяНастройка.Использование Тогда
							Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(Элемент.ЛевоеЗначение);
							Если Поле <> Неопределено И Поле.Ресурс Тогда
								ОтборВСтроках = Элемент;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ОтборВСтроках <> Неопределено Тогда
				Для каждого Колонка Из ЭлементСтруктуры.Колонки Цикл  
					Для Каждого ЭлементОтбора Из Колонка.Отбор.Элементы Цикл
						Если ЭлементОтбора.ЛевоеЗначение = ОтборВСтроках.ЛевоеЗначение И ЭлементОтбора.ВидСравнения = ОтборВСтроках.ВидСравнения Тогда
							Колонка.Отбор.Элементы.Удалить(ЭлементОтбора);
						КонецЕсли;
					КонецЦикла;
					Элемент = Колонка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(Элемент, ОтборВСтроках, "ЛевоеЗначение, ПравоеЗначение, ВидСравнения");
					Элемент.Использование = Истина;
					Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЦикла;        
			Иначе
				Для каждого Колонка Из ЭлементСтруктуры.Колонки Цикл 
					Для каждого Элемент из Колонка.Отбор.Элементы Цикл
						Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(Элемент.ЛевоеЗначение);
						Если Поле <> Неопределено И Поле.Ресурс Тогда
							Элемент.Использование = Ложь;
							Прервать;
						КонецЕсли;						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;			
				
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ОтборГруппировки = Неопределено;
			Очередь = Новый Массив;
			Для каждого Элемент Из ЭлементСтруктуры.Отбор.Элементы Цикл
				Если Не ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки) Тогда
					ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
						Элемент.ИдентификаторПользовательскойНастройки);
					Если ПользовательскаяНастройка <> Неопределено
						И ПользовательскаяНастройка.Использование Тогда
						Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(Элемент.ЛевоеЗначение);
						Если Поле <> Неопределено И Поле.Ресурс Тогда
							ОтборГруппировки = Элемент;
							Очередь.Добавить(ЭлементСтруктуры.Структура);
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ОтборГруппировки <> Неопределено Тогда
				Индекс = 0;
				Пока Индекс <= Очередь.ВГраница() Цикл
					Для каждого Группировка Из Очередь[Индекс] Цикл
						Отбор = Группировка.Отбор; //ОтборКомпоновкиДанных
						Элемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЗаполнитьЗначенияСвойств(Элемент, ОтборГруппировки, "ЛевоеЗначение, ПравоеЗначение, ВидСравнения");
						Элемент.Использование = Истина;
						Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
						
						Очередь.Добавить(Группировка.Структура);
					КонецЦикла;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительный отбор на "Ключ набор" если установлен отбор на документ Этап
	Для каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Элемент.Использование
			И Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этап")
			И Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ТипЗнч(Элемент.ПравоеЗначение) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
				
			НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючНабор");
			НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлемент.ПравоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Элемент.ПравоеЗначение, "УникальныйИдентификатор");
			НовыйЭлемент.Использование = Истина;
			НовыйЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			НовыйЭлемент.Представление = СтрШаблон(НСтр("ru = 'Этап ""%1""';
														|en = 'Stage ""%1""'"),
				Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Элемент.ПравоеЗначение));
			
			Элемент.Использование = Ложь;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	// Отключение полей расшифровки перемещений в случае если перемещения не используются
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("КлючВарианта")
		И (КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта = "ПоИсточникамИДатамКонтекст"
			Или КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта = "ПоЭтапуКонтекст") Тогда
		
		// Проверка наличия перемещений
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
		Запрос = КомпоновкаДанныхСервер.ПолучитьЗапросИзМакетаКомпоновки(МакетКомпоновки, "НаборДанных");
		
		ИменаТаблиц = СтрРазделить("Потребность,ИзделияИСкладыДляРасчетаПеремещений,Перемещения", ",");
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Для Индекс = -СхемаЗапроса.ПакетЗапросов.Количество()+1 По 0 Цикл
			ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[-Индекс];
			Если ПустаяСтрока(ЗапросСхемы.ТаблицаДляПомещения)
				Или ИменаТаблиц.Найти(ЗапросСхемы.ТаблицаДляПомещения) = Неопределено Тогда
				СхемаЗапроса.ПакетЗапросов.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если СхемаЗапроса.ПакетЗапросов.Количество() > 0 Тогда
			Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.Количество = 0 Тогда
				
				// Отключение полей
				ПоляПеремещение = Новый Массив;
				ПоляПеремещение.Добавить(Новый ПолеКомпоновкиДанных("СкладПеремещение"));
				ПоляПеремещение.Добавить(Новый ПолеКомпоновкиДанных("ДатаПоступленияПеремещение"));
				ПоляПеремещение.Добавить(Новый ПолеКомпоновкиДанных("ИсточникОбеспеченияПеремещение"));
				
				Очередь = Новый Массив;
				Очередь.Добавить(КомпоновщикНастроек.Настройки.Структура);
				
				Индекс = 0;
				Пока Индекс <= Очередь.ВГраница() Цикл
					Для каждого Группировка Из Очередь[Индекс] Цикл
						Если ТипЗнч(Группировка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
							Для каждого ВыбранноеПоле Из Группировка.Выбор.Элементы Цикл
								Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных")
									И ПоляПеремещение.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
									ВыбранноеПоле.Использование = Ложь;
								КонецЕсли;
							КонецЦикла;
							
							Очередь.Добавить(Группировка.Структура);
						КонецЕсли;
					КонецЦикла;
					Индекс = Индекс + 1;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Дополнительные команды
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И ТипЗнч(Параметры.ПараметрКоманды) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
	
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПараметрКоманды, "ДинамическаяСтруктура") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данный отчет применим только к заказам с включенной динамической структурой.';
														|en = 'This report is applicable only to orders with enabled dynamic structure.'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("ЗаказНаПроизводство", Параметры.ПараметрКоманды);
	
	ИначеЕсли Параметры.Свойство("ПараметрКоманды")
		И ТипЗнч(Параметры.ПараметрКоманды) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Номенклатура", Параметры.ПараметрКоманды);
	
	КонецЕсли;
	
	Если ЭтаФорма.Параметры.Свойство("КлючВарианта")
		И (ЭтаФорма.Параметры.КлючВарианта = "ПоНоменклатуре"
			ИЛИ ЭтаФорма.Параметры.КлючВарианта = "ПоЗаказу") Тогда
		
		Отборы = ЭтаФорма.ФормаПараметры.Отбор; //Структура
		Отборы.Удалить("Склад");
		Отборы.Удалить("Назначение");
		
	КонецЕсли;
	
	Если Параметры.Свойство("КлючПартия")
		И ТипЗнч(Параметры.КлючПартия) = Тип("УникальныйИдентификатор") Тогда
		Отбор = ПолучитьАналитикуДляОтбора(Параметры.КлючПартия);
		
		Параметры.Отбор.Вставить("Номенклатура", Отбор.Номенклатура);
		Параметры.Отбор.Вставить("Характеристика", Отбор.Характеристика);
		Параметры.Отбор.Вставить("Склад", Отбор.Склад);
		Параметры.Отбор.Вставить("Назначение", Отбор.Назначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета, состоит из:
//   *Параметры - ДанныеФормыСтруктура - состоит из:
//    **ДатаОкончания - Дата -
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//       Пользовательские настройки для загрузки в компоновщик настроек.
//
// См. синтакс-помощник "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере"
//    в синтакс-помощнике.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("ДатаОкончания") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"ДатаОкончания",
			Форма.Параметры.ДатаОкончания,
			ЗначениеЗаполнено(Форма.Параметры.ДатаОкончания));
		НовыеПользовательскиеНастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАналитикуДляОтбора(КлючПартия)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Движения.Номенклатура,
	|	Движения.Характеристика,
	|	Движения.Склад,
	|	Движения.Назначение
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Движения
	|ГДЕ
	|	Движения.КлючПартия = &КлючПартия
	|	И Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)");
	
	Запрос.УстановитьПараметр("КлючПартия", КлючПартия);
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Новый Структура("Номенклатура,Характеристика,Склад,Назначение",
					Результат.Номенклатура,
					Результат.Характеристика,
					Результат.Склад,
					Результат.Назначение);
КонецФункции

#КонецОбласти

#КонецЕсли
