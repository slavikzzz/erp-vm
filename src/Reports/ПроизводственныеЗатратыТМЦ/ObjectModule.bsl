
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
// Параметры:
//	Контекст							- Произвольный								- параметры контекста, в котором используется отчет.
//	КлючСхемы							- Строка									- идентификатор текущей схемы компоновщика настроек.
//	КлючВарианта						- Строка									- имя предопределенного или уникальный идентификатор пользовательского
//																						варианта отчета.
//										- Неопределено 								- вызов для варианта расшифровки или без контекста.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных					- настройки варианта отчета, которые будут загружены
//																						в компоновщик настроек после его инициализации.
//										- Неопределено 								- настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки, которые будут загружены в компоновщик
//																						настроек после его инициализации.
//										- Неопределено 								- пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Если НовыеПользовательскиеНастройкиКД = Неопределено Тогда
			ПользовательскиеНастройки = Контекст.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки; // ПользовательскиеНастройкиКомпоновкиДанных -
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, ПользовательскиеНастройки);
		Иначе
			НастроитьПараметрыОтчетаПоВариантуОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		КонецЕсли;
		
		НастроитьПараметрыОтборыПоФункциональнымОпциям(НовыеНастройкиКД);
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
		КомпоновщикНастроекФормы = Контекст.Отчет.КомпоновщикНастроек;
		Параметры = Контекст.Параметры;
		
		Если Параметры.Свойство("ПользовательскиеПараметры") Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьПараметрыВПользовательскиеНастройки(КомпоновщикНастроекФормы, Параметры.ПользовательскиеПараметры);
			НовыеПользовательскиеНастройкиКД = КомпоновщикНастроекФормы.ПользовательскиеНастройки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Материалы",
		НСтр("ru = 'Материалы';
			|en = 'Materials'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("НачальныйОстаток",
		НСтр("ru = 'Начальный остаток';
			|en = 'Opening balance'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоСоСклада",
		НСтр("ru = 'Поступило со склада или кладовых других цехов и приходы по перемещениям';
			|en = 'Received from warehouse or other shop floor storerooms and transfer receipts'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПоступилоВНЗП",
		НСтр("ru = 'Поступило со склада в незавершенное производство';
			|en = 'Received from warehouse to work-in-progress'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Расходы",
		НСтр("ru = 'Расходы по перемещениям, передачи на склад, в другие кладовые, в производство';
			|en = 'Expenses for transfers, transfers to a warehouse, other storerooms, production'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("СписанияНаРасходы",
		НСтр("ru = 'Списания на расходы';
			|en = 'Written off as expenses'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ПриходыОтПостащиков",
		НСтр("ru = 'Приходы от поставщика и выпуски продукции';
			|en = 'Receipts from vendor and product releases'"));
	НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонечныйОстаток",
		НСтр("ru = 'Конечный остаток';
			|en = 'Closing balance'"));
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период");
	БезОтбораПоПериоду = Не ПараметрПериодОтчета.Использование;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "БезОтбораПоПериоду", БезОтбораПоПериоду);
	
	ТекстЗапроса = ЗатратыСервер.ТекстЗапросаПроизводственныеЗатратыТМЦ();
	
	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса.ТекстЗапроса;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ЗатратыСервер.ДобавитьОтборПоВыбраннымРесурсам(ТекстЗапроса.Ресурсы, МакетКомпоновки.НаборыДанных.Основной);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина, Ложь);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТабличныйДокумент = ПроцессорВывода.ЗакончитьВывод();
	
	// удалим служебные тексты
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить("%СлужебныйОтбор% И
	|Таблица Равно ""Продукция"" И
	|");
	МассивТекстов.Добавить("%СлужебныйОтбор% И
	|Таблица Равно ""Продукция""");
	МассивТекстов.Добавить("%СлужебныйОтбор% И
	|Таблица Равно ""Материалы"" И
	|");
	МассивТекстов.Добавить("%СлужебныйОтбор% И
	|Таблица Равно ""Материалы""");
	МассивТекстов.Добавить("Таблица Равно ""Материалы"" И
	|");
	МассивТекстов.Добавить("Таблица Равно ""Материалы""");
	МассивТекстов.Добавить("Таблица Равно ""Продукция"" И
	|");
	МассивТекстов.Добавить("Таблица Равно ""Продукция""");
	
	Для Каждого Текст Из МассивТекстов Цикл
		Область = ТабличныйДокумент.НайтиТекст(Текст);
		Если Область <> Неопределено Тогда
			Область.Текст = СтрЗаменить(Область.Текст, Текст, "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Настраивает доступные значения у параметра компоновки данных "Данные по себестоимости" в зависимости от варианта.
// 
// Параметры:
//	Документ - ДокументСсылка.РаспределениеПрочихЗатрат - расшифровывающийся документ.
//	НовыеНастройкиКД - НастройкиКомпоновкиДанных - переопределяемые настройки отчета.
//	НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - настройки схемы компоновки данных.
Процедура НастроитьПараметрыОтчетаПоВариантуОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	КлючиВариантов = КлючиПредопределенныхВариантов();
	ПредопределенныйВариант = ПолучитьПредопределенныйВариант(НастройкиОтчета.ВариантСсылка);
	КлючПредопределенногоВарианта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенныйВариант, "КлючВарианта");
	Если Не ЗначениеЗаполнено(ПредопределенныйВариант) 
		Или КлючиВариантов.Найти(КлючПредопределенногоВарианта) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетПостоянныхИВременныхРазницОбщая") Тогда
		УдаляемыеПоля = ПолучитьУдаляемыеПоля();
		РасчетСебестоимостиПрикладныеАлгоритмы.ОграничитьИспользованиеПолейСКД(УдаляемыеПоля, СхемаКомпоновкиДанных,
			КомпоновщикНастроек, "", Истина);
	КонецЕсли;
	
	ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеПоСебестоимости");
	ПараметрПоПредприятию = СхемаКомпоновкиДанных.Параметры.Найти("ПоПредприятию");
	
	СписокВыбора = Новый СписокЗначений;
	
	Если КлючПредопределенногоВарианта = "ДвижениеМатериаловПродукцииРаботПоПредприятию" Тогда
		
		СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета с НДС';
										|en = 'In management accounting currency, including VAT'"));
		СписокВыбора.Добавить(2, НСтр("ru = 'В валюте упр. учета без НДС';
										|en = 'In management accounting currency, excluding VAT'"));
		ПараметрПоПредприятию.Значение = Истина;
		
	Иначе
		
		Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
			СписокВыбора.Добавить(3, НСтр("ru = 'В валюте упр. учета';
											|en = 'In management accounting currency'"));
		КонецЕсли;
		СписокВыбора.Добавить(4, НСтр("ru = 'В валюте регл. учета';
										|en = 'In local accounting currency'"));
		ПараметрПоПредприятию.Значение = Ложь;
		
	КонецЕсли;
	
	ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраДанныеОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеПоСебестоимости"));
	НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеОтчета.ИдентификаторПользовательскойНастройки);
	
	Если Не НастройкаДанныеОтчета = Неопределено
		И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
		НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредопределенныйВариант(Знач Вариант)
	
	КлючиВариантов = КлючиПредопределенныхВариантов();
	
	// Если вариант не задан, то возьмем первый из списка по умолчанию
	Если Вариант = Неопределено Тогда
		Возврат Новый Структура("КлючВарианта", КлючиВариантов[0]);
	КонецЕсли;
		
	Пока КлючиВариантов.Найти(Вариант.КлючВарианта) = Неопределено
		И ЗначениеЗаполнено(Вариант.Родитель) Цикл
		Вариант = Вариант.Родитель;
	КонецЦикла;
	
	Возврат Вариант;
	
КонецФункции

Функция КлючиПредопределенныхВариантов()
	
	КлючиВариантов = Новый Массив;
	КлючиВариантов.Добавить("ДвижениеМатериаловПродукцииРабот");
	КлючиВариантов.Добавить("ДвижениеМатериаловПродукцииРаботПоПредприятию");
	
	Возврат КлючиВариантов;
	
КонецФункции

Функция ПолучитьУдаляемыеПоля()
	
	УдаляемыеПоля = Новый Массив;
	УдаляемыеПоля.Добавить("НачальныйОстатокНУ");
	УдаляемыеПоля.Добавить("НачальныйОстатокВР");
	УдаляемыеПоля.Добавить("НачальныйОстатокПР");
	УдаляемыеПоля.Добавить("ПриобретеноНУ");
	УдаляемыеПоля.Добавить("ПриобретеноВР");
	УдаляемыеПоля.Добавить("ПриобретеноПР");
	УдаляемыеПоля.Добавить("ПоступилоНУ");
	УдаляемыеПоля.Добавить("ПоступилоВР");
	УдаляемыеПоля.Добавить("ПоступилоПР");
	УдаляемыеПоля.Добавить("ПеремещенияНУ");
	УдаляемыеПоля.Добавить("ПеремещенияВР");
	УдаляемыеПоля.Добавить("ПеремещенияПР");
	УдаляемыеПоля.Добавить("ПереданоНУ");
	УдаляемыеПоля.Добавить("ПереданоВР");
	УдаляемыеПоля.Добавить("ПереданоПР");
	УдаляемыеПоля.Добавить("СписаноНУ");
	УдаляемыеПоля.Добавить("СписаноВР");
	УдаляемыеПоля.Добавить("СписаноПР");
	УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоНУ");
	УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоВР");
	УдаляемыеПоля.Добавить("ИзрасходованоНаПроизводствоПР");
	УдаляемыеПоля.Добавить("ПроизведеноНУ");
	УдаляемыеПоля.Добавить("ПроизведеноВР");
	УдаляемыеПоля.Добавить("ПроизведеноПР");
	УдаляемыеПоля.Добавить("КонечныйОстатокНУ");
	УдаляемыеПоля.Добавить("КонечныйОстатокВР");
	УдаляемыеПоля.Добавить("КонечныйОстатокПР");
	
	Возврат УдаляемыеПоля;
	
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "ЗаказНаПроизводство");
	КонецЕсли;
	
	ВедетсяУчетПостоянныхИВременныхРазниц = Ложь; 
	//++ НЕ УТ
	
	//++ Локализация
	ВедетсяУчетПостоянныхИВременныхРазниц = Истина;
	//-- Локализация
	
	//-- НЕ УТ
	Если НЕ ВедетсяУчетПостоянныхИВременныхРазниц Тогда
		УдаляемыеПоля = ПолучитьУдаляемыеПоля();
		РасчетСебестоимостиПрикладныеАлгоритмы.ОграничитьИспользованиеПолейСКД(УдаляемыеПоля, СхемаКомпоновкиДанных,
			КомпоновщикНастроек, "", Истина);
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля);
		КомпоновкаДанныхСервер.УдалитьВыбранноеПолеИзВсехНастроекОтчета(КомпоновщикНастроекФормы, УдаляемыеПоля, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли