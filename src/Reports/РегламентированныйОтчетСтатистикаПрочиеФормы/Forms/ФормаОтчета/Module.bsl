#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем КвоОшибокКС Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОТЧ = Новый ОписаниеТипов("Число");

	ТабличныйДокумент.Очистить();
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	ДополнитьРеквизитыФормы();
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.СписокФормРазделов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мНарастающимИтогом       = Параметры.мНарастающимИтогом;
	СтруктураРеквизитовФормы.мИндексФормыОтчета       = Параметры.мИндексФормыОтчета;
	СтруктураРеквизитовФормы.мИмяФайлаШаблона         = Параметры.мИмяФайлаШаблона;
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ИсточникОтчета = СтрЗаменить(СтрЗаменить(Строка(ИмяФормы), "Отчет.", ""), ".Форма.ФормаОтчета", "");
		РезультатЗапроса = Отчеты[ИсточникОтчета].ЗапросКРегиструШаблоновЭВФ(СтруктураРеквизитовФормы.мИмяФайлаШаблона, Истина);
		
		Если РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не найден XML-шаблон по имени файла """ + СтруктураРеквизитовФормы.мИмяФайлаШаблона + """!'"));
			Возврат;
		КонецЕсли;
		
		ДанныеШаблонаОтчета = Новый Структура;
		ШаблоныОтчета = РезультатЗапроса.Выгрузить();
		Для каждого КолонкаТаблицы Из ШаблоныОтчета.Колонки Цикл
			ДанныеШаблонаОтчета.Вставить(КолонкаТаблицы.Имя, ШаблоныОтчета[0][КолонкаТаблицы.Имя]);
		КонецЦикла;
	Иначе
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		ДанныеШаблонаОтчета = Неопределено;
		Если НЕ (СписокСохранения.Свойство("ДанныеШаблонаОтчета", ДанныеШаблонаОтчета) И ДанныеШаблонаОтчета <> Неопределено) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сбой в сохраненных данных отчета!';
														|en = 'Сбой в сохраненных данных отчета!'"));
			Возврат;
		КонецЕсли;
		
		Если ДанныеШаблонаОтчета.Свойство("ИмяФайлаШаблона") Тогда
			СтруктураРеквизитовФормы.мИмяФайлаШаблона = ДанныеШаблонаОтчета.ИмяФайлаШаблона;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мАдресДанныхШаблона = ПоместитьВоВременноеХранилище(ДанныеШаблонаОтчета, УникальныйИдентификатор);
	УстановкаДоступностиШаблона();
	ПодготовитьДанныеОтчетаПоШаблону(ДанныеШаблонаОтчета, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
	СтруктураИнформацияСправочников["ИсточникОтчета"] = СформироватьСтрокуИсточникОтчета(ДанныеШаблонаОтчета);
	ИнформацияЗагруженныхСправочников = РегламентированнаяОтчетностьФСГС.ИнформацияЗагруженныхСправочников(СтруктураИнформацияСправочников["ИсточникОтчета"]);
	СтруктураИнформацияСправочников["РегистрИмя"] = ИнформацияЗагруженныхСправочников["РегистрИмя"];
	СтруктураИнформацияСправочников["СправочникиЗагружены"] = ИнформацияЗагруженныхСправочников["СправочникиЗагружены"];
	
	СтруктураРеквизитовФормы.мКодОтчета = ДанныеШаблонаОтчета.ОКУД;
	СтруктураРеквизитовФормы.мКодШаблона = ДанныеШаблонаОтчета.КодШаблона;
	СтруктураРеквизитовФормы.мВерсияФормы = ДанныеШаблонаОтчета.Версия;
	СтруктураРеквизитовФормы.НаименованиеОтчета = СокрЛП(СтрЗаменить(ДанныеШаблонаОтчета.Наименование, "--", "-"));
	Инициализация(Параметры.БезОткрытияФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ФормаОбрезатьПустыеСимволы.Пометка = ОбрезатьПустыеСимволы;
	Элементы.ФормаАвторасчетПриРедактировании.Пометка = СинхронныйАвторасчет;
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " - за " + НРег(СтруктураРеквизитовФормы.СтрПериодОтчета);
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПриОткрытииАсинх();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		ИмяОбласти = Область.Имя;
	Иначе
		// Выделение области не должно быть множественным
		ПодОбласть = ТабличныйДокумент.Область(Область.Верх, Область.Лево);
		Если Область.Верх = ПодОбласть.Верх И Область.Лево  = ПодОбласть.Лево
			И Область.Низ  = ПодОбласть.Низ  И Область.Право = ПодОбласть.Право Тогда
			// Передаем имя левой верхней ячейки выбранной области
			ИмяОбласти = ТабличныйДокумент.Область(Область.Верх, Область.Лево, Область.Верх, Область.Лево).Имя;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "ДСПМs") Тогда      // добавить строку многострочной части
		ИмяПервойЯчейкиСтроки = Сред(ИмяОбласти, 4);
		СтандартнаяОбработка = Ложь;
		ДобавитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		Возврат;
	ИначеЕсли СтрНайти(ИмяОбласти, "ДЗПМs")
		  ИЛИ СтрНайти(ИмяОбласти, "ДГПМs") Тогда // добавить строку многострочной части
		ИмяПервойЯчейкиСтроки = Сред(ИмяОбласти, 4) + "_1";
		СтандартнаяОбработка = Ложь;
		ДобавитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		Возврат;
	ИначеЕсли СтрНайти(ИмяОбласти, "УСПМs") Тогда // удалить строку многострочной части
		ИмяПервойЯчейкиСтроки = Сред(ИмяОбласти, 4);
		СтандартнаяОбработка = Ложь;
		УдалитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		Возврат;
	ИначеЕсли ИмяОбласти = "ОчиститьОбособленноеПодразделение" Тогда
		СтандартнаяОбработка = Ложь;
		ОбособленноеПодразделение = Неопределено;
		ТабличныйДокумент.Области["ОбособленноеПодразделение"].Значение = "";
		ОбособленноеПодразделениеПриИзменении(Неопределено);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли ИмяОбласти = "ОбособленноеПодразделение" Тогда
		ОбработкаВыбораПоляОбособленныхПодразделений(ЭтотОбъект, Область, СтандартнаяОбработка);
		Возврат;
	ИначеЕсли ИмяОбласти = "РегистрацияРеспондента" Тогда
		СтандартнаяОбработка = Ложь;
		ОбщийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацииВОрганеСтатистикиФормыКлиент"); 
		ОбщийМодуль.ОбработкаВыбораПоляРегистрацияРеспондента(ЭтотОбъект, Область);
		Возврат;
	КонецЕсли;
	
	ВыбОбласть = ТабличныйДокумент.Область(ИмяОбласти);
	Если ВыбОбласть.Защита ИЛИ ВыбОбласть.ЦветФона = СтруктураРеквизитовФормы.мЦветБелый Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	
	СтруктураРеквизитовФормы.УстанавливатьФорматОтображенияНуля = Истина;
	
	ИндексОбласти = 0;
	ИмяОбластиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяОбласти, ИндексОбласти);
	
	ДопПараметрыОбласти = Неопределено;
	Если СтруктураОписанийЯчеек.Свойство(ИмяОбластиБезИндекса, ДопПараметрыОбласти) Тогда
		Если НеЗагруженныеСправочники.НайтиПоЗначению(ДопПараметрыОбласти["dic"]) <> Неопределено Тогда
			СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
			Если ЗначениеЗаполнено(СтруктураИнформацияСправочников["ИдентификаторЗаданияЗагрузкиСправочников"])
				И ЗаданиеВыполнено(СтруктураИнформацияСправочников["ИдентификаторЗаданияЗагрузкиСправочников"]) Тогда
				
				ОбработкаЗагрузкиСправочников();
			КонецЕсли;
		КонецЕсли;
		
		Если ДопПараметрыОбласти["inputType"] = 0
			Или НеЗагруженныеСправочники.НайтиПоЗначению(ДопПараметрыОбласти["dic"]) <> Неопределено Тогда
			
			Если ДопПараметрыОбласти["vldType"] = 4
				И НеЗагруженныеСправочники.НайтиПоЗначению(ДопПараметрыОбласти["dic"]) <> Неопределено 
				И НеЗагруженныеСправочники.НайтиПоЗначению(ДопПараметрыОбласти["vld"]) = Неопределено Тогда 
				
				ВвестиПоказатель(Элемент, ВыбОбласть, ДопПараметрыОбласти["vldType"], ДопПараметрыОбласти["vld"], ДопПараметрыОбласти["vld"], СтандартнаяОбработка);
			Иначе
				Возврат;
			КонецЕсли;
		ИначеЕсли ДопПараметрыОбласти["vldType"] <> 0 Тогда
			ВвестиПоказатель(Элемент, ВыбОбласть, ДопПараметрыОбласти["vldType"], ДопПараметрыОбласти["dic"], ДопПараметрыОбласти["vld"], СтандартнаяОбработка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокументВыборПродолжение(Элемент, Область, Ложь, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда
		ДатаПодписи = Область.Значение;
		
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		Модифицированность = Истина;
		
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если СтруктураРеквизитовФормы.УстанавливатьФорматОтображенияНуля И Область.Значение = 0 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			СписокЭлемент = Ждать ВыбратьИзСпискаАсинх(Список, Элемент, НайденнаяСтрока);
			Если СписокЭлемент <> Неопределено  Тогда
				Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
			КонецЕсли;
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхОтчета.Вставить("ЧН" + Область.Имя, ФорматПредставленияНуля);
			КонецЕсли;
			
			СтруктураДанныхОтчета.Вставить(Область.Имя, Область.Значение);
			
			ИмяТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			ОбластьИмя = Область.Имя;
			РасчетНаКлиенте(ИмяТекущейСтраницы, ОбластьИмя);
			
			Элементы.ТабличныйДокумент.ТекущаяОбласть = СледующаяОбластьДляПерехода(Область);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхОтчета.Вставить(Область.Имя, Область.Значение);
	Модифицированность = Истина;
	ТекущаяСтраницаМодифицирована = Истина;
	ИмяТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ОбластьИмя = Область.Имя;
	РасчетНаКлиенте(ИмяТекущейСтраницы, ОбластьИмя);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СледующаяОбластьДляПерехода(Область);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяДляПроверки = Элемент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяДляПроверки, "ПМs") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		Если СтрНайти(ИмяДляПроверки, "ОДЗПМs") = 0 И СтрНайти(ИмяДляПроверки, "ОДГПМs") = 0 Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("РазделыОтчетаПриАктивизацииСтрокиЗавершение");
	ПодключитьОбработчикОжидания("РазделыОтчетаПриАктивизацииСтрокиЗавершение", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ИмяПервойЯчейкиСтроки = ИмяПервойЯчейкиОбласти(ЭтотОбъект, ТабличныйДокумент.ТекущаяОбласть);
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(ИмяПервойЯчейкиСтроки);
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	ТекТабличноеПоле = ЭтотОбъект[ТекТабличноеПолеИмя];
	
	ИмяПервойЯчейкиСтроки = ИмяПервойЯчейкиОбласти(ЭтотОбъект, ТабличныйДокумент.ТекущаяОбласть);
	
	ПерваяЯчейкаСтроки = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяПервойЯчейкиСтроки) Тогда
		
		ПерваяЯчейкаСтроки = ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтроки);
		
	КонецЕсли;
	
	Если (ПерваяЯчейкаСтроки = Неопределено) ИЛИ (СтрНайти(ИмяПервойЯчейкиСтроки, "_") = 0) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
														|en = 'Не выбрана удаляемая строка многострочного раздела.'"));
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	Отказ = Ложь;
	ДополнительныеПараметры = Новый Структура("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгрузкаПустогоОтчета = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПустой(Команда)
	ВыгрузкаПустогоОтчета = "ВыгрузкаПустогоОтчета";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	ВыгрузкаПустогоОтчета = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПустой(Команда)
	ВыгрузкаПустогоОтчета = "ВыгрузкаПустогоОтчета";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьИзФайла(Команда)
	Если Не Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда 
		Возврат;
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.Заголовок = "Укажите файл";
	Длг.Фильтр    = "|*.xml|";
	ВыбранныеФайлы = Ждать Длг.ВыбратьАсинх();
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		Результат = Ждать ПоместитьФайлНаСерверАсинх(, , , ВыбранныеФайлы[0], УникальныйИдентификатор);
		Если ТипЗнч(Результат) = Тип("ОписаниеПомещенногоФайла") Тогда 
			Ошибка = "";
			Если Не ЗагрузитьОтчет(Результат.Адрес, Ошибка) Тогда 
				ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось загрузить файл: " + Ошибка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбрезатьПустыеСимволы(Команда)
	ОбрезатьПустыеСимволы = Не ОбрезатьПустыеСимволы;
	Элементы.ФормаОбрезатьПустыеСимволы.Пометка = ОбрезатьПустыеСимволы;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияИзШаблона(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияИзШаблонаЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетПриРедактировании(Команда)
	СинхронныйАвторасчет = Не СинхронныйАвторасчет;
	Элементы.ФормаАвторасчетПриРедактировании.Пометка = СинхронныйАвторасчет;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьРеквизитыФормы()
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	СтруктураРеквизитовФормы.мЦветБелый  = ЦветаСтиля.ЦветМакетаБРОФон;
	СтруктураРеквизитовФормы.мЦветЖелтый = ЦветаСтиля.ЦветМакетаБРОРучноеЗаполнение;
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтруктураИнформацияСправочников", Новый ОписаниеТипов()));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтотОбъект["СтруктураИнформацияСправочников"] = Новый Структура;
	СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
	СтруктураИнформацияСправочников.Вставить("РегистрИмя", "");
	СтруктураИнформацияСправочников.Вставить("ИсточникОтчета", "");
	СтруктураИнформацияСправочников.Вставить("СправочникиЗагружены", Ложь);
	СтруктураИнформацияСправочников.Вставить("ЗагрузитьСправочники", Ложь);
	СтруктураИнформацияСправочников.Вставить("ШаблонДоступен", Ложь);
	СтруктураИнформацияСправочников.Вставить("ИдентификаторЗаданияЗагрузкиСправочников", Неопределено);
	СтруктураИнформацияСправочников.Вставить("СправочникиВРегистре", Новый СписокЗначений);
КонецПроцедуры

&НаСервере
Процедура УстановкаДоступностиШаблона()
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мИмяФайлаШаблона) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона КАК ИмяФайлаШаблона
		|ИЗ
		|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
		|ГДЕ
		|	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона = &ИмяФайлаШаблона";
		Запрос.УстановитьПараметр("ИмяФайлаШаблона", СтруктураРеквизитовФормы.мИмяФайлаШаблона);
		ЭтотОбъект["СтруктураИнформацияСправочников"]["ШаблонДоступен"] = Запрос.Выполнить().Выбрать().Следующий();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьСтрокуИсточникОтчета(ДанныеШаблонаОтчета)
	Возврат (ДанныеШаблонаОтчета.ОКУД + "_" + ДанныеШаблонаОтчета.КодШаблона + "_" + ДанныеШаблонаОтчета.Версия);
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мЦветБелый");
	СтруктураРеквизитовФормы.Вставить("мЦветЖелтый");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СписокФормРазделов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокОтчета");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мДатаСоставленияОтчета");
	СтруктураРеквизитовФормы.Вставить("мНарастающимИтогом");
	СтруктураРеквизитовФормы.Вставить("мИндексФормыОтчета");
	СтруктураРеквизитовФормы.Вставить("мИмяФайлаШаблона");
	СтруктураРеквизитовФормы.Вставить("мАдресДанныхШаблона");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("УстанавливатьФорматОтображенияНуля");
	СтруктураРеквизитовФормы.Вставить("СтандартнаяОбработкаВыбора");
	СтруктураРеквизитовФормы.Вставить("мКодШаблона");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЯчейкаПозиционирования", "");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	ОбрезатьПустыеСимволы = Истина;
	РегламентированнаяОтчетность.ЗапомнитьИменаСправочниковОбособленныхПодразделений(ЭтотОбъект);
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 0;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		ТекстНаименования = ?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мИндексФормыОтчета), СтруктураРеквизитовФормы.мИндексФормыОтчета, СтруктураРеквизитовФормы.НаименованиеОтчета);
		СтруктураРеквизитовФормы.ЗаголовокОтчета = "Статистика (прочие): Форма " + СокрЛП(СтрЗаменить(ТекстНаименования, "Форма", ""));
		ФормироватьСтруктуруСтраницОтчета();
		НомерКорректировки = 0;
	Иначе
		ВосстановитьСохраненныеДанные();
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			ФормироватьСтруктуруСтраницОтчета();
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	Заголовок = СтруктураРеквизитовФормы.ЗаголовокОтчета;
	
	ФормироватьСтруктуруСвойствСтраниц();
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОбщаяИнформация";
	
	Если РазделыОтчета.ПолучитьЭлементы().Количество() > 0 Тогда
		ПервыйРазделОтчета = РазделыОтчета.ПолучитьЭлементы()[0];
		ВывестиМакетВТаблДокНаСервере(ПервыйРазделОтчета.КолонкаРазделыОтчетаСокрНаим, 1, ПервыйРазделОтчета.ИдЭлементаФормыРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ПервыйРазделОтчета.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ТабличныйДокумент.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = ОбособленноеПодразделение;
	
	СформироватьСтрПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ВидимостьОбластиРегистрацииРеспондента(ЭтотОбъект, "ТабличныйДокумент");
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСГС");
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мВерсияФормы) И ТипЗнч(СтруктураРеквизитовФормы.мВерсияФормы) = Тип("Строка") Тогда 
		Заголовок = Заголовок + "/" + СтруктураРеквизитовФормы.мВерсияФормы;
	КонецЕсли;
	
	ИнициализацияПодсказокДляЯчеек();
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
	ПроверкаПрименимостиПериода();
	ОбработкаЗагрузкиСправочников();
	СинхронныйАвторасчет = (Зависимости.Количество() + РасчитываемыеЯчейки.Количество()) < 500
							И РазделыОтчета.ПолучитьЭлементы().Количество() < 5;
КонецПроцедуры

&НаСервере
Процедура ПроверкаПрименимостиПериода()
	ГодОтчетаНеВСпискеШаблона = Ложь;
	СправочникГодовПрименимости = ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_year"));
	Если СправочникГодовПрименимости.Количество() = 0 Тогда 
		СправочникГодовПрименимости = ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_god"));
	КонецЕсли;
	Если СправочникГодовПрименимости.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаЭлементовСправочника = СправочникГодовПрименимости[0].ТаблицаЭлементовСправочника;
	ПериодГод = Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=");
	Если ТаблицаЭлементовСправочника.Количество() > 0
		И ТаблицаЭлементовСправочника.НайтиСтроки(Новый Структура("Код", ПериодГод)).Количество() = 0 Тогда 
		
		ГодОтчетаНеВСпискеШаблона = Истина;
		Элементы.Проверка.Видимость = Ложь;
		Элементы.Отправка.Видимость = Ложь;
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеОтчетаПоШаблону(ДанныеШаблонаОтчета, Отказ = Ложь, ЗагружатьСписки = Истина);
	ИмяВремФайла = ПолучитьИмяВременногоФайла("." + ДанныеШаблонаОтчета.ИмяФайлаШаблона);
	
	Попытка
		ДанныеШаблонаОтчета.Шаблон.Получить().Записать(ИмяВремФайла);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить текст XML-шаблона:%1';
													|en = 'Не удалось получить текст XML-шаблона:%1'"), Символы.ПС + ОписаниеОшибки());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		ПараметрыПериода = Новый Структура;
		ПараметрыПериода.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПараметрыПериода.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыПериода.Вставить("мПериодичность", СтруктураРеквизитовФормы.мПериодичность);
		
		ДанныеДляФормированияФормулАвторасчета = ИнтерпретаторКонтрольныхСоотношенийРосстата.СформироватьДанныеАвторасчета(ИмяВремФайла, ПараметрыПериода);
		Если ТипЗнч(ДанныеДляФормированияФормулАвторасчета) = Тип("Структура") Тогда
			Для Каждого Стр Из ДанныеДляФормированияФормулАвторасчета.РасчитываемыеЯчейки Цикл 
				ЗаполнитьЗначенияСвойств(РасчитываемыеЯчейки.Добавить(), Стр);
			КонецЦикла;
			Для Каждого Стр Из ДанныеДляФормированияФормулАвторасчета.Зависимости Цикл 
				ЗаполнитьЗначенияСвойств(Зависимости.Добавить(), Стр);
			КонецЦикла;
			
			Если ДанныеДляФормированияФормулАвторасчета.Свойство("ЗависимостиМножественныхСтрок")
				И ДанныеДляФормированияФормулАвторасчета.Свойство("РасчитываемыеЯчейкиМножественныхСтрок") Тогда 
				
				Для Каждого Стр Из ДанныеДляФормированияФормулАвторасчета.ЗависимостиМножественныхСтрок Цикл 
					ЗаполнитьЗначенияСвойств(ЗависимостиМножественныхСтрок.Добавить(), Стр);
				КонецЦикла;
				Для Каждого Стр Из ДанныеДляФормированияФормулАвторасчета.РасчитываемыеЯчейкиМножественныхСтрок Цикл 
					ЗаполнитьЗначенияСвойств(РасчитываемыеЯчейкиМножественныхСтрок.Добавить(), Стр);
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеДляФормированияФормулАвторасчета.Свойство("ИтогиПоМножественнымСтрокам") Тогда 
				Для Каждого Стр Из ДанныеДляФормированияФормулАвторасчета.ИтогиПоМножественнымСтрокам Цикл 
					ЗаполнитьЗначенияСвойств(ИтогиПоМножественнымСтрокам.Добавить(), Стр);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДокументШаблон = ЗагрузитьФайлXML(ИмяВремФайла);
	
	УдалитьФайлы(ИмяВремФайла);
	
	КорневойУзел = ДокументШаблон.ДочерниеУзлы[0]; //metaForm
	
	СтруктураАтрибутовОтчета = Новый Структура;
	СтруктураАтрибутовОтчета.Вставить("code",            ДанныеШаблонаОтчета.КодШаблона);
	СтруктураАтрибутовОтчета.Вставить("idp",             ДанныеШаблонаОтчета.КодПериодичности);
	СтруктураАтрибутовОтчета.Вставить("idf",             ДанныеШаблонаОтчета.КодФормы);
	СтруктураАтрибутовОтчета.Вставить("shifr",           ДанныеШаблонаОтчета.Шифр);
	СтруктураАтрибутовОтчета.Вставить("name",            ДанныеШаблонаОтчета.Наименование);
	СтруктураАтрибутовОтчета.Вставить("OKUD",            Прав("00000000" + ДанныеШаблонаОтчета.ОКУД, 7));
	СтруктураАтрибутовОтчета.Вставить("version",         ДанныеШаблонаОтчета.Версия);
	СтруктураАтрибутовОтчета.Вставить("format_version",  КорневойУзел.ПолучитьАтрибут("format-version"));
	СтруктураАтрибутовОтчета.Вставить("obj",             КорневойУзел.ПолучитьАтрибут("obj"));
	СтруктураАтрибутовОтчета.Вставить("ИмяФайлаШаблона", ДанныеШаблонаОтчета.ИмяФайлаШаблона);
	
	СтруктураЗамененныхАтрибутовОтчета = Новый Структура;
	
	ИмяТекущегоУзла = "settings";
	СтруктураАтрибутовОтчета.Вставить(ИмяТекущегоУзла, Новый Структура);
	СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("sign",       "true");
	СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("validation", "always");
	СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("notEmpty",   "true");
	
	УзлыНастройки = КорневойУзел.ПолучитьЭлементыПоИмени(ИмяТекущегоУзла);
	Если УзлыНастройки.Количество() > 0 Тогда
		УзлыПодписать = УзлыНастройки[0].ПолучитьЭлементыПоИмени("sign");
		Если УзлыПодписать.Количество() > 0 Тогда
			СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("sign",       УзлыПодписать[0].ТекстовоеСодержимое);
		КонецЕсли;
		УзлыКонтроль  = УзлыНастройки[0].ПолучитьЭлементыПоИмени("validation");
		Если УзлыКонтроль.Количество() > 0 Тогда
			СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("validation", УзлыКонтроль[0].ТекстовоеСодержимое);
		КонецЕсли;
		УзлыНеПустой  = УзлыНастройки[0].ПолучитьЭлементыПоИмени("notEmpty");
		Если УзлыНеПустой.Количество() > 0 Тогда
			СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Вставить("notEmpty",   УзлыНеПустой[0].ТекстовоеСодержимое);
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекущегоУзла = "title";
	СтруктураАтрибутовОтчета.Вставить(ИмяТекущегоУзла, Новый СписокЗначений);
	СтруктураАтрибутовОтчета.Вставить("title_detail",  Новый Структура);
	
	СписокПолей = СтруктураАтрибутовОтчета["obj"] + ", " + "name, leader_fio, responsible_post, responsible_fio, phone, org_adress";
	СписокОсновныхПолей = Новый Структура(СписокПолей);
	
	УзлыОбщаяИнформация = КорневойУзел.ПолучитьЭлементыПоИмени(ИмяТекущегоУзла);
	СчетчикПлохихИмен = 0;
	Если УзлыОбщаяИнформация.Количество() > 0 Тогда
		УзлыОбщаяИнформацияЭлементы = УзлыОбщаяИнформация[0].ПолучитьЭлементыПоИмени("item");
		Для каждого УзелОбщаяИнформацияЭлемент Из УзлыОбщаяИнформацияЭлементы Цикл
			
			ИмяПоля = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("field");
			ОписаниеПоля = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("name");
			ИмяСправочника = УзелОбщаяИнформацияЭлемент.ПолучитьАтрибут("dic");
			ИмяСправочника = ?(ИмяСправочника = Неопределено, "", ИмяСправочника);
			
			Попытка
				СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Добавить(ИмяПоля, ОписаниеПоля, СписокОсновныхПолей.Свойство(ИмяПоля));
				СтруктураАтрибутовОтчета["title_detail"].Вставить(ИмяПоля, Новый Структура("dic, var", ИмяСправочника));
			Исключение
				СчетчикПлохихИмен = СчетчикПлохихИмен + 1;
				НовИмяПоля = "_repl_" + Формат(СчетчикПлохихИмен, "ЧЦ=5; ЧН=00000; ЧВН=; ЧГ=");
				СтруктураЗамененныхАтрибутовОтчета.Вставить(НовИмяПоля, ИмяПоля);
				СтруктураАтрибутовОтчета[ИмяТекущегоУзла].Добавить(НовИмяПоля, ОписаниеПоля, Ложь);
				СтруктураАтрибутовОтчета["title_detail"].Вставить(НовИмяПоля, Новый Структура("dic, var", ИмяСправочника));
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	СхемаВыгрузкиОтчета.ПолучитьЭлементы().Очистить();
	
	ЭлементДереваОтчет = СхемаВыгрузкиОтчета.ПолучитьЭлементы().Добавить();
	ЭлементДереваОтчет.Код                     = "report";
	ЭлементДереваОтчет.Тип                     = "C";
	ЭлементДереваОтчет.Обязательность          = "О";
	ЭлементДереваОтчет.Представление           = СтруктураАтрибутовОтчета["name"];
	СформироватьАтрибутыКорневогоЭлементаСхемыВыгрузки(ЭлементДереваОтчет);
	
	ЭлементДереваОбщаяИнформация = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваОбщаяИнформация.Код            = "title";
	ЭлементДереваОбщаяИнформация.Тип            = "C";
	ЭлементДереваОбщаяИнформация.Обязательность = "О";
	СформироватьЭлементыРазделаОбщаяИнформацияСхемыВыгрузки(ЭлементДереваОбщаяИнформация);
	
	ЭлементДереваРазделыОтчета = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваРазделыОтчета.Код              = "sections";
	ЭлементДереваРазделыОтчета.Тип              = "C";
	ЭлементДереваРазделыОтчета.Обязательность   = "О";
	ЭлементДереваРазделыОтчета.Раздел           = "ПолеТабличногоДокумента";
	
	СтруктураДанныхОтчета  = Новый Структура;
	СтруктураОписанийЯчеек = Новый Структура;
	СтруктураРеквизитовФормы.СписокФормРазделов.Очистить();
	
	ГенерироватьМакетИСтруктуруДанныхРазделаОбщаяИнформация();
	ПараметрыГрафРазделов = Новый Структура;
	
	Если ЗагружатьСписки Тогда 
		ТаблицаСправочников.Очистить();
		УзлыСправочники = КорневойУзел.ПолучитьЭлементыПоИмени("dics")[0].ПолучитьЭлементыПоИмени("dic");
		МаксимумДляЗагрузки = 100000;
		СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
		Для каждого УзелСправочник Из УзлыСправочники Цикл
			Если УзелСправочник.ДочерниеУзлы.Количество() > МаксимумДляЗагрузки 
				И СтруктураИнформацияСправочников["ШаблонДоступен"] Тогда 
				
				СтруктураИнформацияСправочников["ЗагрузитьСправочники"] = Истина;
				МаксимумДляЗагрузки = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого УзелСправочник Из УзлыСправочники Цикл
			ДочерниеУзлыКоличество = УзелСправочник.ДочерниеУзлы.Количество();
			ИдентификаторСправочника = НРег(УзелСправочник.ПолучитьАтрибут("id"));
			ЭтоСправочникПериода = ((ИдентификаторСправочника = "s_year")
				Или (ИдентификаторСправочника = "s_god")
			Или (ИдентификаторСправочника = "s_mes")
			Или (ИдентификаторСправочника = "s_time"));
			
			Если (ДочерниеУзлыКоличество > МаксимумДляЗагрузки Или ДочерниеУзлыКоличество = 0) И (Не ЭтоСправочникПериода) Тогда 
				НеЗагруженныеСправочники.Добавить(УзелСправочник.ПолучитьАтрибут("id"));
			Иначе 
				ДобавитьСправочникВТаблицу(УзелСправочник);
			КонецЕсли;
		КонецЦикла;
		ИндексироватьПриложенияТаблицыСправочников();
	КонецЕсли;
	
	УзлыСекции = КорневойУзел.ПолучитьЭлементыПоИмени("sections")[0].ПолучитьЭлементыПоИмени("section");
	Для каждого УзелСекция Из УзлыСекции Цикл
		ГенерироватьМакетИСтруктуруДанныхРаздела(УзелСекция, ЭлементДереваРазделыОтчета);
	КонецЦикла;
	ДобавитьКОписаниюЯчеекСсылкиНаЗависимыеЯчейки();
КонецПроцедуры

&НаСервере
Процедура ГенерироватьМакетИСтруктуруДанныхРазделаОбщаяИнформация()
	
	ОбразцыОбластей = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета");
	
	МакетРаздела = Новый ТабличныйДокумент;
	
	// Номер корректировки
	ПустаяСтрока         = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьНомераКорр    = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьПодразделение = ОбразцыОбластей.ПолучитьОбласть("ШапкаОбособленныеПодразделения");
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ЦелеваяЯчейка = ОбластьНомераКорр.Область(1, 3, 1, 3);
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	ЦелеваяЯчейка.Имя = "НомерКорректировки";
	ЦелеваяЯчейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9);
	ЦелеваяЯчейка.Формат = "ЧН=0";
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
	Попытка
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	Исключение
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	КонецПопытки;
	ЦелеваяЯчейка.Защита = Ложь;
	ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветЖелтый;
	
	ЦелеваяЯчейка = ОбластьНомераКорр.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	ЦелеваяЯчейка.Текст = "Номер корректировки ";
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9);
	
	МакетРаздела.Вывести(ОбластьНомераКорр);
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть(2, , 2, );
	ОбластьШапки.Область(1, 2, 1, 2).Текст = "Общая информация";
	МакетРаздела.Вывести(ОбластьШапки);
	
	МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая"));
	
	СписокРеквизитов = СтруктураАтрибутовОтчета["title"];
	ДетализацияСпискаРеквизитов = СтруктураАтрибутовОтчета["title_detail"];
	
	МакетРаздела.Вывести(ОбластьПодразделение);
	
	Если РегламентированнаяОтчетность.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
		ВывестиРегистрациюРеспондента(МакетРаздела, ОбразцыОбластей);
	КонецЕсли;
	
	Для каждого ЭлементРеквизит Из СписокРеквизитов Цикл
		
		ИмяПоля = ЭлементРеквизит.Значение;
		ОписаниеПоля = СокрЛП(ЭлементРеквизит.Представление);
		СтруктураДопРеквизитов = ДетализацияСпискаРеквизитов[ИмяПоля];
		
		ОбластьСтроки = ОбразцыОбластей.ПолучитьОбласть("ОбщаяИнформация");
		ОбластьСтроки.Область(1, 2, 1, 2).Текст = ВРег(Лев(ОписаниеПоля, 1)) + Сред(ОписаниеПоля, 2);
		
		ЦелеваяЯчейка = ОбластьСтроки.Область(1, 4, 1, 4);
		ЦелеваяЯчейка.СодержитЗначение = Истина;
		ЦелеваяЯчейка.Имя = ИмяПоля;
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата("", , "Строка");
		ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
		Попытка
			ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
		Исключение
			ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеВвода"));
		КонецПопытки;
		ЦелеваяЯчейка.Защита = Ложь;
		ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветЖелтый;
		
		СтруктураДанныхОтчета.Вставить(ЦелеваяЯчейка.Имя, ЦелеваяЯчейка.Значение);
		
		ИмяСправочника = СтруктураДопРеквизитов["dic"];
		ТипПроверки = ?(ПустаяСтрока(ИмяСправочника), 0, 1);
		ПараметрыЦелевойЯчейки = Новый Структура("inputType, vldType, vld, dic", 1, ТипПроверки, "", ИмяСправочника);
		
		СтруктураОписанийЯчеек.Вставить(ИмяПоля, ПараметрыЦелевойЯчейки);
		
		ОбластьВывода = МакетРаздела.Вывести(ОбластьСтроки);
		ОбластьВывода.Имя = "";
		ОбластьВывода = МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая"));
		ОбластьВывода.Имя = "";
		
	КонецЦикла;
	
	// Дата составления отчета
	ПустаяСтрока   = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьДаты    = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	ОбластьДатыНиз = ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая");
	
	МакетРаздела.Вывести(ПустаяСтрока);
	
	ЦелеваяЯчейка = ОбластьДаты.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	ЦелеваяЯчейка.Имя = "ДатаСоставленияОтчета";
	ЦелеваяЯчейка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦелеваяЯчейка.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ЦелеваяЯчейка.Формат = "Л=; ДФ='dd MMMM yyyy ""г.""'";
	ЦелеваяЯчейка.Шрифт = Новый Шрифт(ЦелеваяЯчейка.Шрифт, , 9, Истина);
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
	Попытка
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	Исключение
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	КонецПопытки;
	ЦелеваяЯчейка.Защита = Ложь;
	ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветЖелтый;
	
	МакетРаздела.Вывести(ОбластьДаты);
	
	ЦелеваяЯчейка = ОбластьДатыНиз.Область(1, 2, 1, 2);
	ЦелеваяЯчейка.ВертикальноеПоложение   = ВертикальноеПоложение.Верх;
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ЦелеваяЯчейка.Текст = "(дата составления документа)";
	
	МакетРаздела.Вывести(ОбластьДатыНиз);
	
	МакетРаздела.Область("C2").ШиринаКолонки = 58;
	МакетРаздела.Область("C3").ШиринаКолонки = 10;
	МакетРаздела.Область("C4").ШиринаКолонки = 60;
	
	МакетРаздела.Область("R4C2:R4C4").ПоВыделеннымКолонкам = Истина;
	МакетРаздела.Вывод = ИспользованиеВывода.Разрешить;
	
	СтруктураРеквизитовФормы.СписокФормРазделов.Добавить(МакетРаздела, "ОбщаяИнформация");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРегистрациюРеспондента(МакетРаздела, ОбразцыОбластей)
	
	ОписаниеПоля = "Регистрация респондента";
	ОбластьСтроки = ОбразцыОбластей.ПолучитьОбласть("ОбщаяИнформация");
	ОбластьСтроки.Область(1, 2, 1, 2).Текст = ВРег(Лев(ОписаниеПоля, 1)) + Сред(ОписаниеПоля, 2);
	
	ЦелеваяЯчейка = ОбластьСтроки.Область(1, 4, 1, 4);
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	ЦелеваяЯчейка.Имя = "РегистрацияРеспондента";
	ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата("", , "Строка");
	ЦелеваяЯчейка.Значение = ЦелеваяЯчейка.ТипЗначения.ПривестиЗначение();
	Попытка
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	Исключение
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	КонецПопытки;
	ЦелеваяЯчейка.Защита = Ложь;
	ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветЖелтый;
	
	СтруктураДанныхОтчета.Вставить(ЦелеваяЯчейка.Имя, ЦелеваяЯчейка.Значение);
	
	Шапка = Новый ТабличныйДокумент;
	
	ОбластьВывода = Шапка.Вывести(ОбластьСтроки);
	ОбластьВывода.Имя = "";
	ОбластьВывода = Шапка.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаПустая"));
	ОбластьВывода.Имя = "";
	
	Шапка.Область("R1:R2").Имя = "ШапкаРегистрацияРеспондента";
	МакетРаздела.Вывести(Шапка);
	
КонецПроцедуры

&НаСервере
Процедура ГенерироватьМакетИСтруктуруДанныхРаздела(УзелСекция, ЭлементДереваРазделыОтчета)
	КодСекцииТекст = УзелСекция.ПолучитьАтрибут("code");
	КодСекции      = ?(ПустаяСтрока(КодСекцииТекст), 0, Число(КодСекцииТекст));
	ИмяСекции      = СокрЛП(СтрЗаменить(СтрЗаменить(УзелСекция.ПолучитьАтрибут("name"), Символы.НПП, " "), "  ", " "));
	ИмяСекции      = ВРег(Лев(ИмяСекции, 1)) + Сред(ИмяСекции, 2);
	ИДСекцииТекст  = УзелСекция.ПолучитьАтрибут("nb");
	ИДСекции       = ?(ПустаяСтрока(ИДСекцииТекст), 0, Число(ИДСекцииТекст));
	
	ЭлементДереваРазделОтчета = ЭлементДереваРазделыОтчета.ПолучитьЭлементы().Добавить();
	ЭлементДереваРазделОтчета.Код                   = "section";
	ЭлементДереваРазделОтчета.Тип                   = "C";
	ЭлементДереваРазделОтчета.Обязательность        = "О";
	ЭлементДереваРазделОтчета.Раздел                = "ПолеТабличногоДокумента";
	ЭлементДереваРазделОтчета.Представление         = ИмяСекции;
	
	ЭлементДереваАтрибутРаздела = ЭлементДереваРазделОтчета.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибутРаздела.Код                 = "code";
	ЭлементДереваАтрибутРаздела.Тип                 = "A";
	ЭлементДереваАтрибутРаздела.Обязательность      = "О";
	ЭлементДереваАтрибутРаздела.ЗначениеПоУмолчанию = КодСекцииТекст;
	
	ОбразцыОбластей = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета");
	
	МакетРаздела = Новый ТабличныйДокумент;
	МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|ПустойСтолбец"));
	
	СписокПараметровКолонок = Новый СписокЗначений;
	
	УзлыОписанияКолонок = УзелСекция.ПолучитьЭлементыПоИмени("columns")[0].ПолучитьЭлементыПоИмени("column");
	Для каждого УзелОписанияКолонки Из УзлыОписанияКолонок Цикл
		
		ПараметрыКолонки = Новый Соответствие;
		ПараметрыКолонки.Вставить("codesection", КодСекции);
		ПараметрыКолонки.Вставить("code", УзелОписанияКолонки.ПолучитьАтрибут("code"));
		ПараметрыКолонки.Вставить("name", УзелОписанияКолонки.ПолучитьАтрибут("name"));
		// Типы столбцов:
		// B - столбец-боковик
		// Z - столбец-значение
		// S - столбец-специфика
		ПараметрыКолонки.Вставить("type", УзелОписанияКолонки.ПолучитьАтрибут("type"));
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И УзелОписанияКолонки.УзелИдентичен(УзлыОписанияКолонок[0]) Тогда
			ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|Боковик"); // только для первой колонки
			ОбластьШапки.Область(2, 1).Текст = ИмяСекции;
			ОбластьШапки.Область(4, 2).Текст = ПараметрыКолонки["name"];
			ОбластьШапки.Область(5, 2).Текст = ПараметрыКолонки["code"];
		Иначе // столбец-значение
			ОбластьШапки = ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|Значение");
			ОбластьШапки.Область(4, 1).Текст = ПараметрыКолонки["name"];
			ОбластьШапки.Область(5, 1).Текст = ПараметрыКолонки["code"];
		КонецЕсли;
		МакетРаздела.Присоединить(ОбластьШапки);
		
		КлючСпецифики       = УзелОписанияКолонки.ПолучитьАтрибут("fld");    // необязательный
		ПараметрыКолонки.Вставить("fld", ?(КлючСпецифики = Неопределено, "", КлючСпецифики));
		УсловиеЗакрещивания = УзелОписанияКолонки.ПолучитьАтрибут("pr_inp"); // необязательный
		ПараметрыКолонки.Вставить("pr_inp", ?(УсловиеЗакрещивания = Неопределено, "false", УсловиеЗакрещивания));
		
		УзлыОписанияЯчеекПоУмолч = УзелОписанияКолонки.ПолучитьЭлементыПоИмени("default-cell");
		Если УзлыОписанияЯчеекПоУмолч.Количество() > 0 Тогда
			
			ПараметрыКолонки.Вставить("column", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("column"));
			ПараметрыКолонки.Вставить("format", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("format"));
			// Тип ячейки:
			// 0 - ячейка запрещена для ввода
			// 1 - ячейка, обязательная для ввода
			// 2 - ячейка, не обязательная для ввода
			ПараметрыКолонки.Вставить("inputType", УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("inputType"));
			СправочникЯчейки  = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("dic");
			ПараметрыКолонки.Вставить("dic", ?(СправочникЯчейки = Неопределено, "", СправочникЯчейки));
			// Тип проверки в ячейке:
			// 0 - проверки не требуется (по умолчанию)
			// 1 - проверка по справочнику, указанному в атрибуте dic
			// 2 - проверка на диапазон значений, указанных в атрибуте vld
			// 3 - проверка по списку значений, указанных в атрибуте vld
			// 4 - проверка по приложения, справочник указывается в атрибуте dic, приложение - в атрибуте vld
			// 5 - проверка по справочнику, используя фильтрацию по формуле, указанной в атрибуте vld
			ТипПроверкиЯчейки = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("vldType");
			ПараметрыКолонки.Вставить("vldType", ?(ТипПроверкиЯчейки = Неопределено, "0", ТипПроверкиЯчейки));
			// Дополнительные параметры фильтрации зависит от атрибута vldType:
			// vldType=0: проверки не требуется. По умолчанию 
			// vldType=1: проверка по справочнику, указанному в атрибуте dic 
			// vldType=2: диапазон значений вида "1-10"
			// vldType=3: список значений вида "1,2,5,7"
			// vldType=4: идентификатор приложения, по которому усекается справочник
			// vldType=5: фильтр для справочника вида "okp=#5,50,Г" - где:
			//   "okp" - дополнительный атрибут в теге "term" справочника,
			//   "#5,50,Г" - координата ячейки, из которой берется значение для фильтрации ("5" - раздел формы, "50" - код строки, "Г" - код столбца)
			ДопПарамЯчейки    = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("vld");
			ПараметрыКолонки.Вставить("vld", ?(ДопПарамЯчейки = Неопределено, "", СокрЛП(ДопПарамЯчейки)));
			ЗначЯчейкиПоУмолч = УзлыОписанияЯчеекПоУмолч[0].ПолучитьАтрибут("default");
			ПараметрыКолонки.Вставить("default", ?(ЗначЯчейкиПоУмолч = Неопределено, "", ЗначЯчейкиПоУмолч));
			
		КонецЕсли;
		
		СписокПараметровКолонок.Добавить(ПараметрыКолонки, ПараметрыКолонки["code"]);
		
	КонецЦикла;
	
	МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("ШапкаРаздела|ПустойСтолбец"));
	МакетРаздела.Область(2, 1, 2, СписокПараметровКолонок.Количество() + 2).ПоВыделеннымКолонкам = Истина;
	МакетРаздела.ПовторятьПриПечатиСтроки = МакетРаздела.Область(4, , 4, );
	
	ЕстьМногострочностьВРазделе = Ложь;
	
	УзлыОписанияСтрок   = УзелСекция.ПолучитьЭлементыПоИмени("rows")[0].ПолучитьЭлементыПоИмени("row");
	
	Для каждого УзелОписанияСтроки Из УзлыОписанияСтрок Цикл
		
		ПараметрыСтроки = Новый Соответствие;
		
		КодСтрокиТекст      = УзелОписанияСтроки.ПолучитьАтрибут("code");
		ПараметрыСтроки.Вставить("code_text", КодСтрокиТекст);
		ПараметрыСтроки.Вставить("code", ?(ПустаяСтрока(КодСтрокиТекст), "", Число(КодСтрокиТекст)));
		ПараметрыСтроки.Вставить("name", УзелОписанияСтроки.ПолучитьАтрибут("name"));
		// Тип строки:
		// C - текстовая строка, не предназначена для ввода данных
		// F - фиксированная строка, предназначенная для ввода данных
		// M - множественная строка, пользователь имеет возможность ввести данную строку несколько раз
		ПараметрыСтроки.Вставить("type", УзелОписанияСтроки.ПолучитьАтрибут("type"));
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			ЕстьМногострочностьВРазделе = Истина;
		КонецЕсли;
		// Атрибут grv имеет смысл для множественных строк (type="M").
		// Указываются перечисленные через запятую коды столбцов специфик (например, "В"), которые являются ключевыми для данной множественной строки
		КлючМнСтроки = УзелОписанияСтроки.ПолучитьАтрибут("grv");
		ПараметрыСтроки.Вставить("grv", ?(КлючМнСтроки = Неопределено, "", КлючМнСтроки));
		УсловиеЗакрещиванияСтроки = УзелОписанияСтроки.ПолучитьАтрибут("pr_inp");
		ПараметрыСтроки.Вставить("pr_inp", ?(УсловиеЗакрещиванияСтроки = Неопределено, "false", УсловиеЗакрещиванияСтроки));
		
		ПараметрыЯчеекСтроки = Новый Соответствие;
		
		УзлыОписанияЯчеек = УзелОписанияСтроки.ПолучитьЭлементыПоИмени("cell");
		ПеречисленныеКолонки = Новый Соответствие;
		Для каждого УзелОписанияЯчейки Из УзлыОписанияЯчеек Цикл
			ПеречисленныеКолонки.Вставить(УзелОписанияЯчейки.ПолучитьАтрибут("column"), Истина);
			ПараметрыЯчейки = Новый Соответствие;
			
			ПараметрыЯчейки.Вставить("column", УзелОписанияЯчейки.ПолучитьАтрибут("column"));
			ПараметрыЯчейки.Вставить("format", УзелОписанияЯчейки.ПолучитьАтрибут("format"));
			// Тип ячейки:
			// 0 - ячейка запрещена для ввода
			// 1 - ячейка, обязательная для ввода
			// 2 - ячейка, не обязательная для ввода
			ПараметрыЯчейки.Вставить("inputType", УзелОписанияЯчейки.ПолучитьАтрибут("inputType"));
			СправочникЯчейки  = УзелОписанияЯчейки.ПолучитьАтрибут("dic");
			ПараметрыЯчейки.Вставить("dic", ?(СправочникЯчейки = Неопределено, "", СправочникЯчейки));
			// Тип проверки в ячейке:
			// 0 - проверки не требуется (по умолчанию)
			// 1 - проверка по справочнику, указанному в атрибуте dic
			// 2 - проверка на диапазон значений, указанных в атрибуте vld
			// 3 - проверка по списку значений, указанных в атрибуте vld
			// 4 - проверка по приложения, справочник указывается в атрибуте dic, приложение - в атрибуте vld
			// 5 - проверка по справочнику, используя фильтрацию по формуле, указанной в атрибуте vld
			ТипПроверкиЯчейки = УзелОписанияЯчейки.ПолучитьАтрибут("vldType");
			ПараметрыЯчейки.Вставить("vldType", ?(ТипПроверкиЯчейки = Неопределено, "0", ТипПроверкиЯчейки));
			// Дополнительные параметры фильтрации зависит от атрибута vldType:
			// vldType=2: диапазон значений вида "1-10"
			// vldType=3: список значений вида "1,2,5,7"
			// vldType=4: идентификатор приложения, по которому усекается справочник
			// vldType=5: фильтр для справочника вида "okp=#5,50,Г" - где:
			//   "okp" - дополнительный атрибут в теге "term" справочника,
			//   "#5,50,Г" - координата ячейки, из которой берется значение для фильтрации ("5" - раздел формы, "50" - код строки, "Г" - код столбца)
			ДопПарамЯчейки    = УзелОписанияЯчейки.ПолучитьАтрибут("vld");
			ПараметрыЯчейки.Вставить("vld", ?(ДопПарамЯчейки = Неопределено, "", СокрЛП(ДопПарамЯчейки)));
			ЗначЯчейкиПоУмолч = УзелОписанияЯчейки.ПолучитьАтрибут("default");
			ПараметрыЯчейки.Вставить("default", ?(ЗначЯчейкиПоУмолч = Неопределено, "", ЗначЯчейкиПоУмолч));
			УсловиеЗакрещивания = УзелОписанияЯчейки.ПолучитьАтрибут("pr_inp");
			ПараметрыЯчейки.Вставить("pr_inp", ?(УсловиеЗакрещивания = Неопределено, "false", УсловиеЗакрещивания));
			
			Если СтрНачинаетсяС(ПараметрыЯчейки["format"], "N(")
				И СтрЗаканчиваетсяНа(ПараметрыЯчейки["format"], ",0)")
				И "M" = ПараметрыСтроки["type"]
				И "" = ПараметрыЯчейки["dic"] Тогда 
				
				КодКолонки = ПараметрыЯчейки["column"];
				Для Каждого ЭлементКолонка Из СписокПараметровКолонок Цикл 
					Если ЭлементКолонка.Представление = КодКолонки Тогда 
						ОписаниеКолонки = ЭлементКолонка.Значение;
						Если ОписаниеКолонки["type"] = "S" И Не ЗначениеЗаполнено(ОписаниеКолонки["dic"]) Тогда
							НоваяДлинна = СтрЗаменить(СтрЗаменить(ПараметрыЯчейки["format"], "N(", ""), ",0)", "");
							ПараметрыЯчейки["format"] = "C(" + НоваяДлинна + ")";
							Маска = "";
							Для Ит = 1 По ОТЧ.ПривестиЗначение(НоваяДлинна) Цикл 
								Маска = Маска + "9";
							КонецЦикла;
							ПараметрыЯчейки.Вставить("mask", Маска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрНачинаетсяС(ПараметрыЯчейки["format"], "N(")
				И ПараметрыЯчейки["inputType"] = "0"
				И "F" = ПараметрыСтроки["type"]
				И ЗначениеЗаполнено(ПараметрыЯчейки["default"])
				И ОТЧ.ПривестиЗначение(ПараметрыЯчейки["default"]) = 0 Тогда 
				
				ПараметрыЯчейки["format"] = "C(" + СтрДлина(ПараметрыЯчейки["default"]) + ")";
			КонецЕсли;
			
			ПараметрыЯчеекСтроки.Вставить(ПараметрыЯчейки["column"], ПараметрыЯчейки);
		КонецЦикла;
		
		Если ПараметрыЯчеекСтроки.Количество() > 0 Тогда
			ПараметрыСтроки.Вставить("cell", ПараметрыЯчеекСтроки);
		КонецЕсли;
		
		НомерПоследнейСтрокиМакета = МакетРаздела.ВысотаТаблицы;
		КоличествоСтолбцовВМакете  = МакетРаздела.ШиринаТаблицы;
		
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("МнСтрокаРаздела|ПустойСтолбец"));
		Иначе
			МакетРаздела.Вывести(ОбразцыОбластей.ПолучитьОбласть("СтрокаРаздела|ПустойСтолбец"));
		КонецЕсли;
		
		Если ЕстьМногострочностьВРазделе Тогда 
			Для Каждого Колонка Из СписокПараметровКолонок Цикл 
				ОписаниеКолонки = Колонка.Значение;
				Если ПеречисленныеКолонки[ОписаниеКолонки["code"]] = Истина
					Или ВРег(ОписаниеКолонки["type"]) <> "S"
					Или ЗначениеЗаполнено(ОписаниеКолонки["dic"])
					Или Не СтрНачинаетсяС(ОписаниеКолонки["format"], "N(")
					Или Не СтрЗаканчиваетсяНа(ОписаниеКолонки["format"], ",0)") Тогда 
					
					Продолжить;
				КонецЕсли;
				
				НоваяДлинна = СтрЗаменить(СтрЗаменить(ОписаниеКолонки["format"], "N(", ""), ",0)", "");
				ОписаниеКолонки["format"] = "C(" + НоваяДлинна + ")";
				Маска = "";
				Для Ит = 1 По ОТЧ.ПривестиЗначение(НоваяДлинна) Цикл 
					Маска = Маска + "9";
				КонецЦикла;
				ОписаниеКолонки.Вставить("mask", Маска);
			КонецЦикла;
		КонецЕсли;
		СформироватьСтрокуМакетаРаздела(МакетРаздела, ОбразцыОбластей, СписокПараметровКолонок, ПараметрыСтроки, ЭлементДереваРазделОтчета);
		
		Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
			МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("МнСтрокаРаздела|ПустойСтолбец2"));
		Иначе
			МакетРаздела.Присоединить(ОбразцыОбластей.ПолучитьОбласть("СтрокаРаздела|ПустойСтолбец2"));
		КонецЕсли;
		
		Если Лев(МакетРаздела.Область(НомерПоследнейСтрокиМакета, 2, НомерПоследнейСтрокиМакета, 2).Имя, 3) = "ОДЗ" Тогда
			НетЛинии           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			ЛинияСплошная      = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ЛинияРедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			Для НомСтолбца = 1 По КоличествоСтолбцовВМакете Цикл
				ОбластьЯчейкиПредСтроки = МакетРаздела.Область(НомерПоследнейСтрокиМакета, НомСтолбца, НомерПоследнейСтрокиМакета, НомСтолбца);
				ОбластьЯчейкиСтроки = МакетРаздела.Область(НомерПоследнейСтрокиМакета + 1, НомСтолбца, НомерПоследнейСтрокиМакета + 1, НомСтолбца);
				Если ОбластьЯчейкиПредСтроки.ГраницаСнизу = ЛинияРедкийПунктир Тогда
					ОбластьЯчейкиПредСтроки.ГраницаСнизу = НетЛинии;
					ОбластьЯчейкиСтроки.ГраницаСверху = ЛинияСплошная;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьШиринуКолонокМакетаРаздела(МакетРаздела, СписокПараметровКолонок);
	
	МакетРаздела.ФиксацияСверху = 3;
	МакетРаздела.ФиксацияСлева  = 3;
	
	МакетРаздела.Вывод = ИспользованиеВывода.Разрешить;
	
	СтруктураРеквизитовФормы.СписокФормРазделов.Добавить(МакетРаздела, "Раздел" + Формат(КодСекции, "ЧГ=;ЧН="), ЕстьМногострочностьВРазделе);
	
	ДобавитьВРеквизитСписокПараметровКолонок(КодСекции, СписокПараметровКолонок);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуМакетаРаздела(МакетРаздела, МакетОбразцовОбластей, СписокПараметровКолонок, ПараметрыСтроки, ЭлементДереваРазделОтчета)
	
	Перем ЭлементДереваСтрокаРаздела;
	
	Многострочный = Ложь;
	ДляВводаДанных  = Истина;
	Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
		ИмяГоризонтальнойСекции = "МнСтрокаРаздела";
		Многострочный = Истина;
	ИначеЕсли СтрНайти(ВРег(ПараметрыСтроки["type"]), "C") > 0 Тогда
		ИмяГоризонтальнойСекции = "СтрокаРаздела";
		ДляВводаДанных  = Ложь;
	Иначе
		ИмяГоризонтальнойСекции = "СтрокаРаздела";
	КонецЕсли;
	
	Если ДляВводаДанных Тогда
		
		ЭлементДереваСтрокаРаздела = ЭлементДереваРазделОтчета.ПолучитьЭлементы().Добавить();
		ЭлементДереваСтрокаРаздела.Код                 = "row";
		ЭлементДереваСтрокаРаздела.Тип                 = "C";
		ЭлементДереваСтрокаРаздела.Обязательность      = "Н";
		ЭлементДереваСтрокаРаздела.Многострочность     = Многострочный;
		ЭлементДереваСтрокаРаздела.Представление       = ПараметрыСтроки["name"];
		
		ЭлементДереваАтрибутСтроки = ЭлементДереваСтрокаРаздела.ПолучитьЭлементы().Добавить();
		ЭлементДереваАтрибутСтроки.Код                 = "code";
		ЭлементДереваАтрибутСтроки.Тип                 = "A";
		ЭлементДереваАтрибутСтроки.Обязательность      = "Н";
		ЭлементДереваАтрибутСтроки.Многострочность     = Многострочный;
		ЭлементДереваАтрибутСтроки.ЗначениеПоУмолчанию = Формат(Число("0" + ПараметрыСтроки["code"]), "ЧН=; ЧГ=");
		
	КонецЕсли;
	
	Для Инд = 0 По СписокПараметровКолонок.Количество() - 1 Цикл
		
		ПараметрыКолонки = СписокПараметровКолонок[Инд].Значение;
		
		ПараметрыЯчейки = РезультирующиеПараметрыЯчейки(ПараметрыКолонки, ПараметрыСтроки);
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 0 Тогда
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Боковик");
			ОбластьСтроки.Область(1, 2, 1, 2).Текст = СтрокаСНеразрывнымПробелом(ПараметрыСтроки["name"]);
			ЦелеваяЯчейка = ОбластьСтроки.Область(1, 2, 1, 2);
			Если Многострочный Тогда
				ОбластьСтроки.Область(2, 2, 2, 2).Текст = СтрокаСНеразрывнымПробелом(ПараметрыСтроки["name"]);
				ИмяЯчейки = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], ПараметрыКолонки["code"], Многострочный);
				ОбластьСтроки.Область(1, 1, 1, 1).Имя = "ОДС" + ИмяЯчейки + "_1";
				ОбластьСтроки.Область(2, 1, 2, 1).Имя = "ОУС" + ИмяЯчейки + "_1";
				ОбластьСтроки.Область(3, 1, 3, 1).Имя = "ОДЗ" + ИмяЯчейки;
				ОбластьСтроки.Область(3, 2, 3, 2).Имя = "ОДГ" + ИмяЯчейки;
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 2, 2, 2);
			КонецЕсли;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 1 Тогда
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Значение");
			Если Многострочный Тогда
				ОбластьСтроки.Область(2, 1, 2, 1).Текст = Формат(ПараметрыСтроки["code"], "ЧН=; ЧГ=");
				ОбластьСтроки.Область(2, 1, 2, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 1, 2, 1);
			Иначе
				ОбластьСтроки.Область(1, 1, 1, 1).Текст = Формат(ПараметрыСтроки["code"], "ЧН=; ЧГ=");
				ОбластьСтроки.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ЦелеваяЯчейка = ОбластьСтроки.Область(1, 1, 1, 1);
			КонецЕсли;
		Иначе
			ОбластьСтроки = МакетОбразцовОбластей.ПолучитьОбласть(ИмяГоризонтальнойСекции + "|Значение");
			ЦелеваяЯчейка = ОбластьСтроки.Область(1, 1, 1, 1);
			Если Многострочный Тогда
				ЦелеваяЯчейка = ОбластьСтроки.Область(2, 1, 2, 1);
			КонецЕсли;
		КонецЕсли;
		
		ПрименитьПараметрыЯчейки(ЭтотОбъект, ЦелеваяЯчейка, ПараметрыЯчейки, ПараметрыКолонки, ПараметрыСтроки, ЭлементДереваСтрокаРаздела);
		
		Если ЦелеваяЯчейка.Защита Тогда
			ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветБелый;
		Иначе
			ЦелеваяЯчейка.ЦветФона = СтруктураРеквизитовФормы.мЦветЖелтый;
		КонецЕсли;
		
		МакетРаздела.Присоединить(ОбластьСтроки);
		
	КонецЦикла;
	
	Если СписокПараметровКолонок.Количество() > 0 Тогда
		
		ПараметрыПервойКолонки = СписокПараметровКолонок[0].Значение;
		
		КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
		Если КлючевыеЯчейки <> Неопределено Тогда
			ИмяОпцийСтроки = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(ПараметрыПервойКолонки["codesection"], ПараметрыСтроки["code"], "", Многострочный);
			ЦелеваяОбласть = МакетРаздела.Область(МакетРаздела.ВысотаТаблицы, 3, МакетРаздела.ВысотаТаблицы, 3);
			ИмяЦелевойОбласти = ЦелеваяОбласть.Имя;
			Если Лев(ИмяЦелевойОбласти, 3) = "ОДГ" Тогда
				ЦелеваяОбласть = МакетРаздела.Область(МакетРаздела.ВысотаТаблицы - 1, 3, МакетРаздела.ВысотаТаблицы - 1, 3);
				ИмяЦелевойОбласти = ЦелеваяОбласть.Имя;
			КонецЕсли;
			Если Лев(ИмяЦелевойОбласти, 2) = "ПМ" И СтрНайти(ИмяЦелевойОбласти, "_") Тогда
				ИмяЦелевойОбласти = Лев(ИмяЦелевойОбласти, СтрНайти(ИмяЦелевойОбласти, "_") - 1);
			КонецЕсли;
			СтруктураОпцийСтроки = Новый Структура;
			СтруктураОпцийСтроки.Вставить("ВычисляемаяЯчейка",   ИмяЦелевойОбласти);
			СтруктураОпцийСтроки.Вставить("КлючевыеЯчейки",      КлючевыеЯчейки);
			СтруктураОпцийСтроки.Вставить("ЗначениеПоУмолчанию", СокрП(?(ЦелеваяОбласть.СодержитЗначение, ЦелеваяОбласть.Значение, ЦелеваяОбласть.Текст)));
			СтруктураОписанийЯчеек.Вставить(ИмяОпцийСтроки, СтруктураОпцийСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультирующиеПараметрыЯчейки(ПараметрыКолонки, ПараметрыСтроки)
	
	КодКолонки = ПараметрыКолонки["code"];
	
	ПараметрыЯчеекСтроки = ПараметрыСтроки["cell"];
	
	ПараметрыЯчейки = Новый Соответствие;
	
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("column");
	МассивИменПараметров.Добавить("format");
	МассивИменПараметров.Добавить("inputType");
	МассивИменПараметров.Добавить("dic");
	МассивИменПараметров.Добавить("vldType");
	МассивИменПараметров.Добавить("vld");
	МассивИменПараметров.Добавить("pr_inp");
	МассивИменПараметров.Добавить("default");
	МассивИменПараметров.Добавить("mask");
	
	Для каждого ИмяПараметра Из МассивИменПараметров Цикл
		
		Если ПараметрыЯчеекСтроки = Неопределено Тогда
			ЗначениеПараметра = ПараметрыКолонки[ИмяПараметра];
		Иначе
			ПараметрыЯчейкиСтроки = ПараметрыЯчеекСтроки[КодКолонки];
			Если ПараметрыЯчейкиСтроки = Неопределено Тогда
				ЗначениеПараметра = ПараметрыКолонки[ИмяПараметра]
			Иначе
				ЗначениеПараметра = ПараметрыЯчейкиСтроки[ИмяПараметра];
			КонецЕсли; 
		КонецЕсли;
		
		ПараметрыЯчейки.Вставить(ИмяПараметра, ?(ЗначениеПараметра = Неопределено, "", ЗначениеПараметра));
		
	КонецЦикла;
	
	ЗначениеПараметра = ?(ЗначениеЗаполнено(ПараметрыЯчейки["pr_inp"]), ПараметрыЯчейки["pr_inp"], ПараметрыСтроки["pr_inp"]);
	ПараметрыЯчейки.Вставить("pr_inp",  ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, "false"));
	ПараметрыЯчейки.Вставить("inputType", Число("0" + ПараметрыЯчейки["inputType"]));
	ПараметрыЯчейки.Вставить("vldType",   Число("0" + ПараметрыЯчейки["vldType"]));
	
	Возврат ПараметрыЯчейки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПрименитьПараметрыЯчейки(Форма, ЦелеваяЯчейка, ПараметрыЯчейки, ПараметрыКолонки, ПараметрыСтроки, ЭлементДереваСтрокаРаздела)
	
	Многострочный = Ложь;
	
	Если СтрНачинаетсяС(ПараметрыЯчейки["format"], "N(") И ЗначениеЗаполнено(ПараметрыЯчейки["default"]) Тогда 
		ПараметрыЯчейки["default"] = Форма.ОТЧ.ПривестиЗначение(ПараметрыЯчейки["default"]);
	КонецЕсли;
	
	Если СтрНайти(ВРег(ПараметрыСтроки["type"]), "C") > 0 Тогда
		Возврат;
	ИначеЕсли СтрНайти(ВРег(ПараметрыСтроки["type"]), "M") > 0 Тогда
		Многострочный = Истина;
	КонецЕсли;
	
	ТекстЯчейки = ЦелеваяЯчейка.Текст;
	
	ЦелеваяЯчейка.СодержитЗначение = Истина;
	
	ИмяЯчейки = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], ПараметрыКолонки["code"], Многострочный);
	
	Если Многострочный Тогда
		ЦелеваяЯчейка.Имя = ИмяЯчейки + "_1";
	Иначе
		ЦелеваяЯчейка.Имя = ИмяЯчейки;
	КонецЕсли;
	
	ЭтоКлючеваяЯчейка = Ложь;
	ЭтоСпецифика      = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыКолонки["fld"]) Тогда
		ЭтоСпецифика = Истина;
		МассивИменКолонок = СтрРазделить(ПараметрыСтроки["grv"], ",");
		ИндексЭлемента = МассивИменКолонок.Найти(ПараметрыКолонки["code"]);
		Если ИндексЭлемента <> Неопределено Тогда
			ЭтоКлючеваяЯчейка = Истина;
			КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
			Если КлючевыеЯчейки = Неопределено Тогда
				ПараметрыСтроки.Вставить("КлючевыеЯчейки", Новый Массив);
				КлючевыеЯчейки = ПараметрыСтроки["КлючевыеЯчейки"];
			КонецЕсли;
			КлючевыеЯчейки.Вставить(ИндексЭлемента, ИмяЯчейки);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 Тогда
		МинШиринаЯчейкиВСимволах = 0;
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата(ПараметрыЯчейки["format"], МинШиринаЯчейкиВСимволах, "Строка");
		ЦелеваяЯчейка.ШиринаКолонки = Макс(6, ?(МинШиринаЯчейкиВСимволах = 0, 60, Мин(60, МинШиринаЯчейкиВСимволах)));
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			ЦелеваяЯчейка.Значение = ПараметрыЯчейки["default"];
		Иначе
			ЦелеваяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатВычисленияУсловияДляЯчейки(Форма, ПараметрыЯчейки["pr_inp"]) Тогда // ячейка закрещена
		ЦелеваяЯчейка.ТипЗначения = ОписаниеТиповИзСтрокиФормата("С(1)");
		ЦелеваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ЦелеваяЯчейка.Значение = "Х";
		Возврат;
	КонецЕсли;
	
	МинШиринаЯчейкиВСимволах = 0;
	ТипЗначения = ОписаниеТиповИзСтрокиФормата(ПараметрыЯчейки["format"], МинШиринаЯчейкиВСимволах);
	МаксШиринаЯчейкиВСимволах = Макс(?(ПараметрыКолонки["ШиринаКолонки"] = Неопределено, 0, ПараметрыКолонки["ШиринаКолонки"]), МинШиринаЯчейкиВСимволах);
	ПараметрыКолонки.Вставить("ШиринаКолонки", МаксШиринаЯчейкиВСимволах);
	
	ЦелеваяЯчейка.ШиринаКолонки = Мин(20, Макс(6, МаксШиринаЯчейкиВСимволах));
	
	Если Тип(ТипЗначения) = Тип("Число") И ПараметрыЯчейки["dic"] <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ПараметрыЯчейки["dic"]) Тогда
			КЧ = ТипЗначения.КвалификаторыЧисла;
			КС = Новый КвалификаторыСтроки(1000);
			ТипЗначения = Новый ОписаниеТипов("Число,Строка", КЧ, КС);
		КонецЕсли;
	КонецЕсли;
	
	ЦелеваяЯчейка.ТипЗначения = ТипЗначения;
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0 И ПараметрыЯчейки["inputType"] = 0 Тогда
		Если ПараметрыЯчейки["default"] = "0" Тогда
			ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧГ=;ЧН=0", "");
		Иначе
			ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧГ=;ЧН=' '", "");
		КонецЕсли;
	Иначе
		ЦелеваяЯчейка.Формат = ?(ТипЗначения.СодержитТип(Тип("Число")), "ЧН=' '", "");
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Если (ТипЗначения.КвалификаторыЧисла.Разрядность = 4 И ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0) // для года формат без группировки
				ИЛИ (ПараметрыЯчейки["vldType"] = 1) ИЛИ (ПараметрыЯчейки["vldType"] = 4) ИЛИ (ПараметрыЯчейки["vldType"] = 5)    // выбор из справочника
				Тогда 
				ЦелеваяЯчейка.Формат = "ЧГ=;ЧН=' '";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЦелеваяЯчейка.ГоризонтальноеПоложение = ?(ТипЗначения.СодержитТип(Тип("Число")), ГоризонтальноеПоложение.Право, ГоризонтальноеПоложение.Авто);
	ЦелеваяЯчейка.Значение = ТипЗначения.ПривестиЗначение(ПараметрыЯчейки["default"]);
	Попытка
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеФормы"));
	Исключение
		ЦелеваяЯчейка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	КонецПопытки;
	
	Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0 ИЛИ СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") > 0 Тогда
		
		Если ЭтоСпецифика Тогда
			
			ЭлементДереваЯчейка = ЭлементДереваСтрокаРаздела.ПолучитьЭлементы().Добавить();
			ЭлементДереваЯчейка.Код = ПараметрыКолонки["fld"];
			ЭлементДереваЯчейка.Тип = "A";
			ЭлементДереваЯчейка.Обязательность = "Н";
			
		Иначе
			
			ЭлементДереваЯчейка = ЭлементДереваСтрокаРаздела.ПолучитьЭлементы().Добавить();
			ЭлементДереваЯчейка.Код = "col";
			ЭлементДереваЯчейка.Тип = "C";
			ЭлементДереваЯчейка.Обязательность = "Н";
			
			ЭлементДереваАтрибутЯчейка = ЭлементДереваЯчейка.ПолучитьЭлементы().Добавить();
			ЭлементДереваАтрибутЯчейка.Код = "code";
			ЭлементДереваАтрибутЯчейка.Тип = "A";
			ЭлементДереваАтрибутЯчейка.Обязательность = "Н";
			ЭлементДереваАтрибутЯчейка.Многострочность     = Многострочный;
			ЭлементДереваАтрибутЯчейка.ЗначениеПоУмолчанию = ПараметрыКолонки["code"];
			
		КонецЕсли;
		
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ЭлементДереваЯчейка.Формат = "N";
			ЭлементДереваЯчейка.МаксРазмерность = ?(ТипЗначения.КвалификаторыЧисла.Разрядность = 0, 99999, ТипЗначения.КвалификаторыЧисла.Разрядность);
			ЭлементДереваЯчейка.МинРазмерность  = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		Иначе
			ЭлементДереваЯчейка.Формат = "T";
			ЭлементДереваЯчейка.МаксРазмерность = ?(ТипЗначения.КвалификаторыСтроки.Длина = 0, 99999, ТипЗначения.КвалификаторыСтроки.Длина);
			ЭлементДереваЯчейка.МинРазмерность  = 0;
		КонецЕсли;
		
		ЭлементДереваЯчейка.Многострочность = Многострочный;
		ЭлементДереваЯчейка.Представление   = ПараметрыКолонки["name"];
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") = 0 ИЛИ ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ЭлементДереваЯчейка.ЗначениеПоУмолчанию = ПараметрыЯчейки["default"];
		КонецЕсли;
		
		Если ПараметрыЯчейки["inputType"] <> 0 Тогда
			ЭлементДереваЯчейка.Раздел = "ПолеТабличногоДокумента";
			ЭлементДереваЯчейка.Ключ   = ИмяЯчейки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЯчейки["inputType"] = 0 Тогда // недоступна для редактирования
		Возврат;
	ИначеЕсли ПараметрыЯчейки["inputType"] = 1 Тогда // обязательное заполнение
		ЦелеваяЯчейка.АвтоОтметкаНезаполненного = Истина;
		
		Если ЦелеваяЯчейка.ТипЗначения.СодержитТип(Тип("Число"))
			И Не ЗначениеЗаполнено(ЦелеваяЯчейка.Значение)
			И (Форма.РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("ЗависимоеЗначение", ЦелеваяЯчейка.Имя)).Количество() = 1
				Или Форма.ИтогиПоМножественнымСтрокам.НайтиСтроки(Новый Структура("ЗависимоеЗначение", ЦелеваяЯчейка.Имя)).Количество() = 1) Тогда 
			
			Если ПараметрыЯчейки["vldType"] = 2 Тогда 
				Диапазон = СтрРазделить(ПараметрыЯчейки["vld"], "-");
				Низ = Форма.ОТЧ.ПривестиЗначение(Диапазон[0]);
				Верх = Форма.ОТЧ.ПривестиЗначение(Диапазон[1]);
				Если Низ <= 0 И Верх >= 0 Тогда 
					ЦелеваяЯчейка.Формат = "ЧН=0";
				КонецЕсли;
			ИначеЕсли ПараметрыЯчейки["vldType"] = 3 Тогда 
				Если СтрРазделить(ПараметрыЯчейки["vld"], ",").Найти("0") <> Неопределено Тогда 
					ЦелеваяЯчейка.Формат = "ЧН=0";
				КонецЕсли;
			Иначе 
				ЦелеваяЯчейка.Формат = "ЧН=0";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЦелеваяЯчейка.Защита = Ложь;
	
	Форма.СтруктураДанныхОтчета.Вставить(ЦелеваяЯчейка.Имя, ЦелеваяЯчейка.Значение);
	
	Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
		ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ЦелеваяЯчейка.Формат);
		Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
			Форма.СтруктураДанныхОтчета.Вставить("ЧН" + ЦелеваяЯчейка.Имя, ФорматПредставленияНуля);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЦелевойЯчейки = Новый Структура("inputType, vldType, vld, dic, default");
	Для каждого ПараметрЦелевойЯчейки Из ПараметрыЦелевойЯчейки Цикл
		ПараметрыЦелевойЯчейки[ПараметрЦелевойЯчейки.Ключ] = ПараметрыЯчейки[ПараметрЦелевойЯчейки.Ключ];
	КонецЦикла;
	Если ЭтоКлючеваяЯчейка Тогда
		ИмяОпцийСтроки = УниверсальныйОтчетСтатистики.ИмяПоказателяЯчейки(ПараметрыКолонки["codesection"], ПараметрыСтроки["code"], "", Многострочный);
		ПараметрыЦелевойЯчейки.Вставить("grv", ИмяОпцийСтроки);
	КонецЕсли;
	Если ЭтоСпецифика Тогда
		ПараметрыЦелевойЯчейки.Вставить("fld", ПараметрыКолонки["fld"]);
		Если ПустаяСтрока(ПараметрыСтроки["grv"]) Тогда
			ЦелеваяЯчейка.Защита = Истина;
			ЦелеваяЯчейка.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЦелеваяЯчейка.Маска = ПараметрыЯчейки["mask"];
	Форма.СтруктураОписанийЯчеек.Вставить(ИмяЯчейки, ПараметрыЦелевойЯчейки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьШиринуКолонокМакетаРаздела(МакетРаздела, СписокПараметровКолонок);
	
	МаксШиринаМакета   = 149;
	
	МаксШиринаСтолбцаZ = 20;
	МинШиринаСтолбцаZ  = 6;
	
	МаксШиринаСтолбцаS = 20;
	МинШиринаСтолбцаS  = 6;
	
	МинШиринаСтолбцаB1 = 30;
	
	ОписаниеТиповСтрока1  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1));
	ОписаниеТиповЧисло4   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло52  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	ТаблицаПараметровКолонок = Новый ТаблицаЗначений;
	ТаблицаПараметровКолонок.Колонки.Добавить("НомКолонки",        ОписаниеТиповЧисло4);
	ТаблицаПараметровКолонок.Колонки.Добавить("ТипКолонки",        ОписаниеТиповСтрока1);
	ТаблицаПараметровКолонок.Колонки.Добавить("ШиринаФикс",        ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("ШиринаПерем",       ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("МинШиринаСтолбца",  ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("МаксШиринаСтолбца", ОписаниеТиповЧисло52);
	ТаблицаПараметровКолонок.Колонки.Добавить("ИзменятьШирину",    ОписаниеТиповБулево);
	
	Для Инд = 0 По СписокПараметровКолонок.Количество() - 1 Цикл
		
		ПараметрыКолонки = СписокПараметровКолонок[Инд].Значение;
		
		НомКолонки = Инд + 3;
		ШиринаКолонки = МакетРаздела.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
		
		НовСтрокаТаблицы = ТаблицаПараметровКолонок.Добавить();
		НовСтрокаТаблицы.НомКолонки = НомКолонки;
		
		Если СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 0 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца = МинШиринаСтолбцаB1;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 И Инд = 1 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "B") > 0 Тогда
			НовСтрокаТаблицы.ТипКолонки = "B";
			НовСтрокаТаблицы.ШиринаФикс = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "S") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "S";
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаS;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаS;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "V") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "V";
			НовСтрокаТаблицы.ШиринаФикс  = ШиринаКолонки;
			НовСтрокаТаблицы.ИзменятьШирину   = Ложь;
		ИначеЕсли СтрНайти(ВРег(ПараметрыКолонки["type"]), "Z") > 0  Тогда
			НовСтрокаТаблицы.ТипКолонки  = "Z";
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаZ;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаZ;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		Иначе
			НовСтрокаТаблицы.ТипКолонки  = СокрЛП(ВРег(ПараметрыКолонки["type"]));
			НовСтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
			НовСтрокаТаблицы.МинШиринаСтолбца  = МинШиринаСтолбцаZ;
			НовСтрокаТаблицы.МаксШиринаСтолбца = МаксШиринаСтолбцаZ;
			НовСтрокаТаблицы.ИзменятьШирину    = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ШиринаФиксЧасти  = ТаблицаПараметровКолонок.Итог("ШиринаФикс");
	ШиринаПеремЧасти = ТаблицаПараметровКолонок.Итог("ШиринаПерем");
	
	Для каждого СтрокаТаблицы Из ТаблицаПараметровКолонок Цикл
		
		Если НЕ СтрокаТаблицы.ИзменятьШирину Тогда
			Продолжить;
		КонецЕсли;
		
		КоэфПроп = ?(ШиринаПеремЧасти = 0, 1, Макс(0, МаксШиринаМакета - ШиринаФиксЧасти - 2) / ШиринаПеремЧасти);
		ОгрМинШиринаСтролбца = Макс(СтрокаТаблицы.МинШиринаСтолбца, СтрокаТаблицы.ШиринаПерем * КоэфПроп);
		ШиринаКолонки = ?(СтрокаТаблицы.МаксШиринаСтолбца = 0, ОгрМинШиринаСтролбца, Мин(СтрокаТаблицы.МаксШиринаСтолбца, ОгрМинШиринаСтролбца));
		ШиринаКолонки = Окр(ШиринаКолонки / 0.25) * 0.25;
		
		СтрокаТаблицы.ШиринаПерем = ШиринаКолонки;
		
		МакетРаздела.Область( , СтрокаТаблицы.НомКолонки, , СтрокаТаблицы.НомКолонки).ШиринаКолонки = ШиринаКолонки;
		
	КонецЦикла;
	
	НовШиринаПеремЧасти = ТаблицаПараметровКолонок.Итог("ШиринаПерем");
	ШиринаСлужебнойКолонки = МакетРаздела.Область( , 2, , 2).ШиринаКолонки;
	
	Разница = МаксШиринаМакета - ШиринаФиксЧасти - НовШиринаПеремЧасти - ШиринаСлужебнойКолонки - 2;
	
	ШиринаБоковойКолонки = Макс(МинШиринаСтолбцаB1, ТаблицаПараметровКолонок[0].ШиринаФикс + Разница); // корректируем шириной боковой колонки
	МакетРаздела.Область( , ТаблицаПараметровКолонок[0].НомКолонки, , ТаблицаПараметровКолонок[0].НомКолонки).ШиринаКолонки = ШиринаБоковойКолонки; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеТиповИзСтрокиФормата(СтрокаФорматаЯчейки, МинШиринаЯчейкиВСимв = 0, ТипСтрокойУмолч = "Число")
	
	ОписаниеТиповСтрокаУмолч  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	ОписаниеТиповЧислоУмолч   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	Если НЕ ЗначениеЗаполнено(СтрокаФорматаЯчейки) Тогда
		Если ТипСтрокойУмолч = "Число" Тогда
			Возврат ОписаниеТиповЧислоУмолч;
		Иначе
			Возврат ОписаниеТиповСтрокаУмолч;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФормата = СтрЗаменить(СтрокаФорматаЯчейки, " ", "");
	
	ПозОткрСкобки = СтрНайти(СтрокаФормата, "(");
	ПозЗакрСкобки = СтрНайти(СтрокаФормата, ")");
	ДанныеВСкобках = Сред(СтрокаФормата, ПозОткрСкобки + 1, Макс(0, ПозЗакрСкобки - ПозОткрСкобки - 1));
	
	Инд = 0;
	МассивСтрок = Новый Массив(2);
	МассивСтрок[0] = "0"; МассивСтрок[1] = "0";
	Для Поз = 1 По СтрДлина(ДанныеВСкобках) Цикл
		Сим = Сред(ДанныеВСкобках, Поз, 1);
		Если СтрНайти("0123456789", Сим) > 0 Тогда
			МассивСтрок[Инд] = МассивСтрок[Инд] + Сим;
		Иначе
			Инд = 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтрНайти(ВРег(СтрокаФормата), "N") > 0 Тогда
		РазрядностьЦелойЧасти   = Число(МассивСтрок[0]);
		РазрядностьДробнойЧасти = Число(МассивСтрок[1]);
		Если РазрядностьЦелойЧасти = 0 Тогда
			РазрядностьЦелойЧасти   = 15;
			РазрядностьДробнойЧасти = 2;
		ИначеЕсли РазрядностьДробнойЧасти > 10 Тогда
			РазрядностьДробнойЧасти = 6;
		КонецЕсли;
		Разрядность = РазрядностьЦелойЧасти + РазрядностьДробнойЧасти;
		ТипФорматаСтрокой = "Число";
		ОписаниеТиповФормата   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));
		МинШиринаЯчейкиВСимв = Разрядность + ?(РазрядностьДробнойЧасти = 0, 1, 2);
	Иначе
		ДлинаСтроки = Число(МассивСтрок[0]);
		ТипФорматаСтрокой = "Строка";
		ОписаниеТиповФормата  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
		МинШиринаЯчейкиВСимв = ДлинаСтроки + 1;
	КонецЕсли;
	
	Возврат ОписаниеТиповФормата;
	
КонецФункции

&НаСервереБезКонтекста
Функция РезультатВычисленияУсловияДляЯчейки(Форма, Выражение)
	
	Форма.КвоОшибокКС = 0;
	
	Возврат (ЗначениеЗаполнено(Выражение) И УниверсальныйОтчетСтатистики.РезультатВычисленияВыраженияИзСтроки(Форма, Выражение));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСНеразрывнымПробелом(ИсхСтрока)
	
	ОбрСтрока = "";
	
	Для НомСимв = 1 По СтрДлина(ИсхСтрока) Цикл
		Если ПустаяСтрока(Сред(ИсхСтрока, НомСимв, 1)) Тогда
			ОбрСтрока = ОбрСтрока + Символы.НПП;
		Иначе
			ОбрСтрока = ОбрСтрока + Сред(ИсхСтрока, НомСимв);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ОбрСтрока;
	
КонецФункции 

&НаСервере
Процедура ДобавитьВРеквизитСписокПараметровКолонок(КодСекции, СписокПараметровКолонок)
	
	СтрКодСекции = Формат(КодСекции, "ЧГ=");
	
	ВремСписокПараметровКолонок = Новый СписокЗначений;
	Для каждого ЭлементСпискаПараметровКолонок Из СписокПараметровКолонок Цикл
		СтруктураПараметровКолонок = Новый Структура("code, type, fld");
		НаборПараметров = ЭлементСпискаПараметровКолонок.Значение;
		Для каждого ЭлементСтруктуры Из СтруктураПараметровКолонок Цикл
			СтруктураПараметровКолонок[ЭлементСтруктуры.Ключ] = НаборПараметров[ЭлементСтруктуры.Ключ];
		КонецЦикла;
		ВремСписокПараметровКолонок.Добавить(СтруктураПараметровКолонок, НаборПараметров["code"]);
	КонецЦикла;
	
	ПараметрыГрафРазделов.Вставить("Раздел" + СтрКодСекции, ВремСписокПараметровКолонок);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКОписаниюЯчеекСсылкиНаЗависимыеЯчейки()
	
	Для каждого ОписаниеЯчейки Из СтруктураОписанийЯчеек Цикл
		
		ИмяЯчейки = ОписаниеЯчейки.Ключ;
		ПараметрыЯчейки = ОписаниеЯчейки.Значение;
		ИмяЯчейкиФильтра = "";
		
		ТипВвода = Неопределено;
		Если (ПараметрыЯчейки.Свойство("inputType", ТипВвода) И ТипВвода <> 0) И ПараметрыЯчейки["vldType"] = 5 Тогда
			ФильтрДляСправочника = ПараметрыЯчейки["vld"];
			ПозАдреса = СтрНайти(ФильтрДляСправочника, "#");
			Если ПозАдреса > 0 Тогда
				АдресИзСсылки   = Сред(ФильтрДляСправочника, ПозАдреса + 1);
				ЗначениеОбласти = ЗначениеОбластиПоАдресуИзСсылки(ЭтотОбъект, АдресИзСсылки, 1, ИмяЯчейкиФильтра);
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Добавляем в описание ячейки фильтра ссылки на показатели, использующие этот фильтр (для очистки зависимых ячеек)
		ПараметрыЯчейки = Неопределено;
		Если СтруктураОписанийЯчеек.Свойство(ИмяЯчейкиФильтра, ПараметрыЯчейки) И ТипЗнч(ПараметрыЯчейки) = Тип("Структура") Тогда
			ЗависимыеЯчейки = Неопределено;
			Если НЕ (ПараметрыЯчейки.Свойство("refs", ЗависимыеЯчейки) И ТипЗнч(ЗависимыеЯчейки) = Тип("Массив")) Тогда
				ЗависимыеЯчейки = Новый Массив;
				ПараметрыЯчейки.Вставить("refs", ЗависимыеЯчейки);
			КонецЕсли;
			ЗависимыеЯчейки.Добавить(ИмяЯчейки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьАтрибутыКорневогоЭлементаСхемыВыгрузки(ЭлементДереваОтчет)
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "code";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = СтруктураАтрибутовОтчета["code"];
	ЭлементДереваАтрибут.Представление = "Код формы для идентификации в программе ""Заполнение форм статистической отчетности""";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "form";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = Формат(СтруктураАтрибутовОтчета["idf"], "ЧГ=");
	ЭлементДереваАтрибут.Представление = "Внутренний номер формы в пределах кода ОКУД";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "shifr";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = СтруктураАтрибутовОтчета["shifr"];
	ЭлементДереваАтрибут.Представление = "Шифр формы для программы ""Заполнение форм статистической отчетности""";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "year";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ=");
	ЭлементДереваАтрибут.Представление = "Отчетный год";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "period";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = "&ОтчПериод";
	ЭлементДереваАтрибут.Представление = "Код отчетного периода";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "version";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = СтруктураАтрибутовОтчета["version"];
	ЭлементДереваАтрибут.Представление = "Версия XML-шаблона (дата выпуска в формате: 29-02-2013)";
	
	ЭлементДереваАтрибут = ЭлементДереваОтчет.ПолучитьЭлементы().Добавить();
	ЭлементДереваАтрибут.Код = "format-version";
	ЭлементДереваАтрибут.Тип = "A";
	ЭлементДереваАтрибут.Формат = "T";
	ЭлементДереваАтрибут.МаксРазмерность = 99999;
	ЭлементДереваАтрибут.МинРазмерность  = 0;
	ЭлементДереваАтрибут.Обязательность = "О";
	ЭлементДереваАтрибут.ЗначениеПоУмолчанию = СтруктураАтрибутовОтчета["format_version"];
	ЭлементДереваАтрибут.Представление = "Версия формата XML-отчета";
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыРазделаОбщаяИнформацияСхемыВыгрузки(ЭлементДереваОбщаяИнформация)
	
	СписокРеквизитов = СтруктураАтрибутовОтчета["title"];
	
	Для каждого ЭлементРеквизит Из СписокРеквизитов Цикл
		
		ИмяПоля = ЭлементРеквизит.Значение;
		ОписаниеПоля = СокрЛП(ЭлементРеквизит.Представление);
		
		ЭлементДереваПоле = ЭлементДереваОбщаяИнформация.ПолучитьЭлементы().Добавить();
		ЭлементДереваПоле.Код = "item";
		ЭлементДереваПоле.Тип = "C";
		ЭлементДереваПоле.Обязательность = "О";
		
		ЗамененноеИмяПоля = ИмяПоля;
		Если СтруктураЗамененныхАтрибутовОтчета.Свойство(ИмяПоля) Тогда 
			ЗамененноеИмяПоля = СтруктураЗамененныхАтрибутовОтчета[ИмяПоля];
		КонецЕсли;
		
		ЭлементДереваАтрибутИмяПоля = ЭлементДереваПоле.ПолучитьЭлементы().Добавить();
		ЭлементДереваАтрибутИмяПоля.Код = "name";
		ЭлементДереваАтрибутИмяПоля.Тип = "A";
		ЭлементДереваАтрибутИмяПоля.Обязательность = "О";
		ЭлементДереваАтрибутИмяПоля.ЗначениеПоУмолчанию = ЗамененноеИмяПоля;
		
		ЭлементДереваАтрибутЗначениеПоля = ЭлементДереваПоле.ПолучитьЭлементы().Добавить();
		ЭлементДереваАтрибутЗначениеПоля.Код = "value";
		ЭлементДереваАтрибутЗначениеПоля.Тип = "A";
		ЭлементДереваАтрибутЗначениеПоля.Формат = "T";
		ЭлементДереваАтрибутЗначениеПоля.МаксРазмерность = 99999;
		ЭлементДереваАтрибутЗначениеПоля.МинРазмерность  = 0;
		ЭлементДереваАтрибутЗначениеПоля.Обязательность = "О";
		ЭлементДереваАтрибутЗначениеПоля.ЗначениеПоУмолчанию = "&" + ИмяПоля;
		ЭлементДереваАтрибутЗначениеПоля.Представление = ОписаниеПоля;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСправочникВТаблицу(УзелСправочник)
	
	НовыйСправочник = ТаблицаСправочников.Добавить();
	
	ИдентификаторСпр = УзелСправочник.ПолучитьАтрибут("id");
	НаименованиеСпр  = УзелСправочник.ПолучитьАтрибут("name");
	НаименованиеСпр  = СокрЛП(СтрЗаменить(СтрЗаменить(НаименованиеСпр, НРег(ИдентификаторСпр), ""), ВРег(ИдентификаторСпр), ""));
	
	НовыйСправочник.Наименование  = НаименованиеСпр;
	НовыйСправочник.Идентификатор = ИдентификаторСпр;
	
	ИдентификаторРодителя         = УзелСправочник.ПолучитьАтрибут("parent");
	НовыйСправочник.ИдентификаторРодителя = ?(ЗначениеЗаполнено(ИдентификаторРодителя), ИдентификаторРодителя, "");
	
	ТаблицаЭлементовСправочника = НовыйСправочник.ТаблицаЭлементовСправочника;
	
	ЭтоПриложение = Истина;
	УзлыЭлементыСправочника = УзелСправочник.ПолучитьЭлементыПоИмени("term");
	Для каждого УзелЭлементСправочника Из УзлыЭлементыСправочника Цикл
		НовыйЭлементСправочника = ТаблицаЭлементовСправочника.Добавить();
		НовыйЭлементСправочника.Код   = УзелЭлементСправочника.ПолучитьАтрибут("id");
		ТекстЭлемента = СокрЛП(УзелЭлементСправочника.ТекстовоеСодержимое);
		Если НЕ ПустаяСтрока(ТекстЭлемента) Тогда
			ЭтоПриложение = Ложь;
			НовыйЭлементСправочника.Название = ТекстЭлемента;
		КонецЕсли;
		СоставнойКлюч = "";
		Для ИндексАтрибута = 0 По УзелЭлементСправочника.Атрибуты.Количество() - 1 Цикл
			УзелАтрибута = УзелЭлементСправочника.Атрибуты[ИндексАтрибута];
			ИмяАтрибута = НРег(УзелАтрибута.Имя);
			Если ИмяАтрибута = "id" Тогда
				Продолжить;
			КонецЕсли;
			СоставнойКлюч = СоставнойКлюч + ?(ПустаяСтрока(СоставнойКлюч), "", "|") + ИмяАтрибута + "=" + СокрЛП(УзелАтрибута.ТекстовоеСодержимое);
		КонецЦикла;
		НовыйЭлементСправочника.СоставнойКлюч = СоставнойКлюч;
	КонецЦикла;
	Если ТаблицаЭлементовСправочника.Количество() = 0 Тогда
		ЭтоПриложение = Ложь;
		НовыйСправочник.Пустой = Истина;
	Иначе
		НовыйСправочник.Пустой = Ложь;
	КонецЕсли;
	
	Если НРег(НовыйСправочник.Идентификатор) = "s_time"
		Или НРег(НовыйСправочник.Идентификатор) = "s_mes" Тогда 
		
		СортироватьПериоды(НовыйСправочник.ТаблицаЭлементовСправочника);
	КонецЕсли;
	
	НовыйСправочник.ЭтоПриложение = ?(ПустаяСтрока(НовыйСправочник.ИдентификаторРодителя), ЭтоПриложение, Истина);
КонецПроцедуры

&НаСервере
Процедура СортироватьПериоды(ТаблицаЭлементовСправочника)
	ТаблицаСправочника = ДанныеФормыВЗначение(ТаблицаЭлементовСправочника, Тип("ТаблицаЗначений"));
	
	ТаблицаСправочника.Колонки.Добавить("Сортировка", Новый ОписаниеТипов("Число"));
	НеобходимаСортировка = Истина;
	Для Каждого Стр Из ТаблицаСправочника Цикл
		Стр.Сортировка = ОТЧ.ПривестиЗначение(Стр.Код);
		Если Стр.Сортировка = 0 Тогда 
			НеобходимаСортировка = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НеобходимаСортировка Тогда 
		ТаблицаСправочника.Сортировать("Сортировка");
		ТаблицаЭлементовСправочника.Очистить();
		Для Каждого Стр Из ТаблицаСправочника Цикл 
			ЗаполнитьЗначенияСвойств(ТаблицаЭлементовСправочника.Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИндексироватьПриложенияТаблицыСправочников()
	
	СтрокиПриложений = ТаблицаСправочников.НайтиСтроки(Новый Структура("ЭтоПриложение, Пустой", Истина, Ложь));
	
	Для каждого ЭлементПриложение Из СтрокиПриложений Цикл
		
		ЭлементыСправочники = ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор, Пустой", ЭлементПриложение.ИдентификаторРодителя, Ложь));
		
		Если ЭлементыСправочники.Количество() > 0 Тогда
			
			ТаблицаЭлементовСправочника = ЭлементыСправочники[0].ТаблицаЭлементовСправочника;
			
			Для каждого ЭлементТаблицыПриложения Из ЭлементПриложение.ТаблицаЭлементовСправочника Цикл
				
				ЭлементыТаблицыСправочников = ТаблицаЭлементовСправочника.НайтиСтроки(Новый Структура("Код", ЭлементТаблицыПриложения.Код));
				
				Если ЭлементыТаблицыСправочников.Количество() > 0 Тогда
					
					ЭлементТаблицыПриложения.ИдСтрокиРодителя = ЭлементыТаблицыСправочников[0].ПолучитьИдентификатор();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(Форма, ЭлементДереваСтраницОтчета.ИмяСтраницы);
			ЭлементФормыРаздела = Форма.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = ?(ЭлементФормыРаздела = Неопределено, Ложь, ЭлементФормыРаздела.Пометка);
			ЭлементРазделовОтчета.ИдЭлементаФормыРаздела       = ИдЭлементаФормыРаздела;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторЭлементаСпискаФормПоПредставлению(Форма, ПредставлениеЭлемента);
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для каждого ЭлементФормаРаздела Из Форма.СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		
		Если СокрЛП(ЭлементФормаРаздела.Представление) = СокрЛП(ПредставлениеЭлемента) Тогда
			
			Возврат ЭлементФормаРаздела.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	Для каждого ЭлементФормаРаздела Из СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		
		СтрокаУровня1 =  мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
		
		СтрокаУровня1.ИмяСтраницы                          = ЭлементФормаРаздела.Представление;
		СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
		СтрокаУровня1.МногостраничностьВРазделе            = ЭлементФормаРаздела.Пометка;
		СтрокаУровня1.ОчищатьРаздел                        = Истина;
		СтрокаУровня1.ИмяПредставления                     = "";
		СтрокаУровня1.ПредставлениеДанных                  = Ложь;
		СтрокаУровня1.РазделОбязателенДляВыгрузки          = Истина;
		СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
		СтрокаУровня1.ИдЭлементаФормыРаздела               = ЭлементФормаРаздела.ПолучитьИдентификатор();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	Для каждого ЭлементФормаРаздела Из СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		
		ПредставлениеРаздела = СокрЛП(ЭлементФормаРаздела.Значение.Область(2, 2).Текст);
		Если СокрЛП(ПредставлениеРаздела) = "Номер корректировки" Тогда
			ПредставлениеРаздела = СокрЛП(ЭлементФормаРаздела.Значение.Область(4, 2).Текст);
		КонецЕсли;
		
		СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
		СтрокаУровня1.ИмяСтраницы              = ЭлементФормаРаздела.Представление;
		СтрокаУровня1.Представление            = ВРег(Лев(ПредставлениеРаздела, 1)) + Сред(ПредставлениеРаздела, 2);
		СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
		СтрокаУровня1.ВыводНаПечать            = 1;
		СтрокаУровня1.ПоказатьСтраницу         = 1;
		СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	Перем НарастающимИтогом;
	Перем ИндексФормыОтчета;
	Перем НаименованиеОтчета;
	Перем ОбособПодразделение;
	Перем ОбрезатьПустыеСимволыЛок;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЗаголовокОтчета          = СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи 									  = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий										  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СписокСохранения.Свойство("ОбрезатьПустыеСимволы", ОбрезатьПустыеСимволыЛок);
	ОбрезатьПустыеСимволы = ?(ОбрезатьПустыеСимволыЛок = Неопределено, Истина, ОбрезатьПустыеСимволыЛок);
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем признак "нарастающим итогом"
	СписокСохранения.Свойство("НарастающимИтогом", НарастающимИтогом);
	СтруктураРеквизитовФормы.мНарастающимИтогом = ?(НарастающимИтогом = Неопределено, Ложь, НарастающимИтогом);
	
	// восстанавливаем индекс формы (краткое наименование)
	СписокСохранения.Свойство("ИндексФормыОтчета", ИндексФормыОтчета);
	СтруктураРеквизитовФормы.мИндексФормыОтчета = ?(ИндексФормыОтчета = Неопределено, "", ИндексФормыОтчета);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ОбособленноеПодразделение", ОбособПодразделение) Тогда
		ОбособленноеПодразделение = ОбособПодразделение;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("РасчитываемыеЯчейки", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "РасчитываемыеЯчейки");
	КонецЕсли;
	Если СписокСохранения.Свойство("Зависимости", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "Зависимости");
	КонецЕсли;
	Если СписокСохранения.Свойство("РасчитываемыеЯчейкиМножественныхСтрок", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "РасчитываемыеЯчейкиМножественныхСтрок");
	КонецЕсли;
	Если СписокСохранения.Свойство("ЗависимостиМножественныхСтрок", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "ЗависимостиМножественныхСтрок");
	КонецЕсли;
	Если СписокСохранения.Свойство("ПодсказкиДляЯчеекСРасчетом", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "ПодсказкиДляЯчеекСРасчетом");
	КонецЕсли;
	Если СписокСохранения.Свойство("ИтогиПоМножественнымСтрокам", ОбособПодразделение) Тогда
		ЗначениеВРеквизитФормы(ОбособПодразделение, "ИтогиПоМножественнымСтрокам");
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ФлажокОтклАвтоРасчет", ОбособПодразделение) Тогда 
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = ОбособПодразделение;
	Иначе
		СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Истина);
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	Префикс = "ПолеТабличногоДокумента";
	
	Для каждого ПоказательОтчета Из ПоказателиОтчета[Префикс] Цикл 
		СтруктураДанныхОтчета.Вставить(ПоказательОтчета.Ключ, ПоказательОтчета.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементРаздела Из СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		ТабДокумент = ЭлементРаздела.Значение;
		РазделМногострочный = ЭлементРаздела.Пометка;
		ВосстановитьДанныеРаздела(ТабДокумент, РазделМногострочный);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРаздела(ТабДокумент, РазделМногострочный)
	
	ПозицияПервогоМнПоказателяВСтроке = Новый Соответствие;
	МаксИндексыМнПоказателейВГруппе   = Новый Соответствие;
	
	Для каждого ТекущаяОбласть Из ТабДокумент.Области Цикл
		Если ТипЗнч(ТекущаяОбласть) <> Тип("РисунокТабличногоДокумента") Тогда
			Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
				Если РазделМногострочный Тогда
					Если СтрНайти(ТекущаяОбласть.Имя, "_") > 0 Тогда
						НомерКолонкиПоказателя = ПозицияПервогоМнПоказателяВСтроке[ТекущаяОбласть.Верх];
						Если НомерКолонкиПоказателя = Неопределено Тогда
							ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, ТекущаяОбласть.Лево);
						Иначе
							ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, Мин(ТекущаяОбласть.Лево, НомерКолонкиПоказателя));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеОбласти = Неопределено;
				Если СтруктураДанныхОтчета.Свойство(ТекущаяОбласть.Имя, ЗначениеОбласти) Тогда
					ТекущаяОбласть.Значение = ЗначениеОбласти;
					Если ТипЗнч(ЗначениеОбласти) = Тип("Число") Тогда
						ЗначениеФорматаНуля = Неопределено;
						Если СтруктураДанныхОтчета.Свойство("ЧН" + ТекущаяОбласть.Имя, ЗначениеФорматаНуля) Тогда
							ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, ЗначениеФорматаНуля);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделМногострочный Тогда
		
		Для каждого ЭлементПозицииПоказателя Из ПозицияПервогоМнПоказателяВСтроке Цикл
			
			ИндексПоказателя = 0;
			ИмяПоказателя = ТабДокумент.Область(ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение, ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение).Имя;
			ИмяПоказателяБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПоказателя, ИндексПоказателя);
			
			ИндексПредыдущегоПоказателя = МаксИндексыМнПоказателейВГруппе[ИмяПоказателяБезИндекса];
			Если ИндексПредыдущегоПоказателя = Неопределено Тогда
				МаксИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, ИндексПоказателя);
			Иначе
				МаксИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, Макс(ИндексПоказателя, ИндексПредыдущегоПоказателя));
			КонецЕсли;
		КонецЦикла; 
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		НужноОбновитьТаблДок = Ложь;
		
		Для каждого ЭлементПоказателяВГруппе Из МаксИндексыМнПоказателейВГруппе Цикл
			ИндексПоказателя = ЭлементПоказателяВГруппе.Значение;
			
			// Восстановим представление ключевых ячеек для первой строки многострочной группы
			ИмяОпцийСтроки = Лев(ЭлементПоказателяВГруппе.Ключ, СтрНайти(ЭлементПоказателяВГруппе.Ключ, "c"));
			СтруктураОпцийСтроки = Неопределено;
			Если СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
				УстановитьПредставлениеКлючевыхЯчеек(ЭтотОбъект, СтруктураОпцийСтроки, ИндексПоказателя);
				НужноОбновитьТаблДок = Истина;
			КонецЕсли;
			
			// Добавим недостающее количество строк в многострочную группу
			ИмяПоказателяТекСтроки  = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя, "ЧГ=");
			ИмяПоказателяСледСтроки = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя + 1, "ЧГ=");
			Пока СтруктураДанныхОтчета.Свойство(ИмяПоказателяСледСтроки) Цикл
				
				ДобавитьДополнительнуюСтроку(ЭтотОбъект, ИмяПервойЯчейкиОбласти(ЭтотОбъект, ТабличныйДокумент.Области[ИмяПоказателяТекСтроки]));
				
				НужноОбновитьТаблДок = Истина;
				
				ИмяПоказателяТекСтроки = ИмяПоказателяСледСтроки;
				ИндексПоказателя = ИндексПоказателя + 1;
				ИмяПоказателяСледСтроки = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя + 1, "ЧГ=");
			КонецЦикла;
		КонецЦикла;
		
		Если НужноОбновитьТаблДок Тогда
			ТабДокумент.Очистить();
			ТабДокумент.Вывести(ТабличныйДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	// Функция "заглушка" для универсальности. Не удалять.
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура СформироватьСтрПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	ОтключитьОбработчикОжидания("ПолныйПересчетКСНаСтранице");
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя) Экспорт
	
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(Форма.СтруктураАтрибутовОтчета["obj"]);
	СписокПоказателейНеПодлежащихОчистке.Добавить("name");
	СписокПоказателейНеПодлежащихОчистке.Добавить("leader_fio");
	СписокПоказателейНеПодлежащихОчистке.Добавить("responsible_post");
	СписокПоказателейНеПодлежащихОчистке.Добавить("responsible_fio");
	СписокПоказателейНеПодлежащихОчистке.Добавить("phone");
	
	СписокПоказателейНеПодлежащихОчистке.Добавить("okfs");
	СписокПоказателейНеПодлежащихОчистке.Добавить("okved");
	СписокПоказателейНеПодлежащихОчистке.Добавить("org_adress");
	СписокПоказателейНеПодлежащихОчистке.Добавить("org_type");
	СписокПоказателейНеПодлежащихОчистке.Добавить("stroyka");
	СписокПоказателейНеПодлежащихОчистке.Добавить("document_cretaion_date");
	
	ПозицияПервогоМнПоказателяВСтроке = Новый Соответствие;
	МинИндексыМнПоказателейВГруппе    = Новый Соответствие;
	
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
	
	ТабличноеПолеРаздела = Неопределено;
	
	РазделМногострочный = Ложь;
	ИдЭлементаРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(Форма, ВыбТабличноеПолеИмя);
	Если ИдЭлементаРаздела <> Неопределено Тогда
		ЭлементРаздела = Форма.СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаРаздела);
		РазделМногострочный = ЭлементРаздела.Пометка;
		ТабличноеПолеРаздела = ЭлементРаздела.Значение;
	КонецЕсли;
	
	Для Каждого ИмяОбласти Из Форма.РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел", ВыбТабличноеПолеИмя)) Цикл 
		Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяОбласти.ЗависимоеЗначение);
		Если Обл <> Неопределено Тогда
			Обл.Значение = 0;
		КонецЕсли;
		Если Форма.СтруктураДанныхОтчета.Свойство(ИмяОбласти.ЗависимоеЗначение) Тогда 
			Форма.СтруктураДанныхОтчета[ИмяОбласти.ЗависимоеЗначение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистке
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		Форма.СтруктураДанныхОтчета.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Форма.СтруктураДанныхОтчета.Вставить("ЧН" + ТекущаяОбласть.Имя, ФорматПредставленияНуля);
		КонецЕсли;
		Если Форма.СтруктураДанныхОтчета.Свойство("ПР" + ТекущаяОбласть.Имя) Тогда
			Форма.СтруктураДанныхОтчета.Удалить("ПР" + ТекущаяОбласть.Имя);
		КонецЕсли;
		
		Если РазделМногострочный Тогда
			Если СтрНайти(ТекущаяОбласть.Имя, "_") > 0 Тогда
				НомерКолонкиПоказателя = ПозицияПервогоМнПоказателяВСтроке[ТекущаяОбласть.Верх];
				Если НомерКолонкиПоказателя = Неопределено Тогда
					ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, ТекущаяОбласть.Лево);
				Иначе
					ПозицияПервогоМнПоказателяВСтроке.Вставить(ТекущаяОбласть.Верх, Мин(ТекущаяОбласть.Лево, НомерКолонкиПоказателя));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим дополнительные строки многострочного раздела, если есть
	Если РазделМногострочный Тогда
		
		Для каждого ЭлементПозицииПоказателя Из ПозицияПервогоМнПоказателяВСтроке Цикл
			ИндексПоказателя = 0;
			ИмяПоказателя = ВыбТабличноеПоле.Область(ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение, ЭлементПозицииПоказателя.Ключ, ЭлементПозицииПоказателя.Значение).Имя;
			ИмяПоказателяБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПоказателя, ИндексПоказателя);
			
			ИндексПредыдущегоПоказателя = МинИндексыМнПоказателейВГруппе[ИмяПоказателяБезИндекса];
			Если ИндексПредыдущегоПоказателя = Неопределено Тогда
				МинИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, ИндексПоказателя);
			Иначе
				МинИндексыМнПоказателейВГруппе.Вставить(ИмяПоказателяБезИндекса, Мин(ИндексПоказателя, ИндексПредыдущегоПоказателя));
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ЭлементПоказателяВГруппе Из МинИндексыМнПоказателейВГруппе Цикл
			ИндексПоказателя = ЭлементПоказателяВГруппе.Значение;
			
			ИмяОпцийСтроки = Лев(ЭлементПоказателяВГруппе.Ключ, СтрНайти(ЭлементПоказателяВГруппе.Ключ, "c"));
			СтруктураОпцийСтроки = Неопределено;
			Если Форма.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
				УстановитьПредставлениеКлючевыхЯчеек(Форма, СтруктураОпцийСтроки, ИндексПоказателя);
			КонецЕсли;
			
			ИмяПоказателяТекСтроки  = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя, "ЧГ=");
			ИмяПоказателяСледСтроки = ЭлементПоказателяВГруппе.Ключ + "_" + Формат(ИндексПоказателя + 1, "ЧГ=");
			Пока ВыбТабличноеПоле.Области.Найти(ИмяПоказателяСледСтроки) <> Неопределено Цикл
				
				УдалитьДополнительнуюСтроку(Форма, ИмяПервойЯчейкиОбласти(Форма, ВыбТабличноеПоле.Области[ИмяПоказателяСледСтроки]));
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТабличноеПолеРаздела <> Неопределено Тогда
		ТабличноеПолеРаздела.Очистить();
		ТабличноеПолеРаздела.Вывести(ВыбТабличноеПоле);
	КонецЕсли;
	
	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
	
	Расчет(Форма, ИмяСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтотОбъект, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОтчета = Форма.СтруктураДанныхОтчета;
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКТМО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКОПФ");
		
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "АдрЮР_JSON");
		
		Сведения.Добавить("", "ФИО");
		Сведения.Добавить("", "СвидСН");
		Сведения.Добавить("", "СвидДВ");
		Сведения.Добавить("", "АдрПрописки");
		
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ТелОрганизации");
	
	РегламентированнаяОтчетностьВызовСервера.ДополнитьЗаправшиваемыеСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Сведения);
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОКПО        = "";
		ОКФС        = "";
		ОКАТО       = "";
		ОКТМО       = "";
		ОКВЭД       = "";
		ОКОПФ       = "";
		
		НаимЮЛПол   = "";
		ОснВидДеят  = "";
		ФормСобств  = "";
		АдрЮР_JSON     = "";
		
		ФИО         = "";
		СвидСН      = "";
		СвидДВ      = "";
		АдрПрописки = "";
		
		ОргСведения.Свойство("ОКПО",        ОКПО);
		ОргСведения.Свойство("ОКФС",        ОКФС);
		ОргСведения.Свойство("ОКАТО",       ОКАТО);
		ОргСведения.Свойство("ОКТМО",       ОКТМО);
		ОргСведения.Свойство("ОКВЭД",       ОКВЭД);
		ОргСведения.Свойство("ОКОПФ",       ОКОПФ);
		
		ОргСведения.Свойство("НаимЮЛПол",   НаимЮЛПол);
		ОргСведения.Свойство("ОснВидДеят",  ОснВидДеят);
		ОргСведения.Свойство("ФормСобств",  ФормСобств);
		ОргСведения.Свойство("АдрЮР_JSON",  АдрЮР_JSON);
		
		ОргСведения.Свойство("ФИО",         ФИО);
		ОргСведения.Свойство("СвидСН",      СвидСН);
		ОргСведения.Свойство("СвидДВ",      СвидДВ);
		ОргСведения.Свойство("АдрПрописки", АдрПрописки);
		
	КонецЕсли;
	
	ФИОРук          = "";
	ТелОрганизации  = "";
	
	ФИОИсп          = "";
	ДолжнИсп        = "";
	ТелИсп          = "";
	АдресЭлПочтыИсп = "";
	
	ОргСведения.Свойство("ФИОРук",          ФИОРук);
	ОргСведения.Свойство("ТелОрганизации",  ТелОрганизации);
	
	РегламентированнаяОтчетностьВызовСервера.ДополнитьПодписантаСтатистическогоОтчета(ФИОИсп, ДолжнИсп, ТелИсп, АдресЭлПочтыИсп, ОргСведения, Форма.СтруктураРеквизитовФормы.Организация);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		УстановитьЗначениеПоляЕслиНайдено(Форма, "leader_fio",       ФИОРук);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "phone_org",        ТелОрганизации);
		
		УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_fio",  ФИОИсп);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_post", ДолжнИсп);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "phone",            ТелИсп);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "email",            АдресЭлПочтыИсп);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okpo",  ОКПО,  Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okfs",  ОКФС,  Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okato", ОКАТО, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "oktmo", ОКТМО, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okved", ОКВЭД, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okopf", ОКОПФ, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
		
		НаимОргСокр = "";
		Попытка
			НаимОргСокр = Форма.СтруктураРеквизитовФормы.Организация.НаименованиеСокращенное;
		Исключение
		КонецПопытки;
		НаимОрг = СокрЛП(НаимЮЛПол) + " " + ?(ЗначениеЗаполнено(НаимОргСокр), "(" + СокрЛП(НаимОргСокр) + ")", "");
		
		УстановитьЗначениеПоляЕслиНайдено(Форма, "name",     НаимОрг,    Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "osnvid",   ОснВидДеят, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "org_fsob", ФормСобств, Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		АдресОрганизации = РегламентированнаяОтчетностьВызовСервера.ПредставлениеАдресаJSON(АдрЮР_JSON);
		
	Иначе
		
		УстановитьЗначениеПоляЕслиНайдено(Форма, "name",     ФИО,        Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "svidsn",   СвидСН,     Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		УстановитьЗначениеПоляЕслиНайдено(Форма, "sviddv",   СвидДВ,     Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация);
		АдресОрганизации = АдрПрописки;
		
	КонецЕсли;
	
	УстановитьЗначениеПоляЕслиНайдено(Форма, "document_cretaion_date", Формат(Форма.ДатаПодписи, "ДФ=dd-MM-yyyy"));
	
	Если НЕ СтруктураДанныхОтчета.Свойство("org_adress") Тогда // адрес организации добавляем всегда и выводим при печати
		СтруктураДанныхОтчета.Вставить("org_adress", "");
	КонецЕсли;
	
	Если СтруктураДанныхОтчета.Свойство("org_adress") Тогда
		СтруктураДанныхОтчета.Вставить("ПРorg_adress", АдресОрганизации);
		СтруктураДанныхОтчета.Вставить("org_adress", АдресОрганизации);
	КонецЕсли;
	
	УстановитьЗначениеПоляЕслиНайдено(Форма, "leader_fio",       ФИОРук);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "org_phone",        ТелОрганизации);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "org_adress",       АдресОрганизации);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_fio",  ФИОИсп);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_post", ДолжнИсп);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "phone",            ТелИсп);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "email",            АдресЭлПочтыИсп);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "mail",             АдресЭлПочтыИсп);
	
	ДополнитьПоРегистрацииРеспондента(Форма, ОргСведения);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоляЕслиНайдено(Форма, ИмяПоля, ЗначениеПоля, УстановитьЕслиЗаполнено = Истина)
	
	Перем ЗначенПоля;
	
	Если Форма.СтруктураДанныхОтчета.Свойство(ИмяПоля, ЗначенПоля) Тогда
		
		Если НЕ УстановитьЕслиЗаполнено И ЗначениеЗаполнено(ЗначенПоля) Тогда
			Возврат;
		КонецЕсли;
		
		Форма.СтруктураДанныхОтчета[ИмяПоля] = ?(ЗначениеЗаполнено(ЗначениеПоля), ЗначениеПоля, "");
		
		НайденноеПоле = Форма.ТабличныйДокумент.Области.Найти(ИмяПоля);
		Если НайденноеПоле <> Неопределено Тогда
			НайденноеПоле.Значение = Форма.СтруктураДанныхОтчета[ИмяПоля];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	Форма.СтруктураДанныхОтчета.Вставить("ДатаСоставленияОтчета",  Формат(Форма.ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'"""));
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	// Процедура "заглушка", для роОчистить.
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	// Процедура "заглушка", для роОчистить.
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?';
		|en = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	КонецЕсли;
	ОтключитьОбработчикОжидания("ПолныйПересчетКСНаСтранице");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	ПоказателиОтчета.Вставить("ПолеТабличногоДокумента", СтруктураДанныхОтчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеНуляИзСтрокиФормата(Знач СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаменитьПредставлениеНуляВСтрокеФормата(Знач СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;
	
	Возврат НоваяСтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
		И СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, "", СтруктураРеквизитовФормы.мВыбраннаяФорма) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущаяСтраницаМодифицирована И ВРазделеЕстьАвторасчет Тогда 
		ПолныйРасчетКСНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		ТекущаяСтраницаМодифицирована = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = СтруктураРеквизитовФормы.ЗаголовокОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = 0;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	СписокСохранения.Вставить("ОбрезатьПустыеСимволы", ОбрезатьПустыеСимволы);
	СписокСохранения.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("НарастающимИтогом", СтруктураРеквизитовФормы.мНарастающимИтогом);
	СписокСохранения.Вставить("ИндексФормыОтчета", СтруктураРеквизитовФормы.мИндексФормыОтчета);
	
	ДанныеШаблонаОтчета = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.мАдресДанныхШаблона);
	СписокСохранения.Вставить("ДанныеШаблонаОтчета", ДанныеШаблонаОтчета);
	
	СписокСохранения.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	СписокСохранения.Вставить("РасчитываемыеЯчейки", ДанныеФормыВЗначение(РасчитываемыеЯчейки, Тип("ТаблицаЗначений")));
	СписокСохранения.Вставить("Зависимости", ДанныеФормыВЗначение(Зависимости, Тип("ТаблицаЗначений")));
	СписокСохранения.Вставить("РасчитываемыеЯчейкиМножественныхСтрок", ДанныеФормыВЗначение(РасчитываемыеЯчейкиМножественныхСтрок, Тип("ТаблицаЗначений")));
	СписокСохранения.Вставить("ЗависимостиМножественныхСтрок", ДанныеФормыВЗначение(ЗависимостиМножественныхСтрок, Тип("ТаблицаЗначений")));
	СписокСохранения.Вставить("ПодсказкиДляЯчеекСРасчетом", ДанныеФормыВЗначение(ПодсказкиДляЯчеекСРасчетом, Тип("ТаблицаЗначений")));
	СписокСохранения.Вставить("ИтогиПоМножественнымСтрокам", ДанныеФормыВЗначение(ИтогиПоМножественнымСтрокам, Тип("ТаблицаЗначений")));
	РегламентированнаяОтчетностьКлиентСервер.ДополнитьОпциональныеПараметрыОтчета(ЭтотОбъект, СписокСохранения);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения, Новый СжатиеДанных(5));
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																												|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())))
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП = "", ВыбраннаяФормаОтчета = "")
	
	Попытка
		Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСохраненныйДок", ?(Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено, Неопределено, Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка));
	Запрос.УстановитьПараметр("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.") - 1), 7)].Имя);
	Запрос.УстановитьПараметр("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаНач", НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаКон", КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодНалоговогоОргана", КодИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.УстановитьПараметр("ВыбраннаяФорма", ВыбраннаяФормаОтчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РегламентированныйОтчет.Ссылка)
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Ссылка <> &мСохраненныйДок
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачалаНач И &ДатаНачалаКон
	|	И РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаКонцаНач И &ДатаКонцаКон
	|	И РегламентированныйОтчет.Вид = &Вариант";
	
	Если КодИФНС <> "не применимо" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И РегламентированныйОтчет.КодНалоговогоОргана = &КодНалоговогоОргана
		|	И РегламентированныйОтчет.КПП = &КПП";
	КонецЕсли;
	Если ВыбраннаяФормаОтчета <> "" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И РегламентированныйОтчет.ВыбраннаяФорма ПОДОБНО &ВыбраннаяФорма";
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 ИЛИ РезультатЗапроса.Получить(0).Получить(0) = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КонтекстАвторасчетаНаСервере()
	КонтекстАвторасчета = Новый Структура;
	КонтекстАвторасчета.Вставить("Зависимости", Зависимости);
	КонтекстАвторасчета.Вставить("ЗависимостиМножественныхСтрок", ЗависимостиМножественныхСтрок);
	КонтекстАвторасчета.Вставить("СтруктураДанныхОтчета", СтруктураДанныхОтчета);
	КонтекстАвторасчета.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонтекстАвторасчета.Вставить("РасчитываемыеЯчейки", РасчитываемыеЯчейки);
	КонтекстАвторасчета.Вставить("РасчитываемыеЯчейкиМножественныхСтрок", РасчитываемыеЯчейкиМножественныхСтрок);
	КонтекстАвторасчета.Вставить("ЯчейкиДляРасчета", Новый Соответствие);
	Возврат КонтекстАвторасчета;
КонецФункции

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);
	ОтключитьОбработчикОжидания("ПолныйПересчетКСНаСтранице");
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Не ВРазделеЕстьАвторасчет
		Или Не ЗначениеЗаполнено(ОбластьИмя) Или Не ЗначениеЗаполнено(ИмяСтраницыПанели) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СинхронныйАвторасчет Тогда
		ПересчетИтоговМножественныхСтрок(ЭтотОбъект);
		ЯчейкиДляРасчета = Новый Соответствие;
		ЗаполнитьЗависимыеЯчейкиРек(ЯчейкиДляРасчета, ИмяСтраницыПанели, ОбластьИмя);
		Скрипт = СкриптРасчетаНаКлиенте(ЯчейкиДляРасчета, ИмяСтраницыПанели);
		КонтекстАвторасчета = Новый Структура("ТабличныйДокумент, Скрипт", ТабличныйДокумент, Скрипт);
		РасчетКСНаСервереБезКонтекста(КонтекстАвторасчета);
		
		Для Каждого Обл Из КонтекстАвторасчета.ТабличныйДокумент.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина Тогда 
				
				ТабличныйДокумент.Области[Обл.Имя].Значение = КонтекстАвторасчета.ТабличныйДокумент.Области[Обл.Имя].Значение;
				Если СтруктураДанныхОтчета.Свойство(Обл.Имя) Тогда 
					СтруктураДанныхОтчета[Обл.Имя] = КонтекстАвторасчета.ТабличныйДокумент.Области[Обл.Имя].Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПересчетИтоговМножественныхСтрок(ЭтотОбъект);
		Модифицированность = Истина;
	Иначе
		ПодключитьОбработчикОжидания("ПолныйПересчетКСНаСтранице", 3, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолныйПересчетКСНаСтранице()
	ОтключитьОбработчикОжидания("ПолныйПересчетКСНаСтранице");
	Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет И ВРазделеЕстьАвторасчет Тогда
		
		ОткрытьФорму("Отчет.РегламентированныйОтчетСтатистикаПрочиеФормы.Форма.ДлительнаяОперация", 
			Новый Структура("ИдентификаторВладельца", УникальныйИдентификатор), 
			ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПолныйРасчетКСНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Оповестить("РегламентированныйОтчетСтатистикаПрочиеФормы_ОкончаниеАвторасчета", , УникальныйИдентификатор);
	КонецЕсли;
	ТекущаяСтраницаМодифицирована = Ложь;
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);
	ПолныйРасчетКСНаСервере(ИмяСтраницыПанели);
КонецПроцедуры

&НаСервере
Функция СформироватьСкриптРасчета(ЯчейкиДляРасчета, ИмяТекущейСтраницы)
	КонтекстАвторасчета = КонтекстАвторасчетаНаСервере();
	ЗаполнитьЗначенияСвойств(КонтекстАвторасчета, ЭтотОбъект);
	КонтекстАвторасчета.ЯчейкиДляРасчета = ЯчейкиДляРасчета;
	Возврат СформироватьСкриптРасчетаБезКонтекста(ИмяТекущейСтраницы, КонтекстАвторасчета);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетИтоговМножественныхСтрок(Форма)
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Форма.ИтогиПоМножественнымСтрокам.НайтиСтроки(Новый Структура("Раздел", Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
		ОбластьДляРасчета = Форма.ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение);
		Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
			Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
			Продолжить;
		КонецЕсли;
		
		Итог = 0;
		Инд = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ОблАрг = Форма.ТабличныйДокумент.Области.Найти(Стр.Аргумент + "_" + Формат(Инд, "ЧГ="));
			Если ТипЗнч(ОблАрг) <> Тип("ОбластьЯчеекТабличногоДокумента")
				Или ОблАрг.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				Или ОблАрг.СодержитЗначение <> Истина Тогда 
				Прервать;
			КонецЕсли;
			
			Итог = Итог + Форма.ОТЧ.ПривестиЗначение(ОблАрг.Значение);
		КонецЦикла;
		ОбластьДляРасчета.Значение = Итог;
		Форма.СтруктураДанныхОтчета.Вставить(Стр.ЗависимоеЗначение, Итог);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПересчетПоСписку(ЯчейкиДляРасчета, ИмяТекущейСтраницы)
	ПересчетИтоговМножественныхСтрок(ЭтотОбъект);
	Если ТипЗнч(ЯчейкиДляРасчета) = Тип("Соответствие") И ЯчейкиДляРасчета.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	Скрипт = СформироватьСкриптРасчета(ЯчейкиДляРасчета, ИмяТекущейСтраницы);
	ПараметрыВыполнения = Новый Структура("ТабличныйДокумент", ТабличныйДокумент);
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Скрипт, ПараметрыВыполнения);
	Для Каждого КЗ Из ЯчейкиДляРасчета Цикл
		ОбластьДляРасчета = ТабличныйДокумент.Области.Найти(КЗ.Ключ);
		Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
			Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхОтчета.Вставить(ОбластьДляРасчета.Имя, ОбластьДляРасчета.Значение);
	КонецЦикла;
	ПересчетИтоговМножественныхСтрок(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗависимыеЯчейкиРекБезКонтекста(ИмяТекущейСтраницы, ОбластьИмя, Контекст)
	Если СтрНачинаетсяС(ОбластьИмя, "ПОs") Тогда 
		Для Каждого Стр Из Контекст.Зависимости.НайтиСтроки(Новый Структура("Раздел, Аргумент", ИмяТекущейСтраницы, ОбластьИмя)) Цикл 
			ОбластьВСписке = (Контекст.ЯчейкиДляРасчета[Стр.ЗависимоеЗначение] = Истина);
			Контекст.ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение, Истина);
			Если Не ОбластьВСписке Тогда 
				ЗаполнитьЗависимыеЯчейкиРекБезКонтекста(ИмяТекущейСтраницы, Стр.ЗависимоеЗначение, Контекст);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИндексПодч = СтрНайти(ОбластьИмя, "_");
		Если ИндексПодч > 0 Тогда 
			ОбластьИмя = Лев(ОбластьИмя, ИндексПодч - 1);
		КонецЕсли;
		Для Каждого Стр Из Контекст.ЗависимостиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел, Аргумент", ИмяТекущейСтраницы, ОбластьИмя)) Цикл 
			ОбластьВСписке = (Контекст.ЯчейкиДляРасчета[Стр.ЗависимоеЗначение] = Истина);
			Контекст.ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение, Истина);
			Если Не ОбластьВСписке Тогда 
				ЗаполнитьЗависимыеЯчейкиРекБезКонтекста(ИмяТекущейСтраницы, Стр.ЗависимоеЗначение, Контекст);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗависимыеЯчейкиРек(ЯчейкиДляРасчета, ИмяТекущейСтраницы, ОбластьИмя)
	Если СтрНачинаетсяС(ОбластьИмя, "ПОs") Тогда 
		Для Каждого Стр Из Зависимости.НайтиСтроки(Новый Структура("Раздел, Аргумент", ИмяТекущейСтраницы, ОбластьИмя)) Цикл 
			ОбластьВСписке = (ЯчейкиДляРасчета[Стр.ЗависимоеЗначение] = Истина);
			ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение, Истина);
			Если Не ОбластьВСписке Тогда 
				ЗаполнитьЗависимыеЯчейкиРек(ЯчейкиДляРасчета, ИмяТекущейСтраницы, Стр.ЗависимоеЗначение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИндексПодч = СтрНайти(ОбластьИмя, "_");
		Если ИндексПодч > 0 Тогда 
			ОбластьИмя = Лев(ОбластьИмя, ИндексПодч - 1);
		КонецЕсли;
		Для Каждого Стр Из ЗависимостиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел, Аргумент", ИмяТекущейСтраницы, ОбластьИмя)) Цикл 
			ОбластьВСписке = (ЯчейкиДляРасчета[Стр.ЗависимоеЗначение] = Истина);
			ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение, Истина);
			Если Не ОбластьВСписке Тогда 
				ЗаполнитьЗависимыеЯчейкиРек(ЯчейкиДляРасчета, ИмяТекущейСтраницы, Стр.ЗависимоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СкриптРасчетаНаКлиенте(ЯчейкиДляРасчета, ИмяТекущейСтраницы)
	ОТЧ = Новый ОписаниеТипов("Число");
	СкриптДляРасчета = "";
	ПараметрыВычисления = Новый Структура;
	Для Инд = 0 По 2 Цикл
		Для Каждого КЗ Из ЯчейкиДляРасчета Цикл
			ОбластьДляРасчета = ТабличныйДокумент.Области.Найти(КЗ.Ключ);
			Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
				Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
				Продолжить;
			КонецЕсли;
			
			Расчет = РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел, ЗависимоеЗначение, ТипРасчета", ИмяТекущейСтраницы, КЗ.Ключ, 3-(Инд%2)));
			Если Расчет.Количество() = 1 Тогда
				ФормулаРасчета = Расчет[0].Формула;
				Для Каждого Парам Из Расчет[0].Параметры Цикл
					ОбластьПараметр = ТабличныйДокумент.Области.Найти(?(ТипЗнч(Парам) = Тип("ЭлементСпискаЗначений"), Парам.Значение, Парам));
					Если ТипЗнч(ОбластьПараметр) = Тип("ОбластьЯчеекТабличногоДокумента")
						И ОбластьПараметр.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И ОбластьПараметр.СодержитЗначение = Истина Тогда 
						
						Если ТипЗнч(ОбластьПараметр.Значение) = Тип("Число") Тогда
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "Параметры.ТабличныйДокумент.Области[""" + Парам + """].Значение");
							ПараметрыВычисления.Вставить(Парам, ОбластьПараметр.Значение);
						Иначе
							НовПарам = СтрЗаменить(Формат(ОТЧ.ПривестиЗначение(ОбластьПараметр.Значение), "ЧГ=0"), ",", ".");
							НовПарам = ?(НовПарам = "", "0", НовПарам);
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, НовПарам);
							ПараметрыВычисления.Вставить(Парам, НовПарам);
						КонецЕсли;
					Иначе
						ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "0");
						ПараметрыВычисления.Вставить(Парам, 0);
					КонецЕсли;
				КонецЦикла;
				
				СкриптДляРасчета = СкриптДляРасчета + "Параметры.ТабличныйДокумент.Области[""" + ОбластьДляРасчета.Имя + """].Значение = " + ФормулаРасчета + ";" + Символы.ПС;
				СтруктураДанныхОтчета.Вставить(ОбластьДляРасчета.Имя, ОбластьДляРасчета.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КЗ Из ЯчейкиДляРасчета Цикл
		Если Не СтрНачинаетсяС(КЗ.Ключ, "ПМs") Тогда 
			Продолжить;
		КонецЕсли;
		Инд = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = "_" + Формат(Инд, "ЧГ=0");
			ОбластьДляРасчета = ТабличныйДокумент.Области.Найти(КЗ.Ключ + ИндСтр);
			Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
				Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
				Прервать;
			КонецЕсли;
			
			Расчет = РасчитываемыеЯчейкиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел, ЗависимоеЗначение", ИмяТекущейСтраницы, КЗ.Ключ));
			Если Расчет.Количество() = 1 Тогда
				ФормулаРасчета = Расчет[0].Формула;
				Для Каждого Парам Из Расчет[0].Параметры Цикл 
					ОбластьПараметр = ТабличныйДокумент.Области.Найти(Парам.Значение + ИндСтр);
					Если ТипЗнч(ОбластьПараметр) = Тип("ОбластьЯчеекТабличногоДокумента")
						И ОбластьПараметр.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И ОбластьПараметр.СодержитЗначение = Истина Тогда 
						
						Если ТипЗнч(ОбластьПараметр.Значение) = Тип("Число") Тогда
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "Параметры.ТабличныйДокумент.Области[""" + Парам.Значение + ИндСтр + """].Значение");
							ПараметрыВычисления.Вставить(Парам, ОбластьПараметр.Значение);
						Иначе
							НовПарам = СтрЗаменить(Формат(ОТЧ.ПривестиЗначение(ОбластьПараметр.Значение), "ЧГ=0"), ",", ".");
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, НовПарам);
							ПараметрыВычисления.Вставить(Парам, НовПарам);
						КонецЕсли;
					Иначе
						ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "0");
						ПараметрыВычисления.Вставить(Парам, 0);
					КонецЕсли;
				КонецЦикла;
				
				СкриптДляРасчета = СкриптДляРасчета + "Параметры.ТабличныйДокумент.Области[""" + ОбластьДляРасчета.Имя + """].Значение = " + ФормулаРасчета + ";" + Символы.ПС;
				СтруктураДанныхОтчета.Вставить(ОбластьДляРасчета.Имя, ОбластьДляРасчета.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СокрЛП(СкриптДляРасчета);
КонецФункции

&НаСервереБезКонтекста
Процедура РасчетКСНаСервереБезКонтекста(Контекст)
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Контекст.Скрипт, Новый Структура("ТабличныйДокумент", Контекст.ТабличныйДокумент));
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСкриптРасчетаБезКонтекста(ИмяТекущейСтраницы, Контекст)
	ОТЧ = Новый ОписаниеТипов("Число");
	СкриптДляРасчета = "";
	ПараметрыВычисления = Новый Структура;
	Для Инд = 0 По 2 Цикл
		Для Каждого КЗ Из Контекст.ЯчейкиДляРасчета Цикл
			ОбластьДляРасчета = Контекст.ТабличныйДокумент.Области.Найти(КЗ.Ключ);
			Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
				Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
				Продолжить;
			КонецЕсли;
			
			Расчет = Контекст.РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел, ЗависимоеЗначение, ТипРасчета", ИмяТекущейСтраницы, КЗ.Ключ, 3-(Инд%2)));
			Если Расчет.Количество() = 1 Тогда
				ФормулаРасчета = Расчет[0].Формула;
				Для Каждого Парам Из Расчет[0].Параметры Цикл 
					ОбластьПараметр = Контекст.ТабличныйДокумент.Области.Найти(Парам);
					Если ТипЗнч(ОбластьПараметр) = Тип("ОбластьЯчеекТабличногоДокумента")
						И ОбластьПараметр.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И ОбластьПараметр.СодержитЗначение = Истина Тогда 
						
						Если ТипЗнч(ОбластьПараметр.Значение) = Тип("Число") Тогда
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "Параметры.ТабличныйДокумент.Области[""" + Парам + """].Значение");
							ПараметрыВычисления.Вставить(Парам, ОбластьПараметр.Значение);
						Иначе
							НовПарам = СтрЗаменить(Формат(ОТЧ.ПривестиЗначение(ОбластьПараметр.Значение), "ЧГ=0"), ",", ".");
							НовПарам = ?(НовПарам = "", "0", НовПарам);
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, НовПарам);
							ПараметрыВычисления.Вставить(Парам, НовПарам);
						КонецЕсли;
					Иначе
						ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "0");
						ПараметрыВычисления.Вставить(Парам, 0);
					КонецЕсли;
				КонецЦикла;
				
				СкриптДляРасчета = СкриптДляРасчета + "Параметры.ТабличныйДокумент.Области[""" + ОбластьДляРасчета.Имя + """].Значение = " + ФормулаРасчета + ";" + Символы.ПС;
				Контекст.СтруктураДанныхОтчета.Вставить(ОбластьДляРасчета.Имя, ОбластьДляРасчета.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КЗ Из Контекст.ЯчейкиДляРасчета Цикл
		Если Не СтрНачинаетсяС(КЗ.Ключ, "ПМs") Тогда 
			Продолжить;
		КонецЕсли;
		Инд = 0;
		Пока Истина Цикл 
			Инд = Инд + 1;
			ИндСтр = "_" + Формат(Инд, "ЧГ=0");
			ОбластьДляРасчета = Контекст.ТабличныйДокумент.Области.Найти(КЗ.Ключ + ИндСтр);
			Если ТипЗнч(ОбластьДляРасчета) <> Тип("ОбластьЯчеекТабличногоДокумента")
				Или ОбластьДляРасчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				Или ОбластьДляРасчета.СодержитЗначение <> Истина Тогда 
				Прервать;
			КонецЕсли;
			
			Расчет = Контекст.РасчитываемыеЯчейкиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел, ЗависимоеЗначение", ИмяТекущейСтраницы, КЗ.Ключ));
			Если Расчет.Количество() = 1 Тогда
				ФормулаРасчета = Расчет[0].Формула;
				Для Каждого Парам Из Расчет[0].Параметры Цикл 
					ОбластьПараметр = Контекст.ТабличныйДокумент.Области.Найти(Парам.Значение + ИндСтр);
					Если ТипЗнч(ОбластьПараметр) = Тип("ОбластьЯчеекТабличногоДокумента")
						И ОбластьПараметр.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И ОбластьПараметр.СодержитЗначение = Истина Тогда 
						
						Если ТипЗнч(ОбластьПараметр.Значение) = Тип("Число") Тогда
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "Параметры.ТабличныйДокумент.Области[""" + Парам.Значение + ИндСтр + """].Значение");
							ПараметрыВычисления.Вставить(Парам, ОбластьПараметр.Значение);
						Иначе
							НовПарам = СтрЗаменить(Формат(ОТЧ.ПривестиЗначение(ОбластьПараметр.Значение), "ЧГ=0"), ",", ".");
							ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, НовПарам);
							ПараметрыВычисления.Вставить(Парам, НовПарам);
						КонецЕсли;
					Иначе
						ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Параметры." + Парам, "0");
						ПараметрыВычисления.Вставить(Парам, 0);
					КонецЕсли;
				КонецЦикла;
				
				СкриптДляРасчета = СкриптДляРасчета + "Параметры.ТабличныйДокумент.Области[""" + ОбластьДляРасчета.Имя + """].Значение = " + ФормулаРасчета + ";" + Символы.ПС;
				Контекст.СтруктураДанныхОтчета.Вставить(ОбластьДляРасчета.Имя, ОбластьДляРасчета.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СокрЛП(СкриптДляРасчета);
КонецФункции

&НаСервере
Процедура ПолныйРасчетКСНаСервере(ИмяТекущейСтраницы)
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда 
		ЯчейкиДляРасчета = Новый Соответствие;
		Для Каждого Стр Из РасчитываемыеЯчейки Цикл 
			ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение);
		КонецЦикла;
		Для Каждого Стр Из РасчитываемыеЯчейкиМножественныхСтрок Цикл 
			ЯчейкиДляРасчета.Вставить(Стр.ЗависимоеЗначение);
		КонецЦикла;
		
		ПересчетПоСписку(ЯчейкиДляРасчета, ИмяТекущейСтраницы)
	КонецЕсли;
	
	ТекущаяСтраницаМодифицирована = Ложь;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Если ИмяТекущейСтраницы = "" ИЛИ ОбластьИмя = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы <> "ОбщаяИнформация" Тогда
		
		ИндексОбласти = 0;
		ИмяОбластиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ОбластьИмя, ИндексОбласти);
		
		ДопПараметрыОбласти = Неопределено;
		Если Форма.СтруктураОписанийЯчеек.Свойство(ИмяОбластиБезИндекса, ДопПараметрыОбласти) Тогда
			// Очистим зависимые от текущей ячейки, если указаны
			МассивЗависимыхЯчеек = Неопределено;
			Если ДопПараметрыОбласти.Свойство("refs", МассивЗависимыхЯчеек) И ТипЗнч(МассивЗависимыхЯчеек) = Тип("Массив") Тогда
				Для каждого ИмяЗависимойЯчейки Из МассивЗависимыхЯчеек Цикл
					Если Лев(ИмяЗависимойЯчейки, 2) = "ПМ" Тогда
						Если ИндексОбласти = 0 Тогда
							ИндексОчищаемойОбласти = 1;
							ИмяОчищаемойОбласти = ИмяЗависимойЯчейки + "_1";
							Пока Форма.СтруктураДанныхОтчета.Свойство(ИмяОчищаемойОбласти) Цикл
								ОчиститьОбласть(Форма, ИмяТекущейСтраницы, ИмяОчищаемойОбласти);
								ИндексОчищаемойОбласти = ИндексОчищаемойОбласти + 1;
								ИмяОчищаемойОбласти = ИмяЗависимойЯчейки + "_" + Формат(ИндексОчищаемойОбласти, "ЧГ=");
							КонецЦикла; 
						Иначе
							ОчиститьОбласть(Форма, ИмяТекущейСтраницы, ИмяЗависимойЯчейки + "_" + Формат(ИндексОбласти, "ЧГ="));
						КонецЕсли;
					Иначе
						ОчиститьОбласть(Форма, ИмяТекущейСтраницы, ИмяЗависимойЯчейки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Установим представление ключевых ячеек, если существуют опции для строки
			Если ИндексОбласти > 0 Тогда
				ИмяОпцийСтроки = Неопределено;
				Если ДопПараметрыОбласти.Свойство("grv", ИмяОпцийСтроки) И ЗначениеЗаполнено(ИмяОпцийСтроки) Тогда
					СтруктураОпцийСтроки = Неопределено;
					Если Форма.СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
						УстановитьПредставлениеКлючевыхЯчеек(Форма, СтруктураОпцийСтроки, ИндексОбласти);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьОбласть(Форма, ИмяСтраницы, ИмяОбласти)
	
	ОчищаемаяОбласть = Форма.ТабличныйДокумент.Области.Найти(ИмяОбласти);
	
	Если ОчищаемаяОбласть <> Неопределено Тогда
		
		ОчищаемаяОбласть.Очистить();
		Если ОчищаемаяОбласть.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ОчищаемаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОчищаемаяОбласть.Формат, "ЧН=' '");
			Форма.СтруктураДанныхОтчета.Вставить("ЧН" + ИмяОбласти, "ЧН=' '");
		КонецЕсли; 
		Форма.СтруктураДанныхОтчета.Вставить(ИмяОбласти, ОчищаемаяОбласть.Значение);
		Если Форма.СтруктураДанныхОтчета.Свойство("ПР" + ИмяОбласти) Тогда
			Форма.СтруктураДанныхОтчета.Вставить("ПР" + ИмяОбласти, "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ЕстьДанныеАвторасчета = (РасчитываемыеЯчейки.Количество() > 0 И Зависимости.Количество() > 0);
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Истина);
	мПараметры.Вставить("УправлениеВариантами", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	Если Не ЕстьДанныеАвторасчета Тогда 
		мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	КонецЕсли;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если ЕстьДанныеАвторасчета Тогда
		ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	КонецЕсли;
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предыдущая операция выбора листов не завершена.%1Завершить?';
																					|en = 'Предыдущая операция выбора листов не завершена.%1Завершить?'"), Символы.ПС);
		ДополнительныеПараметры = Новый Структура("ФормаНастройкиОтчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ФормаНастройкиОтчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗавершитьПредыдущуюОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастроекПродолжение(ФормаНастройкиОтчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗавершитьПредыдущуюОперациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ФормаНастройкиОтчета = ДополнительныеПараметры.ФормаНастройкиОтчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ФормаНастройкиОтчета.Закрыть();
	КонецЕсли;
	
	ОткрытьФормуНастроекПродолжение(ФормаНастройкиОтчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПродолжение(ФормаНастройкиОтчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим)
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеАвторасчета", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
	ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастроекПродолжениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура Перерасчет(ТекущийРазделОтчетаСокрНаим)
	РаскраситьЯчейкиАвторасчета();
	ПолныйРасчетКСНаСервере(ТекущийРазделОтчетаСокрНаим);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПродолжениеЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет
		И ТекущийРазделОтчетаСокрНаим <> "ОбщаяИнформация" Тогда
		
		Перерасчет(ТекущийРазделОтчетаСокрНаим);
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	Если НЕ флЗначенияИдентичны Тогда
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтрокиЗавершение() Экспорт 
	Элемент = Элементы.РазделыОтчета;
	
	Если ТекущаяСтраницаМодифицирована И Не СинхронныйАвторасчет Тогда 
		ПолныйПересчетКСНаСтранице();
		ТекущаяСтраницаМодифицирована = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;														
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, Элемент.ТекущиеДанные.ИдЭлементаФормыРаздела);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ОбщаяИнформация" Тогда
		Элементы.Обновить.Доступность                  = Истина;
		Элементы.ОчиститьТекущуюСтраницу.Доступность   = Ложь;
		Элементы.ФормаЗагрузитьИзФайла.Доступность     = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
		Элементы.ФормаЗагрузитьИзФайла.Доступность     = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ЯчейкаПозиционирования) Тогда 
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области.Найти(СтруктураРеквизитовФормы.ЯчейкаПозиционирования);
		СтруктураРеквизитовФормы.ЯчейкаПозиционирования = Неопределено;
	Иначе
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	КонецЕсли;
	ВРазделеЕстьАвторасчет = (РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел", 
								СтруктураРеквизитовФормы.НаимТекущегоРаздела)).Количество() > 0)
								Или (ЗависимостиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел", 
								СтруктураРеквизитовФормы.НаимТекущегоРаздела)).Количество() > 0)
								Или (ИтогиПоМножественнымСтрокам.НайтиСтроки(Новый Структура("Раздел", 
								СтруктураРеквизитовФормы.НаимТекущегоРаздела)).Количество() > 0);
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИдЭлементаФормыРаздела = Неопределено)
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИдЭлементаФормыРаздела);
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	РаскраситьЯчейкиАвторасчета();
КонецПроцедуры

&НаСервере
Функция ФорматироватьФормулуПереносами(Формула)
	Если СтрДлина(Формула) < 52 Тогда 
		Возврат Формула;
	КонецЕсли;
	
	ИндСтр = СтрНайти(Формула, "Стр.", НаправлениеПоиска.СНачала, 50, 1);
	Если ИндСтр = 0 Тогда
		Возврат Формула;
	Иначе
		Возврат Лев(Формула, ИндСтр - 1) + Символы.ПС + ФорматироватьФормулуПереносами(Сред(Формула, ИндСтр));
	КонецЕсли;
КонецФункции

&НаСервере
Функция ИменаЯчеекВФормуле(Параметры)
	ИменаЯчеек = Новый Соответствие;
	СтрокиВФормуле = Новый Соответствие;
	КолонкиВФормуле = Новый Соответствие;
	
	Для Каждого Парам Из Параметры Цикл 
		ИмяЯчейки = Парам.Значение;
		ИндексСтроки = СтрНайти(ИмяЯчейки, "r");
		ИндексКолонки = СтрНайти(ИмяЯчейки, "c");
		СтрокиВФормуле.Вставить(Сред(ИмяЯчейки, ИндексСтроки + 1, ИндексКолонки - ИндексСтроки - 1));
		КолонкиВФормуле.Вставить(Сред(ИмяЯчейки, ИндексКолонки + 1));
	КонецЦикла;
	
	Для Каждого Парам Из Параметры Цикл 
		ИмяЯчейки = Парам.Значение;
		ИндексСтроки = СтрНайти(ИмяЯчейки, "r");
		ИндексКолонки = СтрНайти(ИмяЯчейки, "c");
		Если СтрокиВФормуле.Количество() = 1 Тогда 
			ИмяДляОтображения = "гр." + Сред(ИмяЯчейки, ИндексКолонки + 1);
		ИначеЕсли КолонкиВФормуле.Количество() = 1 Тогда 
			ИмяДляОтображения = "стр." + Сред(ИмяЯчейки, ИндексСтроки + 1, ИндексКолонки - ИндексСтроки - 1);
		Иначе
			ИмяДляОтображения = "стр." + Сред(ИмяЯчейки, ИндексСтроки + 1, ИндексКолонки - ИндексСтроки - 1) + " гр." + Сред(ИмяЯчейки, ИндексКолонки + 1);
		КонецЕсли;
		ИменаЯчеек.Вставить(ИмяЯчейки, ИмяДляОтображения);
	КонецЦикла;
	
	Возврат ИменаЯчеек;
КонецФункции

&НаСервере
Процедура ИнициализацияПодсказокДляЯчеек()
	Если ПодсказкиДляЯчеекСРасчетом.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		ИменаЯчеек = Новый Соответствие;
		Для Каждого Стр Из РасчитываемыеЯчейкиМножественныхСтрок Цикл 
			Для Каждого Парам Из Стр.Параметры Цикл 
				ИмяЯчейки = Парам.Значение;
				ИндексКолонки = СтрНайти(ИмяЯчейки, "c");
				ИмяДляОтображения = "гр." + Сред(ИмяЯчейки, ИндексКолонки + 1);
				ИменаЯчеек.Вставить(ИмяЯчейки, ИмяДляОтображения);
			КонецЦикла;
		КонецЦикла;
		
		Подсказки = Новый Соответствие;
		Для Инд = 0 По 1 Цикл 
			Для Каждого Стр Из РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("ТипРасчета", 3 - Инд)) Цикл 
				Формула = СтрЗаменить(Стр.Формула, "Параметры.", "");
				Для Каждого Парам Из Стр.Параметры Цикл
					Формула = СтрЗаменить(Формула, Парам.Значение, ИменаЯчеекВФормуле(Стр.Параметры)[Парам.Значение]);
				КонецЦикла;
				Подсказки.Вставить(Стр.ЗависимоеЗначение, "Формула для расчета:" + Символы.ПС + ФорматироватьФормулуПереносами(Формула));
			КонецЦикла;
		КонецЦикла;
		Для Каждого Стр Из РасчитываемыеЯчейкиМножественныхСтрок Цикл 
			Формула = СтрЗаменить(Стр.Формула, "Параметры.", "");
			Для Каждого Парам Из Стр.Параметры Цикл
				Формула = СтрЗаменить(Формула, Парам.Значение, ИменаЯчеек[Парам.Значение]);
			КонецЦикла;
			Подсказки.Вставить(Стр.ЗависимоеЗначение, "Формула для расчета:" + Символы.ПС + ФорматироватьФормулуПереносами(Формула));
		КонецЦикла;
		
		Для Каждого КЗ Из Подсказки Цикл 
			НовСтр = ПодсказкиДляЯчеекСРасчетом.Добавить();
			НовСтр.ИмяЯчейки = КЗ.Ключ;
			НовСтр.Подсказка = КЗ.Значение;
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура РаскраситьЯчейкиАвторасчета()
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Для Каждого Стр Из РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение);
			Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОРучноеЗаполнение;
				Обл.Защита = Ложь;
				Обл.Примечание.Текст = "";
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из ИтогиПоМножественнымСтрокам.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение);
			Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
				Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОРучноеЗаполнение;
				Обл.Защита = Истина;
				Обл.Примечание.Текст = "";
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из РасчитываемыеЯчейкиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Инд = 0;
			Пока Истина Цикл 
				Инд = Инд + 1;
				Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение + "_" + Формат(Инд, "ЧГ=0"));
				Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОРучноеЗаполнение;
					Обл.Защита = Ложь;
					Обл.Примечание.Текст = "";
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Стр Из РасчитываемыеЯчейки.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение);
			Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
				Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОАвторасчет;
				Обл.Защита = Истина;
				Подсказки = ПодсказкиДляЯчеекСРасчетом.НайтиСтроки(Новый Структура("ИмяЯчейки", Обл.Имя));
				Если Подсказки.Количество() = 1 Тогда 
					Обл.Примечание.Текст = Подсказки[0].Подсказка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из ИтогиПоМножественнымСтрокам.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение);
			Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
				Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОАвторасчет;
				Обл.Защита = Истина;
				Обл.Примечание.Текст = Стр.Подсказка;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из РасчитываемыеЯчейкиМножественныхСтрок.НайтиСтроки(Новый Структура("Раздел", СтруктураРеквизитовФормы.НаимТекущегоРаздела)) Цикл 
			Инд = 0;
			Пока Истина Цикл 
				Инд = Инд + 1;
				Обл = ТабличныйДокумент.Области.Найти(Стр.ЗависимоеЗначение + "_" + Формат(Инд, "ЧГ=0"));
				Если ТипЗнч(Обл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
					Обл.ЦветФона = ЦветаСтиля.ЦветМакетаБРОАвторасчет;
					Обл.Защита = Истина;
					Подсказки = ПодсказкиДляЯчеекСРасчетом.НайтиСтроки(Новый Структура("ИмяЯчейки", Стр.ЗависимоеЗначение));
					Если Подсказки.Количество() = 1 Тогда 
						Обл.Примечание.Текст = Подсказки[0].Подсказка;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(ЭтотОбъект, НаимРаздела);
	
	Если ИдЭлементаФормыРаздела = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементФормаРаздела = СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
	
	ЭлементФормаРаздела.Значение.Очистить();
	
	ЭлементФормаРаздела.Значение.Вывести(ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИдЭлементаФормыРаздела = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ИдЭлементаФормыРаздела) Тогда
		
		ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(ЭтотОбъект, ИмяТекРаздела);
		
	КонецЕсли;
	
	Если ИдЭлементаФормыРаздела = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементФормаРаздела = СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ЭлементФормаРаздела.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(ИмяПервойЯчейкиСтроки, ТабДок = Неопределено)
	
	ДобавитьДополнительнуюСтроку(ЭтотОбъект, ИмяПервойЯчейкиСтроки, ТабДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки, ТабДок = Неопределено)
	
	ДобавитьДополнительнуюСтроку(ЭтотОбъект, ИмяПервойЯчейкиСтроки, ТабДок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДополнительнуюСтроку(Форма, ИмяПервойЯчейкиСтроки, ТабДок = Неопределено)
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	Если ТабДок = Неопределено Тогда 
		ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	Иначе
		ТекТабличноеПоле = ТабДок;
	КонецЕсли;
	
	ПерваяЯчейкаСтроки = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяПервойЯчейкиСтроки) Тогда
		
		ПерваяЯчейкаСтроки = ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтроки);
		
	КонецЕсли;
	
	Если (ПерваяЯчейкаСтроки = Неопределено) ИЛИ (СтрНайти(ИмяПервойЯчейкиСтроки, "_") = 0) Тогда
		#Если Клиент Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
															|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'"));
		#Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
														|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = 0;
	ИмяПервойЯчейкиСтрокиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПервойЯчейкиСтроки, ИндексСтроки);
	
	КолСтрок = ИндексСтроки;
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейкиСтроки;
	Пока ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1) <> Неопределено Цикл
		ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1;
		КолСтрок = КолСтрок + 1;
		КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	КонецЦикла;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Если ТабДок = Неопределено Тогда 
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	СтруктураДанныхОтчета  = Форма["СтруктураДанныхОтчета"];
	СтруктураОписанийЯчеек = Форма["СтруктураОписанийЯчеек"];
	
	ИмяПервойЯчейкиНовойОбл = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1;
	
	ЭтоПерваяРедактируемаяЯчейка = Истина;
	Для НомСтрокиНовОбл = НомерВерхЯчейкиНовойОбласти По НомерНижнЯчейкиНовойОбласти Цикл
		Для НомКолонкиНовОбл = 1 По ТекТабличноеПоле.ШиринаТаблицы Цикл
			
			ТекОбласть = ТекТабличноеПоле.Область(НомСтрокиНовОбл, НомКолонкиНовОбл, НомСтрокиНовОбл, НомКолонкиНовОбл);
			ИмяОбласти = ТекОбласть.Имя;
			Если СтрНайти(ИмяОбласти, "_") > 0 Тогда
				Если ТекОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
				Если ЭтоПерваяРедактируемаяЯчейка Тогда
					ИмяПервойЯчейкиНовойОбл = ИмяОбласти;
					ЭтоПерваяРедактируемаяЯчейка = Ложь;
				КонецЕсли;
				ЗначениеДанныхОтчета = Неопределено;
				Если СтруктураДанныхОтчета.Свойство(ИмяОбласти, ЗначениеДанныхОтчета) Тогда
					ТекОбласть.Значение = ЗначениеДанныхОтчета;
					ЗначениеФорматаОбласти = Неопределено;
					Если СтруктураДанныхОтчета.Свойство("ЧН" + ИмяОбласти, ЗначениеФорматаОбласти) Тогда
						ТекОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекОбласть.Формат, ЗначениеФорматаОбласти);
					КонецЕсли;
				Иначе
					ИмяПоказателяЯчейки = Лев(ИмяОбласти, СтрНайти(ИмяОбласти, "_") - 1);
					ЗначениеПоУмолчанию = Неопределено;
					Если СтруктураОписанийЯчеек.Свойство(ИмяПоказателяЯчейки) Тогда 
						ДанныеЯчейки = СтруктураОписанийЯчеек[ИмяПоказателяЯчейки].Свойство("default", ЗначениеПоУмолчанию);
					КонецЕсли;
					
					ТекОбласть.Значение = ТекОбласть.ТипЗначения.ПривестиЗначение(ЗначениеПоУмолчанию);
					СтруктураДанныхОтчета.Вставить(ИмяОбласти, ТекОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ИмяОпцийСтроки = Лев(ИмяПервойЯчейкиСтрокиБезИндекса, СтрНайти(ИмяПервойЯчейкиСтрокиБезИндекса, "c"));
	СтруктураОпцийСтроки = Неопределено;
	Если СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
		УстановитьПредставлениеКлючевыхЯчеек(Форма, СтруктураОпцийСтроки, КолСтрок + 1, ТабДок);
	КонецЕсли;
	
	Если ТабДок = Неопределено Тогда 
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяПервойЯчейкиНовойОбл];
		Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	ВставляемаяОбластьТаблДок = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерВерхЯчейкиОбласти, );
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для каждого ТекОбласть Из ВставляемаяОбластьТаблДок.Области Цикл
		
		ИмяОбласти = ТекОбласть.Имя;
		ПозРазделителя = СтрНайти(ИмяОбласти, "_");
		
		Если ПозРазделителя > 0 Тогда
			
			ИмяЯчейкиОбластиБезИндекса = Лев(ИмяОбласти, ПозРазделителя - 1);
			ИндексСтроки = Число(СтрЗаменить(ИмяОбласти, ИмяЯчейкиОбластиБезИндекса + "_", ""));
			НовоеИмяОбласти = ИмяЯчейкиОбластиБезИндекса + "_" + Формат(ИндексСтроки + 1, "ЧГ=0");
			
			Если ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента") Тогда
				Продолжить;
			Иначе
				ОбластьЯчейкиНовойСтроки = ТекТабличноеПоле.Области[ИмяОбласти];
				Если ОбластьЯчейкиНовойСтроки.СодержитЗначение И НЕ ОбластьЯчейкиНовойСтроки.Защита Тогда
					Если ОбластьЯчейкиНовойСтроки.ТипЗначения.СодержитТип(Тип("Число")) Тогда
						ОбластьЯчейкиНовойСтроки.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьЯчейкиНовойСтроки.Формат, "ЧН=' '");
					КонецЕсли;
				КонецЕсли;
				ОбластьЯчейкиНовойСтроки.Имя = НовоеИмяОбласти;
				НомерВерхнейЯчейкиОбласти = НомерВерхЯчейкиОбласти + ТекОбласть.Верх - 1;
				ТекТабличноеПоле.Область(НомерВерхнейЯчейкиОбласти, ТекОбласть.Лево, НомерВерхнейЯчейкиОбласти, ТекОбласть.Лево).Имя = ИмяОбласти;
				
				Если ОбластьЯчейкиНовойСтроки.СодержитЗначение 
					И ОбластьЯчейкиНовойСтроки.Защита
					И РасчитываемыеЯчейкиМножественныхСтрок.НайтиСтроки(Новый Структура("ЗависимоеЗначение", ИмяЯчейкиОбластиБезИндекса)).Количество() > 0 Тогда 
					
					ТекТабличноеПоле.Область(НовоеИмяОбласти).Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки, ЗадатьВопрос = Истина)
	
	Если ЗадатьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуНаКлиентеЗавершение", ЭтотОбъект, ИмяПервойЯчейкиСтроки);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(ИмяПервойЯчейкиСтроки);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуНаКлиентеЗавершение(Ответ, ИмяПервойЯчейкиСтроки) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(ИмяПервойЯчейкиСтроки);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ИмяПервойЯчейкиСтроки)
	
	УдалитьДополнительнуюСтроку(ЭтотОбъект, ИмяПервойЯчейкиСтроки);
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ИмяПервойЯчейкиСтроки)
	
	УдалитьДополнительнуюСтроку(ЭтотОбъект, ИмяПервойЯчейкиСтроки);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, ИмяПервойЯчейкиСтроки) Экспорт
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НомерУдаляемойСтроки = 0;
	ИмяПервойЯчейкиСтрокиБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПервойЯчейкиСтроки, НомерУдаляемойСтроки);
	
	КолСтрокРаздела = НомерУдаляемойСтроки;
	КолСтрокСтр1 = Формат(КолСтрокРаздела + 1, "ЧГ=0");
	Пока ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиСтрокиБезИндекса + "_" + КолСтрокСтр1) <> Неопределено Цикл
		КолСтрокРаздела = КолСтрокРаздела + 1;
		КолСтрокСтр1 = Формат(КолСтрокРаздела + 1, "ЧГ=0");
	КонецЦикла;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиСтроки];
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	СтруктураДанныхОтчета  = Форма["СтруктураДанныхОтчета"];
	СтруктураОписанийЯчеек = Форма["СтруктураОписанийЯчеек"];
	
	МассивИменПоказателей = Новый Массив;
	
	Для НомСтроки = НомерВерхЯчейкиОбласти По НомерНижнЯчейкиОбласти Цикл
		Для НомКолонки = 2 По ТекТабличноеПоле.ШиринаТаблицы - 1 Цикл
			ТекОбласть = ТекТабличноеПоле.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ИмяТекОбласти = ТекОбласть.Имя;
			ПозРазделителя = СтрНайти(ИмяТекОбласти, "_");
			
			Если ПозРазделителя > 0 И НЕ ТекОбласть.Защита Тогда
				
				МассивИменПоказателей.Добавить(Лев(ИмяТекОбласти, ПозРазделителя - 1));
				
				Если КолСтрокРаздела = 1 Тогда // единственную строку раздела только очищаем
					
					ТекОбласть.Значение = ТекОбласть.ТипЗначения.ПривестиЗначение();
					СтруктураДанныхОтчета.Вставить(ИмяТекОбласти, ТекОбласть.Значение);
					СтруктураДанныхОтчета.Вставить("ПР" + ИмяТекОбласти, "");
					Если ТипЗнч(ТекОбласть.Значение) = Тип("Число") Тогда
						ФорматПредставленияНуля = "ЧН=' '";
						ТекОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекОбласть.Формат, ФорматПредставленияНуля);
						СтруктураДанныхОтчета.Вставить("ЧН" + ИмяТекОбласти, ФорматПредставленияНуля);
					КонецЕсли;
					
					ПараметрыОбласти = Неопределено;
					Если СтруктураОписанийЯчеек.Свойство(Лев(ИмяТекОбласти, ПозРазделителя - 1), ПараметрыОбласти) Тогда
						Если ПараметрыОбласти["inputType"] <> 0 Тогда
							ИмяОпцийСтроки = Неопределено;
							Если ПараметрыОбласти.Свойство("grv", ИмяОпцийСтроки) И ЗначениеЗаполнено(ИмяОпцийСтроки) Тогда
								СтруктураОпцийСтроки = Неопределено;
								Если СтруктураОписанийЯчеек.Свойство(ИмяОпцийСтроки, СтруктураОпцийСтроки) И ТипЗнч(СтруктураОпцийСтроки) = Тип("Структура") Тогда
									УстановитьПредставлениеКлючевыхЯчеек(Форма, СтруктураОпцийСтроки, 1);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если КолСтрокРаздела > 1 Тогда
		Форма.СпециальногоУдаленияСтроки(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, НомерУдаляемойСтроки, КолСтрокРаздела);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		Для НомерСтроки = НомерУдаляемойСтроки По КолСтрокРаздела Цикл
			Для каждого ИмяПоказателяБезИндекса Из МассивИменПоказателей Цикл
				
				НовоеИмя  = ИмяПоказателяБезИндекса + "_" + Формат(НомерСтроки, "ЧГ=0");
				СтароеИмя = ИмяПоказателяБезИндекса + "_" + Формат(НомерСтроки + 1, "ЧГ=0");
				
				Если СтруктураДанныхОтчета.Свойство(НовоеИмя) Тогда
					СтруктураДанныхОтчета.Удалить(НовоеИмя);
					Если СтруктураДанныхОтчета.Свойство("ЧН" + НовоеИмя) Тогда
						СтруктураДанныхОтчета.Удалить("ЧН" + НовоеИмя);
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеПоказателя = Неопределено;
				Если СтруктураДанныхОтчета.Свойство(СтароеИмя, ЗначениеПоказателя) Тогда
					СтруктураДанныхОтчета.Удалить(СтароеИмя);
					СтруктураДанныхОтчета.Вставить(НовоеИмя, ЗначениеПоказателя);
					ЗначениеФормата = Неопределено;
					Если СтруктураДанныхОтчета.Свойство("ЧН" + СтароеИмя, ЗначениеФормата) Тогда
						СтруктураДанныхОтчета.Удалить("ЧН" + СтароеИмя);
						СтруктураДанныхОтчета.Вставить("ЧН" + НовоеИмя, ЗначениеФормата);
					КонецЕсли;
					ЗначениеПредставления = Неопределено;
					Если СтруктураДанныхОтчета.Свойство("ПР" + СтароеИмя, ЗначениеПредставления) Тогда
						СтруктураДанныхОтчета.Удалить("ПР" + СтароеИмя);
						СтруктураДанныхОтчета.Вставить("ПР" + НовоеИмя, ЗначениеПредставления);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СтрНомТекущейСтроки  = Формат(Макс(1, Мин(КолСтрокРаздела - 1, НомерУдаляемойСтроки)), "ЧГ=");
	Если МассивИменПоказателей.Количество() > 0 Тогда
		ИмяТекущейОбласти = МассивИменПоказателей[0] + "_" + СтрНомТекущейСтроки;
	Иначе
		ИмяТекущейОбласти = ИмяПервойЯчейкиСтрокиБезИндекса + "_" + СтрНомТекущейСтроки;
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	ПересчетИтоговМножественныхСтрок(Форма);
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, НомерУдаляемойСтроки, КолСтрокРаздела) Экспорт
	
	МассивИменОбластей = Новый Массив;
	УдаляемаяОбластьТаблДок = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Для каждого ИменованнаяОбласть Из УдаляемаяОбластьТаблДок.Области Цикл
		Если ТипЗнч(ИменованнаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		МассивИменОбластей.Добавить(Лев(ИменованнаяОбласть.Имя, СтрНайти(ИменованнаяОбласть.Имя, "_") - 1));
	КонецЦикла;
	
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомерСтроки = НомерУдаляемойСтроки + 1 По КолСтрокРаздела Цикл
		Для каждого ИмяОбластиБезИндекса Из МассивИменОбластей Цикл
			
			СтароеИмяЯчейки = ИмяОбластиБезИндекса + "_" + Формат(НомерСтроки, "ЧГ=0");
			НовоеИмяЯчейки = ИмяОбластиБезИндекса + "_" + Формат(НомерСтроки - 1, "ЧГ=0");
			
			НайденнаяОбласть = ТекТабличноеПоле.Области.Найти(СтароеИмяЯчейки);
			Если НайденнаяОбласть <> Неопределено Тогда
				НайденнаяОбласть.Имя = НовоеИмяЯчейки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПервойЯчейкиОбласти(Форма, ОбластьДокумента)
	
	Если ТипЗнч(ОбластьДокумента) = Тип("РисунокТабличногоДокумента") Тогда
		ИмяБазовойОбласти = ОбластьДокумента.Имя;
	Иначе
		Если ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			// Передаем имя в 2 колонке верхней ячейки выбранной области
			ИмяБазовойОбласти = Форма.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		ИначеЕсли ОбластьДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ИмяБазовойОбласти = Форма.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ИмяБазовойОбласти, "ДСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "УСПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4);
	ИначеЕсли СтрНайти(ИмяБазовойОбласти, "ДЗПМs")
		  ИЛИ СтрНайти(ИмяБазовойОбласти, "ДГПМs") Тогда
		ИмяПервойЯчейкиСтрокиОбласти = Сред(ИмяБазовойОбласти, 4) + "_1";
	Иначе
		ИмяПервойЯчейкиСтрокиОбласти = Форма.ТабличныйДокумент.Область(ОбластьДокумента.Верх, 2, ОбластьДокумента.Верх, 2).Имя;
	КонецЕсли;
	
	Возврат ИмяПервойЯчейкиСтрокиОбласти;
	
КонецФункции

&НаКлиенте
Асинх Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ждать ПредупреждениеАсинх(НСтр("ru='Внимание! Распечатанная форма не предназначена" + Символы.ПС
		+ "для предоставления в органы государственной статистики" + Символы.ПС
		+ "(можно предоставлять только в электронном виде).'"));
		
	Печать(ДополнительныеПараметры.Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
				|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	СоответствиеПоказателей = СоответствиеПоказателейТитульногоИПодписей();
	
	СтруктураПараметровОбщаяИнформация = Неопределено;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если СтрокаУровня1.ИмяСтраницы = "ОбщаяИнформация" Тогда
			СтруктураПараметров.НаименованиеЛиста = "Титульный";
			СтруктураПараметровОбщаяИнформация = СтруктураПараметров;
			ПечФорма = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ТитульныйПодписи");
			ПечФормаТитульный = ПечФорма.ПолучитьОбласть("Титульный");
			Для каждого ТекОбласть Из ПечФормаТитульный.Области Цикл
				Если ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбласть.СодержитЗначение Тогда
					ТекОбласть.Значение = СоответствиеПоказателей[ТекОбласть.Имя];
				КонецЕсли;
			КонецЦикла;
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля, ПечФормаТитульный);
			Продолжить;
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
		
	КонецЦикла;
	
	Если СтруктураПараметровОбщаяИнформация <> Неопределено Тогда
		СтруктураПараметровОбщаяИнформация.НаименованиеЛиста = "Подписи";
		ПечФорма = Отчеты[Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ТитульныйПодписи");
		ПечФормаПодписи = ПечФорма.ПолучитьОбласть("Подписи");
		Для каждого ТекОбласть Из ПечФормаПодписи.Области Цикл
			Если ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбласть.СодержитЗначение Тогда
				ТекОбласть.Значение = СоответствиеПоказателей[ТекОбласть.Имя];
			КонецЕсли;
		КонецЦикла;
		ВывестиНаПечатьЛист(СтруктураПараметровОбщаяИнформация, ОбщиеРеквизитыРазделов, СтрПоля, ПечФормаПодписи);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено, ПечФорма = Неопределено)
	
	Перем ИмяСтраницы;
	Перем Ориентация;
	
	Парам1.Свойство("ИмяСтраницы",     ИмяСтраницы);
	Парам1.Свойство("ОриентацияЛиста", Ориентация);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ПечатнаяФорма.ПолеСверху = 5;
	ПечатнаяФорма.ПолеСправа = 5;
	ПечатнаяФорма.ПолеСнизу  = 5;
	ПечатнаяФорма.ПолеСлева  = 5;
	
	Если ПечФорма = Неопределено Тогда
		
		ИдЭлементаФормыРаздела = ИдентификаторЭлементаСпискаФормПоПредставлению(ЭтотОбъект, ИмяСтраницы);
		Если ИдЭлементаФормыРаздела = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭлементФормыРаздела   = СтруктураРеквизитовФормы.СписокФормРазделов.НайтиПоИдентификатору(ИдЭлементаФормыРаздела);
		ИсходнаяПечатнаяФорма = ЭлементФормыРаздела.Значение;
		ЕстьМногострочность   = ЭлементФормыРаздела.Пометка;
		
		Шапка = ИсходнаяПечатнаяФорма.ПолучитьОбласть(1, , 5);
		ШапкаНомера = ИсходнаяПечатнаяФорма.ПолучитьОбласть(5, , 5);
		
		ПечатнаяФорма.Вывести(Шапка);
		
		Для НомСтроки = 6 По ИсходнаяПечатнаяФорма.ВысотаТаблицы Цикл
			
			ВыводимаяСтрока = ИсходнаяПечатнаяФорма.ПолучитьОбласть(НомСтроки, , НомСтроки);
			
			ЭтоПерваяСтрокаМнЧасти = Ложь;
			Если ЕстьМногострочность Тогда
				Для каждого ОбластьСтроки Из ВыводимаяСтрока.Области Цикл
					Если Лев(ОбластьСтроки.Имя, 3) = "ОДС" ИЛИ Лев(ОбластьСтроки.Имя, 3) = "ОДЗ" Тогда
						ЭтоПерваяСтрокаМнЧасти = Истина;
						Прервать;
					ИначеЕсли Лев(ОбластьСтроки.Имя, 3) = "ОУС" Тогда
						ОбластьСтроки.Очистить();
						ОбластьСтроки.Примечание.Текст = "";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭтоПерваяСтрокаМнЧасти Тогда
				Продолжить;
			КонецЕсли;
			
			ВыводимаяСтрока.Область().АвтоОтметкаНезаполненного = Ложь;
			
			Если ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, ВыводимаяСтрока, Ложь) Тогда
				
				ПечатнаяФорма.Вывести(ВыводимаяСтрока);
				
			Иначе
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ПечатнаяФорма);
				ТабличныйДокумент.Область(1, , ТабличныйДокумент.ВысотаТаблицы).Имя = "ОсновнаяЧасть";
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ПечатнаяФорма.Очистить();
				ОбластьВывода = ПечатнаяФорма.Вывести(ШапкаНомера);
				ОбластьВывода.Очистить(Истина, Истина, Истина);
				ПечатнаяФорма.Вывести(ШапкаНомера);
				ПечатнаяФорма.Вывести(ВыводимаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПечатнаяФорма.Вывести(ПечФорма);
		
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечатнаяФорма);
	ТабличныйДокумент.Область(1, , ТабличныйДокумент.ВысотаТаблицы).Имя = "ОсновнаяЧасть";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, СтрПоля);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция СоответствиеПоказателейТитульногоИПодписей()
	
	Перем ЗначениеСвойства;
	
	СоответствиеПоказателей = Новый Соответствие;
	
	ПериодФормы = "";
	СоответствиеПоказателей.Вставить("ПериодичностьОтчета", СтрПериодичностьФормы(СтруктураАтрибутовОтчета["idp"], ПериодФормы));
	СоответствиеПоказателей.Вставить("НарастающимИтогом", ?(СтруктураРеквизитовФормы.мНарастающимИтогом И ПериодФормы <> "год", "(нарастающим итогом)", ?(ЗначениеЗаполнено(ПериодФормы), "(" + ПериодФормы + ")", "")));
	СоответствиеПоказателей.Вставить("ПериодОтчета", " за " + СтруктураРеквизитовФормы.СтрПериодОтчета);
	СоответствиеПоказателей.Вставить("ИндексОтчета", СтруктураРеквизитовФормы.мИндексФормыОтчета);
	СоответствиеПоказателей.Вставить("НазвОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	СоответствиеПоказателей.Вставить("КодОКУД", Прав("0000000" + СтруктураАтрибутовОтчета["OKUD"], 7));
	
	СтруктураДанныхОтчета.Свойство(СтруктураАтрибутовОтчета["obj"], ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргКодОКПО", ЗначениеСвойства);
	
	СтруктураДанныхОтчета.Свойство("name", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргНазв", ЗначениеСвойства);
	
	СтруктураДанныхОтчета.Свойство("org_adress", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргАдрес", ЗначениеСвойства);
	Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда 
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР");
		СоответствиеПоказателей.Вставить("ОргАдрес", ОргСведения.АдрЮР);
	КонецЕсли;
	
	СтруктураДанныхОтчета.Свойство("leader_fio", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргРуководитель", ЗначениеСвойства);
	
	СтруктураДанныхОтчета.Свойство("responsible_fio", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргИсполнитель", ЗначениеСвойства);
	
	СтруктураДанныхОтчета.Свойство("responsible_post", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргДолжностьИсп", ЗначениеСвойства);
	
	СтруктураДанныхОтчета.Свойство("phone", ЗначениеСвойства);
	СоответствиеПоказателей.Вставить("ОргТелефонИсп", ЗначениеСвойства);
	
	СоответствиеПоказателей.Вставить("ДатаСоставленияОтчета", Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'"""));
	
	Возврат СоответствиеПоказателей;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрПериодичностьФормы(Периодичность, Период)
	
	Если Периодичность = 1 Тогда       // годовая
		
		Период = "год";
		Возврат "Годовая";
		
	ИначеЕсли Периодичность = 2 Тогда  // полугодовая
		
		Период = "полугодие";
		Возврат "Полугодовая";
		
	ИначеЕсли Периодичность = 4 Тогда  // квартальная
		
		Период = "квартал";
		Возврат "Квартальная";
		
	ИначеЕсли Периодичность = 12 Тогда // месячная
		
		Период = "месяц";
		Возврат "Месячная";
		
	ИначеЕсли Периодичность = 36 Тогда // декадная
		
		Период = "декада";
		Возврат "Декадная";
		
	ИначеЕсли Периодичность = 52 Или Периодичность = 56 Тогда // недельная
		
		Период = "неделя";
		Возврат "Недельная";
		
	КонецЕсли;
	
	Период = "";
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция РазделПоИмени(ИмяЯчейки)
	Имя = СтрЗаменить(ИмяЯчейки, "ПМs", "");
	Имя = СтрЗаменить(Имя, "ПОs", "");
	Возврат "Раздел" + Лев(Имя, СтрНайти(Имя, "r") - 1);
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	Если Неопределено = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел) Тогда 
		Ячейка.Раздел = РазделПоИмени(Ячейка.ИмяЯчейки);
		Если Неопределено = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Ячейка.Раздел <> Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим Тогда 
		Разделы = Элементы.РазделыОтчета;
		Разделы.ТекущаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел).ПолучитьИдентификатор();
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(
			Разделы.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, 
			Разделы.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, 
			Разделы.ТекущиеДанные.ИдЭлементаФормыРаздела);
	КонецЕсли;
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Для каждого ЭлементФормаРаздела Из СтруктураРеквизитовФормы.СписокФормРазделов Цикл
		
		ИмяРаздела = ЭлементФормаРаздела.Представление;
		ТабДокументРаздела = ЭлементФормаРаздела.Значение;
		
		Если ИмяРаздела = "ОбщаяИнформация" Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ТабДокументРаздела);
		
		ОчиститьТабличноеПолеНаСервере(ИмяРаздела);
		
	КонецЦикла;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПриОткрытииАсинх()
	Если ГодОтчетаНеВСпискеШаблона Тогда
		ПериодГод = Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ=");
		Если Ждать ВопросАсинх("Данный шаблон не применим для " + ПериодГод + " года. Продолжить?", РежимДиалогаВопрос.ДаНет)
			<> КодВозвратаДиалога.Да Тогда 
			
			Модифицированность = Ложь;
			Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
	Если СтруктураИнформацияСправочников.ЗагрузитьСправочники
		И СтруктураИнформацияСправочников.ШаблонДоступен
		И Не СтруктураИнформацияСправочников.СправочникиЗагружены Тогда 
		
		НачатьВыполнениеЗагрузкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеЗагрузкиНаСервере()
	Попытка
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		ДанныеШаблонаОтчета = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.мАдресДанныхШаблона);
		
		Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
			"РегламентированнаяОтчетностьФСГС.ЗагрузитьСправочникиШаблонаВРегистр",
			СтрРазделить(ИмяФормы, ".")[1],
			ЭтотОбъект["СтруктураИнформацияСправочников"]["ИсточникОтчета"],
			ДанныеШаблонаОтчета.Шаблон.Получить());
			
		Если Результат.Статус = "Выполнено" Тогда
			ОбработкаЗагрузкиСправочников();
		ИначеЕсли Результат.Статус = "Выполняется" Тогда 
			СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
			СтруктураИнформацияСправочников["ИдентификаторЗаданияЗагрузкиСправочников"] = Результат.ИдентификаторЗадания;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ОбработкаЗагрузкиСправочников()
	СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.ИсточникОтчета КАК ИсточникОтчета,
	|	Регистр.Справочник КАК Справочник
	|ИЗ
	|	РегистрСведений." + СтруктураИнформацияСправочников["РегистрИмя"] + " КАК Регистр
	|ГДЕ
	|	Регистр.ИсточникОтчета = &ИсточникОтчета";
	
	Запрос.УстановитьПараметр("ИсточникОтчета", СтруктураИнформацияСправочников["ИсточникОтчета"]);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Элемент = НеЗагруженныеСправочники.НайтиПоЗначению(Выборка.Справочник);
		Если ТипЗнч(Элемент) = Тип("ЭлементСпискаЗначений") Тогда 
			НеЗагруженныеСправочники.Удалить(Элемент);
		КонецЕсли;
		
		СправочникиВРегистре = ЭтотОбъект["СтруктураИнформацияСправочников"]["СправочникиВРегистре"];
		Элемент = СправочникиВРегистре.НайтиПоЗначению(Выборка.Справочник);
		Если Элемент = Неопределено Тогда 
			СправочникиВРегистре.Добавить(Выборка.Справочник);
		КонецЕсли;
	КонецЦикла;
	
	Если НеЗагруженныеСправочники.Количество() = 0 Тогда 
		СтруктураИнформацияСправочников = ЭтотОбъект["СтруктураИнформацияСправочников"];
		СтруктураИнформацияСправочников["ИдентификаторЗаданияЗагрузкиСправочников"] = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПоляОбособленныхПодразделений(Форма, Область, СтандартнаяОбработка, ИмяТД = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	Если Область.Имя = "ОбособленноеПодразделение" И ЗначениеЗаполнено(Форма.ИмяСправочникаОбособленныхПодразделений) И Область.Защита = Ложь Тогда
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОбработкаВыбораПоляОбособленныхПодразделений(Форма, СтандартнаяОбработка);
		Если СтандартнаяОбработка <> Ложь Тогда 
			СтандартнаяОбработка = Ложь;
			Отбор = Новый Структура("Владелец", Форма.СтруктураРеквизитовФормы.Организация);
			Если ЗначениеЗаполнено(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения) Тогда
				Отбор.Вставить(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения, Истина);
			КонецЕсли;
			ПараметрыВыбора = Новый Структура("Отбор, РежимВыбора", Отбор, Истина);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораОбособленногоПодразделения", ЭтотОбъект, Новый Структура("Форма", Форма));
			ОткрытьФорму("Справочник." + Форма.ИмяСправочникаОбособленныхПодразделений + ".ФормаВыбора", ПараметрыВыбора, Форма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОбособленногоПодразделения(Ответ, ДопПараметры) Экспорт 
	Если Ответ <> Неопределено Тогда 
		Форма = ДопПараметры.Форма;
		Форма.Модифицированность = Истина;
		Форма.ОбособленноеПодразделение = Ответ;
		
		Если ЗначениеЗаполнено(Форма.ОбособленноеПодразделение) Тогда 
			РегламентированнаяОтчетностьВызовСервера.ОпределитьНаличиеКодаПодразделенияВСправочникеОрганыФСГС(Форма.ОбособленноеПодразделение);
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено Тогда 
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОбособленноеПодразделение.Значение = Ответ;
		ИначеЕсли Форма.Элементы.Найти("ТабличныйДокумент") <> Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = Ответ;
		КонецЕсли;
		Форма.ОбособленноеПодразделениеПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборПродолжение(Элемент, Область, ОбластьМодифицирована, СтандартнаяОбработка)
	
	Если Область.Имя = "org_adress" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		АдресВФорматеДляВыгрузки = Неопределено;
		СтруктураДанныхОтчета.Свойство("ПРorg_adress", АдресВФорматеДляВыгрузки);
		АдресВФорматеДляВыгрузки = ?(ЗначениеЗаполнено(АдресВФорматеДляВыгрузки), АдресВФорматеДляВыгрузки, "");
		
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдресВФорматеДляВыгрузки);
		
		Если НЕ СтруктураАдреса = Неопределено Тогда
			
			ЗначенияПолей.Добавить(СтруктураАдреса.Индекс,          "Индекс");
			ЗначенияПолей.Добавить(СтруктураАдреса.Регион,          "Регион");
			ЗначенияПолей.Добавить(СтруктураАдреса.Район,           "Район");
			ЗначенияПолей.Добавить(СтруктураАдреса.Город,           "Город");
			ЗначенияПолей.Добавить(СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт");
			ЗначенияПолей.Добавить(СтруктураАдреса.Улица,           "Улица");
			ЗначенияПолей.Добавить(СтруктураАдреса.Дом,             "Дом");
			ЗначенияПолей.Добавить(СтруктураАдреса.Корпус,          "Корпус");
			ЗначенияПолей.Добавить(СтруктураАдреса.Квартира,        "Квартира");
			
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление",           РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдресВФорматеДляВыгрузки));
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтотОбъект;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СтандартнаяОбработкаВыбора = СтандартнаяОбработка;
	
	Если НЕ СтандартнаяОбработка И ОбластьМодифицирована Тогда
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, Область)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        "");
		РоссийскийАдрес.Вставить("Регион",          "");
		РоссийскийАдрес.Вставить("Район",           "");
		РоссийскийАдрес.Вставить("Город",           "");
		РоссийскийАдрес.Вставить("НаселенныйПункт", "");
		РоссийскийАдрес.Вставить("Улица",           "");
		РоссийскийАдрес.Вставить("Дом",             "");
		РоссийскийАдрес.Вставить("Корпус",          "");
		РоссийскийАдрес.Вставить("Квартира",        "");
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес);
		
		АдресВФорматеДляВыгрузки = "643,"
		+ РоссийскийАдрес["Индекс"] + ","
		+ РоссийскийАдрес["Регион"] + ","
		+ РоссийскийАдрес["Район"] + ","
		+ РоссийскийАдрес["Город"] + ","
		+ РоссийскийАдрес["НаселенныйПункт"] + ","
		+ РоссийскийАдрес["Улица"] + ","
		+ РоссийскийАдрес["Дом"] + ","
		+ РоссийскийАдрес["Корпус"] + ","
		+ РоссийскийАдрес["Квартира"];
		
		Если АдресВФорматеДляВыгрузки = "643,,,,,,,,," Тогда
			АдресВФорматеДляВыгрузки = "";
		КонецЕсли;
		
		Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдресВФорматеДляВыгрузки);
		СтруктураДанныхОтчета.Вставить("ПРorg_adress", АдресВФорматеДляВыгрузки);
		СтруктураДанныхОтчета.Вставить("org_adress", Область.Значение);
		ОбластьМодифицирована = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СледующаяОбластьДляПерехода(ТекОбласть)
	
	Если СтруктураРеквизитовФормы.СтандартнаяОбработкаВыбора = Истина Тогда
		
		Возврат ТекОбласть;
		
	КонецЕсли;
	
	НачальныйНомерКолонки = ТекОбласть.Лево + 1;
	
	Для НомерСтроки = ТекОбласть.Верх По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Для НомерКолонки = НачальныйНомерКолонки По ТабличныйДокумент.ШиринаТаблицы - 1 Цикл
			
			СледОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Если Лев(СледОбласть.Имя, 1) = "R" ИЛИ ТипЗнч(СледОбласть) = Тип("РисунокТабличногоДокумента") ИЛИ СледОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СледОбласть.Защита Тогда
				Возврат СледОбласть;
			КонецЕсли;
			
		КонецЦикла;
		
		НачальныйНомерКолонки = 2;
		
	КонецЦикла;
	
	Возврат ТекОбласть;
	
КонецФункции

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, ТипВвода, ИмяСправочникаВвода, ДопПараметрВвода, СтандартнаяОбработка)
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	ИндПоказателя = 0;
	ИмяПоказателяБезИндекса = ИмяПоказателяБезИндексаИСоставляющиеАдреса(Область.Имя, ИндПоказателя);
	
	ИмяСправочника  = "";
	ИмяПриложения   = "";
	ЗначениеФильтра = "";
	
	НомерРаздела = 0;
	НомерСтроки  = 0;
	КодСтолбца   = "";
	
	Если ТипВвода = 1 Тогда
		ИмяСправочника = ИмяСправочникаВвода;
	ИначеЕсли ТипВвода = 2 Тогда
		
		СтрДиапазон = СокрЛП(ДопПараметрВвода);
		ПозРазд = СтрНайти(СтрДиапазон, "-");
		Если ПозРазд > 0 Тогда
			НачДиапазона = Число(?(ПустаяСтрока(Лев(СтрДиапазон, ПозРазд - 1)), "0", Лев(СтрДиапазон, ПозРазд - 1)));
			КонДиапазона = Число(?(ПустаяСтрока(Сред(СтрДиапазон, ПозРазд + 1)), "0", Сред(СтрДиапазон, ПозРазд + 1)));
			ЗначениеВвода = Область.Значение;
			Если ТипЗнч(ЗначениеВвода) = Тип("Число") Тогда
				СтандартнаяОбработка = Ложь;
				ДополнительныеПараметры = Новый Структура("Элемент, Область, СтрДиапазон, НачДиапазона, КонДиапазона", Элемент, Область, СтрДиапазон, НачДиапазона, КонДиапазона);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводЧисла(ОписаниеОповещения, ЗначениеВвода, "Введите число из диапазона " + СтрДиапазон
					, Область.ТипЗначения.КвалификаторыЧисла.Разрядность
					, Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	ИначеЕсли ТипВвода = 3 Тогда
		СтрСписокВвода = СокрЛП(ДопПараметрВвода);
		МассивСтрЗначений = СтрРазделить(СтрСписокВвода, ",");
		СписокВвода = Новый СписокЗначений;
		Для Инд = 0 По МассивСтрЗначений.ВГраница() Цикл
			ЗначениеЭлемента = Число(?(ПустаяСтрока(МассивСтрЗначений[Инд]), "0", МассивСтрЗначений[Инд]));
			СписокВвода.Добавить(ЗначениеЭлемента, МассивСтрЗначений[Инд]);
		КонецЦикла;
		Если СписокВвода.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВводЗначенияИзСписка(СписокВвода, Область, Элемент);
		КонецЕсли;
		Возврат;
	ИначеЕсли ТипВвода = 4 Тогда
		ИмяСправочника = ИмяСправочникаВвода;
		ИмяПриложения = ДопПараметрВвода;
	ИначеЕсли ТипВвода = 5 Тогда
		ИмяСправочника = ИмяСправочникаВвода;
		
		ПозАдреса = СтрНайти(ДопПараметрВвода, "#");
		Если ПозАдреса > 0 Тогда
			ПолеФильтра     = Лев(ДопПараметрВвода, ПозАдреса - 1);
			АдресИзСсылки   = Сред(ДопПараметрВвода, ПозАдреса + 1);
			ЗначениеОбласти = ЗначениеОбластиПоАдресуИзСсылки(ЭтотОбъект, АдресИзСсылки, ИндПоказателя, , НомерРаздела, НомерСтроки, КодСтолбца);
			ЗначениеФильтра = ПолеФильтра + ЗначениеОбласти;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяСправочника) Тогда
		Возврат;
	КонецЕсли;
	
	СправочникиВРегистре = ЭтотОбъект["СтруктураИнформацияСправочников"]["СправочникиВРегистре"];
	Если СправочникиВРегистре.НайтиПоЗначению(ИмяСправочникаВвода) = Неопределено Тогда 
		ВвестиПоказательПродолжение(Элемент, Область, ТипВвода, ИмяСправочникаВвода, ДопПараметрВвода, СтандартнаяОбработка,
									ИндПоказателя, ИмяПоказателяБезИндекса, ИмяСправочника, ИмяПриложения, ЗначениеФильтра, НомерРаздела, НомерСтроки, КодСтолбца);
	Иначе
		Разделение = СтрРазделить(ЗначениеФильтра, "=");
		ЗначениеФильтра = Разделение[Разделение.ВГраница()];
		СтандартнаяОбработка = Ложь;
		СтруктураДляОтбора = Новый Структура;
		СтруктураДляОтбора.Вставить("ИсточникОтчета", ЭтотОбъект.СтруктураИнформацияСправочников.ИсточникОтчета);
		СтруктураДляОтбора.Вставить("Справочник", ?(ЗначениеЗаполнено(ИмяПриложения), ИмяПриложения, ИмяСправочника));
		СтруктураДляОтбора.Вставить("Код", Область.Значение);
		СтруктураДляОтбора.Вставить("Фильтр", ЗначениеФильтра);
		
		ИмяФормыВыбора = "РегистрСведений."+ ЭтотОбъект.СтруктураИнформацияСправочников.РегистрИмя + ".Форма.ФормаВыбора";
		ДополнительныеПараметры = Новый Структура("Область, ТаблицаВыбора, Элемент", Область, Неопределено, Элемент);
		ОО = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыВыбора, Новый Структура("СтруктураДляОтбора", СтруктураДляОтбора), ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательПродолжение(Элемент, Область, ТипВвода, ИмяСправочникаВвода, ДопПараметрВвода, СтандартнаяОбработка,
										ИндПоказателя, ИмяПоказателяБезИндекса, ИмяСправочника, ИмяПриложения, ЗначениеФильтра, НомерРаздела, НомерСтроки, КодСтолбца)
	
	ФормаВыбора = ПолучитьФорму(СтрЗаменить(ИмяФормы, "ФормаОтчета", "ВыборЗначенияИзТаблицы"));
	
	ТаблицаВыбора = ФормаВыбора.ТаблицаЗначений;
	ТаблицаВыбора.Очистить();
	
	СтрокиСправочников = ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", ИмяСправочника));
	Если СтрокиСправочников.Количество() = 0 ИЛИ СтрокиСправочников[0].Пустой Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаЭлементовСправочника = СтрокиСправочников[0].ТаблицаЭлементовСправочника;
	
	ЗаголовокФормыВыбора = СокрЛП(?(Лев(СтрокиСправочников[0].Наименование, 1) = ".", Сред(СтрокиСправочников[0].Наименование, 2), СтрокиСправочников[0].Наименование));
	ЗаголовокФормыВыбора = СтрЗаменить(Врег(Лев(ЗаголовокФормыВыбора, 1)) + НРег(Сред(ЗаголовокФормыВыбора, 2)), "()", "");
	
	ФормаВыбора.Заголовок = СокрЛП(СтрЗаменить(ЗаголовокФормыВыбора, "  ", " "));
	
	ТаблицаЭлементовПриложения = Неопределено;
	Если ЗначениеЗаполнено(ИмяПриложения) Тогда
		СтрокиПриложений = ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", ИмяПриложения));
		Если СтрокиПриложений.Количество() > 0 И СтрокиПриложений[0].ИдентификаторРодителя = ИмяСправочника Тогда
			ТаблицаЭлементовПриложения = СтрокиПриложений[0].ТаблицаЭлементовСправочника;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеФильтраУстановлено = ЗначениеЗаполнено(ЗначениеФильтра);
	КоличествоПолейКлюча = 0;
	Если ЗначениеФильтраУстановлено Тогда
		КоличествоПолейКлюча = СтрЧислоВхождений(ТаблицаЭлементовСправочника[0].СоставнойКлюч, "=");
	КонецЕсли;
	
	Если ТаблицаЭлементовПриложения = Неопределено И КоличествоПолейКлюча = 0 Тогда
		КопироватьДанныеФормы(ТаблицаЭлементовСправочника, ТаблицаВыбора);
	ИначеЕсли КоличествоПолейКлюча = 1 Тогда
		ТаблицаЭлементовСправочникаОтбор = ТаблицаЭлементовСправочника.НайтиСтроки(Новый Структура("СоставнойКлюч", ЗначениеФильтра));
		Для каждого ЭлементСправочника Из ТаблицаЭлементовСправочникаОтбор Цикл
			НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
		КонецЦикла;
		Если ТаблицаВыбора.Количество() = 0 Тогда 
			НовоеЗначениеФильтра = Нрег(СтрРазделить(ЗначениеФильтра, "=")[0]) + "=" +  СтрРазделить(ЗначениеФильтра, "=")[1];
			ТаблицаЭлементовСправочникаОтбор = ТаблицаЭлементовСправочника.НайтиСтроки(Новый Структура("СоставнойКлюч", НовоеЗначениеФильтра));
			Для Каждого ЭлементСправочника Из ТаблицаЭлементовСправочникаОтбор Цикл
				НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТаблицаЭлементовПриложения <> Неопределено Тогда
		Для каждого ЭлементПриложения Из ТаблицаЭлементовПриложения Цикл
			ЭлементСправочника = ТаблицаЭлементовСправочника.НайтиПоИдентификатору(ЭлементПриложения.ИдСтрокиРодителя);
			Если ЭлементСправочника <> Неопределено Тогда
				НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ЭлементСправочника Из ТаблицаЭлементовСправочника Цикл
			Если ЗначениеФильтраУстановлено Тогда
				Если СтрНайти(ЭлементСправочника.СоставнойКлюч, ЗначениеФильтра) = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовыйЭлементСправочника = ТаблицаВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ЭлементСправочника);
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаВыбора.Количество() = 0 Тогда
		Если ТипВвода = 5 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Введите значение в строке %1%3 графы %2';
																													|en = 'Введите значение в строке %1%3 графы %2'")
				, НомерСтроки, КодСтолбца, ?(ИндПоказателя = 0, "", " (" + ИндПоказателя + ")")));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Таблица выбора """ + ЗаголовокФормыВыбора + """ пуста!'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтрокаПустоеЗначение = ТаблицаВыбора.Вставить(0);
	СтрокаПустоеЗначение.Код = "";
	СтрокаПустоеЗначение.Название = "< Пустое значение >";
	
	ЗначениеПоиска = ?(ТипЗнч(Область.Значение) = Тип("Число"), СокрЛП(Формат(Область.Значение, "ЧГ=;" + ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат))), СокрЛП(Область.Значение));
	
	ИсходнаяСтрока = ТаблицаВыбора.НайтиСтроки(Новый Структура("Код", ЗначениеПоиска));
	Если ИсходнаяСтрока.Количество() > 0 Тогда
		ФормаВыбора.ИдентификаторНайденнойСтроки = ИсходнаяСтрока[0].ПолучитьИдентификатор();
	Иначе
		ДлинаКода = Макс(СтрДлина(ЗначениеПоиска), СтрДлина(ТаблицаВыбора[ТаблицаВыбора.Количество() - 1].Код));
		ИсходнаяСтрока = ТаблицаВыбора.НайтиСтроки(Новый Структура("Код", Прав("0000000000" + ЗначениеПоиска, ДлинаКода)));
		Если ИсходнаяСтрока.Количество() > 0 Тогда
			ФормаВыбора.ИдентификаторНайденнойСтроки = ИсходнаяСтрока[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Область, ТаблицаВыбора, Элемент", Область, ТаблицаВыбора, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ТаблицаВыбора = ДополнительныеПараметры.ТаблицаВыбора;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора <> Неопределено И ТаблицаВыбора <> Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.НайтиПоИдентификатору(РезультатВыбора);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.ТипЗначения.СодержитТип(Тип("Число")) И РезультатВыбора.Код = "0" Тогда 
		Область.Формат = "ЧН=0";
		СтруктураДанныхОтчета.Вставить("ЧН" + Область.Имя, Область.Формат);
	ИначеЕсли Область.ТипЗначения.СодержитТип(Тип("Число")) И РезультатВыбора.Код = "" Тогда 
		Область.Формат = "ЧН=' '";
		СтруктураДанныхОтчета.Вставить("ЧН" + Область.Имя, Область.Формат);
	КонецЕсли;
	Область.Значение = Область.ТипЗначения.ПривестиЗначение(РезультатВыбора.Код);
	
	СтруктураДанныхОтчета.Вставить(Область.Имя, Область.Значение);
	СтруктураДанныхОтчета.Вставить("ПР" + Область.Имя, РезультатВыбора.Название);
	
	Если ТипЗнч(Область.Значение) = Тип("Число")
		Или (ТипЗнч(Область.Значение) = Тип("Строка") И РезультатВыбора.Код = "0" И Область.АвтоОтметкаНезаполненного = Истина)  Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(РезультатВыбора.Код), "ЧН=' '", "ЧН=0");
		Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, ФорматПредставленияНуля);
		СтруктураДанныхОтчета.Вставить("ЧН" + Область.Имя, ФорматПредставленияНуля);
		Если ПустаяСтрока(РезультатВыбора.Код) Тогда
			СтруктураРеквизитовФормы.УстанавливатьФорматОтображенияНуля = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокументВыборПродолжение(Элемент, Область, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательВводЧислаЗавершение(ЗначениеВвода, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	СтрДиапазон = ДополнительныеПараметры.СтрДиапазон;
	НачДиапазона = ДополнительныеПараметры.НачДиапазона;
	КонДиапазона = ДополнительныеПараметры.КонДиапазона;
	
	Если ЗначениеВвода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеВвода >= НачДиапазона И ЗначениеВвода <= КонДиапазона) ИЛИ (ЗначениеВвода = 0) Тогда
		Область.Значение = ЗначениеВвода;
		ТабличныйДокументВыборПродолжение(Элемент, Область, Истина, Ложь);
	Иначе
		ДополнительныеПараметры = Новый Структура("Элемент, Область, СтрДиапазон, НачДиапазона, КонДиапазона", Элемент, Область, СтрДиапазон, НачДиапазона, КонДиапазона);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводЧисла(ОписаниеОповещения, ЗначениеВвода, "Введите число из диапазона " + СтрДиапазон
					, Область.ТипЗначения.КвалификаторыЧисла.Разрядность
					, Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВводЗначенияИзСписка(СписокВвода, Область, Элемент)
	Если СписокВвода.НайтиПоЗначению(0) = Неопределено Тогда
		СписокВвода.Вставить(0, 0, "<Пустое значение>");
	КонецЕсли;
	ЗначениеПоиска = ?(ТипЗнч(Область.Значение) = Тип("Число"), Область.Значение, Число(?(ЗначениеЗаполнено(Область.Значение), Область.Значение, "0")));
	НайденныйЭлемент = СписокВвода.НайтиПоЗначению(ЗначениеПоиска);
	
	ЗначениеВыбора = Ждать ВыбратьИзСпискаАсинх(СписокВвода, Элемент.ТекущаяОбласть, НайденныйЭлемент);
	ОбластьМодифицирована = Ложь;
	Если ЗначениеВыбора <> Неопределено Тогда
		Область.Значение = ЗначениеВыбора.Значение;
		СтруктураДанныхОтчета.Вставить(Область.Имя, Область.Значение);
		Если ТипЗнч(Область.Значение) = Тип("Число") Тогда
			ВыбраноПустоеЗначение = (ЗначениеВыбора.Значение = 0 И ЗначениеВыбора.Представление = "<Пустое значение>");
			ФорматПредставленияНуля = ?(ВыбраноПустоеЗначение, "ЧН=' '", "ЧН=0");
			Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, ФорматПредставленияНуля);
			СтруктураДанныхОтчета.Вставить("ЧН" + Область.Имя, ФорматПредставленияНуля);
			Если ВыбраноПустоеЗначение Тогда
				СтруктураРеквизитовФормы.УстанавливатьФорматОтображенияНуля = Ложь;
			КонецЕсли;
		КонецЕсли;
		ОбластьМодифицирована = Истина;
	КонецЕсли;
	
	ТабличныйДокументВыборПродолжение(Элемент, Область, ОбластьМодифицирована, Ложь);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеКлючевыхЯчеек(Форма, СтруктураОпцийСтроки, ИндексСтроки, ТабДок = Неопределено)
	
	ПредставлениеКлючевыхЯчеек = "";
	Для каждого КодКлючевойЯчейки Из СтруктураОпцийСтроки.КлючевыеЯчейки Цикл
		ИмяКлючевойЯчейки = ?(ЗначениеЗаполнено(ИндексСтроки), КодКлючевойЯчейки + "_" + Формат(ИндексСтроки, "ЧГ="), КодКлючевойЯчейки);
		Если ТабДок = Неопределено Тогда 
			ЗначениеКлючевойЯчейки = Форма.ТабличныйДокумент.Области[ИмяКлючевойЯчейки].Значение;
			СтрЗначениеКлючевойЯчейки = СокрЛП(Форма.ТабличныйДокумент.Области[ИмяКлючевойЯчейки].Текст);
		Иначе
			ЗначениеКлючевойЯчейки = ТабДок.Области[ИмяКлючевойЯчейки].Значение;
			СтрЗначениеКлючевойЯчейки = СокрЛП(ТабДок.Области[ИмяКлючевойЯчейки].Текст);
		КонецЕсли;
		Если ПустаяСтрока(СтрЗначениеКлючевойЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеЯчейки = ?(ТипЗнч(ЗначениеКлючевойЯчейки) = Тип("Число"), Формат(ЗначениеКлючевойЯчейки, "ЧГ="), СокрЛП(ЗначениеКлючевойЯчейки));
		Если НЕ Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			ПредставлениеКлючевойЯчейки = Неопределено;
			Если Форма.СтруктураДанныхОтчета.Свойство("ПР" + ИмяКлючевойЯчейки, ПредставлениеКлючевойЯчейки) Тогда
				ПредставлениеЯчейки = ПредставлениеКлючевойЯчейки;
			КонецЕсли;
		КонецЕсли;
		ПредставлениеКлючевыхЯчеек = ПредставлениеКлючевыхЯчеек + ?(ПустаяСтрока(ПредставлениеКлючевыхЯчеек), "", "; ") + ПредставлениеЯчейки;
	КонецЦикла;
	
	Если ПустаяСтрока(ПредставлениеКлючевыхЯчеек) Тогда
		ПредставлениеКлючевыхЯчеек = СтруктураОпцийСтроки.ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ИмяВычисляемойЯчейки = ?(ЗначениеЗаполнено(ИндексСтроки), СтруктураОпцийСтроки.ВычисляемаяЯчейка + "_" + Формат(ИндексСтроки, "ЧГ="), СтруктураОпцийСтроки.ВычисляемаяЯчейка);
	
	Если ТабДок = Неопределено Тогда
		Форма.ТабличныйДокумент.Области[ИмяВычисляемойЯчейки].Значение = ПредставлениеКлючевыхЯчеек;
	Иначе
		ТабДок.Области[ИмяВычисляемойЯчейки].Значение = ПредставлениеКлючевыхЯчеек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеОбластиПоАдресуИзСсылки(Форма, СтрСсылка, ИндексЯчейки = 1, ИмяЯчейкиФильтра = "", НомерРаздела = "", НомерСтроки = "", ИмяКолонки = "");
	
	КодАдреса = СокрЛП(СтрСсылка);
	
	ПредставлениеАдреса = "";
	ПозРазд = СтрНайти(КодАдреса, ",");
	Если ПозРазд > 0 Тогда
		СтрНомерРаздела = Лев(КодАдреса, ПозРазд - 1);
		НомерРаздела = Число("0" + СтрНомерРаздела);
		ПредставлениеАдреса = ПредставлениеАдреса + "s" + Формат(НомерРаздела, "ЧН=; ЧГ=");
		КодАдреса = Сред(КодАдреса, ПозРазд + 1);
	КонецЕсли;
	ПозРазд = СтрНайти(КодАдреса, ",");
	Если ПозРазд > 0 Тогда
		СтрНомерСтроки = Лев(КодАдреса, ПозРазд - 1);
		НомерСтроки = Число("0" + СтрНомерСтроки);
		ИмяКолонки = Сред(КодАдреса, ПозРазд + 1);
		ПредставлениеАдреса = ПредставлениеАдреса + "r" + Формат(НомерСтроки, "ЧН=; ЧГ=");
		ПредставлениеАдреса = ПредставлениеАдреса + "c" + ИмяКолонки;
	КонецЕсли;
	
	ИмяОбласти   = "ПО" + ПредставлениеАдреса;
	ИмяМнОбласти = "ПМ" + ПредставлениеАдреса;
	
	ЗначениеОбласти = Неопределено;
	Если Форма.СтруктураДанныхОтчета.Свойство(ИмяМнОбласти + "_" + Формат(ИндексЯчейки, "ЧН=; ЧГ="), ЗначениеОбласти) Тогда
		ИмяЯчейкиФильтра = ИмяМнОбласти;
	ИначеЕсли Форма.СтруктураДанныхОтчета.Свойство(ИмяОбласти, ЗначениеОбласти) Тогда
		ИмяЯчейкиФильтра = ИмяОбласти;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОбласти) = Тип("Число") Тогда
		ЗначениеЯчейкиФильтра = Формат(ЗначениеОбласти, "ЧН=; ЧГ=");
	Иначе
		ЗначениеЯчейкиФильтра = СокрЛП(ЗначениеОбласти);
	КонецЕсли;
	
	Возврат ЗначениеЯчейкиФильтра;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезИндексаИСоставляющиеАдреса(ИмяПоказателя, ИндексПоказателя = 0, Многострочный = Ложь, ПолучитьСоставляющие = Ложь, НомерРаздела = 0, НомерСтроки = 0, КодКолонки = "");
	
	ИмяПоказателяБезИндекса = ИмяПоказателя;
	
	ИндексПоказателя = 0;
	Многострочный = Ложь;
	НомерРаздела = 0;
	НомерСтроки = 0;
	КодКолонки = "";
	
	Если Лев(ИмяПоказателя, 2) = "ПМ" ИЛИ Сред(ИмяПоказателя, 3, 2) = "ПМ" ИЛИ Сред(ИмяПоказателя, 4, 2) = "ПМ" Тогда
		Многострочный = Истина;
		ПозРазделителя = СтрНайти(ИмяПоказателя, "_");
		Если ПозРазделителя > 0 Тогда
			ИмяПоказателяБезИндекса = Лев(ИмяПоказателя, ПозРазделителя - 1);
			ИндексПоказателя = Число("0" + Сред(ИмяПоказателя, ПозРазделителя + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьСоставляющие Тогда
		АдреснаяЧасть = "";
		Если Многострочный Тогда
			АдреснаяЧасть = Сред(ИмяПоказателяБезИндекса, СтрНайти(ИмяПоказателяБезИндекса, "ПМ") + 2);
		ИначеЕсли Лев(ИмяПоказателяБезИндекса, 2) = "ПО" ИЛИ Сред(ИмяПоказателя, 3, 2) = "ПО" Тогда
			АдреснаяЧасть = Сред(ИмяПоказателяБезИндекса, СтрНайти(ИмяПоказателяБезИндекса, "ПО") + 2);
		КонецЕсли;
		Если НЕ ПустаяСтрока(АдреснаяЧасть) Тогда
			Если Лев(АдреснаяЧасть, 1) = "s" Тогда
				ПозНомСтроки = СтрНайти(АдреснаяЧасть, "r");
				Если ПозНомСтроки > 0 Тогда
					НомерРаздела  = Число("0" + Сред(АдреснаяЧасть, 2, ПозНомСтроки - 2));
					АдреснаяЧасть = Сред(АдреснаяЧасть, ПозНомСтроки);
					ПозКодКолонки = СтрНайти(АдреснаяЧасть, "c");
					Если ПозКодКолонки > 0 Тогда
						НомерСтроки   = Число("0" + Сред(АдреснаяЧасть, 2, ПозКодКолонки - 2));
						КодКолонки    = Сред(АдреснаяЧасть, ПозНомСтроки + 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяПоказателяБезИндекса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПорядковыйНомерПериодаВГоду(ДатаВПериоде, Периодичность)
	
	Перем НомерПериода;
	
	ДатаМесяц = Месяц(ДатаВПериоде);
	ДатаГод   = Год(ДатаВПериоде);
	
	Если Периодичность = 1 Тогда       // годовая
		
		НомерПериода = 1;
		
	ИначеЕсли Периодичность = 2 Тогда  // полугодовая
		
		НомерПериода = 1;
		
		Если ДатаВПериоде > КонецМесяца(Дата(ДатаГод, 6, 1)) Тогда
			НомерПериода = 2;
		КонецЕсли;
		
	ИначеЕсли Периодичность = 4 Тогда  // квартальная
		
		НомерПериода = Число(Формат(ДатаВПериоде, "ДФ=к"));
		
	ИначеЕсли Периодичность = 12 Тогда // месячная
		
		НомерПериода = ДатаМесяц;
		
	ИначеЕсли Периодичность = 36 Тогда // декадная
		
		// Дата обязательно должна указывать на конец декады
		НомерПериода = Окр((ДеньГода(ДатаВПериоде) - 2) / 10, 0);
		
	ИначеЕсли Периодичность = 52 Или Периодичность = 56 Тогда // недельная
		
		НомерПериода = НеделяГода(ДатаВПериоде);
		
	Иначе // месячная по умолчанию
		
		НомерПериода = ДатаМесяц;
		
	КонецЕсли;
	
	Возврат НомерПериода;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		ВыгрузкаПустогоОтчета = "";
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru = 'В ходе выгрузки были найдены ошибки.';
							|en = 'В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен.");
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки);
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки)
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ВыгрузкаПустогоОтчета = "";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ВыгрузкаПустогоОтчета = "";
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	ВыгрузкаПустогоОтчета = "";
	Возврат Истина;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если ВыгрузкаПустогоОтчета = "ВыгрузкаПустогоОтчета" Тогда
		УзелыСекции = РегламентированнаяОтчетностьЗагрузка.УзлыПоXPath(ДеревоВыгрузки, "report/sections/section");
		Если ТипЗнч(УзелыСекции) = Тип("Массив") Тогда 
			Для Каждого Секция Из УзелыСекции Цикл 
				Если Секция.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				СтруктураСтрокаКод = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Секция.Строки[0]);
				Если СтруктураСтрокаКод.Код = "code" Тогда 
					Секция.Строки.Очистить();
					ЗаполнитьЗначенияСвойств(Секция.Строки.Добавить(), СтруктураСтрокаКод);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	Возврат Истина;
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	Возврат ДанныеФормыВЗначение(СхемаВыгрузкиОтчета, Тип("ДеревоЗначений"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьФайлXML(ИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	Перем ЗначениеПараметра;
	
	СтатусПроверки = Истина;
	
	ИмяРаздела = "ОбщаяИнформация";
	
	ПараметрыПроверкиОтчета    = СтруктураАтрибутовОтчета["settings"];
	СписокПолейОбщаяИнформация = СтруктураАтрибутовОтчета["title"];
	
	Если ПараметрыВыгрузки.Свойство("okpo", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не задан код ОКПО организации!", ИмяРаздела, "okpo");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("name", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не задано наименование организации!", ИмяРаздела, "name");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("leader_fio", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не указаны Ф.И.О. руководителя организации!", ИмяРаздела, "leader_fio");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("responsible_fio", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!", ИмяРаздела, "responsible_fio");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("responsible_post", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не указана должность лица, ответственного за предоставление статистической информации!", ИмяРаздела, "responsible_post");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("phone", ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не указан телефон должностного лица, ответственного за предоставление статистической информации!", ИмяРаздела, "phone");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Для каждого ЭлементСпискаПоле Из СписокПолейОбщаяИнформация Цикл
		
		Если ЭлементСпискаПоле.Пометка Тогда
			Если СтруктураАтрибутовОтчета["obj"] = "okpo"
				ИЛИ СтруктураАтрибутовОтчета["obj"] <> ЭлементСпискаПоле.Значение Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоля      = ЭлементСпискаПоле.Значение;
		ОписаниеПоля = ЭлементСпискаПоле.Представление;
		
		Если ПараметрыВыгрузки.Свойство(ИмяПоля, ЗначениеПараметра) И НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, "Не заполнено поле """ + ОписаниеПоля + """!", ИмяРаздела, ИмяПоля);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ДополнитьДеревоВыгрузки(ДеревоВыгрузки) Экспорт 
	ДеревоВыгрузки.Колонки.Добавить("КоличествоПодчиненных", Новый ОписаниеТипов("Число"));
	Для Каждого Стр Из ДеревоВыгрузки.Строки Цикл 
		ДополнитьДеревоВыгрузкиРек(Стр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоВыгрузкиРек(СтрДеревоВыгрузки)
	СтрДеревоВыгрузки.КоличествоПодчиненных = 0;
	Для Каждого Стр Из СтрДеревоВыгрузки.Строки Цикл 
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда 
			СтрДеревоВыгрузки.КоличествоПодчиненных = СтрДеревоВыгрузки.КоличествоПодчиненных + 1;
		КонецЕсли;
		ДополнитьДеревоВыгрузкиРек(Стр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки) Экспорт 
	ДополнитьДеревоВыгрузки(ДеревоВыгрузки);
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНесущественныеСпецифики(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
КонецПроцедуры

&НаСервере
Процедура ОтсечьНесущественныеСпецифики(Узел)
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНесущественныеСпецифики(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) = Тип("СтрокаДереваЗначений") Тогда 
		Если (Узел.Код = "s1" Или Узел.Код = "s2" Или Узел.Код = "s3")
			И (Узел.Обязательность = "Н" Или Узел.Обязательность = "H")
			И (Узел.Тип = "А" Или Узел.Тип = "A")
			И (Узел.Многостраничность = Ложь И Узел.Многострочность = Ложь И Узел.Родитель.Многостраничность = Ложь И Узел.Родитель.Многострочность = Ложь)
			И (Узел.ЗначениеПоУмолчанию = "" И Узел.Значение = "") Тогда 
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0)
		И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
		
		Если Узел.Многострочность = Истина И Узел.Код = "s1" 
			И Узел.Родитель.Строки.Количество() = 2 И (Узел.Родитель.КоличествоПодчиненных = 1) Тогда 
			
			Если Не ЗначениеЗаполнено(Узел.Значение) Тогда 
				Возврат Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Узел.Значение) 
				И (ОТЧ.ПривестиЗначение(Узел.Значение) <> 0 Или Узел.Формат <> "N") Тогда 
				Возврат Ложь;
			КонецЕсли;
			Если Узел.Родитель.Строки[0].Код <> "code"
				Или Не ЗначениеЗаполнено(Узел.Родитель.Строки[0].Значение) Тогда 
				Возврат Истина;
			КонецЕсли;
			
			КодСтроки = Узел.Родитель.Строки[0].Значение;
			Инд = 0;
			Для Каждого Стр Из Узел.Родитель.Родитель.Строки Цикл 
				Если Стр.Строки.Количество() = 0
					Или Стр.Строки[0].Значение <> КодСтроки Тогда 
					Продолжить;
				КонецЕсли;
				
				Инд = Инд + 1;
				ОтбСтроки = Стр.Строки.НайтиСтроки(Новый Структура("Ключ", Узел.Ключ));
				Если ОтбСтроки.Количество() <> 1 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ОтбСтроки[0] = Узел Тогда 
					ФорматНуля = "";
					Если Не СтруктураДанныхОтчета.Свойство("ЧН" + Узел.Ключ + "_" + Формат(Инд, "ЧГ="), ФорматНуля)
						Или Не СтрНайти(ФорматНуля, "ЧН=0") = 0 Тогда 
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		ОбязательноеНулевоеЗначение = Ложь;
		Если Узел.Показатели.Количество() > 0 И ТипЗнч(Узел.Показатели[0].Значение) = Тип("Структура") Тогда
			ФорматПредставленияНуля = Неопределено;
			Если Узел.Показатели[0].Значение.Свойство("ЧН" + Узел.Ключ, ФорматПредставленияНуля) Тогда
				ОбязательноеНулевоеЗначение = НЕ ПустаяСтрока(Формат(0, ФорматПредставленияНуля));
			КонецЕсли; 
		КонецЕсли;
		ПустойУзел = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение)) И НЕ ОбязательноеНулевоеЗначение;
	Иначе
		ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие, "", Узел) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя, ФорматПредставленияНуля = "")
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ОбрезатьПустыеСимволы Тогда 
				Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
			Иначе
				Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(ЗначениеПоказателя, МаксШирина), ЗначениеПоказателя);
			КонецЕсли;
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		ОписаниеЯчейки = Неопределено;
		Если ЗначениеПоказателя = 0 И ЗначениеЗаполнено(Узел.Ключ)
			И Не ЗначениеЗаполнено(СтрЗаменить(СтрЗаменить(ФорматПредставленияНуля, "ЧН='", ""), "'", ""))
			И Не ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию)
			И СтруктураОписанийЯчеек.Свойство(Узел.Ключ, ОписаниеЯчейки) Тогда 
			// Есть шаблоны, где специфика это число, вводимое вручную
			// и не обязательное (см. 1-технология, раздел 7)
			// если не задан формат нуля, то для выгружаем ноль как пустое значение
			Если ОписаниеЯчейки.Свойство("fld") И (Лев("" + ОписаниеЯчейки["fld"], 1) = "s")
				И ((ОписаниеЯчейки.Свойство("vldType") И ОписаниеЯчейки["vldType"] = 0) Или (Не ОписаниеЯчейки.Свойство("vldType")))
				И ОписаниеЯчейки.Свойство("inputType") И ОписаниеЯчейки["inputType"] = 2 Тогда 
				
				Узел.Значение = "";
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = РегламентированнаяОтчетность.ЧислоПоФормату(ЗначениеПоказателя, СтрокаФормата, Истина);
		Если СтрНайти(ФорматПредставленияНуля, "ЧН=") > 0 Тогда
			Узел.Показатели = Новый СписокЗначений;
			Если ОбрезатьПустыеСимволы Тогда
				Узел.Показатели.Добавить(Новый Структура("ЧН" + СокрЛП(Узел.Ключ), ФорматПредставленияНуля));
			Иначе
				Узел.Показатели.Добавить(Новый Структура("ЧН" + СокрЛП(Узел.Ключ), ФорматПредставленияНуля));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Если ОбрезатьПустыеСимволы Тогда
					Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
				Иначе
					Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=гггг");
				КонецЕсли;
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Если ОбрезатьПустыеСимволы Тогда
				Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
			Иначе
				Узел.Значение = Прав(ЗначениеПоказателя, 4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("СтрокаДереваЗначений") Тогда 
					КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
					Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
						УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
						ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
						НомСтр = НомСтр + 1;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			// Сначала всегда записываем атрибуты
			Для каждого Лист из СтрокаДерева.Строки Цикл
				Если Лист.Тип = "А" ИЛИ Лист.Тип = "A" Тогда
					ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЦикла;
			// Потом все, что не является атрибутами
			Для каждого Лист из СтрокаДерева.Строки Цикл
				Если Лист.Тип = "А" ИЛИ Лист.Тип = "A" Тогда
					Продолжить;
				КонецЕсли;
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, АтрибутыОтчета)
	
	КодОКУД           = Прав("00000000" + АтрибутыОтчета["OKUD"], 7);
	КодФормы          = Формат(АтрибутыОтчета["idf"], "ЧЦ=3; ЧН=; ЧВН=");
	Периодичность     = Формат(АтрибутыОтчета["idp"], "ЧЦ=3; ЧН=; ЧВН=");
	КодФормыСФ        = Формат(АтрибутыОтчета["idf"], "ЧН=;");           // "старый" формат
	ПериодичностьСФ   = Формат(АтрибутыОтчета["idp"], "ЧН=;");           // "старый" формат
	КодОКПО           = СокрЛП("" + ПараметрыВыгрузки[АтрибутыОтчета["obj"]]);
	
	ОтчетныйГод       = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=");
	НомерПериода      = ПорядковыйНомерПериодаВГоду(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, АтрибутыОтчета["idp"]);
	КодНомера         = Формат(НомерПериода, "ЧЦ=2; ЧН=; ЧВН=");
	КодПериода        = Формат(АтрибутыОтчета["idp"], "ЧЦ=2; ЧН=; ЧВН=");
	ОтчетныйПериод    = КодПериода + КодНомера;
	ОтчетныйПериодСФ  = КодПериодаИзСправочника(ЭтотОбъект, НомерПериода); // "старый" формат
	
	КодОКВЭД = Неопределено;
	ПараметрыВыгрузки.Свойство("okved", КодОКВЭД);
	КодОКФС  = Неопределено;
	ПараметрыВыгрузки.Свойство("okfs", КодОКФС);
	
	ДатаПодписиОтчета = Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ДФ=yyyyMMdd");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормыСФ);
	КодыИФ.Вставить("Периодичность",  ПериодичностьСФ);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериодСФ);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормыСФ + "_"
		+ ПериодичностьСФ + "_"
		+ КодОКПО + "_"
		+ ОтчетныйГод + "_"
		+ ОтчетныйПериодСФ
		+ ?(ЗначениеЗаполнено(КодОКВЭД), "_" + КодОКВЭД, "")
		+ ?(ЗначениеЗаполнено(КодОКФС), "_" + КодОКФС, "") + ".xml";
		
	Иначе                                        // "новый" формат
		
		ИмяФайлаXML = КодОКУД + "_"
		+ КодФормы + "_"
		+ Периодичность + "_"
		+ КодОКПО + "_"
		+ ОтчетныйГод + "_"
		+ ОтчетныйПериод + "__"
		+ КодыИФ.ДатаВыгрузки + ".xml";
		
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров() Экспорт 
	
	ПараметрыВыгрузки = Новый Структура;
	
	Для Каждого РазделПоказателейОтчета Из мДанныеОтчета Цикл
		ПоказателиРаздела = РазделПоказателейОтчета.Значение;
		Для Каждого Эл Из ПоказателиРаздела Цикл
			ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ПорядковыйНомерПериода = ПорядковыйНомерПериодаВГоду(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтруктураАтрибутовОтчета["idp"]);
	ПараметрыВыгрузки.Вставить("КодПериодичности", СтруктураАтрибутовОтчета["idp"]);
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыгрузки.Вставить("ОтчПериод", КодПериодаИзСправочника(ЭтотОбъект, ПорядковыйНомерПериода)); // "старый" формат
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, СтруктураАтрибутовОтчета));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "ФСГС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаСервереБезКонтекста
Функция КодПериодаИзСправочника(Форма, ПорядковыйНомерПериода)
	
	СправочникиПериодов = Форма.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_mes"));
	Если СправочникиПериодов.Количество() = 0 Тогда
		СправочникиПериодов = Форма.ТаблицаСправочников.НайтиСтроки(Новый Структура("Идентификатор", "s_time"));
		Если СправочникиПериодов.Количество() = 0 Тогда
			Возврат Формат(ПорядковыйНомерПериода, "ЧН=0");
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЭлементовСправочника = СправочникиПериодов[0].ТаблицаЭлементовСправочника;
	
	Если ТаблицаЭлементовСправочника.Количество() = 0 ИЛИ ПорядковыйНомерПериода <= 0 Тогда
		Возврат Формат(ПорядковыйНомерПериода, "ЧН=0");
	КонецЕсли;
	
	НомерПериода = Мин(ПорядковыйНомерПериода, ТаблицаЭлементовСправочника.Количество());
	
	Возврат Формат(ТаблицаЭлементовСправочника[НомерПериода - 1].Код, "ЧГ=;ЧН=0");
	
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		ВыгрузкаПустогоОтчета = "";
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		ВыгрузкаПустогоОтчета = "";
		Возврат;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФСГС");
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

#Область ЗагрузкаОтчета

&НаСервере
Функция ЗагрузитьОтчет(ВХ, Ошибка, ПараметрСтрокаXML = Ложь)
	КонтекстФормы = ФормуВКонтекстФормы();
	Результат = УниверсальныйОтчетСтатистики.ЗагрузитьОтчет(КонтекстФормы, ВХ, Ошибка);
	Если Результат Тогда 
		КонтекстФормыВДанные(КонтекстФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьОКПО()
	Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьОКПОФормыСтатистикиСПодразделением(ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент) Экспорт
	
	Если ТабличныйДокумент.Области.Найти("РегистрацияРеспондента") <> Неопределено Тогда
		Организация = ЭтотОбъект.СтруктураРеквизитовФормы.Организация;
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "ОКПО");
		РегламентированнаяОтчетностьВызовСервера.ДополнитьЗаправшиваемыеСведенияОбОрганизации(Организация, Сведения);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ЭтотОбъект.ДатаПодписи, Сведения);
		ДополнитьПоРегистрацииРеспондента(ЭтотОбъект, ОргСведения);
	Иначе
		ОргКодОКПО = ТабличныйДокумент.Области.Найти("okpo");
		Если ОргКодОКПО <> Неопределено Тогда 
			ОКПО = ПолучитьОКПО();
			ОргКодОКПО.Значение = ОКПО;
			СтруктураДанныхОтчета.okpo = ОКПО;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьПоРегистрацииРеспондента(Форма, ОргСведения)
	Форма.СтруктураДанныхОтчета.Свойство("responsible_fio", ОргСведения.ФИООтвСтатистика);
	Форма.СтруктураДанныхОтчета.Свойство("responsible_post", ОргСведения.ДолжнОтвСтатистика);
	Форма.СтруктураДанныхОтчета.Свойство("phone", ОргСведения.ТелОтвСтатистика);
	Форма.СтруктураДанныхОтчета.Свойство("email", ОргСведения.АдресЭлПочтыОтвСтатистика);
	
	РегСведения = Новый Структура("ОКПО, АдрПочт_JSON, ОбособленноеПодразделение");
	Форма.СтруктураДанныхОтчета.Свойство("okpo", РегСведения.ОКПО);
	Форма.СтруктураДанныхОтчета.Свойство("org_adress", РегСведения.АдрПочт_JSON);
	
	РегистрацияРеспондента = РегламентированнаяОтчетностьВызовСервера.ДополнитьПоРегистрацииРеспондента(ОргСведения, РегСведения,
		Форма.РегистрацияРеспондента, Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи);
		
	Форма.РегистрацияРеспондента = РегистрацияРеспондента;
	УстановитьЗначениеПоляЕслиНайдено(Форма, "РегистрацияРеспондента", РегистрацияРеспондента);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_fio",  ОргСведения.ФИООтвСтатистика);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "responsible_post", ОргСведения.ДолжнОтвСтатистика);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "phone",            ОргСведения.ТелОтвСтатистика);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "email",            ОргСведения.АдресЭлПочтыОтвСтатистика);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "mail",             ОргСведения.АдресЭлПочтыОтвСтатистика);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "okpo",             РегСведения.ОКПО);
	УстановитьЗначениеПоляЕслиНайдено(Форма, "org_adress", РегламентированнаяОтчетностьВызовСервера.ПредставлениеАдресаJSON(РегСведения.АдрПочт_JSON));
КонецПроцедуры

&НаСервере
Функция ФормуВКонтекстФормы()
	Результат = Новый Структура;
	Результат.Вставить("СхемаВыгрузкиОтчета", РеквизитФормыВЗначение("СхемаВыгрузкиОтчета"));
	Результат.Вставить("ТаблицаЗначений", РеквизитФормыВЗначение("ТаблицаЗначений"));
	Результат.Вставить("ТаблицаСправочников", РеквизитФормыВЗначение("ТаблицаСправочников"));
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	Результат.Вставить("СтруктураДанныхОтчета", СтруктураДанныхОтчета);
	Результат.Вставить("СтруктураОписанийЯчеек", СтруктураОписанийЯчеек);
	Результат.Вставить("СтруктураАтрибутовОтчета", СтруктураАтрибутовОтчета);
	Возврат Результат;
КонецФункции

&НаСервере
Функция КонтекстФормыВДанные(Контекст)
	ЗначениеВРеквизитФормы(Контекст.СхемаВыгрузкиОтчета, "СхемаВыгрузкиОтчета");
	ЗначениеВРеквизитФормы(Контекст.ТаблицаЗначений, "ТаблицаЗначений");
	ЗначениеВРеквизитФормы(Контекст.ТаблицаСправочников, "ТаблицаСправочников");
	
	СтруктураРеквизитовФормы = Новый Структура;
	Для Каждого КЗ Из Контекст.СтруктураРеквизитовФормы Цикл 
		СтруктураРеквизитовФормы.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	СтруктураДанныхОтчета = Новый Структура;
	Для Каждого КЗ Из Контекст.СтруктураДанныхОтчета Цикл 
		СтруктураДанныхОтчета.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	СтруктураОписанийЯчеек = Новый Структура;
	Для Каждого КЗ Из Контекст.СтруктураОписанийЯчеек Цикл 
		СтруктураОписанийЯчеек.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	СтруктураАтрибутовОтчета = Новый Структура;
	Для Каждого КЗ Из Контекст.СтруктураАтрибутовОтчета Цикл 
		СтруктураАтрибутовОтчета.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	СтруктураЗамененныхАтрибутовОтчета = Новый Структура;
	Если ТипЗнч(Контекст) = Тип("Структура") И Контекст.Свойство("СтруктураЗамененныхАтрибутовОтчета") Тогда 
		Для Каждого КЗ Из Контекст.СтруктураЗамененныхАтрибутовОтчета Цикл 
			СтруктураЗамененныхАтрибутовОтчета.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

#Область ПроверкаКонтрольныеСоотношенияИзШаблона

&НаКлиенте
Процедура ПроверитьКонтрольныеСоотношенияИзШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ОбработкаКС) = Тип("ОкноКлиентскогоПриложения") Тогда 
		Если ОбработкаКС.Окно <> Неопределено Тогда 
			ОбработкаКС.Закрыть();
		КонецЕсли;
		ОбработкаКС = Неопределено;
	КонецЕсли;
	
	РезультатВыполнения = ПроверитьКонтрольныеСоотношенияИзШаблонаВФоне();
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(ПолучитьИзВременногоХранилища(АдресХранилища), ОбработкаКС, ЭтотОбъект);
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКонтрольныеСооотношенияИзШаблонаЗавершениеПослеПроверки", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка контрольных соотношений из шаблона Росстата';
												|en = 'Выполняется проверка контрольных соотношений из шаблона Росстата'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрольныеСооотношенияИзШаблонаЗавершениеПослеПроверки(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатЗагрузки = Неопределено
		ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку контрольных соотношений из шаблона Росстата...';
														|en = 'Не удалось выполнить проверку контрольных соотношений из шаблона Росстата...'"));
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(ПолучитьИзВременногоХранилища(АдресХранилища), ОбработкаКС, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияИзШаблонаВФоне()
	МодульПроверки = ОбщегоНазначения.ОбщийМодуль("ИнтерпретаторКонтрольныхСоотношенийРосстата");
	Если МодульПроверки = Неопределено Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Механизм проверки контрольных соотношений недоступен, обратитесь к администратору';
													|en = 'Механизм проверки контрольных соотношений недоступен, обратитесь к администратору'"));
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	АтрибутыДляПроверки = Новый Структура("ОКУД,КодШаблона,Версия,Шифр,КодФормы,Наименование,КодПериодичности");
	СтруктураАтрибутовОтчета.Свойство("OKUD", АтрибутыДляПроверки.ОКУД);
	СтруктураАтрибутовОтчета.Свойство("code", АтрибутыДляПроверки.КодШаблона);
	СтруктураАтрибутовОтчета.Свойство("version", АтрибутыДляПроверки.Версия);
	СтруктураАтрибутовОтчета.Свойство("shifr", АтрибутыДляПроверки.Шифр);
	СтруктураАтрибутовОтчета.Свойство("name", АтрибутыДляПроверки.Наименование);
	СтруктураАтрибутовОтчета.Свойство("idf", АтрибутыДляПроверки.КодФормы);
	СтруктураАтрибутовОтчета.Свойство("idp", АтрибутыДляПроверки.КодПериодичности);
	
	ПараметрыПроверкиКонтрольныхСоотношений = Новый Структура;
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ШаблонРосстата", ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.мАдресДанныхШаблона).Шаблон.Получить());
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Атрибуты", АтрибутыДляПроверки);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("СхемаВыгрузки", ДанныеФормыВЗначение(СхемаВыгрузкиОтчета, Тип("ДеревоЗначений")));
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ПрошлыйПериод", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТекстВыгрузки", "");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Ссылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТиповойСпособФормированияТекстаВыгрузки", Истина);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ДополнятьРасшифровкой", Истина);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ВыполнятьСинхронно", Ложь);
	
	Возврат МодульПроверки.ПроверитьКонтрольныеСоотношенияИзШаблона(ЭтотОбъект, ПараметрыПроверкиКонтрольныхСоотношений);
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
