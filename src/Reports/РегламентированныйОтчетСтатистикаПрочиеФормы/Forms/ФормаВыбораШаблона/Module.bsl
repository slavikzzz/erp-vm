#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НазваниеТОГС = "";
	АдресСервераСбораОтчетностиРосстата = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ШаблоныЭВФОтчетовСтатистики").АдресСервераССОРосстата(НазваниеТОГС);
	Если ЗначениеЗаполнено(НазваниеТОГС) Тогда
		АдресСервераСбораОтчетностиРосстата = АдресСервераСбораОтчетностиРосстата + "{" + НазваниеТОГС + "}";
		Элементы.АдресСервераССО.Заголовок =
			Элементы.АдресСервераССО.Заголовок + " (" + НазваниеТОГС + ")";
	КонецЕсли;
	ОбновитьТаблицуФормОтчета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереходНаСайтРосстатаНажатие(Элемент)
	Попытка
		ПерейтиПоНавигационнойСсылке(РегламентированнаяОтчетностьКлиентСервер.ПолучитьАдресСтраницыСШаблонамиРосстата());
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось открыть страницу!';
										|en = 'Не удалось открыть страницу!'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаСайтССОНажатие(Элемент)
	Попытка
		ПерейтиПоНавигационнойСсылке(АдресСервераССОРосстата());
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось открыть страницу!';
										|en = 'Не удалось открыть страницу!'"));
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормыОтчета

&НаКлиенте
Процедура ФормыОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВладелецФормы.ВыбратьШаблонЗавершение(Элементы.ФормыОтчета.ТекущиеДанные, Неопределено);
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	ВладелецФормы.ВыбратьШаблонЗавершение(Элементы.ФормыОтчета.ТекущиеДанные, Неопределено);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Асинх Процедура Загрузить(Команда)
	Если Не Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда 
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите XML-шаблоны";
	ДиалогВыбораФайла.МножественныйВыбор =  Истина;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.Фильтр = "Файлы XML-шаблонов ЭВФ статистики (*.xml)|*.xml";
	ВыбранныеФайлы = Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	Если ТипЗнч(ВыбранныеФайлы) <> Тип("Массив") Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = ВыбранныеФайлы.Количество();
	РежимОдногоФайла = (КоличествоФайлов = 1);
	
	ОбъектыФайл = Новый Массив;
	КороткиеИменаФайлов = Новый Массив;
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		ОбъектФайл = Новый Файл(ВыбранныйФайл);
		ОбъектыФайл.Добавить(ОбъектФайл);
		КороткиеИменаФайлов.Добавить(ОбъектФайл.Имя);
	КонецЦикла;
	
	Если ХотяБыОдинШаблонПрисутствуетВИБ(КороткиеИменаФайлов) Тогда
		Если РежимОдногоФайла Тогда
			ТекстВопроса = "XML-шаблон с аналогичным именем уже загружен в информационную базу.
				|Заменить существующий XML-шаблон?";
		Иначе
			ТекстВопроса = "Некоторые из выбранных XML-шаблонов уже присутствуют в информационной базе.
				|Продолжить загрузку с заменой XML-шаблонов в информационной базе на XML-шаблоны с диска?";
		КонецЕсли;
		
		Если КодВозвратаДиалога.Да <> Ждать ВопросАсинх(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьШаблоны(КоличествоФайлов, ОбъектыФайл, РежимОдногоФайла);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресаСервера(Команда)
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаАдресаСервераЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ШаблоныЭВФОтчетовСтатистики.Форма.Настройка", , ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧерезВебСервис(Команда)
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбновитьШаблоныЧерезВебСервисНаКлиенте", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ПроверитьОбновления", Истина);
	ОткрытьФормуВыбораШаблоновДляОбновления(ПараметрыФормы, ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуФормОтчета()
	ИсточникОтчета = СтрЗаменить(СтрЗаменить(Строка(ИмяФормы), "Отчет.", ""), ".Форма.ФормаВыбораШаблона", "");
	ЗначениеВДанныеФормы(Отчеты[ИсточникОтчета].ТаблицаФормОтчета(), ФормыОтчета);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаписатьШаблоны(КоличествоФайлов, ОбъектыФайл, РежимОдногоФайла)
	КоличествоНезагруженныхШаблонов = 0;
	ШаблоныЭВФ = Новый Массив;
	НеЗагруженныеШаблоны = Новый Массив;
	
	Для Каждого ОбъектФайл Из ОбъектыФайл Цикл
		Если Ждать ОбъектФайл.СуществуетАсинх() Тогда
			ШаблонЭВФ = Новый Структура;
			ШаблонЭВФ.Вставить("ИмяФайлаШаблона", НРег(ОбъектФайл.Имя));
			ШаблонЭВФ.Вставить("Размер", Ждать ОбъектФайл.РазмерАсинх());
			ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ОбъектФайл.ПолноеИмя, УникальныйИдентификатор);
			Если ТипЗнч(ОписаниеПомещенногоФайла) = Тип("ОписаниеПомещенногоФайла") Тогда
				ШаблонЭВФ.Вставить("Шаблон", ПолучитьИзВременногоХранилища(ОписаниеПомещенногоФайла.Адрес));
				ШаблоныЭВФ.Добавить(ШаблонЭВФ);
			Иначе
				Если РежимОдногоФайла тогда
					ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось загрузить XML-шаблон ""%1"":%2';
							|en = 'Не удалось загрузить XML-шаблон ""%1"":%2'"), ОбъектФайл.Имя, ОписаниеОшибки()));
					Возврат;
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось загрузить XML-шаблон ""%1"":%2';
							|en = 'Не удалось загрузить XML-шаблон ""%1"":%2'"), ОбъектФайл.Имя, Символы.ПС + Символы.ПС + ОписаниеОшибки());
					НеЗагруженныеШаблоны.Добавить(ТекстСообщения);
				КонецЕсли;
				
				КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекстСообщения Из НеЗагруженныеШаблоны Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Запись XML-шаблонов...';
					|en = 'Запись XML-шаблонов...'"), , , БиблиотекаКартинок.Записать);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШаблоныЭВФ, Новый УникальныйИдентификатор);
	ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов);
	ПоказатьПредупрежденияПослеЗагрузкиШаблонов(КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла);
КонецПроцедуры

&НаСервере
Функция ХотяБыОдинШаблонПрисутствуетВИБ(КороткиеИменаФайлов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
	                      |ГДЕ
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона В(&ВыбранныеФайлы)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ШаблоныЭВФОтчетовСтатистики.ИмяФайлаШаблона");
	Запрос.УстановитьПараметр("ВыбранныеФайлы", КороткиеИменаФайлов);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов)
	ШаблоныЭВФ = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для Каждого ШаблонЭВФ Из ШаблоныЭВФ Цикл
		Если НЕ ДобавитьРеквизитыИзФайлаШаблона(ШаблонЭВФ) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не распознан формат XML-шаблона ""%1""';
																			|en = 'Не распознан формат XML-шаблона ""%1""'"), ШаблонЭВФ.ИмяФайлаШаблона));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ШаблонЭВФ.ВерсияФормата, "1.3") = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия формата XML-шаблона ""%1"" не соответствует версии ""1.3""';
																			|en = 'Версия формата XML-шаблона ""%1"" не соответствует версии ""1.3""'"), ШаблонЭВФ.ИмяФайлаШаблона));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ШаблонЭВФ.ИмяФайлаШаблона, ШаблонЭВФ.ОКУД + "_") Тогда 
			ИмяФайлаШаблона = ШаблонЭВФ.ИмяФайлаШаблона;
		Иначе
			ИмяФайлаШаблона = ШаблонЭВФ.ОКУД + "_" + ШаблонЭВФ.ИмяФайлаШаблона;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.СоздатьМенеджерЗаписи();
		
		ИмяФайлаБезКода = СтрЗаменить(ИмяФайлаШаблона, ШаблонЭВФ.ОКУД + "_", "");
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаБезКода;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Если ДатаВерсии(МенеджерЗаписи.Версия) > ДатаВерсии(ШаблонЭВФ.Версия) Тогда
				
				КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ИмяФайлаШаблона = ИмяФайлаШаблона;
		
		МенеджерЗаписи.ОКУД             = ШаблонЭВФ.ОКУД;
		МенеджерЗаписи.КодШаблона       = ШаблонЭВФ.КодШаблона;
		МенеджерЗаписи.Наименование     = ШаблонЭВФ.Наименование;
		МенеджерЗаписи.КодПериодичности = ШаблонЭВФ.КодПериодичности;
		МенеджерЗаписи.КодФормы         = ШаблонЭВФ.КодФормы;
		МенеджерЗаписи.Шифр             = ШаблонЭВФ.Шифр;
		МенеджерЗаписи.Версия           = ШаблонЭВФ.Версия;
		
		МенеджерЗаписи.Размер           = ШаблонЭВФ.Размер;
		МенеджерЗаписи.ДатаДобавления   = ТекущаяДатаСеанса();
		
		Попытка
			МенеджерЗаписи.Шаблон = Новый ХранилищеЗначения(ШаблонЭВФ.Шаблон, Новый СжатиеДанных(8));
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать XML-шаблон ""%1"":%2';
																												|en = 'Не удалось записать XML-шаблон ""%1"":%2'"), ШаблонЭВФ.ИмяФайлаШаблона, Символы.ПС + ОписаниеОшибки()));
			КоличествоНезагруженныхШаблонов = КоличествоНезагруженныхШаблонов + 1;
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьТаблицуФормОтчета();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьРеквизитыИзФайлаШаблона(РеквизитыШаблона)
	
	Если ТипЗнч(РеквизитыШаблона) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВремФайлШаблона = ПолучитьИмяВременногоФайла("." + РеквизитыШаблона.ИмяФайлаШаблона);
	
	Попытка
		РеквизитыШаблона.Шаблон.Записать(ВремФайлШаблона);
	Исключение
		УдалитьФайлы(ВремФайлШаблона);
		Возврат Ложь;
	КонецПопытки;

	АтрибутыШаблона = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ВремФайлШаблона);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если НРег(ОбъектЧтениеXML.Имя) = "metaform" Тогда
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если АтрибутыШаблона[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							АтрибутыШаблона.Вставить(СтрЗаменить(ОбъектЧтениеXML.Имя, "-", "_"), ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АтрибутыШаблона["OKUD"])
			И ТипЗнч(АтрибутыШаблона["OKUD"]) = Тип("Строка")
			И СтрДлина(АтрибутыШаблона["OKUD"]) < 7
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АтрибутыШаблона["OKUD"]) Тогда 
			
			АтрибутыШаблона["OKUD"] = Прав("0000000" + АтрибутыШаблона["OKUD"], 7);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
		УдалитьФайлы(ВремФайлШаблона);
		
	Исключение
		
		УдалитьФайлы(ВремФайлШаблона);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если АтрибутыШаблона.Количество() = 0 Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	РеквизитыШаблона.Вставить("ОКУД",             АтрибутыШаблона["OKUD"]);
	РеквизитыШаблона.Вставить("КодШаблона",       АтрибутыШаблона["code"]);
	РеквизитыШаблона.Вставить("Наименование",     ВРег(Лев(АтрибутыШаблона["name"], 1)) + Сред(АтрибутыШаблона["name"], 2));
	РеквизитыШаблона.Вставить("КодПериодичности", Число("0" + АтрибутыШаблона["idp"]));
	РеквизитыШаблона.Вставить("КодФормы",         Число("0" + АтрибутыШаблона["idf"]));
	РеквизитыШаблона.Вставить("Шифр",             АтрибутыШаблона["shifr"]);
	РеквизитыШаблона.Вставить("Версия",           АтрибутыШаблона["version"]);
	РеквизитыШаблона.Вставить("ВерсияФормата",    АтрибутыШаблона["format_version"]);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаВерсии(СтрДата)
	
	Разделители = "-.,/";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если СтрНайти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли СтрНайти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	День  = Макс(1, Число("0" + СокрЛП(МассивПолей[0])));
	Месяц = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Год   = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупрежденияПослеЗагрузкиШаблонов(КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла)
	Если КоличествоНезагруженныхШаблонов = КоличествоФайлов Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось загрузить ни один из указанных XML-шаблонов.';
									|en = 'Не удалось загрузить ни один из указанных XML-шаблонов.'"));
	Иначе
		Если РежимОдногоФайла Тогда
			ТекстПредупреждения = "XML-шаблон успешно загружен.";
		ИначеЕсли КоличествоНезагруженныхШаблонов = 0 Тогда
			ТекстПредупреждения = "Все XML-шаблоны успешно загружены.";
		Иначе
			ТекстПредупреждения = "Загружены " + (КоличествоФайлов - КоличествоНезагруженныхШаблонов) + " из " + КоличествоФайлов + " XML-шаблонов.
			|Остальные XML-шаблоны загрузить на удалось.";
		КонецЕсли;
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), ТекстПредупреждения));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция АдресСервераССОРосстата(НазваниеТОГС = "") Экспорт
	АдресСервера = АдресСервераСбораОтчетностиРосстата;
	
	НазваниеТОГС = "";
	
	НачПозиция = СтрНайти(АдресСервера, "{");
	Если НачПозиция > 0 Тогда
		КонПозиция = СтрНайти(АдресСервера, "}", , НачПозиция);
		Если КонПозиция > НачПозиция Тогда
			НазваниеТОГС = Сред(АдресСервера, НачПозиция + 1, КонПозиция - НачПозиция - 1);
		Иначе
			НазваниеТОГС = Сред(АдресСервера, НачПозиция + 1);
		КонецЕсли;
		АдресСервера = Лев(АдресСервера, НачПозиция - 1);
	КонецЕсли;
	
	Возврат АдресСервера;
КонецФункции

&НаКлиенте
Процедура НастройкаАдресаСервераЗавершение(АдресСервера, ДополнительныеПараметры) Экспорт
	Если АдресСервера = Неопределено Или ТипЗнч(АдресСервера) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.АдресСервераССО.Заголовок = "Перейти на сайт сервиса сбора отчетности";
	
	Если ЗначениеЗаполнено(АдресСервера) Тогда
		НазваниеТОГС = "";
		АдресСервераСбораОтчетностиРосстата = АдресСервера;
		Элементы.АдресСервераССО.Доступность = Истина;
		АдресСервераССО = АдресСервераССОРосстата(НазваниеТОГС);
		
		Если ЗначениеЗаполнено(НазваниеТОГС) Тогда
			Элементы.АдресСервераССО.Заголовок =
				Элементы.АдресСервераССО.Заголовок + " (" + НазваниеТОГС + ")";
		КонецЕсли;
	Иначе
		АдресСервераСбораОтчетностиРосстата = "";
		Элементы.АдресСервераССО.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныЧерезВебСервисНаКлиенте(РезультатВыбораШаблонов, ДополнительныеПараметры) Экспорт
	Если РезультатВыбораШаблонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Активизировать();
	
	РезультатДлительнойОперации = ОбновитьШаблоныЧерезВебСервисНаСервере(РезультатВыбораШаблонов);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется загрузка шаблонов с сайта';
											|en = 'Выполняется загрузка шаблонов с сайта'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьШаблоныЧерезВебСервисНаКлиентеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатДлительнойОперации, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблоныЧерезВебСервисНаКлиентеЗавершение(РезультатОбновления, ДополнительныеПараметры) Экспорт
	
	Если РезультатОбновления = Неопределено
		ИЛИ РезультатОбновления.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженоШаблонов = ПолучитьИзВременногоХранилища(РезультатОбновления.АдресДополнительногоРезультата);
	КоличествоНезагруженныхШаблонов = 0;
	КоличествоШаблонов = 0;
	Если ТипЗнч(ЗагруженоШаблонов) = Тип("Структура") Тогда
		ЗагруженоШаблонов.Свойство("Незагружено", КоличествоНезагруженныхШаблонов);
		ЗагруженоШаблонов.Свойство("Всего", КоличествоШаблонов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШаблоныИзКонфигурации(
		РезультатОбновления.АдресРезультата,
		Истина,
		КоличествоНезагруженныхШаблонов,
		КоличествоШаблонов,
		Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьШаблоныЧерезВебСервисНаСервере(СвойстваШаблонов)
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = РегламентированнаяОтчетностьПовтИсп.ПолучитьНаименованиеЗаданияОбновленияШаблонов();
	ПараметрыЗапуска.КлючФоновогоЗадания = РегламентированнаяОтчетностьПовтИсп.ПолучитьКлючЗаданияОбновленияШаблонов();
	ПараметрыЗапуска.ДополнительныйРезультат = Истина;
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("СвойстваШаблонов", СвойстваШаблонов.Выгрузить());
	
	ИмяПроцедуры = "РегистрыСведений.ШаблоныЭВФОтчетовСтатистики.ЗагрузитьШаблоныЧерезСервисВебСбора";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораШаблоновДляОбновления(ПараметрыФормы, ОписаниеОповещенияОЗакрытии = Неопределено)
	ОткрытьФорму("РегистрСведений.ШаблоныЭВФОтчетовСтатистики.Форма.ВыборШаблонов", ПараметрыФормы, ЭтотОбъект, Ложь, , , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблоныИзКонфигурации(АдресВременногоХранилища, Интерактивно, КоличествоНезагруженныхШаблонов, КоличествоФайлов, РежимОдногоФайла)
	Состояние(НСтр("ru = 'Запись XML-шаблонов...';
					|en = 'Запись XML-шаблонов...'"), , , БиблиотекаКартинок.Записать);
	ЗагрузитьШаблоны(АдресВременногоХранилища, КоличествоНезагруженныхШаблонов);
	
	Если Интерактивно Тогда
		Если КоличествоНезагруженныхШаблонов = КоличествоФайлов Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось загрузить ни один из указанных XML-шаблонов.';
										|en = 'Не удалось загрузить ни один из указанных XML-шаблонов.'"));
			Возврат;
		Иначе
			Если РежимОдногоФайла Тогда
				ТекстПредупреждения = "XML-шаблон успешно загружен.";
			ИначеЕсли КоличествоНезагруженныхШаблонов = 0 Тогда
				ТекстПредупреждения = "Все XML-шаблоны успешно загружены.";
			Иначе
				ТекстПредупреждения = "Загружены " + (КоличествоФайлов - КоличествоНезагруженныхШаблонов) + " из " + КоличествоФайлов + " XML-шаблонов.
				|Остальные XML-шаблоны загрузить на удалось.";
			КонецЕсли;
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																									|en = '%1'"), ТекстПредупреждения));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
