#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ТрудовойДоговорМикропредприятий");
	НастройкиВарианта.Описание = НСтр("ru = 'Трудовой договор микропредприятий';
										|en = 'Employment contract of micro-enterprises'");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ТрудовойДоговорМикропредприятийБезДоступаКЗарплате");
	НастройкиВарианта.Описание = НСтр("ru = 'Трудовой договор микропредприятий';
										|en = 'Employment contract of micro-enterprises'");
	НастройкиВарианта.Включен = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКомандуПечати(КомандыПечати, ИдентификаторыПФ = Неопределено, СторонняяПечатнаяФорма = Ложь) Экспорт
	
	// Трудовой договор микропредприятий
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПечатнаяФормаТрудовойДоговорМикропредприятий) Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыеНачисления) Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаТрудовойДоговорМикропредприятий";
			КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятий";
			КомандаПечати.Представление = НСтр("ru = 'Трудовой договор (микропредприятий)';
												|en = 'Employment contract (microcompanies)'");
			КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
			
			Если СторонняяПечатнаяФорма Тогда
				КомандаПечати.Картинка = БиблиотекаКартинок.СторонняяПечатнаяФорма;
				КомандаПечати.ДополнительныеПараметры.Вставить("СторонняяПечатнаяФорма", Истина);
			КонецЕсли;
			
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			Если Не Пользователи.ЭтоПолноправныйПользователь() И ИдентификаторыПФ <> Неопределено Тогда
				ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыеНачисления)
			Или Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
			КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаТрудовойДоговорМикропредприятий";
			КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятийБезДоступаКЗарплате";
			КомандаПечати.Представление = НСтр("ru = 'Трудовой договор (микропредприятий), без условий оплаты';
												|en = 'Employment contract (micro-enterprise), without payment terms'");
			КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
			
			Если СторонняяПечатнаяФорма Тогда
				КомандаПечати.Картинка = БиблиотекаКартинок.СторонняяПечатнаяФорма;
				КомандаПечати.ДополнительныеПараметры.Вставить("СторонняяПечатнаяФорма", Истина);
			КонецЕсли;
			
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			Если ИдентификаторыПФ <> Неопределено Тогда
				ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(МассивОбъектов) И ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ПечатаемыеСсылки = Новый Массив;
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, "ПриказОПриеме");
		Для Каждого Сотрудник Из МассивОбъектов Цикл
			
			СтрокаДанных = КадровыеДанные.Найти(Сотрудник, "Сотрудник");
			Если СтрокаДанных <> Неопределено И ЗначениеЗаполнено(СтрокаДанных.ПриказОПриеме) Тогда
				ПечатаемыеСсылки.Добавить(СтрокаДанных.ПриказОПриеме);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'По сотруднику %1 не найден приказ о приеме';
									|en = 'Hiring order for the %1 employee is not found'"), Сотрудник),
					Сотрудник)
			КонецЕсли;
			
		КонецЦикла;
		
		КадровыйЭДО.ПечатьСтороннейПечатнойФормы(Отчеты.ПечатнаяФормаТрудовойДоговорМикропредприятий,
			ПечатаемыеСсылки, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, МассивОбъектов);
		
	Иначе
		
		ПечатаемыеСсылки = МассивОбъектов;
		
		Если СписокСотрудников = Неопределено Тогда
			ДополнительныеПараметры = Неопределено;
		Иначе
			
			СписокОтборов = Новый Массив;
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				СписокОтборов, "СсылкаНаСотрудника", ВидСравненияКомпоновкиДанных.ВСписке, СписокСотрудников);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Отбор", СписокОтборов);
			
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ВывестиВКоллекциюПечатнуюФорму("Отчет.ПечатнаяФормаТрудовойДоговорМикропредприятий",
			ПечатаемыеСсылки, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ВнешниеНаборыДанных(), ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Сформировать(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Если РезультатКомпоновки.ОтчетПустой Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговорМикропредприятий";
	
	Для Каждого ДанныеСсылок Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеСсылок.Строки Цикл
			
			НомерСтрокиНачалоОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Если ДанныеДетальныхЗаписей.Строки.Количество() > 0 Тогда
				ДанныеЗаписей = ДанныеДетальныхЗаписей.Строки[0];
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, ДанныеЗаписей);
			
			ПараметрыНумерации = Новый Структура;
			УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, 1);
			УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, 1);
			
			ДанныеПараметров = Новый Структура;
			ДанныеПараметров.Вставить("ПараметрыНумерации", ПараметрыНумерации);
			ДанныеПараметров.Вставить("ДанныеСсылок", ДанныеЗаписей);
			ДанныеПараметров.Вставить("ДанныеДетальныхЗаписей", ДанныеДетальныхЗаписей);
			ДанныеПараметров.Вставить("ДанныеПользовательскихПолей", ДанныеПользовательскихПолей);
			
			ТрудовойДоговорВывестиРаздел("Шапка", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ОбщиеПоложения", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботника", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботодателя", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ОплатаТрудаРаботника", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_РабочееВремяИВремяОтдыхаРаботника", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ОхранаТруда", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_СоциальноеСтрахованиеИИныеГарантии", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ИныеУсловияТрудовогоДоговора", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ИзменениеУсловийТрудовогоДоговора", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ОтветственностьСторонТрудовогоДоговора", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Раздел_ЗаключительныеПоложения", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			ТрудовойДоговорВывестиРаздел("Подвал", ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ДанныеПараметров);
			
			Если ПараметрыПечати <> Неопределено Тогда
				КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, РезультатКомпоновки.ИдентификаторыМакета,
					НомерСтрокиНачалоОбласти, ДанныеДетальныхЗаписей, ДанныеСсылок.СсылкаНаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеСсылок.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТрудовойДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеПараметров)
	
	ОбластьНачалаРаздела = Новый ТабличныйДокумент;
	НомерОбласти = 1;
	
	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	Для каждого ВложеннаяОбласть Из ОбластьРаздела.Области Цикл
		
		Если ОбластьРаздела.Области.Количество() > 1 И ВложеннаяОбласть.Имя = ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимаяОбласть = ОбластьРаздела.ПолучитьОбласть(ВложеннаяОбласть.Имя);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(ВыводимаяОбласть,
			ДанныеПараметров.ПараметрыНумерации, ДанныеПараметров.ДанныеСсылок, ДанныеПараметров.ДанныеПользовательскихПолей);
		
		Если ВложеннаяОбласть.Имя = "Пункт_14_а" Тогда
			
			СтрокаТарифнойСтавки = Неопределено;
			СтрокаСдельнойОплатыТруда = Неопределено;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
				И ДанныеПараметров.ДанныеДетальныхЗаписей.Владелец().
					Колонки.Найти("РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени") <> Неопределено Тогда
				
				КатегорииСдельнойОплатыТруда = РасчетЗарплаты.КатегорииСдельнойОплатыТруда();
				Для Каждого СтрокаНачислений Из ДанныеПараметров.ДанныеДетальныхЗаписей.Строки Цикл
					
					Если СтрокаНачислений.РаботаОплатаТрудаНачислениеТарифнойСтавки = Истина Тогда
						СтрокаТарифнойСтавки = СтрокаНачислений;
					КонецЕсли;
					
					Если КатегорииСдельнойОплатыТруда.Найти(СтрокаНачислений.РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
						СтрокаСдельнойОплатыТруда = СтрокаНачислений;
					КонецЕсли;
					
					Если СтрокаТарифнойСтавки <> Неопределено
						И СтрокаСдельнойОплатыТруда <> Неопределено Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СтрокаТарифнойСтавки <> Неопределено
				Или СтрокаСдельнойОплатыТруда <> Неопределено Тогда
				
				ДанныеОплатыТруда = Новый Структура("ТарифнаяСтавка,СдельнаяОплатаТруда");
				Если СтрокаСдельнойОплатыТруда <> Неопределено Тогда
					ДанныеОплатыТруда.СдельнаяОплатаТруда = Строка(СтрокаСдельнойОплатыТруда.РаботаОплатаТрудаНачисление) + " " + Формат(СтрокаСдельнойОплатыТруда.РаботаОплатаТрудаРазмер, "ЧДЦ=2")
				Иначе
					ДанныеОплатыТруда.ТарифнаяСтавка = ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(СтрокаТарифнойСтавки);
				КонецЕсли;
				
				ВыводимаяОбласть.Параметры.Заполнить(ДанныеОплатыТруда);
				
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление"
			Или ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
			
			КоллекцияСтрок = Новый Массив;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
				И ДанныеПараметров.ДанныеДетальныхЗаписей.Владелец().
					Колонки.Найти("РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени") <> Неопределено Тогда
				
				Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Тогда
					
					КатегорииСдельнойОплатыТруда = РасчетЗарплаты.КатегорииСдельнойОплатыТруда();
					КатегорииКомпенсаций = РасчетЗарплаты.КатегорииНачисленийКомпенсационныхВыплат();
					
					Для Каждого СтрокаНачислений Из ДанныеПараметров.ДанныеДетальныхЗаписей.Строки Цикл
						
						Если СтрокаНачислений.РаботаОплатаТрудаНачислениеТарифнойСтавки = Истина Тогда
							Продолжить;
						КонецЕсли;
						
						Если КатегорииСдельнойОплатыТруда.Найти(СтрокаНачислений.РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если КатегорииКомпенсаций.Найти(СтрокаНачислений.РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							КоллекцияСтрок.Добавить(СтрокаНачислений);
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
					
					КатегорииСдельнойОплатыТруда = РасчетЗарплаты.КатегорииСдельнойОплатыТруда();
					КатегорииКомпенсаций = РасчетЗарплаты.КатегорииНачисленийКомпенсационныхВыплат();
					
					Для Каждого СтрокаНачислений Из ДанныеПараметров.ДанныеДетальныхЗаписей.Строки Цикл
						
						Если СтрокаНачислений.РаботаОплатаТрудаНачислениеТарифнойСтавки = Истина Тогда
							Продолжить;
						КонецЕсли;
						
						Если КатегорииСдельнойОплатыТруда.Найти(СтрокаНачислений.РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если КатегорииКомпенсаций.Найти(СтрокаНачислений.РаботаОплатаТрудаНачислениеКатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						КоллекцияСтрок.Добавить(СтрокаНачислений);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КоллекцияСтрок.Количество() = 0 Тогда
				
				ВыводимаяОбласть.Параметры.РаботаОплатаТрудаНачисление =
					Символы.ПС
					+ Символы.ПС
					+ Символы.ПС
					+ Символы.ПС;
				
				ВыводимаяОбласть.Параметры.РаботаОплатаТрудаРазмер = 0;
				
			Иначе
				
				ОбластьТаблицы = Новый ТабличныйДокумент;
				Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
					
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыОбластиМакета(ВыводимаяОбласть,
						ДанныеПараметров.ПараметрыНумерации,
						ДанныеПараметров.ДанныеСсылок,
						ДанныеПараметров.ДанныеПользовательскихПолей,
						СтрокаКоллекции);
					
					ОбластьТаблицы.Вывести(ВыводимаяОбласть);
					
				КонецЦикла;
				
				ВыводимаяОбласть = ОбластьТаблицы;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НомерОбласти = 1 И ИмяОбласти = "Подвал" Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если НомерОбласти > 2 Тогда
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		Иначе
			
			ОбластьНачалаРаздела.Вывести(ВыводимаяОбласть);
			Если НомерОбласти = 2 Тогда
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьНачалаРаздела);
				ОбластьНачалаРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерОбласти = НомерОбласти + 1;
		
		Если СтрДлина(ВложеннаяОбласть.Имя) = 8 И СтрНайти(ВложеннаяОбласть.Имя, "Пункт_") = 1 Тогда
			ДанныеПараметров.ПараметрыНумерации.НомерПункта = ДанныеПараметров.ПараметрыНумерации.НомерПункта + 1;
			УстановитьНомерПодпунктаВПараметрахНумерации(ДанныеПараметров.ПараметрыНумерации, 1);
		ИначеЕсли СтрЧислоВхождений(ВложеннаяОбласть.Имя, "_") = 2 Тогда
			УстановитьНомерПодпунктаВПараметрахНумерации(ДанныеПараметров.ПараметрыНумерации, ДанныеПараметров.ПараметрыНумерации.НомерПодпункта + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьНачалаРаздела <> Неопределено Тогда
		
		Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьНачалаРаздела);
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Раздел_") = 1 Тогда
		УстановитьНомерРазделаВПараметрахНумерации(ДанныеПараметров.ПараметрыНумерации, ДанныеПараметров.ПараметрыНумерации.НомерРаздела + 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, Знач НомерРаздела)
	
	ПараметрыНумерации.Вставить("НомерРаздела", НомерРаздела);
	ПараметрыНумерации.Вставить("НомерРазделаВРимскойНотации",
		СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(НомерРаздела, Ложь));
	
КонецПроцедуры

Процедура УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПункта)
	
	ПараметрыНумерации.Вставить("НомерПункта", НомерПункта);
	
КонецПроцедуры

Процедура УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПодпункта)
	
	ПараметрыНумерации.Вставить("НомерПодпункта",       НомерПодпункта);
	ПараметрыНумерации.Вставить("НомерПодпунктаБуквой", НомерПодпунктаБуквой(НомерПодпункта));
	
КонецПроцедуры

Функция ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(СтрокаНачисления)
	
	ПредставлениеТарифнойСтавки = "";
	
	Если ЗначениеЗаполнено(СтрокаНачисления.РаботаОплатаТрудаЗначениеОсновногоПоказателя) Тогда
		
		Если ЗначениеЗаполнено(СтрокаНачисления.РаботаОплатаТрудаОсновнойПоказатель) Тогда
			
			ПредставлениеТарифнойСтавки = Строка(СтрокаНачисления.РаботаОплатаТрудаОсновнойПоказатель);
			
			Точность = СтрокаНачисления.РаботаОплатаТрудаОсновнойПоказательТочность;
			Денежный = (СтрокаНачисления.РаботаОплатаТрудаОсновнойПоказательТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный);
			ВидТарифнойСтавки = СтрокаНачисления.РаботаОплатаТрудаОсновнойПоказательВидТарифнойСтавки;
			
		Иначе
			
			ПредставлениеТарифнойСтавки = Строка(СтрокаНачисления.РаботаОплатаТрудаНачисление);
			
			Точность = 2;
			Денежный = Истина;
			ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
			
		КонецЕсли;
		
		ПредставлениеТарифнойСтавки =
			ПредставлениеТарифнойСтавки + ": " + Формат(СтрокаНачисления.РаботаОплатаТрудаЗначениеОсновногоПоказателя, "ЧДЦ=" + Точность + "; ЧГ=");
		
		Если Денежный Тогда
			
			ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'руб.';
																					|en = 'rub.'");
			
			Если ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'за час';
																						|en = 'per hour'");
			ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + НСтр("ru = 'за день';
																						|en = 'per day'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеТарифнойСтавки = Строка(СтрокаНачисления.РаботаОплатаТрудаНачисление);
		Если ЗначениеЗаполнено(СтрокаНачисления.РаботаОплатаТрудаРазмер) Тогда
			ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + Формат(СтрокаНачисления.РаботаОплатаТрудаРазмер, "ЧДЦ=2");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеТарифнойСтавки;
	
КонецФункции

Функция ВнешниеНаборыДанных() Экспорт
	
	ВнешниеНаборы = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешниеНаборы.Вставить("ДанныеОрганизаций", ЗарплатаКадрыОтчеты.ДанныеОрганизаций());
	ВнешниеНаборы.Вставить("ДанныеГрафиков", ДанныеГрафиков());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВнешниеНаборы;
	
КонецФункции

Функция ДанныеГрафиков()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка КАК Ссылка,
		|	СУММА(ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Часов) КАК Часов,
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.НомерДняЦикла КАК НомерДняЦикла
		|ПОМЕСТИТЬ ВТДанныеОРабочихЧасах
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников.ДанныеОРабочихЧасах КАК ГрафикиРаботыСотрудниковДанныеОРабочихЧасах
		|ГДЕ
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.ВидВремени.РабочееВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.Ссылка,
		|	ГрафикиРаботыСотрудниковДанныеОРабочихЧасах.НомерДняЦикла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботы,
		|	ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя КАК СокращеннаяРабочаяНеделя,
		|	ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя КАК НеполноеРабочееВремя,
		|	СУММА(ВЫБОР
		|			КОГДА ГрафикиРаботыСотрудников.ДеньВключенВГрафик
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОписаниеДлительностиРабочейНеделиВДнях,
		|	МАКСИМУМ(ДанныеОРабочихЧасах.Часов) КАК ПродолжительностьРабочегоДня
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников.ШаблонЗаполнения КАК ГрафикиРаботыСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРабочихЧасах КАК ДанныеОРабочихЧасах
		|		ПО ГрафикиРаботыСотрудников.Ссылка = ДанныеОРабочихЧасах.Ссылка
		|			И ГрафикиРаботыСотрудников.НомерСтроки = ДанныеОРабочихЧасах.НомерДняЦикла
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботыСотрудников.Ссылка,
		|	ГрафикиРаботыСотрудников.Ссылка.ДлительностьРабочейНедели,
		|	ГрафикиРаботыСотрудников.Ссылка.СокращеннаяРабочаяНеделя,
		|	ГрафикиРаботыСотрудников.Ссылка.НеполноеРабочееВремя";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НомерПодпунктаБуквой(НомерПодпункта)
	Возврат Сред("абвгдежзиклмнопрстуфхцчшщ", НомерПодпункта, 1) //АПК:1036 орфографию в азбуке не проверять
КонецФункции

#КонецОбласти

#КонецЕсли