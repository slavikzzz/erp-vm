#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет поддерживаемый набор суммовых показателей справки-расчета.
// См. соответствующие методы модулей подсистемы СправкиРасчеты.
// Справка-расчет должна поддерживать хотя бы один набор.
// Если поддерживается несколько наборов, то конкретный набор выбирается в форме
// и передается через свойство отчета НаборПоказателейОтчета.
// 
// См. также ПолучитьНаборПоказателей
//
// Возвращаемое значение:
//  Массив - номера наборов суммовых показателей.
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
	Возврат МассивПоказателей;
	
КонецФункции

// Задает набор показателей, которые позволяет анализировать отчет.
//
// Возвращаемое значение:
//   Массив      - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	// См. ПоддерживаемыеНаборыСуммовыхПоказателей
	Показатели = Новый Массив;
	Показатели.Добавить("НУ");
	Показатели.Добавить("БУ");
	
	Возврат Показатели;
	
КонецФункции

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант Из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
// Задает набор вариантов настроек.
//
// Возвращаемое значение:
//   Массив  из Структура
//
Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПереоценкаВалютныхСредств", "Переоценка валютных средств"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
//
// Параметры:
//  ПараметрыОтчета - Структура - см.СправкиРасчеты.КонтекстФормированияОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		ПараметрыОтчета.СхемаКомпоновкиДанных.Параметры.УдалитьКорректировку.Значение = ПараметрыОтчета.НачалоПериода <> '20221201'; 
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	
	ТаблицыОтчета = Новый Структура;
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("Остаток");
	МассивСумм.Добавить("Погашение");
	МассивСумм.Добавить("ПогашениеПоТекущемуКурсу");
	МассивСумм.Добавить("СуммаПереоценкиНУ");
	МассивСумм.Добавить("ДоходыНУ");
	МассивСумм.Добавить("РасходыНУ");
	ТаблицыОтчета.Вставить("ПереоценкаТребованийПриПогашенииЗадолженности", МассивСумм);
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("Остаток");
	МассивСумм.Добавить("ОстатокПоТекущемуКурсу");
	МассивСумм.Добавить("СуммаПереоценкиНУ");
	МассивСумм.Добавить("ПризнанныеДоходыКонецМесяцаНУ");
	МассивСумм.Добавить("ОтложенныеДоходыКонецМесяцаНУ");
	МассивСумм.Добавить("ПризнанныеРасходыКонецМесяцаНУ");
	МассивСумм.Добавить("ОтложенныеРасходыКонецМесяцаНУ");
	ТаблицыОтчета.Вставить("ПереоценкаТребованийНаКонецМесяца", МассивСумм);
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("ОстатокПризнаниеОтложенныхРазницВал");
	МассивСумм.Добавить("ОтложенныеДоходы");
	МассивСумм.Добавить("ОтложенныеРасходы");
	МассивСумм.Добавить("ПогашениеВал");
	МассивСумм.Добавить("РеализованныеДоходы");
	МассивСумм.Добавить("РеализованныеРасходы");
	ТаблицыОтчета.Вставить("ПризнаниеОтложенныхРазниц", МассивСумм);
	
	СоставНабораПоказателей = ПараметрыОтчета.СоставНабораПоказателей;
	СоставНабораПоказателей.Вставить(0, "Вал");
	
	Для Каждого ТаблицаОтчета Из ТаблицыОтчета Цикл
		
		ИмяТаблицы = ТаблицаОтчета.Ключ;
		
		МассивСумм = ТаблицаОтчета.Значение;
		
		Группировка = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"Заголовки." + ИмяТаблицы);
		
		Таблица = НайтиПоИмени(Группировка.Структура,ИмяТаблицы);
		
		ГруппировкаКонтрагент        = НайтиПоИмени(Таблица.Строки, "Группировка" + ИмяТаблицы + "Контрагент");
		ГруппировкаДоговор           = НайтиПоИмени(Таблица.Строки, "Группировка" + ИмяТаблицы + "Договор");
		ГруппировкаРасчетныйДокумент = НайтиПоИмени(Таблица.Строки, "Группировка" + ИмяТаблицы + "РасчетныйДокумент");
		
		МассивГруппировок = Новый Массив;
		МассивГруппировок.Добавить(ГруппировкаКонтрагент);
		МассивГруппировок.Добавить(ГруппировкаДоговор);
		МассивГруппировок.Добавить(ГруппировкаРасчетныйДокумент);
		
		Номер = 0;
		
		Для Каждого Группировка Из МассивГруппировок Цикл
			
			Если Группировка = Неопределено 
				Или Не Группировка.Использование Тогда 
				Номер = Номер + 1;
				Продолжить;
			КонецЕсли;
			
			Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			Если Номер = 0 Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Контрагент");
			ИначеЕсли Номер = 1 Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Договор");
			ИначеЕсли Номер = 2 Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "РасчетныйДокумент");
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Период");
				Если ИмяТаблицы = "ПереоценкаТребованийПриПогашенииЗадолженности" Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ДокументОплаты");
				ИначеЕсли ИмяТаблицы = "ПереоценкаТребованийНаКонецМесяца" Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ДокументПереоценки");
				КонецЕсли;
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Счет");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Валюта");
				Если ИмяТаблицы <> "ПризнаниеОтложенныхРазниц" Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "КурсСКратностью");
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяТаблицы <> "ПризнаниеОтложенныхРазниц" Тогда
				Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				ПодГруппа = Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ПодГруппа.Расположение 	= РасположениеПоляКомпоновкиДанных.Вертикально;
				
				Для Каждого ИмяПоказателя Из СоставНабораПоказателей Цикл
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
				КонецЦикла;
			КонецЕсли;
				
			Для Каждого ИмяСуммы Из МассивСумм Цикл
				Группа = Группировка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
				
				Если ИмяТаблицы <> "ПризнаниеОтложенныхРазниц" Тогда 
					ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
					ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
					Если ИмяСуммы = "Остаток"
						Или ИмяСуммы = "Погашение" Тогда
						Для Каждого ИмяПоказателя Из СоставНабораПоказателей Цикл
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСуммы + ИмяПоказателя);
						КонецЦикла;
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ПустаяСтрока.Вал");
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, ИмяСуммы);
					КонецЕсли;
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, ИмяСуммы);
				КонецЕсли;
			КонецЦикла;

			Номер = Номер + 1;
		
		КонецЦикла;
		
	КонецЦикла;

	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(Контекст) Экспорт
	
	Возврат СправкиРасчеты.ЗаголовокОтчета(Контекст);
	
КонецФункции

Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	Если Контекст.СхемаКомпоновкиДанных.Параметры.УдалитьКорректировку.Значение Тогда
		
		ОбластьКорректировки = Результат.НайтиТекст("Корректировка налоговой базы по Письму Минфина от 22.12.2022 03-03-10/126074");
		
		Если ОбластьКорректировки <> Неопределено Тогда
			ИндексОбласти = Формат(ОбластьКорректировки.Верх, "ЧГ=0");
			ОбластьУдаления = Результат.Область("R"+ ИндексОбласти + "C1:R"+ ИндексОбласти +"2C3");
			Результат.УдалитьОбласть(ОбластьУдаления, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
	КонецЕсли;
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст);
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоИмени(Структура, Имя)
	
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат Группировка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
