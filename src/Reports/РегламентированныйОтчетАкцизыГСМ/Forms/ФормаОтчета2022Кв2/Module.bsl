#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "12/01/2022";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.ВариантСрокаПредставления = Параметры.ВариантСрокаПредставления;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР21М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР22М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР23М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР24М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР25М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП3М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП4М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП5М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ВариантСрокаПредставления", 1);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	РегламентированнаяОтчетностьЗагрузка.ДополнитьСтруктуруРеквизитовПараметрамиКопирования(СтруктураРеквизитовФормы);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Ложь;
	
	РегламентированнаяОтчетностьЗагрузка.ЗаполнитьПарметрыКопирования(ЭтотОбъект);
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		Если СтруктураРеквизитовФормы.мВыбраннаяФорма = СтруктураРеквизитовФормы.мСкопированаФорма 
			Или СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено Тогда
			
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.мСохраненныйДок.Организация)
				<> РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию ИЛИ ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		УстановитьОКТМОНаПервойСтраницеРаздела1();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОКТМОНаПервойСтраницеРаздела1()
	
	ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если ДеревоРаздела1.Строки.Количество() = 1 Тогда
		
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
			РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
			СтруктураПараметров);
			
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
			
		КонецЕсли;
		
		ДеревоРаздела1.Строки[0].Данные.Вставить("П000010001003", ОргОКТМО);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела1, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
		
	Иначе
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			Если Сред(КПП, 5, 2) = "50"
				И РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
				
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1  = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР21М1 = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппыР22М1 = "П00022М1";
	СтруктураРеквизитовФормы.мИдГруппыР23М1 = "П00023М1";
	СтруктураРеквизитовФормы.мИдГруппыР24М1 = "П00024М1";
	СтруктураРеквизитовФормы.мИдГруппыР25М1 = "П00025М1";
	СтруктураРеквизитовФормы.мИдГруппыП1М1  = "П00101М1";
	СтруктураРеквизитовФормы.мИдГруппыП1М2  = "П00101М2";
	СтруктураРеквизитовФормы.мИдГруппыП2М1  = "П00102М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М2  = "П00102М2";
	СтруктураРеквизитовФормы.мИдГруппыП2М3  = "П00102М3";
	СтруктураРеквизитовФормы.мИдГруппыП2М4  = "П00102М4";
	СтруктураРеквизитовФормы.мИдГруппыП3М1  = "П00103М1";
	СтруктураРеквизитовФормы.мИдГруппыП4М1  = "П00104М1";
	СтруктураРеквизитовФормы.мИдГруппыП5М1  = "П00105М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М102000");
	ИменаГраф.Добавить("П00001М103000");
	ИменаГраф.Добавить("П00001М104000");
	ИменаГраф.Добавить("П00001М105000");
	ИменаГраф.Добавить("П00001М106000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М100001");
	ИменаГраф.Добавить("П00021М100002");
	ИменаГраф.Добавить("П00021М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР21М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00022М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00022М100001");
	ИменаГраф.Добавить("П00022М100002");
	ИменаГраф.Добавить("П00022М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР22М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00023М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00023М100001");
	ИменаГраф.Добавить("П00023М100002");
	ИменаГраф.Добавить("П00023М100003");
	ИменаГраф.Добавить("П00023М100004");
	ИменаГраф.Добавить("П00023М100005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР23М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00024М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00024М100001");
	ИменаГраф.Добавить("П00024М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР24М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00025М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00025М100001");
	ИменаГраф.Добавить("П00025М100002");
	ИменаГраф.Добавить("П00025М100003");
	ИменаГраф.Добавить("П00025М100004");
	ИменаГраф.Добавить("П00025М100005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР25М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00101М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00101М102000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М2);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00101М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00101М200001");
	ИменаГраф.Добавить("П00101М200002");
	ИменаГраф.Добавить("П00101М200003");
	ИменаГраф.Добавить("П00101М200004");
	ИменаГраф.Добавить("П00101М200005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00102М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М107000");
	ИменаГраф.Добавить("П00102М111000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М2);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М3);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М4);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М208003");
	ИменаГраф.Добавить("П00102М208004");
	ИменаГраф.Добавить("П00102М208005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00102М3.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М309003");
	ИменаГраф.Добавить("П00102М309004");
	ИменаГраф.Добавить("П00102М309005");
	ИменаГраф.Добавить("П00102М309006");
	ИменаГраф.Добавить("П00102М309007");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М3, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00102М4.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М410003");
	ИменаГраф.Добавить("П00102М410004");
	ИменаГраф.Добавить("П00102М410005");
	ИменаГраф.Добавить("П00102М410006");
	ИменаГраф.Добавить("П00102М410007");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М4, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00103М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00103М108000");
	ИменаГраф.Добавить("П00103М109000");
	ИменаГраф.Добавить("П00103М110000");
	ИменаГраф.Добавить("П00103М111000");
	ИменаГраф.Добавить("П00103М112000");
	ИменаГраф.Добавить("П00103М113000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП3М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00104М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00104М106003");
	ИменаГраф.Добавить("П00104М106004");
	ИменаГраф.Добавить("П00104М107003");
	ИменаГраф.Добавить("П00104М108003");
	ИменаГраф.Добавить("П00104М109003");
	ИменаГраф.Добавить("П00104М110003");
	ИменаГраф.Добавить("П00104М111003");
	ИменаГраф.Добавить("П00104М112003");
	ИменаГраф.Добавить("П00104М113003");
	ИменаГраф.Добавить("П00104М114003");
	ИменаГраф.Добавить("П00104М115003");
	ИменаГраф.Добавить("П00104М116003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП4М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00105М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00105М108003");
	ИменаГраф.Добавить("П00105М109003");
	ИменаГраф.Добавить("П00105М109004");
	ИменаГраф.Добавить("П00105М109503");
	ИменаГраф.Добавить("П00105М110003");
	ИменаГраф.Добавить("П00105М111003");
	ИменаГраф.Добавить("П00105М112003");
	ИменаГраф.Добавить("П00105М113003");
	ИменаГраф.Добавить("П00105М114003");
	ИменаГраф.Добавить("П00105М115003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП5М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР21М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР22М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР23М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР24М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР25М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП3М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП4М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП5М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение5", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыйРаздел(ИмяРаздела)
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, ТекВетка);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела,
	ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение3";
	СтрокаУровня1.Представление      = "Приложение 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение4";
	СтрокаУровня1.Представление      = "Приложение 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение5";
	СтрокаУровня1.Представление      = "Приложение 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2022Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "КодыПоказателя_Р23" И КодПоказателя = "30049"
						И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20220901' Тогда
						
						Продолжить;
						
					ИначеЕсли (Область.Имя = "КБК_Р1" ИЛИ Область.Имя = "КБК_Р2") И КодПоказателя = "18210302460011000110"
						И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20230101' Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора[?(СтруктураРеквизитовФормы.ИП,
	"МестаПредставленияИП", "МестаПредставленияЮЛ")]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М102000", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Р1"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_Р2_П2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020002003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Р2"]);
	//Подраздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р21"]);
	//Подраздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00022М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р22"]);
	//Подраздел 2.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00023М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р23"]);
	//Подраздел 2.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00024М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р24"]);
	//Подраздел 2.5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00025М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р25"]);
	
	//Раздел 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030002003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030003003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Р3"]);
	
	//Приложение 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010000503", 1, ,
	"Выбор признака СЗПК", КоллекцияСписковВыбора["ПризнакиСЗПК_П1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_П1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М102000", 0, ,
	"Выбор единицы измерения мощности", КоллекцияСписковВыбора["КодыПоОКЕИ_П1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М200001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П1"]);
	
	//Приложение 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020000103", 1, ,
	"Выбор признака документа", КоллекцияСписковВыбора["ПризнакиДокумента_П2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М107000", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_Р2_П2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М208003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П2_Стр080"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М309003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П2_Стр090и100"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М410003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П2_Стр090и100"]);
	
	//Приложение 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001030000103", 1, ,
	"Выбор признака организации", КоллекцияСписковВыбора["ПризнакиОрганизации_П3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001030003003", 1, ,
	"Выбор признака свидетельства", КоллекцияСписковВыбора["ПризнакиСвид_П3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001030007003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_П3"]);
	
	//Приложение 4.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001040001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_П4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001040002003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П4_Стр020"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00104М107003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П4_Стр070"]);
	
	//Приложение 5.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001050001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПТ_П5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001050002003", 1, ,
	"Выбор признака показателя Ддт", КоллекцияСписковВыбора["ПризнакиПоказателяДдт_П5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00105М108003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателя_П5"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	КодФормыРеорганизации = СокрЛП(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ВозможныеПериоды = ВозможныеПериоды(Форма);
	
	КодОтчетногоПериода = "";
	Если ВозможныеПериоды <> Неопределено Тогда
		Если ЗначениеЗаполнено(КодФормыРеорганизации) И КодФормыРеорганизации <> "9" Тогда
			КодОтчетногоПериода = ВозможныеПериоды[МесяцОкончания + 11];
		Иначе
			КодОтчетногоПериода = ВозможныеПериоды[МесяцОкончания - 1];
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
	Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеПериоды(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 1 Тогда
		Возврат СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12,71,72,73,74,75,76,77,78,79,80,81,82", ",");
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 2 Тогда
		Возврат СтрРазделить("A1,A2,A3,A4,A5,A6,A7,A8,A9,A0,AA,AB,B1,B2,B3,B4,B5,B6,B7,B8,B9,B0,BA,BB", ",");
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 3 Тогда
		Возврат СтрРазделить("C1,C2,C3,C4,C5,C6,C7,C8,C9,C0,CA,CB,D1,D2,D3,D4,D5,D6,D7,D8,D9,D0,DA,DB", ",");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением
	= (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура(
		"Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП",
		Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки
	= ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП",
		Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохраняется %1...';
			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант,
		Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сохраняется %1...';
		|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен,
	Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
		ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
			ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц
		= Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ВариантСрокаПредставления", СтруктураРеквизитовФормы.ВариантСрокаПредставления);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		СписокСохранения.Свойство("ВариантСрокаПредставления", СтруктураРеквизитовФормы.ВариантСрокаПредставления);
		Если СтруктураРеквизитовФормы.ВариантСрокаПредставления = Неопределено Тогда
			СтруктураРеквизитовФормы.ВариантСрокаПредставления = 1;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки
		= ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено,
		Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена",
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00023М100004") ИЛИ СтрНачинаетсяС(Область.Имя, "П00023М100005")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00025М100004") ИЛИ СтрНачинаетсяС(Область.Имя, "П00025М100005")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М309006") ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М309007")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М410006") ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М410007")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00104М106003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00104М106004")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00105М109003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00105М109004") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если СтрНачинаетсяС(Область.Имя, "П00023М100004") ИЛИ СтрНачинаетсяС(Область.Имя, "П00023М100005") Тогда
			ПрефиксИмениОблКодПериода = "П00023М100004";
			ПрефиксИмениОблГодПериода = "П00023М100005";
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00025М100004") ИЛИ СтрНачинаетсяС(Область.Имя, "П00025М100005") Тогда
			ПрефиксИмениОблКодПериода = "П00025М100004";
			ПрефиксИмениОблГодПериода = "П00025М100005";
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00102М309006") ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М309007") Тогда
			ПрефиксИмениОблКодПериода = "П00102М309006";
			ПрефиксИмениОблГодПериода = "П00102М309007";
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00102М410006") ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М410007") Тогда
			ПрефиксИмениОблКодПериода = "П00102М410006";
			ПрефиксИмениОблГодПериода = "П00102М410007";
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00104М106003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00104М106004") Тогда
			ПрефиксИмениОблКодПериода = "П00104М106003";
			ПрефиксИмениОблГодПериода = "П00104М106004";
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00105М109003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00105М109004") Тогда
			ПрефиксИмениОблКодПериода = "П00105М109003";
			ПрефиксИмениОблГодПериода = "П00105М109004";
		КонецЕсли;
		
		Постфикс = ?(Сред(Область.Имя, 7, 1) = "М", Сред(Область.Имя, 14), "");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОтображатьВыборГода", Истина);
		ДопПараметры.Вставить("ОтображатьМесяцы", Истина);
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ДополнительныеПараметры", ДопПараметры);
		
		МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01."
		+ СокрЛП(ТабличныйДокумент.Область(ПрефиксИмениОблКодПериода + Постфикс).Значение) + "."
		+ СокрЛП(ТабличныйДокумент.Область(ПрефиксИмениОблГодПериода + Постфикс).Значение));
		Если ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
			ПараметрыВыбора.Вставить("НачалоПериода", МесяцИГод_Дата);
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(МесяцИГод_Дата));
		Иначе
			ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ОблКодПериода", ТабличныйДокумент.Область(ПрефиксИмениОблКодПериода + Постфикс));
		СтруктПарам.Вставить("ОблГодПериода", ТабличныйДокумент.Область(ПрефиксИмениОблГодПериода + Постфикс));
		СтруктПарам.Вставить("Область", Область);
		СтруктПарам.Вставить("Элемент", Элемент);
		
		Оп = Новый ОписаниеОповещения("ВыбратьМесяцИГодЗавершение", ЭтотОбъект, СтруктПарам);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборОтчетногоПериода",
		ПараметрыВыбора, ЭтаФорма, , , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00104М114003") И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2025 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СписокКодов = Новый СписокЗначений;
			СписокКодов.Добавить(0, "Пустое значение                 ");
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2022 Тогда
				СписокКодов.Добавить(55900, "55 900 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2023 Тогда
				СписокКодов.Добавить(58700, "58 700 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2024 Тогда
				СписокКодов.Добавить(61600, "61 600 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2025 Тогда
				СписокКодов.Добавить(64700, "64 700 рублей за 1 тонну");
			КонецЕсли;
			
			Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
			Новый Структура("Элемент,Область", Элемент, Область));
			
			ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокКодов.НайтиПоЗначению(Область.Значение));
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П001050006003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		ДатаВторогоПредшествующегоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 2);
		
		Если Год(ДатаВторогоПредшествующегоМесяца) <= 2025 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СписокКодов = Новый СписокЗначений;
			СписокКодов.Добавить(0, "Пустое значение                 ");
			Если Год(ДатаВторогоПредшествующегоМесяца) = 2022 Тогда
				СписокКодов.Добавить(52250, "52 250 рублей за 1 тонну");
			ИначеЕсли Год(ДатаВторогоПредшествующегоМесяца) = 2023 Тогда
				СписокКодов.Добавить(53850, "53 850 рублей за 1 тонну");
			ИначеЕсли Год(ДатаВторогоПредшествующегоМесяца) = 2024 Тогда
				СписокКодов.Добавить(55500, "55 500 рублей за 1 тонну");
			ИначеЕсли Год(ДатаВторогоПредшествующегоМесяца) = 2025 Тогда
				СписокКодов.Добавить(57200, "57 200 рублей за 1 тонну");
			КонецЕсли;
			
			Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
			Новый Структура("Элемент,Область", Элемент, Область));
			
			ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокКодов.НайтиПоЗначению(Область.Значение));
			
		КонецЕсли;
		
	ИначеЕсли (СтрНачинаетсяС(Область.Имя, "П00104М115003") ИЛИ Область.Имя = "П001050004003")
		И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение          ");
		СписокКодов.Добавить(0.65, "0,650");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010001003" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
			|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М102000")
		ИЛИ ИмяПоказателя = "П000020002003" ИЛИ ИмяПоказателя = "П000030003003" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
			|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "ИННРеорганизованнойОрганизации"
		ИЛИ ИмяПоказателя = "П001030001003" ИЛИ ИмяПоказателя = "П001030004003" Тогда
		ИННЮЛ = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИННЮЛ = СтрДлина(ИННЮЛ);
		Если ДлинаИННЮЛ = 10 ИЛИ ДлинаИННЮЛ = 0 Тогда
			Область.Значение = ИННЮЛ;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр. Значение очищено';
									|en = 'ИНН юридического лица должен состоять из 10 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "КППРеорганизованнойОрганизации"
		ИЛИ ИмяПоказателя = "П001030002003" ИЛИ ИмяПоказателя = "П001030005003" Тогда
		КПП = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКПП = СтрДлина(КПП);
		Если ДлинаКПП = 9 ИЛИ ДлинаКПП = 0 Тогда
			Область.Значение = КПП;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'КПП должен состоять из 9 символов. Значение очищено';
									|en = 'КПП должен состоять из 9 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М103000")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М104000")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М105000") Тогда
		
		Постфикс = Сред(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
		
		МассивИменПоказателей = Новый Массив;
		Если СтрНачинаетсяС(ИмяПоказателя, "П00001М103000") Тогда
			МассивИменПоказателей.Добавить("П00001М104000" + Постфикс);
			МассивИменПоказателей.Добавить("П00001М105000" + Постфикс);
		Иначе
			МассивИменПоказателей.Добавить("П00001М103000" + Постфикс);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			МассивКодовСтрок = Новый Массив;
			Для каждого ИмяПок Из МассивИменПоказателей Цикл
				Если ЗначениеЗаполнено(ТабличныйДокумент.Области.Найти(ИмяПок).Значение) Тогда
					МассивКодовСтрок.Добавить(Сред(ИмяПок, 9, 3));
				КонецЕсли;
			КонецЦикла;
			Если МассивКодовСтрок.Количество() > 0 Тогда
				Для каждого ИмяПок Из МассивИменПоказателей Цикл
					ТабличныйДокумент.Области.Найти(ИмяПок).Очистить();
				КонецЦикла;
				ПредстСтрок = ?(МассивКодовСтрок.Количество() > 1, "Значения в строках ", "Значение в строке ")
				+ СтрСоединить(МассивКодовСтрок, ", ") + ?(МассивКодовСтрок.Количество() > 1, " очищены", " очищено");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не допускается одновременное заполнение строки 030 и строк 040, 050. %1';
				|en = 'Не допускается одновременное заполнение строки 030 и строк 040, 050. %1'"), ПредстСтрок);
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020001003" Тогда
		
		ЗначенияПоВидуПодакцизногоТовара = ЗначенияОпределенныеПоВидуПодакцизногоТовара(ЗначПоказателя, ИмяРаздела);
		Если ЗначенияПоВидуПодакцизногоТовара.КБК <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000020002003");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.КБК;
			КонецЕсли;
		КонецЕсли;
		Если ЗначенияПоВидуПодакцизногоТовара.Ставка <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000020003003");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.Ставка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000030001003" Тогда
		
		ЗначенияПоВидуПодакцизногоТовара = ЗначенияОпределенныеПоВидуПодакцизногоТовара(ЗначПоказателя, ИмяРаздела);
		Если ЗначенияПоВидуПодакцизногоТовара.КБК <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000030003003");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.КБК;
			КонецЕсли;
		КонецЕсли;
		Если ЗначенияПоВидуПодакцизногоТовара.КодПоказателя <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000030002003");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.КодПоказателя;
			КонецЕсли;
		КонецЕсли;
		Если ЗначенияПоВидуПодакцизногоТовара.Ставка <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000030010500");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.Ставка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П001040001003" Тогда
		
		ЗначенияПоВидуПодакцизногоТовара = ЗначенияОпределенныеПоВидуПодакцизногоТовара(ЗначПоказателя, ИмяРаздела);
		Если ЗначенияПоВидуПодакцизногоТовара.КодПоказателя <> Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("П001040002003");
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЗначенияПоВидуПодакцизногоТовара.КодПоказателя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
	// Особая обработка.
	Если ИмяРаздела = "Приложение5" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	КонецЕсли;
	
	ПереопределитьПредставлениеНуля(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = "Добавить строку";
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = "Удалить строку";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
		|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначенияОпределенныеПоВидуПодакцизногоТовара(КодВидаПодакцизногоТовара, ИмяРаздела)
	
	КодВидаПодакцизногоТовара = СокрЛП(КодВидаПодакцизногоТовара);
	
	ГодДействия = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	КБК           = Неопределено;
	Ставка        = Неопределено;
	КодПоказателя = Неопределено;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		// КБК в разделе 2.
		//
		Если СтрРазделить("510,520,531,532,533,534,535,536", ",", Ложь).Найти(КодВидаПодакцизногоТовара) <> Неопределено Тогда
			КБК = "18210302060011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "630" Тогда
			КБК = "18210302070011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "640" Тогда
			КБК = "18210302080011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "650" Тогда
			КБК = "18210302042011000110";
		ИначеЕсли СтрРазделить("665,676", ",", Ложь).Найти(КодВидаПодакцизногоТовара) <> Неопределено Тогда
			КБК = "18210302041011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "671" Тогда
			КБК = "18210302310011000110";
		ИначеЕсли СтрРазделить("672,673,674", ",", Ложь).Найти(КодВидаПодакцизногоТовара) <> Неопределено Тогда
			КБК = "18210302300011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "677" Тогда
			КБК = "18210302330011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "680" Тогда
			КБК = "18210302420011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "681" Тогда
			КБК = "18210302430011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "740" Тогда
			КБК = "18210302440011000110";
		ИначеЕсли КодВидаПодакцизногоТовара = "741" Тогда
			КБК = "18210302450011000110";
		КонецЕсли;
		
		// Ставка акциза в разделе 2.
		//
		Если КодВидаПодакцизногоТовара = "677" Тогда
			
			// Ставка акциза определяется по данным Приложения 5.
			Ставка = СтавкаАкцизаНаСредниеДистилляты(КодВидаПодакцизногоТовара);
			
		Иначе
			
			Если ГодДействия = 2022 Тогда
				
				Ставка = ?(КодВидаПодакцизногоТовара = "510",    0, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "520",   53, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "531",  511, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "532",  511, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "533",  836, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "534", 1425, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "535", 1475, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "536", 1523, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "630", 9556, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "640", 6075, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "650", Окр(13100 + 4865 * 0.667), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "665", 13793, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "671",  2800, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "672", Окр(2800 + 774 * 0.667), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "673", Окр(2800 + 774 * 0.667), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "674", Окр(2800 + 774 * 0.667), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "676", 14169, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "680",  9000, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "681",  4500, Ставка);
				
			ИначеЕсли ГодДействия = 2023 Тогда
				
				Ставка = ?(КодВидаПодакцизногоТовара = "510",    0, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "520",   55, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "531",  531, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "532",  531, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "533",  869, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "534", 1482, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "535", 1534, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "536", 1584, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "630", 9938, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "640", 6318, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "650", Окр(13100 + 4865 * 0.833), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "665", 14345, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "671",  2800, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "672", Окр(2800 + 774 * 0.833), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "673", Окр(2800 + 774 * 0.833), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "674", Окр(2800 + 774 * 0.833), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "676", 14736, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "680",  9000, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "681",  4500, Ставка);
				
			ИначеЕсли ГодДействия = 2024 Тогда
				
				Ставка = ?(КодВидаПодакцизногоТовара = "510",     0, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "520",    57, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "531",   552, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "532",   552, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "533",   904, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "534",  1541, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "535",  1595, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "536",  1647, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "630", 10336, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "640",  6571, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "650", Окр(13100 + 4865 * 1), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "665", 14919, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "671",  2800, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "672", Окр(2800 + 774 * 1), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "673", Окр(2800 + 774 * 1), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "674", Окр(2800 + 774 * 1), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "676", 15325, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "680",  9000, Ставка);
				
			ИначеЕсли ГодДействия = 2025 Тогда
				
				Ставка = ?(КодВидаПодакцизногоТовара = "510",     0, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "520",    59, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "531",   574, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "532",   574, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "533",   940, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "534",  1603, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "535",  1659, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "536",  1713, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "630", 10749, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "640",  6834, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "650", Окр(13100 + 4865 * 1), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "665", 15516, Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "672", Окр(2800 + 774 * 1), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "673", Окр(2800 + 774 * 1), Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "674", Окр(2800 + 774 * 1), Ставка);
				
				Ставка = ?(КодВидаПодакцизногоТовара = "676", 15938, Ставка);
				Ставка = ?(КодВидаПодакцизногоТовара = "680",  9000, Ставка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" И КодВидаПодакцизногоТовара = "735" Тогда
		
		КБК = "18210302320011000110";
		
		КодПоказателя = "10037";
		
		// Ставка акциза в разделе 3 (служебный показатель; в процентах).
		Ставка = 30;
		
	ИначеЕсли ИмяРаздела = "Приложение4" И КодВидаПодакцизногоТовара = "671" Тогда
		
		КодПоказателя = "10036";
		
	КонецЕсли;
	
	Возврат Новый Структура("КБК, Ставка, КодПоказателя", КБК, Ставка, КодПоказателя);
	
КонецФункции

&НаСервере
Функция СтавкаАкцизаНаСредниеДистилляты(КодВидаПодакцизногоТовара)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		
		Если СокрЛП(ТабличныйДокумент.Область("П001050001003").Значение) = СокрЛП(КодВидаПодакцизногоТовара) Тогда
			Возврат ТабличныйДокумент.Область("П001050007003").Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		ДеревоПриложение5
		= ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение5"]);
		
		Если СокрЛП(ДеревоПриложение5.Строки[0].Данные["П001050001003"]) = СокрЛП(КодВидаПодакцизногоТовара) Тогда
			Возврат ДеревоПриложение5.Строки[0].Данные["П001050007003"];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодПериода = Формат(Месяц(РезультатВыбора.КонецПериода), "ЧЦ=2;ЧВН=");
	ГодПериода = Формат(Год(РезультатВыбора.КонецПериода), "ЧГ=");
	
	Если СокрЛП(ДополнительныеПараметры.ОблКодПериода.Значение) <> КодПериода
		ИЛИ СокрЛП(ДополнительныеПараметры.ОблГодПериода.Значение) <> ГодПериода Тогда
		ДополнительныеПараметры.ОблКодПериода.Значение = КодПериода;
		ДополнительныеПараметры.ОблГодПериода.Значение = ГодПериода;
	Иначе
		ДополнительныеПараметры.ОблКодПериода.Значение = "";
		ДополнительныеПараметры.ОблГодПериода.Значение = "";
	КонецЕсли;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныеПараметры.Область.Значение Тогда
			ДополнительныеПараметры.Область.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыР1М1 Тогда
		Подстрока = "строки 020-060";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки 020-060?';
							|en = 'Удалить выбранные строки 020-060?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыП1М2 Тогда
		Подстрока = "показатель";
		ТекстВопроса = НСтр("ru = 'Удалить выбранный показатель?';
							|en = 'Удалить выбранный показатель?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыП4М1 Тогда
		Подстрока = "строки 060-160";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки 060-160?';
							|en = 'Удалить выбранные строки 060-160?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппыП5М1 Тогда
		Подстрока = "строки 080-150";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки 080-150?';
							|en = 'Удалить выбранные строки 080-150?'");
	Иначе
		Подстрока = "строку";
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	АвтоРасчПоказатели = Новый Массив;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг)
				И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		ТДО["СекцияПояснение_НомерКорректировки"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
		МесяцевПредставления = "";
		СловоИстекшим = "";
		Если Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 1 Тогда
			НКРФ = "п.3 ст.204 НК РФ";
			СловоИстекшим = "истекшим ";
		ИначеЕсли Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 2 Тогда
			НКРФ = "п.3.1 ст.204 НК РФ";
			МесяцевПредставления = "третьего ";
		ИначеЕсли Форма.СтруктураРеквизитовФормы.ВариантСрокаПредставления = 3 Тогда
			НКРФ = "п.3.2 ст.204 НК РФ";
			МесяцевПредставления = "шестого ";
		КонецЕсли;
		ТДО.ТекстПояснения.Текст = СтрШаблон(НСтр(
		"ru = 'Значение кода налогового периода %1 установлено в соответствии с %2. Срок представления декларации - не позднее 25-го числа %3месяца, следующего за %4налоговым периодом';
		|en = 'Значение кода налогового периода %1 установлено в соответствии с %2. Срок представления декларации - не позднее 25-го числа %3месяца, следующего за %4налоговым периодом'"),
		СокрЛП(ТДО.Период.Значение), НКРФ, МесяцевПредставления, СловоИстекшим);
		
	ИначеЕсли ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Приложение1"
		ИЛИ ИмяРаздела = "Приложение2" ИЛИ ИмяРаздела = "Приложение3" ИЛИ ИмяРаздела = "Приложение4"
		ИЛИ ИмяРаздела = "Приложение5" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел2" Тогда
			
			КодВидаПТ = СокрЛП(ТДО.Найти("П000020001003").Значение);
			Если КодВидаПТ = "741" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П000020004003"));
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П000020004003"));
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Раздел3" Тогда
			
			Если НЕ ЗначениеЗаполнено(ТДО["П000030010500"].Значение) Тогда
				// Ручное редактирование стр.110.
				Инд = АвтоРасчПоказатели.Найти("П000030011003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П000030011003"));
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Приложение1" Тогда
			
			ПризнакСЗПК = СокрЛП(ТДО.Найти("П001010000503").Значение);
			Если ПризнакСЗПК = "1" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П001010000703"));
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П001010000803"));
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П001010000703"));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П001010000803"));
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Приложение5" Тогда
			
			Если ТДО["П001050003003"].Значение = 0 Тогда
				// Ручное редактирование стр.020.
				Инд = АвтоРасчПоказатели.Найти("П001050002003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П001050002003"));
				КонецЕсли;
			КонецЕсли;
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00105М108003_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				КодПоказателя = СокрЛП(Обл.Значение);
				Если КодПоказателя = "30027" ИЛИ КодПоказателя = "30028" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М110003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М111003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М112003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М113003_" + ИндексСтр));
				ИначеЕсли КодПоказателя = "30029" ИЛИ КодПоказателя = "30030" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М110003_" + ИндексСтр));
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М111003_" + ИндексСтр));
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М112003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М113003_" + ИндексСтр));
				ИначеЕсли КодПоказателя = "30031" ИЛИ КодПоказателя = "30032" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М110003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М111003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М112003_" + ИндексСтр));
					РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М113003_" + ИндексСтр));
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М110003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М111003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М112003_" + ИндексСтр));
					ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00105М113003_" + ИндексСтр));
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00105М108003_" + ИндексСтр);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПереопределитьПредставлениеНуля(Форма, ИмяРаздела);
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если ИмяПок = "П00101М200004" Тогда
			// Особая обработка в графе 4 Приложения 1.
			Для каждого Обл Из ТДО Цикл
				Если СтрНачинаетсяС(Обл.Имя, ИмяПок) Тогда
					Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
						Обл.Защита = Ложь;
						Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
					Иначе
						Обл.Защита = Истина;
						Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьПредставлениеНуля(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00001М102000_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			ТДО["П00001М103000_" + ИндексСтр].Формат = ?(ЗначениеЗаполнено(Обл.Значение)
			И НЕ ЗначениеЗаполнено(ТДО["П00001М104000_" + ИндексСтр].Значение)
			И НЕ ЗначениеЗаполнено(ТДО["П00001М105000_" + ИндексСтр].Значение), "ЧН=0", "ЧН=-");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00001М102000_" + ИндексСтр);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00024М100001_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			КодПоказателя = СокрЛП(Обл.Значение);
			ТДО["П00024М100002_" + ИндексСтр].Формат = ?(КодПоказателя = "40001", "ЧН=0", "ЧН=-");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00024М100001_" + ИндексСтр);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00105М108003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			КодПоказателя = СокрЛП(Обл.Значение);
			ТДО["П00105М110003_" + ИндексСтр].Формат = ?(КодПоказателя = "30027" ИЛИ КодПоказателя = "30028", "ЧН=0", "ЧН=-");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00105М108003_" + ИндексСтр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" ИЛИ ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3"
		ИЛИ ИмяРаздела = "Приложение1" ИЛИ ИмяРаздела = "Приложение2" ИЛИ ИмяРаздела = "Приложение3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" ИЛИ ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3"
		ИЛИ ИмяРаздела = "Приложение1" ИЛИ ИмяРаздела = "Приложение2" ИЛИ ИмяРаздела = "Приложение3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	ИмяОбласти = ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		
		Если СтрНачинаетсяС(ИмяОбласти, СтруктураРеквизитовФормы.мИдГруппыР24М1) Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыР24М1]["ИменаГраф"][0];
			Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
				ТекстПредупреждения = НСтр(
				"ru = 'Возможно не более двух строк в подразделе 2.4 раздела 2';
				|en = 'Возможно не более двух строк в подразделе 2.4 раздела 2'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		
		Если СтрНачинаетсяС(ИмяОбласти, СтруктураРеквизитовФормы.мИдГруппыП1М1) Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыП1М1]["ИменаГраф"][0];
			Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
				ТекстПредупреждения = НСтр(
				"ru = 'Возможно не более двух строк 020 в приложении 1 к форме налоговой декларации';
				|en = 'Возможно не более двух строк 020 в приложении 1 к форме налоговой декларации'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	ПереопределитьПредставлениеНуля(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
								|en = 'Не выбрана удаляемая строка многострочного раздела'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем Индекс, ИндексСтр, ИндексПодч, ИндексПодчСтр, Индекс24, Индекс24Стр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00021М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Обл.Значение = Окр(ТДО.Найти("П00021М100002_" + ИндексСтр).Значение * ТДО.Найти("П000020003003").Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00021М100003_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00022М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Обл.Значение = Окр(ТДО.Найти("П00022М100002_" + ИндексСтр).Значение * ТДО.Найти("П000020003003").Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00022М100003_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс24, Индекс24Стр);
				Обл = ТДО.Найти("П00024М100001_" + Индекс24Стр);
				Пока Обл <> Неопределено Цикл
					
					КодР24 = СокрЛП(Обл.Значение);
					
					СуммаР24 = 0;
					
					Если КодР24 = "40001" ИЛИ КодР24 = "40002" ИЛИ КодР24 = "40004" Тогда
						
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П00021М100003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							СуммаР24 = СуммаР24 + Обл.Значение;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П00021М100003_" + ИндексСтр);
						КонецЦикла;
						
						КодыР22ДляСуммирования = Новый Массив;
						КодыР22ДляСуммирования.Добавить("20003");
						КодыР22ДляСуммирования.Добавить("20004");
						КодыР22ДляСуммирования.Добавить("20005");
						КодыР22ДляСуммирования.Добавить("20007");
						КодыР22ДляСуммирования.Добавить("20009");
						КодыР22ДляСуммирования.Добавить("20011");
						КодыР22ДляСуммирования.Добавить("20013");
						КодыР22ДляСуммирования.Добавить("20015");
						КодыР22ДляСуммирования.Добавить("20017");
						
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П00022М100003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							КодР22 = СокрЛП(ТДО["П00022М100001_" + ИндексСтр].Значение);
							Если КодыР22ДляСуммирования.Найти(КодР22) <> Неопределено Тогда
								СуммаР24 = СуммаР24 + Обл.Значение;
							КонецЕсли;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П00022М100003_" + ИндексСтр);
						КонецЦикла;
						
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П00023М100003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							СуммаР24 = СуммаР24 - Обл.Значение;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П00023М100003_" + ИндексСтр);
						КонецЦикла;
						
						Если КодР24 = "40001" Тогда
							ТДО["П00024М100002_" + Индекс24Стр].Значение = Макс(СуммаР24, 0);
						Иначе
							ТДО["П00024М100002_" + Индекс24Стр].Значение = - Мин(СуммаР24, 0);
						КонецЕсли;
						
					ИначеЕсли КодР24 = "40003" Тогда
						
						КодыР25ДляСуммирования = Новый Массив;
						КодыР25ДляСуммирования.Добавить("50001");
						КодыР25ДляСуммирования.Добавить("50002");
						КодыР25ДляСуммирования.Добавить("50006");
						КодыР25ДляСуммирования.Добавить("50007");
						КодыР25ДляСуммирования.Добавить("50013");
						
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П00025М100003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							КодР25 = СокрЛП(ТДО["П00025М100001_" + ИндексСтр].Значение);
							Если КодыР25ДляСуммирования.Найти(КодР25) <> Неопределено Тогда
								СуммаР24 = СуммаР24 + Обл.Значение;
							КонецЕсли;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П00025М100003_" + ИндексСтр);
						КонецЦикла;
						
						ТДО["П00024М100002_" + Индекс24Стр].Значение = СуммаР24;
						
					Иначе
						
						ТДО["П00024М100002_" + Индекс24Стр].Значение = 0;
						
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс24, Индекс24Стр);
					Обл = ТДО.Найти("П00024М100001_" + Индекс24Стр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Строка 100.
				ТДО["П000030010003"].Значение = Окр(ТДО["П000030006003"].Значение * ТДО["П000030007003"].Значение
				- ТДО["П000030008003"].Значение - ТДО["П000030009003"].Значение, 2);
				
				// Строка 110.
				Если ЗначениеЗаполнено(ТДО["П000030010500"].Значение) Тогда
					ТДО["П000030011003"].Значение = Окр(ТДО["П000030010003"].Значение * ТДО["П000030010500"].Значение / 100);
				Иначе
					// Ручное редактирование стр.110.
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр020 = ТДО.Найти("П00101М102000_" + ИндексСтр);
				Пока ОблСтр020 <> Неопределено Цикл
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблГр4 = ТДО.Найти("П00101М200004_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблГр4 <> Неопределено Цикл
						Гр2 = ТДО["П00101М200002_" + ИндексСтр + "_" + ИндексПодчСтр].Значение;
						Гр3 = ТДО["П00101М200003_" + ИндексСтр + "_" + ИндексПодчСтр].Значение;
						// Графа 4.
						ОблГр4.Значение = Окр(Гр2 * Гр3, 2);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблГр4 = ТДО.Найти("П00101М200004_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр020 = ТДО.Найти("П00101М102000_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммаСтр060 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр110 = ТДО.Найти("П00102М111000_" + ИндексСтр);
				
				Пока ОблСтр110 <> Неопределено Цикл
					
					СуммаСтр110 = 0;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр080 = ТДО.Найти("П00102М208005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр080 <> Неопределено Цикл
						СуммаСтр110 = СуммаСтр110 + ОблСтр080.Значение;
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр080 = ТДО.Найти("П00102М208005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр090 = ТДО.Найти("П00102М309005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр090 <> Неопределено Цикл
						СуммаСтр110 = СуммаСтр110 - ОблСтр090.Значение;
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр090 = ТДО.Найти("П00102М309005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр100 = ТДО.Найти("П00102М410005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр100 <> Неопределено Цикл
						СуммаСтр110 = СуммаСтр110 - ОблСтр100.Значение;
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр100 = ТДО.Найти("П00102М410005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					// Строка 110.
					ОблСтр110.Значение = СуммаСтр110;
					
					СуммаСтр060 = СуммаСтр060 + СуммаСтр110;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр110 = ТДО.Найти("П00102М111000_" + ИндексСтр);
					
				КонецЦикла;
				
				// Строка 060.
				ТДО["П001020006003"].Значение = СуммаСтр060;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммаСтр060 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр100 = ТДО.Найти("П00103М110000_" + ИндексСтр);
				
				Пока ОблСтр100 <> Неопределено Цикл
					
					ЗаполненыСведенияКоррСчФ = ЗначениеЗаполнено(ТДО["П00103М111000_" + ИндексСтр].Значение)
					ИЛИ ЗначениеЗаполнено(ТДО["П00103М112000_" + ИндексСтр].Значение)
					ИЛИ ЗначениеЗаполнено(ТДО["П00103М113000_" + ИндексСтр].Значение);
					
					СуммаСтр060 = СуммаСтр060
					+ ?(ЗаполненыСведенияКоррСчФ, ТДО["П00103М113000_" + ИндексСтр].Значение, ОблСтр100.Значение);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр100 = ТДО.Найти("П00103М110000_" + ИндексСтр);
					
				КонецЦикла;
				
				// Строка 060.
				ТДО["П001030006003"].Значение = СуммаСтр060;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение4" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммаСтр050 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр160 = ТДО.Найти("П00104М116003_" + ИндексСтр);
				
				Пока ОблСтр160 <> Неопределено Цикл
					
					ТДО["П00104М112003_" + ИндексСтр].Значение = Макс(0,
					ТДО["П00104М113003_" + ИндексСтр].Значение - ТДО["П00104М114003_" + ИндексСтр].Значение);
					
					ТДО["П00104М110003_" + ИндексСтр].Значение = Окр(ТДО["П00104М111003_" + ИндексСтр].Значение
					* ТДО["П00104М112003_" + ИндексСтр].Значение * ТДО["П00104М115003_" + ИндексСтр].Значение);
					
					Стр090 = 0;
					КодПоказателя = СокрЛП(ТДО["П00104М107003_" + ИндексСтр].Значение);
					Если КодПоказателя = "30025" Тогда
						Стр090 = Окр(ТДО["П00104М108003_" + ИндексСтр].Значение * 2.08);
					ИначеЕсли КодПоказателя = "30026" Тогда
						Стр090 = Окр(ТДО["П00104М108003_" + ИндексСтр].Значение * 1);
					КонецЕсли;
					ТДО["П00104М109003_" + ИндексСтр].Значение = Стр090;
					
					ОблСтр160.Значение = ТДО["П00104М109003_" + ИндексСтр].Значение
					+ ТДО["П00104М110003_" + ИндексСтр].Значение;
					
					СуммаСтр050 = СуммаСтр050 + ОблСтр160.Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр160 = ТДО.Найти("П00104М116003_" + ИндексСтр);
					
				КонецЦикла;
				
				// Строка 050.
				ТДО["П001040005003"].Значение = СуммаСтр050;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Ддт = ТДО["П001050005003"].Значение - ТДО["П001050006003"].Значение;
				
				Если Ддт > 0 Тогда
					ТДО["П001050002003"].Значение = "1";
				ИначеЕсли Ддт < 0 Тогда
					ТДО["П001050002003"].Значение = "0";
				Иначе
					// Ручное редактирование стр.020.
				КонецЕсли;
				
				ТДО["П001050003003"].Значение = ?(Ддт < 0, - Ддт, Ддт);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр150 = ТДО.Найти("П00105М115003_" + ИндексСтр);
				
				Пока ОблСтр150 <> Неопределено Цикл
					
					КодПоказателя = СокрЛП(ТДО["П00105М108003_" + ИндексСтр].Значение);
					
					СтавкаУмножНаОбъем = ТДО["П00105М109503_" + ИндексСтр].Значение * ТДО["П00105М114003_" + ИндексСтр].Значение;
					
					Если КодПоказателя = "30027" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 2 + ТДО["П00105М110003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30028" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 1 + ТДО["П00105М110003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30029" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 2 + ТДО["П00105М111003_" + ИндексСтр].Значение
						+ ТДО["П00105М112003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30030" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 1 + ТДО["П00105М111003_" + ИндексСтр].Значение
						+ ТДО["П00105М112003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30031" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 2 + ТДО["П00105М113003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30032" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 1 + ТДО["П00105М113003_" + ИндексСтр].Значение);
						
					ИначеЕсли КодПоказателя = "30034" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 2);
						
					ИначеЕсли КодПоказателя = "30035" Тогда
						ОблСтр150.Значение = Окр(СтавкаУмножНаОбъем * 1);
						
					Иначе
						ОблСтр150.Значение = 0;
						
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр150 = ТДО.Найти("П00105М115003_" + ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР21М1;
		СтруктураГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР21М1];
		ИменаГрафМнЧР21М1 = СтруктураГруппыМнЧР21М1["ИменаГраф"];
		
		ИмяГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР22М1;
		СтруктураГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР22М1];
		ИменаГрафМнЧР22М1 = СтруктураГруппыМнЧР22М1["ИменаГраф"];
		
		ИмяГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР23М1;
		СтруктураГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР23М1];
		ИменаГрафМнЧР23М1 = СтруктураГруппыМнЧР23М1["ИменаГраф"];
		
		ИмяГруппыМнЧР24М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР24М1;
		СтруктураГруппыМнЧР24М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР24М1];
		ИменаГрафМнЧР24М1 = СтруктураГруппыМнЧР24М1["ИменаГраф"];
		
		ИмяГруппыМнЧР25М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР25М1;
		СтруктураГруппыМнЧР25М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР25М1];
		ИменаГрафМнЧР25М1 = СтруктураГруппыМнЧР25М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧР21М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР21М1];
			ДеревоМнЧР22М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР22М1];
			ДеревоМнЧР23М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР23М1];
			ДеревоМнЧР24М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР24М1];
			ДеревоМнЧР25М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР25М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР24М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР24М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР24М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР25М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР25М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР25М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00021М100003", Окр(СтрокаМнЧ.Данные["П00021М100002"] * Ветка.Данные["П000020003003"]));
			КонецЦикла;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00022М100003", Окр(СтрокаМнЧ.Данные["П00022М100002"] * Ветка.Данные["П000020003003"]));
			КонецЦикла;
			
			Для каждого СтрокаМнЧ24 Из ДеревоМнЧР24М1.Строки Цикл
				
				КодР24 = СокрЛП(СтрокаМнЧ24.Данные["П00024М100001"]);
				
				СуммаР24 = 0;
				
				Если КодР24 = "40001" ИЛИ КодР24 = "40002" ИЛИ КодР24 = "40004" Тогда
					
					Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
						СуммаР24 = СуммаР24 + СтрокаМнЧ.Данные["П00021М100003"];
					КонецЦикла;
					
					КодыР22ДляСуммирования = Новый Массив;
					КодыР22ДляСуммирования.Добавить("20003");
					КодыР22ДляСуммирования.Добавить("20004");
					КодыР22ДляСуммирования.Добавить("20005");
					КодыР22ДляСуммирования.Добавить("20007");
					КодыР22ДляСуммирования.Добавить("20009");
					КодыР22ДляСуммирования.Добавить("20011");
					КодыР22ДляСуммирования.Добавить("20013");
					КодыР22ДляСуммирования.Добавить("20015");
					КодыР22ДляСуммирования.Добавить("20017");
					
					Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
						КодР22 = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
						Если КодыР22ДляСуммирования.Найти(КодР22) <> Неопределено Тогда
							СуммаР24 = СуммаР24 + СтрокаМнЧ.Данные["П00022М100003"];
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
						СуммаР24 = СуммаР24 - СтрокаМнЧ.Данные["П00023М100003"];
					КонецЦикла;
					
					Если КодР24 = "40001" Тогда
						СтрокаМнЧ24.Данные.Вставить("П00024М100002", Макс(СуммаР24, 0));
					Иначе
						СтрокаМнЧ24.Данные.Вставить("П00024М100002", - Мин(СуммаР24, 0));
					КонецЕсли;
					
				ИначеЕсли КодР24 = "40003" Тогда
					
					КодыР25ДляСуммирования = Новый Массив;
					КодыР25ДляСуммирования.Добавить("50001");
					КодыР25ДляСуммирования.Добавить("50002");
					КодыР25ДляСуммирования.Добавить("50006");
					КодыР25ДляСуммирования.Добавить("50007");
					КодыР25ДляСуммирования.Добавить("50013");
					
					Для каждого СтрокаМнЧ Из ДеревоМнЧР25М1.Строки Цикл
						КодР25 = СокрЛП(СтрокаМнЧ.Данные["П00025М100001"]);
						Если КодыР25ДляСуммирования.Найти(КодР25) <> Неопределено Тогда
							СуммаР24 = СуммаР24 + СтрокаМнЧ.Данные["П00025М100003"];
						КонецЕсли;
					КонецЦикла;
					
					СтрокаМнЧ24.Данные.Вставить("П00024М100002", СуммаР24);
					
				Иначе
					
					СтрокаМнЧ24.Данные.Вставить("П00024М100002", 0);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					ТДО[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР24М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР24М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР24М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР25М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР25М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР25М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			// Строка 100.
			Ветка.Данные.Вставить("П000030010003", Окр(Ветка.Данные["П000030006003"] * Ветка.Данные["П000030007003"]
			- Ветка.Данные["П000030008003"] - Ветка.Данные["П000030009003"], 2));
			
			// Строка 110.
			Если ЗначениеЗаполнено(Ветка.Данные["П000030010500"]) Тогда
				Ветка.Данные.Вставить("П000030011003", Окр(Ветка.Данные["П000030010003"] * Ветка.Данные["П000030010500"] / 100));
			Иначе
				// Ручное редактирование стр.110.
			КонецЕсли;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					ТДО[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП1М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП1М1;
		СтруктураГруппыМнЧП1М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП1М1];
		ИменаГрафМнЧП1М1 = СтруктураГруппыМнЧП1М1["ИменаГраф"];
		
		ИмяГруппыМнЧП1М2 = Форма.СтруктураРеквизитовФормы.мИдГруппыП1М2;
		СтруктураГруппыМнЧП1М2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП1М2];
		ИменаГрафМнЧП1М2 = СтруктураГруппыМнЧП1М2["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП1М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП1М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП1М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП1М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
					ДеревоМнЧП1М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП1М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП1М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП1М2 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧП1М1.Строки Цикл
				ДеревоМнЧП1М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М2];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП1М2.Строки Цикл
					// Графа 4.
					СтрокаПодчМнЧ.Данные.Вставить("П00101М200004",
					Окр(СтрокаПодчМнЧ.Данные["П00101М200002"] * СтрокаПодчМнЧ.Данные["П00101М200003"], 2));
				КонецЦикла;
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					ТДО[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП1М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП1М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП1М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
					ДеревоМнЧП1М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП1М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП1М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП1М2 Цикл
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП2М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М1;
		СтруктураГруппыМнЧП2М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М1];
		ИменаГрафМнЧП2М1 = СтруктураГруппыМнЧП2М1["ИменаГраф"];
		
		ИмяГруппыМнЧП2М2 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М2;
		СтруктураГруппыМнЧП2М2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М2];
		ИменаГрафМнЧП2М2 = СтруктураГруппыМнЧП2М2["ИменаГраф"];
		
		ИмяГруппыМнЧП2М3 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М3;
		СтруктураГруппыМнЧП2М3 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М3];
		ИменаГрафМнЧП2М3 = СтруктураГруппыМнЧП2М3["ИменаГраф"];
		
		ИмяГруппыМнЧП2М4 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М4;
		СтруктураГруппыМнЧП2М4 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М4];
		ИменаГрафМнЧП2М4 = СтруктураГруппыМнЧП2М4["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП2М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
					ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М3.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М3 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М4.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М4 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			СуммаСтр060 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
				
				СуммаСтр110 = 0;
				
				ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
					СуммаСтр110 = СуммаСтр110 + СтрокаПодчМнЧ.Данные["П00102М208005"];
				КонецЦикла;
				ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
					СуммаСтр110 = СуммаСтр110 - СтрокаПодчМнЧ.Данные["П00102М309005"];
				КонецЦикла;
				ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
					СуммаСтр110 = СуммаСтр110 - СтрокаПодчМнЧ.Данные["П00102М410005"];
				КонецЦикла;
				
				// Строка 110.
				СтрокаМнЧ.Данные.Вставить("П00102М111000", СуммаСтр110);
				
				СуммаСтр060 = СуммаСтр060 + СуммаСтр110;
				
			КонецЦикла;
			
			// Строка 060.
			Ветка.Данные.Вставить("П001020006003", СуммаСтр060);
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					ТДО[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
					ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М3.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М3 Цикл
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М4.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М4 Цикл
							ТДО[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП3М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП3М1;
		СтруктураГруппыМнЧП3М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП3М1];
		ИменаГрафМнЧП3М1 = СтруктураГруппыМнЧП3М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП3М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП3М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП3М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП3М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП3М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			СуммаСтр060 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧП3М1.Строки Цикл
				
				ЗаполненыСведенияКоррСчФ = ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00103М111000"])
				ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00103М112000"])
				ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00103М113000"]);
				
				СуммаСтр060 = СуммаСтр060
				+ ?(ЗаполненыСведенияКоррСчФ, СтрокаМнЧ.Данные["П00103М113000"], СтрокаМнЧ.Данные["П00103М110000"]);
				
			КонецЦикла;
			
			// Строка 060.
			Ветка.Данные.Вставить("П001030006003", СуммаСтр060);
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					ТДО[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП3М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП3М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП3М1 Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение4" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП4М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП4М1;
		СтруктураГруппыМнЧП4М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП4М1];
		ИменаГрафМнЧП4М1 = СтруктураГруппыМнЧП4М1["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		
		ДеревоМнЧП4М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП4М1];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Ветка.Данные Цикл
				Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП4М1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧП4М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧП4М1 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СуммаСтр050 = 0;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧП4М1.Строки Цикл
			
			СтрокаМнЧ.Данные.Вставить("П00104М112003", Макс(0,
			СтрокаМнЧ.Данные["П00104М113003"] - СтрокаМнЧ.Данные["П00104М114003"]));
			
			СтрокаМнЧ.Данные.Вставить("П00104М110003", Окр(
			СтрокаМнЧ.Данные["П00104М111003"] * СтрокаМнЧ.Данные["П00104М112003"] * СтрокаМнЧ.Данные["П00104М115003"]));
			
			Стр090 = 0;
			КодПоказателя = СокрЛП(СтрокаМнЧ.Данные["П00104М107003"]);
			Если КодПоказателя = "30025" Тогда
				Стр090 = Окр(СтрокаМнЧ.Данные["П00104М108003"] * 2.08);
			ИначеЕсли КодПоказателя = "30026" Тогда
				Стр090 = Окр(СтрокаМнЧ.Данные["П00104М108003"] * 1);
			КонецЕсли;
			СтрокаМнЧ.Данные.Вставить("П00104М109003", Стр090);
			
			СтрокаМнЧ.Данные.Вставить("П00104М116003", СтрокаМнЧ.Данные["П00104М109003"] + СтрокаМнЧ.Данные["П00104М110003"]);
			
			СуммаСтр050 = СуммаСтр050 + СтрокаМнЧ.Данные["П00104М116003"];
			
		КонецЦикла;
		
		// Строка 050.
		Ветка.Данные.Вставить("П001040005003", СуммаСтр050);
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Ветка.Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП4М1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧП4М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧП4М1 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП5М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП5М1;
		СтруктураГруппыМнЧП5М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП5М1];
		ИменаГрафМнЧП5М1 = СтруктураГруппыМнЧП5М1["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		
		ДеревоМнЧП5М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП5М1];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Ветка.Данные Цикл
				Ветка.Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП5М1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧП5М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧП5М1 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Ддт = Ветка.Данные["П001050005003"] - Ветка.Данные["П001050006003"];
		
		Если Ддт > 0 Тогда
			Ветка.Данные.Вставить("П001050002003", "1");
		ИначеЕсли Ддт < 0 Тогда
			Ветка.Данные.Вставить("П001050002003", "0");
		Иначе
			// Ручное редактирование стр.020.
		КонецЕсли;
		
		Ветка.Данные.Вставить("П001050003003", ?(Ддт < 0, - Ддт, Ддт));
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧП5М1.Строки Цикл
			
			КодПоказателя = СокрЛП(СтрокаМнЧ.Данные["П00105М108003"]);
			
			СтавкаУмножНаОбъем = СтрокаМнЧ.Данные["П00105М109503"] * СтрокаМнЧ.Данные["П00105М114003"];
			
			Если КодПоказателя = "30027" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 2 + СтрокаМнЧ.Данные["П00105М110003"]));
				
			ИначеЕсли КодПоказателя = "30028" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 1 + СтрокаМнЧ.Данные["П00105М110003"]));
				
			ИначеЕсли КодПоказателя = "30029" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 2 + СтрокаМнЧ.Данные["П00105М111003"]
				+ СтрокаМнЧ.Данные["П00105М112003"]));
				
			ИначеЕсли КодПоказателя = "30030" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 1 + СтрокаМнЧ.Данные["П00105М111003"]
				+ СтрокаМнЧ.Данные["П00105М112003"]));
				
			ИначеЕсли КодПоказателя = "30031" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 2 + СтрокаМнЧ.Данные["П00105М113003"]));
				
			ИначеЕсли КодПоказателя = "30032" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 1 + СтрокаМнЧ.Данные["П00105М113003"]));
				
			ИначеЕсли КодПоказателя = "30034" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 2));
				
			ИначеЕсли КодПоказателя = "30035" Тогда
				СтрокаМнЧ.Данные.Вставить("П00105М115003", Окр(СтавкаУмножНаОбъем * 1));
				
			Иначе
				СтрокаМнЧ.Данные.Вставить("П00105М115003", 0);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Ветка.Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧП5М1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧП5М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧП5М1 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	ТекстСообщения = "";
	
	СформироватьРаздел1(ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1(ТекстСообщения = "")
	
	ИнициализироватьМногоуровневыйРаздел("Раздел1");
	
	УстановитьОКТМОНаПервойСтраницеРаздела1();
	
	КЧ = Новый КвалификаторыЧисла(12, 0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	КС_20 = Новый КвалификаторыСтроки(20);
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС_20 = Новый ОписаниеТипов(Массив, , КС_20);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Стр020", ОписаниеТиповС_20);
	ТЗ.Колонки.Добавить("Стр030", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Стр040", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Стр050", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Стр060", ОписаниеТиповЧ);
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Раздел2") Тогда
			
			КБК = СокрЛП(Ветка.Данные["П000020002003"]);
			
			ДеревоМнЧР24М1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР24М1];
			Для каждого СтрокаМнЧ Из ДеревоМнЧР24М1.Строки Цикл
				
				КодПоказателя = СокрЛП(СтрокаМнЧ.Данные["П00024М100001"]);
				СуммаАкциза = СтрокаМнЧ.Данные["П00024М100002"];
				
				Если КодПоказателя = "40001" Тогда
					НоваяСтрокаТЗ = ТЗ.Добавить();
					НоваяСтрокаТЗ.Стр020 = КБК;
					НоваяСтрокаТЗ.Стр030 = СуммаАкциза;
				ИначеЕсли КодПоказателя = "40002" Тогда
					НоваяСтрокаТЗ = ТЗ.Добавить();
					НоваяСтрокаТЗ.Стр020 = КБК;
					НоваяСтрокаТЗ.Стр040 = СуммаАкциза;
				ИначеЕсли КодПоказателя = "40003" Тогда
					НоваяСтрокаТЗ = ТЗ.Добавить();
					НоваяСтрокаТЗ.Стр020 = КБК;
					НоваяСтрокаТЗ.Стр060 = СуммаАкциза;
				ИначеЕсли КодПоказателя = "40004" Тогда
					НоваяСтрокаТЗ = ТЗ.Добавить();
					НоваяСтрокаТЗ.Стр020 = КБК;
					НоваяСтрокаТЗ.Стр050 = СуммаАкциза;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Раздел3") Тогда
			
			КБК = СокрЛП(Ветка.Данные["П000030003003"]);
			СуммаАкциза = Ветка.Данные["П000030011003"];
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.Стр020 = КБК;
			НоваяСтрокаТЗ.Стр030 = СуммаАкциза;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗ.Свернуть("Стр020", "Стр030,Стр040,Стр050,Стр060");
	ТЗ.Сортировать("Стр020");
	
	Если ТЗ.Количество() > 0 Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		ДеревоМнЧР1М1 = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		
		Для Инд = 0 По ТЗ.Количество() - 1 Цикл
			
			СтрокаТЗ = ТЗ[Инд];
			
			Если Инд = 0 Тогда
				
				ВеткаМнЧР1М1 = ДеревоМнЧР1М1.Строки[0];
				
			Иначе
				
				ВеткаМнЧР1М1 = ДеревоМнЧР1М1.Строки.Добавить();
				ВеткаМнЧР1М1.Данные = Новый Структура;
				ВеткаМнЧР1М1.ДанныеМногострочныхЧастей = Новый Структура;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ.Стр030)
				И ЗначениеЗаполнено(СтрокаТЗ.Стр040) И ЗначениеЗаполнено(СтрокаТЗ.Стр050) Тогда
				
				ОбщаяСуммаАкцизаКУменьшению = СтрокаТЗ.Стр040 + СтрокаТЗ.Стр050;
				
				Если СтрокаТЗ.Стр030 >= ОбщаяСуммаАкцизаКУменьшению Тогда
					
					СтрокаТЗ.Стр030 = СтрокаТЗ.Стр030 - ОбщаяСуммаАкцизаКУменьшению;
					
				Иначе
					
					// Отчет заполнен некорректно.
					ТекстСообщения = НСтр(
					"ru='Раздел 1 заполнен некорректно (не допускается одновременное заполнение строки 030 и строк 040, 050)."
					+ " Проверьте значения кода показателя в подразделе 2.4 раздела 2'");
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.Стр030) И ЗначениеЗаполнено(СтрокаТЗ.Стр040) Тогда
				
				СуммаАкциза = СтрокаТЗ.Стр030 - СтрокаТЗ.Стр040;
				СтрокаТЗ.Стр030 = Макс(СуммаАкциза, 0);
				СтрокаТЗ.Стр040 = - Мин(СуммаАкциза, 0);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.Стр030) И ЗначениеЗаполнено(СтрокаТЗ.Стр050) Тогда
				
				СуммаАкциза = СтрокаТЗ.Стр030 - СтрокаТЗ.Стр050;
				СтрокаТЗ.Стр030 = Макс(СуммаАкциза, 0);
				СтрокаТЗ.Стр050 = - Мин(СуммаАкциза, 0);
				
			КонецЕсли;
			
			ВеткаМнЧР1М1.Данные.Вставить("П00001М102000", СтрокаТЗ.Стр020);
			ВеткаМнЧР1М1.Данные.Вставить("П00001М103000", СтрокаТЗ.Стр030);
			ВеткаМнЧР1М1.Данные.Вставить("П00001М104000", СтрокаТЗ.Стр040);
			ВеткаМнЧР1М1.Данные.Вставить("П00001М105000", СтрокаТЗ.Стр050);
			ВеткаМнЧР1М1.Данные.Вставить("П00001М106000", СтрокаТЗ.Стр060);
			
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ДеревоРаздела, СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
		
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
				Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П001050002003");
	Структ.Вставить("П001050003003");
	Структ.Вставить("П00105М115003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение5", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001040005003");
	Структ.Вставить("П00104М109003");
	Структ.Вставить("П00104М110003");
	Структ.Вставить("П00104М112003");
	Структ.Вставить("П00104М116003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение4", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001030006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение3", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001020006003");
	Структ.Вставить("П00102М111000");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00101М200004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение1", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000030010003");
	Структ.Вставить("П000030011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00021М100003");
	Структ.Вставить("П00022М100003");
	Структ.Вставить("П00024М100002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ПроверятьВозможностьВыгрузки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если ПроверятьВозможностьВыгрузки И НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцАвтоНефт");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_AKCAVNEF"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеПериоды = ВозможныеПериоды(ЭтаФорма);
	
	ВозможныеПериодыНачальные = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12", ",");
	
	ВозможныеКодыФормыРеорганизции = СтрРазделить("1,2,3,5,6,9,0", ",");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеПериоды.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления налоговой декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места представления налоговой декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту = "213" Тогда
		Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
		Если Символы56КПП <> "50" Тогда
			СообщитьВТС(
			"Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны 50",
			"Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации) / код закрытия обособленного подразделения",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(
				"Задано некорректное значение кода формы реорганизации (ликвидации) / кода закрытия обособленного подразделения",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН " + ?(ПараметрыВыгрузки.ФормРеорг = "9",
					"закрытого обособленного подразделения", "реорганизованной организации"),
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП " + ?(ПараметрыВыгрузки.ФормРеорг = "9",
					"закрытого обособленного подразделения", "реорганизованной организации"),
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010001003"]));
		Если ДлинаЗначПок = 0 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задан код по ОКТМО",
			"Раздел1", "П000010001003", НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
			СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": задан код по ОКТМО, не состоящий из 8 или 11 цифр",
			"Раздел1", "П000010001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М102000"]));
			Если ДлинаЗначПок = 0 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
				+ " не задан код бюджетной классификации", "Раздел1", "П00001М102000_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
				+ " задан код бюджетной классификации, не состоящий из 20 цифр",
				"Раздел1", "П00001М102000_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяЗаполненногоПоказателя = Неопределено;
			Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М103000"])
				И ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М104000"]) Тогда
				ИмяЗаполненногоПоказателя = "П00001М104000";
			ИначеЕсли ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М103000"])
				И ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М105000"]) Тогда
				ИмяЗаполненногоПоказателя = "П00001М105000";
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяЗаполненногоПоказателя) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
				+ " не допускается одновременное заполнение строки 030 и строк 040, 050",
				"Раздел1", ИмяЗаполненногоПоказателя + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	ЗаполненРаздел2 = ЗаполненРаздел(ДеревоРаздела, "Раздел2");
	
	Если ЗаполненРаздел2 Тогда
		
		ВозмКодыР21Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00021М100001");
		ВозмКодыР22Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00022М100001");
		ВозмКодыР23Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00023М100001");
		ВозмКодыР24Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00024М100001");
		ВозмКодыР25Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00025М100001");
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000020001003"]));
			Если ДлинаЗначПок = 0 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан код вида подакцизного товара",
				"Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": задан код вида подакцизного товара, не состоящий из 3 цифр",
				"Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000020002003"]));
			Если ДлинаЗначПок = 0 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не задан код бюджетной классификации",
				"Раздел2", "П000020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": задан код бюджетной классификации, не состоящий из 20 цифр",
				"Раздел2", "П000020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ветка.Данные["П000020004003"]) И ЗначениеЗаполнено(Ветка.Данные["П000020001003"])
				И СокрЛП(Ветка.Данные["П000020001003"]) <> "741" Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": показатель Рст не должен быть заполнен при коде вида подакцизного товара, не равном 741",
				"Раздел2", "П000020004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзПодразделов21_22_23_25 = Ложь;
			ЗаполненПодраздел24 = Ложь;
			
			// Подраздел 2.1.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				ЗаполненХотяБыОдинИзПодразделов21_22_23_25 = Истина;
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 не задан код показателя", "Раздел2", "П00021М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР21Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 код показателя должен принимать одно из значений: "
						+ ВозмКодыР21Гр1.СтрокаЗначений, "Раздел2", "П00021М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.2.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				ЗаполненХотяБыОдинИзПодразделов21_22_23_25 = Истина;
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 не задан код показателя", "Раздел2", "П00022М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР22Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 код показателя должен принимать одно из значений: "
						+ ВозмКодыР22Гр1.СтрокаЗначений, "Раздел2", "П00022М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.3.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР23М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				ЗаполненХотяБыОдинИзПодразделов21_22_23_25 = Истина;
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00023М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 не задан код показателя", "Раздел2", "П00023М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР23Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 код показателя должен принимать одно из значений: "
						+ ВозмКодыР23Гр1.СтрокаЗначений, "Раздел2", "П00023М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00023М100004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 не задан код налогового периода", "Раздел2", "П00023М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 задан некорректный код налогового периода. Возможны значения: "
						+ СтрСоединить(ВозможныеПериодыНачальные, ", "), "Раздел2", "П00023М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00023М100005"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 не задан год налогового периода", "Раздел2", "П00023М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 задан год налогового периода, не состоящий из 4 цифр",
						"Раздел2", "П00023М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.4.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР24М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				ЗаполненПодраздел24 = Истина;
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00024М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.4 не задан код показателя", "Раздел2", "П00024М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР24Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.4 код показателя должен принимать одно из значений: "
						+ ВозмКодыР24Гр1.СтрокаЗначений, "Раздел2", "П00024М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.5.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР25М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				ЗаполненХотяБыОдинИзПодразделов21_22_23_25 = Истина;
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан код показателя", "Раздел2", "П00025М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР25Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 код показателя должен принимать одно из значений: "
						+ ВозмКодыР25Гр1.СтрокаЗначений, "Раздел2", "П00025М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан код налогового периода", "Раздел2", "П00025М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 задан некорректный код налогового периода. Возможны значения: "
						+ СтрСоединить(ВозможныеПериодыНачальные, ", "), "Раздел2", "П00025М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100005"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан год налогового периода", "Раздел2", "П00025М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 задан год налогового периода, не состоящий из 4 цифр",
						"Раздел2", "П00025М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ЗаполненХотяБыОдинИзПодразделов21_22_23_25 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": должен быть заполнен хотя бы один из подразделов 2.1, 2.2, 2.3, 2.5",
				"Раздел2", "П00021М100001_1", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗаполненПодраздел24 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": должен быть заполнен подраздел 2.4",
				"Раздел2", "П00024М100001_1", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	
	ЗаполненРаздел3 = ЗаполненРаздел(ДеревоРаздела, "Раздел3");
	
	Если ЗаполненРаздел3 Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если СокрЛП(Ветка.Данные["П000030001003"]) <> "735" Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": код вида подакцизного товара должен быть равен 735",
				"Раздел3", "П000030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СокрЛП(Ветка.Данные["П000030002003"]) <> "10037" Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": код показателя должен быть равен 10037",
				"Раздел3", "П000030002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000030003003"]));
			Если ДлинаЗначПок = 0 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": не задан код бюджетной классификации",
				"Раздел3", "П000030003003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": задан код бюджетной классификации, не состоящий из 20 цифр",
				"Раздел3", "П000030003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000030004003"])) Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
				+ ": не задан номер международного договора Российской Федерации", "Раздел3", "П000030004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П000030005003"]) Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
				+ ": не задана дата международного договора Российской Федерации", "Раздел3", "П000030005003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(Ветка.Данные["П000030005003"]) Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
				+ ": задана дата международного договора Российской Федерации, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
				"Раздел3", "П000030005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполненРаздел2 И НЕ ЗаполненРаздел3 Тогда
		
		СообщитьВТС("Должен быть заполнен хотя бы один из разделов 2, 3", "Раздел2", "П000020001003", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Приложение 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
	
	ВозмКодыСтр005 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001010000503");
	ВозмКодыСтр020 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00101М102000");
	ВозмКодыГр1    = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00101М200001");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение1") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001010000503"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": не задан признак СЗПК",
				"Приложение1", "П001010000503", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр005.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": признак СЗПК должен принимать одно из значений: "
				+ ВозмКодыСтр005.СтрокаЗначений, "Приложение1", "П001010000503", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначПок = "1" Тогда
				Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001010000703"]) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": должна быть задана дата соглашения при значении признака СЗПК, равном 1",
					"Приложение1", "П001010000703", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(Ветка.Данные["П001010000703"]) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": задана дата соглашения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Приложение1", "П001010000703", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001010000803"])) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": должен быть задан номер соглашения при значении признака СЗПК, равном 1",
					"Приложение1", "П001010000803", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли ЗначПок = "2" Тогда
				Если ЗначениеЗаполнено(Ветка.Данные["П001010000703"]) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": дата соглашения не подлежит заполнению при значении признака СЗПК, равном 1",
					"Приложение1", "П001010000703", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001010000803"])) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
					+ ": номер соглашения не подлежит заполнению при значении признака СЗПК, равном 1",
					"Приложение1", "П001010000803", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П001010001003"]));
			Если ДлинаЗначПок = 0 Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": не задан код вида подакцизного товара", "Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": задан код вида подакцизного товара, не состоящий из 3 цифр", "Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М102000"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
					+ " не задана единица измерения мощности по коду ОКЕИ",
					"Приложение1", "П00101М102000_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыСтр020.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
					+ " единица измерения мощности по коду ОКЕИ должна принимать одно из значений: "
					+ ВозмКодыСтр020.СтрокаЗначений, "Приложение1", "П00101М102000_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М2];
				КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
					НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
					
					Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
					"Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
					"Приложение 1 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
					+ ?(НомСтрокиПодчМнЧ = "2", ": во ", ": в ") + НомСтрокиПодчМнЧ + "-й строке группы по графам 1-5");
					
					ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00101М200001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
						"Приложение1", "П00101М200001_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыГр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
						+ ВозмКодыГр1.СтрокаЗначений, "Приложение1", "П00101М200001_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение2"];
	
	ВозмКодыСтр001 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001020000103");
	ВозмКодыСтр080 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М208003");
	ВозмКодыСтр090 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М309003");
	ВозмКодыСтр100 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М410003");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение2") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001020000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": не задан признак документа",
				"Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр001.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": признак документа должен принимать одно из значений: "
				+ ВозмКодыСтр001.СтрокаЗначений, "Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001020001003"])) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задан номер банковской гарантии (договора поручительства)", "Приложение2", "П001020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020002003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата выдачи банковской гарантии (дата заключения договора поручительства)",
				"Приложение2", "П001020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(Ветка.Данные["П001020002003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": задана дата выдачи банковской гарантии (дата заключения договора поручительства), "
				+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Приложение2", "П001020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020003003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата начала срока действия банковской гарантии (договора поручительства)",
				"Приложение2", "П001020003003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(Ветка.Данные["П001020003003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": задана дата начала срока действия банковской гарантии (договора поручительства), "
				+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Приложение2", "П001020003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020004003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата окончания срока действия банковской гарантии (договора поручительства)",
				"Приложение2", "П001020004003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(Ветка.Данные["П001020004003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": задана дата окончания срока действия банковской гарантии (договора поручительства), "
				+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Приложение2", "П001020004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М107000"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида подакцизного товара", "Приложение2", "П00102М107000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение2", "П00102М107000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
							+ ?(НомСтрокиПодчМнЧ = "2", ": во ", ": в ") + НомСтрокиПодчМнЧ + "-й строке группы ""Сумма акциза, "
							+ "освобожденная от уплаты в связи с представлением банковской гарантии (договора поручительства) "
							+ "при реализации подакцизного товара за пределы территории Российской Федерации (стр. 080)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М208003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М208003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр080.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр080.СтрокаЗначений,
								"Приложение2", "П00102М208003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
							+ ?(НомСтрокиПодчМнЧ = "2", ": во ", ": в ") + НомСтрокиПодчМнЧ + "-й строке группы ""Реализация "
							+ "подакцизных товаров, факт экспорта (реэкспорта) которых документально подтвержден в налоговом периоде "
							+ "(стр. 090)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М309003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М309003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр090.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр090.СтрокаЗначений,
								"Приложение2", "П00102М309003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М309006"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код налогового периода",
								"Приложение2", "П00102М309006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код налогового периода должен принимать одно из значений: "
								+ СтрСоединить(ВозможныеПериодыНачальные, ", "),
								"Приложение2", "П00102М309006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М309007"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан год налогового периода",
								"Приложение2", "П00102М309007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " задан год налогового периода, не состоящий из 4 цифр",
								"Приложение2", "П00102М309007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М4];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
							+ ?(НомСтрокиПодчМнЧ = "2", ": во ", ": в ") + НомСтрокиПодчМнЧ + "-й строке группы ""Реализация "
							+ "подакцизных товаров, факт экспорта (реэкспорта) которых документально подтвержден в предыдущих "
							+ "налоговых периодах (стр. 100)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М410003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М410003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр100.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр100.СтрокаЗначений,
								"Приложение2", "П00102М410003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М410006"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код налогового периода",
								"Приложение2", "П00102М410006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код налогового периода должен принимать одно из значений: "
								+ СтрСоединить(ВозможныеПериодыНачальные, ", "),
								"Приложение2", "П00102М410006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М410007"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан год налогового периода",
								"Приложение2", "П00102М410007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " задан год налогового периода, не состоящий из 4 цифр",
								"Приложение2", "П00102М410007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": не заполнены ""Сведения о реализации "
				+ "подакцизных товаров за пределы территории Российской Федерации и документальном подтверждении "
				+ "факта экспорта (реэкспорта) подакцизных товаров""", "Приложение2", "П00102М107000_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение3"];
	
	ВозмКодыСтр001 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001030000103");
	ВозмКодыСтр030 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001030003003");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение3") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан признак организации",
				"Приложение3", "П001030000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр001.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": признак организации должен принимать одно из значений: "
				+ ВозмКодыСтр001.СтрокаЗначений, "Приложение3", "П001030000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан ИНН",
				"Приложение3", "П001030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": задан ИНН, не состоящий из 10 цифр",
				"Приложение3", "П001030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030002003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан КПП",
				"Приложение3", "П001030002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": задан КПП, не состоящий из 9 символов",
				"Приложение3", "П001030002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030003003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы
				+ ": не задан признак свидетельства", "Приложение3", "П001030003003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр030.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы
				+ ": признак свидетельства должен принимать одно из значений: "
				+ ВозмКодыСтр030.СтрокаЗначений, "Приложение3", "П001030003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030004003"]);
			Если ЗначениеЗаполнено(ЗначПок) И СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы
				+ ": задан ИНН собственника прямогонного бензина, не состоящий из 10 цифр",
				"Приложение3", "П001030004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030005003"]);
			Если ЗначениеЗаполнено(ЗначПок) И СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы
				+ ": задан КПП собственника прямогонного бензина, не состоящий из 9 символов",
				"Приложение3", "П001030005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СокрЛП(Ветка.Данные["П001030007003"]) <> "650" Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": код вида подакцизного товара должен быть равен 650",
				"Приложение3", "П001030007003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00103М108000"])) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан номер счета-фактуры", "Приложение3", "П00103М108000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00103М109000"]) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задана дата счета-фактуры", "Приложение3", "П00103М109000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(СтрокаМнЧ.Данные["П00103М109000"]) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задана дата счета-фактуры, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Приложение3", "П00103М109000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00103М112000"])
						И НЕ ДатаВходитВРазрешенныйПериод(СтрокаМнЧ.Данные["П00103М112000"]) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задана дата корректировочного счета-фактуры, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Приложение3", "П00103М112000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не заполнены ""Сведения счета-фактуры""",
				"Приложение3", "П00103М108000_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение4"];
	
	Ветка = ДеревоРаздела.Строки[0];
	
	Если ЗаполненаСтраницаРаздела(Ветка, "Приложение4") Тогда
		
		ВозмКодыСтр070 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00104М107003");
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		Если СокрЛП(Ветка.Данные["П001040001003"]) <> "671" Тогда
			СообщитьВТС("Приложение 4: код вида подакцизного товара должен быть равен 671",
			"Приложение4", "П001040001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если СокрЛП(Ветка.Данные["П001040002003"]) <> "10036" Тогда
			СообщитьВТС("Приложение 4: код показателя должен быть равен 10036",
			"Приложение4", "П001040002003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
		Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М106003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " не задан код налогового периода",
					"Приложение4", "П00104М106003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " код налогового периода должен принимать одно из значений: "
					+ СтрСоединить(ВозможныеПериодыНачальные, ", "), "Приложение4", "П00104М106003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М106004"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " не задан год налогового периода",
					"Приложение4", "П00104М106004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " задан год налогового периода, не состоящий из 4 цифр",
					"Приложение4", "П00104М106004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М107003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " не задан код показателя",
					"Приложение4", "П00104М107003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыСтр070.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Приложение 4: в строке " + НомСтроки + " код показателя должен принимать одно из значений: "
					+ ВозмКодыСтр070.СтрокаЗначений, "Приложение4", "П00104М107003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение5"];
	
	Ветка = ДеревоРаздела.Строки[0];
	
	Если ЗаполненаСтраницаРаздела(Ветка, "Приложение5") Тогда
		
		ВозмКодыСтр020 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001050002003");
		ВозмКодыСтр080 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00105М108003");
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		Если СокрЛП(Ветка.Данные["П001050001003"]) <> "677" Тогда
			СообщитьВТС("Приложение 5: код вида подакцизного товара должен быть равен 677",
			"Приложение5", "П001050001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗначПок = СокрЛП(Ветка.Данные["П001050002003"]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС("Приложение 5: не задан признак показателя (Ддт)",
			"Приложение5", "П001050002003", НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли ВозмКодыСтр020.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС("Приложение 5 : признак показателя (Ддт) должен принимать одно из значений: "
			+ ВозмКодыСтр020.СтрокаЗначений, "Приложение5", "П001050002003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП5М1];
		Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00105М108003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " не задан код показателя",
					"Приложение5", "П00105М108003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКодыСтр080.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " код показателя должен принимать одно из значений: "
					+ ВозмКодыСтр080.СтрокаЗначений, "Приложение5", "П00105М108003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00105М109003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " не задан код налогового периода",
					"Приложение5", "П00105М109003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозможныеПериодыНачальные.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " код налогового периода должен принимать одно из значений: "
					+ СтрСоединить(ВозможныеПериодыНачальные, ", "), "Приложение5", "П00105М109003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00105М109004"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " не задан год налогового периода",
					"Приложение5", "П00105М109004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
					СообщитьВТС("Приложение 5: в строке " + НомСтроки + " задан год налогового периода, не состоящий из 4 цифр",
					"Приложение5", "П00105М109004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		СумНалПУКод = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумНалПУКод");
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			ЭкзСумНалПУКод = СкопироватьУзел(ЭкзСумНалПУ, СумНалПУКод, ЭкзСумНалПУ.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
				
				УсловиеОбязательности1 = Эл.Код = "АкцизПУ"
				И СтрокаМнЧ.Данные["П00001М103000"] = 0
				И СтрокаМнЧ.Данные["П00001М104000"] = 0
				И СтрокаМнЧ.Данные["П00001М105000"] = 0;
				
				УсловиеОбязательности2 = Эл.Код = "АкцизНУ203"
				И СтрокаМнЧ.Данные["П00001М103000"] = 0
				И СтрокаМнЧ.Данные["П00001М105000"] <> 0;
				
				Если УсловиеОбязательности1 ИЛИ УсловиеОбязательности2 Тогда
					Эл.Обязательность = "О";
				КонецЕсли;
				
				ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СумНалПУКод);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СумНалПУ);
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкц");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Раздел2") Тогда
			
			ЭкзРасчАкц = СкопироватьУзел(УзелРодитель, РасчАкц);
			Для каждого Эл Из ЭкзРасчАкц.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Код = "ПоказРст" И СокрЛП(Ветка.Данные["П000020001003"]) = "741" Тогда
						Эл.Обязательность = "О";
					КонецЕсли;
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Подраздел 2.1.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
			ОперПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперПТ");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(ЭкзРасчАкц, ОперПТ, ЭкзРасчАкц.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ОперПТ);
			
			// Подраздел 2.2.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			ОперЕЭС = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперЕЭС");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(ЭкзРасчАкц, ОперЕЭС, ЭкзРасчАкц.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ОперЕЭС);
			
			// Подраздел 2.3.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР23М1];
			СумАкцВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "СумАкцВыч");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(ЭкзРасчАкц, СумАкцВыч, ЭкзРасчАкц.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СумАкцВыч);
			
			// Подраздел 2.4.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР24М1];
			СумАкцПУ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "СумАкцПУ");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(ЭкзРасчАкц, СумАкцПУ, ЭкзРасчАкц.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СумАкцПУ);
			
			// Подраздел 2.5.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР25М1];
			ДокРеалЕЭС = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ДокРеалЕЭС");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(ЭкзРасчАкц, ДокРеалЕЭС, ЭкзРасчАкц.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ДокРеалЕЭС);
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РасчАкц);
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	РасчАкцГаз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкцГаз");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Раздел3") Тогда
			
			ЗаполнитьДаннымиУзел(Ветка.Данные, СкопироватьУзел(УзелРодитель, РасчАкцГаз));
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РасчАкцГаз);
	
	// Приложение 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
	РасчНалБаза = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНалБаза");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение1") Тогда
			
			ЭкзРасчНалБаза = СкопироватьУзел(УзелРодитель, РасчНалБаза);
			Для каждого Эл Из ЭкзРасчНалБаза.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			РасчНалБазаОКЕИ = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалБаза, "РасчНалБазаОКЕИ");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				// Строки 020.
				ЭкзРасчНалБазаОКЕИ = СкопироватьУзел(ЭкзРасчНалБаза, РасчНалБазаОКЕИ, ЭкзРасчНалБаза.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзРасчНалБазаОКЕИ.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Графы 1-5.
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М2];
				РасчНалБазаКод = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалБазаОКЕИ, "РасчНалБазаКод");
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные,
					СкопироватьУзел(ЭкзРасчНалБазаОКЕИ, РасчНалБазаКод, ЭкзРасчНалБазаОКЕИ.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(РасчНалБазаКод);
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(РасчНалБазаОКЕИ);
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РасчНалБаза);
	
	// Приложение 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение2"];
	РеалПТБГ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РеалПТБГ");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение2") Тогда
			
			ЭкзРеалПТБГ = СкопироватьУзел(УзелРодитель, РеалПТБГ);
			Для каждого Эл Из ЭкзРеалПТБГ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
			СвРеалПТЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРеалПТБГ, "СвРеалПТЭксп");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				// Строки 070.
				ЭкзСвРеалПТЭксп = СкопироватьУзел(ЭкзРеалПТБГ, СвРеалПТЭксп, ЭкзРеалПТБГ.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзСвРеалПТЭксп.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Строки 080.
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
				АкОсвЭксп = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "АкОсвЭксп");
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные,
					СкопироватьУзел(ЭкзСвРеалПТЭксп, АкОсвЭксп, ЭкзСвРеалПТЭксп.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(АкОсвЭксп);
				
				// Строки 090.
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
				РеалПТЭкПдтвПер = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "РеалПТЭкПдтвПер");
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные,
					СкопироватьУзел(ЭкзСвРеалПТЭксп, РеалПТЭкПдтвПер, ЭкзСвРеалПТЭксп.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(РеалПТЭкПдтвПер);
				
				// Строки 100.
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М4];
				РеалПТЭкПдтвПред = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "РеалПТЭкПдтвПред");
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные,
					СкопироватьУзел(ЭкзСвРеалПТЭксп, РеалПТЭкПдтвПред, ЭкзСвРеалПТЭксп.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(РеалПТЭкПдтвПред);
				
				// Строка 110. Особая обработка при выводе узла "ПревАкОсвПдтв".
				ПревАкОсвПдтв = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "ПревАкОсвПдтв");
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
				СкопироватьУзел(ЭкзСвРеалПТЭксп, ПревАкОсвПдтв, ЭкзСвРеалПТЭксп.Строки.Количество() - 1));
				РегламентированнаяОтчетность.УдалитьУзел(ПревАкОсвПдтв);
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СвРеалПТЭксп);
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РеалПТБГ);
	
	// Приложение 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение3"];
	СведОбПБ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СведОбПБ");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение3") Тогда
			
			ЭкзСведОбПБ = СкопироватьУзел(УзелРодитель, СведОбПБ);
			Для каждого Эл Из ЭкзСведОбПБ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			СведПТ = ПолучитьПодчиненныйЭлемент(ЭкзСведОбПБ, "СведПТ");
			Для каждого Эл Из СведПТ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Сведения о счетах-фактурах (корректировочных счетах-фактурах).
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
			СведОбПТ = ПолучитьПодчиненныйЭлемент(СведПТ, "СведОбПТ");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(СведПТ, СведОбПТ, СведПТ.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СведОбПТ);
			
		КонецЕсли;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СведОбПБ);
	
	// Приложение 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение4"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Приложение4") Тогда
		
		Ветка = ДеревоРаздела.Строки[0];
		РасчАкцКер = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкцКер");
		
		Для каждого Эл Из РасчАкцКер.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		// Расчет налогового вычета.
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
		РасчНалВыч = ПолучитьПодчиненныйЭлемент(РасчАкцКер, "РасчНалВыч");
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(РасчАкцКер, РасчНалВыч, РасчАкцКер.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалВыч);
		
	КонецЕсли;
	
	// Приложение 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение5"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Приложение5") Тогда
		
		Ветка = ДеревоРаздела.Строки[0];
		РасчСрДист = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчСрДист");
		
		Для каждого Эл Из РасчСрДист.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		// Расчет налогового вычета.
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП5М1];
		РасчНалВыч = ПолучитьПодчиненныйЭлемент(РасчСрДист, "РасчНалВыч");
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			КодПок = СокрЛП(СтрокаМнЧ.Данные["П00105М108003"]);
			
			Если КодПок = "30027" ИЛИ КодПок = "30028" Тогда
				
				ЭкзРасчНалВыч = СкопироватьУзел(РасчСрДист, РасчНалВыч, РасчСрДист.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзРасчНалВыч.Строки Цикл
					Если Эл.Код = "ВеличВф" Тогда
						Эл.Обязательность = "О";
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзРасчНалВыч);
				
			Иначе
				
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
				СкопироватьУзел(РасчСрДист, РасчНалВыч, РасчСрДист.Строки.Количество() - 1));
				
			КонецЕсли;
			
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалВыч);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоАкцизамНаГСМ");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
			|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
			|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
			|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
	Иначе
		
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
		|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
		|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" ИЛИ ИмяТекРаздела = "Приложение3"
		ИЛИ ИмяТекРаздела = "Приложение4" ИЛИ ИмяТекРаздела = "Приложение5" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР1М1;
			СтрокМнЧНаЛисте = 5;
			
		ИначеЕсли ИмяТекРаздела = "Приложение3" Тогда
			
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП3М1;
			СтрокМнЧНаЛисте = 2;
			
		ИначеЕсли ИмяТекРаздела = "Приложение4" Тогда
			
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП4М1;
			СтрокМнЧНаЛисте = 1;
			
		ИначеЕсли ИмяТекРаздела = "Приложение5" Тогда
			
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП5М1;
			СтрокМнЧНаЛисте = 1;
			
		КонецЕсли;
		
		ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ПереопределитьПредставлениеНуля(ЭтаФорма, ИмяТекРаздела);
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ21 = СтруктураРеквизитовФормы.мИдГруппыР21М1;
		ИмяГруппыМнЧ22 = СтруктураРеквизитовФормы.мИдГруппыР22М1;
		ИмяГруппыМнЧ23 = СтруктураРеквизитовФормы.мИдГруппыР23М1;
		ИмяГруппыМнЧ24 = СтруктураРеквизитовФормы.мИдГруппыР24М1;
		ИмяГруппыМнЧ25 = СтруктураРеквизитовФормы.мИдГруппыР25М1;
		
		СтрокМнЧ21НаЛисте = 3;
		СтрокМнЧ22НаЛисте = 2;
		СтрокМнЧ23НаЛисте = 3;
		СтрокМнЧ24НаЛисте = 2;
		СтрокМнЧ25НаЛисте = 2;
		
		ИменаГрафМнЧ21 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ21]["ИменаГраф"];
		ИменаГрафМнЧ22 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ22]["ИменаГраф"];
		ИменаГрафМнЧ23 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ23]["ИменаГраф"];
		ИменаГрафМнЧ24 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ24]["ИменаГраф"];
		ИменаГрафМнЧ25 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ25]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧ21 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ21];
			КолСтрокМнЧ = ДанныеМнЧ21.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ21НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ21НаЛисте);
			КолЛистовМнЧ21 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ22 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ22];
			КолСтрокМнЧ = ДанныеМнЧ22.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ22НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ22НаЛисте);
			КолЛистовМнЧ22 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ23 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ23];
			КолСтрокМнЧ = ДанныеМнЧ23.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ23НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ23НаЛисте);
			КолЛистовМнЧ23 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ24 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ24];
			КолСтрокМнЧ = ДанныеМнЧ24.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ24НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ24НаЛисте);
			КолЛистовМнЧ24 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ25 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ25];
			КолСтрокМнЧ = ДанныеМнЧ25.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ25НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ25НаЛисте);
			КолЛистовМнЧ25 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			КолЛистовРаздела = Макс(КолЛистовМнЧ21, КолЛистовМнЧ22, КолЛистовМнЧ23, КолЛистовМнЧ24, КолЛистовМнЧ25);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧ21ДляПечати = Новый Массив;
			МассивДанныхМнЧ22ДляПечати = Новый Массив;
			МассивДанныхМнЧ23ДляПечати = Новый Массив;
			МассивДанныхМнЧ24ДляПечати = Новый Массив;
			МассивДанныхМнЧ25ДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ21НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ21НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ21.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ21 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ21.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ21ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ22НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ22НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ22.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ22 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ22.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ22ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ23НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ23НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ23.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ23 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ23.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ23ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ24НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ24НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ24.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ24 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ24.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ24ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ25НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ25НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ25.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ25 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ25.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ25ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧ21НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ21 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ21, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ22НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ22 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ22, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ23НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ23 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ23, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ24НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ24 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ24, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ25НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ25 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ25, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧ21ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ22ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ23ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ24ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ25ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ПереопределитьПредставлениеНуля(ЭтаФорма, ИмяТекРаздела);
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			НемногострочныеДанные = Ветка.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыП1М1;
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыП1М2;
		
		СтрокВБлокеМнЧ1 = 1;
		СтрокВБлокеМнЧ2 = 10;
		
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			МассивДанныхМнЧДляПечати = Новый Массив;
			ДанныеМнЧДляПечати = Новый Структура;
			
			НомерСтрокиВБлокеМнЧ1 = 0;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
				Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
					
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					ДанныеМнЧДляПечати = Новый Структура;
					
					НомерСтрокиВБлокеМнЧ1 = 1;
					
				КонецЕсли;
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1),
					СтрокаМнЧ1.Данные[ИмяГрафы]);
				КонецЦикла;
				
				НомерСтрокиВБлокеМнЧ2 = 0;
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
				Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
					
					НомерСтрокиВБлокеМнЧ2 = НомерСтрокиВБлокеМнЧ2 + 1;
					Если НомерСтрокиВБлокеМнЧ2 > СтрокВБлокеМнЧ2 Тогда
						
						НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
						Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
							
							МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
							ДанныеМнЧДляПечати = Новый Структура;
							
							НомерСтрокиВБлокеМнЧ1 = 1;
							
						КонецЕсли;
						
						НомерСтрокиВБлокеМнЧ2 = 1;
						
					КонецЕсли;
					
					Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1)
						+ СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ2), СтрокаМнЧ2.Данные[ИмяГрафы]);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			
			Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныйДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныйДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном2 = 1 По СтрокВБлокеМнЧ2 - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ2 + "_1" + СтрокаСИндексомПоказателя(Ном2);
					ВставитьДопСтроку(ИмяГруппыМнЧ2, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение2" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыП2М1;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 1;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыП2М2;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 1;
		
		ИмяГруппыМнЧ3 = СтруктураРеквизитовФормы.мИдГруппыП2М3;
		ИменаГрафМнЧ3 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ3]["ИменаГраф"];
		СтрокВБлокеМнЧ3 = 1;
		
		ИмяГруппыМнЧ4 = СтруктураРеквизитовФормы.мИдГруппыП2М4;
		ИменаГрафМнЧ4 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ4]["ИменаГраф"];
		СтрокВБлокеМнЧ4 = 1;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			МассивДанныхМнЧДляПечати = Новый Массив;
			ДанныеМнЧДляПечати = Новый Структура;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1", СтрокаМнЧ1.Данные[ИмяГрафы]);
				КонецЦикла;
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
				ДанныеМнЧ3 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ3];
				ДанныеМнЧ4 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ4];
				
				НаибольшееКоличествоПодчиненныхСтрок = Макс(
				ДанныеМнЧ2.Строки.Количество(), ДанныеМнЧ3.Строки.Количество(), ДанныеМнЧ4.Строки.Количество());
				
				Для НомПодчСтроки = 1 По НаибольшееКоличествоПодчиненныхСтрок Цикл
					
					Если НомПодчСтроки <= ДанныеМнЧ2.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ2.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					Если НомПодчСтроки <= ДанныеМнЧ3.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ3 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ3.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					Если НомПодчСтроки <= ДанныеМнЧ4.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ4 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ4.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					ДанныеМнЧДляПечати = Новый Структура;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныйДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныйДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2022Кв2_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
		+ Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть,
									ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
							ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заполнить область ""%1""';
						|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"	, 0);
	ДанныеКС.Вставить("КолНеОшибок"	, 0);
	ДанныеКС.Вставить("Результат"	, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"		, Истина);;
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОтчета"	, ДанныеКС.Отчет.ДатаОкончания);
	
	СформироватьДанныеОтчета(ДанныеКС.Отчет, ДанныеКС);
	СформироватьСлужебныеДанные();
	СформироватьТаблицыОтчета();
	ЗаполнитьТаблицыОтчета();
	СформироватьВременныеТаблицы();
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 1
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	ПроверкаКС_2_08();
	ПроверкаКС_2_09();
	ПроверкаКС_2_10();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	
	// проверки Раздела 3
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	
	// проверки Приложения 1
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	
	// проверки Приложения 2
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	ПроверкаКС_6_06();
	ПроверкаКС_6_07();
	ПроверкаКС_6_08();
	ПроверкаКС_6_09();
	ПроверкаКС_6_10а();
	ПроверкаКС_6_10б();
	ПроверкаКС_6_11();
	ПроверкаКС_6_12а();
	ПроверкаКС_6_12б();
	ПроверкаКС_6_13();
	ПроверкаКС_6_14();
	
	// проверки Приложения 3
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	ПроверкаКС_7_08();
	ПроверкаКС_7_09();
	ПроверкаКС_7_10();
	ПроверкаКС_7_11();
	ПроверкаКС_7_12();
	ПроверкаКС_7_13();
	
	// проверки Приложения 4
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	ПроверкаКС_8_08();
	ПроверкаКС_8_09();
	ПроверкаКС_8_10();
	ПроверкаКС_8_11а();
	ПроверкаКС_8_11б();
	ПроверкаКС_8_12();
	ПроверкаКС_8_13();
	ПроверкаКС_8_14();
	ПроверкаКС_8_15();
	ПроверкаКС_8_16();
	ПроверкаКС_8_17();
	ПроверкаКС_8_18();
	ПроверкаКС_8_19();
	ПроверкаКС_8_20();
	
	// проверки Приложения 5
	ПроверкаКС_9_01();
	ПроверкаКС_9_02();
	ПроверкаКС_9_03();
	ПроверкаКС_9_04();
	ПроверкаКС_9_05();
	ПроверкаКС_9_06();
	ПроверкаКС_9_07();
	ПроверкаКС_9_08();
	ПроверкаКС_9_09();
	ПроверкаКС_9_10();
	ПроверкаКС_9_10а();
	ПроверкаКС_9_11();
	ПроверкаКС_9_12();
	ПроверкаКС_9_13();
	ПроверкаКС_9_14();
	ПроверкаКС_9_15();
	ПроверкаКС_9_16();
	ПроверкаКС_9_17();
	ПроверкаКС_9_18();
	ПроверкаКС_9_19();
	ПроверкаКС_9_20();
	ПроверкаКС_9_21();
	ПроверкаКС_9_22();
	ПроверкаКС_9_23();
	ПроверкаКС_9_24();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по акцизам ГСМ");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2022Кв2");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 1
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	ПроверкаКС_2_08();
	ПроверкаКС_2_09();
	ПроверкаКС_2_10();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	
	// проверки Раздела 3
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	
	// проверки Приложения 1
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	
	// проверки Приложения 2
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	ПроверкаКС_6_06();
	ПроверкаКС_6_07();
	ПроверкаКС_6_08();
	ПроверкаКС_6_09();
	ПроверкаКС_6_10а();
	ПроверкаКС_6_10б();
	ПроверкаКС_6_11();
	ПроверкаКС_6_12а();
	ПроверкаКС_6_12б();
	ПроверкаКС_6_13();
	ПроверкаКС_6_14();
	
	// проверки Приложения 3
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	ПроверкаКС_7_08();
	ПроверкаКС_7_09();
	ПроверкаКС_7_10();
	ПроверкаКС_7_11();
	ПроверкаКС_7_12();
	ПроверкаКС_7_13();
	
	// проверки Приложения 4
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	ПроверкаКС_8_08();
	ПроверкаКС_8_09();
	ПроверкаКС_8_10();
	ПроверкаКС_8_11а();
	ПроверкаКС_8_11б();
	ПроверкаКС_8_12();
	ПроверкаКС_8_13();
	ПроверкаКС_8_14();
	ПроверкаКС_8_15();
	ПроверкаКС_8_16();
	ПроверкаКС_8_17();
	ПроверкаКС_8_18();
	ПроверкаКС_8_19();
	ПроверкаКС_8_20();
	
	// проверки Приложения 5
	ПроверкаКС_9_01();
	ПроверкаКС_9_02();
	ПроверкаКС_9_03();
	ПроверкаКС_9_04();
	ПроверкаКС_9_05();
	ПроверкаКС_9_06();
	ПроверкаКС_9_07();
	ПроверкаКС_9_08();
	ПроверкаКС_9_09();
	ПроверкаКС_9_10();
	ПроверкаКС_9_10а();
	ПроверкаКС_9_11();
	ПроверкаКС_9_12();
	ПроверкаКС_9_13();
	ПроверкаКС_9_14();
	ПроверкаКС_9_15();
	ПроверкаКС_9_16();
	ПроверкаКС_9_17();
	ПроверкаКС_9_18();
	ПроверкаКС_9_19();
	ПроверкаКС_9_20();
	ПроверкаКС_9_21();
	ПроверкаКС_9_22();
	ПроверкаКС_9_23();
	ПроверкаКС_9_24();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета)
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("П000010001003");
	МассивПолейИсключений.Добавить("П000240000001");
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	СтруктураДанных = СохраненныеДанныеОтчета();

	ДанныеКС.Вставить("Раздел0", ОбщегоНазначения.СкопироватьРекурсивно(
		СтруктураДанных.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
		
		ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
				Новый Структура("КорневойРаздел, Раздел, Уровень", Раздел.Ключ, Раздел.Ключ, 1),
				Новый Структура("Уровень", ""));
			ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		
		ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
		
	КонецЦикла;
	
	ДанныеКС.Вставить("Приложение4", ДанныеКС.Приложение4[0]);
	ДанныеКС.Вставить("Приложение5", ДанныеКС.Приложение5[0]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									Знач СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)
									
	Если НЕ СтруктураИсточник.Данные = Неопределено И НЕ ЗначениеЗаполнено(ВходящаяМнЧасть.Уровень) Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
					МнЧасть.Значение.Строки.Количество());
				СтруктураПриемник.Вставить("МнЧастьЗаполнена" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень + "_" +  
					XMLСтрока(НомерСтроки), РазделЗаполнен(СтрокаМнЧасти.Данные));
				Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
					СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
						ПоказательСтроки.Значение);
				КонецЦикла;
				
				Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
					ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
						Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		Для каждого Приложение Из СтруктураИсточник.Строки Цикл
			
			Если ВходящийРаздел.Уровень = 1 Тогда
				ВходящийРаздел.Уровень = 2;
				ВходящийРаздел.Раздел = ВходящийРаздел.КорневойРаздел + XMLСтрока(СтруктураИсточник.Строки.Индекс(Приложение) + 1);
				ПолучитьДанныеСтраницы(СтруктураПриемник, Приложение, ВходящийРаздел, ВходящаяМнЧасть);
			Иначе
				КлючПриложения = ВходящийРаздел.Раздел;
				МассивСтраниц = Новый Массив;
				
				Для каждого СтраницаПриложения Из СтруктураИсточник.Строки Цикл
					
					ДанныеСтраницы = Новый Структура;
					ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + "," +
						XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПриложения) + 1));
					ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
						Новый Структура("КорневойРаздел, Раздел, Уровень", ВходящийРаздел.КорневойРаздел, КлючПриложения, 
						ВходящийРаздел.Уровень + 1), Новый Структура("Уровень", ""));
					ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
					МассивСтраниц.Добавить(ДанныеСтраницы);
					
				КонецЦикла;
				СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, МассивСтраниц.Количество());
				СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
				Если ВходящийРаздел.Уровень = 2 Тогда
					ВходящийРаздел.Уровень = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "Титульный лист");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р21", "подраздела 2.1 Раздела 2");
	ПредставлениеРазделов.Вставить("Р22", "подраздела 2.2 Раздела 2");
	ПредставлениеРазделов.Вставить("Р23", "подраздела 2.3 Раздела 2");
	ПредставлениеРазделов.Вставить("Р24", "подраздела 2.4 Раздела 2");
	ПредставлениеРазделов.Вставить("Р25", "подраздела 2.5 Раздела 2");
	ПредставлениеРазделов.Вставить("Р03", "Раздела 3");
	ПредставлениеРазделов.Вставить("П01", "Приложения 1");
	ПредставлениеРазделов.Вставить("П02", "Приложения 2");
	ПредставлениеРазделов.Вставить("П03", "Приложения 3");
	ПредставлениеРазделов.Вставить("П04", "Приложения 4");
	ПредставлениеРазделов.Вставить("П05", "Приложения 5");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р21", "Раздел2");
	РазделыПоказателей.Вставить("Р22", "Раздел2");
	РазделыПоказателей.Вставить("Р23", "Раздел2");
	РазделыПоказателей.Вставить("Р24", "Раздел2");
	РазделыПоказателей.Вставить("Р25", "Раздел2");
	РазделыПоказателей.Вставить("Р03", "Раздел3");
	РазделыПоказателей.Вставить("П01", "Приложение1");
	РазделыПоказателей.Вставить("П02", "Приложение2");
	РазделыПоказателей.Вставить("П03", "Приложение3");
	РазделыПоказателей.Вставить("П04", "Приложение4");
	РазделыПоказателей.Вставить("П05", "Приложение5");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	МногострочныеЧасти = "П00101М2,П00102М2,П00102М3,П00102М4";
	ДанныеКС.Вставить("МногострочныеЧасти", МногострочныеЧасти);
	
	ПоляТитульногоЛиста = Новый Структура();
	ПоляТитульногоЛиста.Вставить("Р00С001", "Дата подписи");
	ПоляТитульногоЛиста.Вставить("Р00С002", "Отчетный год");
	ПоляТитульногоЛиста.Вставить("Р00С003", "Код формы реорганизации");
	
	ДанныеКС.Вставить("ПоляТитульногоЛиста", ПоляТитульногоЛиста);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	// Раздел 1
	МассивПолейСписочныхЗначений.Добавить("П00001М102000");
	
	// Раздел 2
	МассивПолейСписочныхЗначений.Добавить("П000020001003");
	МассивПолейСписочныхЗначений.Добавить("П000020002003");
	МассивПолейСписочныхЗначений.Добавить("П00021М100001");
	МассивПолейСписочныхЗначений.Добавить("П00022М100001");
	МассивПолейСписочныхЗначений.Добавить("П00023М100001");
	МассивПолейСписочныхЗначений.Добавить("П00024М100001");
	МассивПолейСписочныхЗначений.Добавить("П00025М100001");
	
	// Раздел 3
	МассивПолейСписочныхЗначений.Добавить("П000030001003");
	МассивПолейСписочныхЗначений.Добавить("П000030002003");
	МассивПолейСписочныхЗначений.Добавить("П000030003003");
	
	// Приложение 1
	МассивПолейСписочныхЗначений.Добавить("П001010000503");
	МассивПолейСписочныхЗначений.Добавить("П001010001003");
	МассивПолейСписочныхЗначений.Добавить("П00101М102000");
	МассивПолейСписочныхЗначений.Добавить("П00101М200001");
	
	// Приложение 2
	МассивПолейСписочныхЗначений.Добавить("П001020000103");
	МассивПолейСписочныхЗначений.Добавить("П00102М107000");
	МассивПолейСписочныхЗначений.Добавить("П00102М208003");
	МассивПолейСписочныхЗначений.Добавить("П00102М309003");
	МассивПолейСписочныхЗначений.Добавить("П00102М410003");
	
	// Приложение 3
	МассивПолейСписочныхЗначений.Добавить("П001030000103");
	МассивПолейСписочныхЗначений.Добавить("П001030003003");
	МассивПолейСписочныхЗначений.Добавить("П001030007003");
	
	// Приложение 4
	МассивПолейСписочныхЗначений.Добавить("П001040001003");
	МассивПолейСписочныхЗначений.Добавить("П001040002003");
	МассивПолейСписочныхЗначений.Добавить("П00104М107003");
	
	// Приложение 5
	МассивПолейСписочныхЗначений.Добавить("П001050001003");
	МассивПолейСписочныхЗначений.Добавить("П001050002003");
	МассивПолейСписочныхЗначений.Добавить("П00105М108003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
	СтавкиАкцизов = Новый Соответствие;
	СтавкиАкцизов.Вставить("", 0);
		
	Если ДанныеКС.ГодОтчета = 2021 Тогда
		
		СтавкиАкцизов.Вставить("510", 0);
		СтавкиАкцизов.Вставить("520", 51);
		СтавкиАкцизов.Вставить("531", 491);
		СтавкиАкцизов.Вставить("532", 491);
		СтавкиАкцизов.Вставить("533", 804);
		СтавкиАкцизов.Вставить("534", 1370);
		СтавкиАкцизов.Вставить("535", 1418);
		СтавкиАкцизов.Вставить("536", 1464);
		СтавкиАкцизов.Вставить("671", 2800);
		
	ИначеЕсли ДанныеКС.ГодОтчета = 2022 Тогда
		
		СтавкиАкцизов.Вставить("510", 0);
		СтавкиАкцизов.Вставить("520", 53);
		СтавкиАкцизов.Вставить("531", 511);
		СтавкиАкцизов.Вставить("532", 511);
		СтавкиАкцизов.Вставить("533", 836);
		СтавкиАкцизов.Вставить("534", 1425);
		СтавкиАкцизов.Вставить("535", 1475);
		СтавкиАкцизов.Вставить("536", 1523);
		СтавкиАкцизов.Вставить("671", 2800);
		
	ИначеЕсли ДанныеКС.ГодОтчета = 2023 Тогда
		
		СтавкиАкцизов.Вставить("510", 0);
		СтавкиАкцизов.Вставить("520", 55);
		СтавкиАкцизов.Вставить("531", 531);
		СтавкиАкцизов.Вставить("532", 531);
		СтавкиАкцизов.Вставить("533", 869);
		СтавкиАкцизов.Вставить("534", 1482);
		СтавкиАкцизов.Вставить("535", 1534);
		СтавкиАкцизов.Вставить("536", 1584);
		СтавкиАкцизов.Вставить("671", 2800);
		
	ИначеЕсли ДанныеКС.ГодОтчета = 2024 Тогда
		
		СтавкиАкцизов.Вставить("510", 0);
		СтавкиАкцизов.Вставить("520", 57);
		СтавкиАкцизов.Вставить("531", 552);
		СтавкиАкцизов.Вставить("532", 552);
		СтавкиАкцизов.Вставить("533", 904);
		СтавкиАкцизов.Вставить("534", 1541);
		СтавкиАкцизов.Вставить("535", 1595);
		СтавкиАкцизов.Вставить("536", 1647);
		СтавкиАкцизов.Вставить("671", 2800);
		
	ИначеЕсли ДанныеКС.ГодОтчета = 2025 Тогда
		
		СтавкиАкцизов.Вставить("510", 0);
		СтавкиАкцизов.Вставить("520", 59);
		СтавкиАкцизов.Вставить("531", 574);
		СтавкиАкцизов.Вставить("532", 574);
		СтавкиАкцизов.Вставить("533", 940);
		СтавкиАкцизов.Вставить("534", 1603);
		СтавкиАкцизов.Вставить("535", 1659);
		СтавкиАкцизов.Вставить("536", 1713);
		СтавкиАкцизов.Вставить("671", 2800);
		
	КонецЕсли;
	
	ДанныеКС.Вставить("СтавкиАкцизов", СтавкиАкцизов);
	
	ПубликацияКомментариев = Новый Массив;
	ДанныеКС.Вставить("ПубликацияКомментариев", ПубликацияКомментариев);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицыОтчета()
	
	ТипСтрока	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока5	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(5));
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ТипДата		= Новый ОписаниеТипов("Дата");
	ТипРО		= Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет");

	ТаблицаР01 = Новый ТаблицаЗначений;
	ТаблицаР01.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР01.Колонки.Добавить("Р01С030"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("Р01С040"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("Р01С050"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("Р01С060"		, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР01.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаР01.Колонки.Добавить("НомерСтроки"	, ТипЧисло);

	ТаблицаР2х = Новый ТаблицаЗначений;
	ТаблицаР2х.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Раздел"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Р21Г002"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р21Г003"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р22Г002"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р22Г003"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р23Г002"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р23Г003"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р23Г004"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Р23Г005"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Р25Г002"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р25Г003"		, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("Р25Г004"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Р25Г005"		, ТипСтрока5);
	ТаблицаР2х.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР2х.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаР2х.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ТаблицаР24 = Новый ТаблицаЗначений;
	ТаблицаР24.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР24.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР24.Колонки.Добавить("Ставка"		, ТипЧисло);
	ТаблицаР24.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР24.Колонки.Добавить("Раздел"		, ТипСтрока5);
	ТаблицаР24.Колонки.Добавить("Р24Г002"		, ТипЧисло);
	ТаблицаР24.Колонки.Добавить("Р03С110"		, ТипЧисло);
	ТаблицаР24.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР24.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаР24.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ТаблицаР03 = Новый ТаблицаЗначений;
	ТаблицаР03.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР03.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР03.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР03.Колонки.Добавить("Р03С110"		, ТипЧисло);
	ТаблицаР03.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР03.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	
	ТаблицаП01 = Новый ТаблицаЗначений;
	ТаблицаП01.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("П01Г004"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("П01Г005"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП01.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	
	ТаблицаП02 = Новый ТаблицаЗначений;
	ТаблицаП02.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("П02В083"		, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("П02В084"		, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("П02В085"		, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("П02В093"		, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("П02В094"		, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("П02В095"		, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("П02В096"		, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("П02В097"		, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП02.Колонки.Добавить("СтрокаОтчета"	, ТипСтрока5);
	ТаблицаП02.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	
	ТаблицаП04 = Новый ТаблицаЗначений;
	ТаблицаП04.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП04.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаП04.Колонки.Добавить("П04С030"		, ТипЧисло);
	ТаблицаП04.Колонки.Добавить("П04С040"		, ТипЧисло);
	ТаблицаП04.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП04.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	
	ТаблицаП41 = Новый ТаблицаЗначений;
	ТаблицаП41.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП41.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаП41.Колонки.Добавить("П04С063"		, ТипСтрока5);
	ТаблицаП41.Колонки.Добавить("П04С064"		, ТипСтрока5);
	ТаблицаП41.Колонки.Добавить("П04С160"		, ТипЧисло);
	ТаблицаП41.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП41.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаП41.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ТаблицаП05 = Новый ТаблицаЗначений;
	ТаблицаП05.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП05.Колонки.Добавить("П05С070"		, ТипЧисло);
	ТаблицаП05.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП05.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	
	ТаблицаП51 = Новый ТаблицаЗначений;
	ТаблицаП51.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП51.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаП51.Колонки.Добавить("П05С093"		, ТипСтрока5);
	ТаблицаП51.Колонки.Добавить("П05С094"		, ТипСтрока5);
	ТаблицаП51.Колонки.Добавить("П05С140"		, ТипЧисло);
	ТаблицаП51.Колонки.Добавить("П05С150"		, ТипЧисло);
	ТаблицаП51.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП51.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаП51.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ДанныеКС.Вставить("ТаблицаР01"				, ТаблицаР01);
	ДанныеКС.Вставить("ТаблицаР2х"				, ТаблицаР2х);
	ДанныеКС.Вставить("ТаблицаР24"				, ТаблицаР24);
	ДанныеКС.Вставить("ТаблицаР03"				, ТаблицаР03);
	ДанныеКС.Вставить("ТаблицаП01"				, ТаблицаП01);
	ДанныеКС.Вставить("ТаблицаП02"				, ТаблицаП02);
	ДанныеКС.Вставить("ТаблицаП04"				, ТаблицаП04);
	ДанныеКС.Вставить("ТаблицаП41"				, ТаблицаП41);
	ДанныеКС.Вставить("ТаблицаП05"				, ТаблицаП05);
	ДанныеКС.Вставить("ТаблицаП51"				, ТаблицаП51);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОтчета()

#Область Раздел_1

	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"	, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С030"	, "П00001М103000_");
	ИменаПоказателей.Вставить("Р01С040"	, "П00001М104000_");
	ИменаПоказателей.Вставить("Р01С050"	, "П00001М105000_"); 
	ИменаПоказателей.Вставить("Р01С060"	, "П00001М106000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М1 Цикл
			ЗаполнитьПоказатели(Показатели, СтраницаРаздела, Счетчик);
			
			НоваяСтрока					= ДанныеКС.ТаблицаР01.Добавить();
			НоваяСтрока.КБК				= Показатели.Р01С020.Значение;
			НоваяСтрока.Р01С030			= Показатели.Р01С030.Значение;
			НоваяСтрока.Р01С040			= Показатели.Р01С040.Значение;
			НоваяСтрока.Р01С050			= Показатели.Р01С050.Значение;
			НоваяСтрока.Р01С060			= Показатели.Р01С060.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
			
		КонецЦикла; 
	КонецЦикла; 

#КонецОбласти

#Область Раздел_2

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010", "П000020001003");
	ИменаПоказателей.Вставить("Р02С020", "П000020002003");
	ИменаПоказателей.Вставить("Р02С030", "П000020003003");
	ИменаПоказателей.Вставить("Р21Г001", "П00021М100001_");
	ИменаПоказателей.Вставить("Р21Г002", "П00021М100002_");
	ИменаПоказателей.Вставить("Р21Г003", "П00021М100003_");
	ИменаПоказателей.Вставить("Р22Г001", "П00022М100001_");
	ИменаПоказателей.Вставить("Р22Г002", "П00022М100002_");
	ИменаПоказателей.Вставить("Р22Г003", "П00022М100003_");
	ИменаПоказателей.Вставить("Р23Г001", "П00023М100001_");
	ИменаПоказателей.Вставить("Р23Г002", "П00023М100002_");
	ИменаПоказателей.Вставить("Р23Г003", "П00023М100003_");
	ИменаПоказателей.Вставить("Р23Г004", "П00023М100004_");
	ИменаПоказателей.Вставить("Р23Г005", "П00023М100005_");
	ИменаПоказателей.Вставить("Р24Г001", "П00024М100001_");
	ИменаПоказателей.Вставить("Р24Г002", "П00024М100002_");
	ИменаПоказателей.Вставить("Р25Г001", "П00025М100001_");
	ИменаПоказателей.Вставить("Р25Г002", "П00025М100002_");
	ИменаПоказателей.Вставить("Р25Г003", "П00025М100003_");
	ИменаПоказателей.Вставить("Р25Г004", "П00025М100004_");
	ИменаПоказателей.Вставить("Р25Г005", "П00025М100005_");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
	
		ЗаполнитьПоказатель(Показатели.Р02С010, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р02С020, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р02С030, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00021М1 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р21Г001, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р21Г002, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р21Г003, СтраницаРаздела, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР2х.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р21Г001.Значение;
			НоваяСтрока.Раздел			= "21";
			НоваяСтрока.Р21Г002			= Показатели.Р21Г002.Значение;
			НоваяСтрока.Р21Г003			= Показатели.Р21Г003.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
		
		КонецЦикла;
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00022М1 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р22Г001, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р22Г002, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р22Г003, СтраницаРаздела, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР2х.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р22Г001.Значение;
			НоваяСтрока.Раздел			= "22";
			НоваяСтрока.Р22Г002			= Показатели.Р22Г002.Значение;
			НоваяСтрока.Р22Г003			= Показатели.Р22Г003.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
		
		КонецЦикла;
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00023М1 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г002, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г003, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г004, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г005, СтраницаРаздела, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР2х.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р23Г001.Значение;
			НоваяСтрока.Раздел			= "23";
			НоваяСтрока.Р23Г002			= Показатели.Р23Г002.Значение;
			НоваяСтрока.Р23Г003			= Показатели.Р23Г003.Значение;
			НоваяСтрока.Р23Г004			= Показатели.Р23Г004.Значение;
			НоваяСтрока.Р23Г005			= Показатели.Р23Г005.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
		
		КонецЦикла;
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00024М1 Цикл
	
			ЗаполнитьПоказатель(Показатели.Р24Г001, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р24Г002, СтраницаРаздела, Счетчик);
			
			НоваяСтрока					= ДанныеКС.ТаблицаР24.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КБК				= Показатели.Р02С020.Значение;
			НоваяСтрока.Ставка			= Показатели.Р02С030.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р24Г001.Значение;
			НоваяСтрока.Раздел			= "Р24";
			НоваяСтрока.Р24Г002			= Показатели.Р24Г002.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
		
		КонецЦикла;
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00025М1 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р25Г001, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г002, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г003, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г004, СтраницаРаздела, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г005, СтраницаРаздела, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР2х.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р25Г001.Значение;
			НоваяСтрока.Раздел			= "25";
			НоваяСтрока.Р25Г002			= Показатели.Р25Г002.Значение;
			НоваяСтрока.Р25Г003			= Показатели.Р25Г003.Значение;
			НоваяСтрока.Р25Г004			= Показатели.Р25Г004.Значение;
			НоваяСтрока.Р25Г005			= Показатели.Р25Г005.Значение;
			НоваяСтрока.Отчет			= ДанныеКС.Отчет;
			НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			НоваяСтрока.НомерСтроки		= Счетчик;
		
		КонецЦикла;
	КонецЦикла;

#КонецОбласти

#Область Раздел_3
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С010"	, "П000030001003");
	ИменаПоказателей.Вставить("Р03С020"	, "П000030002003");
	ИменаПоказателей.Вставить("Р03С030"	, "П000030003003");
	ИменаПоказателей.Вставить("Р03С110"	, "П000030011003");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
			
		НоваяСтрока					= ДанныеКС.ТаблицаР24.Добавить();
		НоваяСтрока.КодТовара		= Показатели.Р03С010.Значение;
		НоваяСтрока.КБК				= Показатели.Р03С030.Значение;
		НоваяСтрока.КодПоказателя	= "40001";
		НоваяСтрока.Раздел			= "Р03";
		НоваяСтрока.Р03С110			= Показатели.Р03С110.Значение;
		НоваяСтрока.Отчет			= ДанныеКС.Отчет;
		НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
			
		НоваяСтрока					= ДанныеКС.ТаблицаР03.Добавить();
		НоваяСтрока.КодТовара		= Показатели.Р03С010.Значение;
		НоваяСтрока.КБК				= Показатели.Р03С030.Значение;
		НоваяСтрока.КодПоказателя	= Показатели.Р03С020.Значение;
		НоваяСтрока.Р03С110			= Показатели.Р03С110.Значение;
		НоваяСтрока.Отчет			= ДанныеКС.Отчет;
		НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
		
	КонецЦикла;

#КонецОбласти

#Область Приложение_1

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010", "П001010001003");
	ИменаПоказателей.Вставить("П01Г001", "П00101М200001_");
	ИменаПоказателей.Вставить("П01Г004", "П00101М200004_");
	ИменаПоказателей.Вставить("П01Г005", "П00101М200005_");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
		ЗаполнитьПоказатель(Показатели.П01С010, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00101М1 Цикл
			Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00101М2_" + XMLСтрока(Счетчик)] Цикл
			
				ЗаполнитьПоказатель(Показатели.П01Г001, СтраницаРаздела, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П01Г004, СтраницаРаздела, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П01Г005, СтраницаРаздела, Счетчик, Счетчик2);
			
				НоваяСтрока					= ДанныеКС.ТаблицаП01.Добавить();
				НоваяСтрока.КодТовара		= Показатели.П01С010.Значение;
				НоваяСтрока.КодПоказателя	= Показатели.П01Г001.Значение;
				НоваяСтрока.П01Г004			= Показатели.П01Г004.Значение;
				НоваяСтрока.П01Г005			= Показатели.П01Г005.Значение;
				НоваяСтрока.Отчет			= ДанныеКС.Отчет;
				НоваяСтрока.НомерСтраницы	= СтраницаРаздела.Страница;
				НоваяСтрока.НомерСтроки		= Счетчик;
				НоваяСтрока.НомерСтроки2	= Счетчик2;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

#КонецОбласти

#Область Приложение_2

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С070"	, "П00102М107000_");
	ИменаПоказателей.Вставить("П02В083"	, "П00102М208003_");
	ИменаПоказателей.Вставить("П02В084"	, "П00102М208004_");
	ИменаПоказателей.Вставить("П02В085"	, "П00102М208005_");
	ИменаПоказателей.Вставить("П02В093"	, "П00102М309003_");
	ИменаПоказателей.Вставить("П02В094"	, "П00102М309004_");
	ИменаПоказателей.Вставить("П02В095"	, "П00102М309005_");
	ИменаПоказателей.Вставить("П02В096"	, "П00102М309006_");
	ИменаПоказателей.Вставить("П02В097"	, "П00102М309007_");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаПриложения2 Из ДанныеКС.Приложение2 Цикл
		Для Счетчик = 1 По СтраницаПриложения2.КолвоСтрокП00102М1 Цикл
			
			ЗаполнитьПоказатель(Показатели.П02С070, СтраницаПриложения2, Счетчик);
			
			КолвоСтрок2 = СтраницаПриложения2["КолвоСтрокП00102М2_" + XMLСтрока(Счетчик)];
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				
				ЗаполнитьПоказатель(Показатели.П02В083, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В084, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В085, СтраницаПриложения2, Счетчик, Счетчик2);
				
				НоваяСтрока					= ДанныеКС.ТаблицаП02.Добавить();
				НоваяСтрока.КодТовара		= Показатели.П02С070.Значение;
				НоваяСтрока.П02В083			= Показатели.П02В083.Значение;
				НоваяСтрока.П02В084			= Показатели.П02В084.Значение;
				НоваяСтрока.П02В085			= Показатели.П02В085.Значение;
				НоваяСтрока.Отчет			= ДанныеКС.Отчет;
				НоваяСтрока.СтрокаОтчета	= "080";
				НоваяСтрока.НомерСтраницы	= СтраницаПриложения2.Страница;
				НоваяСтрока.НомерСтроки		= Счетчик;
				НоваяСтрока.НомерСтроки2	= Счетчик2;
				
			КонецЦикла;
			
			КолвоСтрок2 = СтраницаПриложения2["КолвоСтрокП00102М3_" + XMLСтрока(Счетчик)];
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				
				ЗаполнитьПоказатель(Показатели.П02В093, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В094, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В095, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В096, СтраницаПриложения2, Счетчик, Счетчик2);
				ЗаполнитьПоказатель(Показатели.П02В097, СтраницаПриложения2, Счетчик, Счетчик2);
				
				НоваяСтрока					= ДанныеКС.ТаблицаП02.Добавить();
				НоваяСтрока.КодТовара		= Показатели.П02С070.Значение;
				НоваяСтрока.П02В093			= Показатели.П02В093.Значение;
				НоваяСтрока.П02В094			= Показатели.П02В094.Значение;
				НоваяСтрока.П02В095			= Показатели.П02В095.Значение;
				НоваяСтрока.П02В096			= Показатели.П02В096.Значение;
				НоваяСтрока.П02В097			= Показатели.П02В097.Значение;
				НоваяСтрока.Отчет			= ДанныеКС.Отчет;
				НоваяСтрока.СтрокаОтчета	= "090";
				НоваяСтрока.НомерСтраницы	= СтраницаПриложения2.Страница;
				НоваяСтрока.НомерСтроки		= Счетчик;
				НоваяСтрока.НомерСтроки2	= Счетчик2;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 

#КонецОбласти

#Область Приложение_4

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С010", "П001040001003");
	ИменаПоказателей.Вставить("П04С020", "П001040002003");
	ИменаПоказателей.Вставить("П04С030", "П001040003003");
	ИменаПоказателей.Вставить("П04С040", "П001040004003");
	ИменаПоказателей.Вставить("П04С063", "П00104М106003_");
	ИменаПоказателей.Вставить("П04С064", "П00104М106004_");
	ИменаПоказателей.Вставить("П04С070", "П00104М107003_");
	ИменаПоказателей.Вставить("П04С160", "П00104М116003_");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
		
	ЗаполнитьПоказатель(Показатели.П04С010, ДанныеКС.Приложение4);
	ЗаполнитьПоказатель(Показатели.П04С020, ДанныеКС.Приложение4);
	ЗаполнитьПоказатель(Показатели.П04С030, ДанныеКС.Приложение4);
	ЗаполнитьПоказатель(Показатели.П04С040, ДанныеКС.Приложение4);
		
	НоваяСтрока					= ДанныеКС.ТаблицаП04.Добавить();
	НоваяСтрока.КодТовара		= Показатели.П04С010.Значение;
	НоваяСтрока.КодПоказателя	= Показатели.П04С020.Значение;
	НоваяСтрока.П04С030			= Показатели.П04С030.Значение;
	НоваяСтрока.П04С040			= Показатели.П04С040.Значение;
	НоваяСтрока.Отчет			= ДанныеКС.Отчет;
	НоваяСтрока.НомерСтраницы	= ДанныеКС.Приложение4.Страница;
			
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.П04С063, ДанныеКС.Приложение4, Счетчик);
		ЗаполнитьПоказатель(Показатели.П04С064, ДанныеКС.Приложение4, Счетчик);
		ЗаполнитьПоказатель(Показатели.П04С070, ДанныеКС.Приложение4, Счетчик);
		ЗаполнитьПоказатель(Показатели.П04С160, ДанныеКС.Приложение4, Счетчик);
		
		НоваяСтрока					= ДанныеКС.ТаблицаП41.Добавить();
		НоваяСтрока.КодТовара		= Показатели.П04С010.Значение;
		НоваяСтрока.КодПоказателя	= Показатели.П04С070.Значение;
		НоваяСтрока.П04С063			= Показатели.П04С063.Значение;
		НоваяСтрока.П04С064			= Показатели.П04С064.Значение;
		НоваяСтрока.П04С160			= Показатели.П04С160.Значение;
		НоваяСтрока.Отчет			= ДанныеКС.Отчет;
		НоваяСтрока.НомерСтраницы	= ДанныеКС.Приложение4.Страница;
		НоваяСтрока.НомерСтроки		= Счетчик;
			
	КонецЦикла;

#КонецОбласти

#Область Приложение_5

	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С010"	, "П001050001003");
	ИменаПоказателей.Вставить("П05С070"	, "П001050007003");
	ИменаПоказателей.Вставить("П05С080"	, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С093"	, "П00105М109003_");
	ИменаПоказателей.Вставить("П05С094"	, "П00105М109004_");
	ИменаПоказателей.Вставить("П05С140"	, "П00105М114003_");
	ИменаПоказателей.Вставить("П05С150"	, "П00105М115003_");
	
	Показатели = Неопределено;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
		
	ЗаполнитьПоказатель(Показатели.П05С010, ДанныеКС.Приложение5);
	ЗаполнитьПоказатель(Показатели.П05С070, ДанныеКС.Приложение5);
	
	НоваяСтрока					= ДанныеКС.ТаблицаП05.Добавить();
	НоваяСтрока.КодТовара		= Показатели.П05С010.Значение;
	НоваяСтрока.П05С070			= Показатели.П05С070.Значение;
	НоваяСтрока.Отчет			= ДанныеКС.Отчет;
	НоваяСтрока.НомерСтраницы	= ДанныеКС.Приложение5.Страница;

	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.П05С080, ДанныеКС.Приложение5, Счетчик);
		ЗаполнитьПоказатель(Показатели.П05С093, ДанныеКС.Приложение5, Счетчик);
		ЗаполнитьПоказатель(Показатели.П05С094, ДанныеКС.Приложение5, Счетчик);
		ЗаполнитьПоказатель(Показатели.П05С140, ДанныеКС.Приложение5, Счетчик);
		ЗаполнитьПоказатель(Показатели.П05С150, ДанныеКС.Приложение5, Счетчик);
	
		НоваяСтрока					= ДанныеКС.ТаблицаП51.Добавить();
		НоваяСтрока.КодТовара		= Показатели.П05С010.Значение;
		НоваяСтрока.КодПоказателя	= Показатели.П05С080.Значение;
		НоваяСтрока.П05С093			= Показатели.П05С093.Значение;
		НоваяСтрока.П05С094			= Показатели.П05С094.Значение;
		НоваяСтрока.П05С140			= Показатели.П05С140.Значение;
		НоваяСтрока.П05С150			= Показатели.П05С150.Значение;
		НоваяСтрока.Отчет			= ДанныеКС.Отчет;
		НоваяСтрока.НомерСтраницы	= ДанныеКС.Приложение5.Страница;
		НоваяСтрока.НомерСтроки		= Счетчик;
		
	КонецЦикла;

#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура СформироватьВременныеТаблицы()
	
	ВременныеТаблицы	= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса		= Новый СхемаЗапроса;
	
	ИменаТаблиц			= Новый Структура;
	ИменаТаблиц.Вставить("ТаблицаР01"	, "Т_Р01");
	ИменаТаблиц.Вставить("ТаблицаР2х"	, "Т_Р2х");
	ИменаТаблиц.Вставить("ТаблицаР24"	, "Т_Р24");
	ИменаТаблиц.Вставить("ТаблицаР03"	, "Т_Р03");
	ИменаТаблиц.Вставить("ТаблицаП01"	, "Т_П01");
	ИменаТаблиц.Вставить("ТаблицаП02"	, "Т_П02");
	ИменаТаблиц.Вставить("ТаблицаП04"	, "Т_П04");
	ИменаТаблиц.Вставить("ТаблицаП41"	, "Т_П41");
	ИменаТаблиц.Вставить("ТаблицаП05"	, "Т_П05");
	ИменаТаблиц.Вставить("ТаблицаП51"	, "Т_П51");
	
	// Формирование временных таблиц с данными разделов
	Для каждого Таблица Из ИменаТаблиц Цикл
		
		Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
		Оператор	= Пакет.Операторы[0];
		ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&" + Таблица.Значение);
		Пакет.ТаблицаДляПомещения = "В" + Таблица.Значение;
		
		Для каждого Колонка Из ДанныеКС[Таблица.Ключ].Колонки Цикл
			ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
			Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		КонецЦикла;
		
	КонецЦикла;
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.УстановитьПараметр("Т_Р01"		, ДанныеКС.ТаблицаР01);
	Запрос.УстановитьПараметр("Т_Р2х"		, ДанныеКС.ТаблицаР2х);
	Запрос.УстановитьПараметр("Т_Р24"		, ДанныеКС.ТаблицаР24);
	Запрос.УстановитьПараметр("Т_Р03"		, ДанныеКС.ТаблицаР03);
	Запрос.УстановитьПараметр("Т_П01"		, ДанныеКС.ТаблицаП01);
	Запрос.УстановитьПараметр("Т_П02"		, ДанныеКС.ТаблицаП02);
	Запрос.УстановитьПараметр("Т_П04"		, ДанныеКС.ТаблицаП04);
	Запрос.УстановитьПараметр("Т_П41"		, ДанныеКС.ТаблицаП41);
	Запрос.УстановитьПараметр("Т_П05"		, ДанныеКС.ТаблицаП05);
	Запрос.УстановитьПараметр("Т_П51"		, ДанныеКС.ТаблицаП51);
	
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("ВременныеТаблицы"	, ВременныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления	= Новый Массив;
		ПодстрокаРаздела	= "";
		ПодстрокаСтраницы	= "";
		
		ИндексРаздела		= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения	= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения	= Сред(Элемент.Ключ, 9, 1);
		ПодстрокаСтроки		= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы		= Сред(Элемент.Значение, 12,2);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексРаздела = "Р00" Тогда
			МассивПредставления.Добавить(ПодстрокаРаздела);
			ДанныеКС.ПоляТитульногоЛиста.Свойство(Элемент.Ключ, ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаСтроки);
		Иначе
			Если ИндексДополнения = "С" Тогда
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			ИначеЕсли ИндексДополнения = "Г" Тогда
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			Иначе
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			КонецЕсли;
			МассивПредставления.Добавить(ПодстрокаРаздела);
			Если ПодстрокаДополнения = "П" Тогда
				МассивПредставления.Добавить("предыдущего отчетного периода");
			КонецЕсли;
		КонецЕсли;
		
		Представление		= СтрСоединить(МассивПредставления, " ");
		Многострочный		= СтрДлина(Элемент.Значение) = 14;
		Многострочный2		= НЕ СтрНайти(ДанныеКС.МногострочныеЧасти, Лев(Элемент.Значение, 8)) = 0;
		Округление			= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Многострочный2"	, Многострочный2);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательБезРасшифровки(Представление, ЗначениеПоказателя)
	
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	НоваяСтрока.ПредставлениеПоказателя = Представление;
	НоваяСтрока.ЗначениеПоказателя		= ЗначениеПоказателя;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.Синоним];
		
		Показатель.Отчет	= ДанныеКС.Отчет;
		Показатель.Страница = Источник.НомерСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный2 Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомерСтроки) + "_" + 
				XMLСтрока(Источник.НомерСтроки2);
		ИначеЕсли Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомерСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатели(Показатели, Источник, 
								НомерСтроки = Неопределено);
	
	Для Каждого Элемент Из Показатели Цикл
		ЗаполнитьПоказатель(Элемент.Значение, Источник, НомерСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	
	ПубликоватьКомментарий = ДанныеКС.ПубликацияКомментариев.Найти(Настройки.НомерКС) = Неопределено;
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, ?(ПубликоватьКомментарий, Настройки.Комментарий, ""));
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат();
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураРеквизитовФормы.КС_АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено
			ИЛИ СтрНайти(Элемент.Ключ, "П00") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "Колво") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "МнЧасть") = 0
			Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, 
	Параметр4 = Неопределено)
	
	Если Параметр2 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1);
	
	ИначеЕсли Параметр3 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2);
	
	ИначеЕсли Параметр4 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3);
		
	Иначе
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);
	
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗначениеСтр(ЗначениеСтроки)
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеСтроки), ЗначениеСтроки, "(...)");
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Титульного_листа

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Титульный лист';
														|en = 'Титульный лист'"));
	Заголовки.Вставить("Комментарий"			, 
		НСтр("ru = 'Контрольное соотношение не распространяется на плательщиков акциза, указанных в п.3.1 ст.204 НК РФ';
			|en = 'Контрольное соотношение не распространяется на плательщиков акциза, указанных в п.3.1 ст.204 НК РФ'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.119, п.1 ст.126 НК РФ';
													|en = 'п.1 ст.119, п.1 ст.126 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дата представления первичного отчета должна быть <= установленному п.5 ст.204 НК РФ сроку ';
			|en = 'Дата представления первичного отчета должна быть <= установленному п.5 ст.204 НК РФ сроку '") +
		НСтр("ru = 'представления налоговой декларации по акцизам на ГСМ, природный газ, автомобили и мотоциклы';
			|en = 'представления налоговой декларации по акцизам на ГСМ, природный газ, автомобили и мотоциклы'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно нарушение установленного срока представления отчета';
														|en = 'Возможно нарушение установленного срока представления отчета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р00С001"		, "ДатаПодписи");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел0);
	
	ГодУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, ДанныеКС.ГодОтчета + 1, ДанныеКС.ГодОтчета), 
		"ЧЦ=4; ЧВН=; ЧГ=0");
	МесУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, 1, ДанныеКС.МесОтчета + 1), "ЧЦ=2; ЧВН=");
	УстановленныйСрок		= СтроковыеФункцииКлиентСервер.СтрокаВДату("25." + МесУстановленногоСрока + "." + 
		ГодУстановленногоСрока);
	УстановленныйСрокСтр	= Формат(УстановленныйСрок, "ДФ=dd.MM.yy; ДП=(...)");
	
	Настройки.ЭтоОшибка = ДанныеКС.Отчет.Вид = 0 И Показатели.Р00С001.Значение > УстановленныйСрок;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р00С001.ЗначениеСтр, УстановленныйСрокСтр);
		
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_2_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.1';
													|en = '2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода ОКТМО в стр.010 Раздела 1 должно быть заполнено';
			|en = 'Значение кода ОКТМО в стр.010 Раздела 1 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение ОКТМО %1 заполнено';
													|en = 'Значение ОКТМО %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан код ОКТМО';
														|en = 'Не указан код ОКТМО'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"		, "П000010001003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С010, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.Р01С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.2';
													|en = '2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода ОКТМО в стр.010 Раздела 1 должно соответствовать Общероссийскому ';
			|en = 'Значение кода ОКТМО в стр.010 Раздела 1 должно соответствовать Общероссийскому '") +
		НСтр("ru = 'классификатору территорий муниципальных образований';
			|en = 'классификатору территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код ОКТМО';
														|en = 'Не верно указан код ОКТМО'"));
	Настройки = ОбработатьНастройки(Заголовки);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.3';
													|en = '2.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода бюджетной классификации в стр.020 Раздела 1 должно быть заполнено';
			|en = 'Значение кода бюджетной классификации в стр.020 Раздела 1 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение КБК %1 заполнено';
													|en = 'Значение КБК %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан код бюджетной классификации';
														|en = 'Не указан код бюджетной классификации'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
			
			Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.Р01С020.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.4';
													|en = '2.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода бюджетной классификации в стр.020 Раздела 1 должно соответствовать списку ';
			|en = 'Значение кода бюджетной классификации в стр.020 Раздела 1 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код бюджетной классификации';
														|en = 'Не верно указан код бюджетной классификации'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р01С020.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р01С020.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С020.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.5';
													|en = '2.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Стр.030 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40001 и КБК, ';
			|en = 'Стр.030 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40001 и КБК, '") +
		НСтр("ru = 'либо стр.110 Раздела 3 и КБК';
			|en = 'либо стр.110 Раздела 3 и КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по КБК %3';
													|en = '%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателяР1", "Р01С030");
	Настройки.Вставить("ПоказательР1"	, "П00001М103000_");
	Настройки.Вставить("КодыПоказателей", СтрРазделить(",40001", ","));
	
	ПроверкаКС_2_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.6';
													|en = '2.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Стр.040 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40002 и КБК';
			|en = 'Стр.040 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40002 и КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по КБК %3';
													|en = '%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателяР1", "Р01С040");
	Настройки.Вставить("ПоказательР1"	, "П00001М104000_");
	Настройки.Вставить("КодыПоказателей", СтрРазделить(",40002", ","));
	
	ПроверкаКС_2_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.7';
													|en = '2.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Стр.050 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40004 и КБК';
			|en = 'Стр.050 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40004 и КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по КБК %3';
													|en = '%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателяР1", "Р01С050");
	Настройки.Вставить("ПоказательР1"	, "П00001М105000_");
	Настройки.Вставить("КодыПоказателей", СтрРазделить(",40004", ","));
	
	ПроверкаКС_2_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.8';
													|en = '2.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Стр.060 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40003 и КБК';
			|en = 'Стр.060 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40003 и КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по КБК %3';
													|en = '%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателяР1", "Р01С060");
	Настройки.Вставить("ПоказательР1"	, "П00001М106000_");
	Настройки.Вставить("КодыПоказателей", СтрРазделить(",40003", ","));
	
	ПроверкаКС_2_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_08_код(Настройки)
	
	Перем Показатели;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("КодыПоказателей", Настройки.КодыПоказателей);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел1.КБК КАК КБК,
	|	Раздел1.Р01С030 КАК Р01С001,
	|	Раздел1.Отчет КАК Отчет,
	|	Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Раздел1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р01 КАК Раздел1
	|ГДЕ
	|	Раздел1.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	КБК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел24.КБК КАК КБК,
	|	Раздел24.Раздел КАК Раздел,
	|	Раздел24.Р24Г002 КАК Р24Г002,
	|	Раздел24.Р03С110 КАК Р03С110,
	|	Раздел24.Отчет КАК Отчет,
	|	Раздел24.НомерСтраницы КАК НомерСтраницы,
	|	Раздел24.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р24 КАК Раздел24
	|ГДЕ
	|	Раздел24.Отчет = &Отчет
	|	И Раздел24.КодПоказателя В(&КодыПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел УБЫВ,
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	КБК";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Р01С030", Настройки.ИмяПоказателяР1);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаР1 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001"		, Настройки.ПоказательР1);
	ИменаПоказателей.Вставить("Р24Г002"		, "П00024М100002_");
	ИменаПоказателей.Вставить("Р03С110"		, "П000030011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р01С001.Итог = 0;
		Показатели.Р24Г002.Итог = 0;
		Показатели.Р03С110.Итог = 0;
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С001, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КБК", ВыборкаР1.КБК)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Раздел = "Р24" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р24Г002, Выборка);
				Иначе
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С110, Выборка);
				КонецЕсли;
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		РасчетнаяСумма = Показатели.Р24Г002.Итог + Показатели.Р03С110.Итог;
		Настройки.ЭтоОшибка = НЕ Показатели.Р01С001.Итог = РасчетнаяСумма	;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р01С001.Итог, РасчетнаяСумма, ЗначениеСтр(ВыборкаР1.КБК));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.9';
													|en = '2.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.030 Раздела 1 >= 0';
														|en = 'Сумма акциза в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П00001М103000_");
	
	ПроверкаКС_2_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_09_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001", Настройки.Показатель);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
			
			Настройки.ЭтоОшибка = Показатели.Р01С001.Значение < 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С001.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.10';
													|en = '2.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.040 Раздела 1 >= 0';
														|en = 'Сумма акциза в стр.040 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П00001М104000_");
	
	ПроверкаКС_2_09_код(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_3_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.1';
													|en = '3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.010 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.010 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида подакцизного товара';
														|en = 'Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000020001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.Р02С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С010, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р02С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.2';
													|en = '3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 2 должно быть заполнено';
														|en = 'Значение КБК в стр.020 Раздела 2 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не заполнен КБК';
														|en = 'Не заполнен КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С020"		, "П000020002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.Р02С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.3';
													|en = '3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку допустимых значений';
			|en = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С020"		, "П000020002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.Р02С020.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р02С020.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.4';
													|en = '3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение ставки налога в стр.030 Раздела 2 должно быть заполнено';
														|en = 'Значение ставки налога в стр.030 Раздела 2 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не заполнена ставка налога';
														|en = 'Не заполнена ставка налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000020001003");
	ИменаПоказателей.Вставить("Р02С030"		, "П000020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ Показатели.Р02С010.Значение = "510" 
			И НЕ ЗначениеЗаполнено(Показатели.Р02С030.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С030.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.5';
													|en = '3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 подр. 2.1 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 подр. 2.1 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида показателя';
														|en = 'Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21Г001"		, "П00021М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р21Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00021М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р21Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р21Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.6';
													|en = '3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в гр.3 подр.2.1 Раздела 2 = гр.2 подр.2.1 ';
														|en = 'Сумма акциза в гр.3 подр.2.1 Раздела 2 = гр.2 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х стр.030 Раздела 2 по соответствующим коду подакцизного товара и коду показателя';
			|en = 'Раздела 2 х стр.030 Раздела 2 по соответствующим коду подакцизного товара и коду показателя'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21Г003"		, "П00021М100003_");
	ИменаПоказателей.Вставить("Р21Г002"		, "П00021М100002_");
	ИменаПоказателей.Вставить("Р02С030"		, "П000020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		ЗаполнитьПоказатель(Показатели.Р02С030, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00021М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г003, СтраницаРаздела, Счетчик);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г002, СтраницаРаздела, Счетчик);
			РасшифроватьПоказатель(Показатели.Р02С030);
			
			РасчетнаяСумма = Окр(Показатели.Р21Г002.Значение * Показатели.Р02С030.Значение);
			Настройки.ЭтоОшибка = НЕ Показатели.Р21Г003.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р21Г003.Значение, Показатели.Р21Г002.Значение, Показатели.Р02С030.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.7';
													|en = '3.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 подр. 2.2 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 подр. 2.2 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида показателя';
														|en = 'Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22Г001"		, "П00022М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р22Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00022М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р22Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р22Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.8';
													|en = '3.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в гр.3 подр.2.2 Раздела 2 = гр.2 подр.2.2 ';
														|en = 'Сумма акциза в гр.3 подр.2.2 Раздела 2 = гр.2 подр.2.2 '") +
		НСтр("ru = 'Раздела 2 х стр.030 Раздела 2 по соответствующим коду подакцизного товара и коду показателя';
			|en = 'Раздела 2 х стр.030 Раздела 2 по соответствующим коду подакцизного товара и коду показателя'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22Г003"		, "П00022М100003_");
	ИменаПоказателей.Вставить("Р22Г002"		, "П00022М100002_");
	ИменаПоказателей.Вставить("Р02С030"		, "П000020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		ЗаполнитьПоказатель(Показатели.Р02С030, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00022М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г003, СтраницаРаздела, Счетчик);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г002, СтраницаРаздела, Счетчик);
			РасшифроватьПоказатель(Показатели.Р02С030);
			
			РасчетнаяСумма = Окр(Показатели.Р22Г002.Значение * Показатели.Р02С030.Значение);
			Настройки.ЭтоОшибка = НЕ Показатели.Р22Г003.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.Р22Г003.Значение, Показатели.Р22Г002.Значение, Показатели.Р02С030.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.9';
													|en = '3.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 подр. 2.3 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 подр. 2.3 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида показателя';
														|en = 'Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23Г001"		, "П00023М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р23Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00023М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р23Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р23Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.10';
													|en = '3.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 подр. 2.4 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 подр. 2.4 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида показателя';
														|en = 'Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р24Г001"		, "П00024М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р24Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00024М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р24Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р24Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_11()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.11';
													|en = '3.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 подр. 2.5 Раздела 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 подр. 2.5 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код вида показателя';
														|en = 'Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р25Г001"		, "П00025М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р25Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00025М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р25Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р25Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_4_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.1';
													|en = '4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.010 Раздела 3 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.010 Раздела 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода вида подакцизного товара';
														|en = 'Ошибочное значение кода вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С010"		, "П000030001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.Р03С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р03С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р03С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.2';
													|en = '4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в стр.020 Раздела 3 должно соответствовать списку ';
			|en = 'Значение кода показателя в стр.020 Раздела 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода показателя';
														|en = 'Ошибочное значение кода показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С020"		, "П000030002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р03С020.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р03С020.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р03С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.3';
													|en = '4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение КБК в стр.030 Раздела 3 должно соответствовать стр.020 Раздела 1';
			|en = 'Значение КБК в стр.030 Раздела 3 должно соответствовать стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С030"		, "П000030003003");
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел3.КБК КАК Р03С030,
	|	Раздел3.Отчет КАК Отчет,
	|	Раздел3.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_Р03 КАК Раздел3
	|ГДЕ
	|	Раздел3.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	Р03С030
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел1.КБК КАК Р01С020,
	|	Раздел1.Отчет КАК Отчет,
	|	Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Раздел1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р01 КАК Раздел1
	|ГДЕ
	|	Раздел1.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Р01С020";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаР3 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР3.Следующий() Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		Выборка = ВыборкаР3.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С030, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР1.НайтиСледующий(Новый Структура("Р01С020", ВыборкаР3.Р03С030)) Тогда
			Выборка	= ВыборкаР1.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, Выборка);
			КонецЦикла;
			ВыборкаР1.Сбросить();
			Настройки.ЭтоОшибка = Ложь;
		Иначе
			Показатели.Р01С020.ЗначениеСтр = "КБК не найден";
			Настройки.ЭтоОшибка = ЗначениеЗаполнено(ВыборкаР3.Р03С030);
		КонецЕсли;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р03С030.ЗначениеСтр, Показатели.Р01С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.4';
													|en = '4.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в стр.100 Раздела 3 = стр.060 х стр.070 Раздела 3 - (стр.080 + стр.090 Раздела 3)';
			|en = 'Налоговая база в стр.100 Раздела 3 = стр.060 х стр.070 Раздела 3 - (стр.080 + стр.090 Раздела 3)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 - (%4 + %5) Итог [%6]';
													|en = '%1 = %2 х %3 - (%4 + %5) Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С100"		, "П000030010003");
	ИменаПоказателей.Вставить("Р03С060"		, "П000030006003");
	ИменаПоказателей.Вставить("Р03С070"		, "П000030007003");
	ИменаПоказателей.Вставить("Р03С080"		, "П000030008003");
	ИменаПоказателей.Вставить("Р03С090"		, "П000030009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р03С060.Значение * Показатели.Р03С070.Значение - 
			(Показатели.Р03С080.Значение + Показатели.Р03С090.Значение), 2);
		Настройки.ЭтоОшибка = НЕ Показатели.Р03С100.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С100.Значение, Показатели.Р03С060.Значение, Показатели.Р03С070.Значение, 
			Показатели.Р03С080.Значение, Показатели.Р03С090.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.5';
													|en = '4.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.110 Раздела 3 = стр.100 Раздела 3 х ставку акциза';
			|en = 'Сумма акциза в стр.110 Раздела 3 = стр.100 Раздела 3 х ставку акциза'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С110"		, "П000030011003");
	ИменаПоказателей.Вставить("Р03С100"		, "П000030010003");
	ИменаПоказателей.Вставить("Р03С105"		, "П000030010500");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р03С100.Значение * Показатели.Р03С105.Значение / 100);
		Настройки.ЭтоОшибка = НЕ Показатели.Р03С110.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р03С110.Значение, Показатели.Р03С100.Значение, Показатели.Р03С105.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.6';
													|en = '4.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.110 Раздела 3 = стр.030 Раздела 1 по соответствующему КБК';
			|en = 'Сумма акциза в стр.110 Раздела 3 = стр.030 Раздела 1 по соответствующему КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по КБК %3';
													|en = '%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С110"		, "П000030011003");
	ИменаПоказателей.Вставить("Р01С030"		, "П00001М103000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел3.КБК КАК КБК,
	|	Раздел3.Р03С110 КАК Р03С110,
	|	Раздел3.Отчет КАК Отчет,
	|	Раздел3.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_Р03 КАК Раздел3
	|ГДЕ
	|	Раздел3.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	КБК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел1.КБК КАК КБК,
	|	Раздел1.Р01С030 КАК Р01С030,
	|	Раздел1.Отчет КАК Отчет,
	|	Раздел1.НомерСтраницы КАК НомерСтраницы,
	|	Раздел1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р01 КАК Раздел1
	|ГДЕ
	|	Раздел1.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	КБК";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаР3 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР3.Следующий() Цикл
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р03С110.Итог = 0;
		Показатели.Р01С030.Итог = 0;
		
		Выборка = ВыборкаР3.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С110, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР1.НайтиСледующий(Новый Структура("КБК", ВыборкаР3.КБК)) Тогда
			Выборка	= ВыборкаР1.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, Выборка);
			КонецЦикла;
			ВыборкаР1.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р03С110.Итог = Показатели.Р01С030.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р03С110.Значение, Показатели.Р01С030.Значение, ЗначениеСтр(ВыборкаР3.КБК));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_1

&НаСервере
Процедура ПроверкаКС_5_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.1';
													|en = '5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение признака СЗПК в стр.005 Приложения 1 должно соответствовать списку ';
			|en = 'Значение признака СЗПК в стр.005 Приложения 1 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака СЗПК';
														|en = 'Ошибочное значение признака СЗПК'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С005"		, "П001010000503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П01С005.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П01С005.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П01С005.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.2';
													|en = '5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.010 Приложения 1 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.010 Приложения 1 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода вида подакцизного товара';
														|en = 'Ошибочное значение кода вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010"		, "П001010001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П01С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01С010, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П01С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П01С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.3';
													|en = '5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода подакцизного товара в стр.010 Приложения 1 должно соответствовать стр.010 Раздела 2';
			|en = 'Значение кода подакцизного товара в стр.010 Приложения 1 должно соответствовать стр.010 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода подакцизного товара';
														|en = 'Ошибочное значение кода подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010"		, "П001010001003");
	ИменаПоказателей.Вставить("Р02С010"		, "П000020001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приложение1.КодТовара КАК П01С010,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	П01С010
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Раздел2.КодТовара КАК Р02С010,
	|	Раздел2.Отчет КАК Отчет,
	|	Раздел2.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_Р24 КАК Раздел2
	|ГДЕ
	|	Раздел2.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	Р02С010";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		ЗарегистрироватьФормулу(Настройки);
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01С010, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Р02С010", ВыборкаП1.П01С010)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С010, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
			Настройки.ЭтоОшибка = Ложь;
		Иначе
			Показатели.Р02С010.ЗначениеСтр = "код ПТ не найден";
			Настройки.ЭтоОшибка = Истина;
		КонецЕсли;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П01С010.ЗначениеСтр, Показатели.Р02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.4';
													|en = '5.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.1 Приложения 1 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.1 Приложения 1 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода показателя';
														|en = 'Ошибочное значение кода показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г001"		, "П00101М200001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П01Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00101М1 Цикл
				Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00101М2_" + XMLСтрока(Счетчик)] Цикл
					ЗарегистрироватьФормулу(Настройки);
					ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик, Счетчик2);
					
					Настройки.ЭтоОшибка = Список.Получить(Показатели.П01Г001.Значение) = Неопределено;
					Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П01Г001.ЗначениеСтр);
					ДополнитьСтруктуруОшибок(Настройки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.5';
													|en = '5.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в гр.4 Приложения 1 = гр.2 Приложения 1 х гр.3 Приложения 1';
			|en = 'Налоговая база в гр.4 Приложения 1 = гр.2 Приложения 1 х гр.3 Приложения 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение налоговой базы';
														|en = 'Ошибочное значение налоговой базы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М200004_");
	ИменаПоказателей.Вставить("П01Г002"		, "П00101М200002_");
	ИменаПоказателей.Вставить("П01Г003"		, "П00101М200003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00101М1 Цикл
			Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00101М2_" + XMLСтрока(Счетчик)] Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик, Счетчик2);
				
				РасчетнаяСумма = Окр(Показатели.П01Г002.Значение * Показатели.П01Г003.Значение, 2);
				Настройки.ЭтоОшибка = НЕ Показатели.П01Г004.Значение = РасчетнаяСумма;
				Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
					Показатели.П01Г004.Значение, Показатели.П01Г002.Значение, Показатели.П01Г003.Значение, РасчетнаяСумма);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.6';
													|en = '5.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.4 Приложения 1 должна быть равна гр.2 подраздела 2.1 Раздела 2 и (или) гр.2 подраздела 2.2 ';
			|en = 'Гр.4 Приложения 1 должна быть равна гр.2 подраздела 2.1 Раздела 2 и (или) гр.2 подраздела 2.2 '") +
		НСтр("ru = 'Раздела 2 и (или) гр.2 подраздела 2.3 Раздела 2 и (или) гр.2 подраздела 2.5 Раздела 2 по ';
			|en = 'Раздела 2 и (или) гр.2 подраздела 2.3 Раздела 2 и (или) гр.2 подраздела 2.5 Раздела 2 по '") +
		НСтр("ru = 'соответствующему коду показателя в гр.1 Приложения 1 и коду подакцизного товара в стр.010 Приложения 1';
			|en = 'соответствующему коду показателя в гр.1 Приложения 1 и коду подакцизного товара в стр.010 Приложения 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду ПТ %3 и КП %4';
													|en = '%1 = %2 по коду ПТ %3 и КП %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная значение налоговой базы';
														|en = 'Ошибочная значение налоговой базы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП1", "4");
	ПроверкаКС_5_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.7';
													|en = '5.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в гр.5 Приложения 1 = гр.4 Приложения 1 х ставку акциза';
			|en = 'Сумма акциза в гр.5 Приложения 1 = гр.4 Приложения 1 х ставку акциза'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010"		, "П001010001003");
	ИменаПоказателей.Вставить("П01Г005"		, "П00101М200005_");
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М200004_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
		ЗаполнитьПоказатель(Показатели.П01С010, СтраницаРаздела);
		СтавкаАкциза = ДанныеКС.СтавкиАкцизов.Получить(Показатели.П01С010.Значение);
		
		Если НЕ СтавкаАкциза = Неопределено Тогда
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00101М1 Цикл
				Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00101М2_" + XMLСтрока(Счетчик)] Цикл
					ЗарегистрироватьФормулу(Настройки);
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г005, СтраницаРаздела, Счетчик, Счетчик2);
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г004, СтраницаРаздела, Счетчик, Счетчик2);
					ВнестиПоказательБезРасшифровки("Ставка акциза, руб.", СтавкаАкциза);
					
					РасчетнаяСумма = Окр(Показатели.П01Г004.Значение * СтавкаАкциза);
					Настройки.ЭтоОшибка = НЕ Показатели.П01Г005.Значение = РасчетнаяСумма;
					Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
					Показатели.П01Г005.Значение, Показатели.П01Г004.Значение, СтавкаАкциза, РасчетнаяСумма);
					ДополнитьСтруктуруОшибок(Настройки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.8';
													|en = '5.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1';
														|en = 'Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.5 Приложения 1 должна быть равна гр.3 подраздела 2.1 Раздела 2 и (или) гр.3 подраздела 2.2 ';
			|en = 'Гр.5 Приложения 1 должна быть равна гр.3 подраздела 2.1 Раздела 2 и (или) гр.3 подраздела 2.2 '") +
		НСтр("ru = 'Раздела 2 и (или) гр.3 подраздела 2.3 Раздела 2 и (или) гр.3 подраздела 2.5 Раздела 2 по ';
			|en = 'Раздела 2 и (или) гр.3 подраздела 2.3 Раздела 2 и (или) гр.3 подраздела 2.5 Раздела 2 по '") +
		НСтр("ru = 'соответствующему коду показателя в гр.1 Приложения 1 и коду подакцизного товара в стр.010 Приложения 1';
			|en = 'соответствующему коду показателя в гр.1 Приложения 1 и коду подакцизного товара в стр.010 Приложения 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 по коду ПТ %3 и КП %4';
													|en = '%1 = %2 по коду ПТ %3 и КП %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП1", "5");
	ПроверкаКС_5_08_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_08_код(Настройки)
	
	Перем Показатели;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("Сумма", Настройки.ГрафаП1 = "5");
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Приложение1.П01Г005
	|		ИНАЧЕ Приложение1.П01Г004
	|	КОНЕЦ КАК П01Г001,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.НомерСтраницы КАК НомерСтраницы,
	|	Приложение1.НомерСтроки КАК НомерСтроки,
	|	Приложение1.НомерСтроки2 КАК НомерСтроки2
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки,
	|	НомерСтроки2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.КодТовара + Раздел2.КодПоказателя КАК Ключ,
	|	Раздел2.КодТовара КАК КодТовара,
	|	Раздел2.КодПоказателя КАК КодПоказателя,
	|	Раздел2.Раздел КАК Раздел,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел2.Р21Г003
	|		ИНАЧЕ Раздел2.Р21Г002
	|	КОНЕЦ КАК Р21Г001,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел2.Р22Г003
	|		ИНАЧЕ Раздел2.Р22Г002
	|	КОНЕЦ КАК Р22Г001,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел2.Р23Г003
	|		ИНАЧЕ Раздел2.Р23Г002
	|	КОНЕЦ КАК Р23Г001,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел2.Р25Г003
	|		ИНАЧЕ Раздел2.Р25Г002
	|	КОНЕЦ КАК Р25Г001,
	|	Раздел2.Отчет КАК Отчет,
	|	Раздел2.НомерСтраницы КАК НомерСтраницы,
	|	Раздел2.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел2
	|ГДЕ
	|	Раздел2.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	Раздел,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г001"		, "П00101М20000" + Настройки.ГрафаП1 + "_");
	ИменаПоказателей.Вставить("Р21Г001"		, "П00021М10000" + ?(Настройки.ГрафаП1 = "5", "3", "2") + "_");
	ИменаПоказателей.Вставить("Р22Г001"		, "П00022М10000" + ?(Настройки.ГрафаП1 = "5", "3", "2") + "_");
	ИменаПоказателей.Вставить("Р23Г001"		, "П00023М10000" + ?(Настройки.ГрафаП1 = "5", "3", "2") + "_");
	ИменаПоказателей.Вставить("Р25Г001"		, "П00025М10000" + ?(Настройки.ГрафаП1 = "5", "3", "2") + "_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П01Г001.Итог = 0;
		Показатели.Р21Г001.Итог = 0;
		Показатели.Р22Г001.Итог = 0;
		Показатели.Р23Г001.Итог = 0;
		Показатели.Р25Г001.Итог = 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г001, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Раздел = "21" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г001, Выборка);
				ИначеЕсли Выборка.Раздел = "22" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г001, Выборка);
				ИначеЕсли Выборка.Раздел = "23" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, Выборка);
				ИначеЕсли Выборка.Раздел = "25" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г001, Выборка);
				КонецЕсли;
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		РасчетнаяСумма = Показатели.Р21Г001.Итог + Показатели.Р22Г001.Итог + Показатели.Р23Г001.Итог + 
			Показатели.Р25Г001.Итог;
		Настройки.ЭтоОшибка = НЕ Показатели.П01Г001.Итог = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П01Г001.Итог, РасчетнаяСумма, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_2

&НаСервере
Процедура ПроверкаКС_6_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.1';
													|en = '6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода признака документа в стр.001 Приложения 2 должно соответствовать списку ';
			|en = 'Значение кода признака документа в стр.001 Приложения 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не верно указан код признака документа';
														|en = 'Не верно указан код признака документа'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С001"		, "П001020000103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П02С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П02С001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.2';
													|en = '6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение номера банковской гарантии в стр.010 Приложения 2 должно быть заполнено';
			|en = 'Значение номера банковской гарантии в стр.010 Приложения 2 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение номера банковской гарантии %1 заполнено';
													|en = 'Значение номера банковской гарантии %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан номер банковской гарантии';
														|en = 'Не указан номер банковской гарантии'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С010"		, "П001020001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С010, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П02С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.3';
													|en = '6.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дата выдачи банковской гарантии в стр.020 Приложения 2 <= стр.030 Приложения 2';
			|en = 'Дата выдачи банковской гарантии в стр.020 Приложения 2 <= стр.030 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная дата выдачи банковской гарантии';
														|en = 'Ошибочная дата выдачи банковской гарантии'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С020.Значение <= Показатели.П02С030.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С020.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.4';
													|en = '6.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дата начала действия банковской гарантии в стр.030 Приложения 2 >= стр.020 Приложения 2';
			|en = 'Дата начала действия банковской гарантии в стр.030 Приложения 2 >= стр.020 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная дата начала действия банковской гарантии';
														|en = 'Ошибочная дата начала действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С030.Значение >= Показатели.П02С020.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С030.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.5';
													|en = '6.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дата окончания действия банковской гарантии в стр.040 Приложения 2 > стр.020, 030 Приложения 2';
			|en = 'Дата окончания действия банковской гарантии в стр.040 Приложения 2 > стр.020, 030 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > %2, %3';
													|en = '%1 > %2, %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная дата окончания действия банковской гарантии';
														|en = 'Ошибочная дата окончания действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С040"		, "П001020004003");
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ (Показатели.П02С040.Значение 
			> Показатели.П02С020.Значение И Показатели.П02С040.Значение > Показатели.П02С030.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С040.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С020.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", Показатели.П02С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.6';
													|en = '6.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма банковской гарантии в стр.050 Приложения 2 > 0';
			|en = 'Сумма банковской гарантии в стр.050 Приложения 2 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0';
													|en = '%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма банковской гарантии';
														|en = 'Ошибочная сумма банковской гарантии'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С050"		, "П001020005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ Показатели.П02С050.Значение > 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С050.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.7';
													|en = '6.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Превышение суммы акциза в стр.060 Приложения 2 должно быть равно сумме стр.110 Приложения 2';
			|en = 'Превышение суммы акциза в стр.060 Приложения 2 должно быть равно сумме стр.110 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С060"		, "П001020006003");
	ИменаПоказателей.Вставить("П02С110"		, "П00102М111000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С060, СтраницаРаздела);
		
		Показатели.П02С110.Итог = 0;
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С110, СтраницаРаздела, XMLСтрока(Счетчик));
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С060.Значение = Показатели.П02С110.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С060.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С110.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.8';
													|en = '6.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.070 Приложения 2 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.070 Приложения 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код вида подакцизного товара';
														|en = 'Ошибочный код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С070"		, "П00102М107000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П02С070.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П02С070.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С070.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.9';
													|en = '6.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.3 стр.080 Приложения 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.3 стр.080 Приложения 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код показателя';
														|en = 'Ошибочный код показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В081"		, "П00102М208003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П02В081.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
				Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00102М2_" + XMLСтрока(Счетчик)] Цикл
					ЗарегистрироватьФормулу(Настройки);
					ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик, Счетчик2);
				
					Настройки.ЭтоОшибка = Список.Получить(Показатели.П02В081.Значение) = Неопределено;
					Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02В081.ЗначениеСтр);
					ДополнитьСтруктуруОшибок(Настройки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_10а()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.10а';
													|en = '6.10а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru = 'Код показателя в гр.3 стр.080 Приложения 2 = 20001, 20008, 20012 или не заполнен';
			|en = 'Код показателя в гр.3 стр.080 Приложения 2 = 20001, 20008, 20012 или не заполнен'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.4 стр.080 Приложения 2 >= гр.2 подраздела 2.2 Раздела 2 по соответствующему ';
			|en = 'Гр.4 стр.080 Приложения 2 >= гр.2 подраздела 2.2 Раздела 2 по соответствующему '") +
		НСтр("ru = 'коду подакцизного товара и кодам показателей 20001, 20008, 20012';
			|en = 'коду подакцизного товара и кодам показателей 20001, 20008, 20012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 >= %2 по коду товара %3, коду показателя %4';
				|en = '%1 >= %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный объем подакцизного товара';
														|en = 'Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП2", "4");
	Настройки.Вставить("ГрафаР2", "2");
	ПроверкаКС_6_10_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_10б()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.10б';
													|en = '6.10б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru = 'Код показателя в гр.3 стр.080 Приложения 2 = 20001, 20008, 20012 или не заполнен';
			|en = 'Код показателя в гр.3 стр.080 Приложения 2 = 20001, 20008, 20012 или не заполнен'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.5 стр.080 Приложения 2 >= гр.3 подраздела 2.2 Раздела 2 по соответствующему ';
			|en = 'Гр.5 стр.080 Приложения 2 >= гр.3 подраздела 2.2 Раздела 2 по соответствующему '") +
		НСтр("ru = 'коду подакцизного товара и кодам показателей 20001, 20008, 20012';
			|en = 'коду подакцизного товара и кодам показателей 20001, 20008, 20012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 >= %2 по коду товара %3, коду показателя %4';
				|en = '%1 >= %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП2", "5");
	Настройки.Вставить("ГрафаР2", "3");
	ПроверкаКС_6_10_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_10_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В080"		, "П00102М20800" + Настройки.ГрафаП2 + "_");
	ИменаПоказателей.Вставить("Р22Г001"		, "П00022М10000" + Настройки.ГрафаР2 + "_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("СтрокаОтчета", "080");
	Запрос.УстановитьПараметр("Раздел", "22");
	Запрос.УстановитьПараметр("Сумма", Настройки.ГрафаП2 = "5");
	Запрос.УстановитьПараметр("МассивКодовПоказателей", СтрРазделить(",20001,20008,20012", ","));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение2.КодТовара + Приложение2.П02В083 КАК Ключ,
	|	Приложение2.КодТовара КАК КодТовара,
	|	Приложение2.П02В083 КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Приложение2.П02В085
	|		ИНАЧЕ Приложение2.П02В084
	|	КОНЕЦ КАК П02В080,
	|	Приложение2.Отчет КАК Отчет,
	|	Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	Приложение2.НомерСтроки КАК НомерСтроки,
	|	Приложение2.НомерСтроки2 КАК НомерСтроки2
	|ИЗ
	|	ВТ_П02 КАК Приложение2
	|ГДЕ
	|	Приложение2.Отчет = &Отчет
	|	И Приложение2.СтрокаОтчета = &СтрокаОтчета
	|	И Приложение2.П02В083 В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки,
	|	НомерСтроки2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел22.КодТовара + Раздел22.КодПоказателя КАК Ключ,
	|	Раздел22.КодТовара КАК КодТовара,
	|	Раздел22.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел22.Р22Г003
	|		ИНАЧЕ Раздел22.Р22Г002
	|	КОНЕЦ КАК Р22Г001,
	|	Раздел22.Отчет КАК Отчет,
	|	Раздел22.НомерСтраницы КАК НомерСтраницы,
	|	Раздел22.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел22
	|ГДЕ
	|	Раздел22.Отчет = &Отчет
	|	И Раздел22.Раздел = &Раздел
	|	И Раздел22.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП2.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П02В080.Итог = 0;
		Показатели.Р22Г001.Итог = 0;
		
		Выборка = ВыборкаП2.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02В080, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП2.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г001, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02В080.Итог >= Показатели.Р22Г001.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П02В080.Итог, Показатели.Р22Г001.Итог, ЗначениеСтр(ВыборкаП2.КодТовара), 
			ЗначениеСтр(ВыборкаП2.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_11()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.11';
													|en = '6.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.3 стр.090 Приложения 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.3 стр.090 Приложения 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код показателя';
														|en = 'Ошибочный код показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В091"		, "П00102М309003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П02В091.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
				Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00102М3_" + XMLСтрока(Счетчик)] Цикл
					ЗарегистрироватьФормулу(Настройки);
					ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик, Счетчик2);
				
					Настройки.ЭтоОшибка = Список.Получить(Показатели.П02В091.Значение) = Неопределено;
					Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02В091.ЗначениеСтр);
					ДополнитьСтруктуруОшибок(Настройки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_12а()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.12а';
													|en = '6.12а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru = 'Код показателя в гр.3 стр.090 Приложения 2 = 50003, 50008, 50009 или не заполнен';
			|en = 'Код показателя в гр.3 стр.090 Приложения 2 = 50003, 50008, 50009 или не заполнен'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.4 стр.090 Приложения 2 = гр.2 подраздела 2.5 Раздела 2 по соответствующему ';
			|en = 'Гр.4 стр.090 Приложения 2 = гр.2 подраздела 2.5 Раздела 2 по соответствующему '") +
		НСтр("ru = 'коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года';
			|en = 'коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6';
				|en = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный объем подакцизного товара';
														|en = 'Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП2", "4");
	Настройки.Вставить("ГрафаР2", "2");
	ПроверкаКС_6_12_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_12б()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.12б';
													|en = '6.12б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru = 'Код показателя в гр.3 стр.090 Приложения 2 = 50003, 50008, 50009 или не заполнен';
			|en = 'Код показателя в гр.3 стр.090 Приложения 2 = 50003, 50008, 50009 или не заполнен'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Гр.5 стр.090 Приложения 2 = гр.3 подраздела 2.5 Раздела 2 по соответствующему ';
			|en = 'Гр.5 стр.090 Приложения 2 = гр.3 подраздела 2.5 Раздела 2 по соответствующему '") +
		НСтр("ru = 'коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года';
			|en = 'коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6';
				|en = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ГрафаП2", "5");
	Настройки.Вставить("ГрафаР2", "3");
	ПроверкаКС_6_12_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_12_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В090"		, "П00102М30900" + Настройки.ГрафаП2 + "_");
	ИменаПоказателей.Вставить("Р25Г001"		, "П00025М10000" + Настройки.ГрафаР2 + "_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("СтрокаОтчета", "090");
	Запрос.УстановитьПараметр("Раздел", "25");
	Запрос.УстановитьПараметр("Сумма", Настройки.ГрафаП2 = "5");
	Запрос.УстановитьПараметр("МассивКодовПоказателей", СтрРазделить(",50003,50008,50009", ","));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение2.КодТовара + Приложение2.П02В093 + Приложение2.П02В096 + Приложение2.П02В097 КАК Ключ,
	|	Приложение2.КодТовара КАК КодТовара,
	|	Приложение2.П02В093 КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Приложение2.П02В095
	|		ИНАЧЕ Приложение2.П02В094
	|	КОНЕЦ КАК П02В090,
	|	Приложение2.П02В096 КАК П02В096,
	|	Приложение2.П02В097 КАК П02В097,
	|	Приложение2.Отчет КАК Отчет,
	|	Приложение2.НомерСтраницы КАК НомерСтраницы,
	|	Приложение2.НомерСтроки КАК НомерСтроки,
	|	Приложение2.НомерСтроки2 КАК НомерСтроки2
	|ИЗ
	|	ВТ_П02 КАК Приложение2
	|ГДЕ
	|	Приложение2.Отчет = &Отчет
	|	И Приложение2.СтрокаОтчета = &СтрокаОтчета
	|	И Приложение2.П02В083 В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки,
	|	НомерСтроки2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	МИНИМУМ(П02В096),
	|	МИНИМУМ(П02В097)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел25.КодТовара + Раздел25.КодПоказателя + Раздел25.Р25Г004 + Раздел25.Р25Г005 КАК Ключ,
	|	Раздел25.КодТовара КАК КодТовара,
	|	Раздел25.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел25.Р25Г003
	|		ИНАЧЕ Раздел25.Р25Г002
	|	КОНЕЦ КАК Р25Г001,
	|	Раздел25.Р25Г004 КАК Р25Г004,
	|	Раздел25.Р25Г005 КАК Р25Г005,
	|	Раздел25.Отчет КАК Отчет,
	|	Раздел25.НомерСтраницы КАК НомерСтраницы,
	|	Раздел25.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел25
	|ГДЕ
	|	Раздел25.Отчет = &Отчет
	|	И Раздел25.Раздел = &Раздел
	|	И Раздел25.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП2.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П02В090.Итог = 0;
		Показатели.Р25Г001.Итог = 0;
		
		Выборка = ВыборкаП2.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02В090, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП2.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г001, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02В090.Итог = Показатели.Р25Г001.Итог;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П02В090.Итог, Показатели.Р25Г001.Итог, ЗначениеСтр(ВыборкаП2.КодТовара), 
			ЗначениеСтр(ВыборкаП2.КодПоказателя), ЗначениеСтр(ВыборкаП2.П02В096), ЗначениеСтр(ВыборкаП2.П02В097));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_13()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.13';
													|en = '6.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в гр.3 стр.100 Приложения 2 должно соответствовать списку ';
			|en = 'Значение кода показателя в гр.3 стр.100 Приложения 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код показателя';
														|en = 'Ошибочный код показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В101"		, "П00102М410003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П02В101.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
				Для Счетчик2 = 1 По СтраницаРаздела["КолвоСтрокП00102М4_" + XMLСтрока(Счетчик)] Цикл
					ЗарегистрироватьФормулу(Настройки);
					ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик, Счетчик2);
				
					Настройки.ЭтоОшибка = Список.Получить(Показатели.П02В101.Значение) = Неопределено;
					Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02В101.ЗначениеСтр);
					ДополнитьСтруктуруОшибок(Настройки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_14()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.14';
													|en = '6.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2';
														|en = 'Приложение 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Превышение суммы акциза в стр.110 Приложения 2 = стр.080 - стр.090 - стр.100 Приложения 2 ';
			|en = 'Превышение суммы акциза в стр.110 Приложения 2 = стр.080 - стр.090 - стр.100 Приложения 2 '") +
		НСтр("ru = 'по каждому коду подакцизного товара в стр.070 Приложения 2';
			|en = 'по каждому коду подакцизного товара в стр.070 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С110"		, "П00102М111000_");
	ИменаПоказателей.Вставить("П02В085"		, "П00102М208005_");
	ИменаПоказателей.Вставить("П02В095"		, "П00102М309005_");
	ИменаПоказателей.Вставить("П02В105"		, "П00102М410005_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00102М1 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С110, СтраницаРаздела, Счетчик);
			
			Показатели.П02В085.Итог = 0;
			Показатели.П02В095.Итог = 0;
			Показатели.П02В105.Итог = 0;
			
			КолвоСтрок2 = СтраницаРаздела["КолвоСтрокП00102М2_" + XMLСтрока(Счетчик)];
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02В085, СтраницаРаздела, Счетчик, Счетчик2);
			КонецЦикла;
			
			КолвоСтрок2 = СтраницаРаздела["КолвоСтрокП00102М3_" + XMLСтрока(Счетчик)];
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02В095, СтраницаРаздела, Счетчик, Счетчик2);
			КонецЦикла;
			
			КолвоСтрок2 = СтраницаРаздела["КолвоСтрокП00102М4_" + XMLСтрока(Счетчик)];
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02В105, СтраницаРаздела, Счетчик, Счетчик2);
			КонецЦикла;
			
			РасчетнаяСумма = Показатели.П02В085.Итог - Показатели.П02В095.Итог - Показатели.П02В105.Итог;
			Настройки.ЭтоОшибка = НЕ Показатели.П02С110.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.П02С110.Значение, Показатели.П02В085.Итог, Показатели.П02В095.Итог, Показатели.П02В105.Итог, 
				РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_3

&НаСервере
Процедура ПроверкаКС_7_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.1';
													|en = '7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода признака организации в стр.001 Приложения 3 должно соответствовать списку ';
			|en = 'Значение кода признака организации в стр.001 Приложения 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код признака организации';
														|en = 'Ошибочный код признака организации'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С001"		, "П001030000103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П03С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П03С001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.2';
													|en = '7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение ИНН в стр.010 Приложения 3 должно быть заполнено';
			|en = 'Значение ИНН в стр.010 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение ИНН %1 заполнено';
													|en = 'Значение ИНН %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении ИНН';
														|en = 'Ошибка при заполнении ИНН'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С010"		, "П001030001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С010, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.3';
													|en = '7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение КПП в стр.020 Приложения 3 должно быть заполнено';
			|en = 'Значение КПП в стр.020 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение КПП %1 заполнено';
													|en = 'Значение КПП %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении КПП';
														|en = 'Ошибка при заполнении КПП'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С020"		, "П001030002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С020, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.4';
													|en = '7.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода признака свидетельства в стр.030 Приложения 3 должно соответствовать списку ';
			|en = 'Значение кода признака свидетельства в стр.030 Приложения 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код признака свидетельства';
														|en = 'Ошибочный код признака свидетельства'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С030"		, "П001030003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П03С030.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П03С030.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С030.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.5';
													|en = '7.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено. Устаревшее';
													|en = 'Отключено. Устаревшее'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Серия и номер свидетельства в стр.030 Приложения 3 должны быть заполнены';
			|en = 'Серия и номер свидетельства в стр.030 Приложения 3 должны быть заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Серия %1 и номер %2 заполнены';
													|en = 'Серия %1 и номер %2 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении серии и номера свидетельства';
														|en = 'Ошибка при заполнении серии и номера свидетельства'"));
	Настройки = ОбработатьНастройки(Заголовки);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.6';
													|en = '7.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение ИНН в стр.040 Приложения 3 должно быть заполнено';
			|en = 'Значение ИНН в стр.040 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение ИНН %1 заполнено';
													|en = 'Значение ИНН %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении ИНН';
														|en = 'Ошибка при заполнении ИНН'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С040"		, "П001030004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С040, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С040.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С040.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.7';
													|en = '7.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение КПП в стр.050 Приложения 3 должно быть заполнено';
			|en = 'Значение КПП в стр.050 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение КПП %1 заполнено';
													|en = 'Значение КПП %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении КПП';
														|en = 'Ошибка при заполнении КПП'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С050"		, "П001030005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С050, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С050.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С050.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.8';
													|en = '7.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Общий объем бензина в стр.060 Приложения 3 = стр.100 + стр.130 Приложения 3';
			|en = 'Общий объем бензина в стр.060 Приложения 3 = стр.100 + стр.130 Приложения 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение общего объема бензина';
														|en = 'Ошибочное значение общего объема бензина'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С060"		, "П001030006003");
	ИменаПоказателей.Вставить("П03С100"		, "П00103М110000_");
	ИменаПоказателей.Вставить("П03С130"		, "П00103М113000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П03С100.Итог = 0;
		Показатели.П03С130.Итог = 0;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С060, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00103М1 Цикл
			Если ЗначениеЗаполнено(СтраницаРаздела["П00103М113000_" + XMLСтрока(Счетчик)]) Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С130, СтраницаРаздела, Счетчик);
			ИначеЕсли ЗначениеЗаполнено(СтраницаРаздела["П00103М110000_" + XMLСтрока(Счетчик)]) Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С100, СтраницаРаздела, Счетчик);
			Иначе
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С100, СтраницаРаздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С130, СтраницаРаздела, Счетчик);
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Показатели.П03С100.Итог + Показатели.П03С130.Итог;
		Настройки.ЭтоОшибка = НЕ Показатели.П03С060.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.П03С060.Значение, 
			Показатели.П03С100.Итог, Показатели.П03С130.Итог, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.9';
													|en = '7.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.070 Приложения 3 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.070 Приложения 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код вида подакцизного товара';
														|en = 'Ошибочный код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С070"		, "П001030007003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П03С070.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П03С070.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С070.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.10';
													|en = '7.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение номера счета фактуры в стр.080 Приложения 3 должно быть заполнено';
			|en = 'Значение номера счета фактуры в стр.080 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение номера счета-фактуры %1 заполнено';
													|en = 'Значение номера счета-фактуры %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении номера счета-фактуры';
														|en = 'Ошибка при заполнении номера счета-фактуры'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С080"		, "П00103М108000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00103М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С080, СтраницаРаздела, Счетчик);
		
			Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С080.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С080.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_11()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.11';
													|en = '7.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение даты счета фактуры в стр.090 Приложения 3 должно быть заполнено';
			|en = 'Значение даты счета фактуры в стр.090 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение даты счета-фактуры %1 заполнено';
													|en = 'Значение даты счета-фактуры %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении даты счета-фактуры';
														|en = 'Ошибка при заполнении даты счета-фактуры'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С090"		, "П00103М109000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00103М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С090, СтраницаРаздела, Счетчик);
		
			Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С090.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С090.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.12';
													|en = '7.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение объема подакцизного товара в стр.100 Приложения 3 должно быть заполнено';
			|en = 'Значение объема подакцизного товара в стр.100 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение объема %1 заполнено';
													|en = 'Значение объема %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении объема';
														|en = 'Ошибка при заполнении объема'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С100"		, "П00103М110000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00103М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С100, СтраницаРаздела, Счетчик);
		
			Настройки.ЭтоОшибка = СтраницаРаздела.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П03С100.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С100.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_13()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.13';
													|en = '7.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3';
														|en = 'Приложение 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Реквизиты корректировочного счета-фактуры в стр.110, 120, 130 Приложения 3 должны быть ';
			|en = 'Реквизиты корректировочного счета-фактуры в стр.110, 120, 130 Приложения 3 должны быть '") +
		НСтр("ru = 'заполнены в случае заполнения одного из значений';
			|en = 'заполнены в случае заполнения одного из значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значения %1, %2, %3 заполнены';
													|en = 'Значения %1, %2, %3 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибка при заполнении сведений корректировочного счета-фактуры';
														|en = 'Ошибка при заполнении сведений корректировочного счета-фактуры'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С110"		, "П00103М111000_");
	ИменаПоказателей.Вставить("П03С120"		, "П00103М112000_");
	ИменаПоказателей.Вставить("П03С130"		, "П00103М113000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00103М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
		
			Настройки.ЭтоОшибка = (ЗначениеЗаполнено(Показатели.П03С110.Значение) 
				ИЛИ ЗначениеЗаполнено(Показатели.П03С120.Значение) ИЛИ ЗначениеЗаполнено(Показатели.П03С130.Значение))
				И НЕ (ЗначениеЗаполнено(Показатели.П03С110.Значение) И ЗначениеЗаполнено(Показатели.П03С120.Значение)
				И ЗначениеЗаполнено(Показатели.П03С130.Значение));
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.П03С110.ЗначениеСтр, 
				Показатели.П03С120.ЗначениеСтр, Показатели.П03С130.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_4

&НаСервере
Процедура ПроверкаКС_8_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.1';
													|en = '8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.010 Приложения 4 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.010 Приложения 4 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода вида подакцизного товара';
														|en = 'Ошибочное значение кода вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С010"		, "П001040001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П04С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С010, ДанныеКС.Приложение4);
		
		Настройки.ЭтоОшибка = Список.Получить(Показатели.П04С010.Значение) = Неопределено;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.2';
													|en = '8.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в стр.020 Приложения 4 должно соответствовать списку ';
			|en = 'Значение кода показателя в стр.020 Приложения 4 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода показателя';
														|en = 'Ошибочное значение кода показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С020"		, "П001040002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П04С020.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С020, ДанныеКС.Приложение4);
		
		Настройки.ЭтоОшибка = Список.Получить(Показатели.П04С020.Значение) = Неопределено;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.3';
													|en = '8.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в стр.030 Приложения 4 = гр.2 подр.2.1 Раздела 2 по соответствующему коду ';
			|en = 'Налоговая база в стр.030 Приложения 4 = гр.2 подр.2.1 Раздела 2 по соответствующему коду '") +
		НСтр("ru = 'подакцизного товара и коду показателя 10036 в гр.1 подр.2.1 Раздела 2';
			|en = 'подакцизного товара и коду показателя 10036 в гр.1 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4';
				|en = '%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный объем подакцизного товара';
														|en = 'Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("СтрокаП4", "030");
	Настройки.Вставить("ГрафаР2", "2");
	ПроверкаКС_8_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.4';
													|en = '8.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.040 Приложения 4 = стр.030 Приложения 4 х ставку акциза';
			|en = 'Сумма акциза в стр.040 Приложения 4 = стр.030 Приложения 4 х ставку акциза'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С010"		, "П001040001003");
	ИменаПоказателей.Вставить("П04С040"		, "П001040004003");
	ИменаПоказателей.Вставить("П04С030"		, "П001040003003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗаполнитьПоказатель(Показатели.П04С010, ДанныеКС.Приложение4);
	СтавкаАкциза = ДанныеКС.СтавкиАкцизов.Получить(Показатели.П04С010.Значение);
	
	Если НЕ СтавкаАкциза = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		РасшифроватьПоказатель(Показатели.П04С010);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С040, ДанныеКС.Приложение4);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С030, ДанныеКС.Приложение4);
		ВнестиПоказательБезРасшифровки("Ставка акциза, руб.", СтавкаАкциза);
		
		РасчетнаяСумма = Окр(Показатели.П04С030.Значение * СтавкаАкциза);
		Настройки.ЭтоОшибка = НЕ Показатели.П04С040.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.П04С040.Значение, Показатели.П04С030.Значение, СтавкаАкциза, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.5';
													|en = '8.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.040 Приложения 4 = гр.3 подр.2.1 Раздела 2 по соответствующему коду ';
			|en = 'Сумма акциза в стр.040 Приложения 4 = гр.3 подр.2.1 Раздела 2 по соответствующему коду '") +
		НСтр("ru = 'подакцизного товара и коду показателя 10036 в гр.1 подр.2.1 Раздела 2';
			|en = 'подакцизного товара и коду показателя 10036 в гр.1 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4';
				|en = '%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("СтрокаП4", "040");
	Настройки.Вставить("ГрафаР2", "3");
	ПроверкаКС_8_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С001"		, "П0010400" + Настройки.СтрокаП4 + "03");
	ИменаПоказателей.Вставить("Р21Г001"		, "П00021М10000" + Настройки.ГрафаР2 + "_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("Раздел", "21");
	Запрос.УстановитьПараметр("Сумма", Настройки.ГрафаР2 = "3");
	Запрос.УстановитьПараметр("МассивКодовПоказателей", СтрРазделить(",10036", ","));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение4.КодТовара + Приложение4.КодПоказателя КАК Ключ,
	|	Приложение4.КодТовара КАК КодТовара,
	|	Приложение4.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Приложение4.П04С040
	|		ИНАЧЕ Приложение4.П04С030
	|	КОНЕЦ КАК П04С001,
	|	Приложение4.Отчет КАК Отчет,
	|	Приложение4.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_П04 КАК Приложение4
	|ГДЕ
	|	Приложение4.Отчет = &Отчет
	|	И Приложение4.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел21.КодТовара + Раздел21.КодПоказателя КАК Ключ,
	|	Раздел21.КодТовара КАК КодТовара,
	|	Раздел21.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел21.Р21Г003
	|		ИНАЧЕ Раздел21.Р21Г002
	|	КОНЕЦ КАК Р21Г001,
	|	Раздел21.Отчет КАК Отчет,
	|	Раздел21.НомерСтраницы КАК НомерСтраницы,
	|	Раздел21.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел21
	|ГДЕ
	|	Раздел21.Отчет = &Отчет
	|	И Раздел21.Раздел = &Раздел
	|	И Раздел21.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП4 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП4.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П04С001.Итог = 0;
		Показатели.Р21Г001.Итог = 0;
		
		Выборка = ВыборкаП4.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С001, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП4.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г001, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П04С001.Итог = Показатели.Р21Г001.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П04С001.Итог, Показатели.Р21Г001.Итог, ЗначениеСтр(ВыборкаП4.КодТовара), 
			ЗначениеСтр(ВыборкаП4.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.6';
													|en = '8.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.050 Приложения 4 = сумме стр.160 Приложения 4';
			|en = 'Сумма акциза в стр.050 Приложения 4 = сумме стр.160 Приложения 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С050"		, "П001040005003");
	ИменаПоказателей.Вставить("П04С160"		, "П00104М116003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С050, ДанныеКС.Приложение4);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С160, ДанныеКС.Приложение4, Счетчик);
	КонецЦикла; 
		
	Настройки.ЭтоОшибка = НЕ Показатели.П04С050.Значение = Показатели.П04С160.Итог;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.П04С050.Значение, Показатели.П04С160.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.7';
													|en = '8.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговый период в стр.060 Приложения 4 должен быть заполнен';
			|en = 'Налоговый период в стр.060 Приложения 4 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значения %1, %2 заполнены';
													|en = 'Значения %1, %2 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение налогового периода';
														|en = 'Ошибочное значение налогового периода'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С061"		, "П00104М106003_");
	ИменаПоказателей.Вставить("П04С062"		, "П00104М106004_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
	
		Настройки.ЭтоОшибка = ДанныеКС.Приложение4["МнЧастьЗаполненаП00104М1_" + Счетчик] 
			И НЕ(ЗначениеЗаполнено(Показатели.П04С061.Значение) И ЗначениеЗаполнено(Показатели.П04С062.Значение));
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С061.ЗначениеСтр, Показатели.П04С062.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.8';
													|en = '8.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в стр.070 Приложения 4 должно соответствовать списку ';
			|en = 'Значение кода показателя в стр.070 Приложения 4 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода показателя';
														|en = 'Ошибочное значение кода показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С070"		, "П00104М107003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П04С070.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С070, ДанныеКС.Приложение4, Счетчик);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П04С070.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С070.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.9';
													|en = '8.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.080 Приложения 4 > 0, если стр.060 Приложения 4 заполнена';
			|en = 'Сумма акциза в стр.080 Приложения 4 > 0, если стр.060 Приложения 4 заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2, %3 заполнены';
													|en = '%1 > 0, когда %2, %3 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С080"		, "П00104М108003_");
	ИменаПоказателей.Вставить("П04С061"		, "П00104М106003_");
	ИменаПоказателей.Вставить("П04С062"		, "П00104М106004_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
	
		Настройки.ЭтоОшибка = ЗначениеЗаполнено(Показатели.П04С061.Значение) И ЗначениеЗаполнено(Показатели.П04С062.Значение)
			И НЕ Показатели.П04С080.Значение > 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С080.Значение, Показатели.П04С061.ЗначениеСтр, Показатели.П04С062.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.10';
													|en = '8.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.090 Приложения 4 > 0, если стр.080 Приложения 4 > 0';
			|en = 'Сумма акциза в стр.090 Приложения 4 > 0, если стр.080 Приложения 4 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 > 0';
													|en = '%1 > 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С090"		, "П00104М109003_");
	ИменаПоказателей.Вставить("П04С080"		, "П00104М108003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
	
		Настройки.ЭтоОшибка = Показатели.П04С080.Значение > 0 И НЕ Показатели.П04С090.Значение > 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С090.Значение, Показатели.П04С080.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_11а()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.11.а';
													|en = '8.11.а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.090 Приложения 4 = стр.080 Приложения 4 х 2,08, если код показателя ';
			|en = 'Сумма акциза в стр.090 Приложения 4 = стр.080 Приложения 4 х 2,08, если код показателя '") +
		НСтр("ru = 'в стр.070 Приложения 4 = 30025';
			|en = 'в стр.070 Приложения 4 = 30025'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х 2,08 Итог [%3] когда %4 = 30025';
													|en = '%1 = %2 х 2,08 Итог [%3] когда %4 = 30025'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Коэффициент"	, 2.08);
	Настройки.Вставить("КодПоказателя"	, "30025");
	ПроверкаКС_8_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_11б()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.11.б';
													|en = '8.11.б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.090 Приложения 4 = стр.080 Приложения 4 х 1, если код показателя ';
			|en = 'Сумма акциза в стр.090 Приложения 4 = стр.080 Приложения 4 х 1, если код показателя '") +
		НСтр("ru = 'в стр.070 Приложения 4 = 30026';
			|en = 'в стр.070 Приложения 4 = 30026'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х 1 Итог [%3] когда %4 = 30026';
													|en = '%1 = %2 х 1 Итог [%3] когда %4 = 30026'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Коэффициент"	, 1);
	Настройки.Вставить("КодПоказателя"	, "30026");
	ПроверкаКС_8_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_11_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С090"		, "П00104М109003_");
	ИменаПоказателей.Вставить("П04С080"		, "П00104М108003_");
	ИменаПоказателей.Вставить("П04С070"		, "П00104М107003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П04С080.Значение * Настройки.Коэффициент);
		Настройки.ЭтоОшибка = Показатели.П04С070.Значение = Настройки.КодПоказателя 
			И НЕ Показатели.П04С090.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С090.Значение, Показатели.П04С080.Значение, РасчетнаяСумма, Показатели.П04С070.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.12';
													|en = '8.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Вавиа в стр.100 Приложения 4 = стр.110 х стр.120 х стр.150 Приложения 4';
			|en = 'Величина Вавиа в стр.100 Приложения 4 = стр.110 х стр.120 х стр.150 Приложения 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Вавиа';
														|en = 'Ошибочное значение величины Вавиа'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С100"		, "П00104М110003_");
	ИменаПоказателей.Вставить("П04С110"		, "П00104М111003_");
	ИменаПоказателей.Вставить("П04С120"		, "П00104М112003_");
	ИменаПоказателей.Вставить("П04С150"		, "П00104М115003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П04С110.Значение * Показатели.П04С120.Значение * Показатели.П04С150.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.П04С100.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С100.Значение, Показатели.П04С110.Значение, Показатели.П04С120.Значение, Показатели.П04С150.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.13';
													|en = '8.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Объем авиационного керосина в стр.110 Приложения 4 должен быть заполнен';
			|en = 'Объем авиационного керосина в стр.110 Приложения 4 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение объема авиационного керосина';
														|en = 'Ошибочное значение объема авиационного керосина'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П00104М111003_");
	ПроверкаКС_8_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.14';
													|en = '8.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Показатель Дкер в стр.120 Приложения 4 должен быть заполнен';
			|en = 'Показатель Дкер в стр.120 Приложения 4 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение показателя Дкер';
														|en = 'Ошибочное значение показателя Дкер'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П00104М112003_");
	ПроверкаКС_8_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.15';
													|en = '8.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Средняя цена альтернативы в стр.130 Приложения 4 должна быть заполнена';
			|en = 'Средняя цена альтернативы в стр.130 Приложения 4 должна быть заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение средней цены альтернативы';
														|en = 'Ошибочное значение средней цены альтернативы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П00104М113003_");
	ПроверкаКС_8_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.16';
													|en = '8.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Условное значение средней оптовой цены в стр.140 Приложения 4 должно быть заполнено';
			|en = 'Условное значение средней оптовой цены в стр.140 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное условное значение средней оптовой цены';
														|en = 'Ошибочное условное значение средней оптовой цены'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П00104М114003_");
	ПроверкаКС_8_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.17';
													|en = '8.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Кдт_комп в стр.150 Приложения 4 должна быть заполнена';
			|en = 'Величина Кдт_комп в стр.150 Приложения 4 должна быть заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Кдт_комп';
														|en = 'Ошибочное значение величины Кдт_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П00104М115003_");
	ПроверкаКС_8_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_17_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С001", Настройки.ИмяПоказателя);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
	
		Настройки.ЭтоОшибка = ДанныеКС.Приложение4["МнЧастьЗаполненаП00104М1_" + Счетчик] 
			И НЕ ЗначениеЗаполнено(Показатели.П04С001.Значение);
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.П04С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.18';
													|en = '8.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.160 Приложения 4 = стр.090 + стр.100 Приложения 4';
			|en = 'Сумма акциза в стр.160 Приложения 4 = стр.090 + стр.100 Приложения 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С160"		, "П00104М116003_");
	ИменаПоказателей.Вставить("П04С090"		, "П00104М109003_");
	ИменаПоказателей.Вставить("П04С100"		, "П00104М110003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
		
		РасчетнаяСумма = Показатели.П04С090.Значение + Показатели.П04С100.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П04С160.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С160.Значение, Показатели.П04С090.Значение, Показатели.П04С100.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_19()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.19';
													|en = '8.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма акциза в стр.160 Приложения 4 = гр.3 подр.2.3 Раздела 2 по соответствующему коду ';
			|en = 'Сумма акциза в стр.160 Приложения 4 = гр.3 подр.2.3 Раздела 2 по соответствующему коду '") +
		НСтр("ru = 'подакцизного товара и кода показателей 30025, 30026 в гр.1 подр.2.3 Раздела 2';
			|en = 'подакцизного товара и кода показателей 30025, 30026 в гр.1 подр.2.3 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6';
				|en = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С001"		, "П00104М116003_");
	ИменаПоказателей.Вставить("Р23Г001"		, "П00023М100003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("Раздел", "23");
	Запрос.УстановитьПараметр("МассивКодовПоказателей", СтрРазделить(",30025,30026", ","));
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение4.КодТовара + Приложение4.КодПоказателя + Приложение4.П04С063 + Приложение4.П04С064 КАК Ключ,
	|	Приложение4.КодТовара КАК КодТовара,
	|	Приложение4.КодПоказателя КАК КодПоказателя,
	|	Приложение4.П04С063 КАК П04С063,
	|	Приложение4.П04С064 КАК П04С064,
	|	Приложение4.П04С160 КАК П04С001,
	|	Приложение4.Отчет КАК Отчет,
	|	Приложение4.НомерСтраницы КАК НомерСтраницы,
	|	Приложение4.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_П41 КАК Приложение4
	|ГДЕ
	|	Приложение4.Отчет = &Отчет
	|	И Приложение4.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	МИНИМУМ(П04С063),
	|	МИНИМУМ(П04С064)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел23.КодТовара + Раздел23.КодПоказателя + Раздел23.Р23Г004 + Раздел23.Р23Г005 КАК Ключ,
	|	Раздел23.КодТовара КАК КодТовара,
	|	Раздел23.КодПоказателя КАК КодПоказателя,
	|	Раздел23.Р23Г003 КАК Р23Г001,
	|	Раздел23.Отчет КАК Отчет,
	|	Раздел23.НомерСтраницы КАК НомерСтраницы,
	|	Раздел23.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел23
	|ГДЕ
	|	Раздел23.Отчет = &Отчет
	|	И Раздел23.Раздел = &Раздел
	|	И Раздел23.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП4 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП4.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П04С001.Итог = 0;
		Показатели.Р23Г001.Итог = 0;
		
		Выборка = ВыборкаП4.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С001, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП4.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П04С001.Итог = Показатели.Р23Г001.Итог;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П04С001.Итог, Показатели.Р23Г001.Итог, ЗначениеСтр(ВыборкаП4.КодТовара), 
			ЗначениеСтр(ВыборкаП4.КодПоказателя), ЗначениеСтр(ВыборкаП4.П04С063), ЗначениеСтр(ВыборкаП4.П04С064));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_20()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.20';
													|en = '8.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4';
														|en = 'Приложение 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Показатель Дкер в стр.120 Приложения 4 = стр.130 - стр.140 Приложения 4, если результат >= 0, иначе 0';
			|en = 'Показатель Дкер в стр.120 Приложения 4 = стр.130 - стр.140 Приложения 4, если результат >= 0, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение показателя Дкер';
														|en = 'Ошибочное значение показателя Дкер'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С120"		, "П00104М112003_");
	ИменаПоказателей.Вставить("П04С130"		, "П00104М113003_");
	ИменаПоказателей.Вставить("П04С140"		, "П00104М114003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение4.КолвоСтрокП00104М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение4, Счетчик);
		
		РасчетнаяСумма = Макс(0, Показатели.П04С130.Значение - Показатели.П04С140.Значение);
		Настройки.ЭтоОшибка = НЕ Показатели.П04С120.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П04С120.Значение, Показатели.П04С130.Значение, Показатели.П04С140.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_5

&НаСервере
Процедура ПроверкаКС_9_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.1';
													|en = '9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода вида подакцизного товара в стр.010 Приложения 5 должно соответствовать списку ';
			|en = 'Значение кода вида подакцизного товара в стр.010 Приложения 5 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода вида подакцизного товара';
														|en = 'Ошибочное значение кода вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С010"		, "П001050001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П05С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С010, ДанныеКС.Приложение5);
		
		Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С010.Значение) = Неопределено;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.2';
													|en = '9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение признака показателя Ддт в стр.020 Приложения 5 должно соответствовать списку ';
			|en = 'Значение признака показателя Ддт в стр.020 Приложения 5 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода вида подакцизного товара';
														|en = 'Ошибочное значение кода вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С020"		, "П001050002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П05С020.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С020, ДанныеКС.Приложение5);
		
		Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С020.Значение) = Неопределено;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.3';
													|en = '9.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Показатель Ддт в стр.030 Приложения 5 должен быть заполнен';
			|en = 'Показатель Ддт в стр.030 Приложения 5 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение показателя Ддт';
														|en = 'Ошибочное значение показателя Ддт'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П001050003003");
	ПроверкаКС_9_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.4';
													|en = '9.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Кдт_комп в стр.040 Приложения 5 должна быть заполнена';
			|en = 'Величина Кдт_комп в стр.040 Приложения 5 должна быть заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Кдт_комп';
														|en = 'Ошибочное значение величины Кдт_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П001050004003");
	ПроверкаКС_9_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.5';
													|en = '9.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Средняя цена альтернативы в стр.050 Приложения 5 должна быть заполнена';
			|en = 'Средняя цена альтернативы в стр.050 Приложения 5 должна быть заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение средней цены альтернативы';
														|en = 'Ошибочное значение средней цены альтернативы'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П001050005003");
	ПроверкаКС_9_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.6';
													|en = '9.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Условное значение средней оптовой цены в стр.060 Приложения 5 должно быть заполнено';
			|en = 'Условное значение средней оптовой цены в стр.060 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное условное значение средней оптовой цены';
														|en = 'Ошибочное условное значение средней оптовой цены'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П001050006003");
	ПроверкаКС_9_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.7';
													|en = '9.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение ставки налога в стр.070 Приложения 5 должно быть заполнено';
			|en = 'Значение ставки налога в стр.070 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ставки налога';
														|en = 'Ошибочное значение ставки налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя", "П001050007003");
	ПроверкаКС_9_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_07_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С001", Настройки.ИмяПоказателя);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5);

	Настройки.ЭтоОшибка = ДанныеКС.Приложение5.РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С001.Значение);
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.П05С001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.8';
													|en = '9.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение ставки налога в стр.070 Приложения 5 должно соответствовать стр.030 Раздела 2 ';
			|en = 'Значение ставки налога в стр.070 Приложения 5 должно соответствовать стр.030 Раздела 2 '") +
		НСтр("ru = 'по соответствующему коду подакцизного товара в стр.010 Приложения 5';
			|en = 'по соответствующему коду подакцизного товара в стр.010 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ставки налога';
														|en = 'Ошибочное значение ставки налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С070"		, "П001050007003");
	ИменаПоказателей.Вставить("Р02С030"		, "П000020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение5.КодТовара КАК КодТовара,
	|	Приложение5.П05С070 КАК П05С070,
	|	Приложение5.Отчет КАК Отчет,
	|	Приложение5.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_П05 КАК Приложение5
	|ГДЕ
	|	Приложение5.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Раздел2.КодТовара КАК КодТовара,
	|	Раздел2.Ставка КАК Р02С030,
	|	Раздел2.Отчет КАК Отчет,
	|	Раздел2.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_Р24 КАК Раздел2
	|ГДЕ
	|	Раздел2.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ ПО
	|	КодТовара";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП5 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП5.Следующий() Цикл
		Выборка = ВыборкаП5.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьПоказатель(Показатели.П05С070, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КодТовара", ВыборкаП5.КодТовара)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗарегистрироватьФормулу(Настройки);
				РасшифроватьПоказатель(Показатели.П05С070);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С030, Выборка);
				
				Настройки.ЭтоОшибка = НЕ Показатели.П05С070.Значение = Показатели.Р02С030.Значение;
				Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
					Показатели.П05С070.Значение, Показатели.Р02С030.Значение);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
			
			ВыборкаР2.Сбросить();
			Настройки.ЭтоОшибка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.9';
													|en = '9.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода показателя в стр.080 Приложения 5 должно соответствовать списку ';
			|en = 'Значение кода показателя в стр.080 Приложения 5 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 в списке допустимых значений';
													|en = '%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода показателя';
														|en = 'Ошибочное значение кода показателя'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П05С080.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С080, ДанныеКС.Приложение5, Счетчик);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С080.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С080.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.10';
													|en = '9.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговый период в стр.090 Приложения 5 должен быть заполнен';
			|en = 'Налоговый период в стр.090 Приложения 5 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значения %1, %2 заполнены';
													|en = 'Значения %1, %2 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение налогового периода';
														|en = 'Ошибочное значение налогового периода'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С091"		, "П00105М109003_");
	ИменаПоказателей.Вставить("П05С092"		, "П00105М109004_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
	
		Настройки.ЭтоОшибка = ДанныеКС.Приложение5["МнЧастьЗаполненаП00105М1_" + Счетчик] 
			И НЕ(ЗначениеЗаполнено(Показатели.П05С091.Значение) И ЗначениеЗаполнено(Показатели.П05С092.Значение));
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С091.ЗначениеСтр, Показатели.П05С092.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_10а()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.10.а';
													|en = '9.10.а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение ставки налога в стр.095 Приложения 5 должно быть заполнено';
			|en = 'Значение ставки налога в стр.095 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ставки налога';
														|en = 'Ошибочное значение ставки налога'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С095"		, "П00105М109503_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
	
		Настройки.ЭтоОшибка = ДанныеКС.Приложение5["МнЧастьЗаполненаП00105М1_" + Счетчик] 
			И НЕ ЗначениеЗаполнено(Показатели.П05С095.Значение) ;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С095.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.11';
													|en = '9.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Вф в стр.100 Приложения 5 > 0, если стр.080 Приложения 5 = 30027, 30028, иначе 0';
			|en = 'Величина Вф в стр.100 Приложения 5 > 0, если стр.080 Приложения 5 = 30027, 30028, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 = 30027, 30028';
													|en = '%1 > 0, когда %2 = 30027, 30028'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Вф';
														|en = 'Ошибочное значение величины Вф'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"	, "П00105М110003_");
	Настройки.Вставить("КодыПоказателей", "30027,30028");
	ПроверкаКС_9_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.12';
													|en = '9.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Вб в стр.110 Приложения 5 > 0, если стр.080 Приложения 5 = 30029, 30030, иначе 0';
			|en = 'Величина Вб в стр.110 Приложения 5 > 0, если стр.080 Приложения 5 = 30029, 30030, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 = 30029, 30030';
													|en = '%1 > 0, когда %2 = 30029, 30030'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Вб';
														|en = 'Ошибочное значение величины Вб'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"	, "П00105М111003_");
	Настройки.Вставить("КодыПоказателей", "30029,30030");
	ПроверкаКС_9_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.13';
													|en = '9.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Вдфо в стр.120 Приложения 5 > 0, если стр.080 Приложения 5 = 30029, 30030, иначе 0';
			|en = 'Величина Вдфо в стр.120 Приложения 5 > 0, если стр.080 Приложения 5 = 30029, 30030, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 = 30029, 30030';
													|en = '%1 > 0, когда %2 = 30029, 30030'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Вдфо';
														|en = 'Ошибочное значение величины Вдфо'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"	, "П00105М112003_");
	Настройки.Вставить("КодыПоказателей", "30029,30030");
	ПроверкаКС_9_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.14';
													|en = '9.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Величина Вш в стр.130 Приложения 5 > 0, если стр.080 Приложения 5 = 30031, 30032, иначе 0';
			|en = 'Величина Вш в стр.130 Приложения 5 > 0, если стр.080 Приложения 5 = 30031, 30032, иначе 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 = 30031, 30032';
													|en = '%1 > 0, когда %2 = 30031, 30032'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение величины Вш';
														|en = 'Ошибочное значение величины Вш'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"	, "П00105М113003_");
	Настройки.Вставить("КодыПоказателей", "30031,30032");
	ПроверкаКС_9_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_14_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С001"		, Настройки.ИмяПоказателя);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
	
		Настройки.ЭтоОшибка = ДанныеКС.Приложение5["МнЧастьЗаполненаП00105М1_" + Счетчик] 
			И (НЕ СтрНайти(Настройки.КодыПоказателей, Показатели.П05С080.Значение) = 0 И НЕ Показатели.П05С001.Значение > 0
			ИЛИ СтрНайти(Настройки.КодыПоказателей, Показатели.П05С080.Значение) = 0 И НЕ Показатели.П05С001.Значение = 0);
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С001.Значение, Показатели.П05С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.15';
													|en = '9.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Объем средних дистиллятов в стр.140 Приложения 5 = гр.2 подр.2.3 Раздела 2 по соответствующему коду ';
			|en = 'Объем средних дистиллятов в стр.140 Приложения 5 = гр.2 подр.2.3 Раздела 2 по соответствующему коду '") +
		НСтр("ru = 'подакцизного товара, коду показателя и налоговому периоду';
			|en = 'подакцизного товара, коду показателя и налоговому периоду'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6';
				|en = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("СтрокаП5"	, "140");
	Настройки.Вставить("ГрафаР2"	, "2");
	ПроверкаКС_9_24_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.16';
													|en = '9.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.100 Приложения 5, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.100 Приложения 5, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30027';
			|en = 'если стр.080 Приложения 5 = 30027'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3 х 2) + %4 Итог [%5], когда %6 = 30027';
													|en = '%1 = (%2 х %3 х 2) + %4 Итог [%5], когда %6 = 30027'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 2);
	Настройки.Вставить("КодПоказателя", "30027");
	ПроверкаКС_9_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.17';
													|en = '9.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.100 Приложения 5, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.100 Приложения 5, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30028';
			|en = 'если стр.080 Приложения 5 = 30028'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3) + %4 Итог [%5], когда %6 = 30028';
													|en = '%1 = (%2 х %3) + %4 Итог [%5], когда %6 = 30028'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 1);
	Настройки.Вставить("КодПоказателя", "30028");
	ПроверкаКС_9_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_17_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С150"		, "П00105М115003_");
	ИменаПоказателей.Вставить("П05С095"		, "П00105М109503_");
	ИменаПоказателей.Вставить("П05С140"		, "П00105М114003_");
	ИменаПоказателей.Вставить("П05С100"		, "П00105М110003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П05С095.Значение * Показатели.П05С140.Значение * Настройки.Кф + 
			Показатели.П05С100.Значение);
		Настройки.ЭтоОшибка = Показатели.П05С080.Значение = Настройки.КодПоказателя 
			И НЕ Показатели.П05С150.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С150.Значение, Показатели.П05С095.Значение, Показатели.П05С140.Значение, Показатели.П05С100.Значение,
			РасчетнаяСумма, Показатели.П05С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.18';
													|en = '9.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.110 + стр.120 ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.110 + стр.120 '") +
		НСтр("ru = 'Приложения 5, если стр.080 Приложения 5 = 30029';
			|en = 'Приложения 5, если стр.080 Приложения 5 = 30029'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3 х 2) + %4 + %5 Итог [%6], когда %7 = 30029';
													|en = '%1 = (%2 х %3 х 2) + %4 + %5 Итог [%6], когда %7 = 30029'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 2);
	Настройки.Вставить("КодПоказателя", "30029");
	ПроверкаКС_9_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.19';
													|en = '9.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.110 + стр.120 ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.110 + стр.120 '") +
		НСтр("ru = 'Приложения 5, если стр.080 Приложения 5 = 30030';
			|en = 'Приложения 5, если стр.080 Приложения 5 = 30030'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3) + %4 + %5 Итог [%6], когда %7 = 30030';
													|en = '%1 = (%2 х %3) + %4 + %5 Итог [%6], когда %7 = 30030'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 1);
	Настройки.Вставить("КодПоказателя", "30030");
	ПроверкаКС_9_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_19_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С150"		, "П00105М115003_");
	ИменаПоказателей.Вставить("П05С095"		, "П00105М109503_");
	ИменаПоказателей.Вставить("П05С140"		, "П00105М114003_");
	ИменаПоказателей.Вставить("П05С110"		, "П00105М111003_");
	ИменаПоказателей.Вставить("П05С120"		, "П00105М112003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П05С095.Значение * Показатели.П05С140.Значение * Настройки.Кф + 
			Показатели.П05С110.Значение + Показатели.П05С120.Значение);
		Настройки.ЭтоОшибка = Показатели.П05С080.Значение = Настройки.КодПоказателя 
			И НЕ Показатели.П05С150.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С150.Значение, Показатели.П05С095.Значение, Показатели.П05С140.Значение, Показатели.П05С110.Значение,
			Показатели.П05С120.Значение, РасчетнаяСумма, Показатели.П05С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.20';
													|en = '9.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.130 Приложения 5, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5 х 2) + стр.130 Приложения 5, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30031';
			|en = 'если стр.080 Приложения 5 = 30031'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3 х 2) + %4 Итог [%5], когда %6 = 30031';
													|en = '%1 = (%2 х %3 х 2) + %4 Итог [%5], когда %6 = 30031'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 2);
	Настройки.Вставить("КодПоказателя", "30031");
	ПроверкаКС_9_21_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.21';
													|en = '9.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.130 Приложения 5, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = (стр.095 х стр.140 Приложения 5) + стр.130 Приложения 5, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30032';
			|en = 'если стр.080 Приложения 5 = 30032'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (%2 х %3) + %4 Итог [%5], когда %6 = 30032';
													|en = '%1 = (%2 х %3) + %4 Итог [%5], когда %6 = 30032'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 1);
	Настройки.Вставить("КодПоказателя", "30032");
	ПроверкаКС_9_21_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_21_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С150"		, "П00105М115003_");
	ИменаПоказателей.Вставить("П05С095"		, "П00105М109503_");
	ИменаПоказателей.Вставить("П05С140"		, "П00105М114003_");
	ИменаПоказателей.Вставить("П05С130"		, "П00105М113003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П05С095.Значение * Показатели.П05С140.Значение * Настройки.Кф + 
			Показатели.П05С130.Значение);
		Настройки.ЭтоОшибка = Показатели.П05С080.Значение = Настройки.КодПоказателя 
			И НЕ Показатели.П05С150.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С150.Значение, Показатели.П05С095.Значение, Показатели.П05С140.Значение, Показатели.П05С130.Значение,
			РасчетнаяСумма, Показатели.П05С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_22()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.22';
													|en = '9.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = стр.095 х стр.140 Приложения 5 х 2, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = стр.095 х стр.140 Приложения 5 х 2, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30034';
			|en = 'если стр.080 Приложения 5 = 30034'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 х 2 Итог [%4], когда %5 = 30034';
													|en = '%1 = %2 х %3 х 2 Итог [%4], когда %5 = 30034'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 2);
	Настройки.Вставить("КодПоказателя", "30034");
	ПроверкаКС_9_23_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_23()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.23';
													|en = '9.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = стр.095 х стр.140 Приложения 5, ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = стр.095 х стр.140 Приложения 5, '") +
		НСтр("ru = 'если стр.080 Приложения 5 = 30035';
			|en = 'если стр.080 Приложения 5 = 30035'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4], когда %5 = 30035';
													|en = '%1 = %2 х %3 Итог [%4], когда %5 = 30035'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Кф"	, 1);
	Настройки.Вставить("КодПоказателя", "30035");
	ПроверкаКС_9_23_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_23_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П00105М108003_");
	ИменаПоказателей.Вставить("П05С150"		, "П00105М115003_");
	ИменаПоказателей.Вставить("П05С095"		, "П00105М109503_");
	ИменаПоказателей.Вставить("П05С140"		, "П00105М114003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Приложение5.КолвоСтрокП00105М1 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Приложение5, Счетчик);
		
		РасчетнаяСумма = Окр(Показатели.П05С095.Значение * Показатели.П05С140.Значение * Настройки.Кф);
		Настройки.ЭтоОшибка = Показатели.П05С080.Значение = Настройки.КодПоказателя 
			И НЕ Показатели.П05С150.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П05С150.Значение, Показатели.П05С095.Значение, Показатели.П05С140.Значение,
			РасчетнаяСумма, Показатели.П05С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_24()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.24';
													|en = '9.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5';
														|en = 'Приложение 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма вычета в стр.150 Приложения 5 = гр.3 подр.2.3 Раздела 2 по соответствующему коду ';
			|en = 'Сумма вычета в стр.150 Приложения 5 = гр.3 подр.2.3 Раздела 2 по соответствующему коду '") +
		НСтр("ru = 'подакцизного товара, коду показателя и налоговому периоду';
			|en = 'подакцизного товара, коду показателя и налоговому периоду'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6';
				|en = '%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма вычета';
														|en = 'Ошибочная сумма вычета'"));
	Настройки = ОбработатьНастройки(Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("СтрокаП5"	, "150");
	Настройки.Вставить("ГрафаР2"	, "3");
	ПроверкаКС_9_24_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_24_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С001"		, "П00105М1" + Настройки.СтрокаП5 + "03_");
	ИменаПоказателей.Вставить("Р23Г001"		, "П00023М10000" + Настройки.ГрафаР2 + "_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет", ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("Раздел", "23");
	Запрос.УстановитьПараметр("Сумма", Настройки.СтрокаП5 = "150");
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Приложение5.КодТовара + Приложение5.КодПоказателя + Приложение5.П05С093 + Приложение5.П05С094 КАК Ключ,
	|	Приложение5.КодТовара КАК КодТовара,
	|	Приложение5.КодПоказателя КАК КодПоказателя,
	|	Приложение5.П05С093 КАК П05С093,
	|	Приложение5.П05С094 КАК П05С094,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Приложение5.П05С150
	|		ИНАЧЕ Приложение5.П05С140
	|	КОНЕЦ КАК П05С001,
	|	Приложение5.Отчет КАК Отчет,
	|	Приложение5.НомерСтраницы КАК НомерСтраницы,
	|	Приложение5.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_П51 КАК Приложение5
	|ГДЕ
	|	Приложение5.Отчет = &Отчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	МИНИМУМ(П05С093),
	|	МИНИМУМ(П05С094)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел23.КодТовара + Раздел23.КодПоказателя + Раздел23.Р23Г004 + Раздел23.Р23Г005 КАК Ключ,
	|	Раздел23.КодТовара КАК КодТовара,
	|	Раздел23.КодПоказателя КАК КодПоказателя,
	|	ВЫБОР
	|		КОГДА &Сумма
	|			ТОГДА Раздел23.Р23Г003
	|		ИНАЧЕ Раздел23.Р23Г002
	|	КОНЕЦ КАК Р23Г001,
	|	Раздел23.Отчет КАК Отчет,
	|	Раздел23.НомерСтраницы КАК НомерСтраницы,
	|	Раздел23.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Р2х КАК Раздел23
	|ГДЕ
	|	Раздел23.Отчет = &Отчет
	|	И Раздел23.Раздел = &Раздел
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ключ";	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП5 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП5.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.П05С001.Итог = 0;
		Показатели.Р23Г001.Итог = 0;
		
		Выборка = ВыборкаП5.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С001, Выборка);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП5.Ключ)) Тогда
			Выборка	= ВыборкаР2.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, Выборка);
			КонецЦикла;
			ВыборкаР2.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П05С001.Итог = Показатели.Р23Г001.Итог;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.П05С001.Итог, Показатели.Р23Г001.Итог, ЗначениеСтр(ВыборкаП5.КодТовара), 
			ЗначениеСтр(ВыборкаП5.КодПоказателя), ЗначениеСтр(ВыборкаП5.П05С093), ЗначениеСтр(ВыборкаП5.П05С094));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение
			+ Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1"
		ИЛИ Ячейка.Раздел = "Раздел2"
		ИЛИ Ячейка.Раздел = "Раздел3"
		ИЛИ Ячейка.Раздел = "Приложение1"
		ИЛИ Ячейка.Раздел = "Приложение2"
		ИЛИ Ячейка.Раздел = "Приложение3" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение4" ИЛИ Ячейка.Раздел = "Приложение5" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"),
						СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) Экспорт 
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

	Если СтруктураРеквизитовФормы.НеобходимоПреобразованиеИзПрошлойРедакции Тогда 
		ОО = Новый ОписаниеОповещения("ВопросВыполнитьПреобразованиеИзПрошлойРедакции", ЭтотОбъект);
		ПоказатьВопрос(ОО, "Была скопирована форма другой редакции. Выполнить конвертацию данных?",
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьПреобразованиеИзПрошлойРедакции(РезультатВопроса, ДополнительныеПараметры) Экспорт
	РегламентированнаяОтчетностьЗагрузкаКлиент.ВыполнитьПреобразованиеИзПрошлойРедакции(ЭтотОбъект, РезультатВопроса);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
