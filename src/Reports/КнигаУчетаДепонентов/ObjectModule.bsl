#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ОписаниеПеременных

Перем ОтчетИнициализирован;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();
	
	КлючВарианта = НеОпределено;
	ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Если КлючВарианта = "КнигаУчетаДепонентов" Или КлючВарианта = "КнигаУчетаДепонентовРегл" Тогда
		ПриКомпоновкеОтчетаКнигаУчетаДепонентов(ЭтотОбъект, ДокументРезультат, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	Если Не ОтчетИнициализирован Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеОтчетаКнигаУчетаДепонентов(Объект, ДокументРезультат, СтандартнаяОбработка) Экспорт
	
	КлючВарианта = НеОпределено;
	Объект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Если КлючВарианта <> "КнигаУчетаДепонентов" И КлючВарианта <> "КнигаУчетаДепонентовРегл" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	ДокументРезультат.Очистить();
	
	НастройкиОтчета = Объект.КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиОтчета.Выбор.Элементы.Очистить();
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраПериод <> Неопределено И ЗначениеПараметраПериод.Значение <> '00010101' Тогда
		НачалоПериода = ЗначениеПараметраПериод.Значение.ДатаНачала;
		КонецПериода  = ЗначениеПараметраПериод.Значение.ДатаОкончания;
	Иначе
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
		КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если КонецПериода = '00010101' Тогда
		КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Данные = Новый ДеревоЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Объект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

Процедура ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КнигаУчетаДепонентов.ПФ_MXL_КнигаУчетаДепонентов");
	
	Для Каждого ДанныеШапкиОтчета Из Данные.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Шапка	= Макет.ПолучитьОбласть("Шапка");
		
		Шапка.Параметры.Заполнить(ДанныеШапкиОтчета);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			Шапка.Параметры.ОрганизацияНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапкиОтчета.Организация, "НаименованиеПолное");
		Иначе
			Шапка.Параметры.ОрганизацияНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(), "НаименованиеПолное");
		КонецЕсли;
		
		Шапка.Параметры.Начало		= НачалоПериода;
		Шапка.Параметры.Окончание	= КонецПериода;
		
		ДокументРезультат.Вывести(Шапка);
		ИтогоПоступлений = 0;
		
		Для Каждого ДанныеСтрокиОтчета Из ДанныеШапкиОтчета.Строки Цикл
			
			Строка	= Макет.ПолучитьОбласть("Строка");
			Строка.Параметры.Заполнить(ДанныеСтрокиОтчета);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Строка, ДанныеСтрокиОтчета, СоответствиеПользовательскихПолей);
			
			НомераПлатежныхДокументов = "";
			Для Каждого СтрокаСНомером Из ДанныеСтрокиОтчета.Строки Цикл
				НомераПлатежныхДокументов = ?(ПустаяСтрока(НомераПлатежныхДокументов), "", НомераПлатежныхДокументов + "; ") + СтрокаСНомером.НомерПлатежногоДокумента;
			КонецЦикла;
			
			Строка.Параметры.НомерПлатежногоДокумента = НомераПлатежныхДокументов;
			
			ДокументРезультат.Вывести(Строка);
			
			Поступления = ДанныеСтрокиОтчета[СоответствиеПользовательскихПолей.Получить("СуммаПост")];
			Если Поступления <> Неопределено Тогда
				ИтогоПоступлений = ИтогоПоступлений + Поступления;
			КонецЕсли; 
			
		КонецЦикла;
		
		Подвал	= Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(ДанныеШапкиОтчета);
		
		Подвал.Параметры.ОстатокНаКонец = ИтогоПоступлений - ДанныеШапкиОтчета.СуммаВыплаты;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Подвал, ДанныеШапкиОтчета, СоответствиеПользовательскихПолей);
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ОтчетИнициализирован = Ложь;

#КонецОбласти

#КонецЕсли