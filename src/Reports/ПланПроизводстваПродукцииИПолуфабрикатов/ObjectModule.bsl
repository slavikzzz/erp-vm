#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Отчет = Форма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных - 
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	УдалитьНазначениеИзНастроекКомпоновки(Форма);
	
	ТипПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Форма.Параметры.ПараметрКоманды,
		"ТипПроизводственногоПроцесса");
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ЭтоРазборка",
		ТипПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка,
		Истина);
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//  Форма - см. ОтчетыПереопределяемый.ПриСозданииНаСервере.Форма
//  Отказ - см. ОтчетыПереопределяемый.ПриСозданииНаСервере.Отказ
//  СтандартнаяОбработка - см. ОтчетыПереопределяемый.ПриСозданииНаСервере.СтандартнаяОбработка
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьПараметрыОтбора(Форма);
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	УдалитьНазначениеИзНастроекКомпоновки(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОтбора(Форма)
	
	Если Не Форма.Параметры.Свойство("ПараметрКоманды") ИЛИ Не ЗначениеЗаполнено(Форма.Параметры.ПараметрКоманды) Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие отчета ""План производства продукции и полуфабрикатов"" не предусмотрено. 
			|Для открытия отчета можно воспользоваться командой ""План производства продукции и полуфабрикатов"" в формах документов.';
			|en = 'Direct opening of the ""Production plan for products and semi-finished products"" report is not provided. 
			|To open the report, click ""Production plan for products and semi-finished products"" in the document forms.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Форма.ФормаПараметры.Отбор.Вставить("ПланПроизводства", Форма.Параметры.ПараметрКоманды);
	
КонецПроцедуры

Процедура УдалитьНазначениеИзНастроекКомпоновки(Форма)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Форма.Параметры.ПараметрКоманды, "Сценарий.ПланированиеПоНазначениям") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПолеНазначение = Новый ПолеКомпоновкиДанных("Назначение");
	СоответствиеЭлементов = Новый Соответствие;
	
	НайтиГруппировкуРекурсивно(Настройки.Структура, СоответствиеЭлементов, ПолеНазначение);
	Для Каждого Группировка Из СоответствиеЭлементов Цикл
		
		КлючГруппировки = Группировка.Ключ; // ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных
		
		Если КлючГруппировки.ПоляГруппировки.Элементы.Количество() = 1 Тогда
			КлючГруппировки.Родитель.Структура.Удалить(Группировка.Ключ);
		Иначе
			КлючГруппировки.ПоляГруппировки.Элементы.Удалить(Группировка.Значение);
		КонецЕсли;
		
		УдалитьВыбранноеПоле(КлючГруппировки.Выбор, ПолеНазначение, Настройки);
		
	КонецЦикла;
	
	КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(Настройки, "Назначение");
	
КонецПроцедуры

Процедура НайтиГруппировкуРекурсивно(КоллекцияЭлементов, СоответствиеЭлементов, ЗначениеПоиска)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл 
				Если ПолеГруппировки.Поле = ЗначениеПоиска Тогда
					СоответствиеЭлементов.Вставить(Элемент, ПолеГруппировки)
				КонецЕсли;
			КонецЦикла;
			НайтиГруппировкуРекурсивно(Элемент.Структура, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Строки, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Колонки, СоответствиеЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВыбранноеПоле(ВыбранныеПоля, ЗначениеПоиска, Настройки)
	
	МассивЭлементов = Новый Массив; // Массив из ВыбранноеПолеКомпоновкиДанных
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначениеПоиска);
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);;
		Если Элемент.Родитель <> Неопределено Тогда
			Элемент.Родитель.Элементы.Удалить(Элемент);
		Иначе
			ВыбранныеПоля.Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранноеПолеРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначениеПоиска)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Поле = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		Иначе
			НайтиВыбранноеПолеРекурсивно(Элемент.Элементы, МассивЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
