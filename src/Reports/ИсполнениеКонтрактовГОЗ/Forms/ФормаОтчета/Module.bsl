#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Период = Параметры.Период;
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПредставлениеСумм) Тогда
		ПредставлениеСумм = Параметры.ПредставлениеСумм;
	Иначе
		ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Детализация) Тогда
		Детализация = Параметры.Детализация;
	Иначе
		Детализация = "Сводно";
	КонецЕсли;
	
	ВариантФормирования = Параметры.ВариантФормирования;
	Если ВариантФормирования = 0 
		И ЗначениеЗаполнено(Параметры.НаправлениеДеятельности) Тогда
		НаправлениеДеятельности = Параметры.НаправлениеДеятельности;
	ИначеЕсли ВариантФормирования = 1 
		И ЗначениеЗаполнено(Параметры.СписокНаправленийДеятельности) Тогда
		СписокНаправленийДеятельности = Параметры.СписокНаправленийДеятельности;
	КонецЕсли;
	
	Период = Параметры.Период;
	РежимРасшифровки = Параметры.РежимРасшифровки;
	КодПоказателя = Параметры.КодПоказателя;
	
	УстановитьСвойстваЭлементов();
	
	Если Параметры.СформироватьПриОткрытии Тогда
		СформироватьОтчетСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВариантФормирования <> 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если ВариантФормирования <> 1 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СписокНаправленийДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если РежимРасшифровки Тогда
		Настройки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияПоКонтрактуОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Если ВариантФормирования <> 0 
		И ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		НаправлениеДеятельности = Неопределено;
	КонецЕсли;

	Если ВариантФормирования <> 1 
		И ЗначениеЗаполнено(СписокНаправленийДеятельности) Тогда
		СписокНаправленийДеятельности = Неопределено;
	КонецЕсли;
	
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрактПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСуммОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСуммПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ДетализацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если НЕ ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Расшифровка = "ЦелевыеПараметры" Тогда
		ПараметрыФормы = ПараметрыОткрытияФормыЦелевыеПараметрыКонтрактаГОЗ();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияЦелевыхПараметров", ЭтотОбъект);
		ОткрытьФорму("Отчет.ИсполнениеКонтрактовГОЗ.Форма.ФормаПараметрыКонтрактаГОЗ", 
			ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ОткрытьОборотыСчета(Расшифровка);
	ИначеЕсли ЭтоСсылка(Расшифровка) Тогда  
		ПоказатьЗначение(, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	РезультатВыполнения = СформироватьОтчетСервер();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОкончанииРедактированияЦелевыхПараметров(ЦелевыеПараметры, ЭтотОбъект) Экспорт
	
	Если НЕ ТипЗнч(ЦелевыеПараметры) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохранены = ОбновитьЦелевыеПараметрыНаправления(ЦелевыеПараметры);
	
	Если ДанныеСохранены Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыЦелевыеПараметрыКонтрактаГОЗ()
	
	ПараметрыФормы = Отчеты.ИсполнениеКонтрактовГОЗ.ЦелевыеПараметрыКонтрактаГОЗ(НаправлениеДеятельности);
	Если ПравоДоступа("Редактирование", Метаданные.Справочники.НаправленияДеятельности) Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
		ПараметрыФормы.Вставить("ЗаголовокКомандыСохранить", НСтр("ru = 'Записать и закрыть';
																	|en = 'Save and close'"));
	Иначе
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОбновитьЦелевыеПараметрыНаправления(ЦелевыеПараметры)
	
	ДанныеСохранены = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.НаправленияДеятельности");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", НаправлениеДеятельности);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаправлениеОбъект = НаправлениеДеятельности.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НаправлениеОбъект, ЦелевыеПараметры);
		НаправлениеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ДанныеСохранены = Ложь;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для направления деятельности не удалось сохранить новые целевые значения.';
				|en = 'Cannot save new target values for line of business.'"),
			,
			"Контракт");
		
	КонецПопытки;
	
	Возврат ДанныеСохранены;
	
КонецФункции

&НаСервере
Процедура ДетализацияПриИзмененииСервер()
	
	Если Детализация <> "Сводно" Тогда
		ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений;
	КонецЕсли;
	
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаСервере
Функция ЭтоСсылка(Значение)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение));
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИдентификаторЗадания = Неопределено;
	
	// Вывод табличного документа

	Результат.Очистить();
	Результат.Вывести(РезультатВыполнения);
	
	Результат.ФиксацияСверху = 8;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Результат.АвтоМасштаб          = Истина;
	Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Ландшафт;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИсполнениеКонтракта";

КонецПроцедуры

&НаСервере
Функция СформироватьОтчетСервер()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ПараметрыОтчета = ПараметрыФормированияОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Отчеты.ИсполнениеКонтрактовГОЗ.СформироватьОтчет", 
		ПараметрыОтчета, 
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
		
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОборотыСчета(Расшифровка)
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПоказательБУ", 	Истина);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация", 		Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода",	Неопределено);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецДня(Период));
	
	ДополнительныеСвойства.Вставить("ПоСубсчетам", 			Ложь);
	ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов", Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаНачалоДт", 	Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаНачалоКт", 	Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаКонецДт", 		Ложь);
	ДополнительныеСвойства.Вставить("СальдоНаКонецКт", 		Ложь);
	ДополнительныеСвойства.Вставить("ОборотыЗаПериодДт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыЗаПериодКт", Ложь);
	ДополнительныеСвойства.Вставить("ОборотыСоСчетамиДт",   Ложь);
	ДополнительныеСвойства.Вставить("ОборотыСоСчетамиКт",   Ложь);
	
	Если Лев(Расшифровка.РесурсОборотов, 8) = "ОборотДт" Тогда
		ДополнительныеСвойства.Вставить("ОборотыСоСчетамиДт", Истина);
	ИначеЕсли Лев(Расшифровка.РесурсОборотов, 8) = "ОборотКт" Тогда
		ДополнительныеСвойства.Вставить("ОборотыСоСчетамиКт", Истина)
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Счет", Расшифровка.Счет);
	
	ПользовательскиеОтборыДляСчета = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(Расшифровка.КорСчет) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ПользовательскиеОтборыДляСчета, 
			"КорСчет", 
			МассивВСписокЗначений(Расшифровка.КорСчет), 
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если Расшифровка.НаправлениеДеятельности = "Контракт" Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ПользовательскиеОтборыДляСчета, 
			"НаправлениеДеятельности", 
			ОтборНаправленияДеятельности, 
			ВидСравненияКомпоновкиДанных.ВСписке);
	ИначеЕсли Расшифровка.НаправлениеДеятельности = "КонтрактыГОЗ" Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ПользовательскиеОтборыДляСчета, 
			"НаправлениеДеятельности", 
			ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ, 
			ВидСравненияКомпоновкиДанных.ВСписке);
	ИначеЕсли Расшифровка.НаправлениеДеятельности = "ИнаяДеятельность" Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			ПользовательскиеОтборыДляСчета.Элементы, 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"НаправлениеДеятельности", 
			Неопределено, 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"НаправлениеДеятельности.ТипНаправленияДеятельности", 
			ПредопределенноеЗначение("Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность"), 
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если Расшифровка.КорНаправлениеДеятельности = "Контракт" 
		ИЛИ СтрНайти(Расшифровка.РесурсОборотов, "_НД") <> 0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ПользовательскиеОтборыДляСчета, 
			"НаправлениеДеятельностиКор", 
			ОтборНаправленияДеятельности, 
			ВидСравненияКомпоновкиДанных.ВСписке);
	ИначеЕсли Расшифровка.КорНаправлениеДеятельности = "КонтрактыГОЗ"
		ИЛИ СтрНайти(Расшифровка.РесурсОборотов, "_ГОЗ") <> 0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ПользовательскиеОтборыДляСчета, 
			"НаправлениеДеятельностиКор", 
			ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ, 
			ВидСравненияКомпоновкиДанных.ВСписке);
	ИначеЕсли Расшифровка.КорНаправлениеДеятельности = "ИнаяДеятельность"
		ИЛИ СтрНайти(Расшифровка.РесурсОборотов, "Ввод") <> 0 
		ИЛИ СтрНайти(Расшифровка.РесурсОборотов, "Вывод") <> 0 Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			ПользовательскиеОтборыДляСчета.Элементы, 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"НаправлениеДеятельностиКор", 
			Неопределено, 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"НаправлениеДеятельностиКор.ТипНаправленияДеятельности", 
			ПредопределенноеЗначение("Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность"), 
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОборотыСчета.Форма.ФормаОтчета", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Функция МассивВСписокЗначений(Массив)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Массив);
	Возврат СписокЗначений; 
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчета()
	
	ПараметрыОтчета = Отчеты.ИсполнениеКонтрактовГОЗ.ПараметрыФормированияОтчета();
	
	ПараметрыОтчета.Период = Период;
	ПараметрыОтчета.Организация = Организация;
	ПараметрыОтчета.ПредставлениеСумм = ПредставлениеСумм;
	ПараметрыОтчета.ВариантФормирования = ВариантФормирования;
	ПараметрыОтчета.Детализация = Детализация;
	
	ПараметрыОтчета.РежимРасшифровки = РежимРасшифровки;
	ПараметрыОтчета.КодПоказателя = КодПоказателя;
	
	МассивОтборНаправленияДеятельности = Новый Массив;
	Если ВариантФормирования = 0 Тогда
		МассивОтборНаправленияДеятельности.Добавить(НаправлениеДеятельности);
	ИначеЕсли ВариантФормирования = 1 Тогда
		МассивОтборНаправленияДеятельности = СписокНаправленийДеятельности.ВыгрузитьЗначения();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаправленияДеятельности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.ТипНаправленияДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
		|	И ВЫБОР
		|		КОГДА НаправленияДеятельности.ФактическаяДатаЗавершения <> ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА КОНЕЦПЕРИОДА(НаправленияДеятельности.ФактическаяДатаЗавершения, МЕСЯЦ) > КОНЕЦПЕРИОДА(&ДатаСоставленияОтчета, МЕСЯЦ)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И НЕ НаправленияДеятельности.ПометкаУдаления
		|";
		Запрос.УстановитьПараметр("ДатаСоставленияОтчета", Период);
		МассивОтборНаправленияДеятельности = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	ОтборНаправленияДеятельности.ЗагрузитьЗначения(МассивОтборНаправленияДеятельности);
	ПараметрыОтчета.ОтборНаправленияДеятельности = МассивОтборНаправленияДеятельности;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаправленияДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|ГДЕ
	|	НаправленияДеятельности.ТипНаправленияДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
	|	И НЕ НаправленияДеятельности.Ссылка В (&ОтборНаправленияДеятельности)
	|	И ВЫБОР
	|		КОГДА НаправленияДеятельности.ФактическаяДатаЗавершения <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА КОНЕЦПЕРИОДА(НаправленияДеятельности.ФактическаяДатаЗавершения, МЕСЯЦ) > КОНЕЦПЕРИОДА(&ДатаСоставленияОтчета, МЕСЯЦ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И НЕ НаправленияДеятельности.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("ОтборНаправленияДеятельности", ОтборНаправленияДеятельности);
	Запрос.УстановитьПараметр("ДатаСоставленияОтчета", Период);
	МассивОтборНаправленияДеятельностиДругиеКонтрактыГОЗ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ.ЗагрузитьЗначения(МассивОтборНаправленияДеятельностиДругиеКонтрактыГОЗ);
	ПараметрыОтчета.ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ = МассивОтборНаправленияДеятельностиДругиеКонтрактыГОЗ;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура НастройкаСпискаКонтрактов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Значения",    СписокНаправленийДеятельности.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Список контрактов ГОЗ';
												|en = 'SDO contract list'"));
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ТипНаправленияДеятельности", ПредопределенноеЗначение("Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ"));
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	Оповещение = Новый ОписаниеОповещения("СписокНаправленийДеятельностиОкончаниеРедактирования", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСпискаЗначений", ПараметрыФормы, ЭтаФорма, , , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СписокНаправленийДеятельностиОкончаниеРедактирования(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНаправленийДеятельности.ЗагрузитьЗначения(Результат);
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементов()
	
	Если РежимРасшифровки Тогда
		Элементы.Период.Видимость = Ложь;
		Элементы.Организация.Видимость = Ложь;
		Элементы.ПредставлениеСумм.Видимость = Ложь;
		Элементы.ГруппаВариантФормирования.Видимость = Ложь;
	Иначе
		Если ВариантФормирования = 0 Тогда
			Элементы.СтраницаКонтракты.ТекущаяСтраница = Элементы.СтраницаКонтракт;
		ИначеЕсли ВариантФормирования = 1 Тогда
			Элементы.СтраницаКонтракты.ТекущаяСтраница = Элементы.СтраницаСписокКонтрактов;
		Иначе
			Элементы.СтраницаКонтракты.ТекущаяСтраница = Элементы.СтраницаВсеКонтрактыГОЗ;
		КонецЕсли;
		
		Элементы.ПредставлениеСумм.Доступность = (Детализация = "Сводно");
		
		Если ЗначениеЗаполнено(СписокНаправленийДеятельности) Тогда
			Элементы.НастройкаСпискаКонтрактов.Заголовок = Строка(СписокНаправленийДеятельности);
		Иначе
			Элементы.НастройкаСпискаКонтрактов.Заголовок = НСтр("ru = '<...>';
																|en = '<...>'"); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

	
#КонецОбласти