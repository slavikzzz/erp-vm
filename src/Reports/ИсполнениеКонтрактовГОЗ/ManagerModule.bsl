#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки вариантов этого отчета.
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//   	подробнее см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
// 	 ОписаниеОтчета - СтрокаДереваЗначений - Настройки отчета и настройки "по умолчанию".
//	 	подробнее см. ВариантыОтчетов.ОписаниеОтчета().
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Возвращает незаполнную структуру параметров формирования отчета.
// 
// Возвращаемое значение:
// 	 ПараметрыОтчета - Структура - Параметры формирования отчета.
//
Функция ПараметрыФормированияОтчета() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Период");
	ПараметрыОтчета.Вставить("Организация");
	ПараметрыОтчета.Вставить("ПредставлениеСумм",   Перечисления.ВидыПредставленияЧисел.БезИзменений);
	ПараметрыОтчета.Вставить("ВариантФормирования", 0);
	ПараметрыОтчета.Вставить("Детализация",         "Сводно");
	ПараметрыОтчета.Вставить("ОтборНаправленияДеятельности");
	ПараметрыОтчета.Вставить("ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ");
	
	ПараметрыОтчета.Вставить("ЕстьДанныеНаПлановуюДатуЗавершения", Ложь);
	
	ПараметрыОтчета.Вставить("РежимРасшифровки",    Ложь);
	ПараметрыОтчета.Вставить("КодПоказателя", "");
	
	Колонки = Новый Структура;
	Колонки.Вставить("СальдоНаТекущуюДату", 0);
	Колонки.Вставить("Обороты", 0);
	ПараметрыОтчета.Вставить("Колонки", Колонки);
	
	ПараметрыОтчета.Вставить("ФорматСумм", "ЧДЦ=2");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Формирует отчет, результат помещается во врменное хранилище
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	ЦелевыеПараметры = Неопределено;
	Если ПараметрыОтчета.ВариантФормирования = 0 Тогда
		НаправлениеДеятельности = ПараметрыОтчета.ОтборНаправленияДеятельности[0];
		ЦелевыеПараметры = Отчеты.ИсполнениеКонтрактовГОЗ.ЦелевыеПараметрыКонтрактаГОЗ(НаправлениеДеятельности);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		ПараметрыОтчета.Период = КонецДня(ПараметрыОтчета.Период);
	КонецЕсли;
	
	ГолованаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация);
	Если ГолованаяОрганизация = ПараметрыОтчета.Организация Тогда
		ПараметрыОтчета.Вставить("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация));
	КонецЕсли;
	
	ЕстьДанныеНаПлановуюДатуЗавершения = Ложь;
	ДатаПроверки = ?(ЗначениеЗаполнено(ПараметрыОтчета.Период), ПараметрыОтчета.Период, ТекущаяДатаСеанса());
	Если ЦелевыеПараметры <> Неопределено 
		 И ЗначениеЗаполнено(ЦелевыеПараметры.ПлановаяДатаЗавершения) 
		 И ДатаПроверки > ЦелевыеПараметры.ПлановаяДатаЗавершения Тогда
		ЕстьДанныеНаПлановуюДатуЗавершения = Истина;
	КонецЕсли;
	ПараметрыОтчета.Вставить("ЕстьДанныеНаПлановуюДатуЗавершения", ЕстьДанныеНаПлановуюДатуЗавершения);
	
	Колонки = Новый Структура;
	Если ЦелевыеПараметры <> Неопределено Тогда
		Колонки.Вставить("ЦелевыеПараметры", 0);
		Колонки.Вставить("ПроцентВыполненияНаТекущуюДату", 0);
	КонецЕсли;
	Колонки.Вставить("СальдоНаТекущуюДату", 0);
	Если ЕстьДанныеНаПлановуюДатуЗавершения Тогда
		Если ЦелевыеПараметры <> Неопределено Тогда
			Колонки.Вставить("ПроцентВыполненияНаПлановуюДатуЗавершения", 0);
		КонецЕсли;
		Колонки.Вставить("СальдоНаПлановуюДатуЗавершения", 0);
	КонецЕсли;
	Колонки.Вставить("Обороты", 0);
	ПараметрыОтчета.Вставить("Колонки", Колонки);
	
	Если ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений Тогда
		Формат = "ЧДЦ=2";
	Иначе
		Формат = "ЧДЦ=0";
	КонецЕсли;
	ПараметрыОтчета.Вставить("ФорматСумм", Формат);
	
	// Получение макета
	Макет = Отчеты.ИсполнениеКонтрактовГОЗ.ПолучитьМакет("ИсполнениеКонтрактов");
	
	ВывестиШапкуОтчета(Результат, ПараметрыОтчета, Макет);
	ВывестиШапкуТаблицы(Результат, ПараметрыОтчета, Макет);
	ВывестиСтрокиТаблицы(Результат, ПараметрыОтчета, Макет, ЦелевыеПараметры);
	ВывестиПодвалТаблицы(Результат, ПараметрыОтчета, Макет);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища)
	
КонецПроцедуры

// Возвращает структуру целевых параметров контракта ГОЗ
//
// Возвращаемое значение
// 	ЦелевыеПраметры - Структура - Целевые параметры контракта.
// 
Функция СтруктураЦелевыхПараметровКонтрактаГОЗ() Экспорт
	
	ЦелевыеПараметры = Новый Структура;
	
	ЦелевыеПараметры.Вставить("ПлановаяДатаЗавершения");
	ЦелевыеПараметры.Вставить("ОбъемФинансированияКонтракта");
	ЦелевыеПараметры.Вставить("СуммаНДС");
	ЦелевыеПараметры.Вставить("ЗатратыНаМатериалы");
	ЦелевыеПараметры.Вставить("ЗатратыНаОплатуТруда");
	ЦелевыеПараметры.Вставить("ПрочиеПроизводственныеЗатраты");
	ЦелевыеПараметры.Вставить("ОбщепроизводственныеЗатраты");
	ЦелевыеПараметры.Вставить("ОбщехозяйственныеЗатраты");
	ЦелевыеПараметры.Вставить("КоммерческиеРасходы");
	ЦелевыеПараметры.Вставить("ПрибыльКонтракта");
	ЦелевыеПараметры.Вставить("УправленческиеРасходы");
	ЦелевыеПараметры.Вставить("ОбъемКредитования");
	ЦелевыеПараметры.Вставить("ПроцентыПоКредитам");
	
	ЦелевыеПараметры.Вставить("ГосударственныйКонтракт");
	ЦелевыеПараметры.Вставить("НомерКонтракта");
	ЦелевыеПараметры.Вставить("ДатаЗаключенияКонтракта");
	ЦелевыеПараметры.Вставить("НомерОтдельногоСчета");
	
	ЦелевыеПараметры.Вставить("ФактическаяДатаЗавершения");
	ЦелевыеПараметры.Вставить("СуммаВозмещаемыхРасходов");
	ЦелевыеПараметры.Вставить("ТипНаправленияДеятельности");
	
	ЦелевыеПараметры.Вставить("РазделЛицевогоСчета");

	Возврат ЦелевыеПараметры;
	
КонецФункции

// Возвращает целевые параметры контракта ГОЗ
//
// Параметры:
// 	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности контракта ГОЗ.
//
// Возвращаемое значение:
// 	ЦелевыеПараметры - Структура - Целевые параметры контракта ГОЗ.
//
Функция ЦелевыеПараметрыКонтрактаГОЗ(НаправлениеДеятельности) Экспорт
	
	СтруктураЦелевыхПараметров = СтруктураЦелевыхПараметровКонтрактаГОЗ();
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаправлениеДеятельности, СтруктураЦелевыхПараметров);
	Результат.Вставить("Затраты", 
		Результат.ЗатратыНаМатериалы 
		+ Результат.ЗатратыНаОплатуТруда
		+ Результат.ПрочиеПроизводственныеЗатраты
		+ Результат.ОбщепроизводственныеЗатраты
		+ Результат.ОбщехозяйственныеЗатраты);
		
	Результат.Вставить("СписаниеДенежныхСредствСОтдельногоСчета",
		Результат.СуммаВозмещаемыхРасходов
		+ Результат.ПрибыльКонтракта);
	
	Если ЗначениеЗаполнено(Результат.ПлановаяДатаЗавершения) Тогда
		Результат.ПлановаяДатаЗавершения = КонецДня(Результат.ПлановаяДатаЗавершения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область РегламентированныйОтчетИсполнениеКонтрактовГОЗ

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчета(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВыборКонтрактов", Ложь, Ложь); 
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ИГК", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерКонтракта", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаЗаключенияКонтракта", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ПлановаяДатаИсполнения", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерОтдельногоСчета", Истина, Ложь);
	
	ПараметрыФормированияОтчета = ПараметрыФормированияОтчета();
	ТаблицаПравил = ТаблицаПравилРасчетаПоказателей(ПараметрыФормированияОтчета);
	Для каждого Правило Из ТаблицаПравил Цикл
		Для каждого Показатель Из Правило.ПоказателиРеглОтчета Цикл
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Показатель.Представление, Истина, Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
// 		ПараметрыОтчета - Структура - Структура параметров отчета
// 		Контейнер - Структура - Контейнер отображаемого отчета.
//
Процедура ЗаполнитьРегламентированныйОтчет(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	ОшибкиЗаполнения = Новый Массив;
		
	ПараметрыЗаполнения = ПараметрыФормированияОтчета();
	ПараметрыЗаполнения.Период = ПараметрыОтчета.ДатаСоставленияОтчета;
	ГолованаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыОтчета.Организация);
	Если ГолованаяОрганизация = ПараметрыОтчета.Организация Тогда
		ПараметрыЗаполнения.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		ПараметрыЗаполнения.Организация = ПараметрыОтчета.Организация;
	КонецЕсли;
	ПараметрыЗаполнения.ВариантФормирования = 3; // По списку контрактов ГОЗ, с группировкой по контракту.
	ПараметрыЗаполнения.Детализация = "Сводно";
	
	ВыбранныеКонтракты = ПараметрыОтчета.Контракты;
	Если ВыбранныеКонтракты = Неопределено Тогда
		ВыбранныеКонтракты = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаправленияДеятельности.Ссылка КАК Ссылка,
	|	НаправленияДеятельности.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	НаправленияДеятельности.ГосударственныйКонтракт.НомерГОЗ КАК ИГК,
	|	НаправленияДеятельности.ГосударственныйКонтракт КАК ГосударственныйКонтракт,
	|	НаправленияДеятельности.НомерКонтракта КАК НомерКонтракта,
	|	НаправленияДеятельности.ДатаЗаключенияКонтракта КАК ДатаЗаключенияКонтракта,
	|	НаправленияДеятельности.НомерОтдельногоСчета КАК НомерОтдельногоСчета
	|ИЗ
	|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|ГДЕ
	|	(НаправленияДеятельности.Ссылка В (&ВыбранныеКонтракты) 
	|		ИЛИ &ВсеКонтракты)
	|	И НаправленияДеятельности.ТипНаправленияДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
	|	И НЕ НаправленияДеятельности.ПометкаУдаления
	|	И НаправленияДеятельности.ДатаЗаключенияКонтракта <= &ДатаСоставленияОтчета 
	|	И НаправленияДеятельности.ДатаЗаключенияКонтракта <> ДАТАВРЕМЯ(1,1,1)
	|	И ВЫБОР 
	|		КОГДА НаправленияДеятельности.ФактическаяДатаЗавершения <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА КОНЕЦПЕРИОДА(НаправленияДеятельности.ФактическаяДатаЗавершения, МЕСЯЦ) > КОНЕЦПЕРИОДА(&ДатаСоставленияОтчета, МЕСЯЦ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";
	Запрос.УстановитьПараметр("ВыбранныеКонтракты", ВыбранныеКонтракты);
	Запрос.УстановитьПараметр("ДатаСоставленияОтчета", ПараметрыОтчета.ДатаСоставленияОтчета);
	Запрос.УстановитьПараметр("ВсеКонтракты", (ВыбранныеКонтракты.Количество() = 0));
	
	НаправленияДеятельности = Запрос.Выполнить().Выгрузить();
	ПараметрыЗаполнения.ОтборНаправленияДеятельности = НаправленияДеятельности.ВыгрузитьКолонку("Ссылка");
	
	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателей(ПараметрыЗаполнения);
	ДанныеПоказателей = ПолучениеДанных(ПараметрыЗаполнения, ПравилаРасчетаПоказателей);
	
	ПоказателиОборотов = СтруктураОборотов();
	
	Если НаправленияДеятельности.Количество() > 0 Тогда
		Контейнер.Раздел1.Строки.Очистить();
	Иначе
		Индекс = Контейнер.Раздел1.Строки.Количество() - 1;
		Пока Индекс > 0 Цикл
			Контейнер.Раздел1.Строки.Удалить(Индекс);
			Индекс = Индекс - 1;
		КонецЦикла;
		ДанныеПервойСтраницы = Контейнер.Раздел1.Строки[0].Данные;
		Для каждого КлючИЗначение Из ДанныеПервойСтраницы Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
				ДанныеПервойСтраницы[КлючИЗначение.Ключ] = "";
			ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда 
				ДанныеПервойСтраницы[КлючИЗначение.Ключ] = 0;
			Иначе
				ДанныеПервойСтраницы[КлючИЗначение.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НомерСтраницы = 0;
	Для каждого НаправлениеДеятельности Из НаправленияДеятельности Цикл
		
		ОшибкиПоКонтракту = Новый Массив;
		
		НомерСтраницы = НомерСтраницы + 1; 
		
		Страница = Контейнер.Раздел1.Строки.Добавить();
		
		ДанныеКонтракта = Новый Структура;
		
		ДанныеКонтракта.Вставить("ИГК", НаправлениеДеятельности.ИГК);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки, 
			"ИГК_" + Строка(НомерСтраницы), 
			"", "", "", "", 
			"", 
			НаправлениеДеятельности.ГосударственныйКонтракт);
			
		ДанныеКонтракта.Вставить("НомерКонтракта", НаправлениеДеятельности.НомерКонтракта);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки, 
			"НомерКонтракта_" + Строка(НомерСтраницы), 
			"", "", "", "", 
			"", 
			НаправлениеДеятельности.Ссылка);
		
		ДанныеКонтракта.Вставить("НомерОтдельногоСчета", НаправлениеДеятельности.НомерОтдельногоСчета);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки, 
			"НомерОтдельногоСчета_" + Строка(НомерСтраницы), 
			"", "", "", "", 
			"", 
			НаправлениеДеятельности.Ссылка);
			
		ДанныеКонтракта.Вставить("ДатаЗаключенияКонтракта", НаправлениеДеятельности.ДатаЗаключенияКонтракта);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки, 
			"ДатаЗаключенияКонтракта_" + Строка(НомерСтраницы), 
			"", "", "", "", 
			"", 
			НаправлениеДеятельности.Ссылка);

		ДанныеКонтракта.Вставить("ПлановаяДатаИсполнения", НаправлениеДеятельности.ПлановаяДатаЗавершения);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки, 
			"ПлановаяДатаИсполнения_" + Строка(НомерСтраницы), 
			"", "", "", "", 
			"", 
			НаправлениеДеятельности.Ссылка);
		
		ДанныеПоказателейПоНаправлению = ДанныеПоказателей.Скопировать(Новый Структура("НаправлениеДеятельности", НаправлениеДеятельности.Ссылка));
		
		ЦелевыеПараметры = ЦелевыеПараметрыКонтрактаГОЗ(НаправлениеДеятельности.Ссылка);
		
		Для каждого Правило Из ПравилаРасчетаПоказателей Цикл
			
			КодПоказателя = Правило.КодПоказателя;
			
			Раздел = Лев(КодПоказателя, 1);
			Если Раздел = "1" ИЛИ Раздел = "2" ИЛИ Раздел = "3" ИЛИ Раздел = "5" Тогда 
				Ресурсы = ДанныеЗаполнениеСрокОсновныхРазделов(Правило, ДанныеПоказателейПоНаправлению, ПараметрыЗаполнения, ЦелевыеПараметры);
			ИначеЕсли Раздел = "4" Тогда
				Ресурсы = ДанныеЗаполнениеСтрокиВводаВыводаСредств(ПараметрыЗаполнения, ДанныеПоказателейПоНаправлению);
			КонецЕсли;
			
			Для каждого Показатель Из Правило.ПоказателиРеглОтчета Цикл
				
				ДанныеКонтракта.Вставить(Показатель.Представление, Ресурсы[Показатель.Значение]);
				
				ПараметрыРасшифровки = Новый Структура;
				ПараметрыРасшифровки.Вставить("НаправлениеДеятельности", НаправлениеДеятельности.Ссылка);
				ПараметрыРасшифровки.Вставить("КодПоказателя", КодПоказателя);
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки, 
					Показатель.Представление + "_" + Строка(НомерСтраницы), 
					"", "", "",
					Ресурсы[Показатель.Значение], 
					"", 
					ПараметрыРасшифровки);
					
			КонецЦикла;
			
			Если Правило.Обороты.Количество() > 0 Тогда 
				
				ОшибочныеПоказателиПоПравилу = Новый Массив;
				Для каждого КлючИЗначение Из Ресурсы Цикл
					Если ПоказателиОборотов.Свойство(КлючИЗначение.Ключ) Тогда 
						Если ЗапрещенныйОборот(КлючИЗначение.Ключ, КлючИЗначение.Значение, Правило) Тогда
							ОшибочныеПоказателиПоПравилу.Добавить("""" + ПоказателиОборотов[КлючИЗначение.Ключ] + """");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ОшибочныеПоказателиПоПравилу.Количество() <> 0 Тогда
					Если ОшибочныеПоказателиПоПравилу.Количество() = 1 Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = '-	По строке ""%1"" отражены операции по показателю ""%2""';
														|en = '-	Line ""%1"" contains operations by ""%2"" indicator'"),
											Правило.Заголовок, ОшибочныеПоказателиПоПравилу[0]);
					Иначе
						ТекстСообщения = СтрШаблон(НСтр("ru = '-	По строке ""%1"" отражены операции по показателям: ""%2""';
														|en = '-	Line ""%1"" contains operations by indicators: ""%2"" '"),
											Правило.Заголовок, СтрСоединить(ОшибочныеПоказателиПоПравилу, ", "));
					КонецЕсли;
					ОшибкиПоКонтракту.Добавить(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Страница.Данные = ДанныеКонтракта;
		Страница.ДанныеМногострочныхЧастей = Новый Структура;
		
		Если ОшибкиПоКонтракту.Количество() > 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При заполении данных на Стр. %1 (контракт %2) обнаружены ошибки.
											|В учете отражены операции по показателям, заполнение которых не предусмотренно в отчете.
											|Для анализа воспользуйтесь расшифровкой данных по строке отчета.';
											|en = 'Errors occurred while filling in data on page %1 (contract %2).
											|In the accounting, operations are recorded by indicators that are not filled in within the report.
											|To perform an analysis, drill down data by report line.'"),
										Строка(НомерСтраницы), НаправлениеДеятельности.Ссылка);
			ОшибкиЗаполнения.Добавить(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиЗаполнения, ОшибкиПоКонтракту);
		КонецЕсли;
		
	КонецЦикла;
		
	Если ОшибкиЗаполнения.Количество() > 0 Тогда
		ПоместитьВоВременноеХранилище(ОшибкиЗаполнения, ПараметрыОтчета.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиШапкуОтчета(Результат, ПараметрыОтчета, Макет)
	
	Если НЕ ПараметрыОтчета.РежимРасшифровки Тогда
		Область = Макет.ПолучитьОбласть("Заголовок");
		Результат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Параметры");
	Область.Параметры.НаправленияДеятельности = СтрСоединить(ПараметрыОтчета.ОтборНаправленияДеятельности, ", ");
	Период = ?(ЗначениеЗаполнено(ПараметрыОтчета.Период), ПараметрыОтчета.Период, ТекущаяДатаСеанса());
	Область.Параметры.Период = Формат(Период, "ДЛФ=D");
	Результат.Вывести(Область);
	
КонецПроцедуры

Процедура ВывестиШапкуТаблицы(Результат, ПараметрыОтчета, Макет)
	
	Область = Макет.ПолучитьОбласть("ТаблицаШапка|Показатели");
	Результат.Вывести(Область, 0);
	
	Для каждого Колонка Из ПараметрыОтчета.Колонки Цикл
		Область = Макет.ПолучитьОбласть("ТаблицаШапка|" + Колонка.Ключ);
		ПараметрыОбласти = Новый Структура;
		Если ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений Тогда
			ПараметрыОбласти.Вставить("ПредставлениеСумм", НСтр("ru = 'руб. коп.';
																|en = 'rub. cop.'"));
		ИначеЕсли ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.ВТысячах Тогда
			ПараметрыОбласти.Вставить("ПредставлениеСумм", НСтр("ru = 'тыс. руб.';
																|en = 'thous. rub.'"));
		ИначеЕсли ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.ВМиллионах Тогда
			ПараметрыОбласти.Вставить("ПредставлениеСумм", НСтр("ru = 'млн. руб.';
																|en = 'mln. rub.'"));
		КонецЕсли;
		Область.Параметры.Заполнить(ПараметрыОбласти);
		Результат.Присоединить(Область, Колонка.Значение);
	КонецЦикла;
	
	Если ПараметрыОтчета.РежимРасшифровки Тогда
		СтрокаГруппыСостояние = 5;
	Иначе
		СтрокаГруппыСостояние = 6;
	КонецЕсли;
	КолонкаГруппыСостояние = 3;
	ОбластьГруппы = Результат.Область(
						СтрокаГруппыСостояние,
						КолонкаГруппыСостояние,
						СтрокаГруппыСостояние,
						КолонкаГруппыСостояние + ПараметрыОтчета.Колонки.Количество() - 2);
	ОбластьГруппы.Объединить();
	
	ОбластьГруппы.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ОбластьГруппы.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьГруппы.Шрифт = Новый Шрифт(, , Истина);
	ОбластьГруппы.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьГруппы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьГруппы.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьГруппы.Текст = НСтр("ru = 'Состояние выполнения контракта';
								|en = 'Contract execution state'");
	
КонецПроцедуры

Процедура ВывестиСтрокиТаблицы(Результат, ПараметрыОтчета, Макет, ЦелевыеПараметры = Неопределено)
	
	ОбластьТаблицаСтроки = Макет.ПолучитьОбласть("ТаблицаСтроки");
	
	// Получение данных
	ПравилаРасчетаПоказателей = ТаблицаПравилРасчетаПоказателей(ПараметрыОтчета);
	ДанныеПоказателей = ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей, ЦелевыеПараметры);
	
	Результат.НачатьАвтогруппировкуСтрок();
	ПервыйРазрядКода = 0;
	ВторойРазрядКода = 0;
	ТретийРазрядКода = 0;
	Для каждого Правило Из ПравилаРасчетаПоказателей Цикл
	
		КодПоказателя = Правило.КодПоказателя;
		
		ТекущийПервыйРазрядКода = Число(Сред(КодПоказателя, 1, 1));
		ТекущийВторойРазрядКода = Число(Сред(КодПоказателя, 2, 1));
		ТекущийТретийРазрядКода = Число(Сред(КодПоказателя, 3, 1));
		
		Если ТекущийПервыйРазрядКода - ПервыйРазрядКода = 1 Тогда
			Уровень = 1;
		ИначеЕсли ТекущийВторойРазрядКода - ВторойРазрядКода = 1 Тогда
			Уровень = 2;
		Иначе
			Уровень = 3;
		КонецЕсли;
		
		ПервыйРазрядКода = ТекущийПервыйРазрядКода;
		ВторойРазрядКода = ТекущийВторойРазрядКода;
		
		Раздел = Лев(КодПоказателя, 1);
		Если Раздел = "1" ИЛИ Раздел = "2" ИЛИ Раздел = "3" ИЛИ Раздел = "5" Тогда 
			Ресурсы = ДанныеЗаполнениеСрокОсновныхРазделов(Правило, ДанныеПоказателей, ПараметрыОтчета, ЦелевыеПараметры);
		ИначеЕсли Раздел = "4" Тогда
			Ресурсы = ДанныеЗаполнениеСтрокиВводаВыводаСредств(ПараметрыОтчета, ДанныеПоказателей);
		КонецЕсли;
		
		#Область СтрокаПоказатель
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("РасшифровкаЦелевыеПараметры", "ЦелевыеПараметры");
		
		СтрокаИмя = "_" + КодПоказателя;
		
		Область = Макет.ПолучитьОбласть(СтрокаИмя + "|Показатели"); 
		Область.ТекущаяОбласть.Расшифровка = КодПоказателя;
		Результат.Вывести(Область, Уровень);
		Для каждого Колонка Из ПараметрыОтчета.Колонки Цикл
			Область = Макет.ПолучитьОбласть(СтрокаИмя + "|" + Колонка.Ключ);
			Область.Параметры.Заполнить(Ресурсы);
			Область.Параметры.Заполнить(ПараметрыРасшифровки);
			УстановитьСвойстваЯчеек(Область, Правило);
			Результат.Присоединить(Область, Колонка.Значение);
		КонецЦикла;
		
		#КонецОбласти
		
		#Область Детализация
		
		Если НЕ (ПараметрыОтчета.Детализация = "ДоРегистратора" ИЛИ ПараметрыОтчета.Детализация = "ДоОборотов") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Правило.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыОтчета.Детализация = "ДоРегистратора" Тогда
			Ресурсы.ТаблицаПоПоказателю.Индексы.Добавить("Период, Регистратор");
			Ресурсы.ТаблицаПоПоказателю.Сортировать("Период, Регистратор");
		КонецЕсли;
		
		Для каждого Строка Из Ресурсы.ТаблицаПоПоказателю Цикл
			
			ИмяОбласти = ПараметрыОтчета.Детализация;
			Если ПараметрыОтчета.ЕстьДанныеНаПлановуюДатуЗавершения Тогда
				ИмяОбласти = ИмяОбласти + "ЕстьДанныеНаПлановуюДатуЗавершения"; 
			ИначеЕсли ЦелевыеПараметры <> Неопределено Тогда
				ИмяОбласти = ИмяОбласти + "ЕстьЦелевыеПараметры"; 
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть(ИмяОбласти); 
		
			Область.Параметры.Заполнить(Строка);
			
			ПараметрыРасшифровки = ПараметрыРасшифровки(ПараметрыОтчета.Детализация, Правило, Строка);
			Область.Параметры.Заполнить(ПараметрыРасшифровки);
			УстановитьСвойстваЯчеек(Область, Правило);
			Результат.Вывести(Область, Уровень + 1);
			
		КонецЦикла;
		
		#КонецОбласти
	
	КонецЦикла;
	
	Результат.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

Процедура ВывестиПодвалТаблицы(Результат, ПараметрыОтчета, Макет)
	
	Область = Макет.ПолучитьОбласть("Подвал|Показатели");
	Результат.Вывести(Область, 0);
	Для каждого Колонка Из ПараметрыОтчета.Колонки Цикл
		Область = Макет.ПолучитьОбласть("Подвал|" + Колонка.Ключ);
		Результат.Присоединить(Область, Колонка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаполнениеСрокОсновныхРазделов(Правило, ДанныеПоказателей, ПараметрыОтчета, ЦелевыеПараметры)
	
	Ресурсы = Новый Структура;
	
	Ресурсы.Вставить("ЦелевоеЗначение", 0);
	
	Ресурсы.Вставить("ОборотДт_НД", 0);
	Ресурсы.Вставить("ОборотДт_ГОЗ", 0);
	Ресурсы.Вставить("ОборотДт_Ввод", 0);
	
	Ресурсы.Вставить("ОборотКт_НД", 0);
	Ресурсы.Вставить("ОборотКт_ГОЗ", 0);
	Ресурсы.Вставить("ОборотКт_Вывод", 0);
	
	Ресурсы.Вставить("ОборотДт_НаДатуЗавершения_НД", 0);
	Ресурсы.Вставить("ОборотДт_НаДатуЗавершения_ГОЗ", 0);
	Ресурсы.Вставить("ОборотДт_НаДатуЗавершения_Ввод", 0);
	
	Ресурсы.Вставить("ОборотКт_НаДатуЗавершения_НД", 0);
	Ресурсы.Вставить("ОборотКт_НаДатуЗавершения_ГОЗ", 0);
	Ресурсы.Вставить("ОборотКт_НаДатуЗавершения_Вывод", 0);

	Ресурсы.Вставить("СальдоНаТекущуюДату", 0);
	Ресурсы.Вставить("ВыполнениеНаТекущуюДату", 0);
	
	Ресурсы.Вставить("СальдоНаПлановуюДатуЗавершения", 0);
	Ресурсы.Вставить("ВыполнениеНаДатуЗавершения", 0);
	
	Если ЦелевыеПараметры <> Неопределено И ЗначениеЗаполнено(Правило.ЦелевойПараметр) Тогда
		Ресурсы.ЦелевоеЗначение = ЦелевыеПараметры[Правило.ЦелевойПараметр];
	КонецЕсли;
	
	ОтборДанных = Новый Структура;
	Если Прав(Правило.КодПоказателя, 2) = "00" Тогда
		ОтборДанных.Вставить("ГруппаПоказателей1", Правило.ГруппаПоказателей1);
	ИначеЕсли Прав(Правило.КодПоказателя, 1) = "0" Тогда 
		ОтборДанных.Вставить("ГруппаПоказателей2", Правило.ГруппаПоказателей2);
	Иначе
		ОтборДанных.Вставить("КодПоказателя", Правило.КодПоказателя);
	КонецЕсли;
	ТаблицаПоПоказателю = ДанныеПоказателей.Скопировать(ОтборДанных);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоПоказателю Цикл
		
		Ресурсы.ОборотДт_НД = Ресурсы.ОборотДт_НД + СтрокаТаблицы.ОборотДт_НД;
		Ресурсы.ОборотДт_ГОЗ = Ресурсы.ОборотДт_ГОЗ + СтрокаТаблицы.ОборотДт_ГОЗ;
		Ресурсы.ОборотДт_Ввод = Ресурсы.ОборотДт_Ввод + СтрокаТаблицы.ОборотДт_Ввод;
		
		Ресурсы.ОборотКт_НД = Ресурсы.ОборотКт_НД + СтрокаТаблицы.ОборотКт_НД;
		Ресурсы.ОборотКт_ГОЗ = Ресурсы.ОборотКт_ГОЗ + СтрокаТаблицы.ОборотКт_ГОЗ;
		Ресурсы.ОборотКт_Вывод = Ресурсы.ОборотКт_Вывод + СтрокаТаблицы.ОборотКт_Вывод;
		
		Ресурсы.ОборотДт_НаДатуЗавершения_НД = Ресурсы.ОборотДт_НаДатуЗавершения_НД + СтрокаТаблицы.ОборотДт_НаДатуЗавершения_НД;
		Ресурсы.ОборотДт_НаДатуЗавершения_ГОЗ = Ресурсы.ОборотДт_НаДатуЗавершения_ГОЗ + СтрокаТаблицы.ОборотДт_НаДатуЗавершения_ГОЗ;
		Ресурсы.ОборотДт_НаДатуЗавершения_Ввод = Ресурсы.ОборотДт_НаДатуЗавершения_Ввод + СтрокаТаблицы.ОборотДт_НаДатуЗавершения_Ввод;
		
		Ресурсы.ОборотКт_НаДатуЗавершения_НД = Ресурсы.ОборотКт_НаДатуЗавершения_НД + СтрокаТаблицы.ОборотКт_НаДатуЗавершения_НД;
		Ресурсы.ОборотКт_НаДатуЗавершения_ГОЗ = Ресурсы.ОборотКт_НаДатуЗавершения_ГОЗ + СтрокаТаблицы.ОборотКт_НаДатуЗавершения_ГОЗ;
		Ресурсы.ОборотКт_НаДатуЗавершения_Вывод = Ресурсы.ОборотКт_НаДатуЗавершения_Вывод + СтрокаТаблицы.ОборотКт_НаДатуЗавершения_Вывод;

		Коэффициент = ?(СтрокаТаблицы.Пассивный, -1, 1);
		
		Если СтрокаТаблицы.СальдоНаПлановуюДатуЗавершения = 0 Тогда
			Ресурсы.СальдоНаПлановуюДатуЗавершения = Ресурсы.СальдоНаПлановуюДатуЗавершения
				+ (Коэффициент 
					* (СтрокаТаблицы.ОборотДт_НаДатуЗавершения_НД 
						+ СтрокаТаблицы.ОборотДт_НаДатуЗавершения_ГОЗ 
						+ СтрокаТаблицы.ОборотДт_НаДатуЗавершения_Ввод
						- СтрокаТаблицы.ОборотКт_НаДатуЗавершения_НД 
						- СтрокаТаблицы.ОборотКт_НаДатуЗавершения_ГОЗ 
						- СтрокаТаблицы.ОборотКт_НаДатуЗавершения_Вывод));
		Иначе
			Ресурсы.СальдоНаПлановуюДатуЗавершения = Ресурсы.СальдоНаПлановуюДатуЗавершения + СтрокаТаблицы.СальдоНаПлановуюДатуЗавершения;
		КонецЕсли;
		
		Если СтрокаТаблицы.СальдоНаТекущуюДату = 0 Тогда
			Ресурсы.СальдоНаТекущуюДату = Ресурсы.СальдоНаТекущуюДату
				+ (Коэффициент 
					* (СтрокаТаблицы.ОборотДт_НД 
						+ СтрокаТаблицы.ОборотДт_ГОЗ 
						+ СтрокаТаблицы.ОборотДт_Ввод
						- СтрокаТаблицы.ОборотКт_НД
						- СтрокаТаблицы.ОборотКт_ГОЗ
						- СтрокаТаблицы.ОборотКт_Вывод));
		Иначе
			Ресурсы.СальдоНаТекущуюДату = Ресурсы.СальдоНаТекущуюДату + СтрокаТаблицы.СальдоНаТекущуюДату;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ресурсы.ЦелевоеЗначение <> 0 Тогда
		Если Правило.КодПоказателя = "102" Тогда
			// Особый расчет выполнения показателя "Кредиты банков"
			Ресурсы.ВыполнениеНаТекущуюДату = Окр(Ресурсы.ОборотКт_НД / Ресурсы.ЦелевоеЗначение * 100, 2);
			Ресурсы.ВыполнениеНаДатуЗавершения = Окр(Ресурсы.ОборотКт_НаДатуЗавершения_НД / Ресурсы.ЦелевоеЗначение * 100, 2);
		Иначе
			Ресурсы.ВыполнениеНаТекущуюДату = 
				?(Ресурсы.СальдоНаТекущуюДату < 0, 0, Окр(Ресурсы.СальдоНаТекущуюДату / Ресурсы.ЦелевоеЗначение * 100, 2));
			Ресурсы.ВыполнениеНаДатуЗавершения =
				?(Ресурсы.СальдоНаПлановуюДатуЗавершения < 0, 0, Окр(Ресурсы.СальдоНаПлановуюДатуЗавершения / Ресурсы.ЦелевоеЗначение * 100, 2))
		КонецЕсли;
	КонецЕсли;
	
	ПривестиРесурсыКФорматуВывода(Ресурсы, ПараметрыОтчета);
	
	Ресурсы.Вставить("ТаблицаПоПоказателю", ТаблицаПоПоказателю);
	
	Возврат Ресурсы;
	
КонецФункции

Функция ДанныеЗаполнениеСтрокиВводаВыводаСредств(ПараметрыОтчета, ДанныеПоказателей)
	
	Ресурсы = Новый Структура;
	
	Ресурсы.Вставить("ОборотДт_НД", 0);
	Ресурсы.Вставить("ОборотДт_ГОЗ", 0);
	Ресурсы.Вставить("ОборотДт_Ввод", 0);
	
	Ресурсы.Вставить("ОборотКт_НД", 0);
	Ресурсы.Вставить("ОборотКт_ГОЗ", 0);
	Ресурсы.Вставить("ОборотКт_Вывод", 0);
	
	Ресурсы.Вставить("СальдоНаТекущуюДату", 0);
	Ресурсы.Вставить("СальдоНаПлановуюДатуЗавершения", 0);
	
	Для каждого СтрокаТаблицы Из ДанныеПоказателей Цикл
		
		Если СтрокаТаблицы.ГруппаПоказателей1 <> "100" 
			И СтрокаТаблицы.ГруппаПоказателей1 <> "200"
			И СтрокаТаблицы.ГруппаПоказателей1 <> "300" Тогда
			Продолжить;
		КонецЕсли;
		
		Ресурсы.ОборотДт_ГОЗ = Ресурсы.ОборотДт_ГОЗ + СтрокаТаблицы.ОборотДт_ГОЗ;
		Ресурсы.ОборотДт_Ввод = Ресурсы.ОборотДт_Ввод + СтрокаТаблицы.ОборотДт_Ввод;
		
		Ресурсы.ОборотКт_ГОЗ = Ресурсы.ОборотКт_ГОЗ + СтрокаТаблицы.ОборотКт_ГОЗ;
		Ресурсы.ОборотКт_Вывод = Ресурсы.ОборотКт_Вывод + СтрокаТаблицы.ОборотКт_Вывод;
		
		Коэффициент = ?(СтрокаТаблицы.Пассивный, -1, 1);
		Ресурсы.СальдоНаТекущуюДату = Ресурсы.СальдоНаТекущуюДату
			- (СтрокаТаблицы.ОборотКт_ГОЗ + СтрокаТаблицы.ОборотКт_Вывод
				- СтрокаТаблицы.ОборотДт_ГОЗ  - СтрокаТаблицы.ОборотДт_Ввод);
		
		Ресурсы.СальдоНаПлановуюДатуЗавершения = Ресурсы.СальдоНаПлановуюДатуЗавершения
			+ (СтрокаТаблицы.ОборотКт_НаДатуЗавершения_ГОЗ + СтрокаТаблицы.ОборотКт_НаДатуЗавершения_Вывод
				- СтрокаТаблицы.ОборотДт_НаДатуЗавершения_ГОЗ - СтрокаТаблицы.ОборотДт_НаДатуЗавершения_Ввод);
				
	КонецЦикла;
	
	ПривестиРесурсыКФорматуВывода(Ресурсы, ПараметрыОтчета);
	
	Возврат Ресурсы;
	
КонецФункции

Функция СтруктураОборотов() 
	
	СтруктураОборотов = Новый Структура;
	СтруктураОборотов.Вставить("ОборотДт_НД", НСтр("ru = 'Движение ресурсов в рамках контракта';
													|en = 'Movement of resources under contract'"));
	СтруктураОборотов.Вставить("ОборотДт_ГОЗ", НСтр("ru = 'Привлечение ресурсов с контрактов ГОЗ';
													|en = 'Reallocating resources from SDO contracts'"));
	СтруктураОборотов.Вставить("ОборотДт_Ввод", НСтр("ru = 'Привлечение ресурсов организации';
													|en = 'Raising company resources'"));
	
	СтруктураОборотов.Вставить("ОборотКт_НД", НСтр("ru = 'Использование ресурсов в рамках контракта';
													|en = 'Using resources under contract'"));
	СтруктураОборотов.Вставить("ОборотКт_ГОЗ", НСтр("ru = 'Использование ресурсов на другие контракты ГОЗ';
													|en = 'Reallocating resources to other SDO contracts'"));
	СтруктураОборотов.Вставить("ОборотКт_Вывод", НСтр("ru = 'Использование ресурсов нужды организации';
														|en = 'Using resources for company needs'"));
	
	Возврат СтруктураОборотов;
	
КонецФункции

Функция ПараметрыРасшифровки(Детализация, Правило, СтрокаДанных)
	
	СтруктураПараметровРасшифровки = Новый Структура;
	
	Если Детализация = "ДоРегистратора" Тогда
		СтруктураПараметровРасшифровки.Вставить("Регистратор", СтрокаДанных.Регистратор);
	Иначе
		Оборот = Правило.Обороты.Получить(СтрокаДанных.ИндексОборота);
		Для каждого ПоляДвижений Из СтруктураОборотов() Цикл
			
			ЗначенияПарамеров = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Оборот.Значение);
			ЗначенияПарамеров.Вставить("РесурсОборотов", ПоляДвижений.Ключ);
			
			СтруктураПараметровРасшифровки.Вставить(ПоляДвижений.Ключ + "_Расшифровка", ЗначенияПарамеров);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураПараметровРасшифровки;
	
КонецФункции

Функция ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей, ЦелевыеПараметры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор КАК КорНаправлениеДеятельности,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК ОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период <= &ПлановаяДатаЗавершения
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период <= &ПлановаяДатаЗавершения
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК КорПодразделение
	|ПОМЕСТИТЬ ХозрасчетныйОборотыПредварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Период,
	|			Регистратор,
	|			,
	|			,
	|			Организация В (&Организация)
	|				И (НаправлениеДеятельности В (&ОтборНаправленияДеятельности)
	|					ИЛИ НаправлениеДеятельностиКор В (&ОтборНаправленияДеятельности)),
	|			НЕ КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), 
	|						  ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов)),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ИЛИ ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности, &ПустоеНД)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ИЛИ ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|	КОНЕЦ КАК ТипНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВРамкахКонтракта)
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(ПоступлениеДС.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета)
	|			ТОГДА ЕСТЬNULL(ПоступлениеДС.БанковскийСчетОтправитель.НаправлениеДеятельности, &ПустоеНД)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВыводИзКонтракта)
	|			ТОГДА &ПустоеНД
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаЗадолженностьПередПоставщиками)
	|				И (ХозрасчетныйОбороты.КорСчет В (&СчетаУчетаПрочиеДоходы)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам))
	|			ТОГДА &ПустоеНД
	|		КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности, &ПустоеНД)
	|	КОНЕЦ КАК КорНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВРамкахКонтракта)
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(ПоступлениеДС.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета)
	|			ТОГДА ЕСТЬNULL(ПоступлениеДС.БанковскийСчетОтправитель.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВыводИзКонтракта)
	|			ТОГДА &ПустойТипНаправления
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаЗадолженностьПередПоставщиками)
	|				И (ХозрасчетныйОбороты.КорСчет В (&СчетаУчетаПрочиеДоходы)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам))
	|			ТОГДА &ПустойТипНаправления
	|		КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|	КОНЕЦ КАК ТипКорНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ОборотДт КАК ОборотДт,
	|	ХозрасчетныйОбороты.ОборотКт КАК ОборотКт,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения КАК ОборотДт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения КАК ОборотКт_НаДатуЗавершения,
	|	ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) КАК ТипПлатежаФЗ275,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.КорПодразделение КАК КорПодразделение
	|
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	ХозрасчетныйОборотыПредварительная КАК ХозрасчетныйОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеДС
	|	ПО
	|		ХозрасчетныйОбороты.Регистратор = СписаниеДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеДС
	|	ПО
	|		ХозрасчетныйОбороты.Регистратор = ПоступлениеДС.Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	КорСчет,
	|	КорНаправлениеДеятельности
	|";
	
	ТипыПлатежейВРамкахКонтракта = Новый Массив;
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.РасчетыСИностраннымиИсполнителями);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеДенежныхСредствПослеЗавершенияГосконтракта);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеМеждуОтдельнымиСчетамиКонтракта);
	
	ТипыПлатежейВыводИзКонтракта = Новый Массив;
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ВозвратНаРасчетныйСчетРанееПолученныхСумм);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ВыплатыПоТрудовомуКодексуРФ);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеПоИсполнительнымДокументам);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ОплатаТруда);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов);
	
	Запрос.УстановитьПараметр("ТипыПлатежейВРамкахКонтракта", ТипыПлатежейВРамкахКонтракта);
	Запрос.УстановитьПараметр("ТипыПлатежейВыводИзКонтракта", ТипыПлатежейВыводИзКонтракта);
	
	СчетаУчетаДенежныхСредств = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаДенежныхСредств,  СчетаУчетаДенеженыеСредстваНаСчетах());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаДенежныхСредств,  СчетаУчетаДенежныхСредстваВПути());
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",                СчетаУчетаДенежныхСредств);
	Запрос.УстановитьПараметр("СчетаУчетаЗадолженностьПередПоставщиками", СчетаУчетаЗадолженностьПередПоставщиками());
	Запрос.УстановитьПараметр("СчетаУчетаПрочиеДоходы",                   СчетаУчетаПрочиеДоходы());
	
	Запрос.УстановитьПараметр("ПустоеНД",                       Справочники.НаправленияДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипНаправления",           Перечисления.ТипыНаправленийДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",                    ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Период",                         ПараметрыОтчета.Период);
	Запрос.УстановитьПараметр("ВариантФормирования",            ПараметрыОтчета.ВариантФормирования);
	Запрос.УстановитьПараметр("ОтборНаправленияДеятельности",   ПараметрыОтчета.ОтборНаправленияДеятельности);
	Запрос.УстановитьПараметр("ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ", ПараметрыОтчета.ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ);
	Если ПараметрыОтчета.ЕстьДанныеНаПлановуюДатуЗавершения Тогда
		Запрос.УстановитьПараметр("ПлановаяДатаЗавершения",             ЦелевыеПараметры.ПлановаяДатаЗавершения);
	Иначе
		Запрос.УстановитьПараметр("ПлановаяДатаЗавершения",             Дата(1,1,1,0,0,0));
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "";
	Показатели = ПравилаРасчетаПоказателей.ВыгрузитьКолонку("КодПоказателя");
	Показатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Показатели);
	ДанныеПоказателей = Неопределено;
	Для каждого Показатель Из Показатели Цикл
		МассивОбъединений = Новый Массив;
		ПравилаПоРазделу = ПравилаРасчетаПоказателей.НайтиСтроки(Новый Структура("КодПоказателя", Показатель));
		Для каждого Правило Из ПравилаПоРазделу Цикл
			ТекстЗапросаПоПравилу = ТекстЗапросаПоПравилу(Правило, ПараметрыОтчета, Запрос);
			Если ТекстЗапросаПоПравилу <> "" Тогда
				МассивОбъединений.Добавить(ТекстЗапросаПоПравилу);
			КонецЕсли;
		КонецЦикла;
		Если МассивОбъединений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос.Текст = СтрСоединить(МассивОбъединений, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Если ДанныеПоказателей = Неопределено Тогда
			ДанныеПоказателей = Запрос.Выполнить().Выгрузить();
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ДанныеПоказателей); 
		КонецЕсли;
	КонецЦикла;
	
	КолонкиСуммирования = 
		"СальдоНаТекущуюДату, СальдоНаПлановуюДатуЗавершения,
		|ОборотДт_НД, ОборотДт_ГОЗ, ОборотДт_Ввод, 
		|ОборотКт_НД, ОборотКт_ГОЗ, ОборотКт_Вывод, 
		|ОборотДт_НаДатуЗавершения_НД, ОборотДт_НаДатуЗавершения_ГОЗ, ОборотДт_НаДатуЗавершения_Ввод, 
		|ОборотКт_НаДатуЗавершения_НД, ОборотКт_НаДатуЗавершения_ГОЗ, ОборотКт_НаДатуЗавершения_Вывод";
	
	Если ПараметрыОтчета.Детализация = "ДоРегистратора" Тогда
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный, Период, Регистратор, Множитель", КолонкиСуммирования);
	ИначеЕсли ПараметрыОтчета.Детализация = "ДоОборотов" Тогда
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный, Оборот, ИндексОборота", КолонкиСуммирования);
	Иначе
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный", КолонкиСуммирования);
	КонецЕсли;
	
	ДанныеПоказателей.Индексы.Добавить("ГруппаПоказателей1");
	ДанныеПоказателей.Индексы.Добавить("ГруппаПоказателей2");
	ДанныеПоказателей.Индексы.Добавить("КодПоказателя");
	
	Возврат ДанныеПоказателей;
	
КонецФункции

Функция ТаблицаПравилРасчетаПоказателей(ПараметрыОтчета)
	
	// Счета учета финансирования
	СчетаУчетаРасчетыСКлиентами = СчетаУчетаРасчетыСКлиентами();
	СчетаУчетаКредитыИЗаймы = СчетаУчетаКредитыИЗаймы();
	СчетаУчетаПроцентыПоКредитамИЗаймам = СчетаУчетаПроцентыПоКредитамИЗаймам();
	СчетаУчетаЗадолженностьПередПоставщиками = СчетаУчетаЗадолженностьПередПоставщиками();
	
	// Счета учета денежных средств
	СчетаУчетаДенеженыеСредстваНаСчетах = СчетаУчетаДенеженыеСредстваНаСчетах();
	СчетаУчетаДепозиты = СчетаУчетаДепозиты();
	СчетаУчетаАвансыВыданныеПоставщикам = СчетаУчетаАвансыВыданныеПоставщикам();
	СчетаУчетаДенежныхСредстваВПути = СчетаУчетаДенежныхСредстваВПути();
	
	// Счета учета запасов
	СчетаУчетаМатериалыНаСкадах = СчетаУчетаМатериалыНаСкадах();
	СчетаУчетаНДСВходящий = СчетаУчетаНДСВходящий();
	СчетаУчетаПолуфабрикатыНаСкладах = СчетаУчетаПолуфабрикатыНаСкладах();
	СчетаУчетаМатериалыВПереработчике = СчетаУчетаМатериалыВПереработчике();
	СчетаУчетаРасходыБудущихПериодов = СчетаУчетаРасходыБудущихПериодов();
	СчетаУчетаСредстваПроизводства = СчетаУчетаСредстваПроизводства();
	СчетаУчетаДопРасходыМатериалы = СчетаУчетаДопРасходыМатериалы();
	
	// Счета учета производства
	СчетаУчетаПроизводство = СчетаУчетаПроизводство();
	СчетаУчетаОбщепроизводственныеЗатраты = СчетаУчетаОбщепроизводственныеЗатраты();
	СчетаУчетаОбщехозяйственныеЗатраты = СчетаУчетаОбщехозяйственныеЗатраты();
	
	СчетаУчетаГотоваяПродукция = СчетаУчетаГотоваяПродукция();
	
	КорСчетаУчетаПрочихПроизводственныхЗатрат = КорСчетаУчетаПрочихПроизводственныхЗатрат();
	
	// Продажи
	СчетаУчетаНДССПродаж = СчетаУчетаНДССПродаж();
	СчетаУчетаНДССАвансовКлиентам = СчетаУчетаНДССАвансовКлиентам();
	СчетаУчетаНДССАвансовПоставщикам = СчетаУчетаНДССАвансовПоставщикам();
	СчетаУчетаРасчетовПоНДС = СчетаУчетаРасчетовПоНДС();
	СчетаУчетаУправленческихРасходов = СчетаУчетаУправленческихРасходов();
	СчетаУчетаКоммерческиеРасходы = СчетаУчетаКоммерческиеРасходы();
	СчетаУчетаВыручкаОтПродаж = СчетаУчетаВыручкаОтПродаж();
	СчетаУчетаСебестоимостьПродаж = СчетаУчетаСебестоимостьПродаж();
	СчетаУчетаПрочиеРасходы = СчетаУчетаПрочиеРасходы();
	СчетаУчетаПрочиеДоходы = СчетаУчетаПрочиеДоходы();
	
	ПравилаРасчетаПоказателей = Новый ТаблицаЗначений;
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей1",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей2",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Пассивный",            Новый ОписаниеТипов("Булево"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("КодПоказателя",        Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ЭтоГруппа",            Новый ОписаниеТипов("Булево"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Заголовок",            Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ЦелевойПараметр",      Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Обороты",              Новый ОписаниеТипов("СписокЗначений"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ПоказателиРеглОтчета", Новый ОписаниеТипов("СписокЗначений"));
	
#Область ФинансированиеКонтракта

	// 100 "Финансирование контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "100";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Финансирование контракта';
									|en = 'Contract funding'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001000001, П000001000002, П000001000003");
	
	// 101 "Средства, полученные от заказчика"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "101";
	НовоеПравило.Пассивный          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Средства, полученные от заказчика';
									|en = 'Funds received from the customer'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001100001, П000001100002, П000001100003, П000001100004, П000001100006, П000001100007");
	
	ИсключаемыеКорСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаВыручкаОтПродаж);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаРасчетыСКлиентами);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаПрочиеРасходы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаПрочиеДоходы);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетыСКлиентами;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ИсключаемыйКорСчет = ИсключаемыеКорСчета;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 102 "Кредиты банка"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "102";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Кредиты банка';
									|en = 'Bank credits'");
	НовоеПравило.ЦелевойПараметр = "ОбъемКредитования";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001200001, П000001200002, П000001200003, П000001200004, П000001200006, П000001200007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаКредитыИЗаймы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 102 "Задолженность по процентам по кредитам"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "103";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Задолженность по процентам по кредитам';
									|en = 'Interest debt under credits'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001300003, П000001300004, П000001300006, П000001300007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроцентыПоКредитамИЗаймам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 104 "Задолженность перед поставщиками"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "104";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Задолженность перед поставщиками';
									|en = 'Debt owed to vendors'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001400003, П000001400004, П000001400005, П000001400006, П000001400007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаЗадолженностьПередПоставщиками;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
#КонецОбласти
	
#Область РаспределениеСредствКонтракта

	// 200 "Распределение ресурсов контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "200";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Распределение ресурсов контракта';
									|en = 'Allocation of contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002000003");

	#Область ДенежныеСредства
	
	// 210 "Денежные средства"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя      = "210";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Распределение ресурсов контракта';
									|en = 'Allocation of contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002100003, П000002100004, П000002100005, П000002100006, П000002100007, П000002100008, П000002100009");
	
	// 211 "Денежные средства на отдельных счетах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "211";
	НовоеПравило.Заголовок = НСтр("ru = 'Денежные средства на отдельных счетах';
									|en = 'Cash on separate accounts'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002110003, П000002110004, П000002110006, П000002110007, П000002110008, П000002110009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ИсключаемыйКорСчет = СчетаУчетаДенежныхСредстваВПути;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаДенежныхСредстваВПути;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	// 212 "Денежные средства на депозитах в банке"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "212";
	НовоеПравило.Заголовок = НСтр("ru = 'Денежные средства на депозитах в банке';
									|en = 'Cash on deposit bank accounts'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002120003, П000002120004, П000002120007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДепозиты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 213 "Авансы, выданные поставщикам"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "213";
	НовоеПравило.Заголовок = НСтр("ru = 'Авансы, выданные поставщикам';
									|en = 'Advances paid to vendors'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002130003, П000002130004, П000002130005, П000002130006, П000002130007, П000002130009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаАвансыВыданныеПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область Запасы
	
	// 220 "Запасы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя      = "220";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Запасы';
									|en = 'Inventory'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002200003, П000002200004, П000002200005, П000002200006, П000002200007, П000002200008, П000002200009");
	
	// 221 "Материалы на складах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "221";
	НовоеПравило.Заголовок = НСтр("ru = 'Материалы на складах';
									|en = 'Materials in warehouses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002210003, П000002210004, П000002210005, П000002210006, П000002210007, П000002210008, П000002210009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 222 "НДС входящий"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "222";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС входящий';
									|en = 'Incoming VAT'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002220003, П000002220004, П000002220007, П000002220009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДСВходящий;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 223 "Полуфабрикаты на складах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "223";
	НовоеПравило.Заголовок = НСтр("ru = 'Полуфабрикаты на складах';
									|en = 'Semi-finished products at warehouses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002230003, П000002230004, П000002230005, П000002230006, П000002230007, П000002230008, П000002230009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 224 "Материалы, переданные в переработку"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "224";
	НовоеПравило.Заголовок = НСтр("ru = 'Материалы, переданные в переработку';
									|en = 'Materials transferred to tolling'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002240003, П000002240004, П000002240007, П000002240009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 225 "Расходы будущих периодов"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "225";
	НовоеПравило.Заголовок = НСтр("ru = 'Расходы будущих периодов';
									|en = 'Deferred expenses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002250003, П000002250004, П000002250007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасходыБудущихПериодов;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 226 "Средства производства"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "226";
	НовоеПравило.Заголовок = НСтр("ru = 'Средства производства';
									|en = 'Production means'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002260003, П000002260004, П000002260005, П000002260006, П000002260007, П000002260008, П000002260009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаСредстваПроизводства;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область Производство
	
	// 230 "Производство"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя      = "230";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Производство';
									|en = 'Production'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002300003, П000002300004, П000002300005, П000002300006, П000002300007, П000002300008, П000002300009");
	
	// 231 "Затраты на материалы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "231";
	НовоеПравило.Заголовок = НСтр("ru = 'Затраты на материалы';
									|en = 'Material costs'");
	НовоеПравило.ЦелевойПараметр = "ЗатратыНаМатериалы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002310001, П000002310002, П000002310003, П000002310004, П000002310005, П000002310006, П000002310007, П000002310008, П000002310009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаНДСВходящий;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);	
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыЗатратРегл.ПустаяСсылка());
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорСубконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыЗатратРегл.ПустаяСсылка());
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорСубконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);	
		
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
		
	// 232 "Затраты на оплату труда"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "232";
	НовоеПравило.Заголовок = НСтр("ru = 'Затраты на оплату труда';
									|en = 'Payroll expenses'");
	НовоеПравило.ЦелевойПараметр = "ЗатратыНаОплатуТруда";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002320001, П000002320002, П000002320003, П000002320006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетыПоОплатеТруда();
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРезервовОтпусков();
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 233 "Прочие производственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "233";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие производственные затраты';
									|en = 'Other production costs'");
	НовоеПравило.ЦелевойПараметр = "ПрочиеПроизводственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002330001, П000002330002, П000002330003, П000002330004, П000002330005, П000002330006, П000002330007, П000002330008, П000002330009");
	
	ТипыЗатрат233 = Новый Массив;
	ТипыЗатрат233.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	ТипыЗатрат233.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = КорСчетаУчетаПрочихПроизводственныхЗатрат;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
		
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасходыБудущихПериодов;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаЗадолженностьПередПоставщиками;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;   
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;  
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.МатериальныеЗатраты);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаСредстваПроизводства;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаДопРасходыМатериалы;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыЗатратРегл.ПустаяСсылка());
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорСубконто1 = ТипыЗатрат233;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыЗатратРегл.ПустаяСсылка());
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорСубконто1 = ТипыЗатрат233;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);	

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = ТипыЗатрат233;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.ИзменяетсяПодразделение = Ложь;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	// 234 "Общепроизводственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "234";
	НовоеПравило.Заголовок = НСтр("ru = 'Общепроизводственные затраты';
									|en = 'General production costs'");
	НовоеПравило.ЦелевойПараметр = "ОбщепроизводственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002340001, П000002340002, П000002340003, П000002340006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.КорСчет = СчетаУчетаОбщепроизводственныеЗатраты;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 235 "Общехозяйственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "235";
	НовоеПравило.Заголовок = НСтр("ru = 'Общехозяйственные затраты';
									|en = 'General business costs'");
	НовоеПравило.ЦелевойПараметр = "ОбщехозяйственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002350001, П000002350002, П000002350003, П000002350006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаОбщехозяйственныеЗатраты;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 236 "Полуфабрикаты собственного производства, внутренние работы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "236";
	НовоеПравило.Заголовок = НСтр("ru = 'Полуфабрикаты собственного производства, внутренние работы';
									|en = 'Own-produced semi-finished products, in-house works'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002360003, П000002360004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	МассивСубконто.Добавить(Перечисления.ТипыЗатратРегл.МатериальныеЗатраты);
	ОтборОборотов.Субконто1 = МассивСубконто;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.ИзменяетсяПодразделение = Истина;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 237 "Выпуск полуфабрикатов, внутренних работ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "237";
	НовоеПравило.Заголовок = НСтр("ru = 'Выпуск полуфабрикатов, внутренних работ';
									|en = 'Release of semi-finished products, in-house works'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002370003, П000002370007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	МассивКорСубконто = Новый Массив;
	МассивКорСубконто.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	МассивКорСубконто.Добавить(Перечисления.ТипыЗатратРегл.МатериальныеЗатраты);
	ОтборОборотов.КорСубконто1 = МассивКорСубконто;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Истина;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 238 "Выпуск продукции"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "238";
	НовоеПравило.Заголовок = НСтр("ru = 'Выпуск продукции';
									|en = 'Product costing method'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002380003, П000002380007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаСебестоимостьПродаж;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область ГотоваяПродукцияНаСкладе
	
	// 240 "Готовая продукция на складе"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "240";
	НовоеПравило.КодПоказателя = "241";
	НовоеПравило.Заголовок = НСтр("ru = 'Готовая продукция на складе';
									|en = 'Finished products in warehouse'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002400003, П000002400004, П000002400005, П000002400006, П000002400007, П000002400008, П000002400009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
#КонецОбласти

#Область ОтгрузкаПродукцииВыполнениеРабот

	// 300 Отгрузка продукции, выполнение работ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "300";
	НовоеПравило.ГруппаПоказателей2 = "301";
	НовоеПравило.КодПоказателя = "301";
	НовоеПравило.Заголовок = НСтр("ru = 'Отгрузка продукции, выполнение работ';
									|en = 'Product shipment, work performance'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003000001, П000003000002, П000003000003");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаВыручкаОтПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Корректировки, реализации материалов
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.КорСчет = СчетаУчетаРасчетыСКлиентами;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетыСКлиентами;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 310 "Себестоимость реализованной продукции"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "310";
	НовоеПравило.КодПоказателя = "310";
	НовоеПравило.Заголовок = НСтр("ru = 'Себестоимость реализованной продукции';
									|en = 'Sold goods cost'");
	НовоеПравило.ЦелевойПараметр = "Затраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003100001, П000003100002, П000003100003, П000003100004, П000003100006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаСебестоимостьПродаж;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Ошибки округления, корректировки реализации и реализации материалов, полуфабрикатов, списания задолженности
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаСредстваПроизводства;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаГотоваяПродукция;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаАвансыВыданныеПоставщикам;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Курсовые разницы
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаЗадолженностьПередПоставщиками;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 320 "Управленческие расходы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "320";
	НовоеПравило.КодПоказателя = "320";
	НовоеПравило.Заголовок = НСтр("ru = 'Административно - управленческие расходы';
									|en = 'Administrative and management expenses'");
	НовоеПравило.ЦелевойПараметр = "УправленческиеРасходы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003200001, П000003200002, П000003200003, П000003200006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаУправленческихРасходов;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 330 "Коммерческие расходы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "330";
	НовоеПравило.КодПоказателя = "330";
	НовоеПравило.Заголовок = НСтр("ru = 'Коммерческие расходы';
									|en = 'Selling expenses '");
	НовоеПравило.ЦелевойПараметр = "КоммерческиеРасходы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003300001, П000003300002, П000003300003, П000003300004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаКоммерческиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 340 "Проценты по кредитам банка"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "340";
	НовоеПравило.КодПоказателя = "340";
	НовоеПравило.Заголовок = НСтр("ru = 'Проценты по кредитам банка';
									|en = 'Bank loan interest'");
	НовоеПравило.ЦелевойПараметр = "ПроцентыПоКредитам";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003400001, П000003400002, П000003400003, П000003400004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.КорСчет   = СчетаУчетаПроцентыПоКредитамИЗаймам;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 350 "НДС с выручки от продаж"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "350";
	НовоеПравило.КодПоказателя = "350";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС с выручки от продаж';
									|en = 'VAT from sales revenue'");
	НовоеПравило.ЦелевойПараметр = "СуммаНДС";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003500003, П000003500006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#Область НДССАвансов
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	#КонецОбласти
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеДоходы;  
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.Множитель = -1;       
	ОтборОборотов.ПеренестиОборотВДт = Истина;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 360 "Прибыль контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "300";
	НовоеПравило.ГруппаПоказателей2 = "360";
	НовоеПравило.КодПоказателя = "360";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль контракта';
									|en = 'Contract profit'");
	НовоеПравило.ЦелевойПараметр = "ПрибыльКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003600001, П000003600002, П000003600003");
	
	МассивОтборовОборотов = Новый Массив;
	//+ Выручка
	ПравилоВыручка = ПравилаРасчетаПоказателей.Найти("301", "КодПоказателя");
	Для каждого Оборот Из ПравилоВыручка.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Себестоимость готовой продукции/работ
	ПравилоСебестоимость = ПравилаРасчетаПоказателей.Найти("310", "КодПоказателя");
	Для каждого Оборот Из ПравилоСебестоимость.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Управленческие расходы 
	ПравилоУправленческиеРасходы = ПравилаРасчетаПоказателей.Найти("320", "КодПоказателя");
	Для каждого Оборот Из ПравилоУправленческиеРасходы.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Коммерческие расходы 
	ПравилоКоммерческиеРасходы = ПравилаРасчетаПоказателей.Найти("330", "КодПоказателя");
	Для каждого Оборот Из ПравилоКоммерческиеРасходы.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Проценты по кредитам банка
	ПравилоПроцентыПоКредитам = ПравилаРасчетаПоказателей.Найти("340", "КодПоказателя");
	Для каждого Оборот Из ПравилоПроцентыПоКредитам.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	
	Для каждого ОтборОборотов Из МассивОтборовОборотов Цикл
		Если ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт Тогда
			ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
		ИначеЕсли ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
			ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
		КонецЕсли;
		ДобавитьОборот(НовоеПравило, ОтборОборотов);
	КонецЦикла;
	
	//- НДС с выручки от продаж
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеДоходы;  
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.Множитель = 1;       
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
		
	#КонецОбласти
	
	// 400 "(+) Привлечение ресурсов в контракт / (-) Перенаправление ресурсов контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "400";
	НовоеПравило.ГруппаПоказателей2 = "400";
	НовоеПравило.КодПоказателя      = "400";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = '(+) Привлечение ресурсов в контракт / (-) Перенаправление ресурсов контракта';
									|en = '(+) Raise resources to contract / (-) Forward contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000004000003, П000004000005, П000004000006, П000004000008, П000004000009");
	
	// 500 "Средства, списанные в счет прибыли контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "501";
	НовоеПравило.КодПоказателя = "501";
	НовоеПравило.Заголовок = НСтр("ru = 'Средства, списанные в счет прибыли контракта';
									|en = 'Funds written off to contract profit account'");
	НовоеПравило.ЦелевойПараметр = "СписаниеДенежныхСредствСОтдельногоСчета";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000005000001, П000005000002, П000005000003");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности    = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ТипыПлатежейФЗ275 = Новый Массив;
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеДенежныхСредствПослеЗавершенияГосконтракта);
	ОтборОборотов.ТипыПлатежейФЗ275 = ТипыПлатежейФЗ275;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КодПоказателя) Тогда
		ПравилаКУдалению = Новый Массив;
		Для каждого Правило Из ПравилаРасчетаПоказателей Цикл
			Если Правило.ГруппаПоказателей1 <> ПараметрыОтчета.КодПоказателя
				 И Правило.ГруппаПоказателей2 <> ПараметрыОтчета.КодПоказателя
				 И Правило.КодПоказателя <> ПараметрыОтчета.КодПоказателя Тогда
				ПравилаКУдалению.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Правило Из ПравилаКУдалению Цикл
			ПравилаРасчетаПоказателей.Удалить(Правило);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПравилаРасчетаПоказателей;
	
КонецФункции

Процедура ДобавитьОбороты(Правило, ОтборОборотов, Детализация)
	
	Если Детализация = "ДоОборотов" Тогда
		Для каждого Счет Из ОтборОборотов.Счет Цикл
			ОтборОборота = ОтборОборотов();
			ОтборОборота.Счет = Счет; 
			ЗаполнитьЗначенияСвойств(ОтборОборота, ОтборОборотов, , "Счет");
			ДобавитьОборот(Правило, ОтборОборота);
		КонецЦикла;
	Иначе
		ДобавитьОборот(Правило, ОтборОборотов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОборот(Правило, ОтборОборота)
	
	Оборот = Новый Структура;
	
	Оборот.Вставить("Счет",      ОтборОборота.Счет);
	
	МассивСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.Субконто1) = Тип("Массив") Тогда
		МассивСубконто1 = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.Субконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.Субконто1) Тогда
		МассивСубконто1.Добавить(ОтборОборота.Субконто1);
	КонецЕсли;
	Оборот.Вставить("Субконто1", МассивСубконто1);
	МассивНаправленийДеятельности = Новый СписокЗначений;
	Оборот.Вставить("НаправлениеДеятельности", ОтборОборота.НаправлениеДеятельности);
	
	МассивКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСчет) = Тип("Массив") Тогда
		МассивКорСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.КорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.КорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивКорСчетов.Добавить(ОтборОборота.КорСчет);
	КонецЕсли;
	Оборот.Вставить("КорСчет", МассивКорСчетов);
	
	МассивКорСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСубконто1) = Тип("Массив") Тогда
		МассивКорСубконто1 = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.КорСубконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.КорСубконто1) Тогда
		МассивКорСубконто1.Добавить(ОтборОборота.КорСубконто1);
	КонецЕсли;
	Оборот.Вставить("КорСубконто1", МассивКорСубконто1);
	Оборот.Вставить("КорНаправлениеДеятельности", ОтборОборота.КорНаправлениеДеятельности);
	 
	МассивИсключаемыхКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("Массив") Тогда
		МассивИсключаемыхКорСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.ИсключаемыйКорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивИсключаемыхКорСчетов.Добавить(ОтборОборота.ИсключаемыйКорСчет);
	КонецЕсли;
	Оборот.Вставить("ИсключаемыйКорСчет", МассивИсключаемыхКорСчетов);
	
	Оборот.Вставить("ТипИтогов", ОтборОборота.ТипИтогов);
	Оборот.Вставить("Множитель", ОтборОборота.Множитель);
	
	Оборот.Вставить("ТипыПлатежейФЗ275", ОтборОборота.ТипыПлатежейФЗ275);
	Оборот.Вставить("ИзменяетсяПодразделение", ОтборОборота.ИзменяетсяПодразделение);
	Оборот.Вставить("ПеренестиОборотВДт", ОтборОборота.ПеренестиОборотВДт);
	
	МассивПодстрок = Новый Массив;
	Если Оборот.Множитель = -1 Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(-)';
									|en = '(-)'"));
	КонецЕсли;
	МассивПодстрок.Добавить(Оборот.ТипИтогов);
	Если ТипЗнч(Оборот.Счет) = Тип("Массив") Тогда
		МассивПодстрок.Добавить(СтрСоединить(Оборот.Счет, ","));
	Иначе
		МассивПодстрок.Добавить(Оборот.Счет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.Субконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.Субконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСчет) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(СтрСоединить(Оборот.КорСчет, ","));
	ИначеЕсли Оборот.ТипИтогов = Перечисления.ТипыИтогов.Оборот
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт 
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(НСтр("ru = 'все счета';
									|en = 'all accounts'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСубконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.КорСубконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ИсключаемыйКорСчет) Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'за исключением';
									|en = 'except'"));
		МассивПодстрок.Добавить(СтрСоединить(Оборот.ИсключаемыйКорСчет, ","));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорНаправлениеДеятельности) Тогда
		Если Оборот.КорНаправлениеДеятельности = "Контракт" Тогда
			МассивПодстрок.Добавить(НСтр("ru = '(в рамках контракта)';
										|en = '(under contract)'"));
		ИначеЕсли Оборот.КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			МассивПодстрок.Добавить(НСтр("ru = '(другие контракты ГОЗ)';
										|en = '(other SDO contracts)'"));
		Иначе
			МассивПодстрок.Добавить(НСтр("ru = '(иная деятельность)';
										|en = '(other activity)'"));
		КонецЕсли;
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Правило.Обороты.Добавить(Оборот, Представление);
	
КонецПроцедуры

Функция ОтборОборотов()
	
	ОтборОборота = Новый Структура();
	ОтборОборота.Вставить("Счет");
	ОтборОборота.Вставить("Субконто1");
	ОтборОборота.Вставить("НаправлениеДеятельности");
	ОтборОборота.Вставить("КорСчет");
	ОтборОборота.Вставить("КорСубконто1");
	ОтборОборота.Вставить("КорНаправлениеДеятельности");
	ОтборОборота.Вставить("ИсключаемыйКорСчет");
	ОтборОборота.Вставить("ТипКорНаправлениеДеятельности");
	ОтборОборота.Вставить("ТипИтогов", Перечисления.ТипыИтогов.Оборот);
	ОтборОборота.Вставить("Множитель", 1);
	ОтборОборота.Вставить("ТипыПлатежейФЗ275");
	ОтборОборота.Вставить("ИзменяетсяПодразделение");
	ОтборОборота.Вставить("ПеренестиОборотВДт", Ложь);
	
	Возврат ОтборОборота;
	
КонецФункции

Функция ТекстЗапросаПоПравилу(Правило, ПараметрыОтчета, Запрос)
	
	Фрагменты                          = Новый Массив;
	МассивЗапросовВременныхТаблиц      = Новый Массив;
	МассивИменТаблицКУничтожению       = Новый Массив;
	
	ШаблонХозрасчетныйОбороты = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ТипНаправлениеДеятельности КАК ТипНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности КАК ТипКорНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ОборотДт КАК ОборотДт,
	|	ХозрасчетныйОбороты.ОборотКт КАК ОборотКт,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения КАК ОборотДт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения КАК ОборотКт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.КорПодразделение КАК КорПодразделение,
	|	&Множитель КАК Множитель,
	|	&ТипИтогов КАК ТипИтогов,
	|	&НаправлениеДеятельности КАК ПараметрНаправлениеДеятельности,
	|	ВЫРАЗИТЬ(""ПараметрГруппаПоказателей1"" КАК СТРОКА(3)) КАК ГруппаПоказателей1,
	|	ВЫРАЗИТЬ(""ПараметрГруппаПоказателей2"" КАК СТРОКА(3)) КАК ГруппаПоказателей2,
	|	ВЫРАЗИТЬ(""ПараметрКодПоказателя"" КАК СТРОКА(3)) КАК КодПоказателя,
	|	&Пассивный КАК Пассивный,
	|	&ИндексОборота КАК ИндексОборота,
	|	ВЫРАЗИТЬ(&ЗаголовокОборот КАК СТРОКА(100)) КАК Оборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
	|ИЗ
	|	ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Счет В(&Счет)
	|	И &ОтборСубконто1
	|	И &ОтборКорСчет
	|	И &ОтборКорСубконто1
	|	И &ОтборНаправлениеДеятельности
	|	И &ОтборКорНаправлениеДеятельности
	|	И &ОтборИсключаемыйКорСчет
	|	И &ОтборТипыПлатежейФЗ275
	|	И &ОтборИзменяетсяПодразделение
	|";
	
	#Область СальдоДтКт
	
	ШаблонТипИтоговСальдоДтКт = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт)
	|				ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотКт - ХозрасчетныйОбороты.ОборотДт)
	|			КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт)
	|				ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотДт - ХозрасчетныйОбороты.ОборотКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоНаТекущуюДату,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт)
	|				ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения)
	|			КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт)
	|				ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоНаПлановуюДатуЗавершения
	|ПОМЕСТИТЬ ВТ_Сальдо
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Множитель,
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт)
	|					ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотКт - ХозрасчетныйОбороты.ОборотДт)
	|				КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт)
	|					ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотДт - ХозрасчетныйОбороты.ОборотКт)
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт)
	|					ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения)
	|				КОГДА ХозрасчетныйОбороты.ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт)
	|					ТОГДА ХозрасчетныйОбороты.Множитель * (ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения)
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|";
	
	ПодзапросТипИтоговСальдоДтКт = "
	|ВЫБРАТЬ
	|	ТаблицаСальдо.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаСальдо.Регистратор КАК Регистратор,
	|	ТаблицаСальдо.Период КАК Период,
	|	ТаблицаСальдо.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ТаблицаСальдо.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ТаблицаСальдо.КодПоказателя КАК КодПоказателя,
	|	ТаблицаСальдо.Пассивный КАК Пассивный,
	|	ТаблицаСальдо.ИндексОборота КАК ИндексОборота,
	|	ТаблицаСальдо.Оборот КАК Оборот,
	|	ТаблицаСальдо.Множитель КАК Множитель,
	|	ТаблицаСальдо.СальдоНаТекущуюДату КАК СальдоНаТекущуюДату,
	|	ТаблицаСальдо.СальдоНаПлановуюДатуЗавершения КАК СальдоНаПлановуюДатуЗавершения,
	|	0 КАК ОборотДт_НД,
	|	0 КАК ОборотДт_ГОЗ,
	|	0 КАК ОборотДт_Ввод,
	|	0 КАК ОборотКт_НД,
	|	0 КАК ОборотКт_ГОЗ,
	|	0 КАК ОборотКт_Вывод,
	|	0 КАК ОборотДт_НаДатуЗавершения_НД,
	|	0 КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	0 КАК ОборотКт_НаДатуЗавершения_НД,
	|	0 КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_Сальдо КАК ТаблицаСальдо";
	
	#КонецОбласти
	
	#Область ОборотыДт
	
	ШаблонТипИтоговОборотДт = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеКонтракт
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НД,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_ГОЗ,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеИнаяДеятельность
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_Ввод
	|ПОМЕСТИТЬ ВТ_ОборотыДт
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Множитель,
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &УсловиеКонтракт
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеДругиеКонтрактыГОЗ
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеИнаяДеятельность
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|";
	
	ПодзапросТипИтоговОборотДт = "
	|ВЫБРАТЬ
	|	ТаблицаОборотыДт.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОборотыДт.Регистратор КАК Регистратор,
	|	ТаблицаОборотыДт.Период КАК Период,
	|	ТаблицаОборотыДт.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ТаблицаОборотыДт.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ТаблицаОборотыДт.КодПоказателя КАК КодПоказателя,
	|	ТаблицаОборотыДт.Пассивный КАК Пассивный,
	|	ТаблицаОборотыДт.ИндексОборота КАК ИндексОборота,
	|	ТаблицаОборотыДт.Оборот КАК Оборот,
	|	ТаблицаОборотыДт.Множитель КАК Множитель,
	|	0 КАК СальдоНаТекущуюДату,
	|	0 КАК СальдоНаПлановуюДатуЗавершения,
	|	ТаблицаОборотыДт.ОборотДт_НД КАК ОборотДт_НД,
	|	ТаблицаОборотыДт.ОборотДт_ГОЗ КАК ОборотДт_ГОЗ,
	|	ТаблицаОборотыДт.ОборотДт_Ввод КАК ОборотДт_Ввод,
	|	0 КАК ОборотКт_НД,
	|	0 КАК ОборотКт_ГОЗ,
	|	0 КАК ОборотКт_Вывод,
	|	0 КАК ОборотДт_НаДатуЗавершения_НД,
	|	0 КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	0 КАК ОборотКт_НаДатуЗавершения_НД,
	|	0 КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_ОборотыДт КАК ТаблицаОборотыДт
	|";
	
	#КонецОбласти
	
	#Область ОборотыКт
	
	ШаблонТипИтоговОборотКт = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеКонтракт
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НД,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_ГОЗ,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеИнаяДеятельность
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_Вывод
	|ПОМЕСТИТЬ ВТ_ОборотыКт
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Множитель,
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &УсловиеКонтракт
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеДругиеКонтрактыГОЗ
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеИнаяДеятельность
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|";
	
	ПодзапросТипИтоговОборотКт = "
	|ВЫБРАТЬ
	|	ТаблицаОборотыКт.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОборотыКт.Регистратор КАК Регистратор,
	|	ТаблицаОборотыКт.Период КАК Период,
	|	ТаблицаОборотыКт.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ТаблицаОборотыКт.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ТаблицаОборотыКт.КодПоказателя КАК КодПоказателя,
	|	ТаблицаОборотыКт.Пассивный КАК Пассивный,
	|	ТаблицаОборотыКт.ИндексОборота КАК ИндексОборота,
	|	ТаблицаОборотыКт.Оборот КАК Оборот,
	|	ТаблицаОборотыКт.Множитель КАК Множитель,
	|	0 КАК СальдоНаТекущуюДату,
	|	0 КАК СальдоНаПлановуюДатуЗавершения,
	|	0 КАК ОборотДт_НД,
	|	0 КАК ОборотДт_ГОЗ,
	|	0 КАК ОборотДт_Ввод,
	|	ТаблицаОборотыКт.ОборотКт_НД КАК ОборотКт_НД,
	|	ТаблицаОборотыКт.ОборотКт_ГОЗ КАК ОборотКт_ГОЗ,
	|	ТаблицаОборотыКт.ОборотКт_Вывод КАК ОборотКт_Вывод,
	|	0 КАК ОборотДт_НаДатуЗавершения_НД,
	|	0 КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	0 КАК ОборотКт_НаДатуЗавершения_НД,
	|	0 КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_ОборотыКт КАК ТаблицаОборотыКт
	|";
	
	#КонецОбласти
	
	#Область ОборотыДтНаДатуЗавершения
	
	ШаблонТипИтоговОборотДтНаДатуЗавершения = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеКонтракт
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_НД,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеИнаяДеятельность
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_Ввод
	|ПОМЕСТИТЬ ВТ_ДебетовыйОборотНаДатуЗавершения
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Множитель,
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &УсловиеКонтракт
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеДругиеКонтрактыГОЗ
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеИнаяДеятельность
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|";
	
	ПодзапросТипИтоговОборотДтНаДатуЗавершения = "
	|ВЫБРАТЬ
	|	ТаблицаОборотыДтНаДатуЗавершения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОборотыДтНаДатуЗавершения.Регистратор КАК Регистратор,
	|	ТаблицаОборотыДтНаДатуЗавершения.Период КАК Период,
	|	ТаблицаОборотыДтНаДатуЗавершения.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ТаблицаОборотыДтНаДатуЗавершения.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ТаблицаОборотыДтНаДатуЗавершения.КодПоказателя КАК КодПоказателя,
	|	ТаблицаОборотыДтНаДатуЗавершения.Пассивный КАК Пассивный,
	|	ТаблицаОборотыДтНаДатуЗавершения.ИндексОборота КАК ИндексОборота,
	|	ТаблицаОборотыДтНаДатуЗавершения.Оборот КАК Оборот,
	|	ТаблицаОборотыДтНаДатуЗавершения.Множитель КАК Множитель,
	|	0 КАК СальдоНаТекущуюДату,
	|	0 КАК СальдоНаПлановуюДатуЗавершения,
	|	0 КАК ОборотДт_НД,
	|	0 КАК ОборотДт_ГОЗ,
	|	0 КАК ОборотДт_Ввод,
	|	0 КАК ОборотКт_НД,
	|	0 КАК ОборотКт_ГОЗ,
	|	0 КАК ОборотКт_Вывод,
	|	ТаблицаОборотыДтНаДатуЗавершения.ОборотДт_НаДатуЗавершения_НД КАК ОборотДт_НаДатуЗавершения_НД,
	|	ТаблицаОборотыДтНаДатуЗавершения.ОборотДт_НаДатуЗавершения_ГОЗ КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	ТаблицаОборотыДтНаДатуЗавершения.ОборотДт_НаДатуЗавершения_Ввод КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	0 КАК ОборотКт_НаДатуЗавершения_НД,
	|	0 КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_ДебетовыйОборотНаДатуЗавершения КАК ТаблицаОборотыДтНаДатуЗавершения
	|";
	
	#КонецОбласти 
	
	#Область ОборотыКтНаДатуЗавершения
	
	ШаблонТипИтоговОборотКтНаДатуЗавершения ="
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеКонтракт
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_НД,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	СУММА(ВЫБОР
	|			КОГДА &УсловиеИнаяДеятельность
	|				ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_Вывод
	|ПОМЕСТИТЬ ВТ_КредитовыйОборотНаДатуЗавершения
	|ИЗ
	|	ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Множитель,
	|	ХозрасчетныйОбороты.ПараметрНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &УсловиеКонтракт
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеДругиеКонтрактыГОЗ
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УсловиеИнаяДеятельность
	|					ТОГДА ХозрасчетныйОбороты.Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)
	|";
	
	ПодзапросТипИтоговОборотКтНаДатуЗавершения = "
	|ВЫБРАТЬ
	|	ТаблицаОборотыКтНаДатуЗавершения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОборотыКтНаДатуЗавершения.Регистратор КАК Регистратор,
	|	ТаблицаОборотыКтНаДатуЗавершения.Период КАК Период,
	|	ТаблицаОборотыКтНаДатуЗавершения.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ТаблицаОборотыКтНаДатуЗавершения.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ТаблицаОборотыКтНаДатуЗавершения.КодПоказателя КАК КодПоказателя,
	|	ТаблицаОборотыКтНаДатуЗавершения.Пассивный КАК Пассивный,
	|	ТаблицаОборотыКтНаДатуЗавершения.ИндексОборота КАК ИндексОборота,
	|	ТаблицаОборотыКтНаДатуЗавершения.Оборот КАК Оборот,
	|	ТаблицаОборотыКтНаДатуЗавершения.Множитель КАК Множитель,
	|	0 КАК СальдоНаТекущуюДату,
	|	0 КАК СальдоНаПлановуюДатуЗавершения,
	|	0 КАК ОборотДт_НД,
	|	0 КАК ОборотДт_ГОЗ,
	|	0 КАК ОборотДт_Ввод,
	|	0 КАК ОборотКт_НД,
	|	0 КАК ОборотКт_ГОЗ,
	|	0 КАК ОборотКт_Вывод,
	|	0 КАК ОборотДт_НаДатуЗавершения_НД,
	|	0 КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	0 КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	ТаблицаОборотыКтНаДатуЗавершения.ОборотКт_НаДатуЗавершения_НД КАК ОборотКт_НаДатуЗавершения_НД,
	|	ТаблицаОборотыКтНаДатуЗавершения.ОборотКт_НаДатуЗавершения_ГОЗ КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	ТаблицаОборотыКтНаДатуЗавершения.ОборотКт_НаДатуЗавершения_Вывод КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_КредитовыйОборотНаДатуЗавершения КАК ТаблицаОборотыКтНаДатуЗавершения
	|";
	
	#КонецОбласти
	
	ШаблонВременныеТаблицыИтоговая = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ВложенныйЗапрос.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ВложенныйЗапрос.КодПоказателя КАК КодПоказателя,
	|	ВложенныйЗапрос.Пассивный КАК Пассивный,
	|	ВложенныйЗапрос.ИндексОборота КАК ИндексОборота,
	|	ВложенныйЗапрос.Оборот КАК Оборот,
	|	ВложенныйЗапрос.Множитель КАК Множитель,
	|	СУММА(ВложенныйЗапрос.СальдоНаТекущуюДату) КАК СальдоНаТекущуюДату,
	|	СУММА(ВложенныйЗапрос.СальдоНаПлановуюДатуЗавершения) КАК СальдоНаПлановуюДатуЗавершения,
	|	СУММА(ВложенныйЗапрос.ОборотДт_НД) КАК ОборотДт_НД,
	|	СУММА(ВложенныйЗапрос.ОборотДт_ГОЗ) КАК ОборотДт_ГОЗ,
	|	СУММА(ВложенныйЗапрос.ОборотДт_Ввод) КАК ОборотДт_Ввод,
	|	СУММА(ВложенныйЗапрос.ОборотКт_НД) КАК ОборотКт_НД,
	|	СУММА(ВложенныйЗапрос.ОборотКт_ГОЗ) КАК ОборотКт_ГОЗ,
	|	СУММА(ВложенныйЗапрос.ОборотКт_Вывод) КАК ОборотКт_Вывод,
	|	СУММА(ВложенныйЗапрос.ОборотДт_НаДатуЗавершения_НД) КАК ОборотДт_НаДатуЗавершения_НД,
	|	СУММА(ВложенныйЗапрос.ОборотДт_НаДатуЗавершения_ГОЗ) КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	СУММА(ВложенныйЗапрос.ОборотДт_НаДатуЗавершения_Ввод) КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	СУММА(ВложенныйЗапрос.ОборотКт_НаДатуЗавершения_НД) КАК ОборотКт_НаДатуЗавершения_НД,
	|	СУММА(ВложенныйЗапрос.ОборотКт_НаДатуЗавершения_ГОЗ) КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	СУММА(ВложенныйЗапрос.ОборотКт_НаДатуЗавершения_Вывод) КАК ОборотКт_НаДатуЗавершения_Вывод
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	&ТаблицаПодзапроса КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НаправлениеДеятельности,
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.ГруппаПоказателей1,
	|	ВложенныйЗапрос.ГруппаПоказателей2,
	|	ВложенныйЗапрос.КодПоказателя,
	|	ВложенныйЗапрос.Пассивный,
	|	ВложенныйЗапрос.ИндексОборота,
	|	ВложенныйЗапрос.Оборот,
	|	ВложенныйЗапрос.Множитель
	|";
	
	Шаблон ="ВЫБРАТЬ
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.ГруппаПоказателей1 КАК ГруппаПоказателей1,
	|	ХозрасчетныйОбороты.ГруппаПоказателей2 КАК ГруппаПоказателей2,
	|	ХозрасчетныйОбороты.КодПоказателя КАК КодПоказателя,
	|	ХозрасчетныйОбороты.Пассивный КАК Пассивный,
	|	ХозрасчетныйОбороты.ИндексОборота КАК ИндексОборота,
	|	ХозрасчетныйОбороты.Оборот КАК Оборот,
	|	ХозрасчетныйОбороты.Множитель КАК Множитель,
	|	ХозрасчетныйОбороты.СальдоНаТекущуюДату КАК СальдоНаТекущуюДату,
	|	ХозрасчетныйОбороты.СальдоНаПлановуюДатуЗавершения КАК СальдоНаПлановуюДатуЗавершения,
	|	ХозрасчетныйОбороты.ОборотДт_НД КАК ОборотДт_НД,
	|	ХозрасчетныйОбороты.ОборотДт_ГОЗ КАК ОборотДт_ГОЗ,
	|	ВЫБОР
	|		КОГДА &ПеренестиОборотВДт
	|			ТОГДА ХозрасчетныйОбороты.ОборотКт_Вывод
	|		ИНАЧЕ ХозрасчетныйОбороты.ОборотДт_Ввод
	|	КОНЕЦ КАК ОборотДт_Ввод,
	|	ХозрасчетныйОбороты.ОборотКт_НД КАК ОборотКт_НД,
	|	ХозрасчетныйОбороты.ОборотКт_ГОЗ КАК ОборотКт_ГОЗ,
	|	ВЫБОР
	|		КОГДА &ПеренестиОборотВДт
	|			ТОГДА 0
	|		ИНАЧЕ ХозрасчетныйОбороты.ОборотКт_Вывод
	|	КОНЕЦ КАК ОборотКт_Вывод,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения_НД КАК ОборотДт_НаДатуЗавершения_НД,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения_ГОЗ КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения_Ввод КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения_НД КАК ОборотКт_НаДатуЗавершения_НД,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения_ГОЗ КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения_Вывод КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ВТ_Итоговая КАК ХозрасчетныйОбороты
	|";
	
	КодПоказателя = Правило.КодПоказателя;

	ПорядокЗапроса = 0;
	
	Для каждого Оборот Из Правило.Обороты Цикл
		
		ПорядокЗапроса = ПорядокЗапроса + 1;
		
		МассивТекстовЗапросов     = Новый Массив;
		МассивТекстовПодзапросов  = Новый Массив; 
		МассивИменВременныхТаблиц = Новый Массив;
		
		МассивТекстовЗапросов.Добавить(ШаблонХозрасчетныйОбороты);
		МассивИменВременныхТаблиц.Добавить("ВТ_ХозрасчетныйОбороты");
		
		ТипИтогов = Оборот.Значение.ТипИтогов;
		
		Если ТипИтогов = Перечисления.ТипыИтогов.СальдоДт ИЛИ ТипИтогов = Перечисления.ТипыИтогов.СальдоКт Тогда
			
			МассивТекстовЗапросов.Добавить(ШаблонТипИтоговСальдоДтКт);
			МассивТекстовПодзапросов.Добавить(ПодзапросТипИтоговСальдоДтКт);
			МассивИменВременныхТаблиц.Добавить("ВТ_Сальдо");
			
		КонецЕсли;
		
		Если ТипИтогов = Перечисления.ТипыИтогов.Оборот ИЛИ ТипИтогов = Перечисления.ТипыИтогов.ОборотДт Тогда
			
			МассивТекстовЗапросов.Добавить(ШаблонТипИтоговОборотДт);
			МассивТекстовПодзапросов.Добавить(ПодзапросТипИтоговОборотДт);
			МассивИменВременныхТаблиц.Добавить("ВТ_ОборотыДт");
			МассивТекстовЗапросов.Добавить(ШаблонТипИтоговОборотДтНаДатуЗавершения);
			МассивТекстовПодзапросов.Добавить(ПодзапросТипИтоговОборотДтНаДатуЗавершения);
			МассивИменВременныхТаблиц.Добавить("ВТ_ДебетовыйОборотНаДатуЗавершения");
			
		КонецЕсли;
		
		Если ТипИтогов = Перечисления.ТипыИтогов.Оборот ИЛИ ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
			
			МассивТекстовЗапросов.Добавить(ШаблонТипИтоговОборотКт);
			МассивТекстовПодзапросов.Добавить(ПодзапросТипИтоговОборотКт);
			МассивИменВременныхТаблиц.Добавить("ВТ_ОборотыКт");
			МассивТекстовЗапросов.Добавить(ШаблонТипИтоговОборотКтНаДатуЗавершения);
			МассивТекстовПодзапросов.Добавить(ПодзапросТипИтоговОборотКтНаДатуЗавершения);
			МассивИменВременныхТаблиц.Добавить("ВТ_КредитовыйОборотНаДатуЗавершения");
			
		КонецЕсли;
			
		ТекстЗапросаХозрасчетный    = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		ТекстПодзапросаХозрасчетный = СтрСоединить(МассивТекстовПодзапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
		ТекстУдалениеВременныхТаблиц = "";
		Для каждого ИмяТаблицы Из МассивИменВременныхТаблиц Цикл
			ИмяВременнойТаблицы = СтрШаблон(ИмяТаблицы + "%1", ПорядокЗапроса);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, ИмяТаблицы, ИмяВременнойТаблицы);
			ТекстПодзапросаХозрасчетный = СтрЗаменить(ТекстПодзапросаХозрасчетный, ИмяТаблицы, ИмяВременнойТаблицы);
			МассивИменТаблицКУничтожению.Добавить(ИмяВременнойТаблицы);
		КонецЦикла;
		
		ТекстПодзапросаХозрасчетный = СтрЗаменить(ШаблонВременныеТаблицыИтоговая, "&ТаблицаПодзапроса", "(" + ТекстПодзапросаХозрасчетный + ")");
		
		ТекстЗапросаХозрасчетный = ТекстЗапросаХозрасчетный + ОбщегоНазначения.РазделительПакетаЗапросов()
			+ ТекстПодзапросаХозрасчетный;
		
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "ПараметрКодПоказателя",     КодПоказателя);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "ПараметрГруппаПоказателей1", Правило.ГруппаПоказателей1);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "ПараметрГруппаПоказателей2", Правило.ГруппаПоказателей2);
		
		Параметр = СтрШаблон("Пассивный_%1", КодПоказателя);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&Пассивный", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Правило.Пассивный);
		
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&НаправлениеДеятельности", ГруппировкаНаправлениеДеятельности(ПараметрыОтчета));
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&УсловиеКонтракт", УсловиеКонтракт(ПараметрыОтчета));
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&УсловиеДругиеКонтрактыГОЗ", УсловиеДругиеКонтрактыГОЗ(ПараметрыОтчета));
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&УсловиеИнаяДеятельность", УсловиеИнаяДеятельность(ПараметрыОтчета));
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&УсловиеИзменяетсяПодразделение", УсловиеИнаяДеятельность(ПараметрыОтчета));
		
		ТекстОборот = Шаблон;
		
		ИндексОборота = Правило.Обороты.Индекс(Оборот);
		
		Параметр = СтрШаблон("ИндексОборота_%1_%2", КодПоказателя, ИндексОборота);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ИндексОборота", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, ИндексОборота);
		
		Параметр = СтрШаблон("Множитель_%1_%2", КодПоказателя, ИндексОборота);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&Множитель", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Множитель); 
		
		Параметр = СтрШаблон("ТипИтогов_%1_%2", КодПоказателя, ИндексОборота);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ТипИтогов", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипИтогов); 
		
		Параметр = СтрШаблон("ЗаголовокОборот_%1_%2", КодПоказателя, ИндексОборота);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ЗаголовокОборот", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Представление);
		
		Параметр = СтрШаблон("Счет_%1_%2", КодПоказателя, ИндексОборота);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&Счет", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Счет);
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.Субконто1) Тогда
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборСубконто1", "ИСТИНА // Субконто1");
		Иначе
			Параметр = СтрШаблон("Субконто1_%1_%2", КодПоказателя, ИндексОборота);
			ОтборСубконто1 = СтрШаблон("ХозрасчетныйОбороты.Субконто1 В (&%1)", Параметр);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборСубконто1", ОтборСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Субконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСчет) Тогда
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборКорСчет", "ИСТИНА // КорСчет");
		Иначе
			Параметр = СтрШаблон("КорСчет_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСчет = СтрШаблон("ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.КорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСубконто1) Тогда
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборКорСубконто1", "ИСТИНА // КорСубконто1");
		Иначе
			Параметр = СтрШаблон("КорСубконто1_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСубконто1 = СтрШаблон("ХозрасчетныйОбороты.КорСубконто1 В (&%1)", Параметр);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборКорСубконто1", ОтборКорСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.КорСубконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ИсключаемыйКорСчет) Тогда
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборИсключаемыйКорСчет", "ИСТИНА // КорСчет");
		Иначе
			Параметр = СтрШаблон("ИсключаемыйКорСчет_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСчет = СтрШаблон("НЕ ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборИсключаемыйКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.ИсключаемыйКорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ТипыПлатежейФЗ275) Тогда
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборТипыПлатежейФЗ275", "ИСТИНА // ТипыПлатежейФЗ275");
		Иначе
			Параметр = СтрШаблон("ТипыПлатежейФЗ275_%1_%2", КодПоказателя, ИндексОборота);
			ОтборТипыПлатежейФЗ275 = СтрШаблон("ХозрасчетныйОбороты.ТипПлатежаФЗ275 В (&%1)", Параметр);
			ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборТипыПлатежейФЗ275", ОтборТипыПлатежейФЗ275);  
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипыПлатежейФЗ275);
		КонецЕсли;
		
		ОтборНаправлениеДеятельности = ОтборНаправлениеДеятельности(ПараметрыОтчета, Оборот.Значение.НаправлениеДеятельности);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборНаправлениеДеятельности", ОтборНаправлениеДеятельности);
		
		ОтборКорНаправлениеДеятельности = ОтборКорНаправлениеДеятельности(ПараметрыОтчета, Оборот.Значение.КорНаправлениеДеятельности);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборКорНаправлениеДеятельности", ОтборКорНаправлениеДеятельности);

		ОтборИзменяетсяПодразделение = ОтборИзменяетсяПодразделение(Оборот.Значение.ИзменяетсяПодразделение);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "&ОтборИзменяетсяПодразделение", ОтборИзменяетсяПодразделение);

		ИмяИтоговойВТ = СтрШаблон("ВТ_Итоговая%1", ПорядокЗапроса);
		ТекстЗапросаХозрасчетный = СтрЗаменить(ТекстЗапросаХозрасчетный, "ВТ_Итоговая", ИмяИтоговойВТ);
		
		МассивЗапросовВременныхТаблиц.Добавить(ТекстЗапросаХозрасчетный);
		МассивИменТаблицКУничтожению.Добавить(ИмяИтоговойВТ);
		
		ТекстОборот = СтрЗаменить(ТекстОборот, "ВТ_Итоговая", ИмяИтоговойВТ);

		Параметр = СтрШаблон("ПеренестиОборотВДт_%1", ПорядокЗапроса);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ПеренестиОборотВДт", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ПеренестиОборотВДт);

		Фрагменты.Добавить(ТекстОборот);
		
	КонецЦикла;
	
	ТекстЗапросаХозрасчетныйИтоговый = СтрСоединить(МассивЗапросовВременныхТаблиц, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрСоединить(Фрагменты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Если Фрагменты.Количество() > 0 Тогда
		
		ТекстУдалениеВременныхТаблиц = "";
		Если МассивИменТаблицКУничтожению.Количество() > 0 Тогда
			Для Каждого ИмяТаблицы Из МассивИменТаблицКУничтожению Цикл
				ТекстУдалениеВременныхТаблиц = ТекстУдалениеВременныхТаблиц + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаХозрасчетныйИтоговый + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса
			+ ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстУдалениеВременныхТаблиц;
		
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ГруппировкаНаправлениеДеятельности(ПараметрыОтчета)
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		Возврат "ХозрасчетныйОбороты.НаправлениеДеятельности";
	Иначе
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
КонецФункции

Функция УсловиеКонтракт(ПараметрыОтчета)
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		Возврат "ХозрасчетныйОбороты.КорНаправлениеДеятельности = ХозрасчетныйОбороты.НаправлениеДеятельности";
	Иначе
		Возврат "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельности)";
	КонецЕсли;
КонецФункции

Функция УсловиеДругиеКонтрактыГОЗ(ПараметрыОтчета)
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		Возврат "(ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
		         |И ХозрасчетныйОбороты.КорНаправлениеДеятельности <> ХозрасчетныйОбороты.НаправлениеДеятельности)";
	Иначе
		Возврат "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ)";
	КонецЕсли;
КонецФункции

Функция УсловиеИнаяДеятельность(ПараметрыОтчета)
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		Возврат "ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
		         |                                                     ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
	Иначе
		Возврат "(НЕ ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельности) 
		         |И НЕ ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ))"
	КонецЕсли;
КонецФункции

Функция ОтборНаправлениеДеятельности(ПараметрыОтчета, НаправлениеДеятельности)
	
	Отбор = "ИСТИНА // НаправлениеДеятельности";
	
	Если ПараметрыОтчета.ВариантФормирования <> 3 Тогда
		Если НаправлениеДеятельности = "Контракт" Тогда
			Отбор = "ХозрасчетныйОбороты.НаправлениеДеятельности В (&ОтборНаправленияДеятельности)";
		ИначеЕсли НаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			Отбор = "ХозрасчетныйОбороты.НаправлениеДеятельности В (&ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ)";
		ИначеЕсли НаправлениеДеятельности = "ИнаяДеятельность" Тогда
			Отбор = "ХозрасчетныйОбороты.ТипНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
				    |                                                  ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборКорНаправлениеДеятельности(ПараметрыОтчета, КорНаправлениеДеятельности)
	
	Отбор = "ИСТИНА // КорНаправлениеДеятельности";
	
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		
		Если КорНаправлениеДеятельности = "Контракт" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности = ХозрасчетныйОбороты.НаправлениеДеятельности";
		ИначеЕсли КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			Отбор = "(ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
					|         И ХозрасчетныйОбороты.КорНаправлениеДеятельности <> ХозрасчетныйОбороты.НаправлениеДеятельности)";
		ИначеЕсли КорНаправлениеДеятельности = "ИнаяДеятельность" Тогда
			Отбор = "ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
					|                                                     ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
		КонецЕсли;
	Иначе
		Если КорНаправлениеДеятельности = "Контракт" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельности)";
		ИначеЕсли КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ)";
		ИначеЕсли КорНаправлениеДеятельности = "ИнаяДеятельность" Тогда
			Отбор = "ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
					|                                                     ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборИзменяетсяПодразделение(ИзменяетсяПодразделение)
	
	Отбор = "ИСТИНА // ИзменяетсяПодразделение";
	
	Если ИзменяетсяПодразделение = Неопределено Тогда
		Возврат Отбор;
	КонецЕсли;
	
	Если ИзменяетсяПодразделение = Неопределено Тогда
		Отбор = "ИСТИНА // ИзменяетсяПодразделение";
	ИначеЕсли ИзменяетсяПодразделение Тогда
		Отбор = "ХозрасчетныйОбороты.КорПодразделение <> ХозрасчетныйОбороты.Подразделение";
	Иначе
		Отбор = "ХозрасчетныйОбороты.КорПодразделение = ХозрасчетныйОбороты.Подразделение";
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ЗапрещенныйОборот(Оборот, Значение, Правило)
	
	Если ЗначениеЗаполнено(Значение)
		И Правило.ПоказателиРеглОтчета.НайтиПоЗначению(Оборот) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьСвойстваЯчеек(Область, Правило)
	
	ПоказателиОборотов = СтруктураОборотов();
	Для СтрокаСтрока = 1 По Область.ПолучитьРазмерОбластиДанныхПоВертикали() Цикл
		Для КолонкаОбласти = 1 По Область.ПолучитьРазмерОбластиДанныхПоГоризонтали() Цикл
			ТекущаяОбласть = Область.Область(СтрокаСтрока, КолонкаОбласти, СтрокаСтрока, КолонкаОбласти);
			Если ТекущаяОбласть.Параметр <> Неопределено И ПоказателиОборотов.Свойство(ТекущаяОбласть.Параметр) Тогда
				Если ЗапрещенныйОборот(ТекущаяОбласть.Параметр, Область.Параметры[ТекущаяОбласть.Параметр], Правило) Тогда
					ТекущаяОбласть.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПривестиРесурсыКФорматуВывода(Ресурсы, ПараметрыОтчета)
	
	Если ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.ВМиллионах Тогда
		Знаменатель = 1000000;
	ИначеЕсли ПараметрыОтчета.ПредставлениеСумм = Перечисления.ВидыПредставленияЧисел.ВТысячах Тогда
		Знаменатель = 1000;
	Иначе
		Знаменатель = 1;
	КонецЕсли;
	
	Для каждого Ресурс Из Ресурсы Цикл
		Ресурсы[Ресурс.Ключ] = Ресурс.Значение / Знаменатель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРеглОтчета(Правило, ПоказателиРеглОтчета)
	
	МассивПоказателей = СтрРазделить(ПоказателиРеглОтчета, ",");
	Для каждого Элемент Из МассивПоказателей Цикл
		Показатель = СокрЛП(Элемент);
		Колонка = Прав(Показатель, 1);
		Если Колонка = "1" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ЦелевоеЗначение", Показатель);
		ИначеЕсли Колонка = "2" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ВыполнениеНаТекущуюДату", Показатель);
		ИначеЕсли Колонка = "3" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("СальдоНаТекущуюДату", Показатель);
		ИначеЕсли Колонка = "4" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотДт_НД", Показатель);
		ИначеЕсли Колонка = "5" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотДт_ГОЗ", Показатель);
		ИначеЕсли Колонка = "6" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотДт_Ввод", Показатель);
		ИначеЕсли Колонка = "7" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотКт_НД", Показатель);
		ИначеЕсли Колонка = "8" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотКт_ГОЗ", Показатель);
		ИначеЕсли Колонка = "9" Тогда
			Правило.ПоказателиРеглОтчета.Добавить("ОборотКт_Вывод", Показатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область СчетаУчетаФинансированиеКонтракта

Функция СчетаУчетаРасчетыСКлиентами()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаКредитыИЗаймы()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал);
	
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаПроцентыПоКредитамИЗаймам()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
	
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаЗадолженностьПередПоставщиками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СчетаУчетаДенежныхСредств

Функция СчетаУчетаДенеженыеСредстваНаСчетах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета))
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаДепозиты()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаАвансыВыданныеПоставщикам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И Хозрасчетный.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаДенежныхСредстваВПути()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СчетаУчетаЗапасы

Функция СчетаУчетаМатериалыНаСкадах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|	И (Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|		И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ))
	|	И (Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|		И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов)
	|
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
	
КонецФункции

Функция СчетаУчетаНДСВходящий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаПолуфабрикатыНаСкладах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Полуфабрикаты))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаМатериалыВПереработчике()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
	|	И (Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|		И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;

КонецФункции

Функция СчетаУчетаДопРасходыМатериалы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДопРасходыМатериалы))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;

КонецФункции

Функция СчетаУчетаРасходыБудущихПериодов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;

КонецФункции

Функция СчетаУчетаСредстваПроизводства()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Производство

Функция СчетаУчетаПроизводство()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбслуживающиеПроизводства))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаРасчетыПоОплатеТруда()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаГотоваяПродукция()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|	И (Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|		И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеТоваров)
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаОбщепроизводственныеЗатраты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаОбщехозяйственныеЗатраты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
КонецФункции

Функция КорСчетаУчетаПрочихПроизводственныхЗатрат()
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаРезервовОтпусков()
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Продажи

Функция СчетаУчетаНДССПродаж()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаРасчетовПоНДС()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДС);
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаКоммерческиеРасходы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаПродажу))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;

КонецФункции

Функция СчетаУчетаУправленческихРасходов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходы))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат

КонецФункции

Функция СчетаУчетаВыручкаОтПродаж()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаСебестоимостьПродаж()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаПрочиеРасходы()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаПрочиеДоходы()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Возврат Результат
	
КонецФункции

Функция СчетаУчетаНДССАвансовПоставщикам()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
	
	Возврат Результат;
	
КонецФункции

Функция СчетаУчетаНДССАвансовКлиентам()
	
	Результат = Новый Массив;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли