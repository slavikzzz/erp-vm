&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Настройки по-умолчанию
	УстановитьНачальныеНастройки();
	
	Параметры.Свойство("РежимРасшифровки", РежимРасшифровки);
	Если РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПатентаНаСервере();

	БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузкиБП(ЭтотОбъект);
	УстановитьАктивностьКнопокКоманднойПанели(ЭтотОбъект);

	Результат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб			= Истина;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Параметры.Свойство("ОткрытьРасшифровку") Тогда    
		АвтоОтображениеСостояния = РежимАвтоОтображенияСостояния.НеОтображать;
		ТекстовыйДокумент        = ПолучитьИзВременногоХранилища(Параметры.АдресРасшифровки);
		Результат.Вывести(ТекстовыйДокумент);  
		Элементы.Результат.ОтображениеСостояния.Видимость = ложь; 
        Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Или РежимРасшифровки Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отчет.Организация) Тогда
		ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Отчет.Организация = ?(ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			ОрганизацияПоУмолчанию, Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПатентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если РежимРасшифровки Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы,
		ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПечатныхФорм

&НаКлиенте
Процедура НастройкиПечатныхФормПриАктивизацииСтроки(Элемент)
	
	НастройкаПечатнойФормы = ТекущаяНастройкаПечатнойФормы();
	
	Если НастройкаПечатнойФормы <> Неопределено Тогда
		ПоказатьВыбранныйЛист(НастройкаПечатнойФормы.ИндексЛиста);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПечатныхФормПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	ПатентПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	
	РучнаяКорректировка = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультат

&НаКлиенте
Процедура Подключаемый_ПечатнаяФормаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокДействий = Новый СписокЗначений;
		
		Если ТипЗнч(Расшифровка.Регистратор) = Тип("ДокументСсылка.ЗаписьКУДиР") Тогда
			СписокДействий.Добавить("СторноОткрыть", НСтр("ru = 'Редактировать запись КУДиР';
															|en = 'Edit LIE entry'"));
		Иначе
			СписокДействий.Добавить("Сторно", НСтр("ru = 'Сторнировать текущую запись';
													|en = 'Reverse the current entry'"));
		КонецЕсли;
		
		СписокДействий.Добавить("ОткрытьДокументВозникновенияДоходовРасходов", НСтр("ru = 'Открыть документ возникновения доходов';
																					|en = 'Open expense incurrence document'"));
		
		Если ТипЗнч(Расшифровка.Регистратор) <> Тип("ДокументСсылка.ЗаписьКУДиР")
			И Расшифровка.Регистратор <> Расшифровка.ДокументВозникновенияДоходовРасходов Тогда
			СписокДействий.Добавить("ОткрытьДокумент", НСтр("ru = 'Открыть документ сторно дохода';
															|en = 'Open storno income document'"));
		КонецЕсли;
		
		ОповещениеОВыбореДействия = Новый ОписаниеОповещения("ВыборДействияРасшифровкиЗавершение", ЭтотОбъект, Расшифровка);
		ПоказатьВыборИзМеню(ОповещениеОВыбореДействия, СписокДействий, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Элементы.Результат.ОтображениеСостояния.Видимость Тогда
		
		ТекущийЭлемент = Элементы.СформироватьОтчет;
		ПоказатьПредупреждение( , НСтр("ru = 'Нажмите ""Сформировать"" для получения отчета';
										|en = 'Click ""Generate"" to get the report'"),
								, НСтр("ru = 'Отчет не сформирован';
										|en = 'Report is not generated'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтчета = ЗаполнитьПараметрыОтчетаНаСервере();
	
	ПараметрыОтчета.Вставить("РучнаяКорректировка", РучнаяКорректировка);
	ПараметрыОтчета.Вставить("РучнаяНастройка", Ложь); // нет параметров для тонкой настройки
	
	Закрыть(ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Функция ТекущаяНастройкаПечатнойФормы()
	
	ТекущиеДанные = Элементы.НастройкиПечатныхФорм.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено И НастройкиПечатныхФорм.Количество() > 0 Тогда
		ТекущиеДанные = НастройкиПечатныхФорм[0];
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервере
Функция ТабличныеДокументыДляПечати()
	
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		ПечатнаяФорма = Отчет.СписокСформированныхЛистов.Получить(НастройкаПечатнойФормы.ИндексЛиста).Значение;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ПечатнаяФорма);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, СвойстваЗаполненияТабличногоДокумента());
		ТабличныйДокумент.КоличествоЭкземпляров = 1;
		ТабличныеДокументы.Добавить(ТабличныйДокумент, НастройкаПечатнойФормы.Представление);
	КонецЦикла;
	
	Возврат ТабличныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваЗаполненияТабличногоДокумента()
	
	МассивСвойств = Новый Массив;
	
	МассивСвойств.Добавить("АвтоМасштаб");
	МассивСвойств.Добавить("Вывод");
	МассивСвойств.Добавить("ВысотаСтраницы");
	МассивСвойств.Добавить("ДвусторонняяПечать");
	МассивСвойств.Добавить("Защита");
	МассивСвойств.Добавить("ИмяПринтера");
	МассивСвойств.Добавить("КодЯзыкаМакета");
	МассивСвойств.Добавить("КоличествоЭкземпляров");
	МассивСвойств.Добавить("МасштабПечати");
	МассивСвойств.Добавить("ОриентацияСтраницы");
	МассивСвойств.Добавить("ПолеСверху");
	МассивСвойств.Добавить("ПолеСлева");
	МассивСвойств.Добавить("ПолеСнизу");
	МассивСвойств.Добавить("ПолеСправа");
	МассивСвойств.Добавить("РазборПоКопиям");
	МассивСвойств.Добавить("РазмерКолонтитулаСверху");
	МассивСвойств.Добавить("РазмерКолонтитулаСнизу");
	МассивСвойств.Добавить("РазмерСтраницы");
	МассивСвойств.Добавить("ТочностьПечати");
	МассивСвойств.Добавить("ЧерноБелаяПечать");
	МассивСвойств.Добавить("ШиринаСтраницы");
	МассивСвойств.Добавить("ЭкземпляровНаСтранице");
	
	Возврат СтрСоединить(МассивСвойств, ",");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ПустыеПараметрыКомпоновкиОтчета();
	Отчеты.КнигаУчетаДоходовПатент.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, ЭтотОбъект);
	
	ВозвращаемыеПараметры = ЗаполнениеФинОтчетностиВБанки.ПодготовитьДвоичныеДанныеПакетаОтображаемыхДокументов(
		ПараметрыОтчета);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемыеПараметры, ПараметрыОтчета, Истина);
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	Перем ОтказПроверкиЗаполнения;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения", ОтказПроверкиЗаполнения);
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	КонецЕсли;
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ТабличныеДокументы = ТабличныеДокументыДляПечати();
	
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(
		ТабличныеДокументы, Новый СписокЗначений, ТабличныеДокументы.Количество() > 1);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеНастройки()
	
	Если Не Параметры.Свойство("Организация", Отчет.Организация) Или Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		// Настройки по-умолчанию
		ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Отчет.Организация = ?(
			ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			ОрганизацияПоУмолчанию,
			Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Если Параметры.Свойство("Патент", Отчет.Патент) И ЗначениеЗаполнено(Отчет.Патент) Тогда
		УстановитьПериодНаСервере();
	ИначеЕсли Параметры.Свойство("НачалоПериода")
	   И ЗначениеЗаполнено(Параметры.НачалоПериода) И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Отчет.НачалоПериода = НачалоДня(Параметры.НачалоПериода);
		Отчет.КонецПериода  = КонецДня(Параметры.КонецПериода);
	Иначе
		ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		Отчет.НачалоПериода = НачалоГода(ТекущаяДата);
		Отчет.КонецПериода  = КонецГода(ТекущаяДата);
	КонецЕсли;
	
	Параметры.Свойство("Расширение", Расширение);
	Параметры.Свойство("ТипФайла", ТипФайла);  
	
	Элементы.НастройкиПечатныхФорм.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Книга доходов по патенту';
							|en = 'Patent income ledger'");
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + Отчет.Патент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " "
			+ БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПатентПриИзмененииНаСервере()
	
	УстановитьПериодНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()
	
	ВсеПатенты = Справочники.Патенты.ПолучитьПатентыПоОрганизации(Отчет.Организация);
	Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(ВсеПатенты);
	
	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеПатенты.Количество() = 1 Тогда
		Отчет.Патент = ВсеПатенты[0];
	Иначе
		Если ВсеПатенты.Найти(Отчет.Патент) = Неопределено Тогда
			Отчет.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПериодНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
		
	Элементы.НастройкиПечатныхФорм.Видимость = Форма.НастройкиПечатныхФорм.Количество() > 0;
	
	ОбновитьТекстЗаголовка(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодНаСервере()

	Если ЗначениеЗаполнено(Отчет.Патент) Тогда
		СвойстваПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отчет.Патент, "ДатаНачала, ДатаОкончания");
		Отчет.НачалоПериода = НачалоДня(СвойстваПатента.ДатаНачала);
		Отчет.КонецПериода  = КонецДня(СвойстваПатента.ДатаОкончания);
	Иначе
		Отчет.НачалоПериода = '00010101';
		Отчет.КонецПериода  = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.НачалоПериода = РезультатВыбора.НачалоПериода;
	Отчет.КонецПериода  = РезультатВыбора.КонецПериода;
	
	ПериодПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении()
	
	Отчет.НачалоПериода = НачалоДня(Отчет.НачалоПериода);
	Отчет.КонецПериода = КонецДня(Отчет.КонецПериода);
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура("Организация, Патент, НачалоПериода, КонецПериода, СписокСформированныхЛистов");
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Отчет);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КнигаУчетаДоходовПатент.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.КнигаУчетаДоходовПатент.СформироватьОтчет", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
  
	НачальноеЗаполнение = НастройкиПечатныхФорм.Количество() = 0;
	Если Не НачальноеЗаполнение Тогда
		СтрокаКоллекции = НастройкиПечатныхФорм.НайтиПоИдентификатору(Элементы.НастройкиПечатныхФорм.ТекущаяСтрока);
		ИндексСтрокиКоллекции = НастройкиПечатныхФорм.Индекс(СтрокаКоллекции);
	КонецЕсли;
	
	НастройкиПечатныхФорм.Очистить();
	
	Отчет.СписокСформированныхЛистов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	КоличествоЛистов = Отчет.СписокСформированныхЛистов.Количество();
	Для ИндексПечатнойФормы = 0 По КоличествоЛистов - 1 Цикл
		
		ОписаниеПечатнойФормы = Отчет.СписокСформированныхЛистов[ИндексПечатнойФормы];
    
		НоваяНастройкаПечатнойФормы = НастройкиПечатныхФорм.Добавить();
		НоваяНастройкаПечатнойФормы.Представление = ОписаниеПечатнойФормы.Представление;
		НоваяНастройкаПечатнойФормы.ИндексЛиста   = ИндексПечатнойФормы;
  		
	КонецЦикла;
	
	Если Не НачальноеЗаполнение Тогда
		СтрокаКоллекции = НастройкиПечатныхФорм.Получить(ИндексСтрокиКоллекции);
		Элементы.НастройкиПечатныхФорм.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	Элементы.Результат.УстановитьДействие("ОбработкаРасшифровки", "Подключаемый_ПечатнаяФормаОбработкаРасшифровки");
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВыбранныйЛист(ИндексЛиста)
	
	Результат.Очистить();
	
	СформированныйЛист = Отчет.СписокСформированныхЛистов.Получить(ИндексЛиста).Значение;
	Результат.Вывести(СформированныйЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

#Область ДополнительныеМетоды

// Настраивает кнопки командной панели.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - на командной панели которой есть кнопка ПредварительныйПросмотр.
//
&НаСервереБезКонтекста
Процедура УстановитьАктивностьКнопокКоманднойПанели(Форма)

	Если Не ПравоДоступа("Вывод", Метаданные) Тогда
		// Делает неактивной кнопку "Сохранить", если пользователю не разрешен вывод.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "Сохранить", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "СохранитьВсеДействия", "Доступность", Ложь);

	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		// Скрывает кнопку "Предварительный просмотр" при работе через браузер, т.к. она работает также как "Печать".
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПредварительныйПросмотр", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПредварительныйПросмотрВсеДействия", "Видимость", Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияРасшифровкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Сторно" Тогда
		
		ДанныеДляЗаполнения = Новый Структура("Организация", Отчет.Организация);
		МассивСторно = СторноКУДиРПоТекущимЗаписямДокумента(
			Отчет.Патент,
			Отчет.НачалоПериода,
			Отчет.КонецПериода,
			ДополнительныеПараметры);
		Если МассивСторно.Количество() Тогда
			ДанныеДляЗаполнения.Вставить("Дата", МассивСторно.Получить(0).Период);
			ДанныеДляЗаполнения.Вставить("Строки", МассивСторно);
			
			ПараметрыЗаписи = Новый Структура("Основание", ДанныеДляЗаполнения);
			
			ОткрытьФорму("Документ.ЗаписьКУДиР.ФормаОбъекта", ПараметрыЗаписи, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОткрытьДокументВозникновенияДоходовРасходов" Тогда
		
		ПоказатьЗначение(, ДополнительныеПараметры.ДокументВозникновенияДоходовРасходов);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОткрытьДокумент" Тогда  
		
		Если ДополнительныеПараметры.Регистратор.Количество()=1 Тогда
			
			 ПоказатьЗначение(, ДополнительныеПараметры.Регистратор[0].Документ);
			
		Иначе  
			
			 ТабличныйДокумент = СформироватьРасшифровкуПоДокументамСписанияРасхода(ДополнительныеПараметры.Регистратор);
			 Адрес             = ПоместитьВоВременноеХранилище(ТабличныйДокумент,  ЭтотОбъект.УникальныйИдентификатор);  
			 ПараметрыФормы    = БухгалтерскиеОтчетыКлиентСервер.НовыйПараметрыФормыСтандартногоОтчета();
			
			 ПараметрыФормы.ОткрытьРасшифровку = Истина;
			 ПараметрыФормы.АдресРасшифровки   = Адрес;
				
			 ОткрытьФорму("Отчет.КнигаУчетаДоходовПатент.Форма", ПараметрыФормы, , Истина); 
			 
		КонецЕсли;	 
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "СторноОткрыть"  Тогда 
		
		ПоказатьЗначение(, ДополнительныеПараметры.Регистратор); 
		
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
функция СформироватьРасшифровкуПоДокументамСписанияРасхода(МассивДокументов) 
	
   Возврат Отчеты.КнигаУчетаДоходовПатент.СформироватьРасшифровкуПоДокументамСписанияРасхода(МассивДокументов);
	
КонецФункции

&НаСервереБезКонтекста
Функция СторноКУДиРПоТекущимЗаписямДокумента(Патент, НачалоПериода, КонецПериода, ДополнительныеПараметры)
	
	ДополнительныеПараметрыСторнирования = Новый Структура;
	
	Если ДополнительныеПараметры.Свойство("ДокументВозникновенияДоходовРасходов") Тогда
		ДополнительныеПараметрыСторнирования.Вставить("ДокументВозникновенияДоходовРасходов", ДополнительныеПараметры.ДокументВозникновенияДоходовРасходов);
	КонецЕсли;
	
	ДополнительныеПараметрыСторнирования.Вставить("Патент", Патент);
	
	ПериодЗаписей = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	
	Возврат УчетУСНПСНСервер.СторноЗаписейКУДиРЗаПериод(ПериодЗаписей, ДополнительныеПараметрыСторнирования);
	
КонецФункции

#КонецОбласти

#КонецОбласти
