#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);

	ТекстСообщения = НСтр("ru = 'Отчет не поддерживает получение данных до даты начала учета внеоборотных активов версии 2.4 - %1';
							|en = 'Report does not support data retrieval prior to the commencement date of accounting of fixed assets 2.4 -%1'");

	ПроверяемаяДата = НастройкиОсновнойСхемы.ПараметрыДанных.Элементы.Найти("Период");
	
	Если Не ЗначениеЗаполнено(ПроверяемаяДата.Значение.Дата) Тогда
		ПроверяемаяДата.Значение.Дата = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	ВнеоборотныеАктивыСлужебный.ПроверитьПериодОтчетаВерсии24(ПроверяемаяДата.Значение.Дата,
																ПроверяемаяДата.Значение.Дата,
																ТекстСообщения,
																Отказ);

	Если НЕ ЗначенияОтбораДанных.ПоказатьРасчетБУ
		И НЕ ЗначенияОтбораДанных.ПоказатьРасчетУУ Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать какие данные нужно получить: БУ, УУ.';
								|en = 'Select which data you need to get: AC, MA.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;

КонецПроцедуры


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();

	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);

	УстановитьПараметрыОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы);
	
	НастроитьОтображаемыеПоказателиОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Неопределено, ДанныеРасшифровки, Истина);

	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);

	ДобавитьИнформационноеСообщениеВШапку(ДокументРезультат, ЗначенияОтбораДанных);
	
	ОформитьШапкуОтчета(ДокументРезультат);

КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - Форма отчета.
// КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
// Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;

КонецПроцедуры


// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
// ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета:
// 	 * Параметры - Структура - может содержать свойства:
//				** ПараметрКоманды -
//				** ОписаниеКоманды - Структура -
// Отказ - Булево - Передается из параметров обработчика "как есть".
// СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
// "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс - помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт

	Параметры = ЭтаФорма.Параметры;

	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда

		ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;
		Параметры.КлючНазначенияИспользования = Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды;

	КонецЕсли;

КонецПроцедуры


// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - Форма отчета.
// НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. синтакс - помощник "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс - помощнике.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт

	Отчет = Форма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных -

	УстановитьПериодОтчета(Форма, КомпоновщикНастроекФормы);

	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НастроитьОтображаемыеПоказателиОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы)

	// Рекурсивно устанавливаем видимость колонок БУ, УУ в зависимости от значения параметров.
	Для Каждого ТаблицаКомпоновки Из НастройкиОсновнойСхемы.Структура Цикл
		
		Если ТаблицаКомпоновки.Имя = "Расшифровка" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаКомпоновки.Колонки Цикл
			Для Каждого ДанныеКолонки Из Колонка.Выбор.Элементы Цикл
				Для Каждого ЭлементДанныхКолонки Из ДанныеКолонки.Элементы Цикл
					
					Если ЭлементДанныхКолонки.Заголовок = НСтр("ru = 'БУ';
																|en = 'AC'") Тогда
						ЭлементДанныхКолонки.Использование = ЗначенияОтбораДанных.ПоказатьРасчетБУ;
					ИначеЕсли ЭлементДанныхКолонки.Заголовок = НСтр("ru = 'УУ';
																	|en = 'MA'") Тогда
						ЭлементДанныхКолонки.Использование = ЗначенияОтбораДанных.ПоказатьРасчетУУ;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОформитьШапкуОтчета(ТабДок)
	
	СписокГруппЯчеек = Новый Массив;
	
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Показатели';
									|en = 'Indicators'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Балансовая стоимость с учетом обесценения';
									|en = 'Book value including impairment'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Накопленная амортизация';
									|en = 'Accumulated depreciation'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Накопленная корректировка обесценения';
									|en = 'Accumulated impairment adjustment'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Обесценение, доступное для восстановления';
									|en = 'Impairment available for reversal'"));
	СписокГруппЯчеек.Добавить(НСтр("ru = 'Обесценение';
									|en = 'Impairment'"));

	
	СписокПодчиненныхЯчеек = Новый Массив;
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'БУ';
										|en = 'AC'"));
	СписокПодчиненныхЯчеек.Добавить(НСтр("ru = 'УУ';
										|en = 'MA'"));
	
	ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек);
	
КонецПроцедуры

Функция ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы)

	ЭлементыОтбора = НастройкиОсновнойСхемы.Отбор.Элементы;

	ЗначенияОтбораДанных = Новый Структура;

	ЗначенияОтбораДанных.Вставить("СписокОрганизаций", ОтчетыУТСервер.ЗначениеОтбора("Организация", ЭлементыОтбора));
	
	Если ЗначенияОтбораДанных.СписокОрганизаций.Количество() = 0 Тогда
		ЗначенияОтбораДанных.СписокОрганизаций = ВнеоборотныеАктивыСлужебный.СписокРазрешенныхОрганизаций();
	КонецЕсли;

	ЗначенияОтбораДанных.Вставить("СписокВНА", ОтчетыУТСервер.ЗначениеОтбора("ВнеоборотныйАктив", ЭлементыОтбора));

	ПоказатьРасчетБУ = ОтчетыУТСервер.ЗначениеПараметра(НастройкиОсновнойСхемы, "ПоказатьРасчетБУ", Ложь);
	ПоказатьРасчетУУ = ОтчетыУТСервер.ЗначениеПараметра(НастройкиОсновнойСхемы, "ПоказатьРасчетУУ", Ложь);

	ЗначенияОтбораДанных.Вставить("ПоказатьРасчетБУ", ПоказатьРасчетБУ);
	ЗначенияОтбораДанных.Вставить("ПоказатьРасчетУУ", ПоказатьРасчетУУ);
	
	
	
	ЗначенияОтбораДанных.Вставить("Период", НастройкиОсновнойСхемы.ПараметрыДанных.Элементы.Найти("Период").Значение);

	Возврат ЗначенияОтбораДанных;

КонецФункции


Процедура УстановитьПараметрыОтчета(ЗначенияОтбораДанных, НастройкиОсновнойСхемы)

	Период = Дата(1,1,1);

	Если ТипЗнч(ЗначенияОтбораДанных.Период) = Тип("СтандартнаяДатаНачала") Тогда
		Период = ЗначенияОтбораДанных.Период.Дата;
	КонецЕсли;
	
	Если Период = Дата(1,1,1) Тогда
		Период = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли; 
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, "Период", Период);

	ХозОперацииНачисленияОбесценения = Новый Массив;
	ХозОперацииНачисленияОбесценения.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВводОстатковОбесцененияОС);
	ХозОперацииНачисленияОбесценения.Добавить(Справочники.НастройкиХозяйственныхОпераций.ВводОстатковОбесцененияНМА);
	ХозОперацииНачисленияОбесценения.Добавить(Справочники.НастройкиХозяйственныхОпераций.ОбесценениеОС);
	ХозОперацииНачисленияОбесценения.Добавить(Справочники.НастройкиХозяйственныхОпераций.ОбесценениеНМА);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(	НастройкиОсновнойСхемы, 
														"НастройкиХозяйственнойОперацииНачислениеОбесценения", 
														ХозОперацииНачисленияОбесценения);


КонецПроцедуры


Процедура УстановитьПериодОтчета(Форма, КомпоновщикНастроекФормы)
	Возврат;
КонецПроцедуры


Процедура ДобавитьИнформационноеСообщениеВШапку(ТабДок, ЗначенияОтбораДанных)

	СписокПроблем = Новый Массив;

	ПроверитьАктуальностьРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем);

	Если СписокПроблем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СписокПроблем = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокПроблем);

	ТекстСообщения = СтрСоединить(СписокПроблем, Символы.ПС);

	ТабДок.Область("R1C1").Текст = ТекстСообщения;
	ТабДок.Область("R1C1").ЦветТекста = Метаданные.ЭлементыСтиля.ЦветТекстаПроблема.Значение;
	ТабДок.Область(1, 1, 1, ).ВысотаСтроки = 0;

КонецПроцедуры


Процедура ПроверитьАктуальностьРасчетаАмортизации(ЗначенияОтбораДанных, СписокПроблем)

	РегистрыСведений.ПакетыАмортизацииНМА.СоздатьПакетыАмортизации(ЗначенияОтбораДанных.СписокОрганизаций);

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументАмортизация.Организация КАК Организация
	|ИЗ
	|	Документ.АмортизацияОС2_4 КАК ДокументАмортизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК ЗаданияКРасчету
	|		ПО (ЗаданияКРасчету.Организация = ДокументАмортизация.Организация)
	|		И (ЗаданияКРасчету.Месяц <= ДокументАмортизация.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизацииОС
	|		ПО ПакетыАмортизацииОС.Организация = ЗаданияКРасчету.Организация
	|		И ПакетыАмортизацииОС.НомерПакета = ЗаданияКРасчету.НомерПакета
	|		И &ОтборПоСпискуВНА
	|ГДЕ
	|	ДокументАмортизация.Организация В (&СписокОрганизаций)
	|	И (НЕ &ОтборПоСпискуВНА
	|	ИЛИ ПакетыАмортизацииОС.ОсновноеСредство В (&СписокВНА))
	|	И ДокументАмортизация.Проведен
	|	И (ДокументАмортизация.Дата >= &НачалоПериода
	|	ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ДокументАмортизация.Дата <= &ОкончаниеПериода
	|	ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументАмортизация.Организация КАК Организация
	|ИЗ
	|	Документ.АмортизацияНМА2_4 КАК ДокументАмортизация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК ЗаданияКРасчету
	|		ПО ЗаданияКРасчету.Организация = ДокументАмортизация.Организация
	|		И ЗаданияКРасчету.Месяц <= ДокументАмортизация.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизацииНМА
	|		ПО ПакетыАмортизацииНМА.Организация = ЗаданияКРасчету.Организация
	|		И ПакетыАмортизацииНМА.НомерПакета = ЗаданияКРасчету.НомерПакета
	|		И &ОтборПоСпискуВНА
	|ГДЕ
	|	ДокументАмортизация.Организация В (&СписокОрганизаций)
	|	И (НЕ &ОтборПоСпискуВНА
	|	ИЛИ ПакетыАмортизацииНМА.НематериальныйАктив В (&СписокВНА))
	|	И ДокументАмортизация.Проведен
	|	И (ДокументАмортизация.Дата >= &НачалоПериода
	|	ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
	|	И (ДокументАмортизация.Дата <= &ОкончаниеПериода
	|	ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.Период.Дата);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.Период.Дата);
	Запрос.УстановитьПараметр("СписокВНА", ЗначенияОтбораДанных.СписокВНА);
	Запрос.УстановитьПараметр("ОтборПоСпискуВНА", ЗначениеЗаполнено(ЗначенияОтбораДанных.СписокВНА));

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	СписокПроблем.Добавить(НСтр("ru = 'Расчет амортизации не актуален:';
								|en = 'Depreciation calculation is not relevant:'"));

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = " - " + НСтр("ru = 'для организации ""%1"" необходимо выполнить закрытие месяца';
										|en = 'for the company ""%1"" you must perform a month-end closing'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Организация);
		СписокПроблем.Добавить(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Объединяет в отчете подчиненные ячейки.
//
// Параметры:
//  ТабДок					 - ТабличныйДокумент - Табличный документ отчета.
//  СписокГруппЯчеек		 - Массив			 - Список групп ячеек.
//  СписокПодчиненныхЯчеек	 - Массив			 - Список ячеек, которые будут объединены с группой ячеек.
//
Процедура ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек) Экспорт
	
	ШапкаНайдена = Ложь;
	
	КоличествоГруппОбъединяемыхЯчеек = СписокГруппЯчеек.Количество();
	КоличествоОбъединяемыхЯчеек      = СписокПодчиненныхЯчеек.Количество();
		
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для КолонкаНачалаШапки = 1 По ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = ТабДок.Область(индСтр, КолонкаНачалаШапки);
			ШапкаНайдена = СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено;
			Если ШапкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		Если ШапкаНайдена Тогда
			
			Для индКол = КолонкаНачалаШапки По ТабДок.ШиринаТаблицы Цикл
				
				Смещение = 0;
				
				Для Сч = 0 По КоличествоГруппОбъединяемыхЯчеек Цикл
					
					ОбластьЯчейки = ТабДок.Область(индСтр + Сч, индКол);
					
					Если СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено Тогда
						Прервать; // Нашли группу с подчиненными ячейками.
					КонецЕсли;
					
					Смещение = Смещение + 1;
					
				КонецЦикла;
				
				// Обработка подчиненных ячеек группы.
				ОбластьЯчейки = ТабДок.Область(
									индСтр + Смещение, 
									индКол, 
									индСтр + Смещение, 
									индКол); // Ячейка группы. 
									
				ТекстЗаголовка = ОбластьЯчейки.Текст; // Текст ячейки группы.
				
				ВысотаШапки = 0;
				Для Индекс = 1 По КоличествоОбъединяемыхЯчеек Цикл
					
					ОбластьЯчейки = ТабДок.Область(
											индСтр+Индекс+Смещение, 
											индКол, 
											индСтр+Индекс+Смещение, 
											индКол);
											
					СледующаяЯчейка = ОбластьЯчейки.Текст; // Текст подчиненной ячейки
					
					Если СписокПодчиненныхЯчеек.Найти(СледующаяЯчейка) = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ВысотаШапки = ВысотаШапки + 1;
					
				КонецЦикла;
				
				ОбъединяемаяОбласть = ТабДок.Область(индСтр+Смещение, индКол, индСтр + ВысотаШапки + Смещение, индКол);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
			КонецЦикла; 
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
