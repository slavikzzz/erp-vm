#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СправкаОДоходахДетямСиротам");
	НастройкиВарианта.Описание = НСтр("ru = 'Справка о фактически начисленной сумме заработной платы для назначения ежемесячной доплаты детям-сиротам, детям, оставшимся без попечения родителей, лицам из числа детей-сирот и детей, оставшихся без попечения родителей';
										|en = 'Statement of the actually accrued salary to assign a monthly supplement to orphans, children left without parental care, persons from among orphans and children left without parental care'");
	НастройкиВарианта.Включен = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКомандуПечати(КомандыПечати, ИдентификаторыПФ = Неопределено) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПечатнаяФормаСправкаОДоходахДетямСиротамДляНазначенияДоплаты) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаСправкаОДоходахДетямСиротамДляНазначенияДоплаты";
		КомандаПечати.Идентификатор = ИдентификаторПечатнойФормыПФ_MXL_СправкаОДоходахДетямСиротамДляНазначенияДоплаты();
		КомандаПечати.Представление = НСтр("ru = 'Справка о доходах для доплаты детям-сиротам';
											|en = 'Income statement for supplement to orphans'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
		
		Если ИдентификаторыПФ <> Неопределено Тогда
			ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторПечатнойФормыПФ_MXL_СправкаОДоходахДетямСиротамДляНазначенияДоплаты()
	Возврат "ПФ_MXL_СправкаОДоходахДетямСиротамДляНазначенияДоплаты";
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Если СписокСотрудников <> Неопределено Тогда
		
		СписокОтборов = Новый Массив;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			СписокОтборов, "Работа.Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, СписокСотрудников);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Отбор", СписокОтборов);
		
	Иначе
		ДополнительныеПараметры = Неопределено;
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ВывестиВКоллекциюПечатнуюФорму("Отчет.ПечатнаяФормаСправкаОДоходахДетямСиротамДляНазначенияДоплаты",
		МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ВнешниеНаборыДанных(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура Сформировать(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Если РезультатКомпоновки.ОтчетПустой Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОтчета = Отчеты.ПечатнаяФормаСправкаОДоходахДетямСиротамДляНазначенияДоплаты.Создать();
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗарплатаКадрыОтчеты.ЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, ОбъектОтчета, РезультатКомпоновки.КлючВарианта);
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОДоходахДетямСиротамДляНазначенияДоплаты";
	
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	КадровыеДанные = Новый ТаблицаЗначений;
	КадровыеДанные.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеДанные.Колонки.Добавить("ДатаПриема", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ПриказОбУвольнении", Документы.ТипВсеСсылки());
	КадровыеДанные.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	
	СуммированныйУчетРабочегоВремениИспользуется =
		РезультатКомпоновки.ДанныеОтчета.Колонки.Найти("РаботаГрафикРаботыСуммированныйУчетРабочегоВремени") <> Неопределено;
		
	ДатаСправки = Неопределено;
	ЕдинственнаяГоловнаяОрганизация = Неопределено;
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ПараметрыДанныхДатаСправки) Тогда
				ДатаСправки = ДанныеДетальныхЗаписей.ПараметрыДанныхДатаСправки;
			КонецЕсли;
			
			НоваяСтрока = КадровыеДанные.Добавить();
			
			Если ДанныеДетальныхЗаписей.Владелец().Колонки.Найти("РаботаСотрудникГоловнаяОрганизация") <> Неопределено Тогда
				НоваяСтрока.ГоловнаяОрганизация = ДанныеДетальныхЗаписей.РаботаСотрудникГоловнаяОрганизация;
			Иначе
				Если ЕдинственнаяГоловнаяОрганизация = Неопределено Тогда
					ЕдинственнаяГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДетальныхЗаписей.РаботаСотрудник, "ГоловнаяОрганизация");
				КонецЕсли;
				НоваяСтрока.ГоловнаяОрганизация = ЕдинственнаяГоловнаяОрганизация;
			КонецЕсли;
			
			НоваяСтрока.Сотрудник = ДанныеДетальныхЗаписей.РаботаСотрудник;
			Если СуммированныйУчетРабочегоВремениИспользуется Тогда
				НоваяСтрока.СуммированныйУчетРабочегоВремени = ДанныеДетальныхЗаписей.РаботаГрафикРаботыСуммированныйУчетРабочегоВремени;
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
	СведенияОСреднемЗаработке =
		КадровыйУчетВнутренний.СведенияОСреднемЗаработкеДляСправкиДетямСиротам(
			КадровыеДанные, ДатаСправки);
	
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			НомерСтрокиНачалаОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеПолучаемыеНаХоду = Новый Структура(
				"ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейСубъект,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира,
				|НачалоМесяца,
				|ОкончаниеМесяца,
				|ОтработаноДней,
				|ОтработаноЧасов,
				|НормаДней,
				|НормаЧасов,
				|Доход,
				|ДоходПрописью");
			
			ДанныеОВремени = СведенияОСреднемЗаработке.ДанныеОВремени.Скопировать(Новый Структура("Сотрудник", ДанныеДетальныхЗаписей.РаботаСотрудник));
			ДанныеОВремени.Сортировать("Период убыв");
			
			СтрокаОтработанногоВремени = Неопределено;
			Для Каждого СтрокаВремени Из ДанныеОВремени Цикл
				Если СтрокаВремени.ОтработаноЧасов >= СтрокаВремени.НормаЧасов Тогда
					СтрокаОтработанногоВремени = СтрокаВремени;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаОтработанногоВремени <> Неопределено Тогда
				
				ДанныеПолучаемыеНаХоду.НачалоМесяца = СтрокаОтработанногоВремени.Период;
				ДанныеПолучаемыеНаХоду.ОкончаниеМесяца = КонецМесяца(СтрокаОтработанногоВремени.Период);
				ДанныеПолучаемыеНаХоду.ОтработаноДней = СтрокаОтработанногоВремени.ОтработаноДней;
				ДанныеПолучаемыеНаХоду.НормаДней = СтрокаОтработанногоВремени.НормаДней;
				Если СуммированныйУчетРабочегоВремениИспользуется
					И ДанныеДетальныхЗаписей.РаботаГрафикРаботыСуммированныйУчетРабочегоВремени Тогда
					
					ДанныеПолучаемыеНаХоду.ОтработаноЧасов = СтрокаОтработанногоВремени.ОтработаноЧасов;
					ДанныеПолучаемыеНаХоду.НормаЧасов = СтрокаОтработанногоВремени.НормаЧасов;
				КонецЕсли;
				
				ДанныеОНачислениях = СведенияОСреднемЗаработке.ДанныеОНачислениях.Скопировать(
					Новый Структура("Сотрудник,Период", СтрокаОтработанногоВремени.Сотрудник, СтрокаОтработанногоВремени.Период));
				Если ЗначениеЗаполнено(ДанныеОНачислениях) Тогда
					ДанныеОНачислениях.Свернуть("Сотрудник", "Сумма");
					ДанныеПолучаемыеНаХоду.Доход = ДанныеОНачислениях[0].Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеПолучаемыеНаХоду.Доход) И ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаСотрудник) Тогда
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(
					Истина, ДанныеДетальныхЗаписей.РаботаСотрудник, "ФОТ", ДанныеДетальныхЗаписей.ПараметрыДанныхДатаСправки);
				ДанныеПолучаемыеНаХоду.Доход = КадровыеДанные.ФОТ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПолучаемыеНаХоду.Доход) Тогда
				
				ДанныеПолучаемыеНаХоду.Доход = Окр(ДанныеПолучаемыеНаХоду.Доход, 0);
				
				ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
				ДанныеПолучаемыеНаХоду.ДоходПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					Окр(ДанныеПолучаемыеНаХоду.Доход, 2), ВалютаУчета);
				
				ДанныеПолучаемыеНаХоду.Доход = ЗарплатаКадрыОтчеты.ТарифнаяСтавкаНаПечать(ДанныеПолучаемыеНаХоду.Доход, Истина);
				
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			СведенияОВыдачеДокумента = Новый Массив;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан) Тогда
					СведенияОВыдачеДокумента.Добавить(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан);
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения) Тогда
					СведенияОВыдачеДокумента.Добавить(СтрШаблон(НСтр("ru = 'код подразделения: %1';
																	|en = 'business unit code: %1'"), ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения));
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи) Тогда
					СведенияОВыдачеДокумента.Добавить(Формат(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи, "ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОВыдачеДокумента) Тогда
				ДанныеПолучаемыеНаХоду.ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан =
					СтрСоединить(СведенияОВыдачеДокумента, ", ");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей) Тогда
					СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейСубъект =
						СубъектИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород =
						ГородИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица =
						УлицаИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом =
						ДомИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус =
						КорпусИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира =
						КвартираИзСведенийОбАдресе(СведенияОбАдресе);
				КонецЕсли;
			КонецЕсли;
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат,
				РезультатКомпоновки.МакетПечатнойФормы,
				"Бланк",
				ДанныеНаПечать,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей,
				ДанныеПолучаемыеНаХоду);
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормыПФ_MXL_СправкаОДоходахДетямСиротамДляНазначенияДоплаты(),
				НомерСтрокиНачалаОбласти, ДанныеДетальныхЗаписей, ДанныеНаПечать.СсылкаНаОбъект);
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено И ПерваяСтрокаПечатнойФормы < ДокументРезультат.ВысотаТаблицы Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВнешниеНаборыДанных() Экспорт
	
	ВнешниеНаборы = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	ВнешниеНаборы.Вставить("ДанныеОрганизаций", ДанныеОрганизаций());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВнешниеНаборы;
	
КонецФункции

Функция ДанныеОрганизаций()
	
	ТаблицаДанныхОрганизаций = Новый ТаблицаЗначений;
	
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Руководитель", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = ТаблицаДанныхОрганизаций.Добавить();
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "АдрФакт_JSON");
		Сведения.Добавить("", "АдрЮР_JSON");
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, ТекущаяДатаСеанса(), Сведения);
		
		Если ОргСведения.Свойство("ТелОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		КонецЕсли;
		Если ОргСведения.Свойство("КППЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		КонецЕсли;
		Если ОргСведения.Свойство("АдрФакт_JSON") Тогда
			НоваяСтрокаСведенияОбОрганизациях.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОргСведения.АдрФакт_JSON);
		КонецЕсли;
		Если ПустаяСтрока(НоваяСтрокаСведенияОбОрганизациях.Адрес) И ОргСведения.Свойство("АдрЮР_JSON") Тогда
			НоваяСтрокаСведенияОбОрганизациях.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОргСведения.АдрЮР_JSON);
		КонецЕсли;
		
		ОтветственныеЛицаОрганизации = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Выборка.Организация, "Руководитель,ДолжностьРуководителя", ТекущаяДатаСеанса());
		НоваяСтрокаСведенияОбОрганизациях.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
		НоваяСтрокаСведенияОбОрганизациях.ДолжностьРуководителя = ОтветственныеЛицаОрганизации.ДолжностьРуководителя;
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхОрганизаций;
	
КонецФункции

Функция СубъектИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Регион) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.РегионСокращение)
			И СведенияОбАдресе.РегионСокращение <> НСтр("ru = 'г';
														|en = 'city'") Тогда
			
			ПредставлениеГорода = ПредсталениеАдресногоЭдлемента(СведенияОбАдресе.РегионСокращение, СведенияОбАдресе.Регион);
			Возврат ПредставлениеГорода;
		КонецЕсли;
		Возврат СведенияОбАдресе.Регион;
	КонецЕсли;
КонецФункции

Функция ГородИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.ГородСокращение)
			И СведенияОбАдресе.ГородСокращение <> НСтр("ru = 'г';
														|en = 'city'") Тогда
			
			Возврат СтрШаблон("%1. %2", СведенияОбАдресе.ГородСокращение, СведенияОбАдресе.Город);
		КонецЕсли;
		Возврат СведенияОбАдресе.Город;
	КонецЕсли;
	ПредставлениеГорода = "";
	Если ЗначениеЗаполнено(СведенияОбАдресе.Район) Тогда
		ПредставлениеГорода = ПредсталениеАдресногоЭдлемента(СведенияОбАдресе.РайонСокращение, СведенияОбАдресе.Район);
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
		Если ЗначениеЗаполнено(ПредставлениеГорода) Тогда
			ПредставлениеГорода = СтрШаблон("%1, %2", ПредставлениеГорода, ПредсталениеАдресногоЭдлемента(СведенияОбАдресе.НаселенныйПунктСокращение, СведенияОбАдресе.НаселенныйПункт));
		Иначе
			ПредставлениеГорода = ПредсталениеАдресногоЭдлемента(СведенияОбАдресе.НаселенныйПунктСокращение, СведенияОбАдресе.НаселенныйПункт);
		КонецЕсли;
	КонецЕсли;
	Возврат ПредставлениеГорода;
КонецФункции

Функция ПредсталениеАдресногоЭдлемента(Сокращение, Элемент)
	Если ЗначениеЗаполнено(Сокращение) Тогда
		Если СтрДлина(Сокращение) < 3 Тогда
			Возврат СтрШаблон("%1. %2", Сокращение, Элемент);
		КонецЕсли;
		Возврат СтрШаблон("%1 %2", Элемент, Сокращение);
	КонецЕсли;
	Возврат Элемент;
КонецФункции

Функция УлицаИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.УлицаСокращение)
		И СведенияОбАдресе.УлицаСокращение <> НСтр("ru = 'ул';
													|en = 'str'") Тогда
		
		Возврат СтрШаблон("%1. %2", СведенияОбАдресе.УлицаСокращение, СведенияОбАдресе.Улица);
	КонецЕсли;
	Возврат СведенияОбАдресе.Улица;
КонецФункции

Функция ДомИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание.ТипЗдания)
		И СведенияОбАдресе.Здание.ТипЗдания <> НСтр("ru = 'Дом';
													|en = 'House'") Тогда
		
		Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Здание.ТипЗдания, СведенияОбАдресе.Здание.Номер);
	КонецЕсли;
	Возврат СведенияОбАдресе.Здание.Номер;
КонецФункции

Функция КорпусИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса[0].ТипКорпуса)
			И СведенияОбАдресе.Корпуса[0].ТипКорпуса <> НСтр("ru = 'Корпус';
															|en = 'Building unit'") Тогда
			
			Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Корпуса[0].ТипКорпуса, СведенияОбАдресе.Корпуса[0].Номер);
		КонецЕсли;
		Возврат СведенияОбАдресе.Корпуса[0].Номер;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция КвартираИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения[0].ТипПомещения)
			И СведенияОбАдресе.Помещения[0].ТипПомещения <> НСтр("ru = 'Квартира';
																|en = 'Apartment'") Тогда
			
			Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Помещения[0].ТипПомещения, СведенияОбАдресе.Помещения[0].Номер);
		КонецЕсли;
		Возврат СведенияОбАдресе.Помещения[0].Номер;
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#КонецЕсли