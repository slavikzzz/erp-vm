#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Если НЕ ИспользоватьНесколькоВалют Тогда
		ПараметрВалюта = СхемаКомпоновкиДанных.Параметры.Валюта;
		ПараметрВалюта.ВключатьВДоступныеПоля = Ложь;
		ПараметрВалюта.ОграничениеИспользования = Истина;
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, ЭтаФорма, СхемаКомпоновкиДанных, "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Если НЕ ИспользоватьНесколькоВалют Тогда
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		СвойстваПараметра = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта");
		СвойстваПараметра.Использование = Истина;
		СвойстваПараметра.Значение = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	Перем КоличествоДокументов;
	
	СтандартнаяОбработка = Ложь;
	
	ВнешниеНаборы = НаборыДанных();
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначениеПараметра =  НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Показатель"));
	Если ЗначениеПараметра = Неопределено Или Не ЗначениеПараметра.Использование Тогда
		ВызватьИсключение НСтр("ru = 'Данный отчет предназначен только для расшифровки данных показателя бюджетов.';
								|en = 'This report can only be used to drill down data of a budget balance item.'");
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Исключения = Новый Структура("Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, Валюта");
			ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиОтчета.Отбор, ЭлементСтруктуры.Настройки.Отбор, Истина, Исключения);
			Для каждого Параметр Из НастройкиОтчета.ПараметрыДанных.Элементы Цикл
				ЗначениеПараметра =  ЭлементСтруктуры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
				Если ЗначениеПараметра <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	#Область ЗапускФоновогоОтраженияДокументовВБюджетировании
		Период = БюджетированиеСервер.ЗначениеНастройкиСКД(КомпоновщикНастроек, "Период"); // СтандартныйПериод - 
		НачалоПериода = Период.ДатаНачала;
		КонецПериода = Период.ДатаОкончания;
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		
		ДопСвойства.Удалить("КоличествоДокументовКОтражениюВБюджетировании");
		Если РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ТребуетсяОтражениеВБюджетированииДляОтчетаЗаПериод(
											НачалоПериода, КонецПериода, КоличествоДокументов) Тогда
			
			ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыФоновымЗаданием(НачалоПериода, КонецПериода);
			ДопСвойства.Вставить("КоличествоДокументовКОтражениюВБюджетировании", КоличествоДокументов);
			ДопСвойства.Вставить("НачалоПериода", НачалоПериода);
			ДопСвойства.Вставить("КонецПериода", КонецПериода);
			
			ДополнитьПараметрыПроверкиОтраженияДокументов(ДопСвойства, КомпоновщикНастроек);
			
		КонецЕсли;
	#КонецОбласти
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ФактическиеДанныеБюджетированияСервер.ВывестиАктуальностьОтраженияФактическихДанных(ДокументРезультат, ДопСвойства);
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновкиДанных);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхОтчета

Функция НаборыДанных()
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета);
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ОстаткиНаНачало", ОстаткиНаНачало(НастройкиОтчета, ПараметрыПолученияФакта));
	НаборыДанных.Вставить("Обороты", Обороты(НастройкиОтчета, ПараметрыПолученияФакта));
	НаборыДанных.Вставить("ОстаткиНаКонец", ОстаткиНаКонец(НастройкиОтчета, ПараметрыПолученияФакта));
	НаборыДанных.Вставить("Аналитика", Аналитика(НастройкиОтчета));
	
	Возврат НаборыДанных;
	
КонецФункции

Функция ОстаткиНаНачало(НастройкиОтчета, ПараметрыПолученияФакта)
	
	ПараметрыПолученияФакта.ОстаткиТолькоНаНачалоПериода = Истина;
	ПараметрыПолученияФакта.ДополнительныйОтбор = НастройкиОтчета;
	
	ФактПоПоказателямБюджетов = БюджетированиеСервер.ФактПоПоказателямБюджетов(
		НастройкиОтчета, 
		ПараметрыПолученияФакта);
	
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
		ФактПоПоказателямБюджетов.Колонки.Добавить("Сумма");
	КонецЕсли;
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Количество") Тогда
		ФактПоПоказателямБюджетов.Колонки.Добавить("Количество");
	КонецЕсли;

	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

Функция Обороты(НастройкиОтчета, ПараметрыПолученияФакта)
	
	ПараметрыПолученияФакта.ДополнительныйОтбор = Неопределено;
	
	// Определим необходимость детализации оборотов по периоду или регистратору
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")
			И ЭлементСтруктуры.ИдентификаторОбъекта = "ОборотыСвязанныхСтатей" Тогда
			Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(ЭлементСтруктуры.Настройки, "Регистратор") Тогда
				ПараметрыПолученияФакта.ПоРегистратору = Истина;
			КонецЕсли;
			Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
				Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
					ПолеПериод = "Период";
				Иначе
					ПолеПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
				КонецЕсли;
				Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(ЭлементСтруктуры.Настройки, ПолеПериод) Тогда
					ПараметрыПолученияФакта.Периодичность = Периодичность;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ФактПоСтатьямБюджетов = БюджетированиеСервер.ФактПоСтатьямВлияющимНаПоказателиБюджетов(
		НастройкиОтчета, 
		ПараметрыПолученияФакта, 
		Истина); // ТаблицаЗначений
		
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
		ФактПоСтатьямБюджетов.Колонки.Добавить("СуммаВалПриход");
		ФактПоСтатьямБюджетов.Колонки.Добавить("СуммаВалРасход");
	КонецЕсли;
	
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Количество") Тогда
		ФактПоСтатьямБюджетов.Колонки.Добавить("КоличествоПриход");
		ФактПоСтатьямБюджетов.Колонки.Добавить("КоличествоРасход");
	КонецЕсли;
	
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

Функция ОстаткиНаКонец(НастройкиОтчета, ПараметрыПолученияФакта)
	
	ПараметрыПолученияФакта.ОстаткиТолькоНаНачалоПериода = Ложь;
	ПараметрыПолученияФакта.ДополнительныйОтбор = НастройкиОтчета;
	
	ФактПоПоказателямБюджетов = БюджетированиеСервер.ФактПоПоказателямБюджетов(
		НастройкиОтчета, 
		ПараметрыПолученияФакта);
		
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
		ФактПоПоказателямБюджетов.Колонки.Добавить("Сумма");
	КонецЕсли;
	Если Не ПараметрыПолученияФакта.Показатели.Свойство("Количество") Тогда
		ФактПоПоказателямБюджетов.Колонки.Добавить("Количество");
	КонецЕсли;

	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

Функция Аналитика(НастройкиОтчета)
	
	Аналитика = Новый ТаблицаЗначений;
	Для каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Найти("Аналитика").Поля Цикл
		Аналитика.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
	КонецЦикла;
	
	Возврат Аналитика;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ДополнитьПараметрыПроверкиОтраженияДокументов(ДопСвойства, КомпоновщикНастроек)
	//Если есть простой отбор, который может повлиять на необходимость предупреждения о неотраженных документах, то дополним параметры.
	ИмяПоляКомпоновки = "СтатьяБюджетов";
	ЭлементыОтбора = Новый Массив;
	БюджетнаяОтчетностьРасчетКэшаСервер.НайтиОтборПоИмени(КомпоновщикНастроек.ПолучитьНастройки(), ИмяПоляКомпоновки, ЭлементыОтбора);
	Если ЭлементыОтбора.Количество() = 1 Тогда
		ЭлементОтбора = ЭлементыОтбора[0]; // ЭлементОтбораКомпоновкиДанных -
		Если ЭлементОтбора.Использование
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЭлементОтбора.Родитель = Неопределено Тогда
			ДопСвойства.Вставить("ПроверкаХранимыхПравилСтатьяБюджетов", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоляКомпоновки = "ПоказательБюджетов";
	ЭлементыОтбора = Новый Массив;
	БюджетнаяОтчетностьРасчетКэшаСервер.НайтиОтборПоИмени(КомпоновщикНастроек.Настройки, ИмяПоляКомпоновки, ЭлементыОтбора);
	Если ЭлементыОтбора.Количество() = 1 Тогда
		ЭлементОтбора = ЭлементыОтбора[0]; // ЭлементОтбораКомпоновкиДанных -
		Если ЭлементОтбора.Использование
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЭлементОтбора.Родитель = Неопределено Тогда
			ДопСвойства.Вставить("ПроверкаХранимыхПравилПоказательБюджетов", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета)
	
	Параметры = БюджетированиеСервер.ШаблонПараметровПолученияФакта();
	
	Валюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта");
	Если Валюта.Использование Тогда
		Параметры.ВалютаОтчета = Валюта.Значение;
	Иначе
		Параметры.ВалютаОтчета = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	Параметры.ФункциональнаяВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ФункциональнаяВалюта").Значение;
	
	Показатель = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Показатель").Значение;
	Параметры.Показатели = Новый Структура(Показатель);
	
	Параметры.Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение; 
	
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	Параметры.ПоПравиламПолученияДанных = Истина;
	
	Возврат Параметры; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли