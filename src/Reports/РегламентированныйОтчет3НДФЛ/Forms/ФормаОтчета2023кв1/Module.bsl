#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ОбъектЭтогоОтчета;

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.мВыбраннаяФорма = НормироватьИдентификаторФормы(Параметры.мВыбраннаяФорма);
	
	// Заполняем обязательными ключами реквизит формы "СтруктураРеквизитовФормы"
	СтруктураРеквизитовФормы = Отчеты.РегламентированныйОтчет3НДФЛ.СтруктураРеквизитовФормы(
		Параметры.Организация, Параметры.мДатаКонцаПериодаОтчета, Параметры.мВыбраннаяФорма, Параметры);
	Если СтруктураРеквизитовФормы = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не определена СтруктураРеквизитовФормы для налогового периода ""%1""';
				|en = 'Не определена СтруктураРеквизитовФормы для налогового периода ""%1""'"), Параметры.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	// Количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдРаздел1 = 1;
	КолИсхСтрокИдРаздел1Приложение = 1;
	КолИсхСтрокИдПриложение1 = 1;
	КолИсхСтрокИдПриложение1Расчет = 1;
	КолИсхСтрокИдПриложение8 = 1;
	
	// Структуры для работы с показателями уникальных страниц отчета (не многострочных и не многостраничных)
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1Приложение = Новый Структура;
	СтруктураДанныхПриложение4 = Новый Структура;
	СтруктураДанныхПриложение5 = Новый Структура;
	СтруктураДанныхПриложение5Продолжение = Новый Структура;
	СтруктураДанныхПриложение6 = Новый Структура;
	
	// Ключи с именами реквизитов формы, соответствующих таблицам многострочных разделов
	мСтруктураМногострочныхРазделов = Отчеты.РегламентированныйОтчет3НДФЛ.СтруктураМногострочныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	// Структура содержит данные дополнительных страниц:
	// Ключ - имя раздела, значение - имя таблицы, каждая строка которой соответствует странице раздела
	мСтруктураМногостраничныхРазделов = Отчеты.РегламентированныйОтчет3НДФЛ.СтруктураМногостраничныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	// Добавляем первые страницы в многостраничные разделы
	ИнициализацияМногостраничныхРазделов();
	
	// Структура с описанием обязательного количества строк в многострочных разделах формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдРаздел1, КолИсхСтрокИдРаздел1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложение1, КолИсхСтрокИдПриложение1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложение1Расчет, КолИсхСтрокИдПриложение1Расчет);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдПриложение8, КолИсхСтрокИдПриложение8);
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Установка начального раздела декларации
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	ИмяМакетаТекущегоРаздел = ИмяМакета(ИмяФормы, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ТабличныйДокумент.Вывести(ОтчетОбъект().ПолучитьМакет(ИмяМакетаТекущегоРаздел));
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Если ЗначениеЗаполнено(Параметры.мСохраненныйДок) Тогда
		ДанныеОтчета = Параметры.мСохраненныйДок.ДанныеОтчета.Получить();
		ОтчетСозданИзПомощника = ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения")
			И ДанныеОтчета.ДанныеПомощникаЗаполнения <> Неопределено
			И ДанныеОтчета.ДанныеПомощникаЗаполнения.Количество() > 0
			И Метаданные.Обработки.Найти("ПомощникЗаполнения3НДФЛ") <> Неопределено;
	Иначе
		ОтчетСозданИзПомощника = Ложь;
	КонецЕсли;
	Элементы.ГруппаОтчетИзПомощника.Видимость = ОтчетСозданИзПомощника;
	
	Элементы.ПроверитьКонтрольныеСоотношения.Видимость = СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	Если СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения <> Неопределено
		И СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения.Статус = "Ошибка" Тогда
		ВызватьИсключение СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения.ПодробноеПредставлениеОшибки;
	ИначеЕсли СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения <> Неопределено Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияАвтозаполнения", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения, Обработчик, НастройкиОжидания);
	Иначе
		ОбновитьДеревоРазделовПослеавтоЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтчетСформированВПомощникеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПомощникЗаполнения3НДФЛ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыПомощника = Новый Структура;
		ПараметрыПомощника.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
		ПараметрыПомощника.Вставить("Период", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыПомощника.Вставить("ВыбраннаяФорма", СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ПараметрыПомощника.Вставить("КонтекстныйВызов", Истина);
		
		ИмяФормыПомощника = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
		ОткрытьФорму(ИмяФормыПомощника, ПараметрыПомощника);
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОтчетСформированВПомощникеНажатие(Элемент)
	
	Элементы.ГруппаОтчетИзПомощника.Видимость = Ложь;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, КонтролирующийОрган());
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, КонтролирующийОрган());
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, КонтролирующийОрган());
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийНавигацииПоРазделам

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Раздел = Элемент.ТекущиеДанные;
	Если Раздел <> Неопределено И Элемент.ТекущаяСтрока <> СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		РазделОтчетаПриИзменении(Раздел, Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяЯчейки = Область.Имя;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Если СтрНачинаетсяС(Область.Имя, "ДобавитьСтраницу") Тогда
			ДобавитьСтраницу("");
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтраницу") И Область.Гиперссылка Тогда
			УдалитьСтраницу("");
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "ДобавитьСтроку") Тогда
			ДобавитьСтроку("");
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтроку") И Область.Гиперссылка Тогда
			УдалитьСтроку("");
		ИначеЕсли СтрНачинаетсяС(Область.Имя, "СобратьДанные") И Область.Гиперссылка Тогда
			СобратьДанные("");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки = "КодИМНС" Тогда // Титульный лист
		
		ОбработкаВыбораИФНС(Элемент, Область, СтандартнаяОбработка);
		
	ИначеЕсли ИмяЯчейки = "КодСтраны" Тогда // Титульный лист
		
		ОбработкаВыбораСтраныМира(Элемент, Область, СтандартнаяОбработка);
		
	ИначеЕсли Лев(ИмяЯчейки, 13) = "П000300001060" Тогда // Приложение 1: Haимeнование источника выплаты дохода
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Haимeнование источника выплаты дохода';
				|en = 'Haимeнование источника выплаты дохода'"),
			,
			Истина);
		
	ИначеЕсли ИмяЯчейки = "П000400001010" Тогда // Приложение 2: Код страны источника выплаты
		
		ОбработкаВыбораСтраныМира(Элемент, Область, СтандартнаяОбработка);
		
	ИначеЕсли ИмяЯчейки = "П000400001020" Тогда // Приложение 2: Haимeнование источника выплаты дохода
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Haимeнование источника выплаты дохода';
				|en = 'Haимeнование источника выплаты дохода'"),
			,
			Истина);
		
	ИначеЕсли ИмяЯчейки = "П000400001030" Тогда // Приложение 2: Код валюты
		
		ОбработкаВыбораВалюты(Элемент, Область, СтандартнаяОбработка);
		
	ИначеЕсли ИмяЯчейки = "П000700001032" Тогда // Приложение 7: Номер объекта
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Номер объекта';
				|en = 'Номер объекта'"),
			,
			Истина);
		
	ИначеЕсли ИмяЯчейки = "П000700001033" Тогда // Приложение 7: Сведения о местонахождении объекта
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Сведения о местонахождении объекта';
				|en = 'Сведения о местонахождении объекта'"),
			,
			Истина);
		
	ИначеЕсли Лев(ИмяЯчейки, 13) = "П001900001010" Тогда // Расчет к Приложению 1: Кадастровый номер отчужденного объекта недвижимого имущества
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Кадастровый номер отчужденного объекта недвижимого имущества';
				|en = 'Кадастровый номер отчужденного объекта недвижимого имущества'"),
			,
			Истина);
		
	ИначеЕсли ИмяЯчейки = "П001000001030" Тогда // Расчет к Приложению 5: Haимeнование негосударственного пенсионного фонда или страховой организации
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Haимeнование негосударственного пенсионного фонда или страховой организации';
				|en = 'Haимeнование негосударственного пенсионного фонда или страховой организации'"),
			,
			Истина);
		
	ИначеЕсли ИмяЯчейки = "П001000001110" Тогда // Расчет к Приложению 5: Полное наименование профессионального участника рынка ценных бумаг
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВводСтроки(
			ОписаниеОповещенияВыбораВПолеТабличногоДокумента("ОткрытьФормуВводаСтрокиЗавершение", Элемент, Область),
			Область.Текст,
			НСтр("ru = 'Полное наименование профессионального участника рынка ценных бумаг';
				|en = 'Полное наименование профессионального участника рынка ценных бумаг'"),
			,
			Истина);
		
	Иначе
		
		ПараметрВводаПоля = СвойствоПоказателя(ИмяЯчейки, АдресСвойствПоказателей);
		
		Если ПараметрВводаПоля <> Неопределено Тогда
			
			ВвестиПоказатель(
				Элемент,
				Область,
				ПараметрВводаПоля.Показатель,
				ПараметрВводаПоля.ТекстПриВыборе,
				ПараметрВводаПоля.АдресТаблицыЗначений,
				СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияВыбораВПолеТабличногоДокумента(ИмяПроцедуры, Элемент, Область)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ДополнительныеПараметры.Вставить("ИмяЯчейки", Область.Имя);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("Область", Область);
	
	Возврат Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойствоПоказателя(Область.Имя, АдресСвойствПоказателей);
	Если ПараметрВводаПоля<> Неопределено Тогда
		Если ПараметрВводаПоля.Тип = "КБК" И ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = СтрЗаменить(Область.Значение," ","");
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Длина значения показателя должна быть равна %1!';
																							|en = 'Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	Если СтрНайти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		
		НовыйПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтотОбъект, "Титульный", "ПоМесту");
		
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;
		ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	ИначеЕсли ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = Область.Значение;
		
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки > 0, 1, 0);
		
	ИначеЕсли ИмяПоказателя = "ОтчетГод" Тогда
		
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Дата(Область.Значение, 1, 1);
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		
		// Задаем заголовок формы
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
			НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
			"ФП = Истина");
		
		УстановитьЗаголовокФормы();
		
		ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
		
	Иначе
		ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ПозицияРазделителя = 14;
	Разделитель = "_";
	
	Если Сред(Элемент.ТекущаяОбласть.Имя, ПозицияРазделителя, 1) = Разделитель Тогда
		ИмяОбластиВторойСтроки = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияРазделителя - 1) + Разделитель + "2";
		Элементы.УдалитьСтроку.Доступность = РазделМногострочный(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ЭтотОбъект)
			И (ТабличныйДокумент.Области.Найти(ИмяОбластиВторойСтроки) <> Неопределено);
	Иначе
		Элементы.УдалитьСтроку.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		СобратьДанныеВРаздел1();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		СобратьДанныеВРаздел2();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Перем МаксимальноеКоличествоСтрокГруппы, СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Исходное количество строк группы
	МаксимальноеКоличествоСтрокГруппы = МаксимальноеКоличествоСтрокНаСтранице(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		СтруктураГруппы = ЭтотОбъект[СтруктураГруппы];
	КонецЕсли;
	
	// Определяем последнюю строку многострочной группы
	Если СтруктураГруппы <> Неопределено Тогда
		Если СтруктураГруппы.Количество() = МаксимальноеКоличествоСтрокГруппы Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Количество строк на странице не может превышать %1. Добавить новую страницу?';
					|en = 'Количество строк на странице не может превышать %1. Добавить новую страницу?'"),
				МаксимальноеКоличествоСтрокГруппы);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСтрокуЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВставитьДополнительнуюСтроку(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтотОбъект["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтотОбъект, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить выбранную строку?%1';
																				|en = 'Удалить выбранную строку?%1'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	Если ДоступнаПечатьPDF417(СтруктураРеквизитовФормы.мВыбраннаяФорма) Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.';
										|en = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ДоступнаПечатьPDF417(ВыбраннаяФорма);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",							СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",				СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		ИмяОтчета(ЭтотОбъект.ИмяФормы), ИмяФормыОтчета(ЭтотОбъект.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, КонтролирующийОрган());
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, КонтролирующийОрган());
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНаКлиенте(, Новый ОписаниеОповещения("ЗаписатьИЗакрытьПродолжение", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОтчета

&НаСервереБезКонтекста
Функция НормироватьИдентификаторФормы(мВыбраннаяФорма)
	
	Префикс = "ФормаОтчета";
	Если СтрНачинаетсяС(НРег(мВыбраннаяФорма), НРег(Префикс)) Тогда
		ВыбраннаяФорма = СтрШаблон("%1%2", Префикс, Сред(НРег(мВыбраннаяФорма), СтрДлина(Префикс) + 1));
	Иначе
		ВыбраннаяФорма = мВыбраннаяФорма;
	КонецЕсли;
	
	Возврат ВыбраннаяФорма;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	// Заполняем показатели отчета из макета "Состав показателей"
	ЗаполнитьНачальныеНастройки();
	
	// Настройки показа и вывода на печать каждой страницы отчета
	ФормироватьСтруктуруСтраницОтчета();
	
	// Настройки свойств каждого раздела: многострочности, многостраничности, количества строк и страниц, параметров автозаполнения и т.д.
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	АдресКлючейПоказателей = ПоместитьВоВременноеХранилище(КлючиПоказателей, УникальныйИдентификатор);
	
	Если Не БезОткрытияФормы Тогда
		СвойстваПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.СвойстваПоказателей(
			ОтчетОбъект(), СтруктураРеквизитовФормы.мВыбраннаяФорма, УникальныйИдентификатор);
		АдресСвойствПоказателей = ПоместитьВоВременноеХранилище(СвойстваПоказателей, УникальныйИдентификатор);
	КонецЕсли;
	
	// Заполняем многострочные разделы нужным количеством строк
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		ЗаполнитьДатуПодписи(ЭтотОбъект);
		ЗаполнитьСведенияОбОрганизации();
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			// Копирование документа
			ЗаполнитьДатуПодписи(ЭтотОбъект);
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если Не БезОткрытияФормы
			И СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол, НаимЮЛСокр, ОКТМО");
		Если СведенияОбОрганизации <> Неопределено Тогда
			СтруктураРеквизитовФормы.НаимОрганизации = СведенияОбОрганизации.НаимЮЛСокр;
			СтруктураРеквизитовФормы.НаимОрг = СведенияОбОрганизации.НаимЮЛПол;
			СтруктураРеквизитовФормы.ОКТМО = СведенияОбОрганизации.ОКТМО;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		ЗаполнитьСводныеТаблицы();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения = ЗаполнитьАвтоНаСервере();
		Если СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
		ИначеЕсли СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения.Статус = "Ошибка" Тогда
			ВызватьИсключение СтруктураРеквизитовФормы.ДлительнаяОперацияАвтозаполнения.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не БезОткрытияФормы Тогда
		ОтобразитьПоясненияКПериодуОтчета(ЭтотОбъект);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

// Добавляет в таблицы многостраничных отчетов строки, соответствующие 1-й странице
&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		НоваяТаблицаДанных = Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхМногостраничногоРаздела();
		ЭтотОбъект[Раздел.Значение].Загрузить(НоваяТаблицаДанных);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	СоставПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.СоставПоказателей(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	мТаблицаСоставПоказателей.Загрузить(СоставПоказателей.СоставПоказателей);
	
	Для Каждого ВариантыЗаполнения Из СоставПоказателей.ДанныеВариантовАвтоЗаполнения Цикл
		Для каждого Варианты Из ВариантыЗаполнения.Значение Цикл
			НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ВариантыЗаполнения.Ключ].Добавить();
			НоваяСтрока.ТаблицаВариантовЗаполнения.Загрузить(Варианты);
		КонецЦикла;
	КонецЦикла;
	
	мСтруктураВариантыЗаполнения = СоставПоказателей.СтруктураВариантовЗаполнения;
	мСтруктураВариантыЗаполненияЭталон = СоставПоказателей.СтруктураВариантовЗаполнения;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	ЗначениеВРеквизитФормы(
		Отчеты.РегламентированныйОтчет3НДФЛ.ДеревоСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма),
		"мДеревоСтраницОтчета");
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки многострочности, многостраничности, количества строк и страниц, параметров автозаполнения.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	ЗначениеВРеквизитФормы(
		Отчеты.РегламентированныйОтчет3НДФЛ.СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма),
		"мСвойстваРазделовДекларации");
	
КонецПроцедуры

// Добавляет нужное количество строк в таблицы,
// с помощью которых многострочные разделы редактируются в табличном документе
&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтотОбъект[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			
			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = СтрШаблон(НСтр("ru = 'Декларация 3-НДФЛ %1 (%2)';
								|en = 'Декларация 3-НДФЛ %1 (%2)'"),
		СтруктураРеквизитовФормы.СтрПериодОтчета,
		СтруктураРеквизитовФормы.НаимОрганизации);
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = Заголовок;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоРазделов

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Формирует дерево для навигации по разделам и страницам отчета
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	Перем ИмяТаблицыСтраницыМногостраничногоРаздела;
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.РазделМногостраничный = РазделМногостраничный(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, Форма);
			ЭлементРазделовОтчета.РазделМногострочный = РазделМногострочный(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, Форма);
			ЭлементРазделовОтчета.ИндексКартинки = ?(ЭлементРазделовОтчета.РазделМногостраничный, 0, 1);
			
			Если ЭлементРазделовОтчета.РазделМногостраничный Тогда
				ИмяТаблицыСтраницыМногостраничногоРаздела = Форма.мСтруктураМногостраничныхРазделов[ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим];
				Для НомерСтраницы = 1 По Форма[ИмяТаблицыСтраницыМногостраничногоРаздела].Количество() Цикл
					СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					СтраницаРазделаОтчета.КолонкаРазделыОтчета              = СтрШаблон("Стр. %1", НомерСтраницы);
					СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
					СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
					СтраницаРазделаОтчета.ИндексКартинки                    = 1;
					СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличныйДокумент

&НаСервереБезКонтекста
Функция ИмяМакета(ИмяФормы, ИмяРаздела)
	
	Возврат Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела;
	
КонецФункции

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Число15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение
			И Не ЗначениеЗаполнено(Область.Формат) Тогда
			
			Если Область.ТипЗначения = ТипЧисло Тогда
				Область.ТипЗначения = Число15_2;
			ИначеЕсли Область.ТипЗначения = ТипДата Тогда
				Область.Формат = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает формат, цвет, доступность и прочие свойства областей табличного документа на 
//	основании таблицы "мТаблицаСоставПоказателей". Таблица "мТаблицаСоставПоказателей" 
//	собирается по макету "СоставПоказателей..." при инициализации отчета
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяРаздела)
	
	Если ИмяРаздела = "Приложение3" Тогда
		
		Если ТабличныйДокумент.Области.Найти("П000500001010") <> Неопределено И ТабличныйДокумент.Области["П000500001010"].Значение = 0 Тогда
			
			ТабличныйДокумент.Области["П000500001010"].Значение = "01";
			СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, "П000500001010", "01");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, (ИмяТекРаздела = "Раздел1"));
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета,,,ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	РасчетНаСервере(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, УдалениеСтраницы = Ложь, ИндексУдаляемойСтраницы = Неопределено, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	
	ЭтоПоследняяСтраница = Истина;
	ЭтоПерваяСтраница = Истина;
	МногостраничностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтотОбъект, ИмяТекРаздела, "МногостраничностьВРазделе");
	ИтогиНаПоследнейСтранице = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтотОбъект, ИмяТекРаздела, "ПоказыватьИтогиТолькоНаПоследнейСтранице");
	
	КоличествоПодобныхСтраниц = 0;
	
	Если МногостраничностьВРазделе = Истина 
		И ИтогиНаПоследнейСтранице = Истина Тогда
		
		КоличествоСтраницРаздела = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекРаздела].Количество();
		Если УдалениеСтраницы И ИндексУдаляемойСтраницы + 1 = КоличествоСтраницРаздела Тогда
			ЭтоПоследняяСтраница = Истина;
		Иначе
			ЭтоПоследняяСтраница = КоличествоСтраницРаздела - НомерСтраницыРазделаОтчета = 0;
		КонецЕсли;
		
		ЭтоПерваяСтраница =  НомерСтраницыРазделаОтчета = 1;
		КоличествоПодобныхСтраниц = ЭтотОбъект["ТаблицаСтраницы" + ИмяТекРаздела].Количество() - ?(УдалениеСтраницы ,1,0);
		
	КонецЕсли;
	
	Если ЭтоПерваяСтраница И УдалениеСтраницы И КоличествоПодобныхСтраниц = 0 Тогда
		
		ЭтоПоследняяСтраница = Истина;
		
	КонецЕсли;
	
	ИмяМакета = ИмяМакета(ИмяФормы, ИмяТекРаздела);
	Макет = ОтчетОбъект().ПолучитьМакет(ИмяМакета);
	ТабличныйДокумент.Вывести(Макет);
	
	Если РазделМногострочный(ИмяТекРаздела, ЭтотОбъект) Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		// Управление видимостью гиперссылки "Удалить страницу"
		КоличествоСтраницРаздела = ЭтотОбъект[НаимТаблицыСтраницы].Количество() - ?(УдалениеСтраницы,1,0);
		Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
			Если КоличествоСтраницРаздела = 1 ИЛИ ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		НомерСтраницыРазделаОтчета = Мин(ЭтотОбъект[НаимТаблицыСтраницы].Количество(), НомерСтраницыРазделаОтчета);
		
		СписокДанных = ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		// Сбрасываем активность всех страниц, активность новой выведенной страницы будет установлена ниже
		// Если выводится предыдущая страница перед удалением, то сбрасывать активность не нужно
		// Активная страница будет удалена, а активность перемещена на предыдущую стрнаицу, которая уже выведена
		Если НЕ УдалениеСтраницы Тогда
			Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
				ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			КонецЦикла;
		КонецЕсли;
	
		// Устанавливаем признак активной страницы только если это не удаление страницы
		// При удалении страницы все происходит по другому, сначала мы показываем предыдущую
		// не активную страницу, и только затем удаляем активную, поэтому в режиме удаления страницы
		// не устанавливаем активность на выведенной странице, активность будет перемещена 
		// на выведенную сейчас страницу после удаления активной страницы (которую удаляем)
		ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли; 
			
		КонецЦикла;
		
		ИмяТаблицыСтраницРаздела = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ИмяТаблицыСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		// Устанавливаем признак активной страницы только если это не удаление страницы
		СтрСледующаяСтраница.АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		// Способ хранения многострочных частей
		СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекРаздела, "СохранятьМногострКакТЗ");
		
		Если ЗначениеЗаполнено(НовДанныеДопСтрокРаздела) Тогда
			
			Если СохранятьМногострКакТЗ Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтотОбъект[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			Иначе
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтотОбъект[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	ИначеЕсли РазделМногостраничный(ИмяТекРаздела, ЭтотОбъект) Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		// Управление видимостью гиперссылки "Удалить страницу"
		КоличествоСтраницРаздела = ЭтотОбъект[НаимТаблицыСтраницы].Количество() - ?(УдалениеСтраницы,1,0);
		Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
			Если КоличествоСтраницРаздела = 1 ИЛИ ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		// Сбрасываем активность всех страниц, активность новой выведенной страницы будет установлена ниже
		// Если выводится предыдущая страница перед удалением, то сбрасывать активность не нужно
		// Активная страница будет удалена, а активность перемещена на предыдущую страницу, которая уже выведена
		Если НЕ УдалениеСтраницы Тогда
			Для каждого ТаблицаСтраницы Из ЭтотОбъект[НаимТаблицыСтраницы] Цикл
				ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			КонецЦикла;
		КонецЕсли;
		// Устанавливаем признак активной страницы только если это не удаление страницы
		// При удалении страницы все происходит по другому, сначала мы показываем предыдущую
		// не активную страницу, и только затем удаляем активную, поэтому в режиме удаления страницы
		// не устанавливаем активность на выведенной странице, активность будет перемещена 
		// на выведенную сейчас страницу после удаления активной страницы (которую удаляем)
		ЭтотОбъект[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = ?(ИндексУдаляемойСтраницы = 0 ,Истина ,НЕ УдалениеСтраницы);
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли; 
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	// На всех страницах, кроме последней запретим редактировать итоговые показатели.
	Если МногостраничностьВРазделе = Истина И ИтогиНаПоследнейСтранице = Истина И Не ЭтоПоследняяСтраница Тогда
		
		ЦветФона = Неопределено;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
		
		ИтоговыеПоказатели = КлючиИтоговыхПоказателей(ТабличныйДокумент);
		Для Каждого Показатель Из ИтоговыеПоказатели Цикл
			ТабличныйДокумент.Области[Показатель.Ключ].Защита = Истина;
			ТабличныйДокумент.Области[Показатель.Ключ].ЦветФона = ЦветФона;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			ИмяГруппы = ИмяГруппы(ИмяПоказателя);
			ПоказательМногострочный = Ложь;
			Если Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы) Тогда
				Для Каждого СтруктураГруппы Из Форма[ИмяГруппы] Цикл
					ПоказательМногострочный = СтруктураГруппы.Свойство(ИмяПоказателя);
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если КолвоСтрокВМногострочнойЧасти > 0 И ПоказательМногострочный Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя) <> Неопределено Тогда
					
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Строка.Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Строка.Комментарий;
					КонецЕсли;
					
					Ключ = "_" + ВариантЗаполнения;
					Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
					
					ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
					
					Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
						
						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
						Иначе
							Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
						КонецЕсли;
						
					Иначе
						
						Если ЗначениеВКвадратах Тогда
							// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
							РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
						Иначе
							Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
	КонецЕсли;
	РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Форма.ДатаПодписи = ДатаПодписи;
	Форма.СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
	УстановитьЗначениеПоля(Форма.ТабличныйДокумент, "ДатаПодписи", ДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПослеИзмененияСодержания(ИмяПоказателя, ИмяРаздела, Область)
	
	Если (ИмяПоказателя = "П000400001040" Или ИмяПоказателя = "П000400001110")
		И Строка(ТабличныйДокумент.Области["П000400001031"].Значение) <> КодВидаДоходаЗаПределамиРФ("ПрибыльКИК", СтруктураРеквизитовФормы.мВыбраннаяФорма) Тогда
		
		Если ИмяПоказателя = "П000400001040" Тогда // Дата получения дохода
			Курс = ПолучитьКурсВалютыНаДату(ТабличныйДокумент.Области["П000400001030"].Значение, Область.Значение);
			ИмяПоказателяКурса = "П000400001050";
			ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
			СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателяКурса, Курс);
		КонецЕсли;
		
		Если ИмяПоказателя = "П000400001110" Тогда // Дата уплаты налога
			Курс = ПолучитьКурсВалютыНаДату(ТабличныйДокумент.Области["П000400001030"].Значение, Область.Значение);
			ИмяПоказателяКурса = "П000400001120";
			ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
			СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателяКурса, Курс);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "ОтчетГод" Тогда
		РасчетНаКлиенте("Раздел1Приложение", ИмяПоказателя);
	КонецЕсли;
	
	//действия, связанные с показателями, обладающими списками выбора,
	//на элементы которых наложены условия (макет "Списки...")
	
	Если ИмяПоказателя = "СтатусНалогоплательщика" Тогда
		ОбновитьПеременныеМодуляНаКлиенте("СтатусНалогоплательщика",Область.Значение);
	КонецЕсли;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	
	Если ИмяРаздела = "Титульный"
		И ИмяПоказателя = "Фамилия"
		Или ИмяПоказателя = "Имя"
		Или ИмяПоказателя = "Отчество"
		Или ИмяПоказателя = "ИНН"
		Тогда
		СохранитьЗначениеПоказателяВСтруктуреНаСервере(ИмяРаздела, ИмяПоказателя, Область.Значение);
	Иначе
		СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателя, Область.Значение);
	КонецЕсли;
	
	Если Не ИмяРаздела = "Титульный" Тогда
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //Сделаем пересчет на сервере всех разделов
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтраницТекущегоРаздела = ТекущиеДанные.ПолучитьЭлементы().Количество();
	
	Если КоличествоСтраницТекущегоРаздела = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = КоличествоСтраницТекущегоРаздела Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	НаимРаздела = КопияТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//Для многостраничных разделов и разделов с итогами не на каждой странице, может понадобиться другой макет
	Если РазделМногостраничный(НаимРаздела, ЭтотОбъект) Тогда
		
		НомерВыводимойСтраницы = СтруктураРеквизитовФормы.НомерТекущейСтраницы;
		Если ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			НомерВыводимойСтраницы = ?(СтруктураРеквизитовФормы.НомерТекущейСтраницы = КоличествоСтраницТекущегоРаздела, КоличествоСтраницТекущегоРаздела, СтруктураРеквизитовФормы.НомерТекущейСтраницы + 1);
		КонецЕсли;
	
		ВывестиМакетВТаблДокНаСервере(НаимРаздела, НомерВыводимойСтраницы, Истина, ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		РасчетНаКлиенте(НаимРаздела);
	КонецЕсли;
	
	ИндексУдаляемойСтраницы = ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные);
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИндексУдаляемойСтраницы);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ИндексУдаляемойСтраницы);
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДобавитьСтраницу(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьДополнительнуюСтроку(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдРаздел1", СтруктураРеквизитовФормы.мИдРаздел1);
	ИдГрупп.Вставить("мИдПриложение1", СтруктураРеквизитовФормы.мИдПриложение1);
	ИдГрупп.Вставить("мИдПриложение1Расчет", СтруктураРеквизитовФормы.мИдПриложение1Расчет);
	ИдГрупп.Вставить("мИдПриложение8", СтруктураРеквизитовФормы.мИдПриложение8);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдРаздел1", СтруктураРеквизитовФормы.мИдРаздел1);
	ИдГрупп.Вставить("мИдПриложение1", СтруктураРеквизитовФормы.мИдПриложение1);
	ИдГрупп.Вставить("мИдПриложение1Расчет", СтруктураРеквизитовФормы.мИдПриложение1Расчет);
	ИдГрупп.Вставить("мИдПриложение8", СтруктураРеквизитовФормы.мИдПриложение8);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдРаздел1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложение1 Тогда
		ТекТабличноеПоле = "Приложение1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложение1Расчет Тогда
		ТекТабличноеПоле = "Приложение1Расчет";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдПриложение8 Тогда
		ТекТабличноеПоле = "Приложение8";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдРаздел1", СтруктураРеквизитовФормы.мИдРаздел1);
	ИдГрупп.Вставить("мИдПриложение1", СтруктураРеквизитовФормы.мИдПриложение1);
	ИдГрупп.Вставить("мИдПриложение1Расчет", СтруктураРеквизитовФормы.мИдПриложение1Расчет);
	ИдГрупп.Вставить("мИдПриложение8", СтруктураРеквизитовФормы.мИдПриложение8);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдРаздел1", СтруктураРеквизитовФормы.мИдРаздел1);
	ИдГрупп.Вставить("мИдПриложение1", СтруктураРеквизитовФормы.мИдПриложение1);
	ИдГрупп.Вставить("мИдПриложение1Расчет", СтруктураРеквизитовФормы.мИдПриложение1Расчет);
	ИдГрупп.Вставить("мИдПриложение8", СтруктураРеквизитовФормы.мИдПриложение8);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдРаздел1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложение1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1Расчет" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложение1Расчет;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение8" Тогда
		ИмяГруппы = ИдГрупп.мИдПриложение8;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ТекущаяСтраница = ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтотОбъект[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтотОбъект, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(
			ТекТабличноеПоле,
			ТекТабличноеПолеИмя,
			ИсходноеКоличествоСтрокГруппы,
			ТекущееКоличествоСтрокГруппы,
			ИмяГруппы,
			СтруктураГруппы,
			ВысотаСтроки);
		
		ЭтотОбъект[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
	КонецЕсли;
	
	// Выводим значения строк
	СписокКолонок = СтруктураГруппы.Выгрузить().Колонки;
	Для НомерСтроки = 0 По СтруктураГруппы.Количество() - 1 Цикл
		СтрокаТаблицы = СтруктураГруппы[НомерСтроки];
		НомерСтрокиВМакете = Формат(НомерСтроки + 1, "ЧГ=0");
		
		Для Каждого Колонка Из СписокКолонок Цикл
			
			Если СтруктураГруппы[0].Свойство(Колонка.Имя) Тогда
				
				ЗначениеЯчейки = СтрокаТаблицы[Колонка.Имя];
				Если ТипЗнч(ЗначениеЯчейки) = Тип("СписокЗначений") Тогда
					Для НомерСтрокиСписка = 0 По ЗначениеЯчейки.Количество() - 1 Цикл
						ИмяЯчейки = СтрШаблон("%1_%2_%3", Колонка.Имя, НомерСтрокиВМакете, НомерСтрокиСписка + 1);
						УстановитьЗначениеПоля(ТекТабличноеПоле, ИмяЯчейки, ЗначениеЯчейки[НомерСтрокиСписка].Значение);
					КонецЦикла;
				Иначе
					ИмяЯчейки = СтрШаблон("%1_%2", Колонка.Имя, НомерСтрокиВМакете);
					УстановитьЗначениеПоля(ТекТабличноеПоле, ИмяЯчейки, ЗначениеЯчейки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтотОбъект, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтотОбъект, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
	
	Если РазделМногострочный(ВыбТабличноеПолеИмя, ЭтотОбъект) Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтотОбъект, ВыбТабличноеПолеИмя);
	
	Если РазделМногострочный(ВыбТабличноеПолеИмя, ЭтотОбъект) Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтотОбъект.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
		Иначе
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);
			
		Иначе
			
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтотОбъект, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры

// СпециальныеОперацииПослеОчисткиЛистаНаСервере
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
//
&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
		
	РасчетНаСервере(ИмяСтраницы);
	
КонецПроцедуры

// СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(
// Процедура вызывается из модуля РО. При удалении листа любого раздела отчета.
// Вызов происходит в том случае, если в св-вах раздела установлен реквизит ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина
// если в св-вах такого реквизита нет, то после удаления листа запускается расчет этого листа.
//
// В подобных процедурах должны выполняться действия, которые следуют за удалением доп. страниц. пересчет номеров, закрашивание ячеек и т.д.
// Если в разделе в св-вах нет ключа СпециальныеОперацииПослеОчисткиЛиста = Ложь или нет для многостраничного раздела
// тогда не вызывается эта процедура.
//
// Параметры:
//  ИмяСтраницы    - имся страницы раздела декларации
//  УдалениДопЭкз  - Булево. Имеет смысл только для многостраничных разделов. Если Истина, то выбрана очистка всего раздела "насквозь" включая
//                 удаление всех доп страниц. Если Ложь - то очистка только текущего табличного поля.
&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт
		
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоля(ТабличныйДокумент, ИмяПоля, ЗначениеПоля)
	
	Поле = ТабличныйДокумент.Области.Найти(ИмяПоля);
	Если Поле <> Неопределено Тогда
		Если Поле.СодержитЗначение = Истина Тогда
			Поле.Значение = ЗначениеПоля;
		Иначе
			Поле.Текст = ЗначениеПоля;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	
КонецПроцедуры

#КонецОбласти

#Область ДиалогиВыбораДляВводаЗначений

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ТекстВыбора, АдресТаблицыВыбора, СтандартнаяОбработка = Ложь, КолонкаПоиска = "Код") Экспорт
	
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов Или Не ЭтоАдресВременногоХранилища(АдресТаблицыВыбора) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя
		Или РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтотОбъект, КодПоказателя) > 0 Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
			ИсходноеЗначение = СокрЛП(Область.Значение);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Число") Тогда
			ИсходноеЗначение = Формат(Область.Значение, "ЧГ=0");
		Иначе
			ИсходноеЗначение = Область.Значение;
		КонецЕсли;
		
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение
				+ Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя
				+ Разделитель
				+ Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    АдресТаблицыВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
		"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
		ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Или
		РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтотОбъект, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение =
				СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСтраныМира(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект);
	ФормаВыбора.Заголовок = НСтр("ru = 'Код страны по классификатору ОКСМ';
								|en = 'Код страны по классификатору ОКСМ'");
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияВыбораВПолеТабличногоДокумента(
		"ОткрытьФормуВыбораСтраныМираЗавершение", Элемент, Область);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныМираЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
		
	Если Результат <> Неопределено Тогда
		
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		
		Если Область.Значение <> КодЭлементаСправочника Тогда
			
			Область.Значение = КодЭлементаСправочника;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойствоПоказателя(ИмяЯчейки, АдресСвойствПоказателей);
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ВвестиПоказатель(Элемент, Область, КодПоказателя, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.АдресТаблицыЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВалюты(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтотОбъект);
	ФормаВыбора.Заголовок = НСтр("ru = 'Код валюты';
								|en = 'Код валюты'");
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияВыбораВПолеТабличногоДокумента(
		"ОткрытьФормуВыбораКодаВалютыЗавершение", Элемент, Область);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКодаВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		
		Если Область.Значение <> КодЭлементаСправочника Тогда
			
			Область.Значение = КодЭлементаСправочника;
			СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяЯчейки, КодЭлементаСправочника);
			
			КодВидаДохода = Строка(ТабличныйДокумент.Области["П000400001031"].Значение);
			ЭтоПрибыльКИК = (КодВидаДохода = КодВидаДоходаЗаПределамиРФ("ПрибыльКИК", СтруктураРеквизитовФормы.мВыбраннаяФорма));
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области["П000400001040"].Значение) И Не ЭтоПрибыльКИК Тогда
				
				Курс = ПолучитьКурсВалютыНаДату(Область.Значение, ТабличныйДокумент.Области["П000400001040"].Значение);
				
				ИмяПоказателяКурса = "П000400001050";
				ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
				СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателяКурса, Курс);
				
				РасчетПослеИзмененияСодержания(ИмяПоказателяКурса, ИмяРаздела, ТабличныйДокумент.Области[ИмяПоказателяКурса]);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области["П000400001110"].Значение) И Не ЭтоПрибыльКИК Тогда
				
				Курс = ПолучитьКурсВалютыНаДату(Область.Значение, ТабличныйДокумент.Области["П000400001110"].Значение);
				
				ИмяПоказателяКурса = "П000400001120";
				ТабличныйДокумент.Области[ИмяПоказателяКурса].Значение = Курс;
				СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателяКурса, Курс);
				
				РасчетПослеИзмененияСодержания(ИмяПоказателяКурса, ИмяРаздела, ТабличныйДокумент.Области[ИмяПоказателяКурса]);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойствоПоказателя(ИмяЯчейки, АдресСвойствПоказателей);
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ВвестиПоказатель(Элемент, Область, КодПоказателя, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.АдресТаблицыЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Область.Значение <> Результат Тогда
		ДополнительныеПараметры.Область.Значение = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделОтчетаПриИзменении(Раздел, ЭлементРазделыОтчета)
	
	ЭтоЗаголовокРаздела = (Раздел.ПолучитьРодителя() = Неопределено);
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = ЭлементРазделыОтчета.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Раздел.РазделМногостраничный И Не ЗначениеЗаполнено(Раздел.КолонкаНомерСтраницыРазделаОтчета) Тогда
			Раздел.КолонкаНомерСтраницыРазделаОтчета = 1;
		КонецЕсли;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(
			Раздел.КолонкаРазделыОтчетаСокрНаим,
			Раздел.КолонкаНомерСтраницыРазделаОтчета,
			ЭтоЗаголовокРаздела);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Элементы.ДобавитьСтраницу.Видимость = Раздел.РазделМногостраничный;
	Элементы.УдалитьСтраницу.Видимость = Раздел.РазделМногостраничный;
	Если Раздел.РазделМногостраничный Тогда
		
		ЭлементРазделыОтчета.Развернуть(ЭлементРазделыОтчета.ТекущаяСтрока);
		
		Если ЭтоЗаголовокРаздела Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Видимость = Ложь;
			
		ИначеЕсли Раздел.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДобавитьСтроку.Видимость = Раздел.РазделМногострочный;
	Элементы.УдалитьСтроку.Видимость  = Раздел.РазделМногострочный;
	Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Раздел.РазделМногострочный;
	
	Элементы.Обновить.Доступность = (Раздел.КолонкаРазделыОтчетаСокрНаим = "Титульный");
	
	Элементы.СобратьДанные.Видимость = (Раздел.КолонкаРазделыОтчетаСокрНаим = "Раздел1"
		Или Раздел.КолонкаРазделыОтчетаСокрНаим = "Раздел2");
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодЭлементаСправочника(Элемент)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Код");
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ТабличныйДокумент.Области[ДополнительныеПараметры.ИмяЯчейки].Значение =
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку(РезультатВыбора.КодНО, 4);
		СохранитьЗначениеПоказателяВСтруктуре(
			ЭтотОбъект,
			СтруктураРеквизитовФормы.НаимТекущегоРаздела,
			ДополнительныеПараметры.ИмяЯчейки,
			ТабличныйДокумент.Области[ДополнительныеПараметры.ИмяЯчейки].Значение);
		Если ДополнительныеПараметры.ИмяЯчейки = "КодИМНС" Тогда
			ЗаполнитьСведенияОПодписантах();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КодИМНС = СокрЛП(Область.Значение);
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяЯчейки", Область.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли Не ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В реквизитах организации не указан налоговый орган';
								|en = 'В реквизитах организации не указан налоговый орган'");
		Сообщение.КлючДанных = СтруктураРеквизитовФормы.Организация;
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
								|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.КлючДанных = СтруктураРеквизитовФормы.Организация;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныйФункционал

&НаСервереБезКонтекста
Функция СвойствоПоказателя(Знач КодПоказателя, Знач АдресСвойствПоказателей)
	
	СвойстваПоказателя = Неопределено;
	
	Если Не ЭтоАдресВременногоХранилища(АдресСвойствПоказателей) Тогда
		Возврат СвойстваПоказателя;
	КонецЕсли;
	
	СвойстваПоказателей = ПолучитьИзВременногоХранилища(АдресСвойствПоказателей);
	Если ТипЗнч(СвойстваПоказателей) <> Тип("ТаблицаЗначений") Тогда
		Возврат СвойстваПоказателя;
	КонецЕсли;
	
	СтруктураКодаПоказателя = СтрРазделить(КодПоказателя, "_");
	БазаКодаПоказателя = СтруктураКодаПоказателя[0];
	
	НайденнаяСтрока  = СвойстваПоказателей.Найти(БазаКодаПоказателя, "Показатель");
	Если НайденнаяСтрока <> Неопределено Тогда
		СвойстваПоказателя = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяСтрока);
	КонецЕсли;
	
	Возврат СвойстваПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальноеКоличествоСтрокНаСтранице(Форма, ИмяСтраницы)
	
	МаксимальноеКоличествоСтрок = 0;
	Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если Раздел.ИмяСтраницы = ИмяСтраницы Тогда
			Если Раздел.МногострочностьВРазделе.Количество() <> 0 Тогда
				МаксимальноеКоличествоСтрок = Раздел.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальноеКоличествоСтрок;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПроверкуПередОткрытием()
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
		Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект),
		ЭтотОбъект,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Отчеты.РегламентированныйОтчет3НДФЛ.ЗаполнитьТитульныйЛист(
		СтруктураДанныхТитульный,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		,
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	Отчеты.РегламентированныйОтчет3НДФЛ.ЗаполнитьСведенияОПодписантах(
		СтруктураДанныхТитульный, СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Для Каждого РеквизитТабличногоДокумента Из ТабличныйДокумент.Области Цикл
			Если РеквизитТабличногоДокумента.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Не РеквизитТабличногоДокумента.Защита Тогда
				СтруктураДанныхТитульный.Свойство(РеквизитТабличногоДокумента.Имя, РеквизитТабличногоДокумента.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мСтатусНалогоплательщика", СтруктураРеквизитовФормы.мСтатусНалогоплательщика);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мСтатусНалогоплательщика = ПеременныеМодуля.мСтатусНалогоплательщика;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	ПеременныеМодуля.Вставить("мСтатусНалогоплательщика", СтруктураРеквизитовФормы.мСтатусНалогоплательщика);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	СтруктураРеквизитовФормы.мСтатусНалогоплательщика = ПеременныеМодуля.мСтатусНалогоплательщика;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "СтатусНалогоплательщика" Тогда
		Если ЗначениеПоказателя = "1" Тогда
			ПеременныеМодуля.мСтатусНалогоплательщика = 1;
		ИначеЕсли ЗначениеПоказателя = "2" Тогда
			ПеременныеМодуля.мСтатусНалогоплательщика = 2;
		Иначе
			ПеременныеМодуля.мСтатусНалогоплательщика = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции

//Преобразовывает некоторые значения структуры из посимвольного представления в одно поле
//предназначена для совместимости с формами сохраненными в версии 2.0
&НаСервере
Процедура ПреобразоватьПосимвольныеДанныеВЗначения(Данные)
	
	Если Данные.Свойство("ИНН_1") Тогда
		
		ИНН = "";
		Для Поз = 1 По 12 Цикл
			ИНН = ИНН + Данные["ИНН_" + Поз];
			Данные.Удалить("ИНН_" + Поз);
		КонецЦикла;	
		Данные.Вставить("ИНН",ИНН);
	КонецЕсли;
	
	Если Данные.Свойство("ДатаПодписи1") Тогда
		
		мДатаПодписи = "" + Данные["ДатаПодписи5"]
		+ Данные["ДатаПодписи6"]
		+ Данные["ДатаПодписи7"]
		+ Данные["ДатаПодписи8"]
		+ Данные["ДатаПодписи3"]
		+ Данные["ДатаПодписи4"]
		+ Данные["ДатаПодписи1"]
		+ Данные["ДатаПодписи2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаПодписи" + Поз);
		КонецЦикла;
		
		Данные.Вставить("ДатаПодписи", ?(ЗначениеЗаполнено(мДатаПодписи), Дата(мДатаПодписи), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("НомСтр1_1") Тогда
			
		Для Поз = 1 По 3 Цикл
			Данные.Удалить("НомСтр1_" + Поз);
		КонецЦикла;	
		
	КонецЕсли;
	Если Данные.Свойство("НомерКорректировки1") Тогда
		
		мНомерКорректировки = "";
		Для Поз = 1 По 3 Цикл
			мНомерКорректировки = мНомерКорректировки + Данные["НомерКорректировки" + Поз];
			Данные.Удалить("НомерКорректировки" + Поз);
		КонецЦикла;
		Данные.Вставить("НомерКорректировки", мНомерКорректировки);
	
	КонецЕсли;
	Если Данные.Свойство("ОтчетГод1") Тогда
		
		ОтчетГод = "";
		Для Поз = 1 По 4 Цикл
			ОтчетГод = ОтчетГод + Данные["ОтчетГод" + Поз];
			Данные.Удалить("ОтчетГод" + Поз);
		КонецЦикла;
		Данные.Вставить("ОтчетГод", ОтчетГод);
		
	КонецЕсли;
	Если Данные.Свойство("КодИМНС1") Тогда
		
		КодИМНС = "";
		Для Поз = 1 По 4 Цикл
			КодИМНС = КодИМНС + Данные["КодИМНС" + Поз];
			Данные.Удалить("КодИМНС" + Поз);
		КонецЦикла;	
		Данные.Вставить("КодИМНС", КодИМНС);
		
	КонецЕсли;
	Если Данные.Свойство("ПоМесту1") Тогда
		
		ПоМесту = "";
		Для Поз = 1 По 3 Цикл
			ПоМесту = ПоМесту + Данные["ПоМесту" + Поз];
			Данные.Удалить("ПоМесту" + Поз);
		КонецЦикла;	
		Данные.Вставить("ПоМесту", ПоМесту);
		
	КонецЕсли;
	Если Данные.Свойство("Период1") Тогда
		
		Период = "";
		Для Поз = 1 По 2 Цикл
			Период = Период + Данные["Период" + Поз];
			Данные.Удалить("Период" + Поз);
		КонецЦикла;	
		Данные.Вставить("Период", Период);
		
	КонецЕсли;
	Если Данные.Свойство("СоставленаНа1") Тогда
		
		СоставленаНа = "";
		Для Поз = 1 По 3 Цикл
			СоставленаНа = СоставленаНа + Данные["СоставленаНа" + Поз];
			Данные.Удалить("СоставленаНа" + Поз);
		КонецЦикла;	
		Данные.Вставить("СоставленаНа", СоставленаНа);
		
	КонецЕсли;
	Если Данные.Свойство("ДатаВыдачиДокумента1") Тогда	
		
		ДатаВыдачиДокумента = "" + Данные["ДатаВыдачиДокумента5"]
		+ Данные["ДатаВыдачиДокумента6"]
		+ Данные["ДатаВыдачиДокумента7"]
		+ Данные["ДатаВыдачиДокумента8"]
		+ Данные["ДатаВыдачиДокумента3"]
		+ Данные["ДатаВыдачиДокумента4"]
		+ Данные["ДатаВыдачиДокумента1"]
		+ Данные["ДатаВыдачиДокумента2"];

		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаВыдачиДокумента" + Поз);
		КонецЦикла;	
		
		Данные.Вставить("ДатаВыдачиДокумента", ?(ЗначениеЗаполнено(ДатаВыдачиДокумента), Дата(ДатаВыдачиДокумента), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("ДатаРождения1") Тогда
		
		ДатаРождения = "" + Данные["ДатаРождения5"]
		+ Данные["ДатаРождения6"]
		+ Данные["ДатаРождения7"]
		+ Данные["ДатаРождения8"]
		+ Данные["ДатаРождения3"]
		+ Данные["ДатаРождения4"]
		+ Данные["ДатаРождения1"]
		+ Данные["ДатаРождения2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаРождения" + Поз);
		КонецЦикла;	
		Данные.Вставить("ДатаРождения", ?(ЗначениеЗаполнено(ДатаРождения) , Дата(ДатаРождения), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;	

КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	// Выводим год на титульный лист
	Если СтруктураДанныхТитульный <> Неопределено
		И СтруктураДанныхТитульный.Свойство("ОтчетГод")
		И ЗначениеЗаполнено(СтруктураДанныхТитульный.ОтчетГод) Тогда
		ОтчетныйГод = Формат(СтруктураДанныхТитульный.ОтчетГод, "ЧГ=");
	Иначе
		ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	КонецЕсли;
	
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	
	// Задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
		"ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
																							|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтотОбъект.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000") Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
																							|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтотОбъект.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000000") Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
																							|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтотОбъект.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсВалютыНаДату(КодВалюты,ДатаКурса)
	
	Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если Валюта <> Неопределено Тогда
		Результат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта,ДатаКурса);
		Возврат Результат.Курс;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	ДокументыОснования = Новый СписокЗначений;
	ДокументыОснования.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(ДокументыОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтотОбъект.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтотОбъект.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтотОбъект.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОтчетОбъект()

	Если ОбъектЭтогоОтчета = Неопределено Тогда
		ОбъектЭтогоОтчета = РеквизитФормыВЗначение("Отчет");
	КонецЕсли; 
	
	Возврат ОбъектЭтогоОтчета;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделМногострочный(ИмяРаздела, Форма)
	
	МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяРаздела, "МногострочностьВРазделе");
	КоличествоМногострочныхЧастей = МногострочностьВРазделе.Количество();
	
	Возврат КоличествоМногострочныхЧастей > 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделМногостраничный(ИмяРаздела, Форма)
	
	МногостраничностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяРаздела, "МногостраничностьВРазделе");
	
	Возврат МногостраничностьВРазделе;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппы(ИмяЯчейки)
	
	Возврат Лев(ИмяЯчейки, 10);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ПолноеИмяФормы)
	ИмяФормы = СтрЗаменить(ПолноеИмяФормы, "Внешний", "");
	Возврат Сред(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ИмяФормы)
	Возврат Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7);
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиВСтруктуреОтчета

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		ИмяМакета = ИмяМакета(ИмяФормы, Раздел.ИмяСтраницы);
		
		Если Не Раздел.МногостраничностьВРазделе
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОтчетОбъект().ПолучитьМакет(ИмяМакета));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И ЭтотОбъект[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0 Тогда
			
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОтчетОбъект().ПолучитьМакет(ИмяМакета));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	Если РазделМногострочный(НаимРаздела, ЭтотОбъект) Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтотОбъект, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	ИначеЕсли РазделМногостраничный(НаимРаздела, ЭтотОбъект) Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтотОбъект[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Для каждого Страница Из АктивныеСтраницы Цикл
				Страница.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			Страница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли; 
		
		
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьДополнительныеСтрокиВСтруктуре(Форма, ИмяРаздела, Очищать = Ложь)
	
	Если РазделМногострочный(ИмяРаздела, Форма) Тогда
		// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
		РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяРаздела, Очищать);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтотОбъект, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем ИмяСтруктурыГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, ИмяСтруктурыГруппы);
	
	СтруктураГруппы = Форма[ИмяСтруктурыГруппы];
	СписокКолонок = СтруктураГруппы.Выгрузить().Колонки;
	Для Индекс = 0 По СтруктураГруппы.Количество() - 1 Цикл
		
		Для Каждого Колонка Из СписокКолонок Цикл
			
			Если Не СтруктураГруппы[0].Свойство(Колонка.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураГруппы[Индекс][Колонка.Имя]) = Тип("СписокЗначений") Тогда
				ЗначениеКолонки = СтруктураГруппы[Индекс][Колонка.Имя];
				ЗначениеКолонки.Очистить();
				НомерСтроки = 1;
				Пока Истина Цикл
					ИмяЯчейки = СтрШаблон("%1_%2_%3", Колонка.Имя, Формат(Индекс + 1, "ЧГ=0"), Формат(НомерСтроки, "ЧГ=0"));
					ОбластьЯчейки = Форма.ТабличныйДокумент.Области.Найти(ИмяЯчейки);
					Если ОбластьЯчейки = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ЗначениеКолонки.Добавить(?(ОбластьЯчейки.СодержитЗначение, ОбластьЯчейки.Значение, ОбластьЯчейки.Текст));
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			Иначе
				ИмяЯчейки = СтрШаблон("%1_%2", Колонка.Имя, Формат(Индекс + 1, "ЧГ=0"));
				ОбластьЯчейки = Форма.ТабличныйДокумент.Области.Найти(ИмяЯчейки);
				Если ОбластьЯчейки <> Неопределено Тогда
					СтруктураГруппы[Индекс][Колонка.Имя] = ?(ОбластьЯчейки.СодержитЗначение, ОбластьЯчейки.Значение, ОбластьЯчейки.Текст);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(),
		ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1,
		,
		МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Лево,
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				СоставляющиеИмени = СтрРазделить(Область.Имя, "_");
				Если СоставляющиеИмени.Количество() > 1 Тогда
					СоставляющиеИмени[1] = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=0");
				КонецЕсли;
				
				ОбластьТаблДок.Имя = СтрСоединить(СоставляющиеИмени, "_");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтотОбъект[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';
																							|en = 'В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтотОбъект[ИмяТекТабличногоПоля];
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	// Заполним итоговые показатели с последней страницы, чтобы вывести их на добавленной странице.
	ИтогиНаПоследнейСтранице = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтотОбъект, ИмяТекущейСтраницыПанели, "ПоказыватьИтогиТолькоНаПоследнейСтранице");
	ИтоговыеПоказатели = Неопределено;
	
	Если РазделМногостраничный(ИмяТекущейСтраницыПанели, ЭтотОбъект)
		И ИтогиНаПоследнейСтранице = Истина
		И ТаблицаСтраницРаздела.Количество() > 0 Тогда
		
		ИтоговыеПоказатели = КлючиИтоговыхПоказателей(ТекТабличноеПоле);
		ПустыеИтоговыеПоказатели = КлючиИтоговыхПоказателей(ТекТабличноеПоле);
		
		// Ищем последнюю страницу.
		ПоследняяСтраница = ТаблицаСтраницРаздела[ТаблицаСтраницРаздела.Количество() - 1];
		ДанныеПоследнейСтраницы = ПоследняяСтраница.Данные[0].Значение;
		
		// Запоминаем итоговые показатели во временную структуру.
		ЗаполнитьЗначенияСвойств(ИтоговыеПоказатели, ДанныеПоследнейСтраницы);
		
		// Очищаем итоговые показатели на последней странице.
		ЗаполнитьЗначенияСвойств(ДанныеПоследнейСтраницы, ПустыеИтоговыеПоказатели);
	КонецЕсли;
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Страница N " + ТаблицаСтраницРаздела.Количество();
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	// Выведем итоговые показатели на последней странице.
	Если ИтогиНаПоследнейСтранице = Истина И ИтоговыеПоказатели <> Неопределено Тогда
		ПоследняяСтраница = ТаблицаСтраницРаздела[ТаблицаСтраницРаздела.Количество() - 1];
		ДанныеПоследнейСтраницы = ПоследняяСтраница.Данные[0].Значение;
		
		ЗаполнитьЗначенияСвойств(ДанныеПоследнейСтраницы, ИтоговыеПоказатели);
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела.Индекс(СтрНоваяСтраница) + 1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция КлючиИтоговыхПоказателей(ТабличныйДокумент)
	
	Показатели = Новый Структура;
	
	ОбластьИтоговыеПоказатели = ТабличныйДокумент.Области.Найти("ИтоговыеПоказатели");
	Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
		
		ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
		ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
		
		Для Каждого ОбластьЯчеек Из ТабличныйДокумент.Области Цикл
			Если ОбластьЯчеек.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ОбластьЯчеек.Верх >= ОбластьИтоговыеПоказателиВерх
				И ОбластьЯчеек.Низ <= ОбластьИтоговыеПоказателиНиз
				И ОбластьЯчеек.СодержитЗначение Тогда
				Показатели.Вставить(ОбластьЯчеек.Имя, ОбластьЯчеек.ТипЗначения.ПривестиЗначение());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	РасчетНаСервере(ИмяТекущейСтраницы);
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтотОбъект, ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтотОбъект, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, ИндексУдаляемойСтраницы = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем МассивВариантовЗаполненияСтраниц;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтотОбъект[ТаблицаСтраницРаздела];
	
	ИтогиНаПоследнейСтранице = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		ЭтотОбъект, ИмяТекущейСтраницыПанели, "ПоказыватьИтогиТолькоНаПоследнейСтранице");
	
	УдаляетсяПоследняяСтраница = ТаблицаСтраницРаздела.Количество() > 1
		И ИндексУдаляемойСтраницы = ТаблицаСтраницРаздела.Количество() - 1;
	
	// Если удаляется последняя страница раздела,
	// то перенесем итоговые показатели с последней страницы на предпоследнюю.
	Если РазделМногостраничный(ИмяТекущейСтраницыПанели, ЭтотОбъект)
		И ИтогиНаПоследнейСтранице = Истина И УдаляетсяПоследняяСтраница Тогда
		
		ИтоговыеПоказатели = КлючиИтоговыхПоказателей(ЭтотОбъект["ТабличныйДокумент"]);
		
		// Ищем последнюю страницу
		ПоследняяСтраница = ТаблицаСтраницРаздела[ТаблицаСтраницРаздела.Количество() - 1];
		ДанныеПоследнейСтраницы = ПоследняяСтраница.Данные[0].Значение;
		
		ЗаполнитьЗначенияСвойств(ИтоговыеПоказатели, ДанныеПоследнейСтраницы);
		
		ПредпоследняяСтраница = ТаблицаСтраницРаздела[ТаблицаСтраницРаздела.Количество() - 2];
		ЗаполнитьЗначенияСвойств(ПредпоследняяСтраница.Данные[0].Значение, ИтоговыеПоказатели);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
	
	Если ИндексУдаляемойСтраницы <> Неопределено
		И мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
		
		МассивВариантовЗаполненияСтраниц.Удалить(ИндексУдаляемойСтраницы);
		
		КолСтраниц = ТаблицаСтраницРаздела.Количество();
		КолВариантов = МассивВариантовЗаполненияСтраниц.Количество();
		
		Для Инд = КолСтраниц + 1 По КолВариантов Цикл
			
			МассивВариантовЗаполненияСтраниц.Удалить(МассивВариантовЗаполненияСтраниц.Количество() - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервереБезконтекста
Функция НомерПервойЯчейкиСтрокиМногострочнойЧасти(ТабличноеПоле, ИмяМногострочнойЧасти, НомерСтрокиМногострочнойЧасти)
	
	Для НомерПервойЯчейки = 1 По 40 Цикл
		ИмяПервойЯчейкиПоследнейСтроки = СтрШаблон("%1%2_%3", ИмяМногострочнойЧасти, Формат(НомерПервойЯчейки, "ЧЦ=3; ЧВН="), НомерСтрокиМногострочнойЧасти);
		ОбластьПервойЯчейки = ТабличноеПоле.Области.Найти(ИмяПервойЯчейкиПоследнейСтроки);
		Если ОбластьПервойЯчейки <> Неопределено Тогда
			Возврат НомерПервойЯчейки;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ВставитьДополнительнуюСтроку(ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	Если ИмяГруппы = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
													|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'"));
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтотОбъект[ТекТабличноеПолеИмя];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтотОбъект[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	КолСтрокСтр      = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтрНовое = Формат(КолСтрок + 1, "ЧГ=0");
	
	НомерПервойЯчейки = НомерПервойЯчейкиСтрокиМногострочнойЧасти(ТекТабличноеПоле, ИмяГруппы, КолСтрокСтр);
	Если НомерПервойЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПервойЯчейкиПоследнейСтроки = СтрШаблон("%1%2_%3", ИмяГруппы, Формат(НомерПервойЯчейки, "ЧЦ=3; ЧВН="), КолСтрокСтр);
	ОбластьПервойЯчейки = ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиПоследнейСтроки);
	
	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьПервойЯчейки.Верх - 1;
	
	// Если над ячейкой со значением есть ячейки с текстом, то сдвинем номер границы еще выше.
	Пока Истина Цикл
		ОбластьЯчейки = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, ОбластьПервойЯчейки.Лево, НомерВерхЯчейкиОбласти, ОбластьПервойЯчейки.Право);
		Если Не ПустаяСтрока(ОбластьЯчейки.Текст) Тогда
			НомерВерхЯчейкиОбласти = НомерВерхЯчейкиОбласти - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Вставляем новую область в табличный документ
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	ЭтотОбъект[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокКолонок = СтруктураГруппы.Выгрузить().Колонки;
	Для Каждого Колонка Из СписокКолонок Цикл
		
		Если ТипЗнч(СтруктураГруппы[0][Колонка.Имя]) = Тип("СписокЗначений") Тогда
			Для НомерЭлементаСписка = 0 По СтруктураГруппы[0][Колонка.Имя].Количество() - 1 Цикл
				ИмяОбластиЯчейки    = СтрШаблон("%1_%2_%3", Колонка.Имя, КолСтрокСтр, Формат(НомерЭлементаСписка + 1, "ЧГ=0"));
				ИмяНовОбластиЯчейки = СтрШаблон("%1_%2_%3", Колонка.Имя, КолСтрокСтрНовое, Формат(НомерЭлементаСписка + 1, "ЧГ=0"));
				
				ОтрисоватьЯчейкуНовойДополнительнойСтроки(
					ТекТабличноеПоле, ИмяОбластиЯчейки, ИмяНовОбластиЯчейки, ИмяПервойЯчейкиПоследнейСтроки, СдвигСтрок, ИсходноеКоличествоСтрокГруппы);
			КонецЦикла;
		Иначе
			ИмяОбластиЯчейки    = СтрШаблон("%1_%2", Колонка.Имя, КолСтрокСтр);
			ИмяНовОбластиЯчейки = СтрШаблон("%1_%2", Колонка.Имя, КолСтрокСтрНовое);
			
			ОтрисоватьЯчейкуНовойДополнительнойСтроки(
				ТекТабличноеПоле, ИмяОбластиЯчейки, ИмяНовОбластиЯчейки, ИмяПервойЯчейкиПоследнейСтроки, СдвигСтрок, ИсходноеКоличествоСтрокГруппы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтрШаблон("%1%2_%3", ИмяГруппы, Формат(НомерПервойЯчейки, "ЧЦ=3; ЧВН="), КолСтрокСтрНовое);
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	// Заполним значениями по умолчанию
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ТекущаяСтраница);
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
	СохранитьДополнительныеСтрокиВСтруктуре(ЭтотОбъект, ТекущаяСтраница, Ложь);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтрисоватьЯчейкуНовойДополнительнойСтроки(ТабличныйДокумент, ИмяОбластиЭталона, ИмяНовойОбласти, ИмяПервойЯчейкиПоследнейСтроки, СдвигСтрок, ИсходноеКоличествоСтрокГруппы)
	
	ОбластьЯчейки = ТабличныйДокумент.Области.Найти(ИмяОбластиЭталона);
	Если ОбластьЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЯчейки.Имя = ИмяНовойОбласти;
	
	// Определяем границы ячейки исходной области
	НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
	НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
	НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
	НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
	
	// Назначаем имя ячейки исходной области,
	// (т.к. в результате вставки новой области оно было очищено)
	ОбластьЯчейкиИсходнойОбласти = ТабличныйДокумент.Область(
		НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
	ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЭталона;
	
	Если Найти(ИмяПервойЯчейкиПоследнейСтроки, Лев(ИмяОбластиЭталона, 13)) = 1 Тогда
		ОбластьУдалитьСтроку = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяОбластиЭталона);
		Если ОбластьУдалитьСтроку <> Неопределено Тогда
			ОбластьУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовойОбласти;
			ТабличныйДокумент.Область(
				ОбластьУдалитьСтроку.Верх - СдвигСтрок,
				ОбластьУдалитьСтроку.Лево,
				ОбластьУдалитьСтроку.Низ - СдвигСтрок,
				ОбластьУдалитьСтроку.Право).Имя  = "УдалитьСтроку" + ИмяОбластиЭталона;
		КонецЕсли;
	КонецЕсли;
	
	// очищаем значения ячеек вставленной области
	Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
		ОбластьЯчейки.Очистить();
	Иначе
		// порядковый номер последней строки перед вставкой
		ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
		НовыйПорядковыйНомер = ИсходныйНомер + 1;
		
		ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > ИсходноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтроку(ТекущаяСтраница)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем ИдентификаторСтруктурыГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, ИдентификаторСтруктурыГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтотОбъект[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(ЭтотОбъект, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
	
	// номер строки многострочного раздела определим по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = ЭтотОбъект[ИдентификаторСтруктурыГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы И СтруктураГруппы.Количество() > НомерСтрокиТаблицы Тогда
		
		// удаляется добавленная строка
		НомерПервойЯчейкиУдаляемойСтроки = НомерПервойЯчейкиСтрокиМногострочнойЧасти(ТекТабличноеПоле, ИмяГруппы, НомУдаляемойСтроки);
		Если НомерПервойЯчейкиУдаляемойСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяПервойЯчейкиУдаляемойСтроки = СтрШаблон("%1%2_%3", ИмяГруппы, 
			Формат(НомерПервойЯчейкиУдаляемойСтроки, "ЧЦ=3; ЧВН="), НомУдаляемойСтроки);
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтотОбъект, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - 1;
		НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;  // первая область - контрол удаления строки
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтотОбъект[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		СписокКолонок = СтруктураГруппы.Выгрузить().Колонки;
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НомерСтроки = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				СтрокаТаблицы = СтруктураГруппы[НомерСтроки - 1];
				НомерСдвигаемойСтроки = Формат(НомерСтроки, "ЧГ=0");
				НовыйНомерСтроки = Формат(НомерСтроки - 1, "ЧГ=0");
				
				// Сдвигаем ячейку с командой удаления строки
				ИмяКолонки = "УдалитьСтроку" + ИмяГруппы + Формат(НомерПервойЯчейкиУдаляемойСтроки, "ЧЦ=3; ЧВН=");
				СтароеИмяЯчейки = СтрШаблон("%1_%2", ИмяКолонки, НомерСдвигаемойСтроки);
				НовоеИмяЯчейки = СтрШаблон("%1_%2", ИмяКолонки, НовыйНомерСтроки);
				
				Ячейка = ТекТабличноеПоле.Области[СтароеИмяЯчейки];
				Ячейка.Имя = НовоеИмяЯчейки;
				
				// Сдвигаем ячейки содержащие значения
				Для каждого Колонка Из СписокКолонок Цикл
				
					Если ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("СписокЗначений") Тогда
						Для НомерЭлементаСписка = 0 По СтрокаТаблицы[Колонка.Имя].Количество() - 1 Цикл
							СтароеИмяЯчейки = СтрШаблон("%1_%2_%3", Колонка.Имя, НомерСдвигаемойСтроки, Формат(НомерЭлементаСписка + 1, "ЧГ=0"));
							НовоеИмяЯчейки = СтрШаблон("%1_%2_%3", Колонка.Имя, НовыйНомерСтроки, Формат(НомерЭлементаСписка + 1, "ЧГ=0"));
							
							Ячейка = ТекТабличноеПоле.Области[СтароеИмяЯчейки];
							Ячейка.Имя = НовоеИмяЯчейки;
						КонецЦикла;
					Иначе
						СтароеИмяЯчейки = СтрШаблон("%1_%2", Колонка.Имя, НомерСдвигаемойСтроки);
						НовоеИмяЯчейки = СтрШаблон("%1_%2", Колонка.Имя, НовыйНомерСтроки);
						
						Ячейка = ТекТабличноеПоле.Области[СтароеИмяЯчейки];
						Ячейка.Имя = НовоеИмяЯчейки;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	КонецЕсли;
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтрШаблон("%1%2_%3", ИмяГруппы, 
		Формат(НомерПервойЯчейкиУдаляемойСтроки, "ЧЦ=3; ЧВН="), НомТекущейСтроки);
	
	Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы[ТекТабличноеПолеИмя];
	
	СохранитьДополнительныеСтрокиВСтруктуре(ЭтотОбъект, ТекущаяСтраница, Ложь);
	
	Расчет(ЭтотОбъект, ТекущаяСтраница);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ЗначениеКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеКорректировки) Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
			ЗначениеКорректировки = 0;
		КонецЕсли;
		
		НомерКорректировки = ЗначениеКорректировки;
		СтруктураРеквизитовФормы.ВидДокумента = ?(ЗначениеКорректировки = 0, 0, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1Приложение.Очистить();
	СтруктураДанныхПриложение4.Очистить();
	СтруктураДанныхПриложение5.Очистить();
	СтруктураДанныхПриложение5Продолжение.Очистить();
	СтруктураДанныхПриложение6.Очистить();
	
	НомерКорректировки = 0;
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		ЭтотОбъект[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтотОбъект[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеПоказателяВСтруктуреНаСервере(ИмяРаздела, ИмяПоказателя, Значение);
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтотОбъект, ИмяРаздела, ИмяПоказателя, Значение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	МногостраничностьВРазделе = РазделМногостраничный(ИмяРаздела, Форма);
	КолМногострочныхЧастей = ?(РазделМногострочный(ИмяРаздела, Форма), 1, 0);
	ИмяГруппы = ?(КолМногострочныхЧастей = 0, "", Форма.СтруктураРеквизитовФормы[СтрШаблон("мИд%1", ИмяРаздела)]);
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
		
		ИмяТаблицыСтраницы = Форма.мСтруктураМногостраничныхРазделов[ИмяРаздела];
			
		ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
		АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
			Если ДанныеРазделаСписок.Количество() > 0 Тогда
				
				ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
				ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
				
			КонецЕсли;
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
				Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
					
					ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
					ДанныеДопСтрокРазделаСписок[0].Пометка = Ложь;
					
					СтруктураГруппы = Неопределено;
					Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе  //Для обычных разделов
		
		ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
		
		Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
			
			СтруктураГруппы = Неопределено;
			Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ДанныеМногострочногоРаздела = Неопределено Тогда
		Если ДанныеРаздела <> Неопределено Тогда
			Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
				ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
			Иначе
				ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			КонецЕсли
		КонецЕсли; 
	Иначе
		Если ИмяГруппы = ИмяГруппы(ИмяПоказателя) Тогда //Показатель входит в многострочную часть
			МассивСтрок = СтрРазделить(ИмяПоказателя, "_");
			Показатель = МассивСтрок[0];
			НомерСтроки = ?(МассивСтрок.Количество() > 1 И Не ПустаяСтрока(МассивСтрок[1]), Число(МассивСтрок[1]), 0);
			ДопНомерСтроки = ?(МассивСтрок.Количество() > 2 И Не ПустаяСтрока(МассивСтрок[2]), Число(МассивСтрок[2]), 0);
			
			Если НомерСтроки > 0 И ДопНомерСтроки > 0 И ДанныеМногострочногоРаздела.Количество() >= НомерСтроки Тогда
				Если ДанныеМногострочногоРаздела[НомерСтроки - 1][Показатель].Количество() < ДопНомерСтроки Тогда
					ДанныеМногострочногоРаздела[НомерСтроки - 1][Показатель].Добавить(ЗначениеПоказателя);
				Иначе
					ДанныеМногострочногоРаздела[НомерСтроки - 1][Показатель][ДопНомерСтроки - 1].Значение = ЗначениеПоказателя;
				КонецЕсли;
			ИначеЕсли (НомерСтроки > 0) И ДанныеМногострочногоРаздела.Количество() >= НомерСтроки Тогда
				ДанныеМногострочногоРаздела[НомерСтроки - 1][Показатель] = ЗначениеПоказателя;
			КонецЕсли;
			
			Если (НомерСтроки > 0) И ДанныеДопСтрокРаздела.Количество() >= НомерСтроки Тогда
				ДанныеДопСтрокРаздела[НомерСтроки - 1][Показатель] = ЗначениеПоказателя;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеРаздела <> Неопределено Тогда
			Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
				ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
			Иначе
				ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			КонецЕсли
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтотОбъект[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтотОбъект[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтотОбъект[Раздел.Значение]);
	КонецЦикла;
	
	Для Каждого ДанныеЛиста Из мДанныеОтчета.Приложение7 Цикл
		СтраницаЛиста = ДанныеЛиста.Данные[0].Значение;
		Если СтраницаЛиста.Свойство("П000700001070_1") И СтраницаЛиста.Свойство("П000700001070_3")
			И ЗначениеЗаполнено(СтраницаЛиста.П000700001070_1) И ЗначениеЗаполнено(СтраницаЛиста.П000700001070_3) Тогда
			ЗначениеЧислителя = СокрЛП(Формат(СтраницаЛиста.П000700001070_1, "ЧГ=0;"));
			ЗначениеЗнаменателя = СокрЛП(Формат(СтраницаЛиста.П000700001070_3, "ЧГ=0;"));
			СтраницаЛиста.Вставить("П000700001070", СтрШаблон("%1/%2", ЗначениеЧислителя, ЗначениеЗнаменателя));
		Иначе
			СтраницаЛиста.Вставить("П000700001070", "");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтраницаРаздела1 Из мДанныеОтчета.Раздел1 Цикл
		ЗначенияПоказателей = СтраницаРаздела1.Данные[0].Значение;
		// В Разделе 1 декларации суммы к уплате и к уменьшению по авансовым платежам 
		// отражаются в отдельных полях (100/110, 130/140, 160/170), но в выгрузку попадает только одна сумма: 
		// положительная в случае налога к уплате и отрицательная в случае налога к уменьшению.
		// Поэтому перед выгрузкой скорректируем значения тех показателей, которые попадают в выгрузку.
		
		СуммаНалогаИПКУплатеПолугодие = 0;
		СуммаНалогаИПКУменьшениюПолугодие = 0;
		Если ЗначенияПоказателей.Свойство("П000100001100", СуммаНалогаИПКУплатеПолугодие)
			И ЗначенияПоказателей.Свойство("П000100001110", СуммаНалогаИПКУменьшениюПолугодие) Тогда
			
			ЗначенияПоказателей.Вставить("П000100001100", СуммаНалогаИПКУплатеПолугодие - СуммаНалогаИПКУменьшениюПолугодие);
		КонецЕсли;
			
		СуммаНалогаИПКУплате9Месяцев = 0;
		СуммаНалогаИПКУменьшению9Месяцев = 0;
		Если ЗначенияПоказателей.Свойство("П000100001130", СуммаНалогаИПКУплате9Месяцев)
			И ЗначенияПоказателей.Свойство("П000100001140", СуммаНалогаИПКУменьшению9Месяцев) Тогда
			
			ЗначенияПоказателей.Вставить("П000100001130", СуммаНалогаИПКУплате9Месяцев - СуммаНалогаИПКУменьшению9Месяцев);
		КонецЕсли;
			
		СуммаНалогаИПКУплатеГод = 0;
		СуммаНалогаИПКУменьшениюГод = 0;
		Если ЗначенияПоказателей.Свойство("П000100001160", СуммаНалогаИПКУплатеГод)
			И ЗначенияПоказателей.Свойство("П000100001170", СуммаНалогаИПКУменьшениюГод) Тогда
			
			ЗначенияПоказателей.Вставить("П000100001160", СуммаНалогаИПКУплатеГод - СуммаНалогаИПКУменьшениюГод);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если СтрНайти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Ложь;
	Для Каждого Раздел Из Разделы Цикл
		Если Отчеты.РегламентированныйОтчет3НДФЛ.РазделПуст(
			мДанныеОтчета, ДеревоВыгрузки, Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма) Тогда
			РазделыПусты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не РазделыПусты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ДеревоВыгрузки, ПараметрыВыгрузки); // заполняем дерево данными
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рассчитывает итоги по указанному листу (если лист не указан, рассчитываются итоги на всех листах)
//  Если лист помечен активным и в табличном документе на форме есть соответствующие итогам области, их значения будут обновлены
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиЛиста(Форма, ИмяЛиста = Неопределено)
	
	Если ИмяЛиста = "Раздел2" Тогда
		
		Для Каждого СтраницаЛиста Из Форма.ТаблицаСтраницыРаздел2 Цикл
			
			Если СтраницаЛиста.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтраницы = СтраницаЛиста.Данные[0].Значение;
			РассчитатьНалоговуюБазуСтраницыРаздела2(ДанныеСтраницы);
			
		КонецЦикла;
		
		РаспределитьНалоговыеБазыРаздела2(Форма.ТаблицаСтраницыРаздел2, Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		Для Каждого СтраницаЛиста Из Форма.ТаблицаСтраницыРаздел2 Цикл
			
			Если СтраницаЛиста.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиЛиста = СтраницаЛиста.Данные[0].Значение;
			
			РасчитатьИтогиСтраницыРаздела2(ПоказателиЛиста);
			
			Если СтраницаЛиста.АктивнаяСтраница Тогда
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001030", ПоказателиЛиста.П000200001030);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001060", ПоказателиЛиста.П000200001060);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001061", ПоказателиЛиста.П000200001061);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001062", ПоказателиЛиста.П000200001062);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001063", ПоказателиЛиста.П000200001063);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001070", ПоказателиЛиста.П000200001070);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001100", ПоказателиЛиста.П000200001100);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001140", ПоказателиЛиста.П000200001140);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001150", ПоказателиЛиста.П000200001150);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000200001160", ПоказателиЛиста.П000200001160);
			КонецЕсли;
			
		КонецЦикла;
		
		// Сумма налога в упрощенном порядке
		// Автоматически заполним, если один вид дохода - иначе распределять вручную
		Если Форма.ТаблицаСтраницыРаздел2.Количество() = 1 Тогда
			
			ПоказателиЛиста = Форма.ТаблицаСтраницыРаздел2[0].Данные[0].Значение;
			ПоказателиЛиста.П000200001170 = Форма.СтруктураДанныхПриложение5Продолжение.П000900001230;
			Для Каждого СтраницаЛиста Из Форма.ТаблицаСтраницыПриложение7 Цикл
				Если СтраницаЛиста.Данные.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПоказателиИмущественногоВычета = СтраницаЛиста.Данные[0].Значение;
				ПоказателиЛиста.П000200001170 = ПоказателиЛиста.П000200001170
					+ ПоказателиИмущественногоВычета.П000700001121
					+ ПоказателиИмущественногоВычета.П000700001131;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяЛиста = "Приложение3" Тогда
		
		ИтоговыеПоказатели = Новый Структура();
		ИтоговыеПоказатели.Вставить("СуммаДоходаИП", 0);
		ИтоговыеПоказатели.Вставить("СуммаВычетаИП", 0);
		ИтоговыеПоказатели.Вставить("СуммаАвансовыхПлатежейИП", 0);
		ИтоговыеПоказатели.Вставить("ГодРегистрацииКФХ", "");
		ИтоговыеПоказатели.Вставить("СуммаКорректировкиНалоговойБазы", 0);
		ИтоговыеПоказатели.Вставить("СуммаКорректировкиНалога", 0);
		
		СтраницаИтоговПриложения3 = Неопределено;
		
		Для Каждого Лист Из Форма.ТаблицаСтраницыПриложение3 Цикл
			
			Если Лист.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЛиста = Лист.Данные[0].Значение;
			
			ИтоговыеПоказатели.СуммаДоходаИП = ИтоговыеПоказатели.СуммаДоходаИП + СтрокаЛиста.П000500001030;
			ИтоговыеПоказатели.СуммаВычетаИП = ИтоговыеПоказатели.СуммаВычетаИП + СтрокаЛиста.П000500001040;
			Если ИтоговыеПоказатели.СуммаАвансовыхПлатежейИП = 0 И СтрокаЛиста.П000500001070 <> 0 Тогда
				ИтоговыеПоказатели.СуммаАвансовыхПлатежейИП = СтрокаЛиста.П000500001070;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИтоговыеПоказатели.ГодРегистрацииКФХ)
				И ЗначениеЗаполнено(СтрокаЛиста.П000500001080) Тогда
				ИтоговыеПоказатели.ГодРегистрацииКФХ = СтрокаЛиста.П000500001080;
			КонецЕсли;
			Если ИтоговыеПоказатели.СуммаКорректировкиНалоговойБазы = 0 И СтрокаЛиста.П000500001090 <> 0 Тогда
				ИтоговыеПоказатели.СуммаКорректировкиНалоговойБазы = СтрокаЛиста.П000500001090;
			КонецЕсли;
			Если ИтоговыеПоказатели.СуммаКорректировкиНалога = 0 И СтрокаЛиста.П000500001100 <> 0 Тогда
				ИтоговыеПоказатели.СуммаКорректировкиНалога = СтрокаЛиста.П000500001100;
			КонецЕсли;
			
			// Очищаем итоговые показатели
			СтрокаЛиста.П000500001050 = 0; // Итого: Общая сумма дохода
			СтрокаЛиста.П000500001060 = 0; // Итого: Сумма профессионального налогового вычета
			СтрокаЛиста.П000500001070 = 0; // Итого: Сумма фактически уплаченных авансовых платежей по налогу
			СтрокаЛиста.П000500001080 = ""; // Итого: Год регистрации крестьянского хозяйства
			СтрокаЛиста.П000500001090 = 0; // Итого: Сумма корректировки налоговой базы
			СтрокаЛиста.П000500001100 = 0; // Итого: Сумма корректировки налога
			
			СтраницаИтоговПриложения3 = Лист;
			
		КонецЦикла;
		
		Если ИтоговыеПоказатели.СуммаВычетаИП = 0 Тогда
			// Вычет в размере 20% процентов от общей суммы доходов
			ПроцентПрофВычета = ПроцентПрофессиональногоВычета(Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
			ИтоговыеПоказатели.СуммаВычетаИП =
				Окр(ИтоговыеПоказатели.СуммаДоходаИП * ПроцентПрофВычета / 100, 2);
		КонецЕсли;
		
		Если СтраницаИтоговПриложения3 <> Неопределено Тогда
			
			СтрокаЛиста = СтраницаИтоговПриложения3.Данные[0].Значение;
			
			СтрокаЛиста.П000500001050 = ИтоговыеПоказатели.СуммаДоходаИП;
			СтрокаЛиста.П000500001060 = ИтоговыеПоказатели.СуммаВычетаИП;
			СтрокаЛиста.П000500001070 = ИтоговыеПоказатели.СуммаАвансовыхПлатежейИП;
			СтрокаЛиста.П000500001080 = ИтоговыеПоказатели.ГодРегистрацииКФХ;
			СтрокаЛиста.П000500001090 = ИтоговыеПоказатели.СуммаКорректировкиНалоговойБазы;
			СтрокаЛиста.П000500001100 = ИтоговыеПоказатели.СуммаКорректировкиНалога;
			
			Если СтраницаИтоговПриложения3.АктивнаяСтраница Тогда
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001050", СтрокаЛиста.П000500001050);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001060", СтрокаЛиста.П000500001060);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001070", СтрокаЛиста.П000500001070);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001080", СтрокаЛиста.П000500001080);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001090", СтрокаЛиста.П000500001090);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000500001100", СтрокаЛиста.П000500001100);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяЛиста = "Приложение3Продолжение" Тогда
		
		ПрогрессивнаяШкала = ПрогрессивнаяШкала(Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		Если Форма.ТаблицаСтраницыПриложение3.Количество() <> 0
			И Форма.ТаблицаСтраницыПриложение3Продолжение[0].Данные.Количество() <> 0 Тогда
			
			ПоказателиЛиста = Форма.ТаблицаСтраницыПриложение3Продолжение[0].Данные[0].Значение;
			
			ПоказателиЛиста.П002000001200 = СуммаНалогаПоПрогрессивнойШкале(ПоказателиЛиста.П002000001190, ПрогрессивнаяШкала);
			ПоказателиЛиста.П002000001201 = СуммаНалогаПоПрогрессивнойШкале(ПоказателиЛиста.П002000001191, ПрогрессивнаяШкала);
			ПоказателиЛиста.П002000001202 = СуммаНалогаПоПрогрессивнойШкале(ПоказателиЛиста.П002000001192, ПрогрессивнаяШкала);
			
			Если Форма.ТаблицаСтраницыПриложение3Продолжение[0].АктивнаяСтраница Тогда
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П002000001200", ПоказателиЛиста.П002000001200);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П002000001201", ПоказателиЛиста.П002000001201);
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П002000001202", ПоказателиЛиста.П002000001202);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяЛиста = "Приложение4" Тогда
		
		ПоказателиЛиста = Форма.СтруктураДанныхПриложение4;
		ПоказателиЛиста.П000600001120 = 
			ПоказателиЛиста.П000600001010 +
			ПоказателиЛиста.П000600001020 +
			ПоказателиЛиста.П000600001030 +
			ПоказателиЛиста.П000600001040 +
			ПоказателиЛиста.П000600001050 +
			ПоказателиЛиста.П000600001060 +
			ПоказателиЛиста.П000600001070 +
			ПоказателиЛиста.П000600001080 +
			ПоказателиЛиста.П000600001090 +
			ПоказателиЛиста.П000600001100 +
			ПоказателиЛиста.П000600001110;
		
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000600001120", ПоказателиЛиста.П000600001120);
		
	ИначеЕсли ИмяЛиста = "Приложение6" Тогда
		
		ПоказателиЛиста = Форма.СтруктураДанныхПриложение6;
		
		ПоказателиЛиста.П000800001160 = ПоказателиЛиста.П000800001010
			+ ПоказателиЛиста.П000800001020
			+ ПоказателиЛиста.П000800001030
			+ ПоказателиЛиста.П000800001040
			+ ПоказателиЛиста.П000800001050
			+ ПоказателиЛиста.П000800001060
			+ ПоказателиЛиста.П000800001070
			+ ПоказателиЛиста.П000800001080
			+ ПоказателиЛиста.П000800001090
			+ ПоказателиЛиста.П000800001100
			+ ПоказателиЛиста.П000800001110
			+ ПоказателиЛиста.П000800001120
			+ ПоказателиЛиста.П000800001130
			+ ПоказателиЛиста.П000800001140
			+ ПоказателиЛиста.П000800001150;
		
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000800001160", ПоказателиЛиста.П000800001160);
		
	ИначеЕсли ИмяЛиста = "Приложение7" Тогда
		
		// Превышение предела вычета на проценты не вычисляем, поскольку не можем определить год оформления кредита.
		// Для кредитов полученных до 2014 года предел вычета не применяется.
		// Считаем, что пользователь указал в строке 090 правильную сумму, доступную к вычету.
		СуммаДохода = СуммаДоходаДляИмущественногоВычета(
			Форма.АдресСводаДоходов, Форма.АдресСводаВычетов, Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		СтраницаИтогов = Неопределено;
		
		ПределВычетаНаПриобретение = ПределВычета("НаПриобретениеНедвижимостиСтоимость", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ВсегоНаПриобретение = 0;
		ОстатокВычетаНаПриобретение = ПределВычетаНаПриобретение;
		
		ВсегоПоПроцентам = 0;
		
		// Собираем информацию по вычетам по всем листам
		Для Каждого СтраницаЛиста Из Форма.ТаблицаСтраницыПриложение7 Цикл
			
			Если СтраницаЛиста.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтраницаИтогов  = СтраницаЛиста;
			ПоказателиЛиста = СтраницаЛиста.Данные[0].Значение;
			
			Если ПоказателиЛиста.П000700001080 > ОстатокВычетаНаПриобретение Тогда
				ПоказателиЛиста.П000700001080 = ОстатокВычетаНаПриобретение;
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001080", ПоказателиЛиста.П000700001080);
			КонецЕсли;
			
			ВсегоНаПриобретение = ВсегоНаПриобретение + ПоказателиЛиста.П000700001080;
			ОстатокВычетаНаПриобретение = Макс(0, ОстатокВычетаНаПриобретение - ПоказателиЛиста.П000700001080);
			
			ВсегоПоПроцентам = ВсегоПоПроцентам + ПоказателиЛиста.П000700001090;
			
		КонецЦикла;
		
		ВсегоНаПриобретение = Мин(ВсегоНаПриобретение, ПределВычетаНаПриобретение);
		
		Если СтраницаИтогов <> Неопределено Тогда
			
			ПоказателиЛиста = СтраницаИтогов.Данные[0].Значение;
			
			// Сумма дохода - налоговая база, вычисленная по формуле
			ПоказателиЛиста.Вставить("П000700001140", СуммаДохода);
			
			// Рассчитываем вычет на приобретение
			Если Не ПоказателиЛиста.Свойство("П000700001100") Тогда
				ПоказателиЛиста.Вставить("П000700001100", 0);
			КонецЕсли;
			
			Если Не ПоказателиЛиста.Свойство("П000700001120") Тогда
				ПоказателиЛиста.Вставить("П000700001120", 0);
			КонецЕсли;
			
			Если Не ПоказателиЛиста.Свойство("П000700001121") Тогда
				ПоказателиЛиста.Вставить("П000700001121", 0);
			КонецЕсли;

			Если Не ПоказателиЛиста.Свойство("П000700001150") Тогда
				ПоказателиЛиста.Вставить("П000700001150", 0);
			КонецЕсли;
			
			ОстатокВычетаНаПриобретение = Макс(
				ВсегоНаПриобретение - ПоказателиЛиста.П000700001100 - ПоказателиЛиста.П000700001120 - ПоказателиЛиста.П000700001121,
				0);
			
			ПринимаемыйВычетНаПриобретение = Мин(СуммаДохода, ОстатокВычетаНаПриобретение);
			ЗаданныйВычетНаПриобретение = Неопределено;
			Если ПоказателиЛиста.Свойство("П000700001150", ЗаданныйВычетНаПриобретение) Тогда
				ПринимаемыйВычетНаПриобретение = Мин(ПринимаемыйВычетНаПриобретение, ЗаданныйВычетНаПриобретение);
			КонецЕсли;
			ПоказателиЛиста.Вставить("П000700001150", ПринимаемыйВычетНаПриобретение);
			
			ПоказателиЛиста.Вставить("П000700001170", Макс(ОстатокВычетаНаПриобретение - ПринимаемыйВычетНаПриобретение, 0));
			
			// Рассчитываем вычет по процентам
			Если Не ПоказателиЛиста.Свойство("П000700001110") Тогда
				ПоказателиЛиста.Вставить("П000700001110", 0);
			КонецЕсли;
			
			Если Не ПоказателиЛиста.Свойство("П000700001130") Тогда
				ПоказателиЛиста.Вставить("П000700001130", 0);
			КонецЕсли;
			
			Если Не ПоказателиЛиста.Свойство("П000700001131") Тогда
				ПоказателиЛиста.Вставить("П000700001131", 0);
			КонецЕсли;
			
			// Сумму дохода нужно уменьшить на сумму рассчитанного вычета по расходам на приобретение
			СуммаДохода = СуммаДохода - ПринимаемыйВычетНаПриобретение;
			
			ОстатокВычетаПоПроцентам = Макс(
				ВсегоПоПроцентам - ПоказателиЛиста.П000700001110 - ПоказателиЛиста.П000700001130 - ПоказателиЛиста.П000700001131,
				0);
			
			ПринимаемыйВычетПоПроцентам = Мин(СуммаДохода, ОстатокВычетаПоПроцентам);
			ЗаданныйВычетПоПроцентам = 0;
			Если ПоказателиЛиста.Свойство("П000700001160", ЗаданныйВычетПоПроцентам) Тогда
				ПринимаемыйВычетПоПроцентам = Мин(ПринимаемыйВычетПоПроцентам, ЗаданныйВычетПоПроцентам);
			КонецЕсли;
			
			ПоказателиЛиста.Вставить("П000700001160", ПринимаемыйВычетПоПроцентам);
			
			ПоказателиЛиста.Вставить("П000700001180", Макс(ОстатокВычетаПоПроцентам - ПринимаемыйВычетПоПроцентам, 0));
			
			ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001140", ПоказателиЛиста.П000700001140);
			ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001150", ПоказателиЛиста.П000700001150);
			ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001160", ПоказателиЛиста.П000700001160);
			ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001170", ПоказателиЛиста.П000700001170);
			ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000700001180", ПоказателиЛиста.П000700001180);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоРазделПриложения5(ИмяЛиста) Тогда
		
		ПоказателиЛиста = Форма.СтруктураДанныхПриложение5;
		ПоказателиЛистаПродолжение = Форма.СтруктураДанныхПриложение5Продолжение;
		ПределСоциальногоВычета = ПределВычета("СоциальныеВычеты", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		// Общая сумма стандартных налоговых вычетов
		ПоказателиЛиста.П000900001080 = Макс(0,
			  ПоказателиЛиста.П000900001010
			+ ПоказателиЛиста.П000900001020
			+ ПоказателиЛиста.П000900001030
			+ ПоказателиЛиста.П000900001040
			+ ПоказателиЛиста.П000900001050
			+ ПоказателиЛиста.П000900001060
			- ПоказателиЛиста.П000900001070);
		
		// Итого по п. 2
		ПоказателиЛиста.П000900001120 =
			  ПоказателиЛиста.П000900001090
			+ ПоказателиЛиста.П000900001100
			+ ПоказателиЛиста.П000900001110;
		
		// Общая сумма расходов
		ПоказателиЛистаПродолжение.П000900001180 = Мин(ПределСоциальногоВычета,
			ПоказателиЛистаПродолжение.П000900001130
			+ ПоказателиЛистаПродолжение.П000900001140
			+ ПоказателиЛистаПродолжение.П000900001141
			+ ПоказателиЛистаПродолжение.П000900001150
			+ ПоказателиЛистаПродолжение.П000900001160
			+ ПоказателиЛистаПродолжение.П000900001170
			+ ПоказателиЛистаПродолжение.П000900001171);
		
		// Общая сумма социальных налоговых вычетов
		ПоказателиЛистаПродолжение.П000900001190 = Макс(ПоказателиЛиста.П000900001120 + ПоказателиЛистаПродолжение.П000900001180 - ПоказателиЛистаПродолжение.П000900001181, 0);
		
		// Общая сумма стандартных и социальных налоговых вычетов
		ПоказателиЛистаПродолжение.П000900001200 = ПоказателиЛиста.П000900001080 + ПоказателиЛистаПродолжение.П000900001190;
		
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000900001080", ПоказателиЛиста.П000900001080);
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000900001120", ПоказателиЛиста.П000900001120);
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000900001180", ПоказателиЛистаПродолжение.П000900001180);
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000900001190", ПоказателиЛистаПродолжение.П000900001190);
		ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П000900001200", ПоказателиЛистаПродолжение.П000900001200);
		
	ИначеЕсли ИмяЛиста = "Приложение5Расчет" Тогда
		
		ОбщаяСуммаВзносовПенсионныйФонд = 0;
		
		СтраницаИтоговПриложение5Расчет = Неопределено;
		
		Для Каждого Лист Из Форма.ТаблицаСтраницыПриложение5Расчет Цикл
			
			Если Лист.Данные.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаЛиста = Лист.Данные[0].Значение;
			
			ОбщаяСуммаВзносовПенсионныйФонд = ОбщаяСуммаВзносовПенсионныйФонд + СтрокаЛиста.П001000001060 + СтрокаЛиста.П001000001070;
			
			// Очищаем итоговые показатели
			СтрокаЛиста.П001000001080 = 0; // Общая сумма взносов, принимаемая к вычету
			
			СтраницаИтоговПриложение5Расчет = Лист;
			
		КонецЦикла;
		
		// Обновим связанный показатель Приложения 5
		Форма.СтруктураДанныхПриложение5Продолжение.П000900001160 = ОбщаяСуммаВзносовПенсионныйФонд;
		
		Если СтраницаИтоговПриложение5Расчет <> Неопределено Тогда
			
			СтрокаЛиста = СтраницаИтоговПриложение5Расчет.Данные[0].Значение;
			СтрокаЛиста.П001000001080 = ОбщаяСуммаВзносовПенсионныйФонд;
			
			Если СтраницаИтоговПриложение5Расчет.АктивнаяСтраница Тогда
				ЗаполнитьОбластьТабличногоДокумента(Форма.ТабличныйДокумент, "П001000001080", ОбщаяСуммаВзносовПенсионныйФонд);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ИмяЛиста) Тогда
		
		Для Каждого СтрокаДерева Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			Если СтрЗаканчиваетсяНа(СтрокаДерева.ИмяСтраницы, "Расчет") Тогда
				РассчитатьИтогиЛиста(Форма, СтрокаДерева.ИмяСтраницы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДерева Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			Если Не СтрЗаканчиваетсяНа(СтрокаДерева.ИмяСтраницы, "Расчет")
				И Не СтрНачинаетсяС(СтрокаДерева.ИмяСтраницы, "Раздел") Тогда
				РассчитатьИтогиЛиста(Форма, СтрокаДерева.ИмяСтраницы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДерева Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			Если СтрНачинаетсяС(СтрокаДерева.ИмяСтраницы, "Раздел") Тогда
				РассчитатьИтогиЛиста(Форма, СтрокаДерева.ИмяСтраницы);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОбластьТабличногоДокумента(ТабличныйДокумент, ИмяОбласти, Значение)
	
	Если ТабличныйДокумент.Области.Найти(ИмяОбласти) <> Неопределено Тогда
		ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводныеТаблицы()
	
	СводДоходов = СводДоходов();
	СводВычетов = РаспределитьВычеты(СводДоходов, СводВычетов(), СтруктураРеквизитовФормы.мВыбраннаяФорма);
	НалоговыеБазы = НалоговыеБазы(СводДоходов, СводВычетов, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если ЭтоАдресВременногоХранилища(АдресСводаДоходов) Тогда
		УдалитьИзВременногоХранилища(АдресСводаДоходов);
	КонецЕсли;
	АдресСводаДоходов = ПоместитьВоВременноеХранилище(СводДоходов, УникальныйИдентификатор);
	
	Если ЭтоАдресВременногоХранилища(АдресСводаВычетов) Тогда
		УдалитьИзВременногоХранилища(АдресСводаВычетов);
	КонецЕсли;
	АдресСводаВычетов = ПоместитьВоВременноеХранилище(СводВычетов, УникальныйИдентификатор);
	
	Если ЭтоАдресВременногоХранилища(АдресНалоговыхБаз) Тогда
		УдалитьИзВременногоХранилища(АдресНалоговыхБаз);
	КонецЕсли;
	АдресНалоговыхБаз = ПоместитьВоВременноеХранилище(НалоговыеБазы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция СводДоходов()
	
	СводДоходов = Новый ТаблицаЗначений;
	СводДоходов.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	СводДоходов.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	СводДоходов.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	СводДоходов.Колонки.Добавить("СуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СводДоходов.Колонки.Добавить("УдержаноНалога", ОбщегоНазначения.ОписаниеТипаЧисло(13, 0));
	СводДоходов.Колонки.Добавить("НачисленоНалога", ОбщегоНазначения.ОписаниеТипаЧисло(13, 0));
	СводДоходов.Колонки.Добавить("СуммаНалогаИностранногоГосударства", ОбщегоНазначения.ОписаниеТипаЧисло(13, 0));
	СводДоходов.Колонки.Добавить("УплаченоНалога", ОбщегоНазначения.ОписаниеТипаЧисло(13, 0));
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	НалоговыеСтавки = НалоговыеСтавки(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	// Приложение 1
	
	Для Каждого Лист Из ТаблицаСтраницыПриложение1 Цикл
		
		Если Лист.Данные.Количество() = 0 Или Лист.ДанныеДопСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для Каждого СтрокаЛиста Из Лист.ДанныеДопСтрок[0].Значение Цикл
			
			КодВидаДохода = СтрокаЛиста.П000300001010;
			НалоговаяСтавка = СтрокаЛиста.П000300001020;
			ОКТМО = СтрокаЛиста.П000300001050;
			СуммаДохода = СтрокаЛиста.П000300001070;
			СуммаНалогаУдержанная = СтрокаЛиста.П000300001080;
			
			Если Не ЗначениеЗаполнено(КодВидаДохода)
				Или Не ЗначениеЗаполнено(СуммаДохода) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОКТМО) Тогда
				ОКТМО = СтруктураРеквизитовФормы.ОКТМО; // ОКТМО налогоплательщика
			КонецЕсли;
			
			НалоговаяСтавка = СтавкаНалогаДляСводаДоходов(НалоговыеСтавки[КодВидаДохода], НалоговаяСтавка);
			
			СтрокаДохода = СводДоходов.Добавить();
			СтрокаДохода.ОКТМО = ОКТМО;
			СтрокаДохода.ВидДохода = КодВидаДохода;
			СтрокаДохода.НалоговаяСтавка = НалоговаяСтавка;
			СтрокаДохода.СуммаДохода = СуммаДохода;
			СтрокаДохода.УдержаноНалога = СуммаНалогаУдержанная;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 2
	
	Для Каждого Лист Из ТаблицаСтраницыПриложение2 Цикл
		
		Если Лист.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиЛиста = Лист.Данные[0].Значение;
		
		КодВидаДоходаЗаПределамиРФ = ПоказателиЛиста.П000400001031;
		НалоговаяСтавкаДоходаЗаПределамиРФ = ПоказателиЛиста.П000400001041;
		СуммаРубДоходаЗаПределамиРФ = ПоказателиЛиста.П000400001070;
		СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ = ПоказателиЛиста.П000400001160;
		СуммаПодлежащаяЗачетуВРФ = ПоказателиЛиста.П000400001170;
		
		Если Не ЗначениеЗаполнено(КодВидаДоходаЗаПределамиРФ)
			Или Не ЗначениеЗаполнено(СуммаРубДоходаЗаПределамиРФ) Тогда
			Продолжить;
		КонецЕсли;
		
		НалоговаяСтавка = СтавкаНалогаДляСводаДоходов(НалоговыеСтавки[КодВидаДоходаЗаПределамиРФ], НалоговаяСтавкаДоходаЗаПределамиРФ);
		
		СтрокаДохода = СводДоходов.Добавить();
		СтрокаДохода.ОКТМО  = СтруктураРеквизитовФормы.ОКТМО; // ОКТМО налогоплательщика
		СтрокаДохода.ВидДохода = КодВидаДоходаЗаПределамиРФ;
		СтрокаДохода.НалоговаяСтавка = НалоговаяСтавка;
		СтрокаДохода.СуммаДохода = СуммаРубДоходаЗаПределамиРФ;
		СтрокаДохода.НачисленоНалога = СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
		СтрокаДохода.СуммаНалогаИностранногоГосударства = СуммаПодлежащаяЗачетуВРФ;
		
	КонецЦикла;
	
	// Приложение 3
	
	СтраницаИтоговПриложения3 = Неопределено;
	Если ТаблицаСтраницыПриложение3.Количество() > 0 Тогда
		ПоследнийЛист = ТаблицаСтраницыПриложение3[ТаблицаСтраницыПриложение3.Количество() - 1];
		Если ПоследнийЛист.Данные.Количество() > 0 Тогда
			СтраницаИтоговПриложения3 = ПоследнийЛист;
		КонецЕсли;
	КонецЕсли;
	
	Если СтраницаИтоговПриложения3 <> Неопределено Тогда
		
		СтрокаЛиста = СтраницаИтоговПриложения3.Данные[0].Значение;
		
		КодВидаДеятельностиИП = СтрокаЛиста.П000500001010;
		ОбщаяСуммаДоходаИП = СтрокаЛиста.П000500001050;
		СуммаУплаченныхАвансовыхПлатежейИП = СтрокаЛиста.П000500001070;
		
		Если ЗначениеЗаполнено(КодВидаДеятельностиИП) Или ОбщаяСуммаДоходаИП <> 0 Тогда
			СтрокаДохода = СводДоходов.Добавить();
			СтрокаДохода.ОКТМО =  СтруктураРеквизитовФормы.ОКТМО; // ОКТМО налогоплательщика
			СтрокаДохода.ВидДохода = ВидыДоходов.ПредпринимательскаяДеятельность;
			СтрокаДохода.НалоговаяСтавка = СтавкаНалогаДляСводаДоходов(НалоговыеСтавки[СтрокаДохода.ВидДохода], НалоговыеСтавки);
			СтрокаДохода.СуммаДохода = ОбщаяСуммаДоходаИП;
			СтрокаДохода.УплаченоНалога = СуммаУплаченныхАвансовыхПлатежейИП;
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 5
	
	ИнвестиционныйВычетКВосстановлению = СтруктураДанныхПриложение5Продолжение.П000900001220;
	Если ИнвестиционныйВычетКВосстановлению <> 0 Тогда
		СтрокаДохода = СводДоходов.Добавить();
		СтрокаДохода.ОКТМО = СтруктураРеквизитовФормы.ОКТМО; // ОКТМО налогоплательщика
		СтрокаДохода.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале;
		СтрокаДохода.НалоговаяСтавка = СтавкаНалогаДляСводаДоходов(НалоговыеСтавки[СтрокаДохода.ВидДохода], НалоговыеСтавки);
		СтрокаДохода.СуммаДохода = ИнвестиционныйВычетКВосстановлению;
	КонецЕсли;
	
	Возврат СводДоходов;
	
КонецФункции

&НаСервере
Функция СводВычетов()
	
	СводВычетов = Новый ТаблицаЗначений;
	СводВычетов.Колонки.Добавить("ВидВычета", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СводВычетов.Колонки.Добавить("СуммаДоходовНеПодлежащаяНалогообложению", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СводВычетов.Колонки.Добавить("СуммаНалоговыхВычетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СводВычетов.Колонки.Добавить("СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СводВычетов.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.СтатусНалогоплательщика) Тогда
		КодыСтатусовНалогоплательщика = КодыСтатусовНалогоплательщика(СтруктураРеквизитовФормы.мВыбраннаяФорма);
		Если СтруктураДанныхТитульный.СтатусНалогоплательщика <> КодыСтатусовНалогоплательщика.НалоговыйРезидент Тогда
			Возврат СводВычетов;
		КонецЕсли;
	КонецЕсли;
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ВидыВычетов = ВидыВычетов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	// Приложение 2
	
	КодыВидаОсвобождения = КодыВидаОсвобожденияОтНалогообложенияЗаПределамиРФ(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого Лист Из ТаблицаСтраницыПриложение2 Цикл
		
		Если Лист.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиЛиста = Лист.Данные[0].Значение;
		
		КодВидаДоходаЗаПределамиРФ                              = ПоказателиЛиста.П000400001031;
		СуммаДоходаОсвобождаемогоОтНалогообложенияЗаПределамиРФ = ПоказателиЛиста.П000400001080;
		КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ       = ПоказателиЛиста.П000400001090;
		
		Если ЗначениеЗаполнено(КодВидаДоходаЗаПределамиРФ)
			И ЗначениеЗаполнено(СуммаДоходаОсвобождаемогоОтНалогообложенияЗаПределамиРФ)
			И ЗначениеЗаполнено(КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ) Тогда
			
			ВидВычетаДоходаЗаПределамиРФ = Неопределено;
			Если КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ = КодыВидаОсвобождения.СтоимостьИмуществаПриЛиквидацииКИК Тогда
				ВидВычетаДоходаЗаПределамиРФ = ВидыВычетов.СуммаРубСтоимостиИмуществаПриЛиквидацииКИК;
			ИначеЕсли КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ = КодыВидаОсвобождения.ЦенныеБумагиКИК Тогда
				ВидВычетаДоходаЗаПределамиРФ = ВидыВычетов.СуммаРубЦенныеБумагиКИК;
			ИначеЕсли КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ = КодыВидаОсвобождения.ДивидендыКИК Тогда
				ВидВычетаДоходаЗаПределамиРФ = ВидыВычетов.СуммаРубДивидендыКИК;
			КонецЕсли;
			
			Если ВидВычетаДоходаЗаПределамиРФ <> Неопределено Тогда
				СтрокаВычета = СводВычетов.Добавить();
				СтрокаВычета.ВидВычета = ВидВычетаДоходаЗаПределамиРФ;
				СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению = СуммаДоходаОсвобождаемогоОтНалогообложенияЗаПределамиРФ;
				СтрокаВычета.ВидДохода = КодВидаДоходаЗаПределамиРФ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 3
	
	СтраницаИтоговПриложения3 = Неопределено;
	Для Каждого Лист Из ТаблицаСтраницыПриложение3 Цикл
		
		Если Лист.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЛиста = Лист.Данные[0].Значение;
		
		// Вычет в сумме фактически произведенных и документально подтвержденных расходов, непосредственно
		// связанных с выполнением этих работ (оказанием услуг) по договорам ГПХ, авторским вознаграждениям и т.п.
		
		ОбщаяСуммаПрофессиональныхВычетов = СтрокаЛиста.П000500001150;
		Если ОбщаяСуммаПрофессиональныхВычетов <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.ОбщаяСуммаПрофессиональныхВычетов;
			СтрокаВычета.СуммаНалоговыхВычетов = ОбщаяСуммаПрофессиональныхВычетов;
			СтрокаВычета.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале; // Доход выплачивается налоговым агентом
		КонецЕсли;
		
		СтраницаИтоговПриложения3 = Лист;
		
	КонецЦикла;
	
	Если СтраницаИтоговПриложения3 <> Неопределено Тогда
		
		СтрокаЛиста = СтраницаИтоговПриложения3.Данные[0].Значение;
		
		ОбщаяСуммаВычетаИП = СтрокаЛиста.П000500001060;
		Если ОбщаяСуммаВычетаИП <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.ОбщаяСуммаВычетаИП;
			СтрокаВычета.СуммаНалоговыхВычетов = ОбщаяСуммаВычетаИП;
			СтрокаВычета.ВидДохода = ВидыДоходов.ПредпринимательскаяДеятельность;
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 4
	
	// Стоимость подарков, полученных налогоплательщиками от организаций или индивидуальных предпринимателей
	СтоимостьПодарковНеПодлежащаяНалогообложению = СтруктураДанныхПриложение4.П000600001020;
	Если СтоимостьПодарковНеПодлежащаяНалогообложению <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению  = СтоимостьПодарковНеПодлежащаяНалогообложению;
		СтрокаВычета.ВидДохода = ВидыДоходов.ПодарокСтраховаяВыплата;  // Код дохода 17 по ставке 13%
	КонецЕсли;
	
	// Стоимость призов в денежной и натуральной формах, полученных налогоплательщиками на конкурсах и соревнованиях,
	// проводимых в соответствии с решениями Правительства Российской Федерации, законодательных (представительных)
	// органов государственной власти или представительных органов местного самоуправления
	СтоимостьПризовНеПодлежащаяНалогообложению = СтруктураДанныхПриложение4.П000600001030;
	Если СтоимостьПризовНеПодлежащаяНалогообложению <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению  = СтоимостьПризовНеПодлежащаяНалогообложению;
		СтрокаВычета.ВидДохода = ВидыДоходов.ВыигрышиВЛотереяхАзартныхИграх; // Код дохода 02 по ставке 13/15%
	КонецЕсли;
	
	// Стоимость любых выигрышей и призов, получаемых в проводимых конкурсах, играх и других мероприятиях
	// в целях рекламы товаров (работ, услуг);
	СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению = СтруктураДанныхПриложение4.П000600001060;
	Если СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению  = СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению;
		СтрокаВычета.ВидДохода = ВидыДоходов.ВыигрышЭкономияНаПроцентахПаи; // Код дохода 19 по ставке 35%
	КонецЕсли;
	
	СуммаДоходовНеПодлежащаяНалогообложению = СтруктураДанныхПриложение4.П000600001120;
	СуммаПрочихДоходовНеПодлежащаяНалогообложению = Макс(СуммаДоходовНеПодлежащаяНалогообложению
		- СтоимостьПодарковНеПодлежащаяНалогообложению
		- СтоимостьПризовНеПодлежащаяНалогообложению
		- СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению, 0);
		
	Если СуммаПрочихДоходовНеПодлежащаяНалогообложению <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению = СуммаПрочихДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.ВидДохода = ""; // Подлежит распределению
	КонецЕсли;
	
	// Приложение 5
	
	СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами = СтруктураДанныхПриложение5.П000900001070;
	Если  СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами;
		СтрокаВычета.СуммаНалоговыхВычетов = СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами;
		СтрокаВычета.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале; // Уже предоставлен
	КонецЕсли;
	
	СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами = СтруктураДанныхПриложение5Продолжение.П000900001181;
	Если  СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами;
		СтрокаВычета.СуммаНалоговыхВычетов = СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами;
		СтрокаВычета.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале; // Уже предоставлен
	КонецЕсли;
	
	ОбщаяСуммаСтандартныхСоциальныхВычетов = СтруктураДанныхПриложение5Продолжение.П000900001200;
	Если  ОбщаяСуммаСтандартныхСоциальныхВычетов <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета  = ВидыВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов;
		СтрокаВычета.СуммаНалоговыхВычетов = ОбщаяСуммаСтандартныхСоциальныхВычетов;
		СтрокаВычета.ВидДохода = ""; // Подлежит распределению
	КонецЕсли;
	
	// Вычет в сумме денежных средств, внесенных налогоплательщиком в налоговом периоде на индивидуальный инвестиционный счет
	ИнвестиционныйВычет = СтруктураДанныхПриложение5Продолжение.П000900001210;
	Если ИнвестиционныйВычет <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.ИнвестиционныйВычет;
		СтрокаВычета.СуммаНалоговыхВычетов = ИнвестиционныйВычет;
		СтрокаВычета.ВидДохода = ""; // Подлежит распределению
	КонецЕсли;
	
	// Вычет в сумме денежных средств, внесенных налогоплательщиком в налоговом периоде на индивидуальный инвестиционный счет,
	// предоставленный в упрощенном порядке
	ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке = СтруктураДанныхПриложение5Продолжение.П000900001230;
	Если ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке;
		СтрокаВычета.СуммаНалоговыхВычетов = ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке;
		СтрокаВычета.ВидДохода = ""; // Подлежит распределению
	КонецЕсли;
	
	// Приложение 6
	
	ОбщаяСуммаИмущественногоВычета = СтруктураДанныхПриложение6.П000800001160;
	Если ОбщаяСуммаИмущественногоВычета <> 0 Тогда
		СтрокаВычета = СводВычетов.Добавить();
		СтрокаВычета.ВидВычета = ВидыВычетов.ОбщаяСуммаИмущественногоВычета;
		СтрокаВычета.СуммаНалоговыхВычетов = ОбщаяСуммаИмущественногоВычета;
		СтрокаВычета.ВидДохода = ВидыДоходов.ПродажаИмущества; // Код дохода 18 по ставке 13%
	КонецЕсли;
	
	// Приложение 7
	
	СтраницаИтоговПриложения7 = Неопределено;
	Если ТаблицаСтраницыПриложение7.Количество() > 0 Тогда
		ПоследнийЛист = ТаблицаСтраницыПриложение7[ТаблицаСтраницыПриложение7.Количество() - 1];
		Если ПоследнийЛист.Данные.Количество() > 0 Тогда
			СтраницаИтоговПриложения7 = ПоследнийЛист;
		КонецЕсли;
	КонецЕсли;
	
	Если СтраницаИтоговПриложения7 <> Неопределено Тогда
		
		ПоказателиЛиста = СтраницаИтоговПриложения7.Данные[0].Значение;
		
		СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы = 0;
		Если ПоказателиЛиста.Свойство("П000700001120", СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы)
			И СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы;
			СтрокаВычета.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале; // Уже предоставлен
		КонецЕсли;
		
		СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы = 0;
		Если ПоказателиЛиста.Свойство("П000700001121", СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы)
			И СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы;
			СтрокаВычета.ВидДохода = ""; // Подлежит распределению
		КонецЕсли;
		
		СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты = 0;
		Если ПоказателиЛиста.Свойство("П000700001130", СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты)
			И СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты;
			СтрокаВычета.ВидДохода = ВидыДоходов.ИнойДоходПоПрогрессивнойШкале; // Уже предоставлен
		КонецЕсли;
		
		СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты = 0;
		Если ПоказателиЛиста.Свойство("П000700001131", СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты)
			И СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты;
			СтрокаВычета.ВидДохода = ""; // Подлежит распределению
		КонецЕсли;
		
		СуммаРасходовНаПриобретениеНедвижимостиКВычету = 0;
		Если ПоказателиЛиста.Свойство("П000700001150", СуммаРасходовНаПриобретениеНедвижимостиКВычету)
			И СуммаРасходовНаПриобретениеНедвижимостиКВычету <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаРасходовНаПриобретениеНедвижимостиКВычету;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаРасходовНаПриобретениеНедвижимостиКВычету;
			СтрокаВычета.ВидДохода = ""; // Подлежит распределению
		КонецЕсли;
		
		СуммаПроцентовПоКредитуНаНедвижимостьКВычету = 0;
		Если ПоказателиЛиста.Свойство("П000700001160", СуммаПроцентовПоКредитуНаНедвижимостьКВычету)
			И СуммаПроцентовПоКредитуНаНедвижимостьКВычету <> 0 Тогда
			СтрокаВычета = СводВычетов.Добавить();
			СтрокаВычета.ВидВычета = ВидыВычетов.СуммаПроцентовПоКредитуНаНедвижимостьКВычету;
			СтрокаВычета.СуммаНалоговыхВычетов = СуммаПроцентовПоКредитуНаНедвижимостьКВычету;
			СтрокаВычета.ВидДохода = ""; // Подлежит распределению
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 8
	
	Для Каждого СтраницаЛиста Из ТаблицаСтраницыПриложение8 Цикл
		
		Если СтраницаЛиста.Данные.Количество() = 0 Или СтраницаЛиста.ДанныеДопСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаЛиста Из СтраницаЛиста.ДанныеДопСтрок[0].Значение Цикл
			
			// Общая сумма расходов, принимаемых в уменьшение доходов по совокупности совершенных операций
			ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = СтрокаЛиста.П001200001040;
			Если ЦенныеБумагиСуммаРасходовУменьшающаяДоходы <> 0 Тогда
				СтрокаВычета = СводВычетов.Добавить();
				СтрокаВычета.ВидВычета = ВидыВычетов.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
				СтрокаВычета.СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов = ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
				СтрокаВычета.ВидДохода = ВидыДоходов.ОперацииСЦеннымиБумагами;
			КонецЕсли;
			
			// Сумма убытка, принимаемая в уменьшение доходов по совокупности совершенных операций
			Для Каждого ЗначениеПоказателя Из СтрокаЛиста.П001200001052 Цикл
				ЦенныеБумагиСуммаУбытка = ЗначениеПоказателя.Значение;
				Если ЦенныеБумагиСуммаУбытка <> 0 Тогда
					СтрокаВычета = СводВычетов.Добавить();
					СтрокаВычета.ВидВычета = ВидыВычетов.ЦенныеБумагиСуммаУбытка;
					СтрокаВычета.СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов = ЦенныеБумагиСуммаУбытка;
					СтрокаВычета.ВидДохода = ВидыДоходов.ОперацииСЦеннымиБумагами;
				КонецЕсли;
			КонецЦикла;
			
			// Сумма положительного финансового результата от реализации (погашения) ценных бумаг,
			// находившихся в собственности налогоплательщика более трех лет
			ЦенныеБумагиСуммаПрибылиКВычету = СтрокаЛиста.П001200001060;
			Если ЦенныеБумагиСуммаПрибылиКВычету <> 0 Тогда
				СтрокаВычета = СводВычетов.Добавить();
				СтрокаВычета.ВидВычета = ВидыВычетов.ЦенныеБумагиСуммаПрибылиКВычету;
				СтрокаВычета.СуммаНалоговыхВычетов = ЦенныеБумагиСуммаПрибылиКВычету;
				СтрокаВычета.ВидДохода = ВидыДоходов.ОперацииСЦеннымиБумагами;
			КонецЕсли;
			
			// Сумма положительного финансового результата, полученного по операциям, учитываемым на ИИС
			ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету = СтрокаЛиста.П001200001070;
			Если ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету <> 0 Тогда
				СтрокаВычета = СводВычетов.Добавить();
				СтрокаВычета.ВидВычета = ВидыВычетов.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
				СтрокаВычета.СуммаНалоговыхВычетов = ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
				СтрокаВычета.ВидДохода = ВидыДоходов.ОперацииСЦеннымиБумагами;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СводВычетов;
	
КонецФункции

&НаСервереБезКонтекста
Функция НалоговыеБазы(СводДоходов, СводВычетов, ВыбраннаяФорма, ОтборПоВидамДоходов = Неопределено)
	
	// Собираем доходы нужного вида
	
	НалоговыеБазы = Новый ТаблицаЗначений;
	НалоговыеБазы.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	НалоговыеБазы.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	НалоговыеБазы.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	НалоговыеБазы.Колонки.Добавить("ОбщаяСуммаДоходов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("УдержаноНалога", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаИностранногоГосударства", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Для Каждого СтрокаДохода Из СводДоходов Цикл
		Если ОтборПоВидамДоходов <> Неопределено И ОтборПоВидамДоходов.Найти(СтрокаДохода.ВидДохода) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НалоговыеБазы.Добавить();
		НоваяСтрока.ВидДохода = СтрокаДохода.ВидДохода;
		НоваяСтрока.ОКТМО = СтрокаДохода.ОКТМО;
		НоваяСтрока.НалоговаяСтавка = СтрокаДохода.НалоговаяСтавка;
		НоваяСтрока.ОбщаяСуммаДоходов = СтрокаДохода.СуммаДохода;
		НоваяСтрока.УдержаноНалога = СтрокаДохода.УдержаноНалога;
		НоваяСтрока.СуммаНалогаИностранногоГосударства = СтрокаДохода.СуммаНалогаИностранногоГосударства;
	КонецЦикла;
	
	НалоговыеБазы.Свернуть("ВидДохода, ОКТМО, НалоговаяСтавка",
		"ОбщаяСуммаДоходов, УдержаноНалога, СуммаНалогаИностранногоГосударства");
	НалоговыеБазы.Сортировать("ВидДохода, ОКТМО, НалоговаяСтавка");
	НалоговыеБазы.Индексы.Добавить("ВидДохода");
	
	// Применяем вычеты
	
	НалоговыеБазы.Колонки.Добавить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("СуммаНалоговыхВычетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("СуммаРасходов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("НалоговаяБаза", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаВычета Из СводВычетов Цикл
		
		ВидДохода = СтрокаВычета.ВидДохода;
		Если Не ЗначениеЗаполнено(ВидДохода) Тогда
			// Пропускаем вычеты, которые нужно распределять
			Продолжить;
		КонецЕсли;
		Если ОтборПоВидамДоходов<> Неопределено И ОтборПоВидамДоходов.Найти(СтрокаВычета.ВидДохода) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВычета_СуммаДоходовНеПодлежащаяНалогообложению = СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета_СуммаНалоговыхВычетов = СтрокаВычета.СуммаНалоговыхВычетов;
		СтрокаВычета_СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов = СтрокаВычета.СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов;
		
		НалоговыеБазыПоВидуДохода = НалоговыеБазы.Скопировать(
			Новый Структура("ВидДохода", ВидДохода), "ВидДохода, ОКТМО, НалоговаяСтавка");
		НалоговыеБазыПоВидуДохода.Сортировать("ВидДохода, ОКТМО, НалоговаяСтавка");
		
		Для Каждого НайденнаяСтрока Из НалоговыеБазыПоВидуДохода Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ВидДохода", НайденнаяСтрока.ВидДохода);
			ПараметрыОтбора.Вставить("ОКТМО", НайденнаяСтрока.ОКТМО);
			ПараметрыОтбора.Вставить("НалоговаяСтавка", НайденнаяСтрока.НалоговаяСтавка);
			
			База = НалоговыеБазы.НайтиСтроки(ПараметрыОтбора)[0];
			
			СуммаДоходовНеПодлежащаяНалогообложению = Мин(СтрокаВычета_СуммаДоходовНеПодлежащаяНалогообложению, База.ОбщаяСуммаДоходов);
			База.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению = База.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению + СуммаДоходовНеПодлежащаяНалогообложению;
			СтрокаВычета_СуммаДоходовНеПодлежащаяНалогообложению = СтрокаВычета_СуммаДоходовНеПодлежащаяНалогообложению - СуммаДоходовНеПодлежащаяНалогообложению;
			
			База.ОбщаяСуммаДоходовПодлежащаяНалогообложению = Макс(База.ОбщаяСуммаДоходов - База.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению, 0);
			
			СуммаНалоговыхВычетов = Мин(СтрокаВычета_СуммаНалоговыхВычетов, Макс(База.ОбщаяСуммаДоходовПодлежащаяНалогообложению - База.СуммаРасходов, 0));
			База.СуммаНалоговыхВычетов = База.СуммаНалоговыхВычетов + СуммаНалоговыхВычетов;
			СтрокаВычета_СуммаНалоговыхВычетов = СтрокаВычета_СуммаНалоговыхВычетов - СуммаНалоговыхВычетов;
			
			СуммаРасходов = Мин(СтрокаВычета_СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов, Макс(База.ОбщаяСуммаДоходовПодлежащаяНалогообложению - База.СуммаНалоговыхВычетов, 0));
			База.СуммаРасходов = База.СуммаРасходов + СуммаРасходов;
			СтрокаВычета_СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов = СтрокаВычета_СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов - СуммаРасходов;
			
		КонецЦикла;
	КонецЦикла;
	
	// Распределяем базу по прогрессивной шкале и рассчитываем сумму налога
	
	НалоговыеБазы.Колонки.Добавить("СуммаНалоговойБазыПоОсновнойПоСтавке", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("СуммаНалоговойБазыПоПовышеннойСтавке", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("СуммаИныхНалоговыхБаз", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаИсчисленнаяПоОсновнойПоСтавке", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаИсчисленнаяПоПовышеннойСтавке", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаИсчисленнаяПоПлоскойШкале", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НалоговыеСтавки = НалоговыеСтавки(ВыбраннаяФорма);
	ПрогрессивнаяШкала = ПрогрессивнаяШкала(ВыбраннаяФорма);
	ОстатокПорогаПримененияОсновнойСтавки = ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки;
	
	Для Каждого База Из НалоговыеБазы Цикл
		
		База.ОбщаяСуммаДоходовПодлежащаяНалогообложению = Макс(0,
			  База.ОбщаяСуммаДоходов
			- База.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению);
		
		База.НалоговаяБаза = Макс(0,
			  База.ОбщаяСуммаДоходовПодлежащаяНалогообложению
			- База.СуммаНалоговыхВычетов
			- База.СуммаРасходов);
		
		СтавкаНалогаСтрокой = НалоговыеСтавки[База.ВидДохода];
		
		Если СтавкаНалогаСтрокой = "13/15" Тогда
			Если База.НалоговаяБаза < ОстатокПорогаПримененияОсновнойСтавки Тогда
				База.СуммаНалоговойБазыПоОсновнойПоСтавке = База.НалоговаяБаза;
			Иначе
				База.СуммаНалоговойБазыПоОсновнойПоСтавке = ОстатокПорогаПримененияОсновнойСтавки;
				База.СуммаНалоговойБазыПоПовышеннойСтавке = База.НалоговаяБаза - ОстатокПорогаПримененияОсновнойСтавки;
			КонецЕсли;
			ОстатокПорогаПримененияОсновнойСтавки = Макс(ОстатокПорогаПримененияОсновнойСтавки - База.НалоговаяБаза, 0);
		Иначе
			База.СуммаИныхНалоговыхБаз = База.НалоговаяБаза;
		КонецЕсли;
		
		База.СуммаНалогаИсчисленнаяПоОсновнойПоСтавке =
			Окр(База.СуммаНалоговойБазыПоОсновнойПоСтавке * ПрогрессивнаяШкала.ОсновнаяСтавка / 100, 0);
		База.СуммаНалогаИсчисленнаяПоПовышеннойСтавке =
			Окр(База.СуммаНалоговойБазыПоПовышеннойСтавке * ПрогрессивнаяШкала.ПовышеннаяСтавка / 100, 0);
		База.СуммаНалогаИсчисленнаяПоПлоскойШкале =
			Окр(База.СуммаИныхНалоговыхБаз * База.НалоговаяСтавка / 100, 0);
		
	КонецЦикла;
	
	Возврат НалоговыеБазы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаНалогаПоПрогрессивнойШкале(НалоговаяБаза, ПрогрессивнаяШкала)
	
	Если НалоговаяБаза < ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки Тогда
		СуммаНалоговойБазыПоОсновнойПоСтавке = НалоговаяБаза;
		СуммаНалоговойБазыПоПовышеннойСтавке = 0;
	Иначе
		СуммаНалоговойБазыПоОсновнойПоСтавке = ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки;
		СуммаНалоговойБазыПоПовышеннойСтавке = НалоговаяБаза - ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки;
	КонецЕсли;
	СуммаНалогаИсчисленная =
		  Окр(СуммаНалоговойБазыПоОсновнойПоСтавке * ПрогрессивнаяШкала.ОсновнаяСтавка / 100, 0)
		+ Окр(СуммаНалоговойБазыПоПовышеннойСтавке * ПрогрессивнаяШкала.ПовышеннаяСтавка / 100, 0);
	
	Возврат СуммаНалогаИсчисленная;
	
КонецФункции

&НаСервереБезКонтекста
Функция РаспределитьВычеты(СводДоходов, СводВычетов, ВыбраннаяФорма)
	
	НалоговыеБазыСтандартныхСоциальныхИмущественногоВычетов = НалоговыеБазы(
		СводДоходов,
		СводВычетов,
		ВыбраннаяФорма,
		КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(ВыбраннаяФорма));
	
	Если НалоговыеБазыСтандартныхСоциальныхИмущественногоВычетов.Количество() = 1 Тогда
		// Распределяем только, если распределение не предполагает вариативности
		База = НалоговыеБазыСтандартныхСоциальныхИмущественногоВычетов[0];
		Для Каждого ВидВычета Из ВидыСтандартныхСоциальныхИмущественныхВычетов(ВыбраннаяФорма) Цикл
			Если База.НалоговаяБаза > 0 Тогда
				РаспределитьВычетПоВиду(СводВычетов, ВидВычета, База);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СводВычетов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РаспределитьВычетПоВиду(СводВычетов, ВидВычета, База)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидВычета", ВидВычета);
	ПараметрыОтбора.Вставить("ВидДохода", "");
	
	Для Каждого СтрокаВычета Из СводВычетов.НайтиСтроки(ПараметрыОтбора) Цикл
		
		СуммаДоходовНеПодлежащаяНалогообложению = Макс(0,
			Мин(База.НалоговаяБаза, СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению));
		База.НалоговаяБаза = База.НалоговаяБаза - СуммаДоходовНеПодлежащаяНалогообложению;
		
		СуммаНалоговыхВычетов = Макс(0,
			Мин(База.НалоговаяБаза, СтрокаВычета.СуммаНалоговыхВычетов));
		База.НалоговаяБаза = База.НалоговаяБаза - СуммаНалоговыхВычетов;
		
		СтрокаВычета.ВидДохода = База.ВидДохода;
		СтрокаВычета.СуммаДоходовНеПодлежащаяНалогообложению = СуммаДоходовНеПодлежащаяНалогообложению;
		СтрокаВычета.СуммаНалоговыхВычетов = СуммаНалоговыхВычетов;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаДоходаДляИмущественногоВычета(Знач АдресСводаДоходов, Знач АдресСводаВычетов, Знач ВыбраннаяФорма)
	
	Результат = 0;
	
	// Для расчета данного показателя из общей суммы дохода (сумма показателей строк 010 Раздела 2 по кодам вида дохода
	// (строка 001 Раздела 2) с «06» по «14», а также «17» и «18»), 
	КодыВидовДохода = КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(ВыбраннаяФорма);
	
	Если ЭтоАдресВременногоХранилища(АдресСводаДоходов) Тогда
		СводДоходов = ПолучитьИзВременногоХранилища(АдресСводаДоходов);
	КонецЕсли;
	
	Если ТипЗнч(СводДоходов) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Доход Из СводДоходов Цикл
			Если КодыВидовДохода.Найти(Доход.ВидДохода) <> Неопределено Тогда
				Результат = Результат + Доход.СуммаДохода;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вычитаем суммы вычетов, принимаемых до имущественного вычета
	ВидыВычетов = ВидыВычетовУменьшающиеБазуИмущественногоВычета(ВыбраннаяФорма);
	
	Если ЭтоАдресВременногоХранилища(АдресСводаВычетов) Тогда
		СводВычетов = ПолучитьИзВременногоХранилища(АдресСводаВычетов);
	КонецЕсли;
	
	Если ТипЗнч(СводВычетов) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Вычет Из СводВычетов Цикл
			Если ВидыВычетов.Найти(Вычет.ВидВычета) <> Неопределено Тогда
				Результат = Результат
					- Вычет.СуммаДоходовНеПодлежащаяНалогообложению
					- Вычет.СуммаНалоговыхВычетов
					- Вычет.СуммаРасходовПринимаемыхВУменьшениеПолученныхДоходов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Макс(Результат, 0);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(мВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(мВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыВычетовУменьшающиеБазуИмущественногоВычета(мВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ВидыВычетовУменьшающиеБазуИмущественногоВычета(мВыбраннаяФорма);
	
КонецФункции

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	РасчетНаСервере(ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт 
	
	Если ПустаяСтрока(ИмяСтраницыПанели) = "" Или ИмяСтраницыПанели = "Приложение7" Тогда
		ЗаполнитьСводныеТаблицы();
	КонецЕсли;
	
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);
	
	ЗаполнитьСводныеТаблицы();
	
КонецПроцедуры

// Выполняет провреку значений и пересчет зависимых показателей на заданной странице отчета
// Параметры:
//  Форма - управляемая форма - форма этого отчета
//	ИмяОбласти - Строка - имя раздела или листа декларации
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ИмяОбласти = "")
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	ИмяОбласти13 = Лев(ИмяОбласти, 13); // имя области без номера строки
	
	// Проверки значений и пересчет связанных НЕ итоговых реквизитов
	Если ИмяРаздела = "Приложение2" Тогда
		
		// Проверка необходимости пересчитать сумму дохода из валюты в рубли
		ПересчитыватьДоходВруб = ИмяОбласти = "П000400001030" // Код валюты
			Или ИмяОбласти = "П000400001040" // дата получения дохода
			Или ИмяОбласти = "П000400001050" // курс валюты на дату получения дохода
			Или ИмяОбласти = "П000400001060"; // сумма дохода в валюте
			
		Если ПересчитыватьДоходВруб Тогда
			
			Курс         = Форма.ТабличныйДокумент.Области["П000400001050"].Значение;
			СуммаВВалюте = Форма.ТабличныйДокумент.Области["П000400001060"].Значение;
			
			Если ЗначениеЗаполнено(Курс) И ЗначениеЗаполнено(СуммаВВалюте) Тогда
				ДоходВРублях = Окр(СуммаВВалюте * Курс, 2);
				Форма.ТабличныйДокумент.Области["П000400001070"].Значение = ДоходВРублях;
				СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001070", ДоходВРублях);
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Проверка необходимости пересчитать сумму налога из валюты в рубли
		ПересчитыватьНалогВРуб = ИмяОбласти = "П000400001030" // Код валюты
			Или ИмяОбласти = "П000400001110" // дата уплаты налога
			Или ИмяОбласти = "П000400001120" // курс валюты на дату уплаты налога
			Или ИмяОбласти = "П000400001130"; // сумма налога в валюте
			
		Если ПересчитыватьНалогВРуб Тогда
			
			Курс         = Форма.ТабличныйДокумент.Области["П000400001120"].Значение;
			СуммаВВалюте = Форма.ТабличныйДокумент.Области["П000400001130"].Значение;
			
			Если ЗначениеЗаполнено(Курс) И ЗначениеЗаполнено(СуммаВВалюте) Тогда
				НалогВРублях = Окр(СуммаВВалюте * Курс, 2); 
				Форма.ТабличныйДокумент.Области["П000400001140"].Значение = НалогВРублях;
				СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001140", НалогВРублях);
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Расчет суммы налога, начисленного в РФ.
		СтавкаНалога = Форма.ТабличныйДокумент.Области["П000400001041"].Значение;
		
		Если ИмяОбласти = "П000400001041" Тогда // Ставка налога 
			
			НалогВРФ = Окр(Форма.ТабличныйДокумент.Области["П000400001070"].Значение * СтавкаНалога / 100, 2);
			Форма.ТабличныйДокумент.Области["П000400001160"].Значение = НалогВРФ;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001160", НалогВРФ);
			
			// Сумма принимаемого налога не может превышать сумму уплаченного
			Если Форма.ТабличныйДокумент.Области["П000400001170"].Значение > 0 Тогда
				ПринимаемаяСумма = Мин(Форма.ТабличныйДокумент.Области["П000400001160"].Значение, Форма.ТабличныйДокумент.Области["П000400001140"].Значение);
				Форма.ТабличныйДокумент.Области["П000400001170"].Значение = ПринимаемаяСумма;
				СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001170", ПринимаемаяСумма);
			КонецЕсли; 
			
		ИначеЕсли ПересчитыватьДоходВруб ИЛИ ИмяОбласти = "П000400001070" Тогда
			
			НалогВРФ = Окр(Форма.ТабличныйДокумент.Области["П000400001070"].Значение * СтавкаНалога / 100, 2);
			Форма.ТабличныйДокумент.Области["П000400001160"].Значение = НалогВРФ;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001160", НалогВРФ);
			
		КонецЕсли; 

		Если (ПересчитыватьДоходВруб ИЛИ ПересчитыватьНалогВРуб ИЛИ ИмяОбласти = "П000400001170" ИЛИ ИмяОбласти = "П000400001160" ИЛИ ИмяОбласти = "П000400001070")
				И Форма.ТабличныйДокумент.Области["П000400001170"].Значение > 0 Тогда
			
			Значение = Мин(Форма.ТабличныйДокумент.Области["П000400001170"].Значение, Форма.ТабличныйДокумент.Области["П000400001160"].Значение);
			
			Форма.ТабличныйДокумент.Области["П000400001170"].Значение = Значение;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000400001170", Значение);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение3" Тогда
		
		Если ИмяОбласти = "П000500001040" И Форма.ТабличныйДокумент.Области["П000500001040"].Значение = 0 Тогда 
			// очищаем фактические расходы
			Форма.ТабличныйДокумент.Области["П000500001041"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001041", 0);
			Форма.ТабличныйДокумент.Области["П000500001042"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001042", 0);
			Форма.ТабличныйДокумент.Области["П000500001043"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001043", 0);
			Форма.ТабличныйДокумент.Области["П000500001044"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001044", 0);
			ОбновлятьФактическиеРасходы = Истина;
		Иначе
			ОбновлятьФактическиеРасходы = ИмяОбласти = "П000500001041" // Сумма материальных расходов
				Или ИмяОбласти = "П000500001042" // Сумма амортизационных начислений
				Или ИмяОбласти = "П000500001043" // Сумма расходов на выплаты и вознаграждения в пользу физических лиц
				Или ИмяОбласти = "П000500001044"; // Сумма прочих расходов
		КонецЕсли;
		
		ВсегоФактРасходы = Форма.ТабличныйДокумент.Области["П000500001041"].Значение
			+ Форма.ТабличныйДокумент.Области["П000500001042"].Значение
			+ Форма.ТабличныйДокумент.Области["П000500001043"].Значение
			+ Форма.ТабличныйДокумент.Области["П000500001044"].Значение;
		
		Если ОбновлятьФактическиеРасходы
				Или ИмяОбласти = "П000500001040"
					И Форма.ТабличныйДокумент.Области["П000500001040"].Значение < ВсегоФактРасходы Тогда
			
			Форма.ТабличныйДокумент.Области["П000500001040"].Значение = ВсегоФактРасходы;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001040", ВсегоФактРасходы);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области["П000500001110"].Значение) Тогда // Код источника дохода
			Форма.ТабличныйДокумент.Области["П000500001150"].Значение =
				  Форма.ТабличныйДокумент.Области["П000500001120"].Значение
				+ Форма.ТабличныйДокумент.Области["П000500001130"].Значение
				+ Форма.ТабличныйДокумент.Области["П000500001140"].Значение;
		Иначе
			Форма.ТабличныйДокумент.Области["П000500001120"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001120", 0);
			Форма.ТабличныйДокумент.Области["П000500001130"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001130", 0);
			Форма.ТабличныйДокумент.Области["П000500001140"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001140", 0);
			Форма.ТабличныйДокумент.Области["П000500001150"].Значение = 0;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000500001150", 0);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение7" Тогда
		
		ПределВычетаНаПриобретение = ПределВычета("НаПриобретениеНедвижимостиСтоимость", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		// Превышение предела вычета на проценты не вычисляем, поскольку не можем определить год оформления кредита.
		// Для кредитов полученных до 2014 года предел вычета не применяется.
		
		// Для определения допустимых пределов вычетов подсчитаем расходы, указанные на других (неактивных) страницах
		РасходыНаПриобретение = 0;
		Для Каждого СтраницаЛиста Из Форма.ТаблицаСтраницыПриложение7 Цикл
			
			Если СтраницаЛиста.АктивнаяСтраница Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиЛиста = СтраницаЛиста.Данные[0].Значение;
			
			РасходыНаПриобретение = РасходыНаПриобретение + ПоказателиЛиста.П000700001080;
			
		КонецЦикла;
		
		ОстатокПределаНаПриобретение = Макс(ПределВычетаНаПриобретение - РасходыНаПриобретение, 0);
		
		Если ИмяОбласти = "П000700001080"  // Сумма раходов на приобретение
				И Форма.ТабличныйДокумент.Области["П000700001080"].Значение > ОстатокПределаНаПриобретение Тогда
			
			// Сумма фактических расходов не может превышать установленный законом предел
			Форма.ТабличныйДокумент.Области["П000700001080"].Значение = ОстатокПределаНаПриобретение;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000700001080", Форма.ТабличныйДокумент.Области["П000700001080"].Значение);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение6" Тогда
		
		ПределНормыВычетаНедвижимости     = ПределВычета("ПродажаЖилойНедвижимости", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);;
		ПределНормыВычетаПрочегоИмущества = ПределВычета("ПродажаИногоИмущества", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);;
		
		Если ИмяОбласти = "П000800001010"  // Вычет из доходов от продажи недвижимости, находившейся в собственности менее 3 лет
			И Форма.ТабличныйДокумент.Области["П000800001010"].Значение > ПределНормыВычетаНедвижимости Тогда 
			// п. 1.1
			
			Форма.ТабличныйДокумент.Области["П000800001010"].Значение = ПределНормыВычетаНедвижимости;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000800001010", ПределНормыВычетаНедвижимости);
			
		ИначеЕсли ИмяОбласти = "П000800001030"  // Вычет из доходов от продажи долей недвижимости, находившейся в собственности менее 3 лет
				И Форма.ТабличныйДокумент.Области["П000800001030"].Значение > ПределНормыВычетаНедвижимости Тогда
			// п. 1.3
			
			Форма.ТабличныйДокумент.Области["П000800001030"].Значение = ПределНормыВычетаНедвижимости;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000800001030", ПределНормыВычетаНедвижимости);
			
		ИначеЕсли ИмяОбласти = "П000800001050"  // Иное недвижимое имущество для расчета вычета в 250000 руб
				И Форма.ТабличныйДокумент.Области["П000800001050"].Значение > ПределНормыВычетаПрочегоИмущества Тогда
			// п. 2.1
			
			Форма.ТабличныйДокумент.Области["П000800001050"].Значение = ПределНормыВычетаПрочегоИмущества;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000800001050", ПределНормыВычетаПрочегоИмущества);
			
		ИначеЕсли ИмяОбласти = "П000800001070"  // Вычет по норме из доходов от продажи прочего имущества 
				И Форма.ТабличныйДокумент.Области["П000800001070"].Значение > ПределНормыВычетаПрочегоИмущества Тогда
			// п. 3.1 
			
			Форма.ТабличныйДокумент.Области["П000800001070"].Значение = ПределНормыВычетаПрочегоИмущества;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П000800001070", ПределНормыВычетаПрочегоИмущества);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоРазделПриложения5(ИмяРаздела) Тогда
		
		Если ИмяОбласти = "П000900001010" Тогда // Сумма стандартного налогового вычета в соответствии с пп.1 п.1 ст.218 НК РФ
			МаксимальноеЗначение = ПределВычета("СтандартныйВычетПо218_1_1", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ИначеЕсли ИмяОбласти = "П000900001020" Тогда // Сумма стандартного налогового вычета в соответствии с пп.2 п.1 ст.218 НК РФ
			МаксимальноеЗначение = ПределВычета("СтандартныйВычетПо218_1_2", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ИначеЕсли ИмяОбласти = "П000900001210" Тогда// Сумма инвестиционного налогового вычета
			МаксимальноеЗначение = ПределВычета("ИнвестиционныйВычет", Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ИначеЕсли ИмяОбласти = "П000900001070" Тогда
			
			// Значение поля не должно превышать сумму строк 010 - 060
			ПоказателиСуммы = Новый Массив;
			ШаблонИмениПоля = "П0009000010%1";
			Для ИндексПоля = 1 По 6 Цикл
				ПоказателиСуммы.Добавить(СтрШаблон(ШаблонИмениПоля, ИндексПоля * 10));
			КонецЦикла;
			
			МаксимальноеЗначение = СуммаПоказателейТабличногоДокумента(Форма.ТабличныйДокумент, ПоказателиСуммы);
			
		ИначеЕсли ИмяОбласти = "П000900001181" Тогда
			
			// Значение поля не должно превышать сумму строк 100, 110, 130 - 160
			СуммаПриложение5 = Форма.СтруктураДанныхПриложение5.П000900001100 + Форма.СтруктураДанныхПриложение5.П000900001110;
			
			ПоказателиСуммы = Новый Массив;
			ПоказателиСуммы.Добавить("П000900001130");
			ПоказателиСуммы.Добавить("П000900001140");
			ПоказателиСуммы.Добавить("П000900001141");
			ПоказателиСуммы.Добавить("П000900001150");
			ПоказателиСуммы.Добавить("П000900001160");
			
			СуммаПриложение5Продолжение = СуммаПоказателейТабличногоДокумента(Форма.ТабличныйДокумент, ПоказателиСуммы);
			
			МаксимальноеЗначение = СуммаПриложение5 + СуммаПриложение5Продолжение;
			
		Иначе
			МаксимальноеЗначение = Неопределено;
		КонецЕсли;
		
		Если МаксимальноеЗначение <> Неопределено И Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение > МаксимальноеЗначение Тогда
			Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = МаксимальноеЗначение;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяОбласти, МаксимальноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение1Расчет" Тогда
		
		НомерСтрокиСтрокой  = Сред(ИмяОбласти, 15);
		
		// При изменении суммы дохода исходя из цены договора или исходя из кадастровой стоимости
		Если ИмяОбласти13 = "П001900001030" ИЛИ ИмяОбласти13 = "П001900001040" Тогда
			
			П001900001050 = Макс(
				Форма.ТабличныйДокумент.Области["П001900001030_" + НомерСтрокиСтрокой].Значение,
				Форма.ТабличныйДокумент.Области["П001900001040_" + НомерСтрокиСтрокой].Значение);
			П001900001050 = Макс(П001900001050, 0);
			
			Форма.ТабличныйДокумент.Области["П001900001050_" + НомерСтрокиСтрокой].Значение = П001900001050;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П001900001050_" + НомерСтрокиСтрокой, П001900001050);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение3Продолжение" Тогда
		
		Если ИмяОбласти = "П002000001160"
			Или ИмяОбласти = "П002000001170"
			Или ИмяОбласти = "П002000001180" Тогда
			НалоговаяБазаИП1Квартал = Макс(Форма.ТабличныйДокумент.Области["П002000001160"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001170"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001180"].Значение, 0);
			Форма.ТабличныйДокумент.Области["П002000001190"].Значение = НалоговаяБазаИП1Квартал;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П002000001190", НалоговаяБазаИП1Квартал);
		ИначеЕсли ИмяОбласти = "П002000001161"
			Или ИмяОбласти = "П002000001171"
			Или ИмяОбласти = "П002000001181" Тогда
			НалоговаяБазаИППолугодие = Макс(Форма.ТабличныйДокумент.Области["П002000001161"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001171"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001181"].Значение, 0);
			Форма.ТабличныйДокумент.Области["П002000001191"].Значение = НалоговаяБазаИППолугодие;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П002000001191", НалоговаяБазаИППолугодие);
		
		ИначеЕсли ИмяОбласти = "П002000001162"
			Или ИмяОбласти = "П002000001172"
			Или ИмяОбласти = "П002000001182" Тогда
			НалоговаяБазаИП9Месяцев = Макс(Форма.ТабличныйДокумент.Области["П002000001162"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001172"].Значение
				- Форма.ТабличныйДокумент.Области["П002000001182"].Значение, 0);
			Форма.ТабличныйДокумент.Области["П002000001192"].Значение = НалоговаяБазаИП9Месяцев;
			СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, "П002000001192", НалоговаяБазаИП9Месяцев);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет итогов листа
	РассчитатьИтогиЛиста(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателейТабличногоДокумента(ТабличныйДокумент, Показатели)
	
	СуммаПоказателей = 0;
	Для Каждого ИмяПоказателя Из Показатели Цикл
		СуммаПоказателей = СуммаПоказателей + ТабличныйДокумент.Области[ИмяПоказателя].Значение;
	КонецЦикла;
	
	Возврат СуммаПоказателей;
	
КонецФункции

&НаКлиенте
Процедура СобратьДанныеВРаздел2()
	
	Перем КодыВидовДеятельностиТребующиеУточнения;
	
	//Пересчитываем итоги всех листов
	РассчитатьИтогиЛиста(ЭтотОбъект, Неопределено);
	
	// Заполняем сводные таблицы итогов
	ЗаполнитьСводныеТаблицы();
	
	// Сначала в разделе 2 рассчитываются результаты в видов доходов
	Если Не ПодготовитьДанныеРаздела2(КодыВидовДеятельностиТребующиеУточнения) Тогда
		ПоказатьПредупреждениеОНевозможностиЗаполнитьРаздел2(КодыВидовДеятельностиТребующиеУточнения);
	КонецЕсли;
	
	// Обновляем дерево разделов
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
	// Выводим макет в табличный документ
	ВывестиМакетВТаблДокНаСервере("Раздел2", 1, , , Истина);
	
	// Активизируем строку раздела в дереве
	Для Каждого СтрокаРаздела Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если СтрокаРаздела.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОНевозможностиЗаполнитьРаздел2(КодыВидовДеятельностиТребующиеУточнения)
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Результат заполнения';
										|en = 'Результат заполнения'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	
	Если КодыВидовДеятельностиТребующиеУточнения.Количество() = 1 Тогда
		ШаблонРекомендации = НСтр("ru = 'Заполните сумму доходов, не подлежащих налогообложению, и налоговые вычеты для вида деятельности с кодом %1';
									|en = 'Заполните сумму доходов, не подлежащих налогообложению, и налоговые вычеты для вида деятельности с кодом %1'");
	ИначеЕсли КодыВидовДеятельностиТребующиеУточнения.Количество() > 0 Тогда
		ШаблонРекомендации = НСтр("ru = 'Заполните сумму доходов, не подлежащих налогообложению, и налоговые вычеты для видов деятельности с кодом %1';
									|en = 'Заполните сумму доходов, не подлежащих налогообложению, и налоговые вычеты для видов деятельности с кодом %1'");
	Иначе
		ШаблонРекомендации = "";
	КонецЕсли;
	
	Рекомендация = СтрШаблон(ШаблонРекомендации, СтрСоединить(КодыВидовДеятельностиТребующиеУточнения, ", "));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Новый ОписаниеОповещения(),
		СтрШаблон(НСтр("ru = 'Не удалось заполнить Раздел 2 автоматически.%1%2.';
						|en = 'Не удалось заполнить Раздел 2 автоматически.%1%2.'"), Символы.ПС, Рекомендация),
		РежимДиалогаВопрос.ОК,
		ПараметрыВопроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыДоходов(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыВычетов(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ВидыВычетов(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыСтандартныхСоциальныхИмущественныхВычетов(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ВидыСтандартныхСоциальныхИмущественныхВычетов(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодыВидаОсвобожденияОтНалогообложенияЗаПределамиРФ(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидаОсвобожденияОтНалогообложенияЗаПределамиРФ(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция УдержаноНалогаПоПовышеннойСтавке(УдержаноНалога, ПрогрессивнаяШкала)
	
	Если УдержаноНалога <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	МаксНалогПоОсновнойСтавке = Окр(ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки * ПрогрессивнаяШкала.ОсновнаяСтавка / 100, 0);
	
	Возврат Макс(УдержаноНалога - МаксНалогПоОсновнойСтавке, 0);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтавкаНалогаДляСводаДоходов(СтавкаНалогаСтрокой, РучнаяСтавка = 0)
	
	Если СтавкаНалогаСтрокой = Неопределено Тогда
		Возврат РучнаяСтавка;
	КонецЕсли;
	
	Если СтавкаНалогаСтрокой = "13/15" Тогда
		Возврат 0;
	ИначеЕсли Не ПустаяСтрока(СтавкаНалогаСтрокой)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтавкаНалогаСтрокой) Тогда
		Возврат Число(СтавкаНалогаСтрокой);
	Иначе
		Возврат РучнаяСтавка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрогрессивнаяШкала(ВыбраннаяФорма) Экспорт
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ПрогрессивнаяШкала(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция НалоговыеСтавки(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодВидаДоходаЗаПределамиРФ(Знач КлючВидаДохода, Знач ВыбраннаяФорма)
	
	Перем КодВидаДохода;
	
	КодыВидовДоходовЗаПределамиРФ = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма);
	Если КодыВидовДоходовЗаПределамиРФ.Свойство(КлючВидаДохода, КодВидаДохода) Тогда
		Возврат КодВидаДохода;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция КодыСтатусовНалогоплательщика(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.КодыСтатусовНалогоплательщика(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция КБК(Знач ВидДохода, Знач НалогПодлежитУплате, Знач ПовышеннаяСтавка, Знач ВыбраннаяФорма)
	
	Результат = "";
	
	ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма);
	КБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма);
	НалоговыеСтавки = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма);
	СтавкаНалога = НалоговыеСтавки.Получить(ВидДохода);
	
	Если НалогПодлежитУплате Тогда
		Если ВидДохода = ВидыДоходов.ПрибыльКИК Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыСПрибылиКИК, КБК.ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавке);
		ИначеЕсли ВидДохода = ВидыДоходов.ФиксированнаяПрибыльКИК Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыСПрибылиКИКОсобыйПорядокУплаты, КБК.ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавкеОсобыйПорядокУплаты);
		ИначеЕсли ВидДохода = ВидыДоходов.ПредпринимательскаяДеятельность Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыОтПредпринимательскойДеятельности, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		ИначеЕсли ВидДохода = ВидыДоходов.ПроцентПоОблигациям Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыВВидеПроцентовПоОблигациям, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		ИначеЕсли ВидДохода = ВидыДоходов.БанковскиеПроценты Или ВидДохода = ВидыДоходов.БанковскиеПроценты_Нерезидентов Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыВВидеБанковскихПроцентов, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		ИначеЕсли ВидДохода = ВидыДоходов.Дивиденды Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыСДивидендов, КБК.ДоходыСДивидендовПоПовышеннойСтавке);
		ИначеЕсли ЗначениеЗаполнено(СтавкаНалога) И СтавкаНалога = "13/15" Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыПриПолученииКоторыхНеУдержанНалог, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		Иначе
			Результат = КБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
		КонецЕсли;
	Иначе // Возврат из бюджета
		Если ВидДохода = ВидыДоходов.ПроцентПоОблигациям Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыВВидеПроцентовПоОблигациям, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		ИначеЕсли ЗначениеЗаполнено(СтавкаНалога) И СтавкаНалога = "13/15" Тогда
			Результат = ?(Не ПовышеннаяСтавка, КБК.ДоходыПолученныеОтНалоговыхАгентов, КБК.ДоходыОблагаемыеПоПовышеннойСтавке);
		Иначе
			Результат = КБК.ДоходыПолученныеОтНалоговыхАгентов;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроцентПрофессиональногоВычета(Знач ВыбраннаяФорма)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(ВыбраннаяФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПределВычета(Знач КлючПоказателя, Знач ВыбраннаяФорма)
	
	Перем ЗначениеПоказателя;
	
	ПределыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ВыбраннаяФорма);
	Если ПределыВычетов.Свойство(КлючПоказателя, ЗначениеПоказателя) Тогда
		Возврат ЗначениеПоказателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеРаздела2(КодыВидовДеятельностиТребующиеУточнения = Неопределено)
	
	КодыВидовДеятельностиТребующиеУточнения = Новый Массив;
	
	ОбразецСтруктуры = Новый Структура(Новый ФиксированнаяСтруктура(ТаблицаСтраницыРаздел2[0].Данные[0].Значение));
	Для Каждого ЭлементСтруктуры Из ОбразецСтруктуры Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Число") Тогда
			ОбразецСтруктуры[ЭлементСтруктуры.Ключ] = 0;
		Иначе
			ОбразецСтруктуры[ЭлементСтруктуры.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРаздела2ЗаполненныеВручную = ДанныеРаздела2ЗаполненныеВручную();
	
	ТаблицаСтраницыРаздел2.Очистить();
	
	ШаблонПредставления = НСтр("ru = 'Код вида дохода %1';
								|en = 'Код вида дохода %1'");
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если ЭтоАдресВременногоХранилища(АдресНалоговыхБаз) Тогда
		НалоговыеБазы = ПолучитьИзВременногоХранилища(АдресНалоговыхБаз)
	КонецЕсли;
	
	ВсеВычетыРаспределены = ВсеВычетыРаспределены(АдресСводаВычетов);
	
	КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов = 
		КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если ТипЗнч(НалоговыеБазы) = Тип("ТаблицаЗначений") И НалоговыеБазы.Количество() <> 0 Тогда
		Для Каждого ВидДохода Из ВидыДоходов Цикл
			
			ПараметрыОтбора = Новый Структура("ВидДохода", ВидДохода.Значение);
			НайденныеСтроки = НалоговыеБазы.Скопировать(ПараметрыОтбора);
			НайденныеСтроки.Сортировать("ВидДохода, НалоговаяСтавка");
			
			ДанныеЗаполненныеВручную = ДанныеРаздела2ЗаполненныеВручную.Найти(ВидДохода.Значение, "ВидДохода");
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				
				ВычетыРаспределены = ВсеВычетыРаспределены
					Или КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов.Найти(ВидДохода.Значение) = Неопределено;
				
				СтраницаРаздела = ТаблицаСтраницыРаздел2.Добавить();
				СтраницаРаздела.Представление = СтрШаблон(ШаблонПредставления, ВидДохода.Значение);
				СтраницаРаздела.АвтоматическоеПредставление = Истина;
				СтраницаРаздела.Данные.Добавить(Новый Структура(Новый ФиксированнаяСтруктура(ОбразецСтруктуры)));
				
				ЗаполнитьРасчетныеДанныеРаздела2(СтраницаРаздела, НайденныеСтроки, ДанныеЗаполненныеВручную, ВычетыРаспределены);
				
				Если Не ВычетыРаспределены Тогда
					КодыВидовДеятельностиТребующиеУточнения.Добавить(ВидДохода.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РаспределитьНалоговыеБазыРаздела2(ТаблицаСтраницыРаздел2, СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		Для Каждого СтраницаРаздела Из ТаблицаСтраницыРаздел2 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			РасчитатьИтогиСтраницыРаздела2(ДанныеСтраницы);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаСтраницыРаздел2.Количество() <> 0 Тогда
		ТаблицаСтраницыРаздел2[0].АктивнаяСтраница = Истина;
	Иначе
		// Добавляем пустую страницу со значениями по умолчанию
		СтраницаРаздела = ТаблицаСтраницыРаздел2.Добавить();
		СтраницаРаздела.Представление = СтрШаблон(ШаблонПредставления, ВидыДоходов.ИнойДоходПоПрогрессивнойШкале);
		СтраницаРаздела.АктивнаяСтраница = Истина;
		СтраницаРаздела.АвтоматическоеПредставление = Истина;
		СтраницаРаздела.Данные.Добавить(Новый Структура(Новый ФиксированнаяСтруктура(ОбразецСтруктуры)));
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(КодыВидовДеятельностиТребующиеУточнения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеВычетыРаспределены(АдресСводаВычетов)
	
	Если ЭтоАдресВременногоХранилища(АдресСводаВычетов) Тогда
		СводВычетов = ПолучитьИзВременногоХранилища(АдресСводаВычетов)
	КонецЕсли;
	
	Если СводВычетов <> Неопределено И ТипЗнч(СводВычетов) = Тип("ТаблицаЗначений") Тогда
		Возврат (СводВычетов.Найти("", "ВидДохода") = Неопределено);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасчетныеДанныеРаздела2(СтраницаРаздела, НалоговаяБаза, ДанныеЗаполненныеВручную, ВычетыРаспределены)
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
	
	Для Каждого База Из НалоговаяБаза Цикл
		
		// 1. Расчет налоговой базы (руб. коп.)
		
		// Код вида дохода
		ДанныеСтраницы.П000200001001 = База.ВидДохода;
		
		// Сумма доходов
		ДанныеСтраницы.П000200001010 = ДанныеСтраницы.П000200001010 + База.ОбщаяСуммаДоходов;
		
		// Сумма доходов, не подлежащих налогообложению
		Если ВычетыРаспределены Тогда
			ДанныеСтраницы.П000200001020 = ДанныеСтраницы.П000200001020 + База.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению;
		КонецЕсли;
		
		// Сумма налоговых вычетов
		Если ВычетыРаспределены Тогда
			ДанныеСтраницы.П000200001040 = ДанныеСтраницы.П000200001040 + База.СуммаНалоговыхВычетов;
		КонецЕсли;
		
		// Сумма расходов, принимаемых в уменьшение полученных доходов
		Если ВычетыРаспределены Тогда
			ДанныеСтраницы.П000200001050 = ДанныеСтраницы.П000200001050 + База.СуммаРасходов;
		КонецЕсли;
		
		// 2. Расчет суммы налога, подлежащей уплате (доплате) / возврату (руб.)
		//
		// Сумма налога, исчисленная к уплате
		Если База.ВидДохода = ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
			Если ВычетыРаспределены Тогда
				ДанныеСтраницы.П000200001070 = ДанныеСтраницы.П000200001070
					+ База.СуммаНалогаИсчисленнаяПоОсновнойПоСтавке
					+ База.СуммаНалогаИсчисленнаяПоПовышеннойСтавке
					+ База.СуммаНалогаИсчисленнаяПоПлоскойШкале;
			КонецЕсли;
		КонецЕсли;
		
		// Сумма налога, удержанная у источника выплаты
		УдержаноНалога = ДанныеСтраницы.П000200001080 + База.УдержаноНалога;
		ДанныеСтраницы.П000200001080 = УдержаноНалога;
		
		// Сумма налога, уплаченная в иностранных государствах, подлежащая зачету в Российской Федерации
		ДанныеСтраницы.П000200001130 = ДанныеСтраницы.П000200001130 + База.СуммаНалогаИностранногоГосударства;
		
	КонецЦикла;
	
	Если ДанныеЗаполненныеВручную <> Неопределено Тогда
		
		// Сумма налога, удержанная у источника выплаты по ставке, предусмотренной абзацем третьим пункта 1 или абзацем
		// третьим пункта 3.1 статьи 224 Налогового кодекса Российской Федерации
		ДанныеСтраницы.П000200001081 = ДанныеЗаполненныеВручную.УдержаноНалогаПоПовышеннойСтавке;
		
		// Сумма налога, удержанная c доходов в виде материальной выгоды
		ДанныеСтраницы.П000200001090 = ДанныеЗаполненныеВручную.СуммаНалогаУдержаннаяСМатериальнойВыгоды;
		
		// Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету
		ДанныеСтраницы.П000200001100 = ДанныеЗаполненныеВручную.СуммаТорговогоСбора;
		
		// Сумма фиксированных авансовых платежей, уплаченная налогоплательщиком,
		// или сумма налога на прибыль организаций, подлежащие зачету
		ДанныеСтраницы.П000200001120 = ДанныеЗаполненныеВручную.СуммаФиксированныхАвансовыхПлатежей;
		
		// Сумма налога, уплаченная в связи с применением патентной системы налогообложения, подлежащая зачету
		ДанныеСтраницы.П000200001140 = ДанныеЗаполненныеВручную.СуммаНалогаПСН;
		
		// Сумма налога, возвращенная (зачтенная) в связи с применением вычета в упрощенном порядке
		ДанныеСтраницы.П000200001170 = ДанныеЗаполненныеВручную.СуммаНалогаВозвращеннаяВУпрощенномПорядке;
		
	КонецЕсли;
		
	РассчитатьНалоговуюБазуСтраницыРаздела2(ДанныеСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюБазуСтраницыРаздела2(ДанныеСтраницы)
	
	СуммаДоходов = Макс(ДанныеСтраницы.П000200001010, 0);
	СуммаДоходовНеПодлежащаяНалогообложению = Мин(Макс(ДанныеСтраницы.П000200001020, 0), СуммаДоходов);
	
	// Сумма доходов, подлежащих налогообложению
	СуммаДоходовПодлежащаяНалогообложению = Макс(СуммаДоходов - СуммаДоходовНеПодлежащаяНалогообложению, 0);
	ДанныеСтраницы.П000200001030 =  СуммаДоходовПодлежащаяНалогообложению;
	
	СуммаНалоговыхВычетов = Макс(ДанныеСтраницы.П000200001040, 0);
	СуммаРасходов = Макс(ДанныеСтраницы.П000200001050, 0);
	
	// Налоговая база для исчисления налога
	НалоговаяБаза = Макс(СуммаДоходовПодлежащаяНалогообложению - СуммаНалоговыхВычетов - СуммаРасходов, 0);
	ДанныеСтраницы.П000200001060 = НалоговаяБаза;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РаспределитьНалоговыеБазыРаздела2(ТаблицаСтраницыРаздел2, ВыбраннаяФорма)
	
	ВидыДоходов = ВидыДоходов(ВыбраннаяФорма);
	НалоговыеСтавки = НалоговыеСтавки(ВыбраннаяФорма);
	ПрогрессивнаяШкала = ПрогрессивнаяШкала(ВыбраннаяФорма);
	ОстатокПорогаПримененияОсновнойСтавки = ПрогрессивнаяШкала.ПорогПримененияОсновнойСтавки;
	
	Для Каждого СтраницаРаздела Из ТаблицаСтраницыРаздел2 Цикл
		
		Если СтраницаРаздела.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		ВидДохода = ДанныеСтраницы.П000200001001;
		НалоговаяБаза = ДанныеСтраницы.П000200001060;
		
		СтавкаНалогаСтрокой = НалоговыеСтавки[ВидДохода];
		
		СуммаНалоговойБазыПоОсновнойПоСтавке = 0;
		СуммаНалоговойБазыПоПовышеннойСтавке = 0;
		СуммаИныхНалоговыхБаз = 0;
		
		Если СтавкаНалогаСтрокой = "13/15" Тогда
			Если НалоговаяБаза < ОстатокПорогаПримененияОсновнойСтавки Тогда
				СуммаНалоговойБазыПоОсновнойПоСтавке = НалоговаяБаза;
			Иначе
				СуммаНалоговойБазыПоОсновнойПоСтавке = ОстатокПорогаПримененияОсновнойСтавки;
				СуммаНалоговойБазыПоПовышеннойСтавке = НалоговаяБаза - ОстатокПорогаПримененияОсновнойСтавки;
			КонецЕсли;
			ОстатокПорогаПримененияОсновнойСтавки = Макс(ОстатокПорогаПримененияОсновнойСтавки - НалоговаяБаза, 0);
		Иначе
			СуммаИныхНалоговыхБаз = НалоговаяБаза;
		КонецЕсли;
		
		// Сумма налоговой базы для исчисления налога по ставке, предусмотренной абзацем вторым пункта 1 или абзацем
		// вторым пункта 3.1 статьи 224 Налогового кодекса Российской Федерации
		ДанныеСтраницы.П000200001061 = СуммаНалоговойБазыПоОсновнойПоСтавке;
		
		// Сумма налоговой базы для исчисления налога по ставке предусмотренной абзацем третьим пункта 1 или абзацем
		// третьим пункта 3.1 статьи 224 Налогового кодекса Российской Федерации
		ДанныеСтраницы.П000200001062 = СуммаНалоговойБазыПоПовышеннойСтавке;
		
		// Сумма иных налоговых баз
		ДанныеСтраницы.П000200001063 = СуммаИныхНалоговыхБаз;
		
		// Сумма налога, исчисленная к уплате
		Если ВидДохода <> ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
			СуммаНалогаИсчисленнаяПоОсновнойПоСтавке =
				Окр(СуммаНалоговойБазыПоОсновнойПоСтавке * ПрогрессивнаяШкала.ОсновнаяСтавка / 100, 0);
			СуммаНалогаИсчисленнаяПоПовышеннойСтавке =
				Окр(СуммаНалоговойБазыПоПовышеннойСтавке * ПрогрессивнаяШкала.ПовышеннаяСтавка / 100, 0);
			НалоговаяСтавка = СтавкаНалогаДляСводаДоходов(СтавкаНалогаСтрокой);
			СуммаНалогаИсчисленнаяПоПлоскойШкале =
				Окр(СуммаИныхНалоговыхБаз * НалоговаяСтавка / 100, 0);
			СуммаНалогаИсчисленная = СуммаНалогаИсчисленнаяПоОсновнойПоСтавке
				+ СуммаНалогаИсчисленнаяПоПовышеннойСтавке
				+ СуммаНалогаИсчисленнаяПоПлоскойШкале;
			ДанныеСтраницы.П000200001070 = СуммаНалогаИсчисленная
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьИтогиСтраницыРаздела2(ДанныеСтраницы)
	
	// Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету
	ДанныеСтраницы.П000200001100 = Мин(ДанныеСтраницы.П000200001100, ДанныеСтраницы.П000200001070);
	
	// Сумма налога, уплаченная в связи с применением патентной системы налогообложения, подлежащая зачету
	ДанныеСтраницы.П000200001140 = Мин(ДанныеСтраницы.П000200001140, ДанныеСтраницы.П000200001070);
	
	СуммаНалогаИсчисленная = ДанныеСтраницы.П000200001070;
	
	СуммаНалогаУдержанная = ДанныеСтраницы.П000200001080 + ДанныеСтраницы.П000200001090;
	
	СуммаПодлежащаяЗачету = 
		  ДанныеСтраницы.П000200001100
		+ ДанныеСтраницы.П000200001120
		+ ДанныеСтраницы.П000200001130
		+ ДанныеСтраницы.П000200001140;
	
	// Сумма налога, подлежащая уплате (доплате) в бюджет
	ДанныеСтраницы.П000200001150 = Макс(СуммаНалогаИсчисленная - СуммаНалогаУдержанная - СуммаПодлежащаяЗачету, 0);
	
	// Сумма налога, подлежащая возврату из бюджета
	ДанныеСтраницы.П000200001160 = Макс(СуммаНалогаУдержанная - СуммаНалогаИсчисленная, 0);

КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеВРаздел1()
	
	Перем КодыВидовДеятельностиТребующиеУточнения;
	
	Если Не СобратьДанныеВРаздел1Сервер(КодыВидовДеятельностиТребующиеУточнения) Тогда
		ПоказатьПредупреждениеОНевозможностиЗаполнитьРаздел1(КодыВидовДеятельностиТребующиеУточнения);
	КонецЕсли;
	
	// Обновляем дерево разделов
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
	// Выводим макет в табличный документ
	ВывестиМакетВТаблДокНаСервере("Раздел1", 1, , , Истина);
	
	// Активизируем строку раздела в дереве
	Для Каждого СтрокаРаздела Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если СтрокаРаздела.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОНевозможностиЗаполнитьРаздел1(КодыВидовДеятельностиТребующиеУточнения)
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Результат заполнения';
										|en = 'Результат заполнения'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	
	Если КодыВидовДеятельностиТребующиеУточнения.Количество() = 1 Тогда
		ШаблонРекомендации = НСтр("ru = 'Заполните сумму налога, подлежащую уплате (возврату), для вида деятельности с кодом %1';
									|en = 'Заполните сумму налога, подлежащую уплате (возврату), для вида деятельности с кодом %1'");
	ИначеЕсли КодыВидовДеятельностиТребующиеУточнения.Количество() > 0 Тогда
		ШаблонРекомендации = НСтр("ru = 'Заполните сумму налога, подлежащую уплате (возврату), для видов деятельности с кодом %1';
									|en = 'Заполните сумму налога, подлежащую уплате (возврату), для видов деятельности с кодом %1'");
	Иначе
		ШаблонРекомендации = "";
	КонецЕсли;
	
	Рекомендация = СтрШаблон(ШаблонРекомендации, СтрСоединить(КодыВидовДеятельностиТребующиеУточнения, ", "));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Новый ОписаниеОповещения(),
		СтрШаблон(НСтр("ru = 'Не удалось заполнить Раздел 2 автоматически.%1%2.';
						|en = 'Не удалось заполнить Раздел 2 автоматически.%1%2.'"), Символы.ПС, Рекомендация),
		РежимДиалогаВопрос.ОК,
		ПараметрыВопроса);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеВРаздел1Сервер(КодыВидовДеятельностиТребующиеУточнения = Неопределено)
	
	Перем ИмяСтруктурыГруппы;
	
	КодыВидовДеятельностиТребующиеУточнения = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресНалоговыхБаз) Тогда
		РасчетНалоговыхБаз = ПолучитьИзВременногоХранилища(АдресНалоговыхБаз);
	КонецЕсли;
	Если ТипЗнч(РасчетНалоговыхБаз) <> Тип("ТаблицаЗначений") Тогда
		// Итоги пересчитываем только в том случае, если не заполнена таблица свода доходов
		РассчитатьИтогиЛиста(ЭтотОбъект, Неопределено);
		ЗаполнитьСводныеТаблицы();
		РасчетНалоговыхБаз = ПолучитьИзВременногоХранилища(АдресНалоговыхБаз);
	КонецЕсли;
	
	НалоговыеБазы = НалоговыеБазыСУчетомДанныхЗаполненныхВручную(РасчетНалоговыхБаз, ДанныеРаздела2ЗаполненныеВручную());
	
	РасчетНалога = РасчетНалога(
		НалоговыеБазы,
		СтруктураРеквизитовФормы,
		АдресСводаВычетов,
		КодыВидовДеятельностиТребующиеУточнения);
	
	ТаблицаСтраницыРаздел1.Очистить();
	
	ДобавитьДанныеПоОбычнойДеятельностиВРаздел1(РасчетНалога);
	
	ДобавитьДанныеПоПредпринимательскойДеятельностиВРаздел1(РасчетНалога);
	
	// Если не оказалось новых страниц раздела, добавим пустую
	Если ТаблицаСтраницыРаздел1.Количество() = 0 Тогда
		НоваяСтраницаРаздела1();
	КонецЕсли;
	
	// Обновим значения показателей в структуре "Данные" каждой страницы раздела 1
	мСтруктураМногострочныхРазделов.Свойство(
		ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел1"),
		ИмяСтруктурыГруппы);
	
	СтруктураГруппы = ЭтотОбъект[ИмяСтруктурыГруппы];
	СписокКолонок = СтруктураГруппы.Выгрузить().Колонки;
	Для Каждого СтраницаРаздела1 Из ТаблицаСтраницыРаздел1 Цикл
		Для Индекс = 0 По СтраницаРаздела1.ДанныеДопСтрок[0].Значение.Количество() - 1 Цикл
			СтрокаТаблицы = СтраницаРаздела1.ДанныеДопСтрок[0].Значение[Индекс];
			Для Каждого Колонка Из СписокКолонок Цикл
				СтраницаРаздела1.Данные[0].Значение.Вставить(СтрШаблон("%1_%2", Колонка.Имя, Индекс + 1), СтрокаТаблицы[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не ЗначениеЗаполнено(КодыВидовДеятельностиТребующиеУточнения);
	
КонецФункции

&НаСервереБезКонтекста
Функция НалоговыеБазыСУчетомДанныхЗаполненныхВручную(РасчетНалоговыхБаз, ДанныеРаздела2)
	
	ТипСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(13);
	
	НалоговыеБазы = РасчетНалоговыхБаз.Скопировать();
	НалоговыеБазы.Колонки.Добавить("УдержаноНалогаПоПовышеннойСтавке", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды", ТипСуммы);
	НалоговыеБазы.Колонки.Добавить("СуммаТорговогоСбора", ТипСуммы);
	НалоговыеБазы.Колонки.Добавить("СуммаФиксированныхАвансовыхПлатежей", ТипСуммы);
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаПСН", ТипСуммы);
	НалоговыеБазы.Колонки.Добавить("СуммаНалогаВозвращеннаяВУпрощенномПорядке", ТипСуммы);
	
	ПоляОтбора = "ВидДохода, ОКТМО, НалоговаяСтавка";
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела2 Цикл
		
		НалоговыеБазыПоВидуДохода = НалоговыеБазы.Скопировать(Новый Структура("ВидДохода", СтрокаДанных.ВидДохода), ПоляОтбора);
		НалоговыеБазыПоВидуДохода.Сортировать(ПоляОтбора);
		
		Для Каждого НайденнаяСтрока Из НалоговыеБазыПоВидуДохода Цикл
			
			ПараметрыОтбора.ВидДохода = НайденнаяСтрока.ВидДохода;
			ПараметрыОтбора.ОКТМО = НайденнаяСтрока.ОКТМО;
			ПараметрыОтбора.НалоговаяСтавка = НайденнаяСтрока.НалоговаяСтавка;
			
			База = НалоговыеБазы.НайтиСтроки(ПараметрыОтбора)[0];
			
			УдержаноНалогаПоПовышеннойСтавке = Мин(СтрокаДанных.УдержаноНалогаПоПовышеннойСтавке, Макс(База.УдержаноНалога, 0));
			База.УдержаноНалогаПоПовышеннойСтавке = База.УдержаноНалогаПоПовышеннойСтавке + УдержаноНалогаПоПовышеннойСтавке;
			СтрокаДанных.УдержаноНалогаПоПовышеннойСтавке = СтрокаДанных.УдержаноНалогаПоПовышеннойСтавке - УдержаноНалогаПоПовышеннойСтавке;
			
			СуммаНалогаИсчисленная = База.СуммаНалогаИсчисленнаяПоОсновнойПоСтавке
				+ База.СуммаНалогаИсчисленнаяПоПовышеннойСтавке
				+ База.СуммаНалогаИсчисленнаяПоПлоскойШкале;
			
			СуммаНалогаУдержанная = База.УдержаноНалога
				+ База.СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			
			СуммаПодлежащаяЗачету = База.СуммаФиксированныхАвансовыхПлатежей
				+ База.СуммаНалогаИностранногоГосударства
				+ База.СуммаТорговогоСбора
				+ База.СуммаНалогаПСН;
			
			СуммаНалога = СуммаНалогаИсчисленная - СуммаНалогаУдержанная - СуммаПодлежащаяЗачету;
			
			СуммаНалогаУдержаннаяСМатериальнойВыгоды = Мин(СтрокаДанных.СуммаНалогаУдержаннаяСМатериальнойВыгоды, Макс(СуммаНалога, 0));
			СуммаНалога = СуммаНалога - СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			База.СуммаНалогаУдержаннаяСМатериальнойВыгоды = База.СуммаНалогаУдержаннаяСМатериальнойВыгоды + СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			СтрокаДанных.СуммаНалогаУдержаннаяСМатериальнойВыгоды = СтрокаДанных.СуммаНалогаУдержаннаяСМатериальнойВыгоды - СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			
			СуммаФиксированныхАвансовыхПлатежей = Мин(СтрокаДанных.СуммаФиксированныхАвансовыхПлатежей, Макс(СуммаНалога, 0));
			СуммаНалога = СуммаНалога - СуммаФиксированныхАвансовыхПлатежей;
			База.СуммаФиксированныхАвансовыхПлатежей = База.СуммаФиксированныхАвансовыхПлатежей + СуммаФиксированныхАвансовыхПлатежей;
			СтрокаДанных.СуммаФиксированныхАвансовыхПлатежей = СтрокаДанных.СуммаФиксированныхАвансовыхПлатежей - СуммаФиксированныхАвансовыхПлатежей;
			
			СуммаТорговогоСбора = Мин(СтрокаДанных.СуммаТорговогоСбора, Макс(СуммаНалога, 0));
			СуммаНалога = СуммаНалога - СуммаТорговогоСбора;
			База.СуммаТорговогоСбора = База.СуммаТорговогоСбора + СуммаТорговогоСбора;
			СтрокаДанных.СуммаТорговогоСбора = СтрокаДанных.СуммаТорговогоСбора - СуммаТорговогоСбора;
			
			СуммаНалогаПСН = Мин(СтрокаДанных.СуммаНалогаПСН, Макс(СуммаНалога, 0));
			СуммаНалога = СуммаНалога - СуммаНалогаПСН;
			База.СуммаНалогаПСН = База.СуммаНалогаПСН + СуммаНалогаПСН;
			СтрокаДанных.СуммаНалогаПСН = СтрокаДанных.СуммаНалогаПСН - СуммаНалогаПСН;
			
			СуммаНалогаВозвращеннаяВУпрощенномПорядке = Мин(СтрокаДанных.СуммаНалогаВозвращеннаяВУпрощенномПорядке, Макс(СуммаНалога, 0));
			База.СуммаНалогаВозвращеннаяВУпрощенномПорядке = База.СуммаНалогаВозвращеннаяВУпрощенномПорядке + СуммаНалогаВозвращеннаяВУпрощенномПорядке;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НалоговыеБазы.Свернуть("ВидДохода, ОКТМО",
		"СуммаНалогаИсчисленнаяПоОсновнойПоСтавке, СуммаНалогаИсчисленнаяПоПовышеннойСтавке, СуммаНалогаИсчисленнаяПоПлоскойШкале, "
		+ "УдержаноНалога, УдержаноНалогаПоПовышеннойСтавке, СуммаНалогаИностранногоГосударства, "
		+ "СуммаНалогаУдержаннаяСМатериальнойВыгоды, СуммаТорговогоСбора, СуммаФиксированныхАвансовыхПлатежей, "
		+ "СуммаНалогаПСН, СуммаНалогаВозвращеннаяВУпрощенномПорядке");
	
	НалоговыеБазы.Сортировать("ВидДохода, ОКТМО");
	
	Возврат НалоговыеБазы;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасчетНалога(НалоговыеБазы, СтруктураРеквизитовФормы, АдресСводаВычетов, КодыВидовДеятельностиТребующиеУточнения)
	
	КодыВидовДеятельностиТребующиеУточнения = Новый Массив;
	
	РасчетНалога = Новый ТаблицаЗначений();
	РасчетНалога.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	РасчетНалога.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	РасчетНалога.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	РасчетНалога.Колонки.Добавить("ПовышеннаяСтавка", Новый ОписаниеТипов("Булево"));
	
	ОКТМОналогоплательщика = СтруктураРеквизитовФормы.ОКТМО;
	
	ВсеВычетыРаспределены = ВсеВычетыРаспределены(АдресСводаВычетов);
	
	КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов = 
		КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого База Из НалоговыеБазы Цикл
		
		ВычетыРаспределены = ВсеВычетыРаспределены
			Или КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов.Найти(База.ВидДохода) = Неопределено;
		
		ДобавленРасчет = Ложь;
		
		Если ВычетыРаспределены Тогда
			
			СуммаНалогаИсчисленная = База.СуммаНалогаИсчисленнаяПоОсновнойПоСтавке + База.СуммаНалогаИсчисленнаяПоПлоскойШкале;
			СуммаНалогаИсчисленнаяПоПовышеннойСтавке = База.СуммаНалогаИсчисленнаяПоПовышеннойСтавке;
			
			СуммаНалогаУдержанная = База.УдержаноНалога + База.СуммаНалогаУдержаннаяСМатериальнойВыгоды;
			УдержаноНалогаПоПовышеннойСтавке = База.УдержаноНалогаПоПовышеннойСтавке;
			
			СуммаПодлежащаяЗачету = База.СуммаФиксированныхАвансовыхПлатежей
				+ База.СуммаНалогаИностранногоГосударства
				+ База.СуммаТорговогоСбора
				+ База.СуммаНалогаПСН;
			
			УменьшениеНалога = Мин(СуммаНалогаУдержанная + СуммаПодлежащаяЗачету, СуммаНалогаИсчисленная);
			СуммаНалогаПодлежащаяУплате = СуммаНалогаИсчисленная - УменьшениеНалога;
			
			УменьшениеНалогаПоПовышеннойСтавке = Мин(СуммаНалогаУдержанная + СуммаПодлежащаяЗачету - УменьшениеНалога, СуммаНалогаИсчисленнаяПоПовышеннойСтавке);
			СуммаНалогаПодлежащаяУплатеПоПовышеннойСтавке = СуммаНалогаИсчисленнаяПоПовышеннойСтавке - УменьшениеНалогаПоПовышеннойСтавке;
			
			СуммаНалогаПодлежащаяВозврату = Макс(СуммаНалогаУдержанная - СуммаНалогаИсчисленная - СуммаНалогаИсчисленнаяПоПовышеннойСтавке, 0);
			
			СуммаНалогаПодлежащаяВозвратуПоПовышеннойСтавке = Мин(СуммаНалогаПодлежащаяВозврату, УдержаноНалогаПоПовышеннойСтавке);
			СуммаНалогаПодлежащаяВозврату = СуммаНалогаПодлежащаяВозврату - СуммаНалогаПодлежащаяВозвратуПоПовышеннойСтавке;
			
			Если СуммаНалогаПодлежащаяУплате > 0 Тогда
				ДобавитьСтрокуРасчета(РасчетНалога, База.ВидДохода, ОКТМОналогоплательщика, СуммаНалогаПодлежащаяУплате, Ложь);
				ДобавленРасчет = Истина;
			КонецЕсли;
			
			Если СуммаНалогаПодлежащаяУплатеПоПовышеннойСтавке > 0 Тогда
				ДобавитьСтрокуРасчета(РасчетНалога, База.ВидДохода, ОКТМОналогоплательщика, СуммаНалогаПодлежащаяУплатеПоПовышеннойСтавке, Истина);
				ДобавленРасчет = Истина;
			КонецЕсли;
			
			Если СуммаНалогаПодлежащаяВозврату > 0 Тогда
				ДобавитьСтрокуРасчета(РасчетНалога, База.ВидДохода, База.ОКТМО, -СуммаНалогаПодлежащаяВозврату, Ложь);
				ДобавленРасчет = Истина;
			КонецЕсли;
			
			Если СуммаНалогаПодлежащаяВозвратуПоПовышеннойСтавке > 0 Тогда
				ДобавитьСтрокуРасчета(РасчетНалога, База.ВидДохода, База.ОКТМО, -СуммаНалогаПодлежащаяВозвратуПоПовышеннойСтавке, Истина);
				ДобавленРасчет = Истина;
			КонецЕсли;
			
		Иначе
			КодыВидовДеятельностиТребующиеУточнения.Добавить(База.ВидДохода);
		КонецЕсли;
		
		Если Не ДобавленРасчет Тогда
			ДобавитьСтрокуРасчета(РасчетНалога, База.ВидДохода, База.ОКТМО);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РасчетНалога;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуРасчета(РасчетНалога, ВидДохода, ОКТМО, СуммаНалога = 0, ПовышеннаяСтавка = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидДохода", ВидДохода);
	ПараметрыОтбора.Вставить("ОКТМО", ОКТМО);
	Если ПовышеннаяСтавка <> Неопределено Тогда
		ПараметрыОтбора.Вставить("ПовышеннаяСтавка", ПовышеннаяСтавка);
	КонецЕсли;
	
	НайденныеСтроки = РасчетНалога.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Расчет = РасчетНалога.Добавить();
	Иначе
		Расчет = НайденныеСтроки[0];
	КонецЕсли;
	
	Расчет.ВидДохода = ВидДохода;
	Расчет.ОКТМО = ОКТМО;
	Расчет.ПовышеннаяСтавка = ?(ПовышеннаяСтавка <> Неопределено, ПовышеннаяСтавка, Ложь);
	Расчет.СуммаНалога = Расчет.СуммаНалога + СуммаНалога;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоОбычнойДеятельностиВРаздел1(РасчетНалога)
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокНаСтранице(ЭтотОбъект, "Раздел1");
	НомерСтроки = 0;
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	СтраницаРаздела = Неопределено;
	
	Для Каждого Расчет Из РасчетНалога Цикл
		
		Если Расчет.ВидДохода = ВидыДоходов.ПредпринимательскаяДеятельность Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТаблицаСтраницыРаздел1.Количество() = 0 Или НомерСтроки > МаксимальноеКоличествоСтрок Тогда
			СтраницаРаздела = НоваяСтраницаРаздела1();
			НомерСтроки = 1;
		КонецЕсли;
		
		ДанныеСтраницы = СтраницаРаздела.ДанныеДопСтрок[0].Значение.Добавить();
		
		ДанныеСтраницы.П000100001020 = КБК(
			Расчет.ВидДохода, Расчет.СуммаНалога >= 0, Расчет.ПовышеннаяСтавка, СтруктураРеквизитовФормы.мВыбраннаяФорма);
		ДанныеСтраницы.П000100001030 = Расчет.ОКТМО;
		ДанныеСтраницы.П000100001040 = ?(Расчет.СуммаНалога > 0, Расчет.СуммаНалога, 0);
		ДанныеСтраницы.П000100001050 = ?(Расчет.СуммаНалога < 0,-Расчет.СуммаНалога, 0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоПредпринимательскойДеятельностиВРаздел1(РасчетНалога)
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидДохода", ВидыДоходов.ПредпринимательскаяДеятельность);
	ПараметрыОтбора.Вставить("ПовышеннаяСтавка", Ложь);
	
	СуммаНалогаИПпоОсновнойСтавке = 0;
	ПредпринимательскаяДеятельностьОсновнаяСтавка = РасчетНалога.НайтиСтроки(ПараметрыОтбора);
	Если ПредпринимательскаяДеятельностьОсновнаяСтавка.Количество() <> 0 Тогда
		СуммаНалогаИПпоОсновнойСтавке = ПредпринимательскаяДеятельностьОсновнаяСтавка[0].СуммаНалога;
	КонецЕсли;
	
	СуммаНалогаИПпоПовышеннойСтавке = 0;
	ПредпринимательскаяДеятельностьПовышеннаяСтавка = РасчетНалога.НайтиСтроки(
		Новый Структура("ВидДохода, ПовышеннаяСтавка", ВидыДоходов.ПредпринимательскаяДеятельность, Истина));
	Если ПредпринимательскаяДеятельностьПовышеннаяСтавка.Количество() <> 0 Тогда
		СуммаНалогаИПпоПовышеннойСтавке = ПредпринимательскаяДеятельностьПовышеннаяСтавка[0].СуммаНалога;
	КонецЕсли;
	
	Если ПредпринимательскаяДеятельностьОсновнаяСтавка.Количество() = 0
		И ПредпринимательскаяДеятельностьПовышеннаяСтавка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаСтраницыПриложение3.Количество() <> 0
		И ТаблицаСтраницыПриложение3Продолжение[0].Данные.Количество() <> 0 Тогда
		
		ПоказателиЛиста = ТаблицаСтраницыПриложение3Продолжение[0].Данные[0].Значение;
		
		НалоговаяБазаИП1Квартал = ПоказателиЛиста.П002000001190;
		НалоговаяБазаИППолугодие = ПоказателиЛиста.П002000001191;
		НалоговаяБазаИП9Месяцев = ПоказателиЛиста.П002000001192;
		
		АвансовыйПлатежИП1Квартал = ПоказателиЛиста.П002000001200;
		АвансовыйПлатежИППолугодие = ПоказателиЛиста.П002000001201;
		АвансовыйПлатежИП9Месяцев = ПоказателиЛиста.П002000001202;
		
	Иначе
		
		НалоговаяБазаИП1Квартал = 0;
		НалоговаяБазаИППолугодие = 0;
		НалоговаяБазаИП9Месяцев = 0;
		
		АвансовыйПлатежИП1Квартал = 0;
		АвансовыйПлатежИППолугодие = 0;
		АвансовыйПлатежИП9Месяцев = 0;
		
	КонецЕсли;
	
	ПрогрессивнаяШкала = ПрогрессивнаяШкала(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	АвансовыйПлатежИП1КварталПоПовышеннойСтавке = УдержаноНалогаПоПовышеннойСтавке(
		АвансовыйПлатежИП1Квартал, ПрогрессивнаяШкала);
	АвансовыйПлатежИППолугодиеПоПовышеннойСтавке = УдержаноНалогаПоПовышеннойСтавке(
		АвансовыйПлатежИППолугодие, ПрогрессивнаяШкала);
	АвансовыйПлатежИП9МесяцевПоПовышеннойСтавке = УдержаноНалогаПоПовышеннойСтавке(
		АвансовыйПлатежИП9Месяцев, ПрогрессивнаяШкала);
	
	АвансовыйПлатежИП1КварталПоОсновнойСтавке = Макс(0, 
		АвансовыйПлатежИП1Квартал - АвансовыйПлатежИП1КварталПоПовышеннойСтавке);
	АвансовыйПлатежИППолугодиеПоОсновнойСтавке = Макс(0,
		АвансовыйПлатежИППолугодие - АвансовыйПлатежИППолугодиеПоПовышеннойСтавке);
	АвансовыйПлатежИП9МесяцевПоОсновнойСтавке = Макс(0,
		АвансовыйПлатежИП9Месяцев - АвансовыйПлатежИП9МесяцевПоПовышеннойСтавке);
	
	НомерСтраницы = 0;
	
	Если СуммаНалогаИПпоОсновнойСтавке <> 0
		Или АвансовыйПлатежИП1КварталПоОсновнойСтавке <> 0
		Или АвансовыйПлатежИППолугодиеПоОсновнойСтавке <> 0
		Или АвансовыйПлатежИП9МесяцевПоОсновнойСтавке <> 0 Тогда
		
		НомерСтраницы = НомерСтраницы + 1;
		Если ТаблицаСтраницыРаздел1.Количество() < НомерСтраницы Тогда
			СтраницаРаздела = НоваяСтраницаРаздела1();
		Иначе
			СтраницаРаздела = ТаблицаСтраницыРаздел1[НомерСтраницы - 1];
		КонецЕсли;
		
		ЗаполнитьСтраницуРаздела1ПоПредпринимательскойДеятельности(
			СтраницаРаздела.Данные[0].Значение,
			КБК(ВидыДоходов.ПредпринимательскаяДеятельность, Истина, Ложь, СтруктураРеквизитовФормы.мВыбраннаяФорма),
			СтруктураРеквизитовФормы.ОКТМО,
			АвансовыйПлатежИП1КварталПоОсновнойСтавке,
			АвансовыйПлатежИППолугодиеПоОсновнойСтавке,
			АвансовыйПлатежИП9МесяцевПоОсновнойСтавке,
			СуммаНалогаИПпоОсновнойСтавке);
		
	КонецЕсли;
	
	Если СуммаНалогаИПпоПовышеннойСтавке <> 0
		Или АвансовыйПлатежИП1КварталПоПовышеннойСтавке <> 0
		Или АвансовыйПлатежИППолугодиеПоПовышеннойСтавке <> 0
		Или АвансовыйПлатежИП9МесяцевПоПовышеннойСтавке <> 0 Тогда
		
		НомерСтраницы = НомерСтраницы + 1;
		Если ТаблицаСтраницыРаздел1.Количество() < НомерСтраницы Тогда
			СтраницаРаздела = НоваяСтраницаРаздела1();
		Иначе
			СтраницаРаздела = ТаблицаСтраницыРаздел1[НомерСтраницы - 1];
		КонецЕсли;
		
		ЗаполнитьСтраницуРаздела1ПоПредпринимательскойДеятельности(
			СтраницаРаздела.Данные[0].Значение,
			КБК(ВидыДоходов.ПредпринимательскаяДеятельность, Истина, Истина, СтруктураРеквизитовФормы.мВыбраннаяФорма),
			СтруктураРеквизитовФормы.ОКТМО,
			АвансовыйПлатежИП1КварталПоПовышеннойСтавке,
			АвансовыйПлатежИППолугодиеПоПовышеннойСтавке,
			АвансовыйПлатежИП9МесяцевПоПовышеннойСтавке,
			СуммаНалогаИПпоПовышеннойСтавке);
		
	КонецЕсли;
	
	Если НомерСтраницы = 0 Тогда
		
		// Добавляем пустую запись для пункта 2 Раздела 2
		
		НомерСтраницы = НомерСтраницы + 1;
		Если ТаблицаСтраницыРаздел1.Количество() < НомерСтраницы Тогда
			СтраницаРаздела = НоваяСтраницаРаздела1();
		Иначе
			СтраницаРаздела = ТаблицаСтраницыРаздел1[НомерСтраницы - 1];
		КонецЕсли;
		
		ЗаполнитьСтраницуРаздела1ПоПредпринимательскойДеятельности(
			СтраницаРаздела.Данные[0].Значение,
			КБК(ВидыДоходов.ПредпринимательскаяДеятельность, Истина, Ложь, СтруктураРеквизитовФормы.мВыбраннаяФорма),
			СтруктураРеквизитовФормы.ОКТМО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НоваяСтраницаРаздела1()
	
	СтраницаРаздела = ТаблицаСтраницыРаздел1.Добавить();
	
	СтраницаРаздела.Представление = СтрШаблон(
		НСтр("ru = 'Страница N%1';
			|en = 'Страница N%1'"),
		Формат(ТаблицаСтраницыРаздел1.Количество(), "ЧГ=0;"));
	
	СтраницаРаздела.АвтоматическоеПредставление = Истина;
	СтраницаРаздела.Данные.Добавить(Новый Структура);
	СтраницаРаздела.АктивнаяСтраница = (ТаблицаСтраницыРаздел1.Количество() = 1);
	
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел1");
	ТаблицаДопСтрокРаздела = ЭтотОбъект["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
	СтраницаРаздела.ДанныеДопСтрок.Добавить(ТаблицаДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
	
	ЗаполнитьСтраницуРаздела1ПоПредпринимательскойДеятельности(СтраницаРаздела.Данные[0].Значение);
	
	Возврат СтраницаРаздела;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтраницуРаздела1ПоПредпринимательскойДеятельности(ДанныеСтраницы, КБК = "", ОКТМО = "", АвансовыйПлатежИП1Квартал = 0, АвансовыйПлатежИППолугодие = 0, АвансовыйПлатежИП9Месяцев = 0, СуммаНалога = 0)
	
	// Заполним КБК
	ДанныеСтраницы.Вставить("П000100001060", КБК);
	
	// 1 квартал
	Если АвансовыйПлатежИП1Квартал <> 0 Тогда
		ДанныеСтраницы.Вставить("П000100001070", ОКТМО);
		ДанныеСтраницы.Вставить("П000100001080", АвансовыйПлатежИП1Квартал);
	КонецЕсли;
	
	// Полугодие
	АвансИсчисленныйПолугодие = АвансовыйПлатежИППолугодие - АвансовыйПлатежИП1Квартал;
	Если АвансИсчисленныйПолугодие <> 0 Тогда
		ДанныеСтраницы.Вставить("П000100001090", ОКТМО);
			Если АвансИсчисленныйПолугодие > 0 Тогда
			ДанныеСтраницы.Вставить("П000100001100", АвансИсчисленныйПолугодие);
			ДанныеСтраницы.Вставить("П000100001110", 0);
		Иначе
			ДанныеСтраницы.Вставить("П000100001100", 0);
			ДанныеСтраницы.Вставить("П000100001110", -АвансИсчисленныйПолугодие);
		КонецЕсли;
	КонецЕсли;
	
	// 9 Месяцев
	АвансИсчисленный9Месяцев = АвансовыйПлатежИП9Месяцев - АвансовыйПлатежИППолугодие;
	Если АвансИсчисленный9Месяцев <> 0 Тогда
		ДанныеСтраницы.Вставить("П000100001120", ОКТМО);
		Если АвансИсчисленный9Месяцев > 0 Тогда
			ДанныеСтраницы.Вставить("П000100001130", АвансИсчисленный9Месяцев);
			ДанныеСтраницы.Вставить("П000100001140", 0);
		Иначе
			ДанныеСтраницы.Вставить("П000100001130", 0);
			ДанныеСтраницы.Вставить("П000100001140", -АвансИсчисленный9Месяцев);
		КонецЕсли;
	КонецЕсли;
	
	// Год
	НалогИсчисленный = СуммаНалога - АвансовыйПлатежИП9Месяцев;
	ДанныеСтраницы.Вставить("П000100001150", ОКТМО);
	ДанныеСтраницы.Вставить("П000100001160", 0);
	ДанныеСтраницы.Вставить("П000100001170", 0);
	Если НалогИсчисленный > 0 Тогда
		ДанныеСтраницы.Вставить("П000100001160", НалогИсчисленный);
	Иначе
		ДанныеСтраницы.Вставить("П000100001170", -НалогИсчисленный);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРаздела2ЗаполненныеВручную()
	
	ДанныеЗаполненныеВручную = Новый ТаблицаЗначений;
	ДанныеЗаполненныеВручную.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	
	ТипДанных = ОбщегоНазначения.ОписаниеТипаЧисло(13);
	
	ПоказателиСуммы = Новый Массив;
	ПоказателиСуммы.Добавить("УдержаноНалогаПоПовышеннойСтавке");
	ПоказателиСуммы.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	ПоказателиСуммы.Добавить("СуммаТорговогоСбора");
	ПоказателиСуммы.Добавить("СуммаФиксированныхАвансовыхПлатежей");
	ПоказателиСуммы.Добавить("СуммаНалогаПСН");
	ПоказателиСуммы.Добавить("СуммаНалогаВозвращеннаяВУпрощенномПорядке");

	Для Каждого ТекущийПоказатель Из ПоказателиСуммы Цикл
		ДанныеЗаполненныеВручную.Колонки.Добавить(ТекущийПоказатель, ТипДанных);
	КонецЦикла;
	
	Для Каждого СтраницаРаздела Из ТаблицаСтраницыРаздел2 Цикл
		
		Если СтраницаРаздела.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		ЗначенияПоказателей = Новый Структура(СтрСоединить(ПоказателиСуммы, ","));
		
		ВидДохода = ДанныеСтраницы.П000200001001;
		
		ЗначенияПоказателей.Вставить("УдержаноНалогаПоПовышеннойСтавке", ДанныеСтраницы.П000200001081);
		ЗначенияПоказателей.Вставить("СуммаНалогаУдержаннаяСМатериальнойВыгоды", ДанныеСтраницы.П000200001090);
		ЗначенияПоказателей.Вставить("СуммаТорговогоСбора", ДанныеСтраницы.П000200001100);
		ЗначенияПоказателей.Вставить("СуммаФиксированныхАвансовыхПлатежей", ДанныеСтраницы.П000200001120);
		ЗначенияПоказателей.Вставить("СуммаНалогаПСН", ДанныеСтраницы.П000200001140);
		ЗначенияПоказателей.Вставить("СуммаНалогаВозвращеннаяВУпрощенномПорядке", ДанныеСтраницы.П000200001170);
		
		ЗначенияЗаполнены = Ложь;
		Для Каждого ИмяПоказателя Из ПоказателиСуммы Цикл
			ЗначенияЗаполнены = ЗначенияЗаполнены Или ЗначениеЗаполнено(ЗначенияПоказателей[ИмяПоказателя]);
		КонецЦикла;
		
		Если ЗначенияЗаполнены Тогда
			СтрокаДанных = ДанныеЗаполненныеВручную.Добавить();
			СтрокаДанных.ВидДохода = ВидДохода;
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ЗначенияПоказателей);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненныеВручную.Свернуть("ВидДохода", СтрСоединить(ПоказателиСуммы, ","));
	
	Возврат ДанныеЗаполненныеВручную;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКС

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ПроверитьКонтрольныеСоотношения(
		СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецФункции

#КонецОбласти

#Область ЧтениеСохранениеВыводОтчета

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			ИдентификаторМногострочнойГруппы = "";
			Если Не мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ИдентификаторМногострочнойГруппы) Тогда
				Продолжить;
			КонецЕсли;
			
			МногострочнаяГруппа = ЭтотОбъект[ИдентификаторМногострочнойГруппы];
			МногострочнаяГруппа.Очистить();
			Для каждого СтрокаДанных Из ЭлементСтруктуры.Значение Цикл
				ЗаполнитьЗначенияСвойств(МногострочнаяГруппа.Добавить(), СтрокаДанных);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения)
		И ДанныеВариановАвтоЗаполнения <> Неопределено Тогда
		
		мСтруктураВариантыЗаполнения.Очистить();
		
		Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
			
			мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
			
			ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
			
			Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
				
				ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
				
				ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			ИдентификаторМногостраничногоРаздела = "";
			Если Не мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ИдентификаторМногостраничногоРаздела) Тогда
				Продолжить;
			КонецЕсли;
			
			МногостраничныйРаздел = ЭтотОбъект[ИдентификаторМногостраничногоРаздела];
			
			Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				ЭлементСтруктуры.Значение.Колонки.Добавить("ДанныеДопСтрок");
			КонецЕсли;
			
			МногостраничныйРаздел.Очистить();
			Для Каждого СтрокаДанных Из ЭлементСтруктуры.Значение Цикл
				ЗаполнитьЗначенияСвойств(МногостраничныйРаздел.Добавить(), СтрокаДанных);
			КонецЦикла;
			
			Если МногостраничныйРаздел.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если МногостраничныйРаздел[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из МногостраничныйРаздел Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						ПреобразоватьПосимвольныеДанныеВЗначения(ЭлементСтруктуры.Значение[МногостраничныйРаздел.Индекс(СтрокаТаблЗнач)].Данные);
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[МногостраничныйРаздел.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если МногостраничныйРаздел[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							МногостраничныйРаздел[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтотОбъект["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						МногостраничныйРаздел[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтотОбъект[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	Если НЕ СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
		
	Если НЕ СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки) Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	СтатусНалогоплательщика = Неопределено;
	Если СписокСохранения.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный")
		И СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Свойство("СтатусНалогоплательщика", СтатусНалогоплательщика) Тогда
		ОбновитьПеременныеМодуляНаСервере("СтатусНалогоплательщика", СтатусНалогоплательщика);
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПреобразоватьПосимвольныеДанныеВЗначения(ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы]);
			ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела, УдалитьДанныеПомощника)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Ложь, НаимТекРаздела, УдалитьДанныеПомощника);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Ложь, НаимТекРаздела, УдалитьДанныеПомощника = Ложь) Экспорт
	
	Если ВидДокументаНомерКорректировкиИзменен Тогда
		РазблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("мВариант", Вариант);
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи", ДатаПодписи);
	СтруктураРеквизитовФормы.Вставить("Комментарий", Комментарий);
	СтруктураРеквизитовФормы.Вставить("УдалитьДанныеПомощника", УдалитьДанныеПомощника);
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СвойстваРазделовДекларации = РеквизитФормыВЗначение("мСвойстваРазделовДекларации", Тип("ДеревоЗначений"));
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("ПоказателиОтчета", Отчеты.РегламентированныйОтчет3НДФЛ.ПоказателиОтчета(
		СвойстваРазделовДекларации, ЭтотОбъект, , СтруктураРеквизитовФормы.мВыбраннаяФорма));
	ДанныеФормы.Вставить("ДанныеМногострочныхРазделов", Отчеты.РегламентированныйОтчет3НДФЛ.ДанныеМногострочныхРазделов(
		мСтруктураМногострочныхРазделов, ЭтотОбъект));
	ДанныеФормы.Вставить("ДанныеМногостраничныхРазделов", Отчеты.РегламентированныйОтчет3НДФЛ.ДанныеМногостраничныхРазделов(
		СвойстваРазделовДекларации, мСтруктураМногостраничныхРазделов, ЭтотОбъект));
	ДанныеФормы.Вставить("ДеревоНастройкиСтраниц", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ДанныеФормы.Вставить("ДанныеВариантовАвтоЗаполнения",
		Отчеты.РегламентированныйОтчет3НДФЛ.ДанныеВариантовАвтоЗаполнения(мСтруктураВариантыЗаполнения, ЭтотОбъект));
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	ОтчетЗаписан = Отчеты.РегламентированныйОтчет3НДФЛ.ЗаписатьДанныеФормы(
		ДанныеФормы, СтруктураРеквизитовФормы, КодИФНС, Автосохранение, ВидДокументаНомерКорректировкиИзменен);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ОтчетЗаписан Тогда
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат ОтчетЗаписан;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу()
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	ЗаполнениеЗначенийВКвадратиках(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаСервере
Процедура ОчиститьТабличноеПолеСпец(ИмяТекущегоРаздела, ОбновитьСтавки = Истина) Экспорт
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтотОбъект, ИмяТекущегоРаздела);
	
	НомерКорректировки = 0;
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СохранитьДанныеРаздела(ИмяТекущегоРаздела, Истина, Ложь);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ТабличныйДокумент.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтотОбъект, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт
	
	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;
	
	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
			
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
			
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = Отчеты.РегламентированныйОтчет3НДФЛ.ПараметрыВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, мДанныеОтчета.Титульный);
	
	ДеревоДляСравнения = Отчеты.РегламентированныйОтчет3НДФЛ.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ПараметрыВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, мДанныеОтчета.Титульный);
	
	ДеревоДляЗагрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если Не РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыВыгрузки, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ПроверитьИПреобразоватьТочностьОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ПроверитьИПреобразоватьТочностьОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ПараметрыВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, мДанныеОтчета.Титульный);
	ДеревоВыгрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	Если НЕ ВыгрузкаВозможна(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда

		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1") Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях"".';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0"".';
									|en = 'Перед выгрузкой необходимо установить точность ""0"".'");
			
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ПараметрыВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, мДанныеОтчета.Титульный);
	ДеревоВыгрузки = Отчеты.РегламентированныйОтчет3НДФЛ.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если Не ВыгрузкаВозможна(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если Не ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ДеревоВыгрузки)
	
	Если Не ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1, Раздел2") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Должны быть заполнены разделы 1 и 2.';
				|en = 'Должны быть заполнены разделы 1 и 2.'"),
			"Раздел1");
		Возврат Ложь;
	КонецЕсли;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Раздел1", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Раздел1.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Раздел1[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуРаздела1(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Раздел2", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	СуммаНалогаВУпрощенномПорядке = 0;
	Для Индекс = 0 По мДанныеОтчета.Раздел2.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Раздел2[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуРаздела2(ДанныеСтраницы, Индекс + 1);
			Если ДанныеСтраницы.Свойство("П000200001170") Тогда
				СуммаНалогаВУпрощенномПорядке = СуммаНалогаВУпрощенномПорядке + ДанныеСтраницы.П000200001170;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение1", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение1.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение1[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения1(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение2", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение2.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение2[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения2(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	Если мДанныеОтчета.Приложение5Продолжение.Свойство("П000900001230") Тогда
		ИнвестиционныйВычетУпрощенныйПорядок = мДанныеОтчета.Приложение5Продолжение.П000900001230;
	Иначе
		ИнвестиционныйВычетУпрощенныйПорядок = 0;
	КонецЕсли;
	
	ИмущественныйВычетУпрощенныйПорядок = 0;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение7", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение7.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение7[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения7(ДанныеСтраницы, Индекс + 1);
			Если ДанныеСтраницы.Свойство("П000700001121") Тогда
				ИмущественныйВычетУпрощенныйПорядок = ИмущественныйВычетУпрощенныйПорядок + ДанныеСтраницы.П000700001121;
			КонецЕсли;
			Если ДанныеСтраницы.Свойство("П000700001131") Тогда
				ИмущественныйВычетУпрощенныйПорядок = ИмущественныйВычетУпрощенныйПорядок + ДанныеСтраницы.П000700001131;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение8", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение8.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение8[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения8(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение5Расчет", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение5Расчет.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение5Расчет[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложение5Расчет(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, "Приложение1Расчет", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Индекс = 0 По мДанныеОтчета.Приложение1Расчет.Количество() - 1 Цикл
		ДанныеСтраницы = мДанныеОтчета.Приложение1Расчет[Индекс].Данные[0].Значение;
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложение1Расчет(ДанныеСтраницы, Индекс + 1);
		КонецЕсли;
	КонецЦикла;
	
	Если (ИнвестиционныйВычетУпрощенныйПорядок + ИмущественныйВычетУпрощенныйПорядок = 0) И СуммаНалогаВУпрощенномПорядке <> 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Строка 170 Раздела 2 заполняется только при заполнении строки 230 Приложения 5 и (или) строк 121, 131 Приложения 7';
				|en = 'Строка 170 Раздела 2 заполняется только при заполнении строки 230 Приложения 5 и (или) строк 121, 131 Приложения 7'"),
			"Раздел2",
			"П000200001170",
			1);
	КонецЕсли;
	
	Возврат (ТаблицаСообщений.Количество() = 0);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказателиРаздела1_Пункт1()
	
	Показатели = Новый Соответствие;
	Показатели.Вставить("КБК", "П000100001020_%1");
	Показатели.Вставить("КодОТКМО", "П000100001030_%1");
	Показатели.Вставить("СуммаУплата", "П000100001040_%1");
	Показатели.Вставить("СуммаВозврат", "П000100001050_%1");
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура ПроверитьСтраницуРаздела1(ДанныеСтраницы, НомерСтраницы)
	
	ПоказателиРаздела1_Пункт1 = ПоказателиРаздела1_Пункт1();
	ЗначенияПоказателей = Новый Структура;
	НомерСтроки = 1;
	
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П000100001020_%1", НомерСтроки)) Цикл
		
		Для Каждого Показатель Из ПоказателиРаздела1_Пункт1 Цикл
			ИмяЯчейки = СтрШаблон(Показатель.Значение, НомерСтроки);
			ЗначенияПоказателей.Вставить(Показатель.Ключ, ДанныеСтраницы[ИмяЯчейки]);
		КонецЦикла;
		
		СтрокаЗаполнена = Ложь;
		Для Каждого КлючИЗначение Из ЗначенияПоказателей Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаЗаполнена Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		// Код ОКТМО
		ИмяЯчейкиОКТМО = СтрШаблон(ПоказателиРаздела1_Пункт1["КодОТКМО"], НомерСтроки);
		Если ПустаяСтрока(ЗначенияПоказателей.КодОТКМО) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 в строке %2 не указан код ОКТМО!';
								|en = 'На странице %1 Раздела 1 в строке %2 не указан код ОКТМО!'"), НомерСтраницы, НомерСтроки),
				"Раздел1",
				ИмяЯчейкиОКТМО,
				НомерСтраницы);
		Иначе
			ДлинаОКТМО = СтрДлина(СокрЛП(ЗначенияПоказателей.КодОТКМО));
			Если ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
					СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 в строке %2 указан код ОКТМО некорректной длины!';
									|en = 'На странице %1 Раздела 1 в строке %2 указан код ОКТМО некорректной длины!'"), НомерСтраницы, НомерСтроки),
					"Раздел1",
					ИмяЯчейкиОКТМО,
					НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	КБКПредпринимателя = Неопределено;
	Если ДанныеСтраницы.Свойство("П000100001060", КБКПредпринимателя) И ЗначениеЗаполнено(КБКПредпринимателя) Тогда
		ЯчейкиОКТМО = СтрРазделить("П000100001070,П000100001090,П000100001120,П000100001150", ",");
		Для Каждого ИмяЯчейки Из ЯчейкиОКТМО Цикл
			// Код ОКТМО
			ЗначениеОКТМО = Неопределено;
			Если ДанныеСтраницы.Свойство(ИмяЯчейки, ЗначениеОКТМО) И Не ПустаяСтрока(ЗначениеОКТМО) Тогда
				ДлинаОКТМО = СтрДлина(СокрЛП(ЗначениеОКТМО));
				Если ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
						СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 указан код ОКТМО некорректной длины!';
										|en = 'На странице %1 Раздела 1 указан код ОКТМО некорректной длины!'"), НомерСтраницы),
						"Раздел1",
						ИмяЯчейки,
						НомерСтраницы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуРаздела2(ДанныеСтраницы, НомерСтраницы)
	
	КодВидаДохода = ДанныеСтраницы["П000200001001"];
	Если Не ЗначениеЗаполнено(КодВидаДохода) Тогда
		Возврат;
	КонецЕсли;
	
	УдержаноНалогаПоПовышеннойСтавке = ДанныеСтраницы["П000200001081"];
	ДопустимыеКодыВидовДоходаДляПоказателя81 = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16", ",");
	
	Если УдержаноНалогаПоПовышеннойСтавке > 0 И ДопустимыеКодыВидовДоходаДляПоказателя81.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Сумма налога, удержанная у источника выплаты по ставке, предусмотренной абзацем третьим пункта 1
			|или абзацем третьим пункта 3.1 статьи 224 НК РФ, заполняется только в отношении кодок вида доход с «01» по «16»';
			|en = 'Сумма налога, удержанная у источника выплаты по ставке, предусмотренной абзацем третьим пункта 1
			|или абзацем третьим пункта 3.1 статьи 224 НК РФ, заполняется только в отношении кодок вида доход с «01» по «16»'"),
			"Раздел2",
			"П000200001081",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаНалогаУдержаннаяСМатериальнойВыгоды = ДанныеСтраницы["П000200001090"];
	ДопустимыеКодыВидовДоходаДляПоказателя90 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("19");
	
	Если СуммаНалогаУдержаннаяСМатериальнойВыгоды > 0 И ДопустимыеКодыВидовДоходаДляПоказателя90.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Сумма налога, удержанная c доходов в виде материальной выгоды,
			|заполняется только в отношении кода вида дохода «19»';
			|en = 'Сумма налога, удержанная c доходов в виде материальной выгоды,
			|заполняется только в отношении кода вида дохода «19»'"),
			"Раздел2",
			"П000200001090",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаТорговогоСбора = ДанныеСтраницы["П000200001100"];
	ДопустимыеКодыВидовДоходаДляПоказателя100 = СтрРазделить("07,20", ",");
	
	Если СуммаТорговогоСбора > 0 И ДопустимыеКодыВидовДоходаДляПоказателя100.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету,
			|заполняется только в отношении кодов вида дохода «07» или «20»';
			|en = 'Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету,
			|заполняется только в отношении кодов вида дохода «07» или «20»'"),
			"Раздел2",
			"П000200001100",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаФиксированныхАвансовыхПлатежей = ДанныеСтраницы["П000200001120"];
	ДопустимыеКодыВидовДоходаДляПоказателя120 = СтрРазделить("01,10,16", ",");
	
	Если СуммаФиксированныхАвансовыхПлатежей > 0 И ДопустимыеКодыВидовДоходаДляПоказателя120.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Сумма фиксированных авансовых платежей, уплаченная налогоплательщиком, или сумма налога на прибыль организаций,
			|подлежащие зачету, заполняется только в отношении кодов вида дохода «01», «10» или «16»';
			|en = 'Сумма фиксированных авансовых платежей, уплаченная налогоплательщиком, или сумма налога на прибыль организаций,
			|подлежащие зачету, заполняется только в отношении кодов вида дохода «01», «10» или «16»'"),
			"Раздел2",
			"П000200001120",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаНалогаПСН = ДанныеСтраницы["П000200001140"];
	ДопустимыеКодыВидовДоходаДляПоказателя140 = СтрРазделить("07,20", ",");
	
	Если СуммаНалогаПСН > 0 И ДопустимыеКодыВидовДоходаДляПоказателя140.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			НСтр("ru = 'Сумма налога, уплаченная в связи с применением патентной системы налогообложения,
			|подлежащая зачету, заполняется только в отношении кодов вида дохода «07» или «20»';
			|en = 'Сумма налога, уплаченная в связи с применением патентной системы налогообложения,
			|подлежащая зачету, заполняется только в отношении кодов вида дохода «07» или «20»'"),
			"Раздел2",
			"П000200001140",
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуПриложения1(ДанныеСтраницы, НомерСтраницы)
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	НомерСтроки = 1;
	
	Пока ДанныеСтраницы.Свойство("П000300001030_" + НомерСтроки) Цикл
		
		КодВидаДоходаРФ = ДанныеСтраницы["П000300001010_" +НомерСтроки];
		Если Не ЗначениеЗаполнено(КодВидаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указан код вида доходов", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001010_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НалоговаяСтавкаДоходаРФ = ДанныеСтраницы["П000300001020_" +НомерСтроки];
		Если КодВидаДоходаРФ = ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
			Если Не ЗначениеЗаполнено(НалоговаяСтавкаДоходаРФ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
					СтрШаблон("На странице %1 Приложения 1 в строке %2 не указана ставка налога", НомерСтраницы, НомерСтроки),
					"Приложение1",
					"П000300001020_" + НомерСтроки,
					НомерСтраницы);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НалоговаяСтавкаДоходаРФ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
					"Налоговая ставка заполняется только в отношении кода вида дохода 25",
					"Приложение1",
					"П000300001020_" + НомерСтроки,
					НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		ИННИсточникаДоходаРФ = ДанныеСтраницы["П000300001030_" +НомерСтроки];
		ДлинаИНН = СтрДлина(СокрЛП(ИННИсточникаДоходаРФ));
		Если ДлинаИНН > 0 И ДлинаИНН <> 12 И  ДлинаИНН <> 10  Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Приложения 1 в строке %2 указан ИНН некорректной длины!", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001030_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		КППИсточникаДоходаРФ = ДанныеСтраницы["П000300001040_" +НомерСтроки];
		ДлинаКПП = СтрДлина(СокрЛП(КППИсточникаДоходаРФ));
		Если ДлинаИНН = 10 И ДлинаКПП <> 9  Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Приложения 1 в строке %2 указан КПП некорректной длины!", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001040_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НаименованиеИсточникаДоходаРФ = ДанныеСтраницы["П000300001060_" + НомерСтроки];
		Если Не ЗначениеЗаполнено(НаименованиеИсточникаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указано Наименование источника выплаты дохода", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001060_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		СуммаДоходаРФ = ДанныеСтраницы["П000300001070_" + НомерСтроки];
		Если Не ЗначениеЗаполнено(СуммаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указана сумма дохода", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001070_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуПриложения2(ДанныеСтраницы, НомерСтраницы)
	
	ВидыДоходов = ВидыДоходов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОКСМДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001010"];
	Если Не ЗначениеЗаполнено(ОКСМДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указан код страны источника выплаты", НомерСтраницы),
			"Приложение2",
			"П000400001010",
			НомерСтраницы);
	КонецЕсли;
	
	НаименованиеИсточникаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001020"];
	Если Не ЗначениеЗаполнено(НаименованиеИсточникаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указано Наименование источника выплаты дохода", НомерСтраницы),
			"Приложение2",
			"П000400001020",
			НомерСтраницы);
	КонецЕсли;
	
	ВалютаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001030"];
	Если Не ЗначениеЗаполнено(ВалютаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указан код валюты", НомерСтраницы),
			"Приложение2",
			"П000400001030",
			НомерСтраницы);
	КонецЕсли;
	
	КодВидаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001031"];
	Если Не ЗначениеЗаполнено(КодВидаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указан код вида дохода", НомерСтраницы),
			"Приложение2",
			"П000400001031",
			НомерСтраницы);
	КонецЕсли;
	
	ДатаПолученияДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001040"];
	Если Не ЗначениеЗаполнено(ДатаПолученияДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указана дата получения дохода", НомерСтраницы),
			"Приложение2",
			"П000400001040",
			НомерСтраницы);
	КонецЕсли;
	
	НалоговаяСтавкаДоходаЗаПределамиРФ = ДанныеСтраницы.П000400001041;
	Если КодВидаДоходаЗаПределамиРФ = ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
		Если Не ЗначениеЗаполнено(НалоговаяСтавкаДоходаЗаПределамиРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон("На странице %1 Приложения 2: не указана ставка налога", НомерСтраницы),
				"Приложение2",
				"П000400001041",
				НомерСтраницы);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НалоговаяСтавкаДоходаЗаПределамиРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				"Налоговая ставка заполняется только в отношении кода вида дохода 25",
				"Приложение2",
				"П000400001041",
				НомерСтраницы);
		КонецЕсли;
	КонецЕсли;
	
	КурсНаДатуДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001050"];
	Если Не ЗначениеЗаполнено(КурсНаДатуДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указан курс иностранной валюты", НомерСтраницы),
			"Приложение2",
			"П000400001050",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001060"];
	Если Не ЗначениеЗаполнено(СуммаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указана сумма дохода, полученная в иностранной валюте", НомерСтраницы),
			"Приложение2",
			"П000400001060",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаРубДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001070"];
	Если Не ЗначениеЗаполнено(СуммаРубДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон("На странице %1 Приложения 2 не указана сумма дохода, полученная в иностранной валюте в пересчете в рубли", НомерСтраницы),
			"Приложение2",
			"П000400001070",
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуПриложения7(ДанныеСтраницы, НомерСтраницы)
	
	КодыОбъектовНедвижимости = Отчеты.РегламентированныйОтчет3НДФЛ.КодыНаименованияОбъектаНедвижимости(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если (ДанныеСтраницы.П000700001010 = КодыОбъектовНедвижимости.ЖилойДом
			Или ДанныеСтраницы.П000700001010 = КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком)
		И Не ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)';
							|en = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)'"), НомерСтраницы),
			"Приложение7",
			"П000700001030",
			НомерСтраницы);
		
	ИначеЕсли ДанныеСтраницы.П000700001010 <> КодыОбъектовНедвижимости.ЖилойДом
		И ДанныеСтраницы.П000700001010 <> КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком
		И ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кодов наименования объекта %2 и %3';
										|en = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кодов наименования объекта %2 и %3'"),
			НомерСтраницы,
			КодыОбъектовНедвижимости.ЖилойДом,
			КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком);
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
			ЭтотОбъект, ТекстСообщения, "Приложение7", "П000700001030", НомерСтраницы);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтраницы.П000700001031) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан код номера объекта (31)';
							|en = 'На странице %1 Приложения 7 не указан код номера объекта (31)'"), НомерСтраницы),
			"Приложение7",
			"П000700001031",
			НомерСтраницы);
	ИначеЕсли НомерОбъектаНедвижимостиОтсутствует(ДанныеСтраницы.П000700001031) Тогда
		// Если отсутствует номер объекта, обязательно указывается его адрес
		Если ПустаяСтрока(ДанныеСтраницы.П000700001033) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указаны сведения о местонахождении объекта (33)';
								|en = 'На странице %1 Приложения 7 не указаны сведения о местонахождении объекта (33)'"), НомерСтраницы),
				"Приложение7",
				"П000700001033",
				НомерСтраницы);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ДанныеСтраницы.П000700001032) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан номер объекта (32)';
								|en = 'На странице %1 Приложения 7 не указан номер объекта (32)'"), НомерСтраницы),
				"Приложение7",
				"П000700001032",
				НомерСтраницы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуПриложения8(ДанныеСтраницы, НомерСтраницы)
	
	ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	НомерСтроки = 1;
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П001200001010_%1", НомерСтроки)) Цикл
		ИмяПоля = СтрШаблон("П001200001010_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указан код вида операции (10)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указан код вида операции (10)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("П001200001020_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указана сумма дохода (20)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указана сумма дохода (20)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		Строка051Заполнена = Ложь;
		СуммаСтрок052 = 0;
		НомерДопСтроки = 1;
		Пока ДанныеСтраницы.Свойство(СтрШаблон("П001200001051_%1_%2", НомерСтроки, НомерДопСтроки)) Цикл
			Если Не ПустаяСтрока(ДанныеСтраницы[СтрШаблон("П001200001051_%1_%2", НомерСтроки, НомерДопСтроки)]) Тогда
				Строка051Заполнена = Истина;
			КонецЕсли;
			
			СуммаСтрок052 = СуммаСтрок052 + ДанныеСтраницы[СтрШаблон("П001200001052_%1_%2", НомерСтроки, НомерДопСтроки)];
			
			НомерДопСтроки = НомерДопСтроки + 1;
		КонецЦикла;
		
		ИмяПоля = СтрШаблон("П001200001050_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указан признак учета убытков (50)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указан признак учета убытков (50)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		ИначеЕсли ДанныеСтраницы[ИмяПоля] = ПризнакиУчетаУбытков.УбытокНеУчитывается
			И (Строка051Заполнена Или СуммаСтрок052 <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 в поле (50) указан признак учета убытков %3. Поля (51) и (52) в таком случае не заполняются';
								|en = 'На странице %1 Приложения 8 в строке %2 в поле (50) указан признак учета убытков %3. Поля (51) и (52) в таком случае не заполняются'"), НомерСтраницы, НомерСтроки, ДанныеСтраницы[ИмяПоля]),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ОбщаяСуммаРасходов =
			  ДанныеСтраницы[СтрШаблон("П001200001040_%1", НомерСтроки)]
			+ ДанныеСтраницы[СтрШаблон("П001200001060_%1", НомерСтроки)]
			+ ДанныеСтраницы[СтрШаблон("П001200001070_%1", НомерСтроки)]
			+ СуммаСтрок052;
		
		ИмяПоля = СтрШаблон("П001200001020_%1", НомерСтроки);
		Если ОбщаяСуммаРасходов > ДанныеСтраницы[ИмяПоля] Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 сумма полей (40), (52), (60), (70) больше суммы в поле (20)';
								|en = 'На странице %1 Приложения 8 в строке %2 сумма полей (40), (52), (60), (70) больше суммы в поле (20)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерОбъектаНедвижимостиОтсутствует(КодНомераОбъекта)
	
	Возврат (КодНомераОбъекта = "2"); // П000700001031 
	
КонецФункции

&НаСервере
Процедура ПроверитьСтраницуПриложение5Расчет(ДанныеСтраницы, НомерСтраницы)
	
	Если ДанныеСтраницы.П001000001060 <> 0 Тогда
		
		ДлинаИНН = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001010)); //ИНН
		ДлинаКПП = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001020)); //КПП
		ДлинаНомераДоговора = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001050));
		
		Если ДлинаИНН <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан ИНН некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан ИНН некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001010",
				НомерСтраницы);
		КонецЕсли;
		
		Если ДлинаКПП <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан КПП некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан КПП некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001020",
				НомерСтраницы);
		КонецЕсли;
		
		Если ДлинаНомераДоговора = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан номер договора некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан номер договора некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001050",
				НомерСтраницы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтраницуПриложение1Расчет(ДанныеСтраницы, НомерСтраницы)
	
	НомерСтроки = 1;
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П001900001010_%1", НомерСтроки)) Цикл
		
		ИмяПоля = СтрШаблон("П001900001010_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
				СтрШаблон("На странице %1 Расчета к Приложению 1 в строке %2 не указан кадастровый номер", НомерСтраницы, НомерСтроки),
				"Приложение1Расчет",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("П001900001030_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, 
				СтрШаблон("На странице %1 Расчета к Приложению 1 в строке %2 не указана сумма дохода исходя из цены договора", НомерСтраницы, НомерСтроки),
				"Приложение1Расчет",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП 	= "";

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
			
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	УдалитьДанныеПомощника = Модифицированность И ОтчетСозданИзПомощника;
	Если УдалитьДанныеПомощника Тогда
		// Скрываем плашку про отчет из помощника при сохранении в случае, 
		// если отчет был модифицирован.
		Элементы.ГруппаОтчетИзПомощника.Видимость = Ложь;
		Оповестить("ЗакрытьПомощникЗаполнения3НДФЛ", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(
		КодИФНС, 
		КПП,
		ПодобныйОтчетСуществует,
		Вариант,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
		Автосохранение,
		НаименованиеТекущегоРаздела,
		УдалитьДанныеПомощника);
		
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП");
		ДополнительныеПараметры.Автосохранение = Автосохранение;
		ДополнительныеПараметры.Вариант = Вариант;
		ДополнительныеПараметры.ВыполняемоеОповещение = ВыполняемоеОповещение;
		ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь; // Вопрос уже задан, не нужно спрашивать повторно
		ДополнительныеПараметры.КодИФНС = КодИФНС;
		ДополнительныеПараметры.КПП = КПП;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Код = "ОКВЭД" Тогда
		// Для ОКВЭД нужно убрать точки в конце
		ЗначениеПоказателя = СтрЗаменить(СокрЛП(СтрЗаменить(ЗначениеПоказателя, ".", " ")) ," ", ".");
	ИначеЕсли Узел.Код = "Тлф" Тогда
		ЗначениеПоказателя = Отчеты.РегламентированныйОтчет3НДФЛ.ТелефонДляОтчета(ЗначениеПоказателя);
	ИначеЕсли Узел.Код = "НомОбъект" Или Узел.Код = "СвМестОбъект" Или Узел.Код = "НомКадОтчуждОНИ" Тогда
		ЗначениеПоказателя = СтрЗаменить(ЗначениеПоказателя, Символы.ПС, " ");
	КонецЕсли;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=0; ЧГ=";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			// Пустое значение для gYear
			Узел.Значение = "0001";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
			
			Узел.Значение = Прав(СокрЛП(Формат(ЗначениеПоказателя, "ЧГ=")), 4);
			
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(Узел, ДанныеРаздела = Неопределено, НомерСтроки = Неопределено, ТолькоАтрибуты = Ложь)
	
	Если Узел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем данные конкретного раздела
	Если ДанныеРаздела = Неопределено Тогда
		ДанныеРаздела = мДанныеОтчета[Узел.Раздел];
	КонецЕсли;
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиУзла Цикл
		Если (Стр.Тип = "С" ИЛИ Стр.Тип = "C") И Не ТолькоАтрибуты Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, "ИмяКлючевогоУзлаСодержательнойЧасти")
				И Стр.Код = ДанныеРаздела.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				//Особенность декларации, многострочные подузлы
				Если Стр.Родитель.Многострочность Тогда
					Если Стр.Код = "ИстЮЛ" Или Стр.Код = "ИстФЛИн" Или Стр.Код = "СведИст" Или Стр.Код = "СвОрг" Или Стр.Код = "СвФЛ" Тогда
						Если УсловиеЮр_Физ(ДанныеРаздела, Стр, НомерСтроки) Тогда
							ЗаполнитьДаннымиУзел(Стр, ДанныеРаздела, НомерСтроки);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(УзелСоответствующийСтроке, ДанныеРаздела, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				Если Стр.Код = "ИстЮЛ" Или Стр.Код = "ИстФЛИн" Или Стр.Код = "СведИст" Или Стр.Код = "СвОрг" Или Стр.Код = "СвФЛ" Тогда
					Если УсловиеЮр_Физ(ДанныеРаздела, Стр, НомерСтроки) Тогда
						ЗаполнитьДаннымиУзел(Стр, ДанныеРаздела, НомерСтроки);
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Стр.Раздел) И Не Стр.Многостраничность Тогда
					ЗаполнитьДаннымиУзел(Стр, , НомерСтроки);
				Иначе
					ЗаполнитьДаннымиУзел(Стр, ДанныеРаздела, НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, ПолныйКодПоказателя) Тогда
						ЗначениеПоказателя = ?(ДанныеРаздела[ПолныйКодПоказателя] = 0, Стр.ЗначениеПоУмолчанию, ДанныеРаздела[ПолныйКодПоказателя]);
						Если ЗначениеПоказателя = "" И Стр.Формат = "N" Тогда
							ЗначениеПоказателя = ЗначениеПоказателяПустогоПоказателя(Стр);
						КонецЕсли;
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ДанныеРаздела[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УсловиеЮр_Физ(Параметры, Узел, НомерСтроки = Неопределено)
	
	//проверка на длину ИНН для заполнения соответствующей ветки
	Результат = Ложь;
	ЗначениеПоказателя = Неопределено;
	Если Узел.Код = "ИстЮЛ" ИЛИ Узел.Код = "СведИст" ИЛИ Узел.Код = "СвОрг" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННЮЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) ИЛИ СтрДлина(СокрЛП(ЗначениеПоказателя)) > 10 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Узел.Код = "ИстФЛИн" ИЛИ Узел.Код = "СвФЛ" Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННФЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(СокрЛП(ЗначениеПоказателя)) < 12 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T"  ИЛИ Стр.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				ТекстОшибки = СтрШаблон("Длина значения показателя ""%1"" (%2) меньше минимально возможной (%3<%4) (%5)",
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МинРазмерность,
					Стр.Раздел);
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, ТекстОшибки, Стр.Раздел, Стр.Ключ, НомерСтраницыРаздела(Стр));
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ (" + Стр.Код+ ") меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ") (" + Стр.Раздел + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				ТекстОшибки = СтрШаблон("Длина значения показателя ""%1"" (%2) больше максимально возможной (%3 > %4) (%5)",
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МаксРазмерность,
					Стр.Раздел);
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, ТекстОшибки, Стр.Раздел, Стр.Ключ, НомерСтраницыРаздела(Стр));
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """  (" + Стр.Код+ ") больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ") (" + Стр.Раздел + ")", "Титульный", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция НомерСтраницыРаздела(СтрокаРаздела)
	
	НомерСтраницы = "";
	
	Если СтрокаРаздела.Многостраничность И СтрокаРаздела.Родитель <> Неопределено Тогда
			
		Если СтрокаРаздела.Многострочность Тогда
			// Ячейки в многострочных разделах нужно искать через данные отчета
			НомерСтраницы = НомерСтраницыПоСтрокеМногострочногоРаздела(СтрокаРаздела.Родитель.Строки, СтрокаРаздела.Раздел);
		Иначе
			// Ячейка располагается в узле родителя верхнего уровня (ячейка - строка - страница)
			ТекущаяСтрокаВДереве = СтрокаРаздела.Родитель;
			НомерСтраницы = ТекущаяСтрокаВДереве.Родитель.Строки.Индекс(ТекущаяСтрокаВДереве) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерСтраницы;
	
КонецФункции

&НаСервере
Функция НомерСтраницыПоСтрокеМногострочногоРаздела(СтрокаРаздела, ИмяРаздела)
	
	// Номер страницы по многострочному разделу будем искать по полному совпадению полей в строке данных всего раздела
	
	ДанныеРаздела = мДанныеОтчета[ИмяРаздела];
	КоличествоСтрокНаСтранице = МаксимальноеКоличествоСтрокНаСтранице(ЭтотОбъект, ИмяРаздела);
	
	Для Каждого ТекущаяСтрока Из ДанныеРаздела Цикл
		
		Если ТекущаяСтрока.Данные = Неопределено Или ТекущаяСтрока.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексСтроки = 1 По КоличествоСтрокНаСтранице Цикл
			
			КоличествоПолей = 0;
			КоличествоСовпадающихЗначений = 0;
			
			Для Каждого ТекущееПоле Из СтрокаРаздела Цикл
				
				Если Не ЗначениеЗаполнено(ТекущееПоле.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоПолей = КоличествоПолей + 1;
				
				ИмяЯчейкиСтроки = СтрШаблон("%1_%2", ТекущееПоле.Ключ, ИндексСтроки);
				ЗначениеПоказателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяСтрока.Данные[0].Значение, ИмяЯчейкиСтроки);
				Если ЗначениеВФорматеXML(ТекущееПоле, ЗначениеПоказателя) = ТекущееПоле.Значение Тогда
					КоличествоСовпадающихЗначений = КоличествоСовпадающихЗначений + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПолей = КоличествоСовпадающихЗначений Тогда
				Возврат ДанныеРаздела.Индекс(ТекущаяСтрока) + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если не найдено соответствие по строке, то по умолчанию возвращается всегда первая страница раздела
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВФорматеXML(Узел, ЗначениеПоказателя)
	
	// Преобразуем значение показателя по данным нужного узла
	
	СтруктураУзла = Новый Структура("Значение, Код, Формат, МинРазмерность, МаксРазмерность");
	ЗаполнитьЗначенияСвойств(СтруктураУзла, Узел);
	ВывестиПоказательВXML(СтруктураУзла, ЗначениеПоказателя);
	
	Возврат СтруктураУзла.Значение;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелСодержательнойЧасти)
	
	Если УзелСодержательнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем Родительский узел - эталон, структура будет определеяться по эталонному узлу.
	// После цикла по всем элементам эталонного узла, он должен быть удален.
	Эталон = СкопироватьУзел(УзелСодержательнойЧасти.Родитель, УзелСодержательнойЧасти);
	
	// Очищаем все подчиненные узлы родительского узла.
	// По мере необходимости эти узлы будут создаваться.
	УзелСодержательнойЧасти.Строки.Очистить();
	
	Для Каждого ПодчиненныйУзел Из Эталон.Строки Цикл
		
		Если ПодчиненныйУзел.Многостраничность Тогда
			ЗаполнитьДаннымиУзелМногостраничногоРаздела(УзелСодержательнойЧасти, ПодчиненныйУзел);
		Иначе
			ЗаполнитьДаннымиУзелРаздела(УзелСодержательнойЧасти, ПодчиненныйУзел);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем эталон из дерева выгрузки.
	Эталон.Родитель.Строки.Удалить(Эталон);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелРаздела(Родитель, Узел)
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		Родитель.Владелец(), Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если ЭтоРазделПриложения5(Узел.Раздел) Тогда
		
		// Приложение 5 с продолжением: итоги по обоим страницам находятся в Приложении 5 (продолжение)
		ЗаполнитьДаннымиУзелРаздела_Приложение5(Родитель, Узел);
		
	ИначеЕсли Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(
		мДанныеОтчета[Узел.Раздел], ПоказателиРаздела, Узел.Многострочность) Тогда
		
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(ЭкземплярУзла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелРаздела_Приложение5(Родитель, Узел)
	
	ПоказателиПриложение5 = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		Узел,
		"Приложение5",
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Приложение5Пустое = Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(
		мДанныеОтчета.Приложение5,
		ПоказателиПриложение5,
		Узел.Многострочность);
	
	ПоказателиПриложение5Продолжение = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		Узел,
		"Приложение5Продолжение",
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Приложение5ПродолжениеПустое = Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(
		мДанныеОтчета.Приложение5Продолжение,
		ПоказателиПриложение5Продолжение,
		Узел.Многострочность);
	
	Если Приложение5Пустое И Приложение5ПродолжениеПустое Тогда
		Возврат;
	КонецЕсли;
	
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	ЗаполнитьДаннымиУзел(ЭкземплярУзла);
	
	Если Не Приложение5Пустое Тогда
		
		РасчВычСтанд = ПолучитьПодчиненныйЭлемент(Узел, "РасчВычСтанд");
		Если РасчВычСтанд <> Неопределено Тогда
			ЗаполнитьДаннымиУзел(РасчВычСтанд, мДанныеОтчета.Приложение5);
		КонецЕсли;
		
		РасчВычСоцБез219_2 = ПолучитьПодчиненныйЭлемент(Узел, "РасчВычСоцБез219.2");
		Если РасчВычСоцБез219_2 <> Неопределено Тогда
			ЗаполнитьДаннымиУзел(РасчВычСоцБез219_2, мДанныеОтчета.Приложение5);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела(Родитель, Узел)
	
	Если Узел.Код = "СумНалПу" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_СумНалПу(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДоходИстИно" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходИстИно(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДоходПредпр" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходПредпр(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ВычСоцИнв219" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ИмущНалВычНов" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ИмущНалВычНов(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДохОперЦБ" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ЗаявЗачВозвр" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ЗаявЗачВозвр(Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		Родитель.Владелец(), Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
 	Для Каждого СтраницаРаздела Из мДанныеОтчета[Узел.Раздел] Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		// Проверим заполненность страницы раздела.
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, Узел.Многострочность) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Узел.Многострочность Тогда
			// Требуется особая обработка, т.к. каждая строка листа соответствует отдельному элементу в структуре выгрузки.
			Для Каждого СтрокаМногострочнойЧасти Из СтраницаРаздела.ДанныеДопСтрок[0].Значение Цикл
				ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
				ЗаполнитьДаннымиУзел(ЭкземплярУзла, СтрокаМногострочнойЧасти);
			КонецЦикла;
		Иначе
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			ЗаполнитьДаннымиУзел(ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_СумНалПу(Родитель, Узел)
	
	Перем ЭкземплярУзла;
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = мДанныеОтчета[Узел.Раздел];
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	// Создаем экземпляр узла СумНалПу
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭкземплярУзла <> Неопределено Тогда
		
		// Добавляем строки СумНалПуИскл227, соответствующие пункту 1 раздела, из многострочной части страниц раздела
		ЭталонСумНалПуИскл227 = ПолучитьПодчиненныйЭлемент(Узел, "СумНалПуИскл227");
		Если ЭталонСумНалПуИскл227 <> Неопределено Тогда
			Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
				
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
				
				Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаМногострочнойЧасти Из СтраницаРаздела.ДанныеДопСтрок[0].Значение Цикл
					ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСумНалПуИскл227);
					ЗаполнитьДаннымиУзел(ЭкземплярСтроки, СтрокаМногострочнойЧасти);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем строки СумНалПу227, соответствующие пункту 2 раздела
		ЭталонСумНалПу227 = ПолучитьПодчиненныйЭлемент(Узел, "СумНалПу227");
		Если ЭталонСумНалПу227 <> Неопределено Тогда
			Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
				
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
				
				Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСумНалПу227);
				ЗаполнитьДаннымиУзел(ЭкземплярСтроки, ДанныеСтраницы);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходИстИно(Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = мДанныеОтчета[Узел.Раздел];
	
	СтавкиИУзлы = Новый Соответствие;
	
	ЭталонСтроки = ПолучитьПодчиненныйЭлемент(Узел, "РасчДохНалИно");
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		ПоказателиЛиста = СтраницаЛиста.Данные[0].Значение;
		
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ПоказателиЛиста, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаЛиста = Неопределено;
		Если ПоказателиЛиста.Свойство("П000400001041", СтавкаЛиста) Тогда
			
			ЭкземплярУзла = СтавкиИУзлы.Получить(СтавкаЛиста);
			Если ЭкземплярУзла = Неопределено Тогда
				ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
				СтавкиИУзлы.Вставить(СтавкаЛиста, ЭкземплярУзла);
				ЗаполнитьДаннымиУзел(ЭкземплярУзла, ПоказателиЛиста, , Истина);
			КонецЕсли;
			
			ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСтроки);
			ЗаполнитьДаннымиУзел(ЭкземплярСтроки, ПоказателиЛиста);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходПредпр(Родитель, Узел)
	
	Перем ДанныеПоследнейСтраницы;
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРазделаПриложение3 = мДанныеОтчета[Узел.Раздел];
	
	// Создаем узел раздела, в него будем добавлять подузлы для видов деятельности
	УзелПриложение3 = СкопироватьУзел(Родитель, Узел);
	
	УзелВидДеятельности = ПолучитьПодчиненныйЭлемент(Узел, "РасчВидДеят");
	УзелПрофВычет = ПолучитьПодчиненныйЭлемент(Узел, "ПрофНалВыч");
	
	ПоказателиРазделаПриложение3 = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого СтраницаПриложение3 Из ДанныеРазделаПриложение3 Цикл
		
		ДанныеСтраницы = СтраницаПриложение3.Данные[0].Значение;
		
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРазделаПриложение3) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УзелВидДеятельности <> Неопределено Тогда
			ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, УзелВидДеятельности);
			ЗаполнитьДаннымиУзел(ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
		Если УзелВидДеятельности <> Неопределено Тогда
			ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, УзелПрофВычет);
			ЗаполнитьДаннымиУзел(ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
		ДанныеПоследнейСтраницы = ДанныеСтраницы;
		
	КонецЦикла;
	
	УзелКФХ = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "СведКФХ");
	Если УзелКФХ <> Неопределено И ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(УзелКФХ, ДанныеПоследнейСтраницы);
	КонецЕсли;
	
	УзелНБКор105_3 = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "НБКор105.3");
	Если УзелНБКор105_3 <> Неопределено И ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(УзелНБКор105_3, ДанныеПоследнейСтраницы);
	КонецЕсли;
	
	Если ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(УзелПриложение3, ДанныеПоследнейСтраницы, , Истина);
	КонецЕсли;
	
	РасчАвансПлат = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "РасчАвансПлат");
	Если РасчАвансПлат <> Неопределено Тогда
		
		ПоказателиРазделаПриложение3Продолжение = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
			УзелПриложение3.Владелец(), РасчАвансПлат.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		ДанныеРазделаПриложение3Продолжение = мДанныеОтчета.Приложение3Продолжение;
		
		Если ДанныеРазделаПриложение3Продолжение.Количество() <> 0
			И ДанныеРазделаПриложение3Продолжение[0].Данные.Количество() <> 0 Тогда
		
			ДанныеСтраницыПриложение3Продолжение = ДанныеРазделаПриложение3Продолжение[0].Данные[0].Значение;
			
			Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(
				ДанныеСтраницыПриложение3Продолжение, ПоказателиРазделаПриложение3Продолжение, РасчАвансПлат.Многострочность) Тогда
				
				ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, РасчАвансПлат);
				ЗаполнитьДаннымиУзел(ЭкземплярУзла, ДанныеСтраницыПриложение3Продолжение);
				
				// Приказ ФНС России от 15.10.2021 N ЕД-7-11/903@
				// Сведения по суммам (налоговым базам) к Приложению 3 (СвСумРасчПр3)
				// За9м - Элемент является обязательным при отсутствии элементов <ЗаКв> и <ЗаПг>
				//
				// Если налоговая база или сумма к уплате пустая, то нужно вывести обязательный элемент
				
				ИтогиПоПриложению = ИтоговыеПоказателиПриложения3Расчет(ДанныеСтраницыПриложение3Продолжение, АдресКлючейПоказателей);
				Если ИтогиПоПриложению.СуммаНалоговыхБаз = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "НалБазаИсч");
				КонецЕсли;
				
				Если ИтогиПоПриложению.СуммаАвансовыхПлатежей = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "СумИсчАванс");
				КонецЕсли;
				
				Если ИтогиПоПриложению.СуммаДоходов = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "СумПолДох");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219(Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = мДанныеОтчета[Узел.Раздел];
	
	// Создаем новый Лист
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	
	// Получаем подчиненные элементы листа п. 1 и 3
	Экземпляр_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчПенсВзнос");
	
	// Получаем эталонный элемент пункта 1, будем использовать его для получения эталонов элементов 1.1 и 1.2
	Эталон_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(Узел, "РасчПенсВзнос");
	
	// Получаем эталонный элемент для п. 1.1
	Эталон_РасчПСВВыч = ПолучитьПодчиненныйЭлемент(Эталон_РасчПенсВзнос, "РасчПСВВыч");
	
	// Получаем элемент для п. 1.2
	Экземпляр_РасчДопСВВыч = ПолучитьПодчиненныйЭлемент(Экземпляр_РасчПенсВзнос, "РасчДопСВВыч");
	
	ИтогиЛиста = Новый ТаблицаЗначений;
	ИменаКолонок = "";
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		// Проверим заполненность страницы раздела
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(СтраницаЛиста.Данные[0].Значение, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогиЛиста.Колонки.Количество() = 0 Тогда
			Для Каждого КлючИЗначение Из СтраницаЛиста.Данные[0].Значение Цикл
				ИтогиЛиста.Колонки.Добавить(КлючИЗначение.Ключ);
				ИменаКолонок = ИменаКолонок + КлючИЗначение.Ключ + ",";
			КонецЦикла;
		КонецЕсли;
		
		СтрокаИтогов = ИтогиЛиста.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогов, СтраницаЛиста.Данные[0].Значение);
		
		// Создаем подчиненный узел п 1.1 из эталона
		Экземпляр_РасчПСВВыч = СкопироватьУзел(Экземпляр_РасчПенсВзнос, Эталон_РасчПСВВыч);
		
		// Заполняем созданные узлы даннымм
		ЗаполнитьДаннымиУзел(Экземпляр_РасчПСВВыч, СтраницаЛиста.Данные[0].Значение);
		
	КонецЦикла;
	
	Если ИтогиЛиста.Количество() > 0 Тогда
		ИтогиЛиста.Колонки.Добавить("КолонкаСвертки");
		ИтогиЛиста.Свернуть("КолонкаСвертки", ИменаКолонок);
		ЗаполнитьДаннымиУзел(Экземпляр_РасчПенсВзнос, ИтогиЛиста[0], , Истина);
		ЗаполнитьДаннымиУзел(Экземпляр_РасчДопСВВыч, ИтогиЛиста[0], , Истина);
	КонецЕсли;
	
	// Получаем эталонный элемент для п. 2
	Эталон_РасчСумИнвВыч = ПолучитьПодчиненныйЭлемент(Эталон_РасчПенсВзнос, "РасчСумИнвВыч");
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		// Проверим заполненность страницы раздела
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(СтраницаЛиста.Данные[0].Значение, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		// Создаем подчиненный узел п 2 из эталона
		Экземпляр_РасчСумИнвВыч = СкопироватьУзел(Экземпляр_РасчПенсВзнос, Эталон_РасчСумИнвВыч);
		
		// Заполняем созданные узлы даннымм
		ЗаполнитьДаннымиУзел(Экземпляр_РасчСумИнвВыч, СтраницаЛиста.Данные[0].Значение);
		
	КонецЦикла;
	
	Если СтраницаЛиста <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(ЭкземплярУзла, СтраницаЛиста.Данные[0].Значение, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ИмущНалВычНов(Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = мДанныеОтчета[Узел.Раздел];
	
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	
	Экземпляр_РасчИмущВыч = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчИмущВыч");
	Эталон_РасчИмущВыч = ПолучитьПодчиненныйЭлемент(Узел, "РасчИмущВыч");
	Эталон_СвОбъектРасх = ПолучитьПодчиненныйЭлемент(Эталон_РасчИмущВыч, "СвОбъектРасх");
	Экземпляр_СвОбъектРасх = ПолучитьПодчиненныйЭлемент(Экземпляр_РасчИмущВыч, "СвОбъектРасх");
	Экземпляр_СвОбъектРасх.Родитель.Строки.Удалить(Экземпляр_СвОбъектРасх);
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		ДеревоВыгрузки, Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	НужноЗаполнитьИтог = Ложь;
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		// Проверим заполненность страницы раздела
		Если Не Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(СтраницаЛиста.Данные[0].Значение, ПоказателиРаздела) Тогда
			
			Экземпляр_СвОбъектРасх = СкопироватьУзел(Экземпляр_РасчИмущВыч, Эталон_СвОбъектРасх);
			ЗаполнитьДаннымиУзел(Экземпляр_СвОбъектРасх, СтраницаЛиста.Данные[0].Значение);
			НужноЗаполнитьИтог = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НужноЗаполнитьИтог Тогда
		ЗаполнитьДаннымиУзел(Экземпляр_РасчИмущВыч, СтраницаЛиста.Данные[0].Значение, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ(Родитель, Узел)
	
	// Приложение 8 особенное - многостраничное, многострочное и имеет многострочную часть в каждой строке.
	
	ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из мДанныеОтчета[Узел.Раздел] Цикл
		
		Для Каждого СтрокаЛиста Из СтраницаЛиста.ДанныеДопСтрок[0].Значение Цикл
			
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			ЗаполнитьДаннымиУзел(ЭкземплярУзла, СтрокаЛиста);
			
			Если СтрокаЛиста.П001200001050 = ПризнакиУчетаУбытков.УбытокУчитывается Тогда
				УчетУбытковЭталон = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "УчетУбыт");
				Для Индекс = 0 По СтрокаЛиста.П001200001051.Количество() - 1 Цикл
					
					СтруктураЗаполнения = Новый Структура;
					СтруктураЗаполнения.Вставить("П001200001051", СтрокаЛиста.П001200001051[Индекс].Значение);
					СтруктураЗаполнения.Вставить("П001200001052", СтрокаЛиста.П001200001052[Индекс].Значение);
					
					ПодчиненныйУзел = СкопироватьУзел(ЭкземплярУзла, УчетУбытковЭталон);
					
					ЗаполнитьДаннымиУзел(ПодчиненныйУзел, СтруктураЗаполнения);
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ЗаявЗачВозвр(Родитель, Узел)
	
	ПоказателиРаздела = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьПоказателиРаздела(
		Родитель.Владелец(), Узел.Раздел, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Для Каждого СтраницаРаздела Из мДанныеОтчета[Узел.Раздел] Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		// Проверим заполненность страницы раздела.
		Если Отчеты.РегламентированныйОтчет3НДФЛ.СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, Узел.Многострочность) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(ЭкземплярУзла, ДанныеСтраницы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)

	Для Каждого Стр из Узел.Строки Цикл
		Если Не УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		УзелПуст = Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		УзелПуст = Не ЗначениеЗаполнено(Узел.Значение)
			Или Узел.Значение = ЗначениеПоказателяПустогоПоказателя(Узел);
	ИначеЕсли Узел.Формат = "gYear" Тогда
		УзелПуст = Узел.Значение = ЗначениеПоказателяПустогоПоказателя(Узел);
	Иначе
		УзелПуст = Не ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Возврат УзелПуст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказателяПустогоПоказателя(Узел)
	
	Если Узел.Формат = "N" Тогда
		Если 0 < Узел.МинРазмерность И Узел.МинРазмерность <= 128 Тогда
			ЧРД = ".";
			ЧЦ  = Формат(Узел.МинРазмерность + 1, "ЧГ=0");
			ЧДЦ = Формат(Узел.МинРазмерность, "ЧГ=0");
			ШаблонФорматирования = СтрШаблон("ЧРД=%1; ЧЦ=%2; ЧДЦ=%3;", ЧРД, ЧЦ, ЧДЦ);
			ЗначениеПоказателя = "0" + Сред(Формат(1, ШаблонФорматирования), 2);
		Иначе
			ЗначениеПоказателя = "0";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		ЗначениеПоказателя = "0001";
	Иначе
		ЗначениеПоказателя = "";
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	// Запомним текущий раздел и страницу, чтобы к ним вернутся
	НаимТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	НомерТекущейСтраницы = СтруктураРеквизитовФормы.НомерТекущейСтраницы;
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	ДанныеРазделов = Новый Структура;
	// Разделы, содержащие только фиксированные ячейки.
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	ДанныеРазделов.Вставить("Раздел1Приложение", СтруктураДанныхРаздел1Приложение);
	ДанныеРазделов.Вставить("Приложение4", СтруктураДанныхПриложение4);
	ДанныеРазделов.Вставить("Приложение5", СтруктураДанныхПриложение5);
	ДанныеРазделов.Вставить("Приложение5Продолжение", СтруктураДанныхПриложение5Продолжение);
	ДанныеРазделов.Вставить("Приложение6", СтруктураДанныхПриложение6);
	
	// Разделы, которые могут содержать несколько листов.
	Для Каждого ОписаниеРаздела Из мСтруктураМногостраничныхРазделов Цикл
		ДанныеРазделов.Вставить(ОписаниеРаздела.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ОписаниеРаздела.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	// Разделы, содержащие пункты, которые могут состоять из нескольких строк.
	Для Каждого ОписаниеРаздела Из мСтруктураМногострочныхРазделов Цикл
		ДанныеРазделов.Вставить(ОписаниеРаздела.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ОписаниеРаздела.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма", 		   	 СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов", 		   	 ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати", 			   	 ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц", 	 ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
													   	
	ОтчетОбъект().ПечатныйБланк(ПараметрыПечати);

	СтруктураДанныхТитульный.Вставить("НомерКорректировки", Строка(НомерКорректировки));
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьАвтоНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияАвтозаполнения", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияАвтозаполнения(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Задание отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		ОбновитьДеревоРазделовПослеавтоЗаполнения();
	Иначе
		ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовПослеавтоЗаполнения()

	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено И Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН", СтруктураДанныхТитульный.ИНН);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище", СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки");
	
	Контейнер = Новый Структура();
	
	// Из базы данных берем данные о доходах и расходах предпринимателя
	Контейнер.Вставить("Приложение3", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыПриложение3"));
	Контейнер.Вставить("Приложение3Продолжение", СведенияМногостраничногоРазделаВТаблице("ТаблицаСтраницыПриложение3Продолжение"));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИДОтчета", ИмяОтчета(ЭтотОбъект.ИмяФормы));
	ПараметрыЗаполнения.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ЭтотОбъект.ИмяФормы));
	ПараметрыЗаполнения.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыЗаполнения.Вставить("Контейнер", Контейнер);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
														|en = 'Автоматическое заполнение по данным информационной базы'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыЗаполнения,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Функция СведенияМногостраничногоРазделаВТаблице(ИмяСтруктурыДанных)
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов("Неопределено");
	
	ТаблицаЗначенийСДанными = ДанныеФормыВЗначение(ЭтотОбъект[ИмяСтруктурыДанных], Тип("ТаблицаЗначений"));
	
	Если ТаблицаЗначенийСДанными <> Неопределено Тогда
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("Данные") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("Данные");
			ТаблицаЗначенийСДанными.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				СтрокаТаблицыЗначений.Данные = ЭтотОбъект[ИмяСтруктурыДанных][Ном].Данные;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаЗначенийСДанными.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
			ТаблицаЗначенийСДанными.Колонки.Удалить("ДанныеДопСтрок");
			ТаблицаЗначенийСДанными.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
			
			Ном = 0;
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийСДанными Цикл
				
				Если ЭтотОбъект[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок.Количество() > 0
				   И ЭтотОбъект[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
					СтрокаТаблицыЗначений.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтотОбъект[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
					
					Ном = Ном + 1;
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхДопСтрок = Новый Структура;
				
				Для Каждого ЭлСтруктуры Из ЭтотОбъект[ИмяСтруктурыДанных][Ном].ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
				КонецЦикла;
				
				СтрокаТаблицыЗначений.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
				
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначенийСДанными;
	
КонецФункции

&НаСервере
Процедура ВосстановитьМногостраничныйРазделИзТаблицы(ИмяРаздела, ТаблицаСДанными)
	
	ИмяРеквизитаФормы = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяРеквизитаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитФормы = ЭтотОбъект[ИмяРеквизитаФормы];
	ЗначениеВДанныеФормы(ТаблицаСДанными, РеквизитФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяЭлемента) Тогда
				ВосстановитьМногостраничныйРазделИзТаблицы(ИмяЭлемента, ЭлементСтруктуры.Значение);
			Иначе
				ЭтотОбъект["СтруктураДанных" + ИмяЭлемента] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РасчетНаСервере();
	
	// Заполняем сводные таблицы итогов
	ЗаполнитьСводныеТаблицы();
	
	ПодготовитьДанныеРаздела2();
	СобратьДанныеВРаздел1Сервер();
	
	// Обновляем дерево разделов
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	// Активизируем строку раздела в дереве
	Для Каждого СтрокаРаздела Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если СтрокаРаздела.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, КонтролирующийОрган());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтоговыеПоказателиПриложения3Расчет(ДанныеПриложения, АдресКлючейПоказателей)
	
	Результат = Новый Структура("СуммаНалоговыхБаз, СуммаАвансовыхПлатежей, СуммаДоходов", 0, 0, 0);
	
	Если Не ЭтоАдресВременногоХранилища(АдресКлючейПоказателей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторыНалоговойБазы = Новый Массив;
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИП1Квартал");
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИППолугодие");
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИП9Месяцев");
	
	ИдентификаторыАвансовогоПлатежа = Новый Массив;
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИП1Квартал");
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИППолугодие");
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИП9Месяцев");
	
	ИдентификаторыДоходовИП = Новый Массив;
	ИдентификаторыДоходовИП.Добавить("ДоходыИП1Квартал");
	ИдентификаторыДоходовИП.Добавить("ДоходыИППолугодие");
	ИдентификаторыДоходовИП.Добавить("ДоходыИП9Месяцев");
	
	КлючиПоказателей = ПолучитьИзВременногоХранилища(АдресКлючейПоказателей);
	Отбор = Новый Структура("ИмяСтраницы", "Приложение3Продолжение");
	
	ПоказателиПриложения = КлючиПоказателей.НайтиСтроки(Отбор);
	
	Для Каждого ТекущийПараметр Из ПоказателиПриложения Цикл
		
		Если ИдентификаторыНалоговойБазы.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаНалоговыхБаз = Результат.СуммаНалоговыхБаз + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
		Если ИдентификаторыАвансовогоПлатежа.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаАвансовыхПлатежей = Результат.СуммаАвансовыхПлатежей + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
		Если ИдентификаторыДоходовИП.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаДоходов = Результат.СуммаДоходов + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, ИмяЭлемента);
	
	Отбор = Новый Структура("Код", ИмяЭлемента);
	СтрокаЭлемента = ЭкземплярУзла.Строки.НайтиСтроки(Отбор);
	Если СтрокаЭлемента.Количество() > 0 Тогда
		
		ОтборЭлемента = Новый Структура("Код", "За9м");
		ОбязательныйЭлемент = СтрокаЭлемента[0].Строки.НайтиСтроки(ОтборЭлемента);
		
		Если ОбязательныйЭлемент.Количество() > 0 Тогда
			ОбязательныйЭлемент[0].Обязательность = "О";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйНалоговыйПериод

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьПоясненияКПериодуОтчета(Форма)
	
	Элементы = Форма.Элементы;
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация)
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ТекстПояснения = ТекстПоясненияРасширенныйНалоговыйПериод(
			СтруктураРеквизитовФормы.Организация,
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПояснения) Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
	Иначе
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПоясненияРасширенныйНалоговыйПериод(Знач Организация, Знач КонецПериода)
	
	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.ТекстПоясненияРасширенныйНалоговыйПериод(Организация, КонецПериода);
	
КонецФункции

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиентеНаСервереБезКонтекста
Функция КонтролирующийОрган()
	
	Возврат "ФНС";
	
КонецФункции

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРазделПриложения5(ИмяРаздела)
	
	Возврат (ИмяРаздела = "Приложение5" Или ИмяРаздела = "Приложение5Продолжение");
	
КонецФункции

&НаСервере
Процедура ПроверитьИПреобразоватьТочностьОтчета(ОтчетСсылка)
	
	// Если отчет был загружен из предыдущей версии 2.0, то необходимо преобразовать точность
	// В БП 3.0 точность всегда 0
	
	Если Не ЗначениеЗаполнено(ОтчетСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТочностьСохраненногоОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетСсылка, "ТочностьЕдиницыИзмерения");
	ТочностьПоУмолчанию = 0;
	
	Если ТочностьСохраненногоОтчета <> ТочностьПоУмолчанию Тогда
		Сохранить(Истина,
			СтруктураДанныхТитульный.КодИМНС,
			"",
			СтруктураДанныхТитульный.НомерКорректировки,
			Ложь,
			СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
