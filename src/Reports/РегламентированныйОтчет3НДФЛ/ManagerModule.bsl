#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НаДату > '20080601' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия500;
	ИначеЕсли НаДату > '20050101' Тогда
		Возврат Перечисления.ВерсииФорматовВыгрузки.Версия300;
	КонецЕсли;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ТаблицаФормОтчета = НоваяТаблицаФормОтчета();
	
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2025());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2024());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2023());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2022());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2021());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2020());
	ЗаполнитьЗначенияСвойств(ТаблицаФормОтчета.Добавить(), РеквизитыФормыОтчета2019());
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2018кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 25.10.2017 г. № ММВ-7-11/822@";
	НоваяФорма.РедакцияФормы      = "от 25.10.2017 г. № ММВ-7-11/822@";
	НоваяФорма.ДатаНачалоДействия = '20170101';
	НоваяФорма.ДатаКонецДействия  = '20181231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2017кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.10.2016 г. № ММВ-7-11/552@";
	НоваяФорма.РедакцияФормы      = "от 10.10.2016 г. № ММВ-7-11/552@";
	НоваяФорма.ДатаНачалоДействия = '20160101';
	НоваяФорма.ДатаКонецДействия  = '20161231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2016кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 25.11.2015 г. № ММВ-7-11/544@";
	НоваяФорма.РедакцияФормы      = "от 25.11.2015 г. № ММВ-7-11/544@";
	НоваяФорма.ДатаНачалоДействия = '20150101';
	НоваяФорма.ДатаКонецДействия  = '20151231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2015кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 24.12.2014 г. № ММВ-7-11/671@";
	НоваяФорма.РедакцияФормы      = "от 24.12.2014 г. № ММВ-7-11/671@";
	НоваяФорма.ДатаНачалоДействия = '20140101';
	НоваяФорма.ДатаКонецДействия  = '20151231';

	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2014кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.11.2011 г. № ММВ-7-3/760@ (в редакции приказа ФНС России от 14.11.2013 г. N ММВ-7-3/501@)";
	НоваяФорма.РедакцияФормы      = "от 14.11.2013 г. N ММВ-7-3/501@";
	НоваяФорма.ДатаНачалоДействия = '20130101';
	НоваяФорма.ДатаКонецДействия  = '20141231';
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2011кв1";
	НоваяФорма.ОписаниеОтчета     = "Утверждена приказом ФНС России от 10.11.2011 г. № ММВ-7-3/760@";
	НоваяФорма.РедакцияФормы      = "от 10.11.2011 г. № ММВ-7-3/760@";
	НоваяФорма.ДатаНачалоДействия = '20110101';
	НоваяФорма.ДатаКонецДействия  = '20131231';
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	ТаблицаДанныхРеглОтчета = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	
	Период = ЭкземплярРеглОтчета.ДатаОкончания;
	ВыбраннаяФорма = ЭкземплярРеглОтчета.ВыбраннаяФорма;
	ДанныеОтчета = ЭкземплярРеглОтчета.ДанныеОтчета.Получить();
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат ДанныеРеглОтчета2022(Период, ДанныеОтчета, ВыбраннаяФорма);
	Иначе
		Возврат ДанныеРеглОтчета2021(Период, ДанныеОтчета, ВыбраннаяФорма);
	КонецЕсли;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20111110', "ММВ-7-3/760@", "ФормаОтчета2011кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.07");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20131114', "ММВ-7-3/501@", "ФормаОтчета2014кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.08");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20141224', "ММВ-7-11/671@", "ФормаОтчета2015кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.09");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20151125', "ММВ-7-11/544@", "ФормаОтчета2016кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.10");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20161010', "ММВ-7-11/552@", "ФормаОтчета2017кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.11");
	
	СтрокаФормыПоФормату = ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, "1151020", '20171025', "ММВ-7-11/822@", "ФормаОтчета2018кв1");
	ОпределитьФорматВДеревеФормИФорматов(СтрокаФормыПоФормату, "5.12");
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2019());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2019());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2020());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2020());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2021());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2021());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2022());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2022());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2023());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2023());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2024());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2024());
	
	СтрокаФормыПоФормату = ДеревоФормИФорматов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату, РеквизитыФормы2025());
	ЗаполнитьЗначенияСвойств(СтрокаФормыПоФормату.Строки.Добавить(), РеквизитыФормата2025());
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

// Возвращает имя формы, действующей в налоговом периоде
//
Функция ФормаПоУмолчанию(Период, ОписаниеОтчета = "", РедакцияФормы = "") Экспорт
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ДействующиеФормы = ДействующиеФормы(Период);
	Если ДействующиеФормы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Выбираем самую новую из вступивших в силу форм отчета
	Для Каждого Строка Из ДействующиеФормы Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаКонецДействия) Или ТекущаяДатаПользователя <= Строка.ДатаКонецДействия Тогда
			ВыбраннаяФорма = Строка;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраннаяФорма = Неопределено Тогда
		// Форма отчета одна, но еще не вступила в силу
		ВыбраннаяФорма = ДействующиеФормы[0];
	КонецЕсли;
	
	ОписаниеОтчета = ВыбраннаяФорма.ОписаниеОтчета;
	РедакцияФормы = ВыбраннаяФорма.РедакцияФормы;
	
	Возврат ВыбраннаяФорма.ФормаОтчета;
	
КонецФункции

Функция ДействующиеФормы(Знач Период) Экспорт
	
	Период = НачалоДня(Период);
	
	ДействующиеФормы = Новый Массив;
	
	ТаблицаФормОтчета = ТаблицаФормОтчета();
	ТаблицаФормОтчета.Сортировать("ДатаНачалоДействия Убыв");
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия <= Период) И (Период <= Строка.ДатаКонецДействия Или Не ЗначениеЗаполнено(Строка.ДатаКонецДействия)) Тогда
			ДействующиеФормы.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДействующиеФормы;
	
КонецФункции

Функция СостояниеОтправки(ЭкземплярРеглОтчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭкземплярРеглОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(ЭкземплярРеглОтчета);
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ВыбраннаяФорма) Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ВставитьПоказателиОценкиРискаВыезднойНалоговойПроверки(ТаблицаПоказателей, ОписаниеОтчета) Экспорт
	
	СуммаНДФЛКУплате = 0;
	СуммаДоходовИП = 0;
	СуммаРасходовИП = 0;
	
	ДанныеОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	КБКДекларации = КБК(ОписаниеОтчета.ВыбраннаяФорма);
	
	ВыбраннаяФорма = ОписаниеОтчета.ВыбраннаяФорма;
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Или ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
		
		Раздел1 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел1");
		Для Каждого СтрокаРаздела Из Раздел1 Цикл
			Если СтрокаРаздела.КБКИП = КБКДекларации.ДоходыОтПредпринимательскойДеятельности Тогда
				СуммаНДФЛКУплате = СуммаНДФЛКУплате + СтрокаРаздела.СуммаНалогаИПКУплатеГод;
			КонецЕсли;
		КонецЦикла;
		
		Приложение3 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Приложение3");
		Для Каждого СтрокаРаздела Из Приложение3 Цикл
			СуммаДоходовИП = СуммаДоходовИП + СтрокаРаздела.ОбщаяСуммаДоходаИП;
			СуммаРасходовИП = СуммаРасходовИП + СтрокаРаздела.ОбщаяСуммаВычетаИП;
		КонецЦикла;
	
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2020кв1"
		Или ВыбраннаяФорма = "ФормаОтчета2019кв1" Тогда
		
		Раздел1 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел1");
		Для Каждого СтрокаРаздела Из Раздел1 Цикл
			Если СтрокаРаздела.КБК = КБКДекларации.ДоходыОтПредпринимательскойДеятельности Тогда
				СуммаНДФЛКУплате = СуммаНДФЛКУплате + СтрокаРаздела.СуммаНалога;
			КонецЕсли;
		КонецЦикла;
		
		Приложение3 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Приложение3");
		Для Каждого СтрокаРаздела Из Приложение3 Цикл
			СуммаДоходовИП = СуммаДоходовИП + СтрокаРаздела.ОбщаяСуммаДоходаИП;
			СуммаРасходовИП = СуммаРасходовИП + СтрокаРаздела.ОбщаяСуммаВычетаИП;
		КонецЦикла;
		
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		
		Раздел1 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел1");
		Для Каждого СтрокаРаздела Из Раздел1 Цикл
			Если СтрокаРаздела.КБК = КБКДекларации.ДоходыОтПредпринимательскойДеятельности Тогда
				СуммаНДФЛКУплате = СуммаНДФЛКУплате + СтрокаРаздела.СуммаНалога;
			КонецЕсли;
		КонецЦикла;
		
		ЛистВ = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "ЛистВ");
		Для Каждого СтрокаРаздела Из ЛистВ Цикл
			СуммаДоходовИП = СуммаДоходовИП + СтрокаРаздела.ОбщаяСуммаДоходаИП;
			СуммаРасходовИП = СуммаРасходовИП + СтрокаРаздела.ОбщаяСуммаВычетаИП;
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаНДФЛКУплате";
	НоваяСтрока.ЗначениеПоказателя = СуммаНДФЛКУплате;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаДоходовИП";
	НоваяСтрока.ЗначениеПоказателя = СуммаДоходовИП;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "СуммаПрофессиональныхВычетовПоНДФЛ";
	НоваяСтрока.ЗначениеПоказателя = СуммаРасходовИП;
	
КонецПроцедуры

// Возвращает новую таблицу данных заполнения декларации
//
// Параметры:
//   ВыбраннаяФорма - Строка - Имя формы регламентированного отчета
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений для данных автозаполнения декларации 3-НДФЛ
//
Функция НоваяТаблицаДанныхЗаполнения(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
			
		Возврат НоваяТаблицаДанныхЗаполнения2021();
	Иначе
		Возврат НоваяТаблицаДанныхЗаполнения2022();
	КонецЕсли;
	
КонецФункции

Процедура ПоказателиОценкиРискаВыезднойНалоговойПроверки(ТаблицаПоказателей, ОписаниеОтчета) Экспорт 
	
	ВставитьПоказателиОценкиРискаВыезднойНалоговойПроверки(ТаблицаПоказателей, ОписаниеОтчета);
	
КонецПроцедуры

// Возвращает ключ показателя, предназначенного для хранения суммы стандартного вычета на налогоплательщика за сдачу норм ГТО
//
// Возвращаемое значение:
//   Строка
//
Функция КлючПоляВычетГТО() Экспорт
	
	Возврат "СтандартныйВычетЗаСдачуНормГТО";
	
КонецФункции

// Возвращает коды для договоров с некоммерческими пенсионными фондами
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//
// Возвращаемое значение:
//   Структура
//
Функция КодыВидовДоговоровДобровольныхВзносов(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = "ФормаОтчета2025кв1" Тогда
		КодыВидовДоговоров = КодыВидовДоговоровДобровольныхВзносов2025();
	Иначе
		КодыВидовДоговоров = КодыВидовДоговоровДобровольныхВзносов2024();
	КонецЕсли;
	
	Возврат КодыВидовДоговоров;
	
КонецФункции

// Возвращает коды наименований объектов недвижимости
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//
// Возвращаемое значение:
//   Структура
//
Функция КодыНаименованияОбъектаНедвижимости(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = "ФормаОтчета2025кв1" Тогда
		КодыОбъектаНедвижимости = КодыНаименованияОбъектаНедвижимости2025();
	Иначе
		КодыОбъектаНедвижимости = КодыНаименованияОбъектаНедвижимости2024();
	КонецЕсли;
	
	Возврат КодыОбъектаНедвижимости;
	
КонецФункции

// Возвращает признаки оснований заявления вычета по инвестиционному вычету
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//
// Возвращаемое значение:
//   Структура, Неопределено
//
Функция ПризнакиОснованийЗаявленияВычетаПоИИС(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = "ФормаОтчета2025кв1" Тогда
		Результат = Новый Структура();
		Результат.Вставить("ПополнениеСчета", "1");
		Результат.Вставить("ДоходыПоОперациям", "2");
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пределы вычетов по налогу на доходы физических лиц
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//   Период         - Дата - Отчетный период
//
// Возвращаемое значение:
//   Структура
//
Функция ПределыВычетов(ВыбраннаяФорма, Период = '00010101') Экспорт
	
	РазмерыВычетов = РазмерыВычетов(ВыбраннаяФорма, Период);
	
	Если Период >= '20250101' Тогда
		ПределыВычетов = ПределыВычетов2026(РазмерыВычетов);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2025кв1" Тогда
		ПределыВычетов = ПределыВычетов2025(РазмерыВычетов);
	Иначе
		ПределыВычетов = ПределыВычетов2024(РазмерыВычетов);
	КонецЕсли;
	
	Возврат ПределыВычетов;
	
КонецФункции

// Возвращает размеры стандартного вычета по налогу на доходы физических лиц
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//   Период         - Дата - Отчетный период
//
// Возвращаемое значение:
//   Структура
//
Функция РазмерыВычетов(ВыбраннаяФорма, Период = '00010101') Экспорт
	
	Если Период >= '20250101' Тогда
		РазмерыВычетов = РазмерыВычетов2026();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2025кв1" Тогда
		РазмерыВычетов = РазмерыВычетов2025();
	Иначе
		РазмерыВычетов = РазмерыВычетов2024();
	КонецЕсли;
	
	Возврат РазмерыВычетов;
	
КонецФункции

// Возвращает размер стандартного вычета на налогоплательщика по налогу на доходы физических лиц
//
// Параметры:
//   ВыбраннаяФорма - Строка - Идентификатор редакции формы декларации
//
// Возвращаемое значение:
//   Структура
//
Функция СтандартныйВычетНаНалогоплательщика(РазмерыВычетов) Экспорт
	
	ВычетРезультат = Новый Структура;
	
	ДанныеВычета = РазмерыВычетов.СтандартныйВычетНаНалогоплательщика;
	
	ВычетРезультат.Вставить("СтандартныйВычетПо218_1_1",
		ДанныеВычета[Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_1]);
	
	ВычетРезультат.Вставить("СтандартныйВычетПо218_1_2",
		ДанныеВычета[Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_2]);
	
	ВычетРезультат.Вставить(КлючПоляВычетГТО(),
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РазмерыВычетов, КлючПоляВычетГТО(), 0));
	
	Возврат ВычетРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак действия основной формы по Приказу ФНС России от 29.09.2022 № ЕД-7-11/880
//
// Параметры:
//   ВыбраннаяФорма - Строка - Текущая форма декларации
//
// Возвращаемое значение:
//   Булево
//
Функция ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Экспорт
	
	// Приказ ФНС России от 29.09.2022 № ЕД-7-11/880
	
	ИзменяемыеФормы = Новый Массив;
	ИзменяемыеФормы.Добавить("ФормаОтчета2022кв1");
	ИзменяемыеФормы.Добавить("ФормаОтчета2023кв1");
	ИзменяемыеФормы.Добавить("ФормаОтчета2024кв1");
	ИзменяемыеФормы.Добавить("ФормаОтчета2025кв1");
	
	Возврат ИзменяемыеФормы.Найти(ВыбраннаяФорма) <> Неопределено;
	
КонецФункции

// Возвращает признак действия структуры разделов формы по Приказу ФНС России от 29.09.2022 № ЕД-7-11/880@
//
// Параметры:
//   ВыбраннаяФорма - Строка - Текущая форма декларации
//
// Возвращаемое значение:
//   Булево
//
Функция ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Экспорт
	
	// Приказ ФНС России от 29.09.2022 № ЕД-7-11/880@
	
	ИзменяемыеФормы = Новый Массив;
	ИзменяемыеФормы.Добавить("ФормаОтчета2023кв1");
	ИзменяемыеФормы.Добавить("ФормаОтчета2024кв1");
	ИзменяемыеФормы.Добавить("ФормаОтчета2025кв1");
	
	Возврат ИзменяемыеФормы.Найти(ВыбраннаяФорма) <> Неопределено;
	
КонецФункции

Функция ВидыВычетов(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормы2025().ИмяОбъекта Тогда
		Возврат ВидыВычетов2025();
	ИначеЕсли ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат ВидыВычетов2022();
	КонецЕсли;
	
КонецФункции

Функция ВыгрузкаВозможна(РеквизитыФормы) Экспорт
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(РеквизитыФормы.ВыбраннаяФорма);
	ВыбраннаяФорма = РеквизитыФормы.ВыбраннаяФорма;
	ДанныеОтчета = РеквизитыФормы.ДанныеОтчета;
	
	Если Не ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, "Раздел1, Раздел2", ДанныеОтчета, ВыбраннаяФорма) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Должны быть заполнены разделы 1 и 2.';
				|en = 'Должны быть заполнены разделы 1 и 2.'"),
			"Раздел1");
		Возврат Ложь;
	КонецЕсли;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Раздел1", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Раздел1.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Раздел1[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуРаздела1(ДанныеСтраницы, Индекс + 1, РеквизитыФормы);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Раздел2", ВыбраннаяФорма);
	
	СуммаНалогаВУпрощенномПорядке = 0;
	Для Индекс = 0 По ДанныеОтчета.Раздел2.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Раздел2[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуРаздела2(ДанныеСтраницы, Индекс + 1, РеквизитыФормы);
			Если ДанныеСтраницы.Свойство("П000200001170") Тогда
				СуммаНалогаВУпрощенномПорядке = СуммаНалогаВУпрощенномПорядке + ДанныеСтраницы.П000200001170;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение1", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение1.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение1[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения1(ДанныеСтраницы, Индекс + 1, РеквизитыФормы, ВыбраннаяФорма);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение2", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение2.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение2[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения2(ДанныеСтраницы, Индекс + 1, РеквизитыФормы, ВыбраннаяФорма);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеОтчета.Приложение5Продолжение.Свойство("П000900001230") Тогда
		ИнвестиционныйВычетУпрощенныйПорядок = ДанныеОтчета.Приложение5Продолжение.П000900001230;
	Иначе
		ИнвестиционныйВычетУпрощенныйПорядок = 0;
	КонецЕсли;
	
	ИмущественныйВычетУпрощенныйПорядок = 0;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение7", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение7.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение7[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения7(ДанныеСтраницы, Индекс + 1, РеквизитыФормы, ВыбраннаяФорма);
			Если ДанныеСтраницы.Свойство("П000700001121") Тогда
				ИмущественныйВычетУпрощенныйПорядок = ИмущественныйВычетУпрощенныйПорядок + ДанныеСтраницы.П000700001121;
			КонецЕсли;
			Если ДанныеСтраницы.Свойство("П000700001131") Тогда
				ИмущественныйВычетУпрощенныйПорядок = ИмущественныйВычетУпрощенныйПорядок + ДанныеСтраницы.П000700001131;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение8", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение8.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение8[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложения8(ДанныеСтраницы, Индекс + 1, РеквизитыФормы, ВыбраннаяФорма);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение5Расчет", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение5Расчет.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение5Расчет[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложение5Расчет(ДанныеСтраницы, Индекс + 1, РеквизитыФормы);
		КонецЕсли;
	КонецЦикла;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Приложение1Расчет", ВыбраннаяФорма);
	
	Для Индекс = 0 По ДанныеОтчета.Приложение1Расчет.Количество() - 1 Цикл
		ДанныеСтраницы = ДанныеОтчета.Приложение1Расчет[Индекс].Данные;
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ПроверитьСтраницуПриложение1Расчет(ДанныеСтраницы, Индекс + 1, РеквизитыФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если (ИнвестиционныйВычетУпрощенныйПорядок + ИмущественныйВычетУпрощенныйПорядок = 0) И СуммаНалогаВУпрощенномПорядке <> 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Строка 170 Раздела 2 заполняется только при заполнении строки 230 Приложения 5 и (или) строк 121, 131 Приложения 7';
				|en = 'Строка 170 Раздела 2 заполняется только при заполнении строки 230 Приложения 5 и (или) строк 121, 131 Приложения 7'"),
			"Раздел2",
			"П000200001170",
			1);
	КонецЕсли;
	
	Возврат (РеквизитыФормы.ТаблицаСообщений.Количество() = 0);
	
КонецФункции

Функция ПроверитьДанные(Узел, РеквизитыФормы) Экспорт
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Не ЗначениеСоответствуетФормату(Узел, РеквизитыФормы) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекущийУзел Из Узел.Строки Цикл
		СтатусПроверки = ПроверитьДанные(ТекущийУзел, РеквизитыФормы) И СтатусПроверки; // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей(ДанныеОтчета, ВыбраннаяФорма) Экспорт
	
	СтруктураПоказателей = Новый Структура;
	ДанныеОтчета = ДанныеОтчета.Получить();
	
	Для Каждого Раздел Из ДанныеОтчета.ПоказателиОтчета Цикл
		СтруктураПоказателей.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из ДанныеОтчета.ДанныеМногостраничныхРазделов Цикл
		СтруктураПоказателей.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	Для Каждого Раздел Из ДанныеОтчета.ДанныеМногострочныхРазделов Цикл
		СтруктураПоказателей.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

// Возвращает сохраненные данные декларация 3-НДФЛ
//
// Параметры:
//   СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - Ссылка на декларацию 3-НДФЛ
//   ВыбраннаяФорма - Строка - Текущая форма редакции декларации
//
// Возвращаемое значение:
//   Булево
//
Функция ДанныеСохраненногоОтчета(СсылкаНаОтчет, ВыбраннаяФорма) Экспорт
	
	СохраненныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОтчет, "ДанныеОтчета").Получить();
	Результат = ДанныеРазделовПоПолямТабличногоДокумента(СохраненныеДанные.ПоказателиОтчета);
	
	ДанныеМногостраничныхРазделов = СохраненныеДанные.ДанныеМногостраничныхРазделов;
	СписокРазделов = СтруктураМногостраничныхРазделов(ВыбраннаяФорма);
	Для Каждого ОписаниеРаздела Из СписокРазделов Цикл
		Результат.Вставить(ОписаниеРаздела.Ключ, ДанныеМногостраничныхРазделов[ОписаниеРаздела.Ключ]);
	КонецЦикла;
	
	ДанныеМногострочныхРазделов = СохраненныеДанные.ДанныеМногострочныхРазделов;
	СписокРазделов = СтруктураМногострочныхРазделов(ВыбраннаяФорма);
	Для Каждого ОписаниеРаздела Из СписокРазделов Цикл
		Результат.Вставить(ОписаниеРаздела.Ключ, ДанныеМногострочныхРазделов[ОписаниеРаздела.Ключ]);
	КонецЦикла;
	
	Для Каждого СтраницаРаздела Из Результат.Раздел1 Цикл
		ЗначенияПоказателей = СтраницаРаздела.Данные;
		// В Разделе 1 декларации суммы к уплате и к уменьшению по авансовым платежам 
		// отражаются в отдельных полях (100/110, 130/140, 160/170), но в выгрузку попадает только одна сумма: 
		// положительная в случае налога к уплате и отрицательная в случае налога к уменьшению.
		// Поэтому перед выгрузкой скорректируем значения тех показателей, которые попадают в выгрузку.
		СуммаНалогаИПКУплатеПолугодие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001100", 0);
		СуммаНалогаИПКУменьшениюПолугодие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001110", 0);
		Если СуммаНалогаИПКУплатеПолугодие - СуммаНалогаИПКУменьшениюПолугодие > 0 Тогда
			ЗначенияПоказателей.Вставить("П000100001100", СуммаНалогаИПКУплатеПолугодие - СуммаНалогаИПКУменьшениюПолугодие);
			ЗначенияПоказателей.Вставить("П000100001110", 0);
		Иначе
			ЗначенияПоказателей.Вставить("П000100001100", 0);
			ЗначенияПоказателей.Вставить("П000100001110", СуммаНалогаИПКУменьшениюПолугодие - СуммаНалогаИПКУплатеПолугодие);
		КонецЕсли;
			
		СуммаНалогаИПКУплате9Месяцев = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001130", 0);
		СуммаНалогаИПКУменьшению9Месяцев = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001140", 0);
		Если СуммаНалогаИПКУплате9Месяцев - СуммаНалогаИПКУменьшению9Месяцев > 0 Тогда
			ЗначенияПоказателей.Вставить("П000100001130", СуммаНалогаИПКУплате9Месяцев - СуммаНалогаИПКУменьшению9Месяцев);
			ЗначенияПоказателей.Вставить("П000100001140", 0);
		Иначе
			ЗначенияПоказателей.Вставить("П000100001130", 0);
			ЗначенияПоказателей.Вставить("П000100001140", СуммаНалогаИПКУменьшению9Месяцев - СуммаНалогаИПКУплате9Месяцев);
		КонецЕсли;
			
		СуммаНалогаИПКУплатеГод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001160", 0);
		СуммаНалогаИПКУменьшениюГод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПоказателей, "П000100001170", 0);
		Если СуммаНалогаИПКУплатеГод - СуммаНалогаИПКУменьшениюГод > 0 Тогда
			ЗначенияПоказателей.Вставить("П000100001160", СуммаНалогаИПКУплатеГод - СуммаНалогаИПКУменьшениюГод);
			ЗначенияПоказателей.Вставить("П000100001170", 0);
		Иначе
			ЗначенияПоказателей.Вставить("П000100001160", 0);
			ЗначенияПоказателей.Вставить("П000100001170", СуммаНалогаИПКУменьшениюГод - СуммаНалогаИПКУплатеГод);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеЛиста Из Результат.Приложение7 Цикл
		
		СтраницаЛиста = ДанныеЛиста.Данные;
		Если Не СтраницаЛиста.Свойство("П000700001070") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтраницаЛиста.Свойство("П000700001070_1") И СтраницаЛиста.Свойство("П000700001070_3")
			И ЗначениеЗаполнено(СтраницаЛиста.П000700001070_1)
			И ЗначениеЗаполнено(СтраницаЛиста.П000700001070_3) Тогда
			
			ЗначениеЧислителя = СокрЛП(Формат(СтраницаЛиста.П000700001070_1, "ЧГ=0;"));
			ЗначениеЗнаменателя = СокрЛП(Формат(СтраницаЛиста.П000700001070_3, "ЧГ=0;"));
			СтраницаЛиста.Вставить("П000700001070", СтрШаблон("%1/%2", ЗначениеЧислителя, ЗначениеЗнаменателя));
		Иначе
			СтраницаЛиста.Вставить("П000700001070", "");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыСохраненногоОтчета(СсылкаНаОтчет, ВыбраннаяФорма) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", НоваяТаблицаСообщений());
	Результат.Вставить("ВыбраннаяФорма", ВыбраннаяФорма);
	Результат.Вставить("ДанныеОтчета", ДанныеСохраненногоОтчета(СсылкаНаОтчет, ВыбраннаяФорма));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДаннымиДеревоВыгрузки(ДеревоВыгрузки, ПараметрыВыгрузки, РеквизитыФормы) Экспорт
	
	// Формируем точную структуру XML-макета
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, РеквизитыФормы);
	ЗаполнитьДаннымиУзел(РеквизитыФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(КодировкаФайлаВыгрузки) Тогда
		КодировкаФайлаВыгрузки = "windows-1251";
	КонецЕсли;
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПроцедурыИФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр                       = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код                   = СокрЛП(Код);
	НовСтр.ДатаПриказа           = ДатаПриказа;
	НовСтр.НомерПриказа          = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия    = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта            = СокрЛП(ИмяОбъекта);
	НовСтр.Описание              = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр                       = Форма.Строки.Добавить();
	НовСтр.Код                   = СокрЛП(Версия);
	НовСтр.ДатаПриказа           = ДатаПриказа;
	НовСтр.НомерПриказа          = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия    = ?(ЗначениеЗаполнено(ДатаНачалаДействия), ДатаНачалаДействия, Форма.ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ЗначениеЗаполнено(ДатаОкончанияДействия), ДатаОкончанияДействия, Форма.ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта            = СокрЛП(ИмяОбъекта);
	НовСтр.Описание              = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция НоваяТаблицаФормОтчета()
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОбщегоНазначения.ОписаниеТипаСтрока(200), "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), "         " + "по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОбщегоНазначения.ОписаниеТипаСтрока(50), "Редакция формы", 20);
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция НовыеРеквизитыФормыОтчета()
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяТаблицаФормОтчета().Добавить());
	
КонецФункции

Функция НовоеДеревоФормИФорматов()
	
	ДеревоФормИФорматов = Новый ДеревоЗначений;
	ДеревоФормИФорматов.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(7));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаПриказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("НомерПриказа", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДеревоФормИФорматов.Колонки.Добавить("ИмяОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДеревоФормИФорматов.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ДеревоФормИФорматов;
	
КонецФункции

Функция НовыеРеквизитыФормИФорматовПриказа()
	
	ДеревоФормИФорматов = НовоеДеревоФормИФорматов();
	СтрокаДереваЗначений = ДеревоФормИФорматов.Строки.Добавить();
	
	Реквизиты = Новый Структура;
	Для каждого Колонка Из ДеревоФормИФорматов.Колонки Цикл
		Реквизиты.Вставить(Колонка.Имя, СтрокаДереваЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ДобавитьДанныеРеглОтчетаВТаблицу(Период, КБК, ОКАТО, Сумма, ТаблицаДанныхРеглОтчета, ВыбраннаяФорма)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Период", Период);
	ПараметрыОтбора.Вставить("КБК", КБК);
	ПараметрыОтбора.Вставить("ОКАТО", СокрЛП(ОКАТО));
	
	НайденныеСтроки = ТаблицаДанныхРеглОтчета.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаДанных = ТаблицаДанныхРеглОтчета.Добавить();
		СтрокаДанных.Период    = Период;
		СтрокаДанных.ВидНалога = ВидНалогаПоКБК(КБК, ВыбраннаяФорма);
		СтрокаДанных.КБК       = КБК;
		СтрокаДанных.ОКАТО     = СокрЛП(ОКАТО);
	Иначе
		СтрокаДанных = НайденныеСтроки[0]
	КонецЕсли;
	
	СтрокаДанных.Сумма = СтрокаДанных.Сумма + Сумма;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеОтчета

// Создает и заполняет новый отчет.
// В случае, если регламентированный отчет передан, то происходит только заполнение отчета.
//
// Параметры:
//   Декларация3НДФЛ - ДокументСсылка.РегламентированныйОтчет
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//   ДанныеЗаполнения - ТаблицаЗначений - см. НоваяТаблицаДанныхЗаполнения()
//   ДанныеПомощникаЗаполнения - Структура - см. Обработки.ПомощникЗаполнения3НДФЛ.НовыйДанныеПомощникаЗаполнения()
//
Процедура СоздатьЗаполнитьОтчет(Декларация3НДФЛ, Организация, Период, ВыбраннаяФорма, НомерКорректировки, ДанныеЗаполнения, ДанныеПомощникаЗаполнения) Экспорт
	
	СтруктураРеквизитовФормы = СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма);
	СтруктураРеквизитовФормы.Вставить("мВариант", НомерКорректировки);
	
	СоставПоказателей = СоставПоказателей(СтруктураРеквизитовФормы.мСоставПоказателей).СоставПоказателей;
	СоставПоказателей.Индексы.Добавить("ИмяПоляТаблДокумента");
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		РегламентированныйОтчет = Декларация3НДФЛ.ПолучитьОбъект();
	Иначе
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	КонецЕсли;
	
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.Организация, "КодНалоговогоОргана");
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	КлючиПоказателей = КлючиПоказателейДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СвойстваРазделов = СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ДанныеОтчета = НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы);
	
	ТитульныйЛист = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя("Титульный")];
	
	ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы);
	ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация);
	
	ЗаполненныеРазделы = Новый Структура;
	Для Каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
		СохранитьСтруктуруДоходовВычетов(СтрокаТаблицы.СтруктураДанных, ДанныеОтчета, КлючиПоказателей, СвойстваРазделов, СоставПоказателей, ЗаполненныеРазделы);
	КонецЦикла;
	
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДеревоСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма));
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Декларация3НДФЛ = РегламентированныйОтчет.Ссылка;
	
КонецПроцедуры

// Заполняет структуру данных титульного листа.
//
// Параметры:
//   ТитульныйЛист - Струтура
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//   НомерКорректировки - Число - Номер корректировки
//   ВыбраннаяФорма - Строка
//
Процедура ЗаполнитьТитульныйЛист(ТитульныйЛист, Организация, Период, НомерКорректировки = 0, ВыбраннаяФорма = "") Экспорт
	
	СписокПоказателей =
		"ИННЮЛ, КодНО,
		|ФИО, ДатаРожд, МестоРожд,
		|КодУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн,
		|ТелСлуж, ТелДом, СистемыНалогообложения, ЭтоФизическоеЛицо";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, КонецГода(Период), СписокПоказателей);
	Если СведенияОбОрганизации = Неопределено Или СведенияОбОрганизации.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(ТитульныйЛист, НоваяСтруктураТитульногоЛиста(ВыбраннаяФорма));
		Возврат;
	КонецЕсли;
	
	// Шапка
	ТитульныйЛист.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
	ТитульныйЛист.НомерКорректировки = НомерКорректировки;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", НачалоГода(Период));
	СтруктураПараметров.Вставить("ДатаОкончания", КонецГода(Период));
	
	Если РегламентированнаяОтчетность.ОрганизацияПрекратилаДеятельность(СтруктураПараметров) Тогда
		ТитульныйЛист.Период = КодНалоговогоПериодаПриЗакрытииИП();
	Иначе
		ТитульныйЛист.Период = КодНалоговогоПериодаПоУмолчанию();
	КонецЕсли;
	
	ТитульныйЛист.ОтчетГод = Формат(Год(Период), "ЧГ=0");
	ТитульныйЛист.КодИМНС = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СведенияОбОрганизации.КодНО, 4, " ", "Слева");
	ТитульныйЛист.КодСтраны = КодСтраныПоУмолчанию();
	ТитульныйЛист.ПоМесту = КодКатегорииНалогоплательщикаПоУмолчанию(СведенияОбОрганизации.ЭтоФизическоеЛицо,
		СведенияОбОрганизации.СистемыНалогообложения);
	
	// Сведения о налогоплательщике
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
	Если ФИО.Количество() <> 0 Тогда
		ТитульныйЛист.Фамилия  = СокрЛП(ФИО.Фамилия);
		ТитульныйЛист.Имя      = СокрЛП(ФИО.Имя);
		ТитульныйЛист.Отчество = СокрЛП(ФИО.Отчество);
	КонецЕсли;
	
	ТитульныйЛист.ДатаРождения = СведенияОбОрганизации.ДатаРожд;
	
	Если ТитульныйЛист.Свойство("МестоРождения") Тогда
		ТитульныйЛист.МестоРождения = ПредставлениеМестаРождения(СведенияОбОрганизации.МестоРожд);
	КонецЕсли;
	
	// Сведения о документе, удостоверяющем личность:
	ТитульныйЛист.КодВидаДокумента     = СокрЛП(СведенияОбОрганизации.КодУдЛичн);
	ТитульныйЛист.СерияИНомерДокумента = СокрЛП(СтрШаблон("%1 %2", СведенияОбОрганизации.СерияУдЛичн, СведенияОбОрганизации.НомерУдЛичн));
	
	Если ТитульныйЛист.Свойство("ДатаВыдачиДокумента") Тогда
		ТитульныйЛист.ДатаВыдачиДокумента = СведенияОбОрганизации.ДатаУдЛичн;
	КонецЕсли;
	Если ТитульныйЛист.Свойство("КемВыданДокумент") Тогда
		ТитульныйЛист.КемВыданДокумент = СокрЛП(СведенияОбОрганизации.ОрганВыданУдЛичн);
	КонецЕсли;
	
	// Статус налогоплательщика
	ТитульныйЛист.СтатусНалогоплательщика = "1"; // Физическое лицо - налоговый резидент Российской Федерации
	
	// Номер контактного телефона
	ТелОрганизации = ?(Не ПустаяСтрока(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелСлуж),
		СокрЛП(СведенияОбОрганизации.ТелДом));
	
	ТитульныйЛист.ТелОрганизации = ТелефонДляОтчета(ТелОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПодписи(ТитульныйЛист, СтруктураРеквизитовФормы)
	
	ТитульныйЛист.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ТитульныйЛист, Организация) Экспорт
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		Организация, ТитульныйЛист.КодИМНС);
	
	Если СведенияОПредставителе.ТипПодписанта = "2" Тогда
		ФИОПодписант = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	Иначе
		ФИОПодписант = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
		ДокументПредставителя = "";
	КонецЕсли;
	
	ТитульныйЛист.ПрПодп = СведенияОПредставителе.ТипПодписанта;
	ТитульныйЛист.ОргПодписантФамилия = ФИОПодписант.Фамилия;
	ТитульныйЛист.ОргПодписантИмя = ФИОПодписант.Имя;
	ТитульныйЛист.ОргПодписантОтчество = ФИОПодписант.Отчество;
	ТитульныйЛист.ДокУпПред = ДокументПредставителя;
	
КонецПроцедуры

Функция ПредставлениеМестаРождения(СтрокаМестоРождения)
	
	МассивЭлементов = СтрРазделить(СтрокаМестоРождения, ",", Ложь);
	
	// Удаляем признак особого места рождения
	Если МассивЭлементов.Количество() <> 0 тогда
		МассивЭлементов.Удалить(0);
	КонецЕсли;
	
	// Запятые меняем на пробелы
	ПредставлениеМестаРождения = СтрСоединить(МассивЭлементов, " ");
	
	Возврат ПредставлениеМестаРождения;
	
КонецФункции

Функция ДанныеФормыВДанныеОтчета(Форма, ДанныеФормы) Экспорт
	
	СтруктураРеквизитовФормы = ДанныеФормы.СтруктураРеквизитовФормы;
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета",
		ПоказателиОтчета(ДанныеФормы.СвойстваРазделовДекларации, Форма, , СтруктураРеквизитовФормы.мВыбраннаяФорма));
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов",
		ДанныеМногострочныхРазделов(ДанныеФормы.мСтруктураМногострочныхРазделов, Форма));
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов",
		ДанныеМногостраничныхРазделов(ДанныеФормы.СвойстваРазделовДекларации, ДанныеФормы.мСтруктураМногостраничныхРазделов, Форма));
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения",
		ДанныеВариантовАвтоЗаполнения(ДанныеФормы.мСтруктураВариантыЗаполнения, Форма));
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция НовыеДанныеФормы() Экспорт
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("СвойстваРазделовДекларации");
	ДанныеФормы.Вставить("мСтруктураМногострочныхРазделов");
	ДанныеФормы.Вставить("мСтруктураМногостраничныхРазделов");
	ДанныеФормы.Вставить("мСтруктураВариантыЗаполнения");
	ДанныеФормы.Вставить("СтруктураРеквизитовФормы");
	
	Возврат ДанныеФормы
	
КонецФункции

Функция ЗаписатьДанныеФормы(ДанныеФормы, СтруктураРеквизитовФормы, КодИФНС, Автосохранение = Ложь, ВидДокументаНомерКорректировкиИзменен = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		Или СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		Или ВидДокументаНомерКорректировкиИзменен);
	
	Если СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент Тогда
		РегламентированныйОтчет = СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы);
	Иначе
		РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ДанныеФормы.ПоказателиОтчета);
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеФормы.ДанныеМногострочныхРазделов);
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеФормы.ДанныеМногостраничныхРазделов);
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеФормы.ДанныеВариантовАвтоЗаполнения);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Если Не СтруктураРеквизитовФормы.УдалитьДанныеПомощника И РегламентированныйОтчет.ДанныеОтчета <> Неопределено Тогда
		// Сохраняем данные Помощника заполнения в случае если не передали флаг "УдалитьДанныеПомощника".
		СохраненныеДанныеОтчета = РегламентированныйОтчет.ДанныеОтчета.Получить();
		Если ТипЗнч(СохраненныеДанныеОтчета) = Тип("Структура") Тогда
			СохраненныеДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения", ДанныеОтчета.ДанныеПомощникаЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	РегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	
	РегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеФормы.ДеревоНастройкиСтраниц);
	
	Попытка
		РегламентированныйОтчет.Записать();
	Исключение
		Если Не Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = РегламентированныйОтчет.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Создает новый документ вида РегламентированныйОтчет и заполняет реквизиты шапки
//
// Параметры:
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   ДокументОбъект.РегламентированныйОтчет
//
Функция СоздатьРегламентированныйОтчет(СтруктураРеквизитовФормы)
	
	РегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
	РегламентированныйОтчет.Дата = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.УстановитьВремя();
	
	Возврат РегламентированныйОтчет;
	
КонецФункции

// Заполняет реквизиты шапки документа РегламентированныйОтчет
//
// Параметры:
//   РегламентированныйОтчет - ДокументОбъект.РегламентированныйОтчет
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//   КодИФНС - Строка - код ИФНС
//
Процедура ЗаполнитьРеквизитыШапки(РегламентированныйОтчет, СтруктураРеквизитовФормы, КодИФНС)
	
	РегламентированныйОтчет.ИсточникОтчета = "РегламентированныйОтчет3НДФЛ";
	РегламентированныйОтчет.НаименованиеОтчета = "Декларация 3-НДФЛ";
	РегламентированныйОтчет.ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	РегламентированныйОтчет.ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	РегламентированныйОтчет.Периодичность = СтруктураРеквизитовФормы.мПериодичность;
	РегламентированныйОтчет.ВыбраннаяФорма = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	РегламентированныйОтчет.Организация = СтруктураРеквизитовФормы.Организация;
	РегламентированныйОтчет.ДатаПодписи = СтруктураРеквизитовФормы.ДатаПодписи;
	РегламентированныйОтчет.ЕдиницаИзмерения = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	РегламентированныйОтчет.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	РегламентированныйОтчет.ВидОтчетности = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	РегламентированныйОтчет.Комментарий = СтруктураРеквизитовФормы.Комментарий;
	РегламентированныйОтчет.КодНалоговогоОргана = КодИФНС;
	РегламентированныйОтчет.КПП = "";
	РегламентированныйОтчет.Вид = СтруктураРеквизитовФормы.мВариант;
	РегламентированныйОтчет.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(РегламентированныйОтчет.Вид);
	РегламентированныйОтчет.ФорматВыгрузки = "Автоматически";
	
КонецПроцедуры

// Создает структуру данных, которая соответствует пустой форме
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - налоговый период
//   СтруктураРеквизитовФормы - Структура - см. СтруктураРеквизитовФормы()
//
// Возвращаемое значение:
//   Структура
//
Функция НоваяСтруктураДанныхОтчета(Организация, Период, СтруктураРеквизитовФормы)
	
	СоставПоказателей = СоставПоказателей(СтруктураРеквизитовФормы.мСоставПоказателей);
	СоставПоказателей.СоставПоказателей.Индексы.Добавить("ИмяПоляТаблДокумента");
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СтруктураМногострочныхРазделов = СтруктураМногострочныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	СтруктураМногостраничныхРазделов = СтруктураМногостраничныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ПоказателиОтчета = ПоказателиОтчета(
		СвойстваРазделовДекларации,
		,
		СоставПоказателей.СоставПоказателей,
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ДанныеМногострочныхРазделов = ДанныеМногострочныхРазделов(СтруктураМногострочныхРазделов, , СоставПоказателей.СоставПоказателей);
	ДанныеМногостраничныхРазделов = ДанныеМногостраничныхРазделов(СвойстваРазделовДекларации, СтруктураМногостраничныхРазделов, , СоставПоказателей.СоставПоказателей);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	ДанныеОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СоставПоказателей.ДанныеВариантовАвтоЗаполнения);
	ДанныеОтчета.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ДанныеОтчета.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ДанныеОтчета.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ДанныеОтчета.Вставить("ДанныеПомощникаЗаполнения", Новый Структура);
	
	Возврат ДанныеОтчета;
	
КонецФункции

// Преобразует структуру дохода или вычета в структуру данных регламентированного отчета
//
// Параметры:
//   СтруктураДоходовВычетов - Структура - структура, которую требуется сохранить
//   ДанныеОтчета - Структура - структура данных регламентированного отчета
//   КлючиПоказателейДекларации - ТаблицаЗначений - см. НовыеКлючиПоказателейДекларации()
//   СоставПоказателей - ТаблицаЗначений - значение элемента СоставПоказателей структуры СоставПоказателей()
//   ЗаполненныеРазделы - Структура - разделы, которые были заполнены в результате выполнения процедуры
//
Процедура СохранитьСтруктуруДоходовВычетов(СтруктураДоходовВычетов, ДанныеОтчета, КлючиПоказателейДекларации, СвойстваРазделов, СоставПоказателей, ЗаполненныеРазделы = Неопределено)
	
	Перем НомерСтраницы, НомерСтроки;
	
	НомераДобавленныхСтраниц = Новый Структура;
	НомераДобавленныхСтрок   = Новый Структура;
	
	Для Каждого ДоходВычет Из СтруктураДоходовВычетов Цикл
		
		ЗначениеПоказателя = ДоходВычет.Значение;
		
		// Ищем соответствующий ключ показателя
		КлючПоказателя = КлючиПоказателейДекларации.Найти(ДоходВычет.Ключ, "Ключ");
		Если КлючПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = КлючПоказателя.ИмяПоля;
		ИмяРаздела = КлючПоказателя.ИмяСтраницы;
		
		СвойствоРаздела = СвойствоРаздела(СвойстваРазделов, ИмяРаздела);
		Если СвойствоРаздела = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден раздел декларации ""%1""';
											|en = 'Не найден раздел декларации ""%1""'"), ИмяРаздела);
		КонецЕсли;
		
		// Если раздел еще не заполнялся, значит добавлять строку или страницу не нужно.
		// Т.к. при инициализации всегда создается первая строка и страница.
		ПустойРаздел = ЗаполненныеРазделы = Неопределено Или Не ЗаполненныеРазделы.Свойство(ИмяРаздела);
		
		РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() > 0);
		
		Если СвойствоРаздела.МногостраничностьВРазделе Тогда
			
			ТаблицаРаздела = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
			СтраницаРаздела = АктивнаяСтраницаРаздела(ТаблицаРаздела);
			
			Если РазделМногострочный Тогда
				Если Не НомераДобавленныхСтрок.Свойство(ИмяРаздела, НомерСтроки) Тогда
					МаксимальноеКоличествоСтрокНаСтранице = СвойствоРаздела.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
					КоличествоСтрокНаАктивнойСтранице = СтраницаРаздела.ДанныеДопСтрок.Количество();
					// Строку в раздел еще не добавляли, проверим влезет ли еще одна строка на активной странице.
					// Если не влезет, добавляем новую страницу и строку.
					Если КоличествоСтрокНаАктивнойСтранице = МаксимальноеКоличествоСтрокНаСтранице
						И Не КлючПоказателя.ОбщееПолеМногострочногоРаздела Тогда
						СтраницаРаздела = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела(СоставПоказателей, ИмяРаздела));
						НомерСтраницы = ТаблицаРаздела.Количество();
						НомераДобавленныхСтраниц.Вставить(ИмяРаздела, НомерСтраницы); // Сохраняем номер добавленной страницы.
					ИначеЕсли ПустойРаздел Тогда
						НомерСтроки = 1; // Всегда есть первая строка.
					ИначеЕсли Не ЭтоПустойРаздел(СтраницаРаздела.ДанныеДопСтрок)
						И СтраницаРаздела.ДанныеДопСтрок.Колонки.Найти(ИмяПоля) <> Неопределено
						И КоличествоСтрокНаАктивнойСтранице < МаксимальноеКоличествоСтрокНаСтранице Тогда
						СтраницаРаздела.ДанныеДопСтрок.Добавить(); // Добавляем новую строку.
					ИначеЕсли ТекущаяСтраницаЗаполнена(СвойствоРаздела.ИмяСтраницы, СтраницаРаздела.Данные) Тогда
						СтраницаРаздела = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела(СоставПоказателей, ИмяРаздела));
						НомерСтраницы = ТаблицаРаздела.Количество();
						НомераДобавленныхСтраниц.Вставить(ИмяРаздела, НомерСтраницы); // Сохраняем номер добавленной страницы.
					КонецЕсли;
					НомерСтроки = СтраницаРаздела.ДанныеДопСтрок.Количество();
					НомераДобавленныхСтрок.Вставить(ИмяРаздела, НомерСтроки); // Сохраняем номер добавленной строки
				КонецЕсли;
			Иначе
				НомерСтроки = 0;
				Если Не НомераДобавленныхСтраниц.Свойство(ИмяРаздела, НомерСтраницы) Тогда
					// Добавляем новую страницу
					Если ПустойРаздел Тогда
						НомерСтраницы = 1; // Всегда есть первая страница
					ИначеЕсли ТекущаяСтраницаЗаполнена(ИмяРаздела, СтраницаРаздела.Данные, ИмяПоля) Тогда
						СтраницаРаздела = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела(СоставПоказателей, ИмяРаздела));
					КонецЕсли;
					НомерСтраницы = ТаблицаРаздела.Количество();
					НомераДобавленныхСтраниц.Вставить(ИмяРаздела, НомерСтраницы); // Сохраняем номер добавленной страницы
				КонецЕсли;
			КонецЕсли;
			
			Если КлючПоказателя.ОбщееПолеМногострочногоРаздела Тогда
				СтраницаРаздела.Данные.Вставить(ИмяПоляДанных(КлючПоказателя.ИмяПоля), ЗначениеПоказателя);
			Иначе
				Если Не РазделМногострочный И СвойствоРаздела.СохранятьМногострКакТЗ
					И ТипЗнч(ЗначениеПоказателя) = Тип("СписокЗначений")
					И ЗначениеЗаполнено(КлючПоказателя.МногострочныйРаздел) Тогда
					// В разделе нет многострочности, но есть поля, которые разделены на строки в рамках одной страницы.
					// Например, Приложение 8 строка 051 имеет 3 значения
					Если НомерСтроки = 0 Тогда
						НомерСтроки = 1;
					КонецЕсли;
					
					ИмяПоля = ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки);
					ЗначениеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтраницаРаздела.Данные, ИмяПоля);
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						НомерСтроки = НомерСтроки + 1;
						ИмяПоля = ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки);
					КонецЕсли;
					
					СтраницаРаздела.Данные.Вставить(ИмяПоля, ?(ЗначениеЗаполнено(ЗначениеПоказателя), ЗначениеПоказателя[0].Значение, Неопределено));
					
				ИначеЕсли ТаблицаРаздела.Колонки.Найти("Данные") <> Неопределено Тогда
					СтраницаРаздела.Данные.Вставить(ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки), ЗначениеПоказателя);
				КонецЕсли;
				
				Если РазделМногострочный И СвойствоРаздела.СохранятьМногострКакТЗ Тогда
					СтраницаРаздела.ДанныеДопСтрок[НомерСтроки - 1][ИмяПоляДанных(КлючПоказателя.ИмяПоля)] = ЗначениеПоказателя;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			// Одностраничный раздел
			ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)].Вставить(ИмяПоля, ЗначениеПоказателя);
			
		КонецЕсли;
		
		Если ЗаполненныеРазделы <> Неопределено Тогда
			ЗаполненныеРазделы.Вставить(ИмяРаздела, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПустыеДанные(Данные)
	
	Результат = Истина;
	
	Для Каждого ТекущийПараметр Из Данные Цикл
		Если СтрНайти(ТекущийПараметр.Ключ, "_") <> 0 Тогда
			// Исключаем колонки дополнительных строк страницы
			// Пример: Раздел 1 - на одной странице может быть несколько строк в первой группе и вторая группа
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийПараметр.Значение) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПустойРаздел(ТаблицаПроверки)
	
	ДанныеЗаполнены = Ложь;
	
	Для Каждого ТекущаяСтрока Из ТаблицаПроверки Цикл
		Для Каждого ТекущаяКолонка Из ТаблицаПроверки.Колонки Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока[ТекущаяКолонка.Имя]) Тогда
				ДанныеЗаполнены = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Не ДанныеЗаполнены;
	
КонецФункции

Функция ТекущаяСтраницаЗаполнена(ИмяРаздела, ДанныеРаздела, ИмяПоля = "")
	
	Если ИмяРаздела = "Раздел1" Тогда
		Возврат Не ЭтоПустыеДанные(ДанныеРаздела);
	ИначеЕсли ИмяРаздела <> "Приложение5Расчет" Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Расчет к приложению 5 на одной странице содержит 2 пункта для социального и инвестиционного вычета:
	// заполняем поочередно каждый из вычетов
	
	Возврат ДанныеРаздела.Свойство(ИмяПоля) И ЗначениеЗаполнено(ДанныеРаздела[ИмяПоля]);
	
КонецФункции

#КонецОбласти

#Область ЧтениеДанныхДекларации

Функция ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, ИмяРаздела = "")
	
	Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма, ИмяРаздела);
	СвойстваРазделов = СвойстваРазделовДекларации(ВыбраннаяФорма, ИмяРаздела);
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(КлючиПоказателей, "Ключ");
	
	СтруктураДоходовВычетов = Новый Структура;
	Для Каждого ИмяПоказателя Из Показатели Цикл
		ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, СвойстваРазделов, ДанныеОтчета, СтруктураДоходовВычетов);
	КонецЦикла;
	
	// Преобразуем структуру массивов в массив структур
	МассивДоходовВычетов = Новый Массив;
	Для Каждого ДоходВычет Из СтруктураДоходовВычетов Цикл
		
		Если ТипЗнч(ДоходВычет.Значение) = Тип("Массив") Тогда
			Для Количество = МассивДоходовВычетов.Количество() По ДоходВычет.Значение.ВГраница() Цикл
				МассивДоходовВычетов.Добавить(НоваяСтруктураДоходовВычетов(Показатели));
			КонецЦикла;
			Для Индекс = 0 По ДоходВычет.Значение.ВГраница() Цикл
				МассивДоходовВычетов[Индекс].Вставить(ДоходВычет.Ключ, ДоходВычет.Значение[Индекс]);
			КонецЦикла;
		Иначе
			Если МассивДоходовВычетов.Количество() = 0 Тогда
				МассивДоходовВычетов.Добавить(НоваяСтруктураДоходовВычетов(Показатели));
			КонецЕсли;
			МассивДоходовВычетов[0].Вставить(ДоходВычет.Ключ, ДоходВычет.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДоходовВычетов;
	
КонецФункции

Функция НоваяСтруктураДоходовВычетов(МассивПоказателей)
	
	Возврат Новый Структура(СтрСоединить(МассивПоказателей, ","));
	
КонецФункции

Процедура ВставитьПоказательВСтруктуру(ИмяПоказателя, КлючиПоказателей, СвойстваРазделов, ДанныеОтчета, СтруктураДоходовВычетов)
	
	КлючПоказателя = КлючиПоказателей.Найти(ИмяПоказателя, "Ключ");
	СвойствоРаздела = СвойствоРаздела(СвойстваРазделов, КлючПоказателя.ИмяСтраницы);
	ЗначениеПоказателя = ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, СвойствоРаздела, ДанныеОтчета);
	СтруктураДоходовВычетов.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПрочитатьПоказательИзДанныхОтчета(ИмяПоказателя, КлючПоказателя, СвойствоРаздела, ДанныеОтчета)
	
	Перем ЗначениеПоказателя;
	
	Если КлючПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = КлючПоказателя.ИмяПоля;
	ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
	
	РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() > 0);
	
	Если СвойствоРаздела.МногостраничностьВРазделе Тогда
		
		ЗначениеПоказателя = Новый Массив;
		
		ТаблицаРаздела = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
		Если ТаблицаРаздела.Колонки.Найти("Данные") <> Неопределено Тогда
			Для Каждого Страница Из ТаблицаРаздела Цикл
				Если РазделМногострочный И Не КлючПоказателя.ОбщееПолеМногострочногоРаздела Тогда
					МаксимальноеКоличествоСтрокНаСтранице = СвойствоРаздела.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
					Для НомерСтроки = 1 По МаксимальноеКоличествоСтрокНаСтранице Цикл
						ЗначениеВСтроке = Неопределено;
						Если Не Страница.Данные.Свойство(ИмяПоляДанных(КлючПоказателя.ИмяПоля, НомерСтроки), ЗначениеВСтроке) Тогда
							Прервать;
						КонецЕсли;
						ЗначениеПоказателя.Добавить(ЗначениеВСтроке);
					КонецЦикла;
				Иначе
					ЗначениеВСтроке = Неопределено;
					Страница.Данные.Свойство(ИмяПоля, ЗначениеВСтроке);
					ЗначениеПоказателя.Добавить(ЗначениеВСтроке);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Одностраницный раздел
		ПоказательОтчета = ДанныеОтчета.ПоказателиОтчета[ИмяПоказателя(ИмяРаздела)];
		ПоказательОтчета.Свойство(ИмяПоля, ЗначениеПоказателя);
		
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

#КонецОбласти

#Область ДанныеОтчета

Функция НовыйСвойстваРазделовДекларации()
	
	СвойстваРазделовДекларации = Новый ДеревоЗначений;
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе", Новый ОписаниеТипов("ТаблицаЗначений"));
	СвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("МаксКолвоЭкз", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	СвойстваРазделовДекларации.Колонки.Добавить("ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Новый ОписаниеТипов("Булево"));
	СвойстваРазделовДекларации.Колонки.Добавить("ПоказыватьИтогиТолькоНаПоследнейСтранице", Новый ОписаниеТипов("Булево"));
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция НовыйМногострочностьВРазделе()
	
	МногострочностьВРазделе = Новый ТаблицаЗначений;
	МногострочностьВРазделе.Колонки.Добавить("ИдГруппы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	МногострочностьВРазделе.Колонки.Добавить("Область", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	МногострочностьВРазделе.Колонки.Добавить("ВысотаСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	МногострочностьВРазделе.Колонки.Добавить("НезаполняемыеПоказателиЕсть", Новый ОписаниеТипов("Булево"));
	МногострочностьВРазделе.Колонки.Добавить("МаксимальноеКоличествоСтрокНаСтранице", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));

	Возврат МногострочностьВРазделе;
	
КонецФункции

Функция НовыйСтруктураРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("ДлительнаяОперацияАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации",
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мРазмерНеоблогаемойСуммыДохода");
	СтруктураРеквизитовФормы.Вставить("мСтатусНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти", "");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ВерсияБСП", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	СтруктураРеквизитовФормы.Вставить("ОКТМО");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	СтруктураРеквизитовФормы.Вставить("Комментарий", "");
	СтруктураРеквизитовФормы.Вставить("ДоступнаПроверкаКонтрольныхСоотношений", Ложь);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция НовыйДеревоСтраницОтчета()
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ДеревоСтраницОтчета.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Процедура ДобавитьТитульныйЛист(ДеревоСтраницОтчета)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист';
			|en = 'Титульный лист'"));
	
КонецПроцедуры

Процедура ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяРаздела(НомерРаздела),
		СтрШаблон(НСтр("ru = 'Раздел %1';
						|en = 'Раздел %1'"), НомерРаздела));
	
КонецПроцедуры

Процедура ДобавитьПриложениеКРазделу(ДеревоСтраницОтчета, НомерРаздела, НомерПриложения = 0)
	
	Если НомерПриложения = 0 Тогда
		ПредставлениеСтраницы = СтрШаблон(НСтр("ru = 'Приложение к Разделу %1';
												|en = 'Приложение к Разделу %1'"), НомерРаздела)
	Иначе
		ПредставлениеСтраницы = СтрШаблон(НСтр("ru = 'Приложение %1 к Разделу %2';
												|en = 'Приложение %1 к Разделу %2'"), НомерПриложения, НомерРаздела)
	КонецЕсли;
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяПриложенияКРазделу(НомерРаздела, НомерПриложения),
		ПредставлениеСтраницы);
	
КонецПроцедуры

Функция ИмяРаздела(НомерРаздела)
	
	Возврат СтрШаблон("Раздел%1", НомерРаздела);
	
КонецФункции

Функция ИмяПриложенияКРазделу(НомерРаздела, НомерПриложения = 0)
	
	Если НомерПриложения = 0 Тогда
		Возврат СтрШаблон("Раздел%1Приложение", НомерРаздела);
	Иначе
		Возврат СтрШаблон("Раздел%1Приложение%2", НомерРаздела, НомерПриложения);
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяПриложения(НомерПриложения),
		СтрШаблон(НСтр("ru = 'Приложение %1';
						|en = 'Приложение %1'"), НомерПриложения));
	
КонецПроцедуры

Функция ИмяПриложения(НомерПриложения)
	
	Возврат СтрШаблон("Приложение%1", НомерПриложения);
	
КонецФункции

Процедура ДобавитьПродолжениеПриложения(ДеревоСтраницОтчета, НомерПриложения, ЭтоРасчет = Истина)
	
	Если ЭтоРасчет Тогда
		ИмяСтраницы = ИмяРасчетаКПриложению(НомерПриложения);
	Иначе
		ИмяСтраницы = ИмяПродолженияПриложения(НомерПриложения);
	КонецЕсли;
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяСтраницы,
		СтрШаблон(НСтр("ru = 'Приложение %1 (продолжение)';
						|en = 'Приложение %1 (продолжение)'"), НомерПриложения));
	
КонецПроцедуры

Функция ИмяПродолженияПриложения(НомерПриложения)
	
	Возврат СтрШаблон("Приложение%1Продолжение", НомерПриложения);
	
КонецФункции

Процедура ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения)
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		ИмяРасчетаКПриложению(НомерПриложения),
		СтрШаблон(НСтр("ru = 'Расчет к Приложению %1';
						|en = 'Расчет к Приложению %1'"), НомерПриложения));
	
КонецПроцедуры

Функция ИмяРасчетаКПриложению(НомерПриложения)
	
	Возврат СтрШаблон("Приложение%1Расчет", НомерПриложения);
	
КонецФункции

Функция ДобавитьСтраницуОтчета(ДеревоСтраницОтчета, ИмяСтраницы, Представление, ОриентацияСтраницы = "Портрет", ВыводНаПечать = 1, ПоказатьСтраницу = 1, ВыгрузитьСтраницу = 2)
	
	НоваяСтрока = ДеревоСтраницОтчета.Строки.Добавить();
	НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ОриентацияСтраницы = ОриентацияСтраницы;
	НоваяСтрока.ВыводНаПечать = ВыводНаПечать;
	НоваяСтрока.ПоказатьСтраницу = ПоказатьСтраницу;
	НоваяСтрока.ВыгрузитьСтраницу = ВыгрузитьСтраницу;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПоказателиОтчета(СвойстваРазделовДекларации, Форма = Неопределено, СоставПоказателей = Неопределено, ВыбраннаяФорма = "") Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Если СвойстваРазделовДекларации = Неопределено Тогда
		Возврат ПоказателиОтчета;
	КонецЕсли;
	
	Для Каждого СвойствоРаздела Из СвойстваРазделовДекларации.Строки Цикл
		
		Если СвойствоРаздела.МногостраничностьВРазделе Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРаздела = СвойствоРаздела.ИмяСтраницы;
		
		Если Форма <> Неопределено Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				Форма[СтрШаблон("СтруктураДанных%1", ИмяРаздела)]);
		ИначеЕсли ИмяРаздела = "Титульный" Тогда
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				НоваяСтруктураТитульногоЛиста(ВыбраннаяФорма));
		Иначе
			ПоказателиОтчета.Вставить(
				ИмяПоказателя(ИмяРаздела),
				НоваяСтруктураРаздела(ПоказателиРаздела(СоставПоказателей, ИмяРаздела)));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Функция ПоказателиРаздела(СоставПоказателей, ИмяРаздела)
	
	Возврат СоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента", ИмяРаздела));
	
КонецФункции

Функция НоваяСтруктураРаздела(ПоказателиРаздела, ДобавитьИндекс = Ложь)
	
	СтруктураРаздела = Новый Структура;
	
	Для Каждого Показатель Из ПоказателиРаздела Цикл
		НомерСтроки = ?(ДобавитьИндекс И Показатель.ПризнМногострочности = "/", 1, 0);
		СтруктураРаздела.Вставить(
			ИмяПоляДанных(Показатель.КодПоказателяПоСоставу, НомерСтроки),
			ПустоеЗначениеПоказателя(Показатель.ТипДанныхПоказателя));
	КонецЦикла;
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция НоваяСтруктураТитульногоЛиста(ВыбраннаяФорма = "")
	
	Если ВыбраннаяФорма = РеквизитыФормы2022().ИмяОбъекта Тогда
		Возврат НоваяСтруктураТитульногоЛиста2022();
	Иначе
		Возврат НоваяСтруктураТитульногоЛиста2021();
	КонецЕсли;
	
КонецФункции

Функция ДанныеМногострочныхРазделов(СтруктураМногострочныхРазделов, Форма = Неопределено, СоставПоказателей = Неопределено) Экспорт
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Если СтруктураМногострочныхРазделов = Неопределено Тогда
		Возврат ДанныеМногострочныхРазделов;
	КонецЕсли;
	
	Для Каждого Раздел Из СтруктураМногострочныхРазделов Цикл
		Если Форма <> Неопределено Тогда
			ДанныеМногострочныхРазделов.Вставить(Раздел.Ключ, Форма[Раздел.Значение].Выгрузить());
		Иначе
			ДанныеМногострочныхРазделов.Вставить(Раздел.Ключ, НоваяТаблицаДанныхМногострочногоРаздела(Раздел.Ключ, СоставПоказателей));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеМногострочныхРазделов;
	
КонецФункции

Функция НоваяТаблицаДанныхМногострочногоРаздела(Идентификатор, ПоказателиРаздела)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Добавить();
	
	Для Каждого Показатель Из ПоказателиРаздела Цикл
		Если Показатель.ПризнМногострочности <> "/" Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(Показатель.КодПоказателяПоСоставу, Идентификатор) = 1 Тогда
			ТаблицаДанных.Колонки.Добавить(Показатель.КодПоказателяПоСоставу);
			ТаблицаДанных[0][Показатель.КодПоказателяПоСоставу] = ПустоеЗначениеПоказателя(Показатель.ТипДанныхПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ДанныеМногостраничныхРазделов(СвойстваРазделовДекларации, СтруктураМногостраничныхРазделов, Форма = Неопределено, СоставПоказателей = Неопределено) Экспорт
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Если СтруктураМногостраничныхРазделов = Неопределено Тогда
		Возврат ДанныеМногостраничныхРазделов;
	КонецЕсли;
	
	Для Каждого Раздел Из СтруктураМногостраничныхРазделов Цикл
		Если Форма <> Неопределено Тогда
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, ТаблицаДанныхМногостраничногоРаздела(Форма[Раздел.Значение], СвойстваРазделовДекларации));
		Иначе
			ПоказателиРаздела = ПоказателиРаздела(СоставПоказателей, Раздел.Ключ);
			СвойствоРаздела = СвойствоРаздела(СвойстваРазделовДекларации, Раздел.Ключ);
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, НоваяТаблицаДанныхМногостраничногоРаздела(Раздел.Ключ, ПоказателиРаздела, СвойствоРаздела));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеМногостраничныхРазделов;
	
КонецФункции

Функция ТаблицаДанныхМногостраничногоРаздела(ДанныеФормыКоллекция, СвойстваРазделовДекларации)
	
	Перем Данные, ДанныеДопСтрок;
	
	ТаблицаДанных = НоваяТаблицаДанныхМногостраничногоРаздела();
	Если ДанныеФормыКоллекция.Количество() > 0 Тогда
		ТаблицаДанных.Очистить(); // По умолчанию содержит одну строку
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из ДанныеФормыКоллекция Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЭлементКоллекции, "Представление, АктивнаяСтраница, АвтоматическоеПредставление");
		
		Если ЭлементКоллекции.Свойство("Данные", Данные) И Данные.Количество() > 0 Тогда
			СтрокаДанных.Данные = Данные[0].Значение;
		КонецЕсли;
		
		Если ЭлементКоллекции.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
			Если ДанныеДопСтрок.Количество() > 0 И ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела" Тогда
				СтрокаДанных.ДанныеДопСтрок = ЭлементКоллекции.ДанныеДопСтрок[0].Значение.Выгрузить();
			Иначе
				СтруктураДанныхДопСтрок = Новый Структура;
				Для Каждого ЭлементДанныхДопСтрок Из ДанныеДопСтрок Цикл
					СтруктураДанныхДопСтрок.Вставить(ЭлементДанныхДопСтрок.Значение.Выгрузить());
				КонецЦикла;
				СтрокаДанных.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция НоваяТаблицаДанныхМногостраничногоРаздела(ИмяРаздела = "", ПоказателиРаздела = Неопределено, СвойствоРаздела = Неопределено) Экспорт
	
	ТаблицаРаздела = Новый ТаблицаЗначений;
	ТаблицаРаздела.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(254));
	ТаблицаРаздела.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаРаздела.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ТаблицаРаздела.Колонки.Добавить("Данные");
	ТаблицаРаздела.Колонки.Добавить("ДанныеДопСтрок");
	
	ПерваяСтраница = НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела, ПоказателиРаздела);
	ПерваяСтраница.Представление = НСтр("ru = 'Новая страница';
										|en = 'Новая страница'");
	
	Возврат ТаблицаРаздела;
	
КонецФункции

Функция СвойствоРаздела(СвойстваРазделов, ИмяРаздела)
	
	Возврат СвойстваРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
КонецФункции

Функция НоваяСтраницаМногостраничногоРаздела(ТаблицаРаздела, СвойствоРаздела = Неопределено, ПоказателиРаздела = Неопределено)
	
	Если ТаблицаРаздела.Количество() <> 0 Тогда
		АктивнаяСтраницаРаздела(ТаблицаРаздела).АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	НоваяСтраница = ТаблицаРаздела.Добавить();
	НоваяСтраница.Представление               = СтрШаблон(НСтр("ru = 'Страница N %1';
																|en = 'Страница N %1'"), ТаблицаРаздела.Количество());
	НоваяСтраница.АктивнаяСтраница            = Истина;
	НоваяСтраница.АвтоматическоеПредставление = Истина;
	
	Если СвойствоРаздела <> Неопределено И ПоказателиРаздела <> Неопределено Тогда
		
		РазделМногострочный = (СвойствоРаздела.МногострочностьВРазделе.Количество() <> 0);
		
		НоваяСтраница.Данные = НоваяСтруктураРаздела(ПоказателиРаздела, РазделМногострочный);
		
		Если РазделМногострочный Тогда
			ИдентификаторГруппы = СвойствоРаздела.МногострочностьВРазделе[0].ИдГруппы;
			НоваяСтраница.ДанныеДопСтрок = НоваяТаблицаДанныхМногострочногоРаздела(ИдентификаторГруппы, ПоказателиРаздела);
		КонецЕсли;
		
	Иначе
		НоваяСтраница.Данные = Новый Структура;
	КонецЕсли;
	
	Возврат НоваяСтраница;
	
КонецФункции

Функция АктивнаяСтраницаРаздела(ТаблицаРаздела)
	
	АктивныеСтраницы = ТаблицаРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	Если АктивныеСтраницы.Количество() <> 0 Тогда
		Возврат АктивныеСтраницы[0];
	ИначеЕсли ТаблицаРаздела.Количество() <> 0 Тогда
		Возврат ТаблицаРаздела[ТаблицаРаздела.Количество() - 1];
	КонецЕсли;
	
КонецФункции

Функция ДанныеВариантовАвтоЗаполнения(СтруктураВариантыЗаполнения, Форма) Экспорт
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Если СтруктураВариантыЗаполнения = Неопределено Тогда
		Возврат ДанныеВариантовАвтоЗаполнения;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из СтруктураВариантыЗаполнения Цикл
		МассивВариантовЗаполнения = Новый Массив;
		Для каждого ЭлементКоллекции Из Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивВариантовЗаполнения.Добавить(ЭлементКоллекции.ТаблицаВариантовЗаполнения.Выгрузить());
		КонецЦикла;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивВариантовЗаполнения);
	КонецЦикла;
	
	Возврат ДанныеВариантовАвтоЗаполнения;
	
КонецФункции

Функция ПустоеЗначениеПоказателя(ТипПоказателя)
	
	Если ТипПоказателя = "С" Тогда
		Возврат "";
	ИначеЕсли ТипПоказателя = "Ч" Или ТипПоказателя = "Е" Тогда
		Возврат 0;
	ИначеЕсли ТипПоказателя = "Д" Тогда
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаXML

Функция ПараметрыВыгрузки(ВыбраннаяФорма, Титульный) Экспорт
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",          РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",               КНД(ВыбраннаяФорма));
	ПараметрыВыгрузки.Вставить("ДатаДок",           Формат(Титульный.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",      Формат(Титульный.ОтчетГод, "ЧГ=0"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",         СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",           СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("ВидДок",            Строка(Титульный.НомерКорректировки));
	ПараметрыВыгрузки.Вставить("ТелФЛ",             ТелефонДляОтчета(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("ФамилияФЛ",         СокрЛП(Титульный.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяФЛ",             СокрЛП(Титульный.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоФЛ",        СокрЛП(Титульный.Отчество));

	ПараметрыВыгрузки.Вставить("КодКатегорииФЛ",    СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("СтатусФЛ",          СокрЛП(Титульный.СтатусНалогоплательщика));

	ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("ДатаРожденияФЛ",СокрЛП(Титульный.ДатаРождения));
	Если Титульный.Свойство("МестоРождения") Тогда
		ПараметрыВыгрузки.Вставить("МестоРожденияФЛ", СокрЛП(Титульный.МестоРождения));
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("СтранаФЛ", СокрЛП(Титульный.КодСтраны));

	ПараметрыВыгрузки.Вставить("КодВидДокФЛ", СокрЛП(Титульный.КодВидаДокумента));
	ПараметрыВыгрузки.Вставить("СерНомДокФЛ", СокрЛП(Титульный.СерияИНомерДокумента));
	Если Титульный.Свойство("ДатаВыдачиДокумента") Тогда
		ПараметрыВыгрузки.Вставить("ДатаДокФЛ", Формат(Титульный.ДатаВыдачиДокумента, "ДФ=дд.ММ.гггг"));
	КонецЕсли;
	Если Титульный.Свойство("КемВыданДокумент") Тогда
		ПараметрыВыгрузки.Вставить("ВыдДокФЛ", СокрЛП(Титульный.КемВыданДокумент));
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));

	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",    Титульный.ОргПодписантФамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",        Титульный.ОргПодписантИмя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",   Титульный.ОргПодписантОтчество);

	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", ИмяФайлаСхемы(ВыбраннаяФорма, Титульный.ДатаПодписи));
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL3");

	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ3");

	ПараметрыВыгрузки.Вставить("ИдФайл", ИмяФайлаВыгрузки(ПараметрыВыгрузки));

	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция КНД(ВыбраннаяФорма)
	
	КоллекцияФорм = ДеревоФормИФорматов().Строки;
	НайденнаяСтрока = КоллекцияФорм.Найти(ВыбраннаяФорма, "ИмяОбъекта");
	Возврат ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.Код, "");
	
КонецФункции

Функция ИмяФайлаВыгрузки(ПараметрыВыгрузки)
	
	ЧастиИмени = Новый Массив;
	ЧастиИмени.Добавить(ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(ПараметрыВыгрузки.КодИФНС);
	ЧастиИмени.Добавить(СокрЛП(ПараметрыВыгрузки.ИННФЛ));
	ЧастиИмени.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд"));
	ЧастиИмени.Добавить(Строка(Новый УникальныйИдентификатор));
	
	Возврат СтрСоединить(ЧастиИмени, "_");
	
КонецФункции

Функция ИмяФайлаСхемы(ВыбраннаяФорма, ДатаПодписи)
	
	Если ВыбраннаяФорма = РеквизитыФормы2025().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2025(1);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2024().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2024(1);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2023().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2023(1);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2022().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2022(2);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2021().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2021(2);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2020().ИмяОбъекта Тогда
		Возврат ИмяФайлаСхемы2020(2);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Если ДатаПодписи >= ДатаНачалаДействияВторойВерсииФормыОтчета2019() Тогда
			Возврат ИмяФайлаСхемы2019(2);
		Иначе
			Возврат ИмяФайлаСхемы2019();
		КонецЕсли;
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат ИмяФайлаСхемы2018();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не определена схема выгрузки для формы %1';
										|en = 'Не определена схема выгрузки для формы %1'"), ВыбраннаяФорма);
	КонецЕсли;
	
КонецФункции

Функция ДатаНачалаДействияВторойВерсииФормыОтчета2019()
	
	Возврат Дата(2019, 6, 17);
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ВыбраннаяФорма) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакета = ИмяМакетаДереваВыгрузкиXML(ВыбраннаяФорма);
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат ДеревоСтруктуры;
	КонецЕсли;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			
			ИндексСтроки = ВысотаТаблицы - НомерСтроки + 2;
			
			Если Макет.Область(ИндексСтроки, 0, ИндексСтроки, 0).Видимость = Истина
				И УчтенныеГруппы.Получить(ИндексСтроки) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Индекс = 1 По ИндексСтроки - 2 Цикл
						Узел = УчтенныеГруппы.Получить(ИндексСтроки - Индекс);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НоваяСтрока = РодительскийУзел.Строки.Вставить(0);
				НоваяСтрока.Код = СокрЛП(Макет.Область(ИндексСтроки, 1, ИндексСтроки, 1).Текст);
				НоваяСтрока.Раздел = СокрЛП(Макет.Область(ИндексСтроки, 2, ИндексСтроки, 2).Текст);
				НоваяСтрока.Ключ = СокрЛП(Макет.Область(ИндексСтроки, 3, ИндексСтроки, 3).Текст);
				НоваяСтрока.Тип = СокрЛП(Макет.Область(ИндексСтроки, 4, ИндексСтроки, 4).Текст);
				НоваяСтрока.Формат = СокрЛП(Макет.Область(ИндексСтроки, 5, ИндексСтроки, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(ИндексСтроки, 6, ИндексСтроки, 6).Текст);
				НоваяСтрока.МинРазмерность = ?(ПустаяСтрока(МинРазмерность),
					?(НоваяСтрока.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(ИндексСтроки, 7, ИндексСтроки, 7).Текст);
				НоваяСтрока.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НоваяСтрока.Обязательность = СокрЛП(Макет.Область(ИндексСтроки, 8, ИндексСтроки, 8).Текст);
				НоваяСтрока.Многостраничность = Не ПустаяСтрока(Макет.Область(ИндексСтроки, 9, ИндексСтроки, 9).Текст);
				НоваяСтрока.Многострочность = Не ПустаяСтрока(Макет.Область(ИндексСтроки, 10, ИндексСтроки, 10).Текст);
				НоваяСтрока.Условие = СокрЛП(Макет.Область(ИндексСтроки, 11, ИндексСтроки, 11).Текст);
				НоваяСтрока.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(ИндексСтроки, 12, ИндексСтроки, 12).Текст);
				НоваяСтрока.Представление = СокрЛП(Макет.Область(ИндексСтроки, 13, ИндексСтроки, 13).Текст);
				
				УчтенныеГруппы.Вставить(ИндексСтроки, НоваяСтрока);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИмяМакетаДереваВыгрузкиXML(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		Возврат "СтруктураXML519";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2024().ФормаОтчета Тогда
		Возврат "СтруктураXML518";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2023().ФормаОтчета Тогда
		Возврат "СтруктураXML517";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат "СтруктураXML516";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат "СтруктураXML515";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		Возврат "СтруктураXML514";
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат "СтруктураXML513";
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат "СтруктураXML512";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗначенияПоУмолчанию

Функция КодНалоговогоПериодаПоУмолчанию()
	
	Возврат "34"; // Декларация за календарный год
	
КонецФункции

Функция КодНалоговогоПериодаПриЗакрытииИП()
	
	Возврат "86"; // Декларация предоставляется в соответствии с пунктом 3 статьи 229 Налогового кодекса
	
КонецФункции

Функция КодКатегорииНалогоплательщикаПоУмолчанию(ЭтоФизическоеЛицо = Ложь, СистемыНалогообложения = Неопределено)
		
	Если ЭтоФизическоеЛицо = Истина Тогда
		
		КодКатегорииНалогоплательщика = "760"; // Иное физическое лицо
	
	Иначе
		
		КодКатегорииНалогоплательщика = "720"; // Физическое лицо, зарегистрированное в качестве индивидуального предпринимателя
	
		Если ЗначениеЗаполнено(СистемыНалогообложения) Тогда
			МассивСистемНалогообложения = СтрРазделить(СтрЗаменить(ВРег(СистемыНалогообложения), " ", ""), ",");
			Если МассивСистемНалогообложения.Найти("ОСНО") = Неопределено Тогда
				КодКатегорииНалогоплательщика = "760"; // Иное физическое лицо
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодКатегорииНалогоплательщика;
	
КонецФункции

Функция КодСтраныПоУмолчанию()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтраныМира.Россия, "Код");
	
КонецФункции

// Возвращает значение для строки "Код статуса налогоплательщика" (Титульный лист)
//
// Возвращаемое значение:
//    Строка.
//
Функция СтатусНалогоплательщикаНерезидент() Экспорт
	
	Возврат "2";
	
КонецФункции

// Срок сдачи 3-НДФЛ - не позднее 30 апреля года, следующего за отчетным (п. 1 ст. 229 НК РФ)
//
// Параметры:
//    ДатаОтчета - Дата
//
// Возвращаемое значение:
//   Дата.
//
Функция СрокСдачиДекларации(ДатаОтчета) Экспорт
	
	Возврат КонецДня(Дата(Год(ДатаОтчета) + 1, 4, 30));
	
КонецФункции

#КонецОбласти

#Область ОбработкаПроверкиЗаполнения

#КонецОбласти

#Область РаботаФормы

Функция СвойстваПоказателей(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		СвойстваПоказателей = СвойстваПоказателей2025(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	ИначеЕсли ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		СвойстваПоказателей = СвойстваПоказателей2023(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		СвойстваПоказателей = СвойстваПоказателей2022(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		СвойстваПоказателей = СвойстваПоказателей2021(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		СвойстваПоказателей = СвойстваПоказателей2020(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	Иначе
		СвойстваПоказателей = СвойстваПоказателей2019(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Процедура ДобавитьСвойствоПоказателя(СвойстваПоказателей, Показатель, КлючиПоказателей, Длина, Тип, ТекстПриВыборе, Значения, УникальныйИдентификатор) Экспорт 
	
	Перем КлючПоказателя;
	
	ИмяПоля = "";
	
	Если КлючиПоказателей <> Неопределено Тогда
		КлючПоказателя = КлючиПоказателей.Найти(Показатель, "Ключ");
		Если КлючПоказателя <> Неопределено Тогда
			ИмяПоля = КлючПоказателя.ИмяПоля;
		Иначе
			ВызватьИсключение СтрШаблон("Не найден ключ показателя ""%1""", Показатель);
		КонецЕсли;
	Иначе
		ИмяПоля = Показатель;
	КонецЕсли;
	
	НоваяСтрока = СвойстваПоказателей.Добавить();
	НоваяСтрока.Показатель = ИмяПоля;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.Длина = Длина;
	НоваяСтрока.ТекстПриВыборе = ТекстПриВыборе;
	НоваяСтрока.АдресТаблицыЗначений = ПоместитьВоВременноеХранилище(Значения, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция НормироватьИдентификаторФормы(ВыбраннаяФорма) Экспорт
	
	Префикс = "ФормаОтчета";
	Если СтрНачинаетсяС(НРег(ВыбраннаяФорма), НРег(Префикс)) Тогда
		Возврат СтрШаблон("%1%2", Префикс, Сред(НРег(ВыбраннаяФорма), СтрДлина(Префикс) + 1));
	Иначе
		Возврат ВыбраннаяФорма;
	КонецЕсли;
	
КонецФункции

Функция КлючиПоказателейДекларации(ВыбраннаяФорма, ИмяРаздела = "") Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2025(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2024().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2024(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2023().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2023(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2022(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2021(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2020(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КлючиПоказателейДекларации2019(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат КлючиПоказателейДекларации2018();
	Иначе
		Возврат НовыеКлючиПоказателейДекларации();
	КонецЕсли;
	
КонецФункции

Функция НовыеКлючиПоказателейДекларации()
	
	КлючиПоказателей = Новый ТаблицаЗначений;
	КлючиПоказателей.Колонки.Добавить("Ключ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КлючиПоказателей.Колонки.Добавить("ИмяСтраницы", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоля", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("МногостраничныйРаздел", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("МногострочныйРаздел", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ОбщееПолеМногострочногоРаздела", Новый ОписаниеТипов("Булево"));
	
	КлючиПоказателей.Индексы.Добавить("Ключ");
	КлючиПоказателей.Индексы.Добавить("ИмяПоля");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ЕстьКлючПоказателя(ИмяКлюча, АдресКлючейПоказателей) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(АдресКлючейПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаКлючей = ПолучитьИзВременногоХранилища(АдресКлючейПоказателей);
	Если ТипЗнч(ТаблицаКлючей) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТаблицаКлючей.Найти(ИмяКлюча, "Ключ") <> Неопределено;
	
КонецФункции

Функция СтруктураРеквизитовФормы(Организация, Период, ВыбраннаяФорма, ПараметрыОткрытойФормы = Неопределено) Экспорт
	
	ПараметрыФормы = НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма);
	Если ПараметрыОткрытойФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОткрытойФормы);
	КонецЕсли;
	
	Если ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2025().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2025(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2024().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2024(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2023().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2023(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2022().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2022(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2021().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2021(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2020().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2020(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = РеквизитыФормы2019().ИмяОбъекта Тогда
		Возврат СтруктураРеквизитовФормы2019(ПараметрыФормы);
	ИначеЕсли ПараметрыФормы.мВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураРеквизитовФормы2018(ПараметрыФормы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СвойстваРазделовДекларации(ВыбраннаяФорма, ИмяРаздела = "") Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2025(ИмяРаздела);
	ИначеЕсли ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		Возврат СвойстваРазделовДекларации2023(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2022(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2021(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2020(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СвойстваРазделовДекларации2019(ИмяРаздела);
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СвойстваРазделовДекларации2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураМногострочныхРазделов(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		Возврат СтруктураМногострочныхРазделов2025();
	ИначеЕсли ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		Возврат СтруктураМногострочныхРазделов2023();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат СтруктураМногострочныхРазделов2022();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат СтруктураМногострочныхРазделов2021();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или   ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СтруктураМногострочныхРазделов2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураМногострочныхРазделов2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		Возврат СтруктураМногостраничныхРазделов2023();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат СтруктураМногостраничныхРазделов2022();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат СтруктураМногостраничныхРазделов2021();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или   ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат СтруктураМногостраничныхРазделов2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат СтруктураМногостраничныхРазделов2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДеревоСтраницОтчета(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		Возврат ДеревоСтраницОтчета2023();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат ДеревоСтраницОтчета2022();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		Возврат ДеревоСтраницОтчета2021();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или   ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат ДеревоСтраницОтчета2019();
	ИначеЕсли ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		Возврат ДеревоСтраницОтчета2018();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеРазделовМакетамМЧБ(ВыбраннаяФорма) Экспорт
	
	СвойстваРазделов = СвойстваРазделовДекларации(ВыбраннаяФорма);
	Если СвойстваРазделов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеРазделовМакетамМЧБ = Новый Соответствие;
	
	СуффиксФормы = СуффиксВыбраннойФормы(ВыбраннаяФорма);
	
	Для каждого ОписаниеРаздела Из СвойстваРазделов.Строки Цикл
		СоответствиеРазделовМакетамМЧБ.Вставить(
			ОписаниеРаздела.ИмяСтраницы, СтрШаблон("МЧБ_%1_%2", СуффиксФормы, ОписаниеРаздела.ИмяСтраницы));
	КонецЦикла;
	
	Возврат СоответствиеРазделовМакетамМЧБ;
	
КонецФункции

Функция НовыеПараметрыФормы(Организация, Период, ВыбраннаяФорма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаименованиеОтчета", НСтр("ru = 'Декларация 3-НДФЛ';
														|en = 'Декларация 3-НДФЛ'"));
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ВыбраннаяФорма);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоГода(Период));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", КонецГода(Период));
	ПараметрыФормы.Вставить("мПериодичность", Перечисления.Периодичность.Год);
	ПараметрыФормы.Вставить("мСохраненныйДок", Неопределено);
	ПараметрыФормы.Вставить("мСкопированаФорма", Неопределено);
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Истина);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Читает настройки параметров отчета по умолчанию.
// По данным макета "СоставПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Функция СоставПоказателей(ИмяМакета) Экспорт
	
	СоставПоказателей = НовыйСоставПоказателей();
	ВариантыЗаполнения = Новый Структура;
	СтруктураВариантовЗаполнения = Новый Структура;
	
	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакета);
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаВариантовЗаполнения = НоваяТаблицаВариантовЗаполнения();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			
			Если КодПоказателя = "===" Тогда // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			Если ЗначениеЗаполнено(стрВариантЗаполнения) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(стрВариантЗаполнения) Тогда
				чВариантЗаполнения = Число(стрВариантЗаполнения);
			Иначе
				чВариантЗаполнения = 0;
			КонецЕсли;
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = СоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = КодПоказателя;
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			СтруктураВариантовЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			ВариантыЗаполнения.Вставить(ИмяСтраницы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаВариантовЗаполнения));
		Конецесли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СоставПоказателей", СоставПоказателей);
	Результат.Вставить("ДанныеВариантовАвтоЗаполнения", ВариантыЗаполнения);
	Результат.Вставить("СтруктураВариантовЗаполнения", СтруктураВариантовЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСоставПоказателей()
	
	ТаблицаСоставаПоказателей = Новый ТаблицаЗначений;
	ТаблицаСоставаПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоСоставу", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоФорме", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ПризнМногострочности", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ТипДанныхПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("ДопОписание", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("Обязательность", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСоставаПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСоставаПоказателей.Колонки.Добавить("НомерСтрокиВМакете", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	
	Возврат ТаблицаСоставаПоказателей;
	
КонецФункции

Функция НовыйСвойстваПоказателей()
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваПоказателей.Колонки.Добавить("Длина", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СвойстваПоказателей.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	СвойстваПоказателей.Колонки.Добавить("АдресТаблицыЗначений", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция НоваяТаблицаВариантовЗаполнения()
	
	ТаблицаВариантовЗаполнения = Новый ТаблицаЗначений;
	ТаблицаВариантовЗаполнения.Колонки.Добавить("КодПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("ВариантЗаполнения", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("ЗначениеАвто", ОбщегоНазначения.ОписаниеТипаЧисло(16, 2));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("Дельта", ОбщегоНазначения.ОписаниеТипаЧисло(16, 2));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("Комментарий", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаВариантовЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ТаблицаВариантовЗаполнения;
	
КонецФункции

Процедура ДобавитьКлючПоказателя(Ключ, ИмяСтраницы, ИмяПоля, СвойстваРазделовДекларации, КлючиПоказателей, ОбщееПолеМногострочногоРаздела = Ложь)
	
	СвойствоРаздела = СвойствоРаздела(СвойстваРазделовДекларации, ИмяСтраницы);
	Если СвойствоРаздела = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден раздел декларации ""%1""';
										|en = 'Не найден раздел декларации ""%1""'"), ИмяСтраницы);
	КонецЕсли;
	
	Если КлючиПоказателей.Найти(Ключ, "Ключ") <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль ключа показателя ""%1""';
										|en = 'Дубль ключа показателя ""%1""'"), Ключ);
	КонецЕсли;
	
	НоваяСтрока = КлючиПоказателей.Добавить();
	НоваяСтрока.Ключ = Ключ;
	НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
	НоваяСтрока.ИмяПоля = ИмяПоля;
	Если СвойствоРаздела.МногостраничностьВРазделе Тогда
		НоваяСтрока.МногострочныйРаздел = СвойствоРаздела.ИмяСтраницы;
	Иначе
		НоваяСтрока.ИмяПоказателя = ИмяПоказателя(СвойствоРаздела.ИмяСтраницы);
	КонецЕсли;
	Если СвойствоРаздела.МногострочностьВРазделе.Количество() <> 0 Тогда
		НоваяСтрока.МногострочныйРаздел = СвойствоРаздела.МногострочностьВРазделе[0].ИдГруппы;
	КонецЕсли;
	НоваяСтрока.ОбщееПолеМногострочногоРаздела = ОбщееПолеМногострочногоРаздела;
	
КонецПроцедуры

Функция ИмяПоказателя(ИмяСтраницы)
	
	Возврат СтрШаблон("ПолеТабличногоДокумента%1", ИмяСтраницы);
	
КонецФункции

Функция ИмяПоляДанных(ИмяПоля, НомерСтроки = 0)
	
	Если НомерСтроки = 0 Тогда
		Возврат ИмяПоля;
	Иначе
		Возврат СтрШаблон("%1_%2", ИмяПоля, НомерСтроки);
	КонецЕсли;
	
КонецФункции

Функция ПрогрессивнаяШкала(ВыбраннаяФорма) Экспорт
	
	ПрогрессивнаяШкала = Новый Структура;
	ПрогрессивнаяШкала.Вставить("ОсновнаяСтавка", 13);
	ПрогрессивнаяШкала.Вставить("ПовышеннаяСтавка", 15);
	ПрогрессивнаяШкала.Вставить("ПорогПримененияОсновнойСтавки", 5000000);
	
	Возврат ПрогрессивнаяШкала;
	
КонецФункции

Функция НалоговыеСтавки(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат НалоговыеСтавки2022();
	Иначе
		Возврат НалоговыеСтавки2021();
	КонецЕсли;
	
КонецФункции

Функция ВидыДоходов(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат КодыВидовДоходов2022();
	Иначе
		Возврат ВидыДоходов2021();
	КонецЕсли;
	
КонецФункции

Функция ВидыСтандартныхСоциальныхИмущественныхВычетов(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат ВидыСтандартныхСоциальныхИмущественныхВычетов2022();
	КонецЕсли;
	
КонецФункции

Функция КБК(ВыбраннаяФорма) Экспорт
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		Возврат КБК2025();
	ИначеЕсли ПрименяетсяСтруктураРазделовФормы2023(ВыбраннаяФорма) Тогда
		Возврат КБК2023();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		Возврат КБК2022();
	Иначе
		Возврат КБК2021();
	КонецЕсли;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма)
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		
		Возврат КодыВидовПредпринимательскойДеятельности2019();
		
	Иначе
		Возврат КодыВидовПредпринимательскойДеятельности2018();
	КонецЕсли;
	
КонецФункции

Функция ПризнакиУплатыВозврата(ВыбраннаяФорма) Экспорт
	
	ПризнакУплатыВозврата = Новый Структура;
	ПризнакУплатыВозврата.Вставить("Уплата", "1");
	ПризнакУплатыВозврата.Вставить("Возврат", "2");
	ПризнакУплатыВозврата.Вставить("ОтсутствиеУплатыВозврата", "3");
	
	Возврат ПризнакУплатыВозврата;
	
КонецФункции

Функция КодыВидовДоходовРФ(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		
		Возврат КодыВидовДоходов2022();
		
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		
		Возврат КодыВидовДоходовРФ2020();
		
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		Возврат КодыВидовДоходовРФ2019();
	Иначе
		Возврат КодыВидовДоходовРФ2018();
	КонецЕсли;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		
		Возврат КодыВидовДоходов2022();
		
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		
		Возврат КодыВидовДоходовЗаПределамиРФ2019();
		
	Иначе
		Возврат КодыВидовДоходовЗаПределамиРФ2018();
	КонецЕсли;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма)
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		
		Возврат КодыВидовОперацийСЦеннымиБумагами2019();
		
	Иначе
		Возврат КодыВидовОперацийСЦеннымиБумагами2018();
	КонецЕсли;
	
КонецФункции

Функция ВидыИнвестиционныхСчетов() Экспорт
	
	ВидыСчетов = Новый Структура;
	ВидыСчетов.Вставить("ИндивидуальныйИнвестиционныйСчет", "ИндивидуальныйИнвестиционныйСчет");
	ВидыСчетов.Вставить("ПрочиеСчета", "ПрочиеСчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция ГодНачалаДействияВычетаУбыткиПрошлыхЛетПоЦеннымБумагам(ВидСчета) Экспорт
	
	Если ВидСчета = ВидыИнвестиционныхСчетов().ИндивидуальныйИнвестиционныйСчет Тогда
		Возврат 2015;
	Иначе
		Возврат 2010;
	КонецЕсли;
	
КонецФункции

Функция ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ) Экспорт
	
	ПризнакиУчетаУбытков = Новый Структура;
	ПризнакиУчетаУбытков.Вставить("УбытокНеУчитывается", "0");
	ПризнакиУчетаУбытков.Вставить("УбытокУчитывается", "1");
	
	Возврат ПризнакиУчетаУбытков;
	
КонецФункции

Функция СпособыПриобретенияНедвижимости(ВыбраннаяФорма) Экспорт
	
	СпособыПриобретения = Новый Структура;
	СпособыПриобретения.Вставить("НовоеСтроительство", "1");
	СпособыПриобретения.Вставить("Приобретение", "2");
	
	Возврат СпособыПриобретения;
	
КонецФункции

Функция КодыВидаОсвобожденияОтНалогообложенияЗаПределамиРФ(ВыбраннаяФорма) Экспорт
	
	КодыВидаОсвобождения = Новый Структура;
	КодыВидаОсвобождения.Вставить("СтоимостьИмуществаПриЛиквидацииКИК", "1");
	КодыВидаОсвобождения.Вставить("ЦенныеБумагиКИК", "2");
	КодыВидаОсвобождения.Вставить("ДивидендыКИК", "3");
	
	Возврат КодыВидаОсвобождения;
	
КонецФункции

Функция КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов2022();
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ВидыВычетовУменьшающиеБазуИмущественногоВычета(ВыбраннаяФорма) Экспорт
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма) Тогда
		Возврат ВидыВычетовУменьшающиеБазуИмущественногоВычета2022();
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета(ВыбраннаяФорма) Экспорт
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "");
	КодыНалогоплательщика.Вставить("СобственникПенсионер", "");
	КодыНалогоплательщика.Вставить("СупругСобственника", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаПенсионер", "");
	КодыНалогоплательщика.Вставить("Родитель", "");
	КодыНалогоплательщика.Вставить("РодительПенсионер", "");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "");
	КодыНалогоплательщика.Вставить("СобственникСРебенкомПенсионер", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенкомПенсионер", "");
	
	Если ПрименяетсяОсновнаяФорма2022(ВыбраннаяФорма)
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		
		ЗаполнитьЗначенияСвойств(КодыНалогоплательщика, КодыПризнакаНалогоплательщикаДляИмущественногоВычета2019());
		
	Иначе
		ЗаполнитьЗначенияСвойств(КодыНалогоплательщика, КодыПризнакаНалогоплательщикаДляИмущественногоВычета2018());
	КонецЕсли;
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодОбъектаНедвижимости(ОбъектНедвижимости, ВыбраннаяФорма) Экспорт
	
	Перем КодОбъектаНедвижимости;
	
	КодыОбъектаНедвижимости = КодыНаименованияОбъектаНедвижимости(ВыбраннаяФорма);
	Если КодыОбъектаНедвижимости.Свойство(ОбъектНедвижимости, КодОбъектаНедвижимости) Тогда
		Возврат КодОбъектаНедвижимости;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НеоблагаемыеСуммыДоходов(ВыбраннаяФорма) Экспорт
	
	НеоблагаемыеСуммыДоходов = Новый Структура;
	НеоблагаемыеСуммыДоходов.Вставить("Подарок",                      4000);
	НеоблагаемыеСуммыДоходов.Вставить("Призы",                        4000);
	НеоблагаемыеСуммыДоходов.Вставить("МатериальнаяПомощьРаботникам", 4000);
	НеоблагаемыеСуммыДоходов.Вставить("ЛекарственныеПрепараты",       4000);
	НеоблагаемыеСуммыДоходов.Вставить("РекламаТоваров",               4000);
	НеоблагаемыеСуммыДоходов.Вставить("МатериальнаяПомощьИнвалидам",  4000);
	НеоблагаемыеСуммыДоходов.Вставить("Лотереи",                      4000);
	НеоблагаемыеСуммыДоходов.Вставить("МатериальнаяПомощьСтудентам",  4000);
	НеоблагаемыеСуммыДоходов.Вставить("ПомощьУчастникамВОВ",          10000);
	НеоблагаемыеСуммыДоходов.Вставить("СтраховыеВзносы",              12000);
	
	Возврат НеоблагаемыеСуммыДоходов;
	
КонецФункции

Функция ПроцентПрофессиональногоВычета(ВыбраннаяФорма) Экспорт
	
	Возврат 20;
	
КонецФункции

Функция КодыИсточниковДоходов(ВыбраннаяФорма) Экспорт
	
	КодыИсточниковДоходов = Новый Структура;
	КодыИсточниковДоходов.Вставить("ДоходРФ", "1");
	КодыИсточниковДоходов.Вставить("ДоходЗаПределамиРФ", "2");
	
	Возврат КодыИсточниковДоходов;
	
КонецФункции

Функция КодыСтатусовНалогоплательщика(ВыбраннаяФорма) Экспорт
	
	КодыСтатусовНалогоплательщика = Новый Структура;
	КодыСтатусовНалогоплательщика.Вставить("НалоговыйРезидент", "1");
	КодыСтатусовНалогоплательщика.Вставить("НеНалоговыйРезидент", "2");
	
	Возврат КодыСтатусовНалогоплательщика;
	
КонецФункции

Функция ПрофессиональныйВычетРассчитываетсяПострочно(ВыбраннаяФорма) Экспорт
	
	РеквизитыФормы = ТаблицаФормОтчета().Найти(ВыбраннаяФорма, "ФормаОтчета");
	Если РеквизитыФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РеквизитыФормы.ДатаНачалоДействия < '20180101';
	
КонецФункции

Функция МожноНеУказыватьНаименованиеИсточникаДохода(ВыбраннаяФорма) Экспорт
	
	РеквизитыФормы = ТаблицаФормОтчета().Найти(ВыбраннаяФорма, "ФормаОтчета");
	Если РеквизитыФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РеквизитыФормы.ДатаНачалоДействия >= '20180101';
	
КонецФункции

Функция СредиПриложенийЕстьЗаявлениеНаВозвратНалога(ВыбраннаяФорма) Экспорт
	
	РеквизитыФормы = ТаблицаФормОтчета().Найти(ВыбраннаяФорма, "ФормаОтчета");
	Если РеквизитыФормы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РеквизитыФормы.ДатаНачалоДействия >= '20200101';
	
КонецФункции

// Возвращает коллекцию таблиц, содержащих списки выбора значений показателей декларации.
//
Функция СпискиВыбора(МакетСоставаПоказателей) Экспорт
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЗначений = НоваяТаблицаЗначенийСпискаВыбора();
		
		Для НомСтр = Область.Верх По Область.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если КодПоказателя <> "###" Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Код = КодПоказателя;
				НоваяСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				НоваяСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
			КонецЕсли;
		КонецЦикла;
		
		КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблицаЗначений);
		
	КонецЦикла;
	
	Возврат КоллекцияСписковВыбора;
	
КонецФункции

Функция НоваяТаблицаЗначенийСпискаВыбора() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("Название", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("РезультатПроверки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НовыйРезультатПроверкиКонтрольныхСоотношений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоНайденныхОшибок", 0);
	Результат.Вставить("КоличествоНайденныхБезОшибок", 0);
	Результат.Вставить("СтруктураОшибок", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

Функция ВидНалогаПоКБК(КодБК, ВыбраннаяФорма)
	
	КБКДекларации = КБК(ВыбраннаяФорма);
	
	Если КодБК = КБКДекларации.ДоходыПолученныеОтНалоговыхАгентов Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ;
	ИначеЕсли КодБК = КБКДекларации.ДоходыОтПредпринимательскойДеятельности Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ_ИП;
	ИначеЕсли КодБК = КБКДекларации.ДоходыПриПолученииКоторыхНеУдержанНалог Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ_ФизЛицо;
	ИначеЕсли КодБК = КБКДекларации.ДоходыОблагаемыеПоПовышеннойСтавке Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ_ИП;
	ИначеЕсли КодБК = КБКДекларации.НалогПоПовышеннойСтавкеНаОснованииУведомления Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ;
	ИначеЕсли КодБК = КБКДекларации.ДоходыСДивидендов Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ;
	ИначеЕсли КодБК = КБКДекларации.ДоходыСДивидендовПоПовышеннойСтавке Тогда
		Возврат Перечисления.ВидыНалогов.НДФЛ;
	Иначе
		Возврат Перечисления.ВидыНалогов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ТекстПоясненияРасширенныйНалоговыйПериод(Организация, КонецПериода) Экспорт
	
	Если РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, КонецПериода) <> "Общая" Тогда
		Возврат "";
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
	Если КонецПериода < НалоговыйПериод.Начало Тогда
		Возврат "";
	КонецЕсли;
	
	НалоговыйПериодПропущен = (КонецПериода < НалоговыйПериод.Период);
	НалоговыйПериодРасширен = (НалоговыйПериод.Начало < НалоговыйПериод.Период);
	
	ГодОтчета = Год(КонецПериода);
	
	Если НалоговыйПериодПропущен Тогда
		ТекстПояснения = СтрШаблон(
			НСтр("ru = 'Декларировать доходы, полученные от предпринимательской деятельности, в отчете за %1 год не нужно. Период с даты регистрации %2 по %3 включается в отчет за %4 год.';
				|en = 'Декларировать доходы, полученные от предпринимательской деятельности, в отчете за %1 год не нужно. Период с даты регистрации %2 по %3 включается в отчет за %4 год.'"),
			Формат(ГодОтчета, "ЧГ=0"),
			Формат(НалоговыйПериод.Начало, "ДЛФ=D"),
			Формат(НалоговыйПериод.Период - 1, "ДЛФ=D"),
			Формат(ГодОтчета + 1, "ЧГ=0"));
	ИначеЕсли НалоговыйПериодРасширен Тогда
		ТекстПояснения = СтрШаблон(
			НСтр("ru = 'Доходы, полученные от предпринимательской деятельности с даты регистрации %1 по %2, включаются в отчет за %3 год.';
				|en = 'Доходы, полученные от предпринимательской деятельности с даты регистрации %1 по %2, включаются в отчет за %3 год.'"),
			Формат(НалоговыйПериод.Начало, "ДЛФ=D"),
			Формат(НалоговыйПериод.Период - 1, "ДЛФ=D"),
			Формат(ГодОтчета, "ЧГ=0"));
	Иначе
		ТекстПояснения = "";
	КонецЕсли;
	
	Возврат ТекстПояснения;
	
КонецФункции

// Приводит телефон к требованиям порядка заполнения
Функция ТелефонДляОтчета(Знач Телефон) Экспорт
	
	// Номер телефона указываются без пробелов и прочерков. Для каждой скобки и знака "+" отводится одна ячейка
	Телефон = СтрЗаменить(Телефон, " ", "");
	Телефон = СтрЗаменить(Телефон, "-", "");
	
	Возврат Телефон;
	
КонецФункции

Функция ИмяМакетаСписковВыбора(ВыбраннаяФорма)
	
	Возврат СтрШаблон("Списки%1", СуффиксВыбраннойФормы(ВыбраннаяФорма));
	
КонецФункции

Функция СуффиксВыбраннойФормы(ВыбраннаяФорма)
	
	Возврат Сред(ВыбраннаяФорма, СтрДлина("ФормаОтчета") + 1);
	
КонецФункции

Функция РазделПуст(ДанныеОтчета, ДеревоВыгрузки, Раздел, ВыбраннаяФорма) Экспорт
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел, ВыбраннаяФорма);
	
	ДанныеРаздела = ДанныеОтчета[Раздел];
	
	Если ТипЗнч(ДанныеРаздела) <> Тип("Структура") Тогда
		Для Каждого ТекущаяСтрока Из ДанныеРаздела Цикл
			
			Если ТипЗнч(ТекущаяСтрока.Данные) = Тип("СписокЗначений") Тогда
				Если Не СтраницаПуста(ТекущаяСтрока.Данные[0].Значение, ПоказателиРаздела) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если Не СтраницаПуста(ТекущаяСтрока.Данные, ПоказателиРаздела) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если Не СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, УчитыватьМногострочностьРодителя = Ложь) Экспорт
	
	Для Каждого Показатель Из ПоказателиРаздела Цикл
		Если Показатель.Многострочность Или (УчитыватьМногострочностьРодителя И Показатель.Родитель.Многострочность) Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Показатель.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Показатель, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			ЗначениеПоказателя = Неопределено;
			ДанныеСтраницы.Свойство(СтрЗаменить(Показатель.Ключ,"_Ч",""), ЗначениеПоказателя);
			Если ПоказательЗаполнен(Показатель, ЗначениеПоказателя) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ВыбраннаяФорма)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Если ВыбраннаяФорма = РеквизитыФормыОтчета2024().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2025().ФормаОтчета Тогда
		НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность2024();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2023().ФормаОтчета Тогда
		НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность2023();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2022().ФормаОтчета Тогда
		НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность2022();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета Тогда
		НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность2021();
	ИначеЕсли ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета
		Или ВыбраннаяФорма = РеквизитыФормыОтчета2019().ФормаОтчета Тогда
		
		НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность2019();
		
	Иначе
		НеанализируемыеПоказатели = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НеанализируемыеПоказатели) Тогда
		
		Для Каждого ТекущийПоказатель Из НеанализируемыеПоказатели Цикл
			
			СтрокаПоказателя = КлючиПоказателей.Найти(ТекущийПоказатель, "Ключ");
			Если СтрокаПоказателя <> Неопределено Тогда
				ПоказателиНеанализируемыеНаЗаполненность.Добавить(СтрокаПоказателя.ИмяПоля);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И Не (СокрЛП(Показатель.Формат) = "N"
		И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел, ВыбраннаяФорма) Экспорт
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	НеанализируемыеПоказатели = ПоказателиНеанализируемыеНаЗаполненность(ВыбраннаяФорма);
	
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокРаздела Цикл
		
		Индекс = КоличествоСтрокРаздела - НомерСтроки;
		ТекущаяСтрока = ПоказателиРаздела[Индекс];
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Ключ)
			Или НеанализируемыеПоказатели.Найти(ТекущаяСтрока.Ключ) <> Неопределено Тогда
			
			ПоказателиРаздела.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Процедура ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочнойГруппы, СтруктураМногострочныхРазделов)
	
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочнойГруппы, ИдентификаторыМногострочнойГруппы);
	
КонецПроцедуры

Процедура ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела, СтруктураМногостраничныхРазделов)
	
	СтруктураМногостраничныхРазделов.Вставить(ИмяРаздела, ИмяТаблицыСтраницыМногостраничногоРаздела(ИмяРаздела));
	
КонецПроцедуры

Функция ИмяТаблицыСтраницыМногостраничногоРаздела(ИмяРаздела)
	
	Возврат СтрШаблон("ТаблицаСтраницы%1", ИмяРаздела)
	
КонецФункции

Функция ВидБанковскогоСчета(НомерСчета) Экспорт
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		ПрефиксыДепозитныхСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
			"42301, 42302, 42303, 42304, 42305, 42306, 42307", ", ");
		Если ПрефиксыДепозитныхСчетов.Найти(Лев(НомерСчета, 5)) <> Неопределено Тогда
			БанкСчетВид = "07";
		Иначе
			БанкСчетВид = "02";
		КонецЕсли;
	Иначе
		БанкСчетВид = "";
	КонецЕсли;
	
	Возврат БанкСчетВид;
	
КонецФункции

Процедура УдалитьКлючПоказателя(Ключ, ТаблицаПоказателей)
	
	СтрокаТаблицы = ТаблицаПоказателей.Найти(Ключ, "Ключ");
	Если СтрокаТаблицы <> Неопределено Тогда
		ТаблицаПоказателей.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма2018кв1

Функция СтруктураРеквизитовФормы2018(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2018кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2017";
	СтруктураРеквизитовФормы.мКодОтчета = "1151020"; // КНД
	
	СтруктураРеквизитовФормы.мПоМесту = КодКатегорииНалогоплательщикаПоУмолчанию();
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.12", Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	СтруктураРеквизитовФормы.Вставить("мИдГруппыА", ИдентификаторыМногострочныхГрупп.ГруппаА);
	СтруктураРеквизитовФормы.Вставить("мИдГруппыБ", ИдентификаторыМногострочныхГрупп.ГруппаБ);
	СтруктураРеквизитовФормы.Вставить("мИдРасчетаДоходаОтПродажиНедвижимости", ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2018()
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2018();
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	// Раздел 1
	ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Раздел 2
	ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001091", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяКУплате", "Раздел2", "П000200001121", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001122", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист А
	ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "ЛистА", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодВидаДоходаРФ", "ЛистА", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "ЛистА", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "ЛистА", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "ЛистА", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "ЛистА", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаДоходаРФ", "ЛистА", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаОблагаемогоДоходаРФ", "ЛистА", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяРФ", "ЛистА", "П000300001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "ЛистА", "П000300001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Б
	ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "ЛистБ", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
	ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "ЛистБ", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "ЛистБ", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "ЛистБ", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "ЛистБ", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НомерКИК", "ЛистБ", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "ЛистБ", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "ЛистБ", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "ЛистБ", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "ЛистБ", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "ЛистБ", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "ЛистБ", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "ЛистБ", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "ЛистБ", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "ЛистБ", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "ЛистБ", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "ЛистБ", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "ЛистБ", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "ЛистБ", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист В
	ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "ЛистВ", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОКВЭДИП", "ЛистВ", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаДоходаИП", "ЛистВ", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовИП", "ЛистВ", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("МатериальныеРасходыИП", "ЛистВ", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("АмортизацияИП", "ЛистВ", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗарплатаИП", "ЛистВ", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗарплатаПоТрудовымДоговорамИП", "ЛистВ", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПрочиеРасходыИП", "ЛистВ", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовВПределахНормативаИП", "ЛистВ", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "ЛистВ", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "ЛистВ", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаНачисленныхАвансовыхПлатежейИП", "ЛистВ", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "ЛистВ", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Г
	ДобавитьКлючПоказателя("ОбщаяСтоимостьПодарков", "ЛистГ", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "ЛистГ", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "ЛистГ", "П000600001200", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Д1
	ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "ЛистД1", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидСобственностиНаОбъектНедвижимости", "ЛистД1", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "ЛистД1", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НалогоплательщикПенсионер", "ЛистД1", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "ЛистД1", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "ЛистД1", "П000700001051", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "ЛистД1", "П000700001052", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "ЛистД1", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "ЛистД1", "П000700001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "ЛистД1", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаЗаявленияОРаспределенииВычета", "ЛистД1", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "ЛистД1", "П000700001100_1", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "ЛистД1", "П000700001100_3", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ГодНачалаИспользованияВычета", "ЛистД1", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "ЛистД1", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "ЛистД1", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Итоги листа Д1
	ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "ЛистД1", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "ЛистД1", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "ЛистД1", "П000700001200", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "ЛистД1", "П000700001210", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "ЛистД1", "П000700001220", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "ЛистД1", "П000700001230", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "ЛистД1", "П000700001240", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Д2
	ДобавитьКлючПоказателя("ДоходыПродажаЖилойНедвижимости", "ЛистД2", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "ЛистД2", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаДолиЖилойНедвижимости", "ЛистД2", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "ЛистД2", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаЖилойНедвижимости", "ЛистД2", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "ЛистД2", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаИнойНедвижимости", "ЛистД2", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "ЛистД2", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаИнойНедвижимости", "ЛистД2", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "ЛистД2", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыПродажаИногоИмущества", "ЛистД2", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "ЛистД2", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ДоходыСРасходамиПродажаИногоИмущества", "ЛистД2", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "ЛистД2", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "ЛистД2", "П000800001210", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Ж
	ДобавитьКлючПоказателя("ИсточникДоходовПрофессиональногоВычета", "ЛистЖ", "П001100001001", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходыПродажаДолиУставногоКапитала", "ЛистЖ", "П001100001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "ЛистЖ", "П001100001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходыДолевоеСтроительство", "ЛистЖ", "П001100001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "ЛистЖ", "П001100001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональногоВычета", "ЛистЖ", "П001100001150", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Е1
	ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "ЛистЕ1", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "ЛистЕ1", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "ЛистЕ1", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "ЛистЕ1", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "ЛистЕ1", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "ЛистЕ1", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "ЛистЕ1", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "ЛистЕ1", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "ЛистЕ1", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "ЛистЕ1", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "ЛистЕ1", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "ЛистЕ1", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетЛечениеМедикаменты", "ЛистЕ1", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "ЛистЕ1", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "ЛистЕ1", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "ЛистЕ1", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "ЛистЕ1", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "ЛистЕ1", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "ЛистЕ1", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист Е2
	ДобавитьКлючПоказателя("ИННПенсионногоФонда", "ЛистЕ2", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КПППенсионногоФонда", "ЛистЕ2", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "ЛистЕ2", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "ЛистЕ2", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондВсего", "ЛистЕ2", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "ЛистЕ2", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюВсего", "ЛистЕ2", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "ЛистЕ2", "П001000001090", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "ЛистЕ2", "П001000001100", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ИнвестиционныйВычет", "ЛистЕ2", "П001000001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "ЛистЕ2", "П001000001120", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "ЛистЗ", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаДохода", "ЛистЗ", "П001200001101", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаРасходов", "ЛистЗ", "П001200001102", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаРЕПО", "ЛистЗ", "П001200001103", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПоЗаймам", "ЛистЗ", "П001200001104", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаПроцентногоРасхода", "ЛистЗ", "П001200001105", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБОбщаяСуммаРасходов", "ЛистЗ", "П001200001106", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБНалоговаяБаза", "ЛистЗ", "П001200001107", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБОбщаяСуммаУбытка", "ЛистЗ", "П001200001108", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБИнвестиционныйВычет", "ЛистЗ", "П001200001109", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПоПФИ", "ЛистЗ", "П001200001110", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаПрошлыхЛет", "ЛистЗ", "П001200001111", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗ", "П001200001112", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ", "ЛистЗ", "П001200001113", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ", "ЛистЗ", "П001200001114", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНаОРЦБСуммаУбыткаБудущийПериод", "ЛистЗ", "П001200001115", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 1
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение", "ЛистЗПродолжение", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаДохода", "ЛистЗПродолжение", "П001300001201", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаРасходов", "ЛистЗПродолжение", "П001300001202", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ", "ЛистЗПродолжение", "П001300001203", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение", "П001300001204", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаДохода", "ЛистЗПродолжение", "П001300001205", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаРасходов", "ЛистЗПродолжение", "П001300001206", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО", "ЛистЗПродолжение", "П001300001207", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам", "ЛистЗПродолжение", "П001300001208", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода", "ЛистЗПродолжение", "П001300001209", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества", "ЛистЗПродолжение", "П001300001210", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБОбщаяСуммаРасходов", "ЛистЗПродолжение", "П001300001211", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение", "П001300001212", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 2
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение2", "ЛистЗПродолжение2", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаДохода", "ЛистЗПродолжение2", "П001400001301", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаРасходов", "ЛистЗПродолжение2", "П001400001302", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеНалоговаяБаза", "ЛистЗПродолжение2", "П001400001303", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеОбщаяСуммаУбытка", "ЛистЗПродолжение2", "П001400001304", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет", "ЛистЗПродолжение2", "П001400001305", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ", "ЛистЗПродолжение2", "П001400001306", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые", "ЛистЗПродолжение2", "П001400001307", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001308", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые", "ЛистЗПродолжение2", "П001400001309", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ", "ЛистЗПродолжение2", "П001400001310", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод", "ЛистЗПродолжение2", "П001400001311", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаДохода", "ЛистЗПродолжение2", "П001400001312", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаРасходов", "ЛистЗПродолжение2", "П001400001313", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеНалоговаяБаза", "ЛистЗПродолжение2", "П001400001314", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка", "ЛистЗПродолжение2", "П001400001315", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет", "ЛистЗПродолжение2", "П001400001316", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые", "ЛистЗПродолжение2", "П001400001317", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001318", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые", "ЛистЗПродолжение2", "П001400001319", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод", "ЛистЗПродолжение2", "П001400001320", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаДохода", "ЛистЗПродолжение2", "П001400001321", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаРасходов", "ЛистЗПродолжение2", "П001400001322", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение2", "П001400001323", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 3
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение3", "ЛистЗПродолжение3", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаДохода", "ЛистЗПродолжение3", "П001500001401", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаРасходов", "ЛистЗПродолжение3", "П001500001402", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение3", "П001500001403", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбытка", "ЛистЗПродолжение3", "П001500001404", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбыткаЦБНаОРЦБ", "ЛистЗПродолжение3", "П001500001405", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ", "ЛистЗПродолжение3", "П001500001406", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаДохода", "ЛистЗПродолжение3", "П001500001407", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаРасходов", "ЛистЗПродолжение3", "П001500001408", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение3", "П001500001409", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбытка", "ЛистЗПродолжение3", "П001500001410", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ", "ЛистЗПродолжение3", "П001500001411", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ", "ЛистЗПродолжение3", "П001500001412", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Лист З. Продолжение 4
	ДобавитьКлючПоказателя("ЦенныеБумагиВидОперацииПродолжение4", "ЛистЗПродолжение4", "П001200001100", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетОстатокНаНачало", "ЛистЗПродолжение4", "П001600001501", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод1", "ЛистЗПродолжение4", "П001600001502_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод2", "ЛистЗПродолжение4", "П001600001503_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод3", "ЛистЗПродолжение4", "П001600001504_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод4", "ЛистЗПродолжение4", "П001600001505_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод5", "ЛистЗПродолжение4", "П001600001506_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод6", "ЛистЗПродолжение4", "П001600001507_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод7", "ЛистЗПродолжение4", "П001600001508_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод8", "ЛистЗПродолжение4", "П001600001509_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод9", "ЛистЗПродолжение4", "П001600001510_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетГод10", "ЛистЗПродолжение4", "П001600001511_год", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод1", "ЛистЗПродолжение4", "П001600001502", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод2", "ЛистЗПродолжение4", "П001600001503", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод3", "ЛистЗПродолжение4", "П001600001504", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод4", "ЛистЗПродолжение4", "П001600001505", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод5", "ЛистЗПродолжение4", "П001600001506", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод6", "ЛистЗПродолжение4", "П001600001507", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод7", "ЛистЗПродолжение4", "П001600001508", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод8", "ЛистЗПродолжение4", "П001600001509", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод9", "ЛистЗПродолжение4", "П001600001510", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод10", "ЛистЗПродолжение4", "П001600001511", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетОстатокНаНачало", "ЛистЗПродолжение4", "П001600001512", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод1", "ЛистЗПродолжение4", "П001600001513", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод2", "ЛистЗПродолжение4", "П001600001514", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод3", "ЛистЗПродолжение4", "П001600001515", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод4", "ЛистЗПродолжение4", "П001600001516", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод5", "ЛистЗПродолжение4", "П001600001517", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод6", "ЛистЗПродолжение4", "П001600001518", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод7", "ЛистЗПродолжение4", "П001600001519", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод8", "ЛистЗПродолжение4", "П001600001520", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод9", "ЛистЗПродолжение4", "П001600001521", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод10", "ЛистЗПродолжение4", "П001600001522", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетНалоговаяБаза", "ЛистЗПродолжение4", "П001600001523", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетНалоговаяБаза", "ЛистЗПродолжение4", "П001600001524", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету", "ЛистЗПродолжение4", "П001600001525", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету", "ЛистЗПродолжение4", "П001600001526", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦБУбыткиПрошлыхЛетОстатокНаКонец", "ЛистЗПродолжение4", "П001600001527", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПрошлыхЛетОстатокНаКонец", "ЛистЗПродолжение4", "П001600001528", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦБУбыткиПереходящиеНаБудущиеПериоды", "ЛистЗПродолжение4", "П001600001529", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ПФИУбыткиПереходящиеНаБудущиеПериоды", "ЛистЗПродолжение4", "П001600001530", СвойстваРазделовДекларации, КлючиПоказателей);
	
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаДоходов", "ЛистЗПродолжение4", "П001600001531", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода", "ЛистЗПродолжение4", "П001600001532", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ЦенныеБумагиИтогоСуммаРасходовКВычету", "ЛистЗПродолжение4", "П001600001533", СвойстваРазделовДекларации, КлючиПоказателей);
	
	// Приложение "Расчет дохода от продажи недвижимости".
	ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "РасчетДоходаОтПродажиНедвижимости", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "РасчетДоходаОтПродажиНедвижимости", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "РасчетДоходаОтПродажиНедвижимости", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "РасчетДоходаОтПродажиНедвижимости", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
	ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "РасчетДоходаОтПродажиНедвижимости", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2018()
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Раздел1";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 9;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "Раздел2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 9;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистА";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.ГруппаА;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 16;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистБ";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.ГруппаБ;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 18;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистВ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистГ";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистД1";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистД2";
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЕ1";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЕ2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	СтрокаУровня1.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЖ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗ";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение2";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение3";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;

	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистЗПродолжение4";
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 2;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистИ";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "ЛистИПродолжение";
	СтрокаУровня1.ОчищатьРаздел = Истина;
	
	СтрокаУровня1 = СвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы = "РасчетДоходаОтПродажиНедвижимости";
	СтрокаУровня1.СохранятьМногострКакТЗ = Истина;
	СтрокаУровня1.МногостраничностьВРазделе = Истина;
	СтрокаУровня1.МаксКолвоЭкз = 999;
	СтрокаУровня1.ОчищатьРаздел = Истина;
	СтрокаУровня1.ПредставлениеДанных = Истина;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 9;
	НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2018()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2018();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.ГруппаА, ИдентификаторыМногострочныхГрупп.ГруппаА);
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.ГруппаБ, ИдентификаторыМногострочныхГрупп.ГруппаБ);
	СтруктураМногострочныхРазделов.Вставить(ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости, ИдентификаторыМногострочныхГрупп.РасчетДоходаОтПродажиНедвижимости);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2018()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	СтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРаздел1");
	СтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздел2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистА", "ТаблицаСтраницыЛистА");
	СтруктураМногостраничныхРазделов.Вставить("ЛистБ", "ТаблицаСтраницыЛистБ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистВ", "ТаблицаСтраницыЛистВ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистД1", "ТаблицаСтраницыЛистД1");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЕ2", "ТаблицаСтраницыЛистЕ2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЖ", "ТаблицаСтраницыЛистЖ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗ", "ТаблицаСтраницыЛистЗ");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение", "ТаблицаСтраницыЛистЗПродолжение");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение2", "ТаблицаСтраницыЛистЗПродолжение2");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение3", "ТаблицаСтраницыЛистЗПродолжение3");
	СтруктураМногостраничныхРазделов.Вставить("ЛистЗПродолжение4", "ТаблицаСтраницыЛистЗПродолжение4");
	СтруктураМногостраничныхРазделов.Вставить("РасчетДоходаОтПродажиНедвижимости", "ТаблицаСтраницыРасчетДоходаОтПродажиНедвижимости");
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция ДеревоСтраницОтчета2018()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Титульный",
		НСтр("ru = 'Титульный лист';
			|en = 'Титульный лист'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Раздел1",
		НСтр("ru = 'Раздел 1';
			|en = 'Раздел 1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"Раздел2",
		НСтр("ru = 'Раздел 2';
			|en = 'Раздел 2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистА",
		НСтр("ru = 'Лист А';
			|en = 'Лист А'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистБ",
		НСтр("ru = 'Лист Б';
			|en = 'Лист Б'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистВ",
		НСтр("ru = 'Лист В';
			|en = 'Лист В'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистГ",
		НСтр("ru = 'Лист Г';
			|en = 'Лист Г'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистД1",
		НСтр("ru = 'Лист Д1';
			|en = 'Лист Д1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистД2",
		НСтр("ru = 'Лист Д2';
			|en = 'Лист Д2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЕ1",
		НСтр("ru = 'Лист Е1';
			|en = 'Лист Е1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЕ2",
		НСтр("ru = 'Лист Е2';
			|en = 'Лист Е2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЖ",
		НСтр("ru = 'Лист Ж';
			|en = 'Лист Ж'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗ",
		НСтр("ru = 'Лист З';
			|en = 'Лист З'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение",
		НСтр("ru = 'Лист З';
			|en = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 1';
													|en = 'продолжение 1'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение2",
		НСтр("ru = 'Лист З';
			|en = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 2';
													|en = 'продолжение 2'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение3",
		НСтр("ru = 'Лист З';
			|en = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 3';
													|en = 'продолжение 3'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистЗПродолжение4",
		НСтр("ru = 'Лист З';
			|en = 'Лист З'") + Символы.ПС + НСтр("ru = 'продолжение 4';
													|en = 'продолжение 4'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистИ",
		НСтр("ru = 'Лист И';
			|en = 'Лист И'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"ЛистИПродолжение",
		НСтр("ru = 'Лист И';
			|en = 'Лист И'") + Символы.ПС + НСтр("ru = 'продолжение';
													|en = 'продолжение'"));
	
	ДобавитьСтраницуОтчета(ДеревоСтраницОтчета,
		"РасчетДоходаОтПродажиНедвижимости",
		НСтр("ru = 'Приложение';
			|en = 'Приложение'"));
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2018()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить("ГруппаА", "П000300001");
	ИдентификаторыМногострочных.Вставить("ГруппаБ", "П000400001");
	ИдентификаторыМногострочных.Вставить("РасчетДоходаОтПродажиНедвижимости", "П001900001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция ИмяФайлаСхемы2018()
	
	Возврат "NO_NDFL3_1_033_00_05_12_01.xsd";
	
КонецФункции

Функция КодыВидовДоходовРФ2018()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("ПродажаНедвижимости", "01");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "02");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "03");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "04");
	КодыВидовДоходов.Вставить("Подарок", "05");
	КодыВидовДоходов.Вставить("ОплатаТруда", "06");
	КодыВидовДоходов.Вставить("ОплатаТрудаНалогНеУдержанАгентом", "07");
	КодыВидовДоходов.Вставить("Дивиденды", "08");
	КодыВидовДоходов.Вставить("ПродажаНедвижимостиПоКадастровойСтоимости", "09");
	КодыВидовДоходов.Вставить("ИнойДоходОтИсточникаРФ", "10");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ2018()
	
	КодыВидовДоходовЗаПределамиРФ = Новый Структура;
	КодыВидовДоходовЗаПределамиРФ.Вставить("ПрибыльКИК", "1");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Иной", "2");
	
	Возврат КодыВидовДоходовЗаПределамиРФ;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности2018()
	
	КодыВидовПредпринимательскойДеятельности = Новый Структура;
	КодыВидовПредпринимательскойДеятельности.Вставить("ПредпринимательскаяДеятельность", "1");
	КодыВидовПредпринимательскойДеятельности.Вставить("НотариальнаяДеятельность", "2");
	КодыВидовПредпринимательскойДеятельности.Вставить("АдвокатскаяДеятельность", "3");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьАрбитражногоУправляющего", "4");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьГлавыКФХ", "5");
	КодыВидовПредпринимательскойДеятельности.Вставить("ИнаяДеятельность", "6");
	
	Возврат КодыВидовПредпринимательскойДеятельности;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета2018()
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "01");
	КодыНалогоплательщика.Вставить("СупругСобственника", "02");
	КодыНалогоплательщика.Вставить("Родитель", "03");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "13");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "23");
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами2018()
	
	КодыВидовОпераций = Новый Структура;
	КодыВидовОпераций.Вставить("ОперацииПоИИС", "1");
	КодыВидовОпераций.Вставить("ИныеОперации", "2");
	
	Возврат КодыВидовОпераций;
	
КонецФункции

#КонецОбласти

#Область Форма2019кв1

Функция РеквизитыФормыОтчета2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
		
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2019()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2018, 10, 03);
	РеквизитыФормы.НомерПриказа = "ММВ-7-11/569@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2018, 1, 1);
	РеквизитыФормы.ДатаОкончанияДействия = Дата(2018, 12, 31);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2019кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2019()
	
	РеквизитыФормы = РеквизитыФормы2019();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.13";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2019(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2019();
	РеквизитыФормата = РеквизитыФормата2019();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2019кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2019";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2019(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2019(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "Приложение2", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "Приложение2", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001115", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКВЭДИП", "Приложение3", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ГодРегистрацииФермерскогоХозяйства", "Приложение3", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированнойНалоговойБазы", "Приложение3", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированногоНалога", "Приложение3", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовПоДоговорамГПХ", "Приложение3", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ФактическийРасходАвторскоеВознаграждение", "Приложение3", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НормативныйРасходАвторскоеВознаграждение", "Приложение3", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению", "Приложение4", "П000600001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовНеПодлежащаяНалогообложению", "Приложение4", "П000600001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению", "Приложение4", "П000600001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению", "Приложение4", "П000600001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению", "Приложение4", "П000600001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению", "Приложение4", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", "Приложение4", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению", "Приложение4", "П000600001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВзносыРаботодателяНеПодлежащиеНалогообложению", "Приложение4", "П000600001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИныеДоходыНеПодлежащиеНалогообложению", "Приложение4", "П000600001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетЛечениеМедикаменты", "Приложение5", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетИзъятиеИмущества", "Приложение6", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПриЛиквидацииКИК", "Приложение6", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиКИК", "Приложение6", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПередачаИмущества", "Приложение6", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыСтоимостьДолиУставногоКапитала", "Приложение6", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2019(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 13;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 22;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 10;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2019()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2019()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить(ИмяРаздела(1), "П000100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(1), "П000300001");
	ИдентификаторыМногострочных.Вставить(ИмяРасчетаКПриложению(1), "П001900001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(8), "П001200001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2019()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(5), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(7), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(8), СтруктураМногостраничныхРазделов);
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция ДеревоСтраницОтчета2019()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьТитульныйЛист(ДеревоСтраницОтчета);
	
	Для НомерРаздела = 1 По КоличествоРазделов2019() Цикл
		ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела);
	КонецЦикла;
	
	Для НомерПриложения = 1 По КоличествоПриложений2019() Цикл
		ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Для Каждого НомерПриложения Из ПриложенияСрасчетами2019() Цикл
		ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция КоличествоРазделов2019()
	
	Возврат 2;
	
КонецФункции

Функция КоличествоПриложений2019()
	
	Возврат 8;
	
КонецФункции

Функция ПриложенияСрасчетами2019()
	
	ПриложенияСрасчетами = Новый Массив;
	ПриложенияСрасчетами.Добавить(1);
	ПриложенияСрасчетами.Добавить(5);
	
	Возврат ПриложенияСрасчетами;
	
КонецФункции

Функция ИмяФайлаСхемы2019(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_13_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция КодыВидовДоходовРФ2019()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("ПродажаНедвижимости", "01");
	КодыВидовДоходов.Вставить("ПродажаНедвижимостиПоКадастровойСтоимости", "02");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "03");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "04");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "05");
	КодыВидовДоходов.Вставить("Подарок", "06");
	КодыВидовДоходов.Вставить("ОплатаТруда", "07");
	КодыВидовДоходов.Вставить("ОплатаТрудаНалогНеУдержанАгентом", "08");
	КодыВидовДоходов.Вставить("Дивиденды", "09");
	КодыВидовДоходов.Вставить("ИнойДоходОтИсточникаРФ", "10");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция КодыВидовДоходовЗаПределамиРФ2019()
	
	КодыВидовДоходовЗаПределамиРФ = Новый Структура;
	КодыВидовДоходовЗаПределамиРФ.Вставить("ПрибыльКИК", "21");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Дивиденды", "22");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Проценты", "23");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Роялти", "24");
	КодыВидовДоходовЗаПределамиРФ.Вставить("Иной", "32");
	
	Возврат КодыВидовДоходовЗаПределамиРФ;
	
КонецФункции

Функция КодыВидовПредпринимательскойДеятельности2019()
	
	КодыВидовПредпринимательскойДеятельности = Новый Структура;
	КодыВидовПредпринимательскойДеятельности.Вставить("ПредпринимательскаяДеятельность", "01");
	КодыВидовПредпринимательскойДеятельности.Вставить("НотариальнаяДеятельность", "02");
	КодыВидовПредпринимательскойДеятельности.Вставить("АдвокатскаяДеятельность", "03");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьАрбитражногоУправляющего", "04");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьГлавыКФХ", "05");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьОценщика", "06");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьПатентногоПоверенного", "07");
	КодыВидовПредпринимательскойДеятельности.Вставить("ДеятельностьМедиатора", "08");
	КодыВидовПредпринимательскойДеятельности.Вставить("ИнаяДеятельность", "09");
	
	Возврат КодыВидовПредпринимательскойДеятельности;
	
КонецФункции

Функция КодыПризнакаНалогоплательщикаДляИмущественногоВычета2019()
	
	КодыНалогоплательщика = Новый Структура;
	КодыНалогоплательщика.Вставить("Собственник", "01");
	КодыНалогоплательщика.Вставить("СобственникПенсионер", "11");
	КодыНалогоплательщика.Вставить("СупругСобственника", "02");
	КодыНалогоплательщика.Вставить("СупругСобственникаПенсионер", "12");
	КодыНалогоплательщика.Вставить("Родитель", "03");
	КодыНалогоплательщика.Вставить("РодительПенсионер", "04");
	КодыНалогоплательщика.Вставить("СобственникСРебенком", "13");
	КодыНалогоплательщика.Вставить("СобственникСРебенкомПенсионер", "14");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенком", "23");
	КодыНалогоплательщика.Вставить("СупругСобственникаСРебенкомПенсионер", "24");
	
	Возврат КодыНалогоплательщика;
	
КонецФункции

Функция КодыВидовОперацийСЦеннымиБумагами2019()
	
	КодыВидовОпераций = Новый Структура;
	
	// Не учитываемые на индивидуальном инвестиционном счете
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаОрганизованномРынке", "01");
	КодыВидовОпераций.Вставить("ЦенныеБумагиПрекратившиеОбращение", "03");
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаПрочихРынках", "04");
	КодыВидовОпераций.Вставить("ПФИсЦенныхБумагНаОрганизованномРынке", "06");
	КодыВидовОпераций.Вставить("ПФИсТоваровНаОрганизованномРынке", "07");
	КодыВидовОпераций.Вставить("ПФИнаПрочихРынках", "08");
	КодыВидовОпераций.Вставить("РЕПО", "10");
	КодыВидовОпераций.Вставить("Займы", "12");
	КодыВидовОпераций.Вставить("ПрочиеОперации", "15");
	
	// Учитываемые на индивидуальном инвестиционном счете
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаОрганизованномРынкеИИС", "16");
	КодыВидовОпераций.Вставить("ЦенныеБумагиПрекратившиеОбращениеИИС", "18");
	КодыВидовОпераций.Вставить("ЦенныеБумагиНаПрочихРынкахИИС", "19");
	КодыВидовОпераций.Вставить("ПФИсЦенныхБумагНаОрганизованномРынкеИИС", "21");
	КодыВидовОпераций.Вставить("ПФИсТоваровНаОрганизованномРынкеИИС", "22");
	КодыВидовОпераций.Вставить("ПФИнаПрочихРынкахИИС", "23");
	КодыВидовОпераций.Вставить("РЕПОнаИИС", "25");
	КодыВидовОпераций.Вставить("ЗаймыИИС", "27");
	КодыВидовОпераций.Вставить("ПрочиеОперацииИИС", "30");
	
	// Убытки прошлых лет
	КодыВидовОпераций.Вставить("УбыткиПоЦеннымБумагам", "31");
	КодыВидовОпераций.Вставить("УбыткиПоПФИ", "32");
	КодыВидовОпераций.Вставить("УбыткиПоЦеннымБумагамНаИИС", "34");
	КодыВидовОпераций.Вставить("УбыткиПоПФИнаИИС", "35");
	
	Возврат КодыВидовОпераций;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность2019()
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалоговыхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаРасходов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("НалоговаяБаза");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИсчисленная");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИностранногоГосударства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяУплате");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяВозврату");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВычетаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаУплаченныхАвансовыхПлатежейИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ГодРегистрацииФермерскогоХозяйства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированнойНалоговойБазы");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированногоНалога");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЧислитель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЗнаменатель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСоциальныхВычетовБезОграничения");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхСоциальныхВычетов");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция СвойстваПоказателей2019(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакУплатыВозврата", КлючиПоказателей, 1, , НСтр("ru = 'Признак уплаты (возврата) налога';
															|en = 'Признак уплаты (возврата) налога'"), КоллекцияСписковВыбора["КодСтроки010"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавка", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
														|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
												|en = 'Вид дохода'"), КоллекцияСписковВыбора["ВидыДоходовРаздел2"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
														|en = 'Вид дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодВидаДоходаЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта';
																	|en = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

#КонецОбласти

#Область Форма2020кв1

Функция РеквизитыФормыОтчета2020()
	
	РеквизитыФормы = РеквизитыФормы2020();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от 03.10.2018 г. № ММВ-7-11/569@ (в редакции приказа ФНС России от %1 г. № %2)';
			|en = 'Утверждена приказом ФНС России от 03.10.2018 г. № ММВ-7-11/569@ (в редакции приказа ФНС России от %1 г. № %2)'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2020()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2019, 10, 07);
	РеквизитыФормы.НомерПриказа = "ММВ-7-11/506@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2019, 1, 1);
	РеквизитыФормы.ДатаОкончанияДействия = Дата(2019, 12, 31);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2020кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2020()
	
	РеквизитыФормы = РеквизитыФормы2020();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.14";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2020(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2020();
	РеквизитыФормата = РеквизитыФормата2020();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2020кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2020";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Истина;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2020(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2019(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "Приложение2", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубЦенныеБумагиКИК", "Приложение2", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "Приложение2", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001074", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001115", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКВЭДИП", "Приложение3", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ГодРегистрацииФермерскогоХозяйства", "Приложение3", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированнойНалоговойБазы", "Приложение3", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированногоНалога", "Приложение3", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовПоДоговорамГПХ", "Приложение3", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ФактическийРасходАвторскоеВознаграждение", "Приложение3", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НормативныйРасходАвторскоеВознаграждение", "Приложение3", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению", "Приложение4", "П000600001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовНеПодлежащаяНалогообложению", "Приложение4", "П000600001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению", "Приложение4", "П000600001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению", "Приложение4", "П000600001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению", "Приложение4", "П000600001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению", "Приложение4", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", "Приложение4", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению", "Приложение4", "П000600001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВзносыРаботодателяНеПодлежащиеНалогообложению", "Приложение4", "П000600001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИныеДоходыНеПодлежащиеНалогообложению", "Приложение4", "П000600001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбычноеЛечение", "Приложение5", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедикаменты", "Приложение5", "П000900001141", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетИзъятиеИмущества", "Приложение6", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПриЛиквидацииКИК", "Приложение6", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиКИК", "Приложение6", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПередачаИмущества", "Приложение6", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыСтоимостьДолиУставногоКапитала", "Приложение6", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СпособПриобретенияНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001033", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ИмяФайлаСхемы2020(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_14_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция КодыВидовДоходовРФ2020()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("ПродажаНедвижимости", "01");
	КодыВидовДоходов.Вставить("ПродажаНедвижимостиПоКадастровойСтоимости", "02");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "03");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "04");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "05");
	КодыВидовДоходов.Вставить("Подарок", "06");
	КодыВидовДоходов.Вставить("ОплатаТруда", "07");
	КодыВидовДоходов.Вставить("ОплатаТрудаНалогНеУдержанАгентом", "08");
	КодыВидовДоходов.Вставить("Дивиденды", "09");
	КодыВидовДоходов.Вставить("ИнойДоходОтИсточникаРФ", "10");
	КодыВидовДоходов.Вставить("ПродажаНежилойНедвижимости", "11");
	КодыВидовДоходов.Вставить("ПродажаНежилойНедвижимостиПоКадастровойСтоимости", "12");
	КодыВидовДоходов.Вставить("ПродажаТранспортныхСредств", "13");
	КодыВидовДоходов.Вставить("АвторскиеВознагражденияНаследникам", "14");
	КодыВидовДоходов.Вставить("ВыигрышиВБукмекерскойКонтореТотализаторе", "15");
	КодыВидовДоходов.Вставить("ВыигрышиВЛотереяхАзартныхИграх", "16");
	КодыВидовДоходов.Вставить("ПополнениеЦелевогоКапиталаНКО", "17");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция СвойстваПоказателей2020(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакУплатыВозврата", КлючиПоказателей, 1, , НСтр("ru = 'Признак уплаты (возврата) налога';
															|en = 'Признак уплаты (возврата) налога'"), КоллекцияСписковВыбора["КодСтроки010"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавка", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
														|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
												|en = 'Вид дохода'"), КоллекцияСписковВыбора["ВидыДоходовРаздел2"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
														|en = 'Вид дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодВидаДоходаЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта';
																	|en = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "СпособПриобретенияНедвижимости", КлючиПоказателей, 1, ,
			НСтр("ru = 'Способы приобретения жилого дома';
				|en = 'Способы приобретения жилого дома'"), КоллекцияСписковВыбора["СпособыПриобретенияНедвижимости"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция СвойстваРазделовДекларации2020(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2019();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 13;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 21;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 10;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 4;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

#КонецОбласти

#Область Форма2021кв1

Функция РеквизитыФормыОтчета2021()
	
	РеквизитыФормы = РеквизитыФормы2021();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2021()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2020, 08, 28);
	РеквизитыФормы.НомерПриказа = "ЕД-7-11/615@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2020, 1, 1);
	РеквизитыФормы.ДатаОкончанияДействия = Дата(2020, 12, 31);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2021кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2021()
	
	РеквизитыФормы = РеквизитыФормы2021();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.15";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2021(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2021();
	РеквизитыФормата = РеквизитыФормата2021();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2021";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Истина;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2021();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1Приложение", ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2021(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2021(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("ПризнакУплатыВозврата", "Раздел1", "П000100001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
		ДобавитьКлючПоказателя("КБКИП", "Раздел1", "П000100001060", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП1Квартал", "Раздел1", "П000100001070", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате1Квартал", "Раздел1", "П000100001080", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИППолугодие", "Раздел1", "П000100001090", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеПолугодие", "Раздел1", "П000100001100", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюПолугодие", "Раздел1", "П000100001110", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП9Месяцев", "Раздел1", "П000100001120", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате9Месяцев", "Раздел1", "П000100001130", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшению9Месяцев", "Раздел1", "П000100001140", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИПГод", "Раздел1", "П000100001150", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеГод", "Раздел1", "П000100001160", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюГод", "Раздел1", "П000100001170", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		
		ДобавитьКлючПоказателя("НомерЗаявленияЗачет", "Раздел1Приложение", "П002100001005", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КБКПереплата", "Раздел1Приложение", "П002100001010", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОПереплата", "Раздел1Приложение", "П002100001020", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НалоговыйПериодПереплата", "Раздел1Приложение", "П002100001030", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
		ДобавитьКлючПоказателя("ПризнакЗачета", "Раздел1Приложение", "П002100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаЗачет", "Раздел1Приложение", "П002100001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговыйПериодЗачет", "Раздел1Приложение", "П002100001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБКЗачет", "Раздел1Приложение", "П002100001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОЗачет", "Раздел1Приложение", "П002100001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодИФНСЗачет", "Раздел1Приложение", "П002100001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("НомерЗаявленияВозврат", "Раздел1Приложение", "П002100001095", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаВозврат", "Раздел1Приложение", "П002100001100", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КБКВозврат", "Раздел1Приложение", "П002100001110", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОВозврат", "Раздел1Приложение", "П002100001120", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НалоговыйПериодВозврат", "Раздел1Приложение", "П002100001130", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НаименованиеБанкаВозврат", "Раздел1Приложение", "П002100001140", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("БИКВозврат", "Раздел1Приложение", "П002100001150", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ВидСчетаВозврат", "Раздел1Приложение", "П002100001160", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НомерСчетаВозврат", "Раздел1Приложение", "П002100001170", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ФамилияВозврат", "Раздел1Приложение", "ЗаявВозвратФамилия", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ИмяВозврат", "Раздел1Приложение", "ЗаявВозвратИмя", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОтчествоВозврат", "Раздел1Приложение", "ЗаявВозвратОтчество", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавка", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001002", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовКИК", "Раздел2", "П000200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежей", "Раздел2", "П000200001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001001", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "Приложение2", "П000400001071", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубЦенныеБумагиКИК", "Приложение2", "П000400001072", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДивидендовКИК", "Приложение2", "П000400001073", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001074", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001115", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКВЭДИП", "Приложение3", "П000500001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ГодРегистрацииФермерскогоХозяйства", "Приложение3", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированнойНалоговойБазы", "Приложение3", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированногоНалога", "Приложение3", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовПоДоговорамГПХ", "Приложение3", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ФактическийРасходАвторскоеВознаграждение", "Приложение3", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НормативныйРасходАвторскоеВознаграждение", "Приложение3", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению", "Приложение4", "П000600001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовНеПодлежащаяНалогообложению", "Приложение4", "П000600001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению", "Приложение4", "П000600001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению", "Приложение4", "П000600001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению", "Приложение4", "П000600001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению", "Приложение4", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", "Приложение4", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьСтудентамНеПодлежащаяНалогообложению", "Приложение4", "П000600001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению", "Приложение4", "П000600001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВзносыРаботодателяНеПодлежащиеНалогообложению", "Приложение4", "П000600001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИныеДоходыНеПодлежащиеНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбычноеЛечение", "Приложение5", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедикаменты", "Приложение5", "П000900001141", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетИзъятиеИмущества", "Приложение6", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПриЛиквидацииКИК", "Приложение6", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиКИК", "Приложение6", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПередачаИмущества", "Приложение6", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыСтоимостьДолиУставногоКапитала", "Приложение6", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СпособПриобретенияНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001033", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Расчет" Тогда
		ДобавитьКлючПоказателя("ДоходыИП1Квартал", "Приложение3Расчет", "П002000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИППолугодие", "Приложение3Расчет", "П002000001011", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИП9Месяцев", "Приложение3Расчет", "П002000001012", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП1Квартал", "Приложение3Расчет", "П002000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИППолугодие", "Приложение3Расчет", "П002000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП9Месяцев", "Приложение3Расчет", "П002000001022", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП1Квартал", "Приложение3Расчет", "П002000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИППолугодие", "Приложение3Расчет", "П002000001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП9Месяцев", "Приложение3Расчет", "П002000001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП1Квартал", "Приложение3Расчет", "П002000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИППолугодие", "Приложение3Расчет", "П002000001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП9Месяцев", "Приложение3Расчет", "П002000001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП1Квартал", "Приложение3Расчет", "П002000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИППолугодие", "Приложение3Расчет", "П002000001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП9Месяцев", "Приложение3Расчет", "П002000001052", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ИмяФайлаСхемы2021(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_15_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция СвойстваПоказателей2021(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакУплатыВозврата", КлючиПоказателей, 1, , НСтр("ru = 'Признак уплаты (возврата) налога';
															|en = 'Признак уплаты (возврата) налога'"), КоллекцияСписковВыбора["КодСтроки010"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБКДоходыФизическихЛиц"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКИП", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
													|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБКПредпринимательскаяДеятельность"], УникальныйИдентификатор);
	
	// Приложение к Разделу 1
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКПереплата", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
															|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКВозврат", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
														|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакЗачета", КлючиПоказателей, 1, , НСтр("ru = 'Признак зачета налога';
													|en = 'Признак зачета налога'"), КоллекцияСписковВыбора["ПризнакЗачета"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидСчетаВозврат", КлючиПоказателей, 2, , НСтр("ru = 'Код вида счета';
														|en = 'Код вида счета'"), КоллекцияСписковВыбора["КодВидаСчета"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавка", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
														|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
												|en = 'Вид дохода'"), КоллекцияСписковВыбора["ВидыДоходовРаздел2"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Вид дохода';
														|en = 'Вид дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодВидаДоходаЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта';
																	|en = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "СпособПриобретенияНедвижимости", КлючиПоказателей, 1, ,
			НСтр("ru = 'Способы приобретения жилого дома';
				|en = 'Способы приобретения жилого дома'"), КоллекцияСписковВыбора["СпособыПриобретенияНедвижимости"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность2021()
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалога");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаВозвратаНалога");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалоговыхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаРасходов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("НалоговаяБаза");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИсчисленная");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИностранногоГосударства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяУплате");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяВозврату");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВычетаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаУплаченныхАвансовыхПлатежейИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ГодРегистрацииФермерскогоХозяйства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированнойНалоговойБазы");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированногоНалога");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЧислитель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЗнаменатель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСоциальныхВычетовБезОграничения");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхСоциальныхВычетов");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("НалоговыйПериодПереплата");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("НалоговыйПериодВозврат");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ФамилияВозврат");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ИмяВозврат");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОтчествоВозврат");
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция СвойстваРазделовДекларации2021(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2021();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1Приложение";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 9;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 13;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 21;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 10;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 4;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3Расчет";
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция ДеревоСтраницОтчета2021()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьТитульныйЛист(ДеревоСтраницОтчета);
	
	РазделыСПриложениями = РазделыСПриложениями2021();
	
	Для НомерРаздела = 1 По КоличествоРазделов2021() Цикл
		ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела);
		
		// Также добавим приложения к разделу, в декларации они следуют сразу после раздела
		ПриложенияКРазделу = РазделыСПриложениями.Получить(НомерРаздела);
		Если ПриложенияКРазделу <> Неопределено Тогда
			Для Каждого НомерПриложения Из ПриложенияКРазделу Цикл
				ДобавитьПриложениеКРазделу(ДеревоСтраницОтчета, НомерРаздела, НомерПриложения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерПриложения = 1 По КоличествоПриложений2021() Цикл
		ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Для Каждого НомерПриложения Из ПриложенияСрасчетами2021() Цикл
		ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция КоличествоРазделов2021()
	
	Возврат 2;
	
КонецФункции

Функция РазделыСПриложениями2021()
	
	РазделыСПриложениями = Новый Соответствие;
	
	ПриложенияКРазделу1 = Новый Массив;
	ПриложенияКРазделу1.Добавить(0);
	
	РазделыСПриложениями.Вставить(1, ПриложенияКРазделу1);
	
	Возврат РазделыСПриложениями;
	
КонецФункции

Функция КоличествоПриложений2021()
	
	Возврат 8;
	
КонецФункции

Функция ПриложенияСрасчетами2021()
	
	ПриложенияСрасчетами = Новый Массив;
	ПриложенияСрасчетами.Добавить(1);
	ПриложенияСрасчетами.Добавить(3);
	ПриложенияСрасчетами.Добавить(5);
	
	Возврат ПриложенияСрасчетами;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2021()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить(ИмяРаздела(1), "П000100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложенияКРазделу(1), "П002100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(1), "П000300001");
	ИдентификаторыМногострочных.Вставить(ИмяРасчетаКПриложению(1), "П001900001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(8), "П001200001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2021()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложенияКРазделу(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(5), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(7), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(8), СтруктураМногостраничныхРазделов);
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2021()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2021();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция ВидыДоходов2021()
	
	ВидыДоходов = Новый Структура;
	ВидыДоходов.Вставить("Дивиденды", "1");
	ВидыДоходов.Вставить("ПрибыльКИК", "2");
	ВидыДоходов.Вставить("Иное", "3");
	
	Возврат ВидыДоходов;
	
КонецФункции

Функция НалоговыеСтавки2021()
	
	НалоговыеСтавки = Новый Структура;
	НалоговыеСтавки.Вставить("ПоУмолчанию", 13);
	НалоговыеСтавки.Вставить("Дивиденды", 13);
	НалоговыеСтавки.Вставить("Вклады", 35);
	
	Возврат НалоговыеСтавки;
	
КонецФункции

Функция КБК2021()
	
	КБК = Новый Структура;
	КБК.Вставить("ДоходыПолученныеОтНалоговыхАгентов",      "18210102010011000110");
	КБК.Вставить("ДоходыОтПредпринимательскойДеятельности", "18210102020011000110");
	КБК.Вставить("ДоходыПриПолученииКоторыхНеУдержанНалог", "18210102030011000110");
	КБК.Вставить("ФиксированныеПлатежиИностранныхГраждан",  "18210102040011000110");
	КБК.Вставить("ДоходыСПрибылиКИК",                       "18210102050011000110");
	
	Возврат КБК;
	
КонецФункции

Функция НоваяСтруктураТитульногоЛиста2021()
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ДатаПодписи", "");
	СтруктураРаздела.Вставить("Период", "");
	СтруктураРаздела.Вставить("ОтчетГод", "");
	СтруктураРаздела.Вставить("КодИМНС", "");
	СтруктураРаздела.Вставить("НомерКорректировки", "0");
	
	СтруктураРаздела.Вставить("ПоМесту", "");
	СтруктураРаздела.Вставить("СтатусНалогоплательщика", "");
	СтруктураРаздела.Вставить("АдресЗаПределамиРФ", "");
	СтруктураРаздела.Вставить("ТелОрганизации", "");
	
	СтруктураРаздела.Вставить("Фамилия", "");
	СтруктураРаздела.Вставить("Имя", "");
	СтруктураРаздела.Вставить("Отчество", "");
	
	СтруктураРаздела.Вставить("ИНН", "");
	СтруктураРаздела.Вставить("ДатаРождения", "");
	СтруктураРаздела.Вставить("МестоРождения", "");
	СтруктураРаздела.Вставить("КодСтраны", "");
	
	СтруктураРаздела.Вставить("КодВидаДокумента", "");
	СтруктураРаздела.Вставить("СерияИНомерДокумента", "");
	СтруктураРаздела.Вставить("ДатаВыдачиДокумента", "");
	СтруктураРаздела.Вставить("КемВыданДокумент", "");
	
	СтруктураРаздела.Вставить("ПрПодп", "1");
	СтруктураРаздела.Вставить("ДокУпПред", "");
	
	СтруктураРаздела.Вставить("ОргПодписантФамилия", "");
	СтруктураРаздела.Вставить("ОргПодписантИмя", "");
	СтруктураРаздела.Вставить("ОргПодписантОтчество", "");
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция НоваяТаблицаДанныхЗаполнения2021()
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ДанныеЗаполнения.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ДанныеЗаполнения.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаполнения.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ДанныеЗаполнения.Колонки.Добавить("СтруктураДанных", Новый ОписаниеТипов("Структура"));
	ДанныеЗаполнения.Колонки.Добавить("СуммаОблагаемогоДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаИсчисленная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаУплаченнаяУдержанная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеРеглОтчета2021(Период, ДанныеОтчета, ВыбраннаяФорма)
	
	ТаблицаДанныхРеглОтчета = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	
	Если ВыбраннаяФорма = "ФормаОтчета2021кв1"
		Или ВыбраннаяФорма = "ФормаОтчета2020кв1"
		Или ВыбраннаяФорма = "ФормаОтчета2019кв1"
		Или ВыбраннаяФорма = "ФормаОтчета2018кв1" Тогда
		
		ПризнакУплата = ПризнакиУплатыВозврата(ВыбраннаяФорма).Уплата;
		
		УплаченныеАвансы = 0;
		Если ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
			ДанныеРаздела2 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел2");
			Для Каждого СтрокаРаздела2 Из ДанныеРаздела2 Цикл
				Если ЗначениеЗаполнено(СтрокаРаздела2.СуммаУплаченныхАвансовыхПлатежей) Тогда
					УплаченныеАвансы = УплаченныеАвансы + СтрокаРаздела2.СуммаУплаченныхАвансовыхПлатежей;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеДекларации = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел1");
		Для Каждого СтрокаДекларации Из ДанныеДекларации Цикл
			
			Если ЗначениеЗаполнено(СтрокаДекларации.КБК) И ЗначениеЗаполнено(СтрокаДекларации.ОКТМО)
				И СтрокаДекларации.ПризнакУплатыВозврата = ПризнакУплата Тогда
				
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБК,
					СтрокаДекларации.ОКТМО,
					СтрокаДекларации.СуммаНалога,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
		
		Если ВыбраннаяФорма = "ФормаОтчета2017кв1"
			Или ВыбраннаяФорма = "ФормаОтчета2016кв1"
			Или ВыбраннаяФорма = "ФормаОтчета2015кв1" Тогда
			
			// Сумма платежа
			// Раздел 1 (многостраничный)
			// 020 - КБК
			// 030 - ОКТМО
			// 040 - сумма
			
			ИмяКБК     = "П000100001020"; // 020
			ИмяОКТМО   = "П000100001030"; // 030
			ИмяСумма   = "П000100001040"; // 040
			ИмяРаздела = "Раздел1";
			
		Иначе
			
			// Сумма платежа
			// Раздел 6 (многостраничный)
			// 020 - КБК
			// 030 - ОКАТО
			// 040 - сумма
			
			ИмяКБК     = "П000060002003"; // 020
			ИмяОКТМО   = "П000060003003"; // 030
			ИмяСумма   = "П000060004003"; // 040
			ИмяРаздела = "Раздел6";
			
		КонецЕсли;
		
		Если ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство(ИмяРаздела) Тогда
			
			Раздел = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
			
			Для Каждого Страница Из Раздел Цикл
				
				Данные = Страница.Данные;
				
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					Данные[ИмяКБК],
					Данные[ИмяОКТМО],
					Данные[ИмяСумма],
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

#КонецОбласти

#Область Форма2022кв1

Функция РеквизитыФормыОтчета2022()
	
	РеквизитыФормы = РеквизитыФормы2022();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2022()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2021, 10, 15);
	РеквизитыФормы.НомерПриказа = "ЕД-7-11/903@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2021, 1, 1);
	РеквизитыФормы.ДатаОкончанияДействия = Дата(2021, 12, 31);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2022кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2022()
	
	РеквизитыФормы = РеквизитыФормы2022();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.16";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2022(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2022();
	РеквизитыФормата = РеквизитыФормата2022();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2022кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2022";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Ложь;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1Приложение", ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2022(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2022(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
		ДобавитьКлючПоказателя("КБКИП", "Раздел1", "П000100001060", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП1Квартал", "Раздел1", "П000100001070", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате1Квартал", "Раздел1", "П000100001080", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИППолугодие", "Раздел1", "П000100001090", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеПолугодие", "Раздел1", "П000100001100", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюПолугодие", "Раздел1", "П000100001110", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП9Месяцев", "Раздел1", "П000100001120", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате9Месяцев", "Раздел1", "П000100001130", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшению9Месяцев", "Раздел1", "П000100001140", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИПГод", "Раздел1", "П000100001150", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеГод", "Раздел1", "П000100001160", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюГод", "Раздел1", "П000100001170", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		
		ДобавитьКлючПоказателя("НомерЗаявленияЗачет", "Раздел1Приложение", "П002100001005", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КБКПереплата", "Раздел1Приложение", "П002100001010", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОПереплата", "Раздел1Приложение", "П002100001020", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
		ДобавитьКлючПоказателя("ПризнакЗачета", "Раздел1Приложение", "П002100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаЗачет", "Раздел1Приложение", "П002100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КБКЗачет", "Раздел1Приложение", "П002100001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОЗачет", "Раздел1Приложение", "П002100001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодИФНСЗачет", "Раздел1Приложение", "П002100001070", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("НомерЗаявленияВозврат", "Раздел1Приложение", "П002100001075", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаВозврат", "Раздел1Приложение", "П002100001080", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КБКВозврат", "Раздел1Приложение", "П002100001090", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОВозврат", "Раздел1Приложение", "П002100001100", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НаименованиеБанкаВозврат", "Раздел1Приложение", "П002100001110", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("БИКВозврат", "Раздел1Приложение", "П002100001120", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ВидСчетаВозврат", "Раздел1Приложение", "П002100001130", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НомерСчетаВозврат", "Раздел1Приложение", "П002100001140", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ФамилияВозврат", "Раздел1Приложение", "ЗаявВозвратФамилия", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ИмяВозврат", "Раздел1Приложение", "ЗаявВозвратИмя", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОтчествоВозврат", "Раздел1Приложение", "ЗаявВозвратОтчество", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговойБазыПоОсновнойПоСтавке", "Раздел2", "П000200001061", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговойБазыПоПовышеннойСтавке", "Раздел2", "П000200001062", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИныхНалоговыхБаз", "Раздел2", "П000200001063", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяПоПовышеннойСтавке", "Раздел2", "П000200001081", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКСМСтраныЗачисленияДоходаЗаПределамиРФ", "Приложение2", "П000400001011", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001041", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаОсвобождаемогоОтНалогообложенияЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001170", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ГодРегистрацииФермерскогоХозяйства", "Приложение3", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированнойНалоговойБазы", "Приложение3", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированногоНалога", "Приложение3", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовПоДоговорамГПХ", "Приложение3", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ФактическийРасходАвторскоеВознаграждение", "Приложение3", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НормативныйРасходАвторскоеВознаграждение", "Приложение3", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Расчет" Тогда
		ДобавитьКлючПоказателя("ДоходыИП1Квартал", "Приложение3Расчет", "П002000001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИППолугодие", "Приложение3Расчет", "П002000001161", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИП9Месяцев", "Приложение3Расчет", "П002000001162", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП1Квартал", "Приложение3Расчет", "П002000001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИППолугодие", "Приложение3Расчет", "П002000001171", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП9Месяцев", "Приложение3Расчет", "П002000001172", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП1Квартал", "Приложение3Расчет", "П002000001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИППолугодие", "Приложение3Расчет", "П002000001181", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП9Месяцев", "Приложение3Расчет", "П002000001182", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП1Квартал", "Приложение3Расчет", "П002000001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИППолугодие", "Приложение3Расчет", "П002000001191", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП9Месяцев", "Приложение3Расчет", "П002000001192", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП1Квартал", "Приложение3Расчет", "П002000001200", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИППолугодие", "Приложение3Расчет", "П002000001201", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП9Месяцев", "Приложение3Расчет", "П002000001202", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению", "Приложение4", "П000600001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовНеПодлежащаяНалогообложению", "Приложение4", "П000600001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению", "Приложение4", "П000600001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению", "Приложение4", "П000600001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению", "Приложение4", "П000600001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению", "Приложение4", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", "Приложение4", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьСтудентамНеПодлежащаяНалогообложению", "Приложение4", "П000600001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению", "Приложение4", "П000600001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВзносыРаботодателяНеПодлежащиеНалогообложению", "Приложение4", "П000600001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИныеДоходыНеПодлежащиеНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001130", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбычноеЛечение", "Приложение5", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедикаменты", "Приложение5", "П000900001141", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке", "Приложение5", "П000900001230", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетИзъятиеИмущества", "Приложение6", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПриЛиквидацииКИК", "Приложение6", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиКИК", "Приложение6", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПередачаИмущества", "Приложение6", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыСтоимостьДолиУставногоКапитала", "Приложение6", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СпособПриобретенияНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001033", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы", "Приложение7", "П000700001121", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты", "Приложение7", "П000700001131", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		
		// Расчет сумм, принимаемых к вычету
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Общая сумма взносов, принимаемая к вычету
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Расчет суммы денежных средств, внесенных на индивидуальный инвестиционный счет, принимаемых к вычету
		ДобавитьКлючПоказателя("ИННИИС", "Приложение5Расчет", "П001000001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИИС", "Приложение5Расчет", "П001000001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИИС", "Приложение5Расчет", "П001000001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораИИС", "Приложение5Расчет", "П001000001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораИИС", "Приложение5Расчет", "П001000001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаОткрытияИИС", "Приложение5Расчет", "П001000001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИИС", "Приложение5Расчет", "П001000001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакУпрощенногоПорядкаВычетаИИС", "Приложение5Расчет", "П001000001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ИмяФайлаСхемы2022(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_16_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция КодыВидовДоходов2022()
	
	КодыВидовДоходов = Новый Структура;
	КодыВидовДоходов.Вставить("Дивиденды", "01");
	КодыВидовДоходов.Вставить("ВыигрышиВЛотереяхАзартныхИграх", "02");
	КодыВидовДоходов.Вставить("ОперацииСЦеннымиБумагами", "03");
	КодыВидовДоходов.Вставить("ПроцентПоОблигациям", "04");
	КодыВидовДоходов.Вставить("ПрибыльКИК", "05");
	КодыВидовДоходов.Вставить("ФиксированнаяПрибыльКИК", "06");
	КодыВидовДоходов.Вставить("ПредпринимательскаяДеятельность", "07");
	КодыВидовДоходов.Вставить("СдачаИмуществаВАренду", "08");
	КодыВидовДоходов.Вставить("ОперацииСКриптовалютой", "09");
	КодыВидовДоходов.Вставить("ИнойДоходПоПрогрессивнойШкале", "10");
	КодыВидовДоходов.Вставить("РаспределениеПрибылиИностраннойСтруктуры", "11");
	КодыВидовДоходов.Вставить("Роялти_ЗаПределамиРФ", "12");
	КодыВидовДоходов.Вставить("БанковскиеПроценты_ЗаПределамиРФ", "13");
	КодыВидовДоходов.Вставить("БанковскиеПроценты", "14");
	КодыВидовДоходов.Вставить("БанковскиеПроценты_Нерезидентов", "15");
	КодыВидовДоходов.Вставить("ОплатаТрудаНерезидентов", "16");
	КодыВидовДоходов.Вставить("ПодарокСтраховаяВыплата", "17");
	КодыВидовДоходов.Вставить("ПродажаИмущества", "18");
	КодыВидовДоходов.Вставить("ВыигрышЭкономияНаПроцентахПаи", "19");
	КодыВидовДоходов.Вставить("ИнойДоход_Нерезидентов", "20");
	КодыВидовДоходов.Вставить("Дивиденды_Нерезидентов", "21");
	КодыВидовДоходов.Вставить("ДивидендыПубличныхКомпаний_Нерезидентов", "22");
	КодыВидовДоходов.Вставить("ПроцентПоОблигациямСИпотечнымПокрытием", "23");
	КодыВидовДоходов.Вставить("ДоходПоЦенымБумагамИностранногоДержателя", "24");
	КодыВидовДоходов.Вставить("ИнойДоходПоИнойСтавке", "25");
	
	Возврат КодыВидовДоходов;
	
КонецФункции

Функция НалоговыеСтавки2022()
	
	ВидыДоходов = КодыВидовДоходов2022();
	
	НалоговыеСтавки = Новый Соответствие;
	НалоговыеСтавки.Вставить(ВидыДоходов.Дивиденды, "13/15"); // 01
	НалоговыеСтавки.Вставить(ВидыДоходов.ВыигрышиВЛотереяхАзартныхИграх, "13/15"); // 02
	НалоговыеСтавки.Вставить(ВидыДоходов.ОперацииСЦеннымиБумагами, "13/15"); // 03
	НалоговыеСтавки.Вставить(ВидыДоходов.ПроцентПоОблигациям, "13/15"); // 04
	НалоговыеСтавки.Вставить(ВидыДоходов.ПрибыльКИК, "13/15"); // 05
	НалоговыеСтавки.Вставить(ВидыДоходов.ФиксированнаяПрибыльКИК, "13/15"); // 06
	НалоговыеСтавки.Вставить(ВидыДоходов.ПредпринимательскаяДеятельность, "13/15"); // 07
	НалоговыеСтавки.Вставить(ВидыДоходов.СдачаИмуществаВАренду, "13/15"); // 08
	НалоговыеСтавки.Вставить(ВидыДоходов.ОперацииСКриптовалютой, "13/15"); // 09
	НалоговыеСтавки.Вставить(ВидыДоходов.ИнойДоходПоПрогрессивнойШкале, "13/15"); // 10
	НалоговыеСтавки.Вставить(ВидыДоходов.РаспределениеПрибылиИностраннойСтруктуры, "13/15"); // 11
	НалоговыеСтавки.Вставить(ВидыДоходов.Роялти_ЗаПределамиРФ, "13/15"); // 12
	НалоговыеСтавки.Вставить(ВидыДоходов.БанковскиеПроценты_ЗаПределамиРФ, "13/15"); // 13
	НалоговыеСтавки.Вставить(ВидыДоходов.БанковскиеПроценты, "13/15"); // 14
	НалоговыеСтавки.Вставить(ВидыДоходов.БанковскиеПроценты_Нерезидентов, "13/15"); // 15
	НалоговыеСтавки.Вставить(ВидыДоходов.ОплатаТрудаНерезидентов, "13/15"); // 16
	НалоговыеСтавки.Вставить(ВидыДоходов.ПодарокСтраховаяВыплата, "13"); // 17
	НалоговыеСтавки.Вставить(ВидыДоходов.ПродажаИмущества, "13"); // 18
	НалоговыеСтавки.Вставить(ВидыДоходов.ВыигрышЭкономияНаПроцентахПаи, "35"); // 19
	НалоговыеСтавки.Вставить(ВидыДоходов.ИнойДоход_Нерезидентов, "30"); // 20
	НалоговыеСтавки.Вставить(ВидыДоходов.Дивиденды_Нерезидентов, "15"); // 21
	НалоговыеСтавки.Вставить(ВидыДоходов.ДивидендыПубличныхКомпаний_Нерезидентов, "5"); // 22
	НалоговыеСтавки.Вставить(ВидыДоходов.ПроцентПоОблигациямСИпотечнымПокрытием, "9"); // 23
	НалоговыеСтавки.Вставить(ВидыДоходов.ДоходПоЦенымБумагамИностранногоДержателя, "30"); // 24
	НалоговыеСтавки.Вставить(ВидыДоходов.ИнойДоходПоИнойСтавке, ""); // 25
	
	Возврат НалоговыеСтавки;
	
КонецФункции

Функция КБК2022()
	
	КБК = Новый Структура;
	КБК.Вставить("ДоходыПолученныеОтНалоговыхАгентов",       "18210102010011000110");
	КБК.Вставить("ДоходыОтПредпринимательскойДеятельности",  "18210102020011000110");
	КБК.Вставить("ДоходыПриПолученииКоторыхНеУдержанНалог",  "18210102030011000110");
	КБК.Вставить("ФиксированныеПлатежиИностранныхГраждан",   "18210102040011000110");
	КБК.Вставить("ДоходыВВидеБанковскихПроцентов",           "18210102060011000110");
	КБК.Вставить("ДоходыВВидеПроцентовПоОблигациям",         "18210102070011000110");
	КБК.Вставить("ДоходыОблагаемыеПоПовышеннойСтавке",       "18210102080011000110");
	
	КБК.Вставить("ДоходыСПрибылиКИК",                        "18210102050011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОсобыйПорядокУплаты",                             "18210102090011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавке",                    "18210102100011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавкеОсобыйПорядокУплаты", "18210102110011000110");
	
	КБК.Вставить("НалогПоПовышеннойСтавкеНаОснованииУведомления", "18210102120011000110");
	
	Возврат КБК;
	
КонецФункции

Функция КодыВидовДоходаДляСтандартныхСоциальныхИмущественногоВычетов2022()
	
	ВсеКодыВидовДоходов = КодыВидовДоходов2022();
	
	КодыВидовДохода = Новый Массив;
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ПредпринимательскаяДеятельность); // 06
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ПроцентПоОблигациям); // 07
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.СдачаИмуществаВАренду); // 08
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ОперацииСКриптовалютой); // 09
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ИнойДоходПоПрогрессивнойШкале); // 10
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.РаспределениеПрибылиИностраннойСтруктуры); // 11
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.Роялти_ЗаПределамиРФ); // 12
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.БанковскиеПроценты_ЗаПределамиРФ); // 13
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.БанковскиеПроценты); // 14
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ПодарокСтраховаяВыплата); // 17
	КодыВидовДохода.Добавить(ВсеКодыВидовДоходов.ПродажаИмущества); // 18
	
	Возврат КодыВидовДохода;
	
КонецФункции

Функция ВидыВычетов2022()
	
	ВидыВычетов = Новый Структура;
	
	// Приложение 2
	ВидыВычетов.Вставить("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", "СуммаРубСтоимостиИмуществаПриЛиквидацииКИК");
	ВидыВычетов.Вставить("СуммаРубЦенныеБумагиКИК", "СуммаРубЦенныеБумагиКИК");
	ВидыВычетов.Вставить("СуммаРубДивидендыКИК", "СуммаРубДивидендыКИК");
	
	// Приложение 3
	ВидыВычетов.Вставить("ОбщаяСуммаПрофессиональныхВычетов", "ОбщаяСуммаПрофессиональныхВычетов");
	ВидыВычетов.Вставить("ОбщаяСуммаВычетаИП", "ОбщаяСуммаВычетаИП");
	
	// Приложение 4
	ВидыВычетов.Вставить("СуммаДоходовНеПодлежащаяНалогообложению", "СуммаДоходовНеПодлежащаяНалогообложению");
	
	// Приложение 5
	ВидыВычетов.Вставить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами");
	ВидыВычетов.Вставить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами");
	ВидыВычетов.Вставить("ОбщаяСуммаСтандартныхСоциальныхВычетов", "ОбщаяСуммаСтандартныхСоциальныхВычетов");

	ВидыВычетов.Вставить("ИнвестиционныйВычет", "ИнвестиционныйВычет");
	ВидыВычетов.Вставить("ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке", "ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке");
	
	// Приложение 6
	ВидыВычетов.Вставить("ОбщаяСуммаИмущественногоВычета", "ОбщаяСуммаИмущественногоВычета");
	
	// Приложение 7
	ВидыВычетов.Вставить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы");
	ВидыВычетов.Вставить("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы", "СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы");
	ВидыВычетов.Вставить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты");
	ВидыВычетов.Вставить("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты", "СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты");
	ВидыВычетов.Вставить("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "СуммаРасходовНаПриобретениеНедвижимостиКВычету");
	ВидыВычетов.Вставить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "СуммаПроцентовПоКредитуНаНедвижимостьКВычету");
	
	// Приложение 8
	ВидыВычетов.Вставить("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "ЦенныеБумагиСуммаРасходовУменьшающаяДоходы");
	ВидыВычетов.Вставить("ЦенныеБумагиСуммаУбытка", "ЦенныеБумагиСуммаУбытка");
	ВидыВычетов.Вставить("ЦенныеБумагиСуммаПрибылиКВычету", "ЦенныеБумагиСуммаПрибылиКВычету");
	ВидыВычетов.Вставить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	Возврат ВидыВычетов;
	
КонецФункции

Функция ВидыСтандартныхСоциальныхИмущественныхВычетов2022()
	
	ВсеВидыВычетов = ВидыВычетов2022();
	
	ВидыВычетов = Новый Массив;
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ИнвестиционныйВычет);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаРасходовНаПриобретениеНедвижимостиКВычету);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаПроцентовПоКредитуНаНедвижимостьКВычету);
	
	Возврат ВидыВычетов;
	
КонецФункции

Функция ВидыВычетовУменьшающиеБазуИмущественногоВычета2022()
	
	ВсеВидыВычетов = ВидыВычетов2022();
	
	ВидыВычетов = Новый Массив;
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.ОбщаяСуммаВычетаИП);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ОбщаяСуммаПрофессиональныхВычетов);
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаДоходовНеПодлежащаяНалогообложению);
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ИнвестиционныйВычет);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке);
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.ОбщаяСуммаИмущественногоВычета);
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы);

	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты);
	ВидыВычетов.Добавить(ВсеВидыВычетов.СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты);

	ВидыВычетов.Добавить(ВсеВидыВычетов.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ЦенныеБумагиСуммаУбытка);
	
	ВидыВычетов.Добавить(ВсеВидыВычетов.ЦенныеБумагиСуммаПрибылиКВычету);
	ВидыВычетов.Добавить(ВсеВидыВычетов.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету);
	
	Возврат ВидыВычетов;
	
КонецФункции

Функция СвойстваПоказателей2022(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКИП", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
													|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБКПредпринимательскаяДеятельность"], УникальныйИдентификатор);
	
	// Приложение к Разделу 1
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКПереплата", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
															|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКВозврат", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
														|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакЗачета", КлючиПоказателей, 1, , НСтр("ru = 'Признак зачета налога';
													|en = 'Признак зачета налога'"), КоллекцияСписковВыбора["ПризнакЗачета"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидСчетаВозврат", КлючиПоказателей, 2, , НСтр("ru = 'Код вида счета';
														|en = 'Код вида счета'"), КоллекцияСписковВыбора["КодВидаСчета"], УникальныйИдентификатор);
	
	// Раздел 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
												|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	// Приложение 1
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
														|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходовРФ"], УникальныйИдентификатор);
	
	// Приложение 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ", КлючиПоказателей, 1, , НСтр("ru = 'Код вида освобождения от налогообложения';
																						|en = 'Код вида освобождения от налогообложения'"), КоллекцияСписковВыбора["КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта';
																	|en = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "СпособПриобретенияНедвижимости", КлючиПоказателей, 1, ,
		НСтр("ru = 'Способы приобретения жилого дома';
			|en = 'Способы приобретения жилого дома'"), КоллекцияСписковВыбора["СпособыПриобретенияНедвижимости"], УникальныйИдентификатор);
	
	// Расчет к Приложению 5
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "ПризнакУпрощенногоПорядкаВычетаИИС", КлючиПоказателей, 1, ,
		НСтр("ru = 'Признак предоставления вычета в упрощенном порядке';
			|en = 'Признак предоставления вычета в упрощенном порядке'"), КоллекцияСписковВыбора["ПризнакУпрощенногоПорядкаВычетаИИС"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность2022()
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	// Раздел 1
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалога");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаВозвратаНалога");
	
	// Приложение к Разделу 1
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ФамилияВозврат");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ИмяВозврат");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОтчествоВозврат");
	
	// Раздел 2
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходовПодлежащаяНалогообложению");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалоговыхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаРасходов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("НалоговаяБаза");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалоговойБазыПоОсновнойПоСтавке");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалоговойБазыПоПовышеннойСтавке");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаИныхНалоговыхБаз");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИсчисленная");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаУдержанная");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаУдержаннаяПоПовышеннойСтавке");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаТорговогоСбора");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаФиксированныхАвансовыхПлатежей");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаИностранногоГосударства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПСН");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяУплате");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаПодлежащаяВозврату");
	
	// Приложение 3
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаДоходаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВычетаИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаУплаченныхАвансовыхПлатежейИП");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ГодРегистрацииФермерскогоХозяйства");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированнойНалоговойБазы");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаСкорректированногоНалога");
	
	// Приложение 7
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЧислитель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ДоляВПравеСобственностиЗнаменатель");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость");
	
	// Приложение 5
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСоциальныхВычетовБезОграничения");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаСтандартныхСоциальныхВычетов");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция СвойстваРазделовДекларации2022(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Ложь;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 8;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1Приложение";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 6;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 1;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 20;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 9;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 4;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция ДеревоСтраницОтчета2022()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьТитульныйЛист(ДеревоСтраницОтчета);
	
	КоличествоРазделов = КоличествоРазделов2022();
	РазделыСПриложениями = РазделыСПриложениями2022();
	
	Для НомерРаздела = 1 По КоличествоРазделов Цикл
		ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела);
		
		// Также добавим приложения к разделу, в декларации они следуют сразу после раздела
		ПриложенияКРазделу = РазделыСПриложениями.Получить(НомерРаздела);
		Если ПриложенияКРазделу <> Неопределено Тогда
			Для Каждого НомерПриложения Из ПриложенияКРазделу Цикл
				ДобавитьПриложениеКРазделу(ДеревоСтраницОтчета, НомерРаздела, НомерПриложения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПриложений = КоличествоПриложений2022();
	ПриложенияСПродолжением = ПриложенияСПродолжением2022();
	ПриложенияСРасчетами = ПриложенияСРасчетами2022();
	
	Для НомерПриложения = 1 По КоличествоПриложений Цикл
		ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения);
		Если ПриложенияСПродолжением.Найти(НомерПриложения) <> Неопределено Тогда
			ДобавитьПродолжениеПриложения(ДеревоСтраницОтчета, НомерПриложения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерПриложения Из ПриложенияСРасчетами Цикл
		ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция КоличествоРазделов2022()
	
	Возврат 2;
	
КонецФункции

Функция РазделыСПриложениями2022()
	
	РазделыСПриложениями = Новый Соответствие;
	
	ПриложенияКРазделу1 = Новый Массив;
	ПриложенияКРазделу1.Добавить(0);
	
	РазделыСПриложениями.Вставить(1, ПриложенияКРазделу1);
	
	Возврат РазделыСПриложениями;
	
КонецФункции

Функция КоличествоПриложений2022()
	
	Возврат 8;
	
КонецФункции

Функция ПриложенияСРасчетами2022()
	
	Результат = Новый Массив;
	Результат.Добавить(1);
	Результат.Добавить(5);
	
	Возврат Результат;
	
КонецФункции

Функция ПриложенияСПродолжением2022()
	
	Результат = Новый Массив;
	Результат.Добавить(3);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2022()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить(ИмяРаздела(1), "П000100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложенияКРазделу(1), "П002100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(1), "П000300001");
	ИдентификаторыМногострочных.Вставить(ИмяРасчетаКПриложению(1), "П001900001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(8), "П001200001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2022()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложенияКРазделу(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(5), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(7), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(8), СтруктураМногостраничныхРазделов);
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2022()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложенияКРазделу(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция НоваяСтруктураТитульногоЛиста2022()
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ДатаПодписи", "");
	СтруктураРаздела.Вставить("Период", "");
	СтруктураРаздела.Вставить("ОтчетГод", "");
	СтруктураРаздела.Вставить("КодИМНС", "");
	СтруктураРаздела.Вставить("НомерКорректировки", "0");
	
	СтруктураРаздела.Вставить("ПоМесту", "");
	СтруктураРаздела.Вставить("СтатусНалогоплательщика", "");
	СтруктураРаздела.Вставить("АдресЗаПределамиРФ", "");
	СтруктураРаздела.Вставить("ТелОрганизации", "");
	
	СтруктураРаздела.Вставить("Фамилия", "");
	СтруктураРаздела.Вставить("Имя", "");
	СтруктураРаздела.Вставить("Отчество", "");
	
	СтруктураРаздела.Вставить("ИНН", "");
	СтруктураРаздела.Вставить("ДатаРождения", "");
	СтруктураРаздела.Вставить("КодСтраны", "");
	
	СтруктураРаздела.Вставить("КодВидаДокумента", "");
	СтруктураРаздела.Вставить("СерияИНомерДокумента", "");
	
	СтруктураРаздела.Вставить("ПрПодп", "1");
	СтруктураРаздела.Вставить("ДокУпПред", "");
	
	СтруктураРаздела.Вставить("ОргПодписантФамилия", "");
	СтруктураРаздела.Вставить("ОргПодписантИмя", "");
	СтруктураРаздела.Вставить("ОргПодписантОтчество", "");
	
	Возврат СтруктураРаздела;
	
КонецФункции

Функция НоваяТаблицаДанныхЗаполнения2022()
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("ВидДохода", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ДанныеЗаполнения.Колонки.Добавить("НалоговаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ДанныеЗаполнения.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаполнения.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ДанныеЗаполнения.Колонки.Добавить("СтруктураДанных", Новый ОписаниеТипов("Структура"));
	ДанныеЗаполнения.Колонки.Добавить("СуммаОблагаемогоДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаИсчисленная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеЗаполнения.Колонки.Добавить("СуммаНалогаУплаченнаяУдержанная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеРеглОтчета2022(Период, ДанныеОтчета, ВыбраннаяФорма)
	
	ТаблицаДанныхРеглОтчета = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	
	ПризнакУплата = ПризнакиУплатыВозврата(ВыбраннаяФорма).Уплата;
	
	УплаченныеАвансы = 0;
	КБКИП = "";
	ОКТМО = "";
	
	ДанныеПриложения3 = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Приложение3");
	Для Каждого СтрокаПриложения3 Из ДанныеПриложения3 Цикл
		Если ЗначениеЗаполнено(СтрокаПриложения3.СуммаУплаченныхАвансовыхПлатежейИП) Тогда
			УплаченныеАвансы = УплаченныеАвансы + СтрокаПриложения3.СуммаУплаченныхАвансовыхПлатежейИП;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДекларации = ПрочитатьДанныеДекларации(ДанныеОтчета, ВыбраннаяФорма, "Раздел1");
	Для Каждого СтрокаДекларации Из ДанныеДекларации Цикл
		
		Если ЗначениеЗаполнено(СтрокаДекларации.КБК) И ЗначениеЗаполнено(СтрокаДекларации.ОКТМО) Тогда
			
			Если СтрокаДекларации.СуммаНалога > 0 Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБК,
					СтрокаДекларации.ОКТМО,
					СтрокаДекларации.СуммаНалога,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
			Если СтрокаДекларации.СуммаВозвратаНалога > 0 Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБК,
					СтрокаДекларации.ОКТМО,
					- СтрокаДекларации.СуммаВозвратаНалога,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДекларации.КБКИП) Тогда
			
			Если ЗначениеЗаполнено(СтрокаДекларации.ОКТМОИП1Квартал) Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБКИП,
					СтрокаДекларации.ОКТМОИП1Квартал,
					СтрокаДекларации.СуммаНалогаИПКУплате1Квартал,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДекларации.ОКТМОИППолугодие) Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБКИП,
					СтрокаДекларации.ОКТМОИППолугодие,
					СтрокаДекларации.СуммаНалогаИПКУплатеПолугодие - СтрокаДекларации.СуммаНалогаИПКУменьшениюПолугодие,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДекларации.ОКТМОИП9Месяцев) Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБКИП,
					СтрокаДекларации.ОКТМОИП9Месяцев,
					СтрокаДекларации.СуммаНалогаИПКУплате9Месяцев - СтрокаДекларации.СуммаНалогаИПКУменьшению9Месяцев,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДекларации.ОКТМОИПГод) Тогда
				ДобавитьДанныеРеглОтчетаВТаблицу(
					Период,
					СтрокаДекларации.КБКИП,
					СтрокаДекларации.ОКТМОИПГод,
					СтрокаДекларации.СуммаНалогаИПКУплатеГод - СтрокаДекларации.СуммаНалогаИПКУменьшениюГод,
					ТаблицаДанныхРеглОтчета,
					ВыбраннаяФорма);
			КонецЕсли;
			
			// В случае прогрессивной шкалы доход ИП разделяется на соответствующие КБК по виду налога.
			// Вычитываем авансы по начисленному налогу для текущей страницы.
			
			ИтогоПоСтроке = СтрокаДекларации.СуммаНалогаИПКУплате1Квартал
				+ СтрокаДекларации.СуммаНалогаИПКУплатеПолугодие - СтрокаДекларации.СуммаНалогаИПКУменьшениюПолугодие
				+ СтрокаДекларации.СуммаНалогаИПКУплате9Месяцев - СтрокаДекларации.СуммаНалогаИПКУменьшению9Месяцев
				+ СтрокаДекларации.СуммаНалогаИПКУплатеГод - СтрокаДекларации.СуммаНалогаИПКУменьшениюГод;
			
			АвансовПоСтроке = Мин(УплаченныеАвансы, ИтогоПоСтроке);
			УплаченныеАвансы = УплаченныеАвансы - АвансовПоСтроке;
			КБКИП = СтрокаДекларации.КБКИП;
			ОКТМО = СтрокаДекларации.ОКТМОИПГод;
			
			ДобавитьДанныеРеглОтчетаВТаблицу(Период, КБКИП, ОКТМО, -АвансовПоСтроке, ТаблицаДанныхРеглОтчета, ВыбраннаяФорма);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если УплаченныеАвансы > 0 Тогда
		ДобавитьДанныеРеглОтчетаВТаблицу(Период, КБКИП, ОКТМО, -УплаченныеАвансы, ТаблицаДанныхРеглОтчета, ВыбраннаяФорма);
	КонецЕсли;
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

#КонецОбласти

#Область Форма2023кв1

Функция РеквизитыФормыОтчета2023()
	
	РеквизитыФормы = РеквизитыФормы2023();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2023()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2022, 09, 29);
	РеквизитыФормы.НомерПриказа = "ЕД-7-11/880@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2022, 1, 1);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2023кв1";
	
	Если ОбщегоНазначения.ТекущаяДатаПользователя() < '20240101' Тогда
		// До 01.01.2024 нужно подавать декларацию по старой форме
		РеквизитыФормы.ДатаОкончанияДействия = Дата(2023, 12, 31);
	Иначе
		РеквизитыФормы.ДатаОкончанияДействия = Дата(2022, 12, 31);
	КонецЕсли;
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2023()
	
	РеквизитыФормы = РеквизитыФормы2023();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.17";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2023(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2022();
	РеквизитыФормата = РеквизитыФормата2022();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2023кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2023";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Ложь;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2023()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция СтруктураМногостраничныхРазделов2023()
	
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРаздела(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(1), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(2), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПродолженияПриложения(3), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяРасчетаКПриложению(5), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(7), СтруктураМногостраничныхРазделов);
	ДобавитьМногостраничныйРазделВСтруктуру(ИмяПриложения(8), СтруктураМногостраничныхРазделов);
	
	Возврат СтруктураМногостраничныхРазделов;
	
КонецФункции

Функция ДеревоСтраницОтчета2023()
	
	ДеревоСтраницОтчета = НовыйДеревоСтраницОтчета();
	
	ДобавитьТитульныйЛист(ДеревоСтраницОтчета);
	
	КоличествоРазделов = КоличествоРазделов2022();
	РазделыСПриложениями = РазделыСПриложениями2022();
	
	Для НомерРаздела = 1 По КоличествоРазделов Цикл
		ДобавитьРаздел(ДеревоСтраницОтчета, НомерРаздела);
		
		// Также добавим приложения к разделу, в декларации они следуют сразу после раздела
		ПриложенияКРазделу = РазделыСПриложениями.Получить(НомерРаздела);
		Если ПриложенияКРазделу <> Неопределено Тогда
			Для Каждого НомерПриложения Из ПриложенияКРазделу Цикл
				ДобавитьПриложениеКРазделу(ДеревоСтраницОтчета, НомерРаздела, НомерПриложения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПриложений = КоличествоПриложений2022();
	ПриложенияСПродолжением = ПриложенияСПродолжением2023();
	ПриложенияСРасчетами = ПриложенияСРасчетами2022();
	
	Для НомерПриложения = 1 По КоличествоПриложений Цикл
		ДобавитьПриложение(ДеревоСтраницОтчета, НомерПриложения);
		Если ПриложенияСПродолжением.Найти(НомерПриложения) <> Неопределено Тогда
			ДобавитьПродолжениеПриложения(ДеревоСтраницОтчета, НомерПриложения, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерПриложения Из ПриложенияСРасчетами Цикл
		ДобавитьРасчетКПриложению(ДеревоСтраницОтчета, НомерПриложения);
	КонецЦикла;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СвойстваРазделовДекларации2023(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Ложь;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 8;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1Приложение";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 9;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 4;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Продолжение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3Продолжение";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 1;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Продолжение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Продолжение";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 20;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция КлючиПоказателейДекларации2023(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2023(ИмяРаздела);
	
	КлючиПоказателей = НовыеКлючиПоказателейДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		ДобавитьКлючПоказателя("КБК", "Раздел1", "П000100001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМО", "Раздел1", "П000100001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалога", "Раздел1", "П000100001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВозвратаНалога", "Раздел1", "П000100001050", СвойстваРазделовДекларации, КлючиПоказателей);
	
		ДобавитьКлючПоказателя("КБКИП", "Раздел1", "П000100001060", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП1Квартал", "Раздел1", "П000100001070", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате1Квартал", "Раздел1", "П000100001080", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИППолугодие", "Раздел1", "П000100001090", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеПолугодие", "Раздел1", "П000100001100", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюПолугодие", "Раздел1", "П000100001110", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИП9Месяцев", "Раздел1", "П000100001120", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплате9Месяцев", "Раздел1", "П000100001130", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшению9Месяцев", "Раздел1", "П000100001140", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ОКТМОИПГод", "Раздел1", "П000100001150", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУплатеГод", "Раздел1", "П000100001160", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("СуммаНалогаИПКУменьшениюГод", "Раздел1", "П000100001170", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		ДобавитьКлючПоказателя("СуммаВозврат", "Раздел1Приложение", "П002100001010", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("БИКВозврат", "Раздел1Приложение", "П002100001020", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("ВидСчетаВозврат", "Раздел1Приложение", "П002100001030", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("НомерСчетаВозврат", "Раздел1Приложение", "П002100001040", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		ДобавитьКлючПоказателя("ВидДохода", "Раздел2", "П000200001001", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходов", "Раздел2", "П000200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", "Раздел2", "П000200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", "Раздел2", "П000200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговыхВычетов", "Раздел2", "П000200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходов", "Раздел2", "П000200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБаза", "Раздел2", "П000200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговойБазыПоОсновнойПоСтавке", "Раздел2", "П000200001061", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалоговойБазыПоПовышеннойСтавке", "Раздел2", "П000200001062", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИныхНалоговыхБаз", "Раздел2", "П000200001063", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленная", "Раздел2", "П000200001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержанная", "Раздел2", "П000200001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяПоПовышеннойСтавке", "Раздел2", "П000200001081", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды", "Раздел2", "П000200001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаТорговогоСбора", "Раздел2", "П000200001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаФиксированныхАвансовыхПлатежей", "Раздел2", "П000200001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИностранногоГосударства", "Раздел2", "П000200001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПСН", "Раздел2", "П000200001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяУплате", "Раздел2", "П000200001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаПодлежащаяВозврату", "Раздел2", "П000200001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаВозвращеннаяВУпрощенномПорядке", "Раздел2", "П000200001170", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		ДобавитьКлючПоказателя("КодВидаДоходаРФ", "Приложение1", "П000300001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаРФ", "Приложение1", "П000300001020", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИННИсточникаДоходаРФ", "Приложение1", "П000300001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИсточникаДоходаРФ", "Приложение1", "П000300001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКТМОИсточникаДоходаРФ", "Приложение1", "П000300001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаРФ", "Приложение1", "П000300001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СуммаДоходаРФ", "Приложение1", "П000300001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУдержаннаяРФ", "Приложение1", "П000300001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		ДобавитьКлючПоказателя("ОКСМДоходаЗаПределамиРФ", "Приложение2", "П000400001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОКСМСтраныЗачисленияДоходаЗаПределамиРФ", "Приложение2", "П000400001011", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИсточникаДоходаЗаПределамиРФ", "Приложение2", "П000400001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВалютаДоходаЗаПределамиРФ", "Приложение2", "П000400001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаДоходаЗаПределамиРФ", "Приложение2", "П000400001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерКИК", "Приложение2", "П000400001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаПолученияДоходаЗаПределамиРФ", "Приложение2", "П000400001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", "Приложение2", "П000400001041", СвойстваРазделовДекларации, КлючиПоказателей, Истина);
		ДобавитьКлючПоказателя("КурсНаДатуДоходаЗаПределамиРФ", "Приложение2", "П000400001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаЗаПределамиРФ", "Приложение2", "П000400001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРубДоходаЗаПределамиРФ", "Приложение2", "П000400001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаОсвобождаемогоОтНалогообложенияЗаПределамиРФ", "Приложение2", "П000400001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ", "Приложение2", "П000400001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПорядокОпределенияПрибылиУбыткаКИК", "Приложение2", "П000400001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", "Приложение2", "П000400001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", "Приложение2", "П000400001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК", "Приложение2", "П000400001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", "Приложение2", "П000400001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПодлежащаяЗачетуВРФ", "Приложение2", "П000400001170", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		ДобавитьКлючПоказателя("КодВидаДеятельностиИП", "Приложение3", "П000500001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходаИП", "Приложение3", "П000500001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовИП", "Приложение3", "П000500001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальныеРасходыИП", "Приложение3", "П000500001041", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АмортизацияИП", "Приложение3", "П000500001042", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЗарплатаИП", "Приложение3", "П000500001043", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрочиеРасходыИП", "Приложение3", "П000500001044", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаДоходаИП", "Приложение3", "П000500001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИП", "Приложение3", "П000500001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", "Приложение3", "П000500001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ГодРегистрацииФермерскогоХозяйства", "Приложение3", "П000500001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированнойНалоговойБазы", "Приложение3", "П000500001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСкорректированногоНалога", "Приложение3", "П000500001100", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("КодИсточникаДоходаПрофессиональныхВычетов", "Приложение3", "П000500001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовПоДоговорамГПХ", "Приложение3", "П000500001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ФактическийРасходАвторскоеВознаграждение", "Приложение3", "П000500001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НормативныйРасходАвторскоеВознаграждение", "Приложение3", "П000500001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПрофессиональныхВычетов", "Приложение3", "П000500001150", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Продолжение" Тогда
		ДобавитьКлючПоказателя("ДоходыИП1Квартал", "Приложение3Продолжение", "П002000001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИППолугодие", "Приложение3Продолжение", "П002000001161", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходыИП9Месяцев", "Приложение3Продолжение", "П002000001162", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП1Квартал", "Приложение3Продолжение", "П002000001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИППолугодие", "Приложение3Продолжение", "П002000001171", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПрофВычетИП9Месяцев", "Приложение3Продолжение", "П002000001172", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП1Квартал", "Приложение3Продолжение", "П002000001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИППолугодие", "Приложение3Продолжение", "П002000001181", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетИП9Месяцев", "Приложение3Продолжение", "П002000001182", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП1Квартал", "Приложение3Продолжение", "П002000001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИППолугодие", "Приложение3Продолжение", "П002000001191", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НалоговаяБазаИП9Месяцев", "Приложение3Продолжение", "П002000001192", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП1Квартал", "Приложение3Продолжение", "П002000001200", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИППолугодие", "Приложение3Продолжение", "П002000001201", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АвансовыйПлатежИП9Месяцев", "Приложение3Продолжение", "П002000001202", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		ДобавитьКлючПоказателя("МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению", "Приложение4", "П000600001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПодарковНеПодлежащаяНалогообложению", "Приложение4", "П000600001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовНеПодлежащаяНалогообложению", "Приложение4", "П000600001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению", "Приложение4", "П000600001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению", "Приложение4", "П000600001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению", "Приложение4", "П000600001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению", "Приложение4", "П000600001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", "Приложение4", "П000600001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("МатериальнаяПомощьСтудентамНеПодлежащаяНалогообложению", "Приложение4", "П000600001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВзносыРаботодателяНеПодлежащиеНалогообложению", "Приложение4", "П000600001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИныеДоходыНеПодлежащиеНалогообложению", "Приложение4", "П000600001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", "Приложение4", "П000600001120", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_1", "Приложение5", "П000900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетПо218_1_2", "Приложение5", "П000900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетей", "Приложение5", "П000900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейЕдинственномуРодителю", "Приложение5", "П000900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидов", "Приложение5", "П000900001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю", "Приложение5", "П000900001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5", "П000900001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхВычетов", "Приложение5", "П000900001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("СоциальныйВычетПожертвования", "Приложение5", "П000900001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеДетей", "Приложение5", "П000900001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетДорогостоящееЛечение", "Приложение5", "П000900001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", "Приложение5", "П000900001120", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Продолжение" Тогда
		
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5Продолжение", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбычноеЛечение", "Приложение5Продолжение", "П000900001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедикаменты", "Приложение5Продолжение", "П000900001141", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетМедицинскоеСтрахование", "Приложение5Продолжение", "П000900001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", "Приложение5Продолжение", "П000900001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыНаПрохождениеНезависимойОценкиКвалификации", "Приложение5Продолжение", "П000900001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетЗаФитнес", "Приложение5Продолжение", "П000900001171", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", "Приложение5Продолжение", "П000900001180", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", "Приложение5Продолжение", "П000900001181", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", "Приложение5Продолжение", "П000900001190", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", "Приложение5Продолжение", "П000900001200", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИнвестиционныйВычет", "Приложение5Продолжение", "П000900001210", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетКВосстановлению", "Приложение5Продолжение", "П000900001220", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИнвестиционныйВычетПредоставленныйВУпрощенномПорядке", "Приложение5Продолжение", "П000900001230", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости", "Приложение6", "П000800001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаЖилойНедвижимости", "Приложение6", "П000800001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаДолиЖилойНедвижимости", "Приложение6", "П000800001040", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИнойНедвижимости", "Приложение6", "П000800001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИнойНедвижимости", "Приложение6", "П000800001060", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаИногоИмущества", "Приложение6", "П000800001070", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПродажаИногоИмущества", "Приложение6", "П000800001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("РасходыПродажаДолиУставногоКапитала", "Приложение6", "П000800001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыДолевоеСтроительство", "Приложение6", "П000800001150", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ИмущественныйВычетИзъятиеИмущества", "Приложение6", "П000800001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПриЛиквидацииКИК", "Приложение6", "П000800001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ИмущественныйВычетПродажаДолиКИК", "Приложение6", "П000800001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыПередачаИмущества", "Приложение6", "П000800001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РасходыСтоимостьДолиУставногоКапитала", "Приложение6", "П000800001140", СвойстваРазделовДекларации, КлючиПоказателей);
		
		ДобавитьКлючПоказателя("ОбщаяСуммаИмущественногоВычета", "Приложение6", "П000800001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		
		ДобавитьКлючПоказателя("КодНаименованияОбъектаНедвижимости", "Приложение7", "П000700001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакНалогоплательщикаОбъектаНедвижимости", "Приложение7", "П000700001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СпособПриобретенияНедвижимости", "Приложение7", "П000700001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КодНомераОбъектаНедвижимости", "Приложение7", "П000700001031", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастровыйНомерОбъектаНедвижимости", "Приложение7", "П000700001032", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("АдресОбъектаНедвижимости", "Приложение7", "П000700001033", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаАктаОПередачеОбъектаНедвижимости", "Приложение7", "П000700001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЖилье", "Приложение7", "П000700001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", "Приложение7", "П000700001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", "Приложение7", "П000700001070_1", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", "Приложение7", "П000700001070_3", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимости", "Приложение7", "П000700001080", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", "Приложение7", "П000700001090", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Итоги
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", "Приложение7", "П000700001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", "Приложение7", "П000700001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы", "Приложение7", "П000700001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеРасходы", "Приложение7", "П000700001121", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты", "Приложение7", "П000700001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаИмущественногоВычетаПредоставленногоВУпрощенномПорядкеПроценты", "Приложение7", "П000700001131", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", "Приложение7", "П000700001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", "Приложение7", "П000700001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", "Приложение7", "П000700001160", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", "Приложение7", "П000700001170", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", "Приложение7", "П000700001180", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		ДобавитьКлючПоказателя("ЦенныеБумагиВидОперации", "Приложение8", "П001200001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаДохода", "Приложение8", "П001200001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", "Приложение8", "П001200001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", "Приложение8", "П001200001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиПризнакУчетаУбытков", "Приложение8", "П001200001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиУчетУбытковВидОперации", "Приложение8", "П001200001051", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаУбытка", "Приложение8", "П001200001052", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", "Приложение8", "П001200001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", "Приложение8", "П001200001070", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		ДобавитьКлючПоказателя("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", "Приложение1Расчет", "П001900001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьГодРегистрации", "Приложение1Расчет", "П001900001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиЦенаДоговора", "Приложение1Расчет", "П001900001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КадастроваяСтоимостьКоэффициент", "Приложение1Расчет", "П001900001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДоходПродажиНалогооблагаемый", "Приложение1Расчет", "П001900001050", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		
		// Расчет сумм, принимаемых к вычету
		ДобавитьКлючПоказателя("ИННПенсионногоФонда", "Приложение5Расчет", "П001000001010", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КПППенсионногоФонда", "Приложение5Расчет", "П001000001020", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ВидДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001021", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеПенсионногоФонда", "Приложение5Расчет", "П001000001030", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001040", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораПенсионногоОбеспечения", "Приложение5Расчет", "П001000001050", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СуммаВзносовПенсионныйФондКВычету", "Приложение5Расчет", "П001000001060", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СтраховыеВзносыНаПенсиюКВычету", "Приложение5Расчет", "П001000001070", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Общая сумма взносов, принимаемая к вычету
		ДобавитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
		
		// Расчет суммы денежных средств, внесенных на индивидуальный инвестиционный счет, принимаемых к вычету
		ДобавитьКлючПоказателя("ИННИИС", "Приложение5Расчет", "П001000001090", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("КППИИС", "Приложение5Расчет", "П001000001100", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НаименованиеИИС", "Приложение5Расчет", "П001000001110", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаДоговораИИС", "Приложение5Расчет", "П001000001120", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("НомерДоговораИИС", "Приложение5Расчет", "П001000001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДатаОткрытияИИС", "Приложение5Расчет", "П001000001140", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ОбщаяСуммаВычетаИИС", "Приложение5Расчет", "П001000001150", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакУпрощенногоПорядкаВычетаИИС", "Приложение5Расчет", "П001000001160", СвойстваРазделовДекларации, КлючиПоказателей);
		
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция СвойстваПоказателей2023(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКИП", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
													|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБКПредпринимательскаяДеятельность"], УникальныйИдентификатор);
	
	// Раздел 1 Приложение
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидСчетаВозврат", КлючиПоказателей, 2, , НСтр("ru = 'Код вида счета';
														|en = 'Код вида счета'"), КоллекцияСписковВыбора["КодВидаСчета"], УникальныйИдентификатор);
	
	// Раздел 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
												|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	// Приложение 1
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
														|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходовРФ"], УникальныйИдентификатор);
	
	// Приложение 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ", КлючиПоказателей, 1, , НСтр("ru = 'Код вида освобождения от налогообложения';
																						|en = 'Код вида освобождения от налогообложения'"), КоллекцияСписковВыбора["КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНомераОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код номера объекта';
																	|en = 'Код номера объекта'"), КоллекцияСписковВыбора["КодыНомеровНедвижимости"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "СпособПриобретенияНедвижимости", КлючиПоказателей, 1, ,
		НСтр("ru = 'Способы приобретения жилого дома';
			|en = 'Способы приобретения жилого дома'"), КоллекцияСписковВыбора["СпособыПриобретенияНедвижимости"], УникальныйИдентификатор);
	
	// Расчет к Приложению 5
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "ПризнакУпрощенногоПорядкаВычетаИИС", КлючиПоказателей, 1, ,
		НСтр("ru = 'Признак предоставления вычета в упрощенном порядке';
			|en = 'Признак предоставления вычета в упрощенном порядке'"), КоллекцияСписковВыбора["ПризнакУпрощенногоПорядкаВычетаИИС"], УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность2023()
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность2022();
	
	// Раздел 2
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СуммаНалогаВозвращеннаяВУпрощенномПорядке");
	
	// Приложение 5
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("СоциальныйВычетЗаФитнес");
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция ПриложенияСПродолжением2023()
	
	Результат = Новый Массив;
	Результат.Добавить(3);
	Результат.Добавить(5);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяФайлаСхемы2023(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_17_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция КБК2023()
	
	КБК = Новый Структура;
	КБК.Вставить("ДоходыПолученныеОтНалоговыхАгентов",       "18210102010011000110");
	КБК.Вставить("ДоходыОтПредпринимательскойДеятельности",  "18210102020011000110");
	КБК.Вставить("ДоходыПриПолученииКоторыхНеУдержанНалог",  "18210102030011000110");
	КБК.Вставить("ФиксированныеПлатежиИностранныхГраждан",   "18210102040011000110");
	КБК.Вставить("ДоходыВВидеБанковскихПроцентов",           "18210102060011000110");
	КБК.Вставить("ДоходыВВидеПроцентовПоОблигациям",         "18210102070011000110");
	КБК.Вставить("ДоходыОблагаемыеПоПовышеннойСтавке",       "18210102080011000110");
	
	КБК.Вставить("ДоходыСПрибылиКИК",                        "18210102050011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОсобыйПорядокУплаты",                             "18210102090011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавке",                    "18210102100011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавкеОсобыйПорядокУплаты", "18210102110011000110");
	
	КБК.Вставить("НалогПоПовышеннойСтавкеНаОснованииУведомления", "18210102120011000110");
	КБК.Вставить("ДоходыСДивидендов",                             "18210102130011000110");
	КБК.Вставить("ДоходыСДивидендовПоПовышеннойСтавке",           "18210102140011000110");
	
	Возврат КБК;
	
КонецФункции

#КонецОбласти

#Область Форма2024кв1

Функция РеквизитыФормыОтчета2024()
	
	РеквизитыФормы = РеквизитыФормы2024();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2024()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2023, 09, 11);
	РеквизитыФормы.НомерПриказа = "ЕД-7-11/615@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2023, 1, 1);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2024кв1";
	
	Если ОбщегоНазначения.ТекущаяДатаПользователя() < '20250101' Тогда
		// До 01.01.2025 нужно подавать декларацию по старой форме
		РеквизитыФормы.ДатаОкончанияДействия = Дата(2024, 12, 31);
	Иначе
		РеквизитыФормы.ДатаОкончанияДействия = Дата(2023, 12, 31);
	КонецЕсли;
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2024()
	
	РеквизитыФормы = РеквизитыФормы2024();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.18";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2024(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2022();
	РеквизитыФормата = РеквизитыФормата2022();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2024кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2024";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Ложь;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2022();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение8", ИдентификаторыМногострочныхГрупп[ИмяПриложения(8)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2024(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2023(ИмяРаздела);
	КлючиПоказателей = КлючиПоказателейДекларации2023(ИмяРаздела);
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		ДобавитьКлючПоказателя("РасходыПродажаИмущественныхПрав", "Приложение6", "П000800001155", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность2024()
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность2023();

	// Приложение 6
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("РасходыПродажаИмущественныхПрав");
	
	Возврат ПоказателиНеанализируемыеНаЗаполненность;
	
КонецФункции

Функция ИмяФайлаСхемы2024(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_18_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция РазмерыВычетов2024()
	
	РазмерыВычетов = Новый Структура;
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаДетей", Новый Структура);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПервыйРебенок", 1400);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ВторойРебенок", 1400);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ТретийРебенок", 3000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("РоднойИнвалид", 12000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПриемныйИнвалид", 6000);
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаНалогоплательщика", Новый Соответствие);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_1, 3000);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_2, 500);
	
	Возврат РазмерыВычетов;
	
КонецФункции

Функция ПределыВычетов2024(РазмерыВычетов)
	
	ПределыВычетов = Новый Структура;
	ПределыВычетов.Вставить("СоциальныеВычеты", 120000);
	ПределыВычетов.Вставить("ПожертвованияПроцентДохода", 0.25);
	ПределыВычетов.Вставить("ПожертвованияФондыПроцентДохода", 0.3);
	ПределыВычетов.Вставить("ВычетНаДетейДоходы", 350000);
	
	ВычетНаНалогоплательщика = СтандартныйВычетНаНалогоплательщика(РазмерыВычетов);
	
	// Предел стандартного вычета на налогоплательщика вычисляется из значения за месяц * 12 мес.
	Для Каждого ТекущийВычет Из ВычетНаНалогоплательщика Цикл
		ПределыВычетов.Вставить(ТекущийВычет.Ключ, ТекущийВычет.Значение * 12);
	КонецЦикла;
	
	ПределыВычетов.Вставить("ПродажаЖилойНедвижимости", 1000000);
	ПределыВычетов.Вставить("ПродажаИногоИмущества", 250000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиСтоимость", 2000000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиПроценты", 3000000);
	
	ПределыВычетов.Вставить("ИнвестиционныйВычет", 400000);
	
	Возврат ПределыВычетов;
	
КонецФункции

Функция КодыВидовДоговоровДобровольныхВзносов2024()
	
	КодыВидовДоговоров = Новый Структура;
	КодыВидовДоговоров.Вставить("ПенсионноеОбеспечение", "1");
	КодыВидовДоговоров.Вставить("ПенсионноеСтрахование", "2");
	КодыВидовДоговоров.Вставить("СтрахованиеЖизни", "3");
	
	Возврат КодыВидовДоговоров;
	
КонецФункции

Функция КодыНаименованияОбъектаНедвижимости2024()
	
	КодыОбъектаНедвижимости = Новый Структура;
	КодыОбъектаНедвижимости.Вставить("ЖилойДом", "1");
	КодыОбъектаНедвижимости.Вставить("Квартира", "2");
	КодыОбъектаНедвижимости.Вставить("Комната", "3");
	КодыОбъектаНедвижимости.Вставить("ДоляВКвартире", "4");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчастокПодСтроительство", "5");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчасток", "6");
	КодыОбъектаНедвижимости.Вставить("ЖилойДомСЗемельнымУчастком", "7");
	КодыОбъектаНедвижимости.Вставить("ДоляВЗемельномУчастке", "4");
	
	Возврат КодыОбъектаНедвижимости;
	
КонецФункции

Процедура ПроверитьСтраницуПриложения7_2024(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, КодыОбъектовНедвижимости)
	
	Если (ДанныеСтраницы.П000700001010 = КодыОбъектовНедвижимости.ЖилойДом
			Или ДанныеСтраницы.П000700001010 = КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком)
		И Не ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)';
							|en = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)'"), НомерСтраницы),
			"Приложение7",
			"П000700001030",
			НомерСтраницы);
		
	ИначеЕсли ДанныеСтраницы.П000700001010 <> КодыОбъектовНедвижимости.ЖилойДом
		И ДанныеСтраницы.П000700001010 <> КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком
		И ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кодов наименования объекта %2 и %3';
										|en = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кодов наименования объекта %2 и %3'"),
			НомерСтраницы,
			КодыОбъектовНедвижимости.ЖилойДом,
			КодыОбъектовНедвижимости.ЖилойДомСЗемельнымУчастком);
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			ТекстСообщения,
			"Приложение7",
			"П000700001030",
			НомерСтраницы);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтраницы.П000700001031) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан код номера объекта (31)';
							|en = 'На странице %1 Приложения 7 не указан код номера объекта (31)'"), НомерСтраницы),
			"Приложение7",
			"П000700001031",
			НомерСтраницы);
	ИначеЕсли ДанныеСтраницы.П000700001031 = "2" Тогда
		// Если отсутствует номер объекта, обязательно указывается его адрес
		Если ПустаяСтрока(ДанныеСтраницы.П000700001033) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указаны сведения о местонахождении объекта (33)';
								|en = 'На странице %1 Приложения 7 не указаны сведения о местонахождении объекта (33)'"), НомерСтраницы),
				"Приложение7",
				"П000700001033",
				НомерСтраницы);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ДанныеСтраницы.П000700001032) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан номер объекта (32)';
								|en = 'На странице %1 Приложения 7 не указан номер объекта (32)'"), НомерСтраницы),
				"Приложение7",
				"П000700001032",
				НомерСтраницы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения8_2024(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ПризнакиУчетаУбытков)
	
	НомерСтроки = 1;
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П001200001010_%1", НомерСтроки)) Цикл
		ИмяПоля = СтрШаблон("П001200001010_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указан код вида операции (10)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указан код вида операции (10)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("П001200001020_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указана сумма дохода (20)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указана сумма дохода (20)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		Строка051Заполнена = Ложь;
		СуммаСтрок052 = 0;
		НомерДопСтроки = 1;
		Пока ДанныеСтраницы.Свойство(СтрШаблон("П001200001051_%1_%2", НомерСтроки, НомерДопСтроки)) Цикл
			
			Если Не ПустаяСтрока(ДанныеСтраницы[СтрШаблон("П001200001051_%1_%2", НомерСтроки, НомерДопСтроки)]) Тогда
				Строка051Заполнена = Истина;
			КонецЕсли;
			
			СуммаСтрок052 = СуммаСтрок052 + ДанныеСтраницы[СтрШаблон("П001200001052_%1_%2", НомерСтроки, НомерДопСтроки)];
			НомерДопСтроки = НомерДопСтроки + 1;
			
		КонецЦикла;
		
		ИмяПоля = СтрШаблон("П001200001050_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 не указан признак учета убытков (50)';
								|en = 'На странице %1 Приложения 8 в строке %2 не указан признак учета убытков (50)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		ИначеЕсли ДанныеСтраницы[ИмяПоля] = ПризнакиУчетаУбытков.УбытокНеУчитывается
			И (Строка051Заполнена Или СуммаСтрок052 <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 в поле (50) указан признак учета убытков %3. Поля (51) и (52) в таком случае не заполняются';
								|en = 'На странице %1 Приложения 8 в строке %2 в поле (50) указан признак учета убытков %3. Поля (51) и (52) в таком случае не заполняются'"), НомерСтраницы, НомерСтроки, ДанныеСтраницы[ИмяПоля]),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ОбщаяСуммаРасходов =
			  ДанныеСтраницы[СтрШаблон("П001200001040_%1", НомерСтроки)]
			+ ДанныеСтраницы[СтрШаблон("П001200001060_%1", НомерСтроки)]
			+ ДанныеСтраницы[СтрШаблон("П001200001070_%1", НомерСтроки)]
			+ СуммаСтрок052;
		
		ИмяПоля = СтрШаблон("П001200001020_%1", НомерСтроки);
		Если ОбщаяСуммаРасходов > ДанныеСтраницы[ИмяПоля] Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в строке %2 сумма полей (40), (52), (60), (70) больше суммы в поле (20)';
								|en = 'На странице %1 Приложения 8 в строке %2 сумма полей (40), (52), (60), (70) больше суммы в поле (20)'"), НомерСтраницы, НомерСтроки),
				"Приложение8",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелРаздела2024(РеквизитыФормы, Родитель, Узел, ПоказателиРаздела)
	
	Если ЭтоРазделПриложения5(Узел.Раздел) Тогда
		
		// Приложение 5 с продолжением: итоги по обоим страницам находятся в Приложении 5 (продолжение)
		ЗаполнитьДаннымиУзелРаздела_Приложение5(РеквизитыФормы, Родитель, Узел);
		
	ИначеЕсли Не СтраницаПуста(РеквизитыФормы.ДанныеОтчета[Узел.Раздел], ПоказателиРаздела, Узел.Многострочность) Тогда
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ2024(РеквизитыФормы, Родитель, Узел)
	
	// Приложение 8 особенное - многостраничное, многострочное и имеет многострочную часть в каждой строке.
	
	ПризнакиУчетаУбытков = ПризнакиУчетаУбытковПоЦеннымБумагам(РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из РеквизитыФормы.ДанныеОтчета[Узел.Раздел] Цикл
		
		Для Каждого СтрокаЛиста Из СтраницаЛиста.ДанныеДопСтрок Цикл
			
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, СтрокаЛиста);
			
			Если СтрокаЛиста.П001200001050 = ПризнакиУчетаУбытков.УбытокУчитывается Тогда
				УчетУбытковЭталон = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "УчетУбыт");
				Для Индекс = 0 По СтрокаЛиста.П001200001051.Количество() - 1 Цикл
					
					СтруктураЗаполнения = Новый Структура;
					СтруктураЗаполнения.Вставить("П001200001051", СтрокаЛиста.П001200001051[Индекс].Значение);
					СтруктураЗаполнения.Вставить("П001200001052", СтрокаЛиста.П001200001052[Индекс].Значение);
					
					ПодчиненныйУзел = СкопироватьУзел(ЭкземплярУзла, УчетУбытковЭталон);
					
					ЗаполнитьДаннымиУзел(РеквизитыФормы, ПодчиненныйУзел, СтруктураЗаполнения);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219_2024(РеквизитыФормы, Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	// Создаем новый Лист
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	
	// Получаем подчиненные элементы листа п. 1 и 3
	Экземпляр_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчПенсВзнос");
	
	// Получаем эталонный элемент пункта 1, будем использовать его для получения эталонов элементов 1.1 и 1.2
	Эталон_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(Узел, "РасчПенсВзнос");
	
	// Получаем эталонный элемент для п. 1.1
	Эталон_РасчПСВВыч = ПолучитьПодчиненныйЭлемент(Эталон_РасчПенсВзнос, "РасчПСВВыч");
	
	// Получаем элемент для п. 1.2
	Экземпляр_РасчДопСВВыч = ПолучитьПодчиненныйЭлемент(Экземпляр_РасчПенсВзнос, "РасчДопСВВыч");
	
	ИтогиЛиста = Новый ТаблицаЗначений;
	ИменаКолонок = "";
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		// Проверим заполненность страницы раздела
		Если СтраницаПуста(СтраницаЛиста.Данные, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогиЛиста.Колонки.Количество() = 0 Тогда
			Для Каждого КлючИЗначение Из СтраницаЛиста.Данные Цикл
				ИтогиЛиста.Колонки.Добавить(КлючИЗначение.Ключ);
				ИменаКолонок = ИменаКолонок + КлючИЗначение.Ключ + ",";
			КонецЦикла;
		КонецЕсли;
		
		СтрокаИтогов = ИтогиЛиста.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогов, СтраницаЛиста.Данные);
		
		// Создаем подчиненный узел п 1.1 из эталона
		Экземпляр_РасчПСВВыч = СкопироватьУзел(Экземпляр_РасчПенсВзнос, Эталон_РасчПСВВыч);
		
		// Заполняем созданные узлы даннымм
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчПСВВыч, СтраницаЛиста.Данные);
		
	КонецЦикла;
	
	Если ИтогиЛиста.Количество() > 0 Тогда
		ИтогиЛиста.Колонки.Добавить("КолонкаСвертки");
		ИтогиЛиста.Свернуть("КолонкаСвертки", ИменаКолонок);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчПенсВзнос, ИтогиЛиста[0], , Истина);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчДопСВВыч, ИтогиЛиста[0], , Истина);
	КонецЕсли;
	
	// Получаем эталонный элемент для п. 2
	Эталон_РасчСумИнвВыч = ПолучитьПодчиненныйЭлемент(Эталон_РасчПенсВзнос, "РасчСумИнвВыч");
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		// Проверим заполненность страницы раздела
		Если СтраницаПуста(СтраницаЛиста.Данные, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		// Создаем подчиненный узел п 2 из эталона
		Экземпляр_РасчСумИнвВыч = СкопироватьУзел(Экземпляр_РасчПенсВзнос, Эталон_РасчСумИнвВыч);
		
		// Заполняем созданные узлы даннымм
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчСумИнвВыч, СтраницаЛиста.Данные);
		
	КонецЦикла;
	
	Если СтраницаЛиста <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, СтраницаЛиста.Данные, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма2025кв1

Функция РеквизитыФормыОтчета2025()
	
	РеквизитыФормы = РеквизитыФормы2025();
	
	РеквизитыФормыОтчета = НовыеРеквизитыФормыОтчета();
	РеквизитыФормыОтчета.ФормаОтчета = РеквизитыФормы.ИмяОбъекта;
	РеквизитыФормыОтчета.ДатаНачалоДействия = РеквизитыФормы.ДатаНачалаДействия;
	РеквизитыФормыОтчета.ДатаКонецДействия = РеквизитыФормы.ДатаОкончанияДействия;
	
	РеквизитыФормыОтчета.ОписаниеОтчета = СтрШаблон(
		НСтр("ru = 'Утверждена приказом ФНС России от %1 г. № %2';
			|en = 'Утверждена приказом ФНС России от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy; ДП='""__.__.____""'"),
		РеквизитыФормы.НомерПриказа);
	
	РеквизитыФормыОтчета.РедакцияФормы = СтрШаблон(
		НСтр("ru = 'от %1 г. № %2';
			|en = 'от %1 г. № %2'"),
		Формат(РеквизитыФормы.ДатаПриказа, "Л=ru_RU; ДФ=dd.MM.yyyy; ДП='""__.__.____""'"),
		РеквизитыФормы.НомерПриказа);
	
	Возврат РеквизитыФормыОтчета;
	
КонецФункции

Функция РеквизитыФормы2025()
	
	РеквизитыФормы = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормы.Код = "1151020";
	РеквизитыФормы.ДатаПриказа = Дата(2024, 09, 19);
	РеквизитыФормы.НомерПриказа = "ЕД-7-11/757@";
	РеквизитыФормы.ДатаНачалаДействия = Дата(2024, 1, 1);
	РеквизитыФормы.ИмяОбъекта = "ФормаОтчета2025кв1";
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция РеквизитыФормата2025()
	
	РеквизитыФормы = РеквизитыФормы2025();
	
	РеквизитыФормата = НовыеРеквизитыФормИФорматовПриказа();
	РеквизитыФормата.Код = "5.19";
	РеквизитыФормата.ДатаНачалаДействия = РеквизитыФормы.ДатаНачалаДействия;
	
	Возврат РеквизитыФормата;
	
КонецФункции

Функция СтруктураРеквизитовФормы2025(ПараметрыФормы)
	
	СтруктураРеквизитовФормы = НовыйСтруктураРеквизитовФормы();
	
	РеквизитыФормы = РеквизитыФормы2025();
	РеквизитыФормата = РеквизитыФормата2025();
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, ПараметрыФормы);
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2025кв1";
	СтруктураРеквизитовФормы.мВерсияФормы = "31/12/2025";
	СтруктураРеквизитовФормы.мКодОтчета = РеквизитыФормы.Код; // КНД
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений = Ложь;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, СтрШаблон("Формат %1", РеквизитыФормата.Код), Истина);
	
	// Описание параметров многострочных групп
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2025();
	СтруктураРеквизитовФормы.Вставить("мИдРаздел1", ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1", ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)]);
	СтруктураРеквизитовФормы.Вставить("мИдПриложение1Расчет", ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)]);
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Функция КлючиПоказателейДекларации2025(ИмяРаздела = "")
	
	СвойстваРазделовДекларации = СвойстваРазделовДекларации2025(ИмяРаздела);
	КлючиПоказателей = КлючиПоказателейДекларации2024(ИмяРаздела);
	
	// По сравнению с предыдущей редакцией убраны некоторые показатели
	УдалитьКлючПоказателя("КодНомераОбъектаНедвижимости", КлючиПоказателей); // П000700001031
	УдалитьКлючПоказателя("ДатаРегистрацииПравСобственностиНаЗемлю", КлючиПоказателей); // П000700001060
	УдалитьКлючПоказателя("ДоляВПравеСобственностиЧислитель", КлючиПоказателей); // П000700001070
	УдалитьКлючПоказателя("ДоляВПравеСобственностиЗнаменатель", КлючиПоказателей); // П000700001070
	УдалитьКлючПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", КлючиПоказателей); // П001000001080
	УдалитьКлючПоказателя("СоциальныйВычетОбучениеСвое", КлючиПоказателей); // П000900001130 - перенесен в Приложение 5
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		ДобавитьКлючПоказателя("ЕРН", "Титульный", "ЕРН", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		ДобавитьКлючПоказателя(КлючПоляВычетГТО(), "Приложение5", "П000900001025", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетИностранноеОбучениеДетей", "Приложение5", "П000900001105", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетОбучениеСвое", "Приложение5", "П000900001130", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныйВычетИностранноеОбучениеСвое", "Приложение5", "П000900001135", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Продолжение" Тогда
		ДобавитьКлючПоказателя("СтраховыеВзносыНакопительнаяПенсия", "Приложение5Продолжение", "П000900001161", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("СоциальныеВычетыУпрощенныйПорядок", "Приложение5Продолжение", "П000900001182", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДолгосрочныеСбереженияНПФ", "Приложение5Продолжение", "П000900001240", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДолгосрочныеСбереженияИИС", "Приложение5Продолжение", "П000900001250", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ДолгосрочныеСбереженияУпрощенный", "Приложение5Продолжение", "П000900001260", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		ДобавитьКлючПоказателя("ПродажаИмуществаИностранцы", "Приложение6", "П000800001115", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		ДобавитьКлючПоказателя("ПризнакУпрощенногоПорядкаВычетаНПФ", "Приложение5Расчет", "П001000001061", СвойстваРазделовДекларации, КлючиПоказателей);
		ДобавитьКлючПоказателя("ПризнакОснованияЗаявленияВычетаИИС", "Приложение5Расчет", "П001000001080", СвойстваРазделовДекларации, КлючиПоказателей);
	КонецЕсли;
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ИмяФайлаСхемы2025(НомерВерсии = 1)
	
	Возврат СтрШаблон("NO_NDFL3_1_033_00_05_19_%1.xsd", Формат(НомерВерсии, "ЧЦ=2; ЧВН="));
	
КонецФункции

Функция РазмерыВычетов2025()
	
	РазмерыВычетов = Новый Структура;
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаДетей", Новый Структура);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПервыйРебенок", 1400);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ВторойРебенок", 1400);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ТретийРебенок", 3000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("РоднойИнвалид", 12000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПриемныйИнвалид", 6000);
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаНалогоплательщика", Новый Соответствие);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_1, 3000);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_2, 500);
	
	РазмерыВычетов.Вставить(КлючПоляВычетГТО(), 18000);
	
	Возврат РазмерыВычетов;
	
КонецФункции

Функция ПределыВычетов2025(РазмерыВычетов)
	
	ПределыВычетов = Новый Структура;
	ПределыВычетов.Вставить("СоциальныеВычеты", 150000);
	ПределыВычетов.Вставить("ПожертвованияПроцентДохода", 0.25);
	ПределыВычетов.Вставить("ПожертвованияФондыПроцентДохода", 0.3);
	ПределыВычетов.Вставить("ВычетНаДетейДоходы", 350000);
	
	ВычетНаНалогоплательщика = СтандартныйВычетНаНалогоплательщика(РазмерыВычетов);
	
	Для Каждого ТекущийВычет Из ВычетНаНалогоплательщика Цикл
		Если ТекущийВычет.Ключ = КлючПоляВычетГТО() Тогда
			// Вычет предоставляется всей суммой с квартала, когда получен знак отличия ГТО
			ПределыВычетов.Вставить(ТекущийВычет.Ключ, ТекущийВычет.Значение);
		Иначе
			// Предел стандартного вычета на налогоплательщика вычисляется из значения за месяц * 12 мес.
			ПределыВычетов.Вставить(ТекущийВычет.Ключ, ТекущийВычет.Значение * 12);
		КонецЕсли;
	КонецЦикла;
	
	ПределыВычетов.Вставить("ПродажаЖилойНедвижимости", 1000000);
	ПределыВычетов.Вставить("ПродажаИногоИмущества", 250000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиСтоимость", 2000000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиПроценты", 3000000);
	
	ПределыВычетов.Вставить("ИнвестиционныйВычет", 400000);
	ПределыВычетов.Вставить("ДолгосрочныеСбереженияИИС", 30000000);
	ПределыВычетов.Вставить("ДолгосрочныеСбереженияНПФ", 400000);
	
	Возврат ПределыВычетов;
	
КонецФункции

Функция СвойстваПоказателей2025(ОтчетОбъект, ВыбраннаяФорма, УникальныйИдентификатор)
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);
	
	ИмяМакета = ИмяМакетаСписковВыбора(ВыбраннаяФорма);
	КоллекцияСписковВыбора = СпискиВыбора(ОтчетОбъект.ПолучитьМакет(ИмяМакета));
	
	СвойстваПоказателей = НовыйСвойстваПоказателей();
	
	// Титульный
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"Период", , 2, , НСтр("ru = 'Налоговый период (код)';
								|en = 'Налоговый период (код)'"), КоллекцияСписковВыбора["КодНалоговогоПериода"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПоМесту", , 3, , НСтр("ru = 'Код категории налогоплательщика';
								|en = 'Код категории налогоплательщика'"), КоллекцияСписковВыбора["КодКатегорииНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"СтатусНалогоплательщика", , 1, , НСтр("ru = 'Код статуса налогоплательщика';
												|en = 'Код статуса налогоплательщика'"), КоллекцияСписковВыбора["СтатусНалогоплательщика"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДокумента", , 2, , НСтр("ru = 'Код вида документа';
										|en = 'Код вида документа'"), КоллекцияСписковВыбора["КодВидаДокумента"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПрПодп", , 0, , НСтр("ru = 'Подписант';
								|en = 'Подписант'"), КоллекцияСписковВыбора["ВидПодписанта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБК", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
												|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБК"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КБКИП", КлючиПоказателей, 20, "КБК", НСтр("ru = 'Код бюджетной классификации';
													|en = 'Код бюджетной классификации'"), КоллекцияСписковВыбора["КБКПредпринимательскаяДеятельность"], УникальныйИдентификатор);
	
	// Раздел 1 Приложение
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидСчетаВозврат", КлючиПоказателей, 2, , НСтр("ru = 'Код вида счета';
														|en = 'Код вида счета'"), КоллекцияСписковВыбора["КодВидаСчета"], УникальныйИдентификатор);
	
	// Раздел 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДохода", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
												|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	
	// Приложение 1
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаРФ", КлючиПоказателей, 0, , НСтр("ru = 'Код вида дохода';
														|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходовРФ"], УникальныйИдентификатор);
	
	// Приложение 2
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"НалоговаяСтавкаДоходаЗаПределамиРФ", КлючиПоказателей, 0, , НСтр("ru = 'Ставка налога';
																			|en = 'Ставка налога'"), КоллекцияСписковВыбора["СтавкаНалога"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДоходаЗаПределамиРФ", КлючиПоказателей, 2, , НСтр("ru = 'Код вида дохода';
																	|en = 'Код вида дохода'"), КоллекцияСписковВыбора["КодыВидовДоходов"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ", КлючиПоказателей, 1, , НСтр("ru = 'Код вида освобождения от налогообложения';
																						|en = 'Код вида освобождения от налогообложения'"), КоллекцияСписковВыбора["КодВидаОсвобожденияОтНалогообложенияЗаПределамиРФ"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПорядокОпределенияПрибылиУбыткаКИК", КлючиПоказателей, 1, , НСтр("ru = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании';
																			|en = 'Применяемый порядок определения прибыли (убытка) контролируемой иностранной компании'"), КоллекцияСписковВыбора["ПорядокОпределенияПрибылиУбыткаКИК"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодВидаДеятельностиИП", КлючиПоказателей, 2, , НСтр("ru = 'Код вида деятельности';
															|en = 'Код вида деятельности'"), КоллекцияСписковВыбора["ВидДеятельности"], УникальныйИдентификатор);
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"КодИсточникаДоходаПрофессиональныхВычетов", КлючиПоказателей, 1, , НСтр("ru = 'Код источника дохода';
																				|en = 'Код источника дохода'"), КоллекцияСписковВыбора["ИсточникДоходов"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, 
		"КодНаименованияОбъектаНедвижимости", КлючиПоказателей, 1, , НСтр("ru = 'Код наименования объекта';
																			|en = 'Код наименования объекта'"), КоллекцияСписковВыбора["КодНаименованияОбъекта"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ПризнакНалогоплательщикаОбъектаНедвижимости", КлючиПоказателей, 2, , НСтр("ru = 'Код признака налогоплательщика';
																					|en = 'Код признака налогоплательщика'"), КоллекцияСписковВыбора["ПризнакНалогоплательщикаПоИмуществу"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ВидДоговораПенсионногоОбеспечения", КлючиПоказателей, 1, , НСтр("ru = 'Код вида договора';
																		|en = 'Код вида договора'"), КоллекцияСписковВыбора["ВидыДоговоровНПС"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции';
																|en = 'Код вида операции'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиПризнакУчетаУбытков", КлючиПоказателей, 1, , НСтр("ru = 'Признак учета убытков';
																		|en = 'Признак учета убытков'"), КоллекцияСписковВыбора["КодыПризнакаУчетаУбытков"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей,
		"ЦенныеБумагиУчетУбытковВидОперации", КлючиПоказателей, 2, , НСтр("ru = 'Код вида операции, по которой принимается убыток';
																			|en = 'Код вида операции, по которой принимается убыток'"), КоллекцияСписковВыбора["ВидыОперацийСЦеннымиБумагами"], УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "СпособПриобретенияНедвижимости", КлючиПоказателей, 1, ,
		НСтр("ru = 'Способы приобретения жилого дома';
			|en = 'Способы приобретения жилого дома'"), КоллекцияСписковВыбора["СпособыПриобретенияНедвижимости"], УникальныйИдентификатор);
	
	// Расчет к Приложению 5
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "ПризнакУпрощенногоПорядкаВычетаИИС", КлючиПоказателей, 1, ,
		НСтр("ru = 'Признак предоставления вычета в упрощенном порядке';
			|en = 'Признак предоставления вычета в упрощенном порядке'"),
		КоллекцияСписковВыбора["ПризнакУпрощенногоПорядкаВычетаИИС"],
		УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "ПризнакОснованияЗаявленияВычетаИИС", КлючиПоказателей, 1, ,
		НСтр("ru = 'Признак основания заявления налогового вычета';
			|en = 'Признак основания заявления налогового вычета'"),
		КоллекцияСписковВыбора["ПризнакОснованияЗаявленияВычетаИИС"],
		УникальныйИдентификатор);
	
	ДобавитьСвойствоПоказателя(СвойстваПоказателей, "ПризнакУпрощенногоПорядкаВычетаНПФ", КлючиПоказателей, 1, ,
		НСтр("ru = 'Признак предоставления вычета в упрощенном порядке';
			|en = 'Признак предоставления вычета в упрощенном порядке'"),
		КоллекцияСписковВыбора["ПризнакУпрощенногоПорядкаВычетаНПФ"],
		УникальныйИдентификатор);
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	Возврат СвойстваПоказателей;
	
КонецФункции

Функция СтруктураМногострочныхРазделов2025()
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2025();
	
	СтруктураМногострочныхРазделов = Новый Структура;
	
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)], СтруктураМногострочныхРазделов);
	ДобавитьМногострочныйРазделВСтруктуру(ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)], СтруктураМногострочныхРазделов);
	
	Возврат СтруктураМногострочныхРазделов;
	
КонецФункции

Функция СвойстваРазделовДекларации2025(ИмяРаздела = "")
	
	ИдентификаторыМногострочныхГрупп = ИдентификаторыМногострочныхГрупп2025();
	
	СвойстваРазделовДекларации = НовыйСвойстваРазделовДекларации();
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Титульный" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Титульный";
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Ложь;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРаздела(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 8;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 2;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел1Приложение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел1Приложение";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Раздел2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Раздел2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 9;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяПриложения(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 12;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 3;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение1Расчет" Тогда
		
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение1Расчет";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		
		СвойстваРаздела.МногострочностьВРазделе = НовыйМногострочностьВРазделе();
		НовСтр = СвойстваРаздела.МногострочностьВРазделе.Добавить();
		НовСтр.ИдГруппы = ИдентификаторыМногострочныхГрупп[ИмяРасчетаКПриложению(1)];
		НовСтр.Область = "МногострочнаяЧасть";
		НовСтр.ВысотаСтроки = 9;
		НовСтр.МаксимальноеКоличествоСтрокНаСтранице = 4;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение2" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение2";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.РазделЯвляетсяАвтозаполняемым = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение3Продолжение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение3Продолжение";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 1;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение4" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение4";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Продолжение" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Продолжение";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение5Расчет" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение5Расчет";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение6" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение6";
		СвойстваРаздела.ОчищатьРаздел = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение7" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение7";
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
		СвойстваРаздела.ПоказыватьИтогиТолькоНаПоследнейСтранице = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРаздела) Или ИмяРаздела = "Приложение8" Тогда
		СвойстваРаздела = СвойстваРазделовДекларации.Строки.Добавить();
		СвойстваРаздела.ИмяСтраницы = "Приложение8";
		СвойстваРаздела.СохранятьМногострКакТЗ = Истина;
		СвойстваРаздела.МногостраничностьВРазделе = Истина;
		СвойстваРаздела.МаксКолвоЭкз = 999;
		СвойстваРаздела.ОчищатьРаздел = Истина;
		СвойстваРаздела.ПредставлениеДанных = Истина;
		СвойстваРаздела.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	КонецЕсли;
	
	Возврат СвойстваРазделовДекларации;
	
КонецФункции

Функция ИдентификаторыМногострочныхГрупп2025()
	
	ИдентификаторыМногострочных = Новый Структура;
	ИдентификаторыМногострочных.Вставить(ИмяРаздела(1), "П000100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложенияКРазделу(1), "П002100001");
	ИдентификаторыМногострочных.Вставить(ИмяПриложения(1), "П000300001");
	ИдентификаторыМногострочных.Вставить(ИмяРасчетаКПриложению(1), "П001900001");
	
	Возврат ИдентификаторыМногострочных;
	
КонецФункции

Функция КБК2025()
	
	КБК = Новый Структура;
	КБК.Вставить("ДоходыПолученныеОтНалоговыхАгентов", "18210102010011000110");
	КБК.Вставить("ДоходыОтПредпринимательскойДеятельности", "18210102020011000110");
	КБК.Вставить("ДоходыПриПолученииКоторыхНеУдержанНалог", "18210102030011000110");
	КБК.Вставить("ФиксированныеПлатежиИностранныхГраждан", "18210102040011000110");
	КБК.Вставить("ДоходыВВидеБанковскихПроцентов", "18210102060011000110");
	КБК.Вставить("ДоходыВВидеПроцентовПоОблигациям", "18210102070011000110");
	КБК.Вставить("ДоходыОблагаемыеПоПовышеннойСтавке", "18210102080011000110");
	
	КБК.Вставить("ДоходыСПрибылиКИК", "18210102050011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОсобыйПорядокУплаты", "18210102090011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавке", "18210102100011000110");
	КБК.Вставить("ДоходыСПрибылиКИКОблагаемыеПоПовышеннойСтавкеОсобыйПорядокУплаты", "18210102110011000110");
	
	КБК.Вставить("НалогПоПовышеннойСтавкеНаОснованииУведомления", "18210102120011000110");
	КБК.Вставить("ДоходыСДивидендов", "18210102130011000110");
	КБК.Вставить("ДоходыСДивидендовПоПовышеннойСтавке", "18210102140011000110");
	
	Возврат КБК;
	
КонецФункции

Функция КодыВидовДоговоровДобровольныхВзносов2025()
	
	КодыВидовДоговоров = Новый Структура;
	КодыВидовДоговоров.Вставить("ПенсионноеОбеспечение", "1");
	КодыВидовДоговоров.Вставить("ПенсионноеСтрахование", "2");
	КодыВидовДоговоров.Вставить("СтрахованиеЖизни", "3");
	КодыВидовДоговоров.Вставить("ДолгосрочныеСбережения", "4");
	
	Возврат КодыВидовДоговоров;
	
КонецФункции

Функция КодыНаименованияОбъектаНедвижимости2025()
	
	КодыОбъектаНедвижимости = Новый Структура;
	КодыОбъектаНедвижимости.Вставить("ЖилойДом", "1");
	КодыОбъектаНедвижимости.Вставить("Квартира", "2");
	КодыОбъектаНедвижимости.Вставить("Комната", "3");
	КодыОбъектаНедвижимости.Вставить("ДоляВКвартире", "4");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчастокПодСтроительство", "5");
	КодыОбъектаНедвижимости.Вставить("ЗемельныйУчасток", "6");
	
	Возврат КодыОбъектаНедвижимости;
	
КонецФункции

Функция ВидыВычетов2025()
	
	ВидыВычетов = ВидыВычетов2022();
	
	ВидыВычетов.Вставить("ДолгосрочныеСбереженияНПФ", "ДолгосрочныеСбереженияНПФ");
	ВидыВычетов.Вставить("ДолгосрочныеСбереженияИИС", "ДолгосрочныеСбереженияИИС");
	
	Возврат ВидыВычетов;
	
КонецФункции

Процедура ПроверитьСтраницуПриложения7_2025(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, КодыОбъектовНедвижимости)
	
	Если ДанныеСтраницы.П000700001010 = КодыОбъектовНедвижимости.ЖилойДом
		И Не ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)';
							|en = 'На странице %1 Приложения 7 не указан способ приобретения жилого дома (30)'"), НомерСтраницы),
			"Приложение7",
			"П000700001030",
			НомерСтраницы);
		
	ИначеЕсли ДанныеСтраницы.П000700001010 <> КодыОбъектовНедвижимости.ЖилойДом
		И ЗначениеЗаполнено(ДанныеСтраницы.П000700001030) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кода наименования объекта %2';
										|en = 'На странице %1 Приложения 7 способ приобретения жилого дома (30) указывается для кода наименования объекта %2'"),
			НомерСтраницы,
			КодыОбъектовНедвижимости.ЖилойДом);
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			ТекстСообщения,
			"Приложение7",
			"П000700001030",
			НомерСтраницы);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтраницы.П000700001032) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 7 не указан кадастровый объекта (32)';
							|en = 'На странице %1 Приложения 7 не указан кадастровый объекта (32)'"), НомерСтраницы),
			"Приложение7",
			"П000700001032",
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения8_2025(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ПризнакиУчетаУбытков)
	
	Если Не ЗначениеЗаполнено(ДанныеСтраницы["П001200001010"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 не указан код вида операции (10)';
							|en = 'На странице %1 Приложения 8 не указан код вида операции (10)'"), НомерСтраницы),
			"Приложение8",
			"П001200001010",
			НомерСтраницы);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтраницы["П001200001020"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 не указана сумма дохода (20)';
							|en = 'На странице %1 Приложения 8 не указана сумма дохода (20)'"), НомерСтраницы),
			"Приложение8",
			"П001200001020",
			НомерСтраницы);
	КонецЕсли;
	
	Строка051Заполнена = Ложь;
	СуммаСтрок052 = 0;
	НомерДопСтроки = 1;
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П001200001051_%1", НомерДопСтроки)) Цикл
		
		Если Не ПустаяСтрока(ДанныеСтраницы[СтрШаблон("П001200001051_%1", НомерДопСтроки)]) Тогда
			Строка051Заполнена = Истина;
		КонецЕсли;
		
		ЗначениеПоказателя = ДанныеСтраницы[СтрШаблон("П001200001052_%1", НомерДопСтроки)];
		СуммаСтрок052 = СуммаСтрок052 + ?(ЗначениеЗаполнено(ЗначениеПоказателя), ЗначениеПоказателя, 0);
		НомерДопСтроки = НомерДопСтроки + 1;
		
	КонецЦикла;
	
	ИмяПоля = "П001200001050";
	Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 не указан признак учета убытков (50)';
							|en = 'На странице %1 Приложения 8 не указан признак учета убытков (50)'"), НомерСтраницы),
			"Приложение8",
			ИмяПоля,
			НомерСтраницы);
		
	ИначеЕсли ДанныеСтраницы[ИмяПоля] = ПризнакиУчетаУбытков.УбытокНеУчитывается
		И (Строка051Заполнена Или СуммаСтрок052 <> 0) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 в поле (50) указан признак учета убытков %2. Поля (51) и (52) в таком случае не заполняются';
										|en = 'На странице %1 Приложения 8 в поле (50) указан признак учета убытков %2. Поля (51) и (52) в таком случае не заполняются'"),
			НомерСтраницы,
			ДанныеСтраницы[ИмяПоля]);
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			ТекстСообщения,
			"Приложение8",
			ИмяПоля,
			НомерСтраницы);
		
	КонецЕсли;
	
	ОбщаяСуммаРасходов = ДанныеСтраницы["П001200001040"]
		+ ДанныеСтраницы["П001200001060"]
		+ ДанныеСтраницы["П001200001070"]
		+ СуммаСтрок052;
	
	ИмяПоля = "П001200001020";
	Если ОбщаяСуммаРасходов > ДанныеСтраницы[ИмяПоля] Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон(НСтр("ru = 'На странице %1 Приложения 8 сумма полей (40), (52), (60), (70) больше суммы в поле (20)';
							|en = 'На странице %1 Приложения 8 сумма полей (40), (52), (60), (70) больше суммы в поле (20)'"), НомерСтраницы),
			"Приложение8",
			ИмяПоля,
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелРаздела2025(РеквизитыФормы, Родитель, Узел, ПоказателиРаздела)
	
	Если ЭтоРазделПриложения5(Узел.Раздел) Тогда
		
		// Приложение 5 с продолжением: итоги по обоим страницам находятся в Приложении 5 (продолжение)
		ЗаполнитьДаннымиУзелРаздела_Приложение5(РеквизитыФормы, Родитель, Узел);
		ЗаполнитьДаннымиУзелРаздела_Приложение5Продолжение(РеквизитыФормы, Родитель, Узел);
		
	ИначеЕсли Узел.Раздел = "Приложение2" Или Узел.Раздел = "Приложение7" Тогда
		
		// Схема Приложение2 нестандартная: есть корневой узел ДоходИстИно и в нём постраничные разделы РасчДохНалИно
		// Схема Приложение7 нестандартная: есть корневой узел ИмущНалВычНов и в нём постраничные разделы РасчИмущВыч
		РазделПустой = Истина;
		Для Каждого ТекущаяСтраница Из РеквизитыФормы.ДанныеОтчета[Узел.Раздел] Цикл
			ДанныеСтраницы = ТекущаяСтраница.Данные;
			Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, Истина) Тогда
				РазделПустой = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если Не РазделПустой Тогда
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			ЗаполнитьДаннымиУзелМногостраничногоРаздела(РеквизитыФормы, Родитель, ЭкземплярУзла);
		КонецЕсли;
		
	ИначеЕсли Не СтраницаПуста(РеквизитыФормы.ДанныеОтчета[Узел.Раздел], ПоказателиРаздела, Узел.Многострочность) Тогда
		
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ2025(РеквизитыФормы, Родитель, Узел)
	
	// Приложение 8 имеет многострочную часть для показателей П001200001051 и П001200001052.
	
	Для Каждого СтраницаЛиста Из РеквизитыФормы.ДанныеОтчета[Узел.Раздел] Цикл
		
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, СтраницаЛиста.Данные);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219_2025(РеквизитыФормы, Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	// Создаем новый Лист
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	
	// Получаем подчиненные элементы листа п. 1 и 3
	Экземпляр_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчПенсВзнос");
	
	// Получаем эталонный элемент пункта 1, будем использовать его для получения эталонов элементов 1.1 и 1.2
	Эталон_РасчПенсВзнос = ПолучитьПодчиненныйЭлемент(Узел, "РасчПенсВзнос");
	
	// Получаем эталонный элемент для п. 1.1
	Эталон_РасчПСВВыч = ПолучитьПодчиненныйЭлемент(Эталон_РасчПенсВзнос, "РасчПСВВыч");
	
	// Получаем элемент для п. 1.2
	Экземпляр_РасчДопСВВыч = ПолучитьПодчиненныйЭлемент(Экземпляр_РасчПенсВзнос, "РасчДопСВВыч");
	
	ИтогиЛиста = Новый ТаблицаЗначений;
	ИменаКолонок = "";
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		// Проверим заполненность страницы раздела
		Если СтраницаПуста(СтраницаЛиста.Данные, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогиЛиста.Колонки.Количество() = 0 Тогда
			Для Каждого КлючИЗначение Из СтраницаЛиста.Данные Цикл
				ИтогиЛиста.Колонки.Добавить(КлючИЗначение.Ключ);
				ИменаКолонок = ИменаКолонок + КлючИЗначение.Ключ + ",";
			КонецЦикла;
		КонецЕсли;
		
		СтрокаИтогов = ИтогиЛиста.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогов, СтраницаЛиста.Данные);
		
		// Создаем подчиненный узел п 1.1 из эталона
		Экземпляр_РасчПСВВыч = СкопироватьУзел(Экземпляр_РасчПенсВзнос, Эталон_РасчПСВВыч);
		
		// Заполняем созданные узлы даннымм
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчПСВВыч, СтраницаЛиста.Данные);
		
	КонецЦикла;
	
	Если ИтогиЛиста.Количество() > 0 Тогда
		ИтогиЛиста.Колонки.Добавить("КолонкаСвертки");
		ИтогиЛиста.Свернуть("КолонкаСвертки", ИменаКолонок);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчПенсВзнос, ИтогиЛиста[0], , Истина);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчДопСВВыч, ИтогиЛиста[0], , Истина);
	КонецЕсли;
	
	// Получаем эталонный элемент для п. 2
	Эталон_РасчСумИнвВыч = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчСумИнвВыч");
	
	Если Эталон_РасчСумИнвВыч <> Неопределено Тогда
		Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
			
			// Проверим заполненность страницы раздела
			Если СтраницаПуста(СтраницаЛиста.Данные, ПоказателиРаздела) Тогда
				Продолжить;
			КонецЕсли;
			
			// Создаем подчиненный узел п 2 из эталона
			Экземпляр_РасчСумИнвВыч = СкопироватьУзел(ЭкземплярУзла, Эталон_РасчСумИнвВыч);
			
			// Заполняем созданные узлы даннымм
			ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчСумИнвВыч, СтраницаЛиста.Данные);
			
		КонецЦикла;
		
		ЭкземплярУзла.Строки.Удалить(Эталон_РасчСумИнвВыч);
	КонецЕсли;
	
	Если СтраницаЛиста <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, СтраницаЛиста.Данные, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма2026кв

Функция РазмерыВычетов2026()
	
	РазмерыВычетов = Новый Структура;
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаДетей", Новый Структура);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПервыйРебенок", 1400);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ВторойРебенок", 2800);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ТретийРебенок", 6000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("РоднойИнвалид", 12000);
	РазмерыВычетов.СтандартныйВычетНаДетей.Вставить("ПриемныйИнвалид", 12000);
	
	РазмерыВычетов.Вставить("СтандартныйВычетНаНалогоплательщика", Новый Соответствие);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_1, 3000);
	РазмерыВычетов.СтандартныйВычетНаНалогоплательщика.Вставить(
		Перечисления.СтандартныеВычетыНаНалогоплательщика.ВычетПо218_1_2, 500);
	
	РазмерыВычетов.Вставить(КлючПоляВычетГТО(), 18000);
	
	Возврат РазмерыВычетов;
	
КонецФункции

Функция ПределыВычетов2026(РазмерыВычетов)
	
	ПределыВычетов = Новый Структура;
	ПределыВычетов.Вставить("СоциальныеВычеты", 150000);
	ПределыВычетов.Вставить("ПожертвованияПроцентДохода", 0.25);
	ПределыВычетов.Вставить("ПожертвованияФондыПроцентДохода", 0.3);
	ПределыВычетов.Вставить("ВычетНаДетейДоходы", 450000);
	
	ВычетНаНалогоплательщика = СтандартныйВычетНаНалогоплательщика(РазмерыВычетов);
	
	Для Каждого ТекущийВычет Из ВычетНаНалогоплательщика Цикл
		Если ТекущийВычет.Ключ = КлючПоляВычетГТО() Тогда
			// Вычет предоставляется всей суммой с квартала, когда получен знак отличия ГТО
			ПределыВычетов.Вставить(ТекущийВычет.Ключ, ТекущийВычет.Значение);
		Иначе
			// Предел стандартного вычета на налогоплательщика вычисляется из значения за месяц * 12 мес.
			ПределыВычетов.Вставить(ТекущийВычет.Ключ, ТекущийВычет.Значение * 12);
		КонецЕсли;
	КонецЦикла;
	
	ПределыВычетов.Вставить("ПродажаЖилойНедвижимости", 1000000);
	ПределыВычетов.Вставить("ПродажаИногоИмущества", 250000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиСтоимость", 2000000);
	ПределыВычетов.Вставить("НаПриобретениеНедвижимостиПроценты", 3000000);
	
	ПределыВычетов.Вставить("ИнвестиционныйВычет", 400000);
	ПределыВычетов.Вставить("ДолгосрочныеСбереженияИИС", 30000000);
	ПределыВычетов.Вставить("ДолгосрочныеСбереженияНПФ", 400000);
	
	Возврат ПределыВычетов;
	
КонецФункции

#КонецОбласти

#Область КонтрольныеСоотношения

Функция ПроверитьКонтрольныеСоотношения(СсылкаНаДокумент) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент,
		"Организация, ДатаНачала, ДатаОкончания, ДатаПодписи, ВыбраннаяФорма, ДанныеОтчета, Ссылка");
	
	СтруктураРеквизитовФормы = СтруктураРеквизитовФормы(
		РеквизитыДокумента.Организация,
		РеквизитыДокумента.ДатаОкончания,
		РеквизитыДокумента.ВыбраннаяФорма);
		
	Если СтруктураРеквизитовФормы = Неопределено Или Не СтруктураРеквизитовФормы.ДоступнаПроверкаКонтрольныхСоотношений Тогда
		Возврат НовыйРезультатПроверкиКонтрольныхСоотношений();
	КонецЕсли;
	
	ДанныеОтчета = СформироватьСтруктуруПоказателей(РеквизитыДокумента.ДанныеОтчета, РеквизитыДокумента.ВыбраннаяФорма);
	ДанныеОтчета.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
	КлючиПоказателей = КлючиПоказателейДекларации(РеквизитыДокумента.ВыбраннаяФорма);
	
	Если ДанныеОтчета = Неопределено Тогда
		Возврат НовыйРезультатПроверкиКонтрольныхСоотношений();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СсылкаНаДокумент);
	
	Результат = НовыйРезультатПроверкиКонтрольныхСоотношений();
	
	СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиФормулы     = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент",             СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("НомерПравила",                 0);
	ДополнительныеПараметры.Вставить("ПоказателиДекларации",         КлючиПоказателей);
	ДополнительныеПараметры.Вставить("СписокРасшифровкиФормулы",     СписокРасшифровкиФормулы);
	ДополнительныеПараметры.Вставить("СписокРасшифровкиПоказателей", СписокРасшифровкиПоказателей);
	ДополнительныеПараметры.Вставить("ПредставленияРазделов",        ПредставленияРазделов(
		РеквизитыДокумента.ВыбраннаяФорма));
	
	КонтрольныеСоотношения_Титульный(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Раздел1(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Раздел2(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение2(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение3(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение4(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение5(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение6(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение7(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение8(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение5Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение1Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонтрольныеСоотношения_Приложение3Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда
		Результат.Вставить("СписокРасшифровкиПоказателей",
			ПоместитьВоВременноеХранилище(ДополнительныеПараметры.СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		Результат.Вставить("СписокРасшифровкиФормулы",
			ПоместитьВоВременноеХранилище(ДополнительныеПараметры.СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ТитульныйЛист

Процедура КонтрольныеСоотношения_Титульный(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ЗначенияПоказателя = КодНалоговогоПериодаПоУмолчанию();
	Если ДанныеОтчета.Титульный.Период = ЗначенияПоказателя Тогда
		
		ДополнительныеПараметры.Вставить("ИмяРаздела",         "Титульный");
		ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
		
		ПроверитьКС_Титульный(Результат, ДанныеОтчета, "1.1", ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКС_Титульный(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)
	
	ОписаниеКС = НСтр("ru = 'Дата предоставления декларации должна быть меньше или равна
		|установленному НК РФ сроку представления налоговой декларации при выполнении условия:
		|номер корректировки = 0. Данное положение распространяется на физических лиц,
		|перечисленных в статьях 227, 227.1 и 228 НК РФ, в соответствии с которыми
		|у них имеется установленная обязанность по представлению налоговой декларации';
		|en = 'Дата предоставления декларации должна быть меньше или равна
		|установленному НК РФ сроку представления налоговой декларации при выполнении условия:
		|номер корректировки = 0. Данное положение распространяется на физических лиц,
		|перечисленных в статьях 227, 227.1 и 228 НК РФ, в соответствии с которыми
		|у них имеется установленная обязанность по представлению налоговой декларации'");
	
	НомерКорректировки  = ДанныеОтчета.Титульный.НомерКорректировки;
	СсылкаНаДокумент    = ДополнительныеПараметры.СсылкаНаДокумент;
	ДатаПодписи         = КонецДня(ДанныеОтчета.РеквизитыДокумента.ДатаПодписи);
	СрокСдачиДекларации = СрокСдачиДекларации(ДанныеОтчета.РеквизитыДокумента.ДатаОкончания);
	
	ДатаПодписиСтрокой  = Формат(ДатаПодписи, "ДЛФ=D");
	СрокСдачиСтрокой    = Формат(СрокСдачиДекларации, "ДЛФ=D");
	
	ПредметНарушения = СтрШаблон(НСтр("ru = 'Непредставление в установленный НК РФ срок налоговой декларации;
		|за %1 год срок представления декларации - %2';
		|en = 'Непредставление в установленный НК РФ срок налоговой декларации;
		|за %1 год срок представления декларации - %2'"),
		Формат(ДанныеОтчета.Титульный.ОтчетГод, "ЧГ=0"), СрокСдачиСтрокой);
		
	СсылкаНаЗакон = НСтр("ru = 'п. 4 ст. 23, п. 1 ст. 229 НК РФ';
						|en = 'п. 4 ст. 23, п. 1 ст. 229 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ПараметрыПоказателя = ПараметрыРегистрацииПоказателя(ДополнительныеПараметры.ИмяРаздела,
		ДополнительныеПараметры.НаименованиеРаздела, ДополнительныеПараметры.НомерПравила);
	
	ПараметрыПоказателя.Вставить("ИмяПоказателя",     "ДатаПодписи");
	ПараметрыПоказателя.Вставить("ЗначениеПоказателя", ДатаПодписиСтрокой);
	ПараметрыПоказателя.Вставить("ПредставлениеПоказателя",
		СтрШаблон("%1, Дата подписи", ПараметрыПоказателя.НаименованиеРаздела));
	
	ЗарегистрироватьПоказатель(ПараметрыПоказателя, ДополнительныеПараметры.СписокРасшифровкиПоказателей, СсылкаНаДокумент);
	
	ПараметрыПоказателя.Вставить("ИмяПоказателя",     "НомерКорректировки");
	ПараметрыПоказателя.Вставить("ЗначениеПоказателя", НомерКорректировки);
	ПараметрыПоказателя.Вставить("ПредставлениеПоказателя",
		СтрШаблон("%1, Номер корректировки", ПараметрыПоказателя.НаименованиеРаздела));
	
	ЗарегистрироватьПоказатель(ПараметрыПоказателя, ДополнительныеПараметры.СписокРасшифровкиПоказателей, СсылкаНаДокумент);
	
	ЭтоОшибка = НомерКорректировки = 0 И ДатаПодписи > СрокСдачиДекларации;
	ПараметрыНарушения = ПараметрыНарушения(ДатаПодписи, СрокСдачиДекларации, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"),
		ДатаПодписиСтрокой, ПараметрыНарушения.ЗнакСравнения, СрокСдачиСтрокой);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Раздел1

Процедура КонтрольныеСоотношения_Раздел1(Результат, ДанныеОтчета, ДополнительныеПараметры)

	Если ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
		КонтрольныеСоотношения_Раздел1_2021(Результат, ДанныеОтчета, ДополнительныеПараметры);
	Иначе
		КонтрольныеСоотношения_Раздел1_2020(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура КонтрольныеСоотношения_Раздел1_2020(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",            "Раздел1");
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше", НСтр("ru = 'Завышена сумма налога к уплате (доплате)';
																	|en = 'Завышена сумма налога к уплате (доплате)'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше", НСтр("ru = 'Занижена сумма налога к уплате (доплате)';
																	|en = 'Занижена сумма налога к уплате (доплате)'"));
	ДополнительныеПараметры.Вставить("НаименованиеРаздела",    НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ДополнительныеПараметры.Вставить("Показатель1", "СуммаНалога");
	ДополнительныеПараметры.Вставить("Показатель2", "СуммаНалогаПодлежащаяУплате");
	
	ПроверкаКС_РавенствоПоказателей(Результат, ДанныеОтчета, "1.2, 1.3", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Показатель1", "СуммаВозвратаНалога");
	ДополнительныеПараметры.Вставить("Показатель2", "СуммаНалогаПодлежащаяВозврату");
	
	ПроверкаКС_РавенствоПоказателей(Результат, ДанныеОтчета, "1.4, 1.5", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Удалить("Показатель1");
	ДополнительныеПараметры.Удалить("Показатель2");

КонецПроцедуры

Процедура КонтрольныеСоотношения_Раздел1_2021(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Раздел1");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Раздел1_ИтоговыеСуммы(Результат, ДанныеОтчета, "1.2", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше", НСтр("ru = 'Завышена сумма авансового платежа к уплате за первый квартал';
																	|en = 'Завышена сумма авансового платежа к уплате за первый квартал'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше", НСтр("ru = 'Занижена сумма авансового платежа к уплате за первый квартал';
																	|en = 'Занижена сумма авансового платежа к уплате за первый квартал'"));
	ДополнительныеПараметры.Вставить("Показатель1", "СуммаНалогаИПКУплате1Квартал");
	ДополнительныеПараметры.Вставить("Показатель2", "АвансовыйПлатежИП1Квартал");
	
	ПроверкаКС_РавенствоПоказателей(Результат, ДанныеОтчета, "1.3, 1.4", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Удалить("Показатель1");
	ДополнительныеПараметры.Удалить("Показатель2");
	
	ПараметрыПроверки = НовыйПараметрыПроверкиКонтрольногоСоотношения();
	ПараметрыПроверки.Результат = Результат;
	ПараметрыПроверки.ДанныеОтчета = ДанныеОтчета;
	ПараметрыПроверки.НомерКС = "1.5, 1.6";
	ПараметрыПроверки.ВидСравненияБольшеИлиРавно = Истина;
	ПараметрыПроверки.ПериодСтрокой = Нстр("ru = 'полугодие';
											|en = 'полугодие'");
	ПараметрыПроверки.Показатель1 = "СуммаНалогаИПКУплатеПолугодие";
	ПараметрыПроверки.Показатель2 = "АвансовыйПлатежИППолугодие";
	ПараметрыПроверки.Показатель3 = "АвансовыйПлатежИП1Квартал";
	
	ПроверкаКС_Раздел1_АвансовыйПлатежЗаПериод(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "1.7, 1.8";
	ПараметрыПроверки.ВидСравненияБольшеИлиРавно = Ложь;
	ПараметрыПроверки.Показатель1 = "СуммаНалогаИПКУменьшениюПолугодие";
	
	ПроверкаКС_Раздел1_АвансовыйПлатежЗаПериод(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "1.9, 1.10";
	ПараметрыПроверки.ВидСравненияБольшеИлиРавно = Истина;
	ПараметрыПроверки.ПериодСтрокой = Нстр("ru = 'девять месяцев';
											|en = 'девять месяцев'");
	ПараметрыПроверки.Показатель1 = "СуммаНалогаИПКУплате9Месяцев";
	ПараметрыПроверки.Показатель2 = "АвансовыйПлатежИП9Месяцев";
	ПараметрыПроверки.Показатель3 = "АвансовыйПлатежИППолугодие";
	
	ПроверкаКС_Раздел1_АвансовыйПлатежЗаПериод(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "1.11, 1.12";
	ПараметрыПроверки.ВидСравненияБольшеИлиРавно = Ложь;
	ПараметрыПроверки.Показатель1 = "СуммаНалогаИПКУменьшению9Месяцев";
	
	ПроверкаКС_Раздел1_АвансовыйПлатежЗаПериод(ПараметрыПроверки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел1_ИтоговыеСуммы(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Сумма строк 040, 080, 100, 130, 160 всех листов раздела 1 
		|- сумма строк 050, 110, 140, 170 всех листов раздела 1 должна быть равна 
		|(строка 150 - строка 160 + строка 110) всех листов раздела 2';
		|en = 'Сумма строк 040, 080, 100, 130, 160 всех листов раздела 1 
		|- сумма строк 050, 110, 140, 170 всех листов раздела 1 должна быть равна 
		|(строка 150 - строка 160 + строка 110) всех листов раздела 2'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 23 НК РФ';
						|en = 'ст. 23 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Занижена сумма налога к уплате (доплате) в бюджет';
							|en = 'Занижена сумма налога к уплате (доплате) в бюджет'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаКУплате = Новый Массив;
	СуммаКУплате.Добавить("СуммаНалога");
	СуммаКУплате.Добавить("СуммаНалогаИПКУплате1Квартал");
	СуммаКУплате.Добавить("СуммаНалогаИПКУплатеПолугодие");
	СуммаКУплате.Добавить("СуммаНалогаИПКУплате9Месяцев");
	СуммаКУплате.Добавить("СуммаНалогаИПКУплатеГод");
	
	СуммаКУменьшению = Новый Массив;
	СуммаКУменьшению.Добавить("СуммаВозвратаНалога");
	СуммаКУменьшению.Добавить("СуммаНалогаИПКУменьшениюПолугодие");
	СуммаКУменьшению.Добавить("СуммаНалогаИПКУменьшению9Месяцев");
	СуммаКУменьшению.Добавить("СуммаНалогаИПКУменьшениюГод");
	
	НалогПодлежащийУплате = ЗначениеПоказателя("СуммаНалогаПодлежащаяУплате", ДанныеОтчета, ДополнительныеПараметры);
	НалогПодлежащийВозврату = ЗначениеПоказателя("СуммаНалогаПодлежащаяВозврату", ДанныеОтчета, ДополнительныеПараметры);
	АвансовыеПлатежи = ЗначениеПоказателя("СуммаУплаченныхАвансовыхПлатежей", ДанныеОтчета, ДополнительныеПараметры);
	
	РасшифровкаПраваяЧасть = "";
	
	НалогКУплате = СуммаСпискаПоказателей(СуммаКУплате, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	НалогКУменьшению = СуммаСпискаПоказателей(СуммаКУменьшению, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	
	Показатель1 = НалогКУплате - НалогКУменьшению;
	Показатель2 = НалогПодлежащийУплате - НалогПодлежащийВозврату + АвансовыеПлатежи;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 - %2 Итог [%3] %4 %5 - %6 + %7 Итог [%8]';
								|en = '%1 - %2 Итог [%3] %4 %5 - %6 + %7 Итог [%8]'"),
		НалогКУплате,
		НалогКУменьшению,
		Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		НалогПодлежащийУплате,
		НалогПодлежащийВозврату,
		АвансовыеПлатежи,
		Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел1_АвансовыйПлатежЗаПериод(ДанныеВыполнения, ДополнительныеПараметры)
	
	Если ДанныеВыполнения.ВидСравненияБольшеИлиРавно Тогда
		
		ШаблонОписания = НСтр("ru = 'Строка %1 Раздела 1 должна быть равна разнице строк %2 и %3 Расчета к Приложению 3
			|при условии, что разница строк %2 и %3 Расчета к Приложению 3 больше или равна 0';
			|en = 'Строка %1 Раздела 1 должна быть равна разнице строк %2 и %3 Расчета к Приложению 3
			|при условии, что разница строк %2 и %3 Расчета к Приложению 3 больше или равна 0'");
		
		ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма авансового платежа к уплате за %1';
										|en = 'Завышена сумма авансового платежа к уплате за %1'");
		ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма авансового платежа к уплате за %1';
										|en = 'Занижена сумма авансового платежа к уплате за %1'");
		
	Иначе
		
		ШаблонОписания = НСтр("ru = 'Строка %1 Раздела 1 должна быть равна разнице строк %2 и %3 Расчета к Приложению 3
			|при условии, что разница строк %2 и %3 Расчета к Приложению 3 меньше 0';
			|en = 'Строка %1 Раздела 1 должна быть равна разнице строк %2 и %3 Расчета к Приложению 3
			|при условии, что разница строк %2 и %3 Расчета к Приложению 3 меньше 0'");
		
		ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма авансового платежа к уменьшению за %1';
										|en = 'Завышена сумма авансового платежа к уменьшению за %1'");
		ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма авансового платежа к уменьшению за %1';
										|en = 'Занижена сумма авансового платежа к уменьшению за %1'");
		
	КонецЕсли;
	
	ПоказателиДекларации = ДополнительныеПараметры.ПоказателиДекларации;
	
	ОписаниеКС = СтрШаблон(ШаблонОписания,
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель1, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель2, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель3, ПоказателиДекларации).ИмяПоля));
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 23 НК РФ';
						|en = 'ст. 23 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы,
		ОписаниеКС, ,
		ДополнительныеПараметры.НомерПравила);
	
	ЗначениеПоказателя2 = ЗначениеПоказателя(ДанныеВыполнения.Показатель2,
		ДанныеВыполнения.ДанныеОтчета,
		ДополнительныеПараметры);
	
	ЗначениеПоказателя3 = ЗначениеПоказателя(ДанныеВыполнения.Показатель3,
		ДанныеВыполнения.ДанныеОтчета,
		ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя(ДанныеВыполнения.Показатель1,
		ДанныеВыполнения.ДанныеОтчета,
		ДополнительныеПараметры);
	
	Показатель2 = ЗначениеПоказателя2 - ЗначениеПоказателя3;
	
	Если ДанныеВыполнения.ВидСравненияБольшеИлиРавно Тогда
		УсловиеВыполняется = (Показатель2 >= 0);
	Иначе
		УсловиеВыполняется = (Показатель2 < 0);
		Если УсловиеВыполняется Тогда
			Показатель2 = -Показатель2;
		КонецЕсли;
	КонецЕсли;
	
	Если УсловиеВыполняется Тогда
		ЭтоОшибка = Показатель1 <> Показатель2;
	Иначе
		ЭтоОшибка = Ложь;
	КонецЕсли;
	
	ПараметрыНарушения = ПараметрыНарушения(Показатель1,
		Показатель2,
		СтрШаблон(ПредметНарушенияБольше, ДанныеВыполнения.ПериодСтрокой),
		СтрШаблон(ПредметНарушенияМеньше, ДанныеВыполнения.ПериодСтрокой));
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
								|en = '%1 %2 %3 - %4 Итог [%5]'"),
		Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		ЗначениеПоказателя2,
		ЗначениеПоказателя3,
		Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = ДанныеВыполнения.НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(ДанныеВыполнения.Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_РавенствоПоказателей(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	Показатель1    = ДополнительныеПараметры.Показатель1;
	Показатель2    = ДополнительныеПараметры.Показатель2;
	
	ИмяПоказателя1 = СвойствоПоказателя(Показатель1, ДополнительныеПараметры.ПоказателиДекларации).ИмяПоля;
	СвойствоПоказателя2 = СвойствоПоказателя(Показатель2, ДополнительныеПараметры.ПоказателиДекларации);
	НаименованиеРаздела2 = НаименованиеВыбранногоРаздела(ДополнительныеПараметры, СвойствоПоказателя2.ИмяСтраницы);
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Сумма строк %1 Раздела 1 должна быть равна сумме строк %2 всех листов %3';
								|en = 'Сумма строк %1 Раздела 1 должна быть равна сумме строк %2 всех листов %3'"),
		КодСтрокиПредставление(ИмяПоказателя1),
		КодСтрокиПредставление(СвойствоПоказателя2.ИмяПоля),
		ПолучитьСклоненияСтроки(НаименованиеРаздела2,"Л=ru_RU", "ПД=Родительный")[0]);
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 23 НК РФ';
						|en = 'ст. 23 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаПоказателя1 = ЗначениеПоказателя(Показатель1, ДанныеОтчета, ДополнительныеПараметры);
	СуммаПоказателя2 = ЗначениеПоказателя(Показатель2, ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = СуммаПоказателя1 <> СуммаПоказателя2;
	ПараметрыНарушения = ПараметрыНарушения(СуммаПоказателя1, СуммаПоказателя2, 
		ДополнительныеПараметры.ПредметНарушенияБольше, ДополнительныеПараметры.ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), СуммаПоказателя1, ПараметрыНарушения.ЗнакСравнения, СуммаПоказателя2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

#КонецОбласти

#Область Раздел2

Процедура КонтрольныеСоотношения_Раздел2(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Раздел2");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Раздел2_ОбщаяСуммаДоходов(Результат, ДанныеОтчета, "2.1, 2.2", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаДивидендов(Результат, ДанныеОтчета, "2.3, 2.4", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ДоходыНеПодлежащиеНалогообложению(Результат, ДанныеОтчета, "2.5, 2.6", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ДоходыНеПодлежащиеНалогообложениюПоСтавке(Результат, ДанныеОтчета, "2.7, 2.8", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ОбщаяСуммаВычетовРасходов(Результат, ДанныеОтчета, "2.9", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалоговыхВычетов(Результат, ДанныеОтчета, "2.10, 2.11", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалоговыхВычетовНерезидент(Результат, ДанныеОтчета, "2.12", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ОбщаяСуммаРасходов(Результат, ДанныеОтчета, "2.13, 2.14", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаДоходовПрибыльКИК(Результат, ДанныеОтчета, "2.15, 2.16", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_НалоговаяБаза(Результат, ДанныеОтчета, "2.17, 2.18", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ОбщаяСуммаНалога(Результат, ДанныеОтчета, "2.19, 2.20", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ОбщаяСуммаНалогаВыплаты(Результат, ДанныеОтчета, "2.21", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ОбщаяСуммаНалогаМатериальнаяВыгода(Результат, ДанныеОтчета, "2.22", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаТорговогоСбора(Результат, ДанныеОтчета, "2.23", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_ФактическиеПлатежи(Результат, ДанныеОтчета, "2.24, 2.25", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалогаПрибыльКИК(Результат, ДанныеОтчета, "2.26, 2.27", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалогаБюджет(Результат, ДанныеОтчета, "2.28, 2.29", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалогаВозвратБюджета(Результат, ДанныеОтчета, "2.30, 2.31", ДополнительныеПараметры);
	ПроверкаКС_Раздел2_СуммаНалогаВозвратБюджетаДополнение(Результат, ДанныеОтчета, "2.32", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаДоходов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Сумма строк 010 + 051 всех листов Раздела 2
		|(при выполнении условия: строка 002 Раздела 2 = 2 или 3) должна быть равна сумме
		|всех строк 070 Приложения 1 (при выполнении условия: строка 020 Приложения 1 не равна 09) +
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 не равна 22) +
		|строка 050 Приложения 3 +
		|строка 220 Приложения 5';
		|en = 'Сумма строк 010 + 051 всех листов Раздела 2
		|(при выполнении условия: строка 002 Раздела 2 = 2 или 3) должна быть равна сумме
		|всех строк 070 Приложения 1 (при выполнении условия: строка 020 Приложения 1 не равна 09) +
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 не равна 22) +
		|строка 050 Приложения 3 +
		|строка 220 Приложения 5'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма доходов';
									|en = 'Завышена общая сумма доходов'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма доходов';
									|en = 'Занижена общая сумма доходов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	
	ОтборВидДохода = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПрибыльКИК,Иное", "ВидДохода", ВидыДоходов(ВыбраннаяФорма));
	
	ОтборКодВидаДохода = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Дивиденды", "КодВидаДоходаРФ", КодыВидовДоходовРФ(ВыбраннаяФорма), Ложь);
	
	ОтборЗаПределамиРФ = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Дивиденды", "КодВидаДоходаЗаПределамиРФ", КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма), Ложь);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборВидДохода);
	СуммаДоходов       = ЗначениеПоказателя("ОбщаяСуммаДоходов", ДанныеОтчета, ДополнительныеПараметры);
	ДоходыКИК          = ЗначениеПоказателя("ОбщаяСуммаДоходовКИК", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборКодВидаДохода);
	ДоходРФ            = ЗначениеПоказателя("СуммаДоходаРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборЗаПределамиРФ);
	ДоходЗаПределамиРФ = ЗначениеПоказателя("СуммаРубДоходаЗаПределамиРФ", ДанныеОтчета, ДополнительныеПараметры);
	ДополнительныеПараметры.Удалить("Условие");
	
	ДоходИП            = ЗначениеПоказателя("ОбщаяСуммаДоходаИП", ДанныеОтчета, ДополнительныеПараметры);
	ИвестиционныйВычет = ЗначениеПоказателя("ИнвестиционныйВычетКВосстановлению", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = СуммаДоходов + ДоходыКИК;
	Показатель2 = ДоходРФ + ДоходЗаПределамиРФ + ДоходИП + ИвестиционныйВычет;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 + %2 Итог [%3] %4 %5 + %6 + %7 + %8 Итог [%9]';
								|en = '%1 + %2 Итог [%3] %4 %5 + %6 + %7 + %8 Итог [%9]'"),
		СуммаДоходов, ДоходыКИК, Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		ДоходРФ, ДоходЗаПределамиРФ, ДоходИП, ИвестиционныйВычет, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаДивидендов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Сумма строк 010 всех листов Раздела 2 (при выполнении условия: строка 002 Раздела 2 = 1)
		|должна быть равна сумме
		|всех строк 070 Приложения 1 (при выполнении условия: строка 020 Приложения 1 = 09) +
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 = 22)';
		|en = 'Сумма строк 010 всех листов Раздела 2 (при выполнении условия: строка 002 Раздела 2 = 1)
		|должна быть равна сумме
		|всех строк 070 Приложения 1 (при выполнении условия: строка 020 Приложения 1 = 09) +
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 = 22)'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма доходов в виде дивидендов';
									|en = 'Завышена общая сумма доходов в виде дивидендов'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма доходов в виде дивидендов';
									|en = 'Занижена общая сумма доходов в виде дивидендов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	
	ОтборВидДохода     = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Дивиденды", "ВидДохода", ВидыДоходов(ВыбраннаяФорма));
	ОтборКодВидаДохода = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Дивиденды", "КодВидаДоходаРФ", КодыВидовДоходовРФ(ВыбраннаяФорма));
	ОтборЗаПределамиРФ = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Дивиденды", "КодВидаДоходаЗаПределамиРФ", КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма));
	
	ДополнительныеПараметры.Вставить("Условие", ОтборКодВидаДохода);
	ДоходРФ = ЗначениеПоказателя("СуммаДоходаРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборЗаПределамиРФ);
	ДоходЗаПределамиРФ = ЗначениеПоказателя("СуммаРубДоходаЗаПределамиРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборВидДохода);
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходов", ДанныеОтчета, ДополнительныеПараметры);
	ДополнительныеПараметры.Удалить("Условие");
	
	Показатель2 = ДоходРФ + ДоходЗаПределамиРФ;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, ДоходРФ, ДоходЗаПределамиРФ, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ДоходыНеПодлежащиеНалогообложению(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ПоказателиДекларации = ДополнительныеПараметры.ПоказателиДекларации;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Сумма строк 020 всех листов Раздела 2 должна быть равна сумме
		|строка %1 Приложения 4 + (строка %2 + строка %3 + строка %4) Приложения 2';
		|en = 'Сумма строк 020 всех листов Раздела 2 должна быть равна сумме
		|строка %1 Приложения 4 + (строка %2 + строка %3 + строка %4) Приложения 2'"),
		КодСтрокиПредставление(СвойствоПоказателя("СуммаДоходовНеПодлежащаяНалогообложению", ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя("СуммаРубЦенныеБумагиКИК", ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя("СуммаРубДивидендовКИК", ПоказателиДекларации).ИмяПоля));
	
	СсылкаНаЗакон = НСтр("ru = 'п. 8, п. 28, п. 33, п. 39 и п. 43 ст. 217 НК РФ';
						|en = 'п. 8, п. 28, п. 33, п. 39 и п. 43 ст. 217 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма доходов, не подлежащая налогообложению';
									|en = 'Завышена общая сумма доходов, не подлежащая налогообложению'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма доходов, не подлежащая налогообложению';
									|en = 'Занижена общая сумма доходов, не подлежащая налогообложению'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	КлючиПоказателя = Новый Массив;
	КлючиПоказателя.Добавить("СуммаДоходовНеПодлежащаяНалогообложению");
	КлючиПоказателя.Добавить("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК");
	КлючиПоказателя.Добавить("СуммаРубЦенныеБумагиКИК");
	КлючиПоказателя.Добавить("СуммаРубДивидендовКИК");
	
	РасшифровкаПраваяЧасть = "";
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СуммаСпискаПоказателей(КлючиПоказателя, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
								|en = '%1 %2 %3 Итог [%4]'"),
		Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		РасшифровкаПраваяЧасть,
		Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ДоходыНеПодлежащиеНалогообложениюПоСтавке(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 030 раздела 2 должна быть равна разнице строк 010 и строк 020 раздела 2';
						|en = 'Строка 030 раздела 2 должна быть равна разнице строк 010 и строк 020 раздела 2'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма дохода, подлежащая налогообложению
		|по соответствующей налоговой ставке';
		|en = 'Завышена сумма дохода, подлежащая налогообложению
		|по соответствующей налоговой ставке'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма дохода, подлежащая налогообложению
		|по соответствующей налоговой ставке';
		|en = 'Занижена сумма дохода, подлежащая налогообложению
		|по соответствующей налоговой ставке'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		ОбщаяСумма   = ЗначениеПоказателя("ОбщаяСуммаДоходов", Страница.Данные, ДополнительныеПараметры);
		НеПодлежитНО = ЗначениеПоказателя("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению",
			Страница.Данные, ДополнительныеПараметры);
		
		Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению",
			Страница.Данные, ДополнительныеПараметры);
		Показатель2 = Макс(ОбщаяСумма - НеПодлежитНО, 0);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
									|en = '%1 %2 %3 - %4 Итог [%5]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения,
			ОбщаяСумма, НеПодлежитНО, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаВычетовРасходов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС       = НСтр("ru = 'Строка 030 раздела 2 должна быть больше либо равна сумме строк 040 и 050 раздела 2';
							|en = 'Строка 030 раздела 2 должна быть больше либо равна сумме строк 040 и 050 раздела 2'");
	СсылкаНаЗакон    = НСтр("ru = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ';
							|en = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена общая сумма налоговых вычетов или общая сумма расходов,
		|принимаемая в уменьшение полученных доходов';
		|en = 'Завышена общая сумма налоговых вычетов или общая сумма расходов,
		|принимаемая в уменьшение полученных доходов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	НалоговыеВычеты = ЗначениеПоказателя("СуммаНалоговыхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	СуммаРасходов   = ЗначениеПоказателя("СуммаРасходов", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = НалоговыеВычеты + СуммаРасходов;
	
	ЭтоОшибка = Показатель1 < Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, НалоговыеВычеты, СуммаРасходов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалоговыхВычетов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 040 раздела 2 должна быть равна сумме
		|(строка 060 + строка 150) Приложения 3 +
		|(строка 070 + строка 181 + строка 200 + строка 210) Приложение 5 +
		|строка 160 Приложения 6 +
		|(строка 120 + строка 130 + строка 150 + строка 160) Приложение 7 +
		|(строка 060 + строка 070) Приложение 8';
		|en = 'Строка 040 раздела 2 должна быть равна сумме
		|(строка 060 + строка 150) Приложения 3 +
		|(строка 070 + строка 181 + строка 200 + строка 210) Приложение 5 +
		|строка 160 Приложения 6 +
		|(строка 120 + строка 130 + строка 150 + строка 160) Приложение 7 +
		|(строка 060 + строка 070) Приложение 8'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, 218 - 221 НК РФ';
						|en = 'ст. 210, 218 - 221 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма налоговых вычетов, уменьшающих налоговую базу';
									|en = 'Завышена общая сумма налоговых вычетов, уменьшающих налоговую базу'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма налоговых вычетов, уменьшающих налоговую базу';
									|en = 'Занижена общая сумма налоговых вычетов, уменьшающих налоговую базу'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВидыВычетов = Новый Массив;
	ВидыВычетов.Добавить("ОбщаяСуммаВычетаИП");
	ВидыВычетов.Добавить("ОбщаяСуммаПрофессиональныхВычетов");
	ВидыВычетов.Добавить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами");
	ВидыВычетов.Добавить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами");
	ВидыВычетов.Добавить("ОбщаяСуммаСтандартныхСоциальныхВычетов");
	ВидыВычетов.Добавить("ИнвестиционныйВычет");
	ВидыВычетов.Добавить("ОбщаяСуммаИмущественногоВычета");
	ВидыВычетов.Добавить("ЦенныеБумагиСуммаПрибылиКВычету");
	ВидыВычетов.Добавить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	Приложение7Итоги = ДанныеОтчета.Приложение7[ДанныеОтчета.Приложение7.Количество() - 1].Данные;
	ВычетыПриложения7 = Новый Массив;
	ВычетыПриложения7.Добавить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы");
	ВычетыПриложения7.Добавить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты");
	ВычетыПриложения7.Добавить("СуммаРасходовНаПриобретениеНедвижимостиКВычету");
	ВычетыПриложения7.Добавить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету");
	
	РасшифровкаПраваяЧасть = "";
	
	Показатель1 = ЗначениеПоказателя("СуммаНалоговыхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СуммаСпискаПоказателей(ВидыВычетов, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры)
		+ СуммаСпискаПоказателей(ВычетыПриложения7, Приложение7Итоги, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
								|en = '%1 %2 %3 Итог [%4]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалоговыхВычетовНерезидент(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 040 раздела 2 должна быть равна 0 при строке 001 Раздела 2 = %1
		|и ""Статус налогоплательщика"" Титульного листа формы 3НДФЛ = %2';
		|en = 'Строка 040 раздела 2 должна быть равна 0 при строке 001 Раздела 2 = %1
		|и ""Статус налогоплательщика"" Титульного листа формы 3НДФЛ = %2'");
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 210, 218 - 221 НК РФ';
							|en = 'ст. 210, 218 - 221 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена общая сумма налоговых вычетов, уменьшающих налоговую базу';
							|en = 'Завышена общая сумма налоговых вычетов, уменьшающих налоговую базу'");
	
	СтатусНП = ДанныеОтчета.Титульный.СтатусНалогоплательщика;
	
	ТребуемыйСтатус = СтатусНалогоплательщикаНерезидент();
	ТребуемаяСтавка = НалоговыеСтавки(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма).ПоУмолчанию;
	
	ОписаниеКС = СтрШаблон(СтрЗаменить(ОписаниеКС, Символы.ПС, " "), ТребуемаяСтавка, ТребуемыйСтатус);
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
		СуммаВычета     = ЗначениеПоказателя("СуммаНалоговыхВычетов", Страница.Данные, ДополнительныеПараметры);
		НалоговаяСтавка = ЗначениеПоказателя("НалоговаяСтавка", Страница.Данные, ДополнительныеПараметры);
		
		Если НалоговаяСтавка = ТребуемаяСтавка И СтатусНП = ТребуемыйСтатус Тогда
			ЭтоОшибка = СуммаВычета <> 0;
		Иначе
			ЭтоОшибка = Ложь;
		КонецЕсли;
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 > 0 при ставке %2%% и статусе налогоплательщика = %3';
									|en = '%1 > 0 при ставке %2%% и статусе налогоплательщика = %3'"),
			СуммаВычета, Формат(НалоговаяСтавка, "ЧГ=0"), СтатусНП);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПредметНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаРасходов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 050 раздела 2 должна быть равна сумме (строка 040 + строка 052) Приложения 8';
						|en = 'Строка 050 раздела 2 должна быть равна сумме (строка 040 + строка 052) Приложения 8'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ';
						|en = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма расходов, принимаемая в уменьшение полученных доходов';
									|en = 'Завышена общая сумма расходов, принимаемая в уменьшение полученных доходов'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма расходов, принимаемая в уменьшение полученных доходов';
									|en = 'Занижена общая сумма расходов, принимаемая в уменьшение полученных доходов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаРасходов = ЗначениеПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", ДанныеОтчета, ДополнительныеПараметры);
	СуммаУбытка   = ЗначениеПоказателя("ЦенныеБумагиСуммаУбытка", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаРасходов", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СуммаРасходов + СуммаУбытка;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаРасходов, СуммаУбытка, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаДоходовПрибыльКИК(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 051 раздела 2 (при выполнении условия: строка 002 Раздела 2 = 2)
		|должна быть равна сумме
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 = 21)';
		|en = 'Строка 051 раздела 2 (при выполнении условия: строка 002 Раздела 2 = 2)
		|должна быть равна сумме
		|всех строк 070 Приложения 2 (при выполнении условия: строка 031 Приложения 2 = 21)'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ';
						|en = 'ст. 210, 214.1, 214.3, 214.4, 214.5 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма доходов в виде прибыли иностранных компаний';
									|en = 'Завышена общая сумма доходов в виде прибыли иностранных компаний'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма доходов в виде прибыли иностранных компаний';
									|en = 'Занижена общая сумма доходов в виде прибыли иностранных компаний'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	
	ОтборВидДохода     = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПрибыльКИК", "ВидДохода", ВидыДоходов(ВыбраннаяФорма));
	ОтборЗаПределамиРФ = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПрибыльКИК", "КодВидаДоходаЗаПределамиРФ", КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма));
	
	ДополнительныеПараметры.Вставить("Условие", ОтборВидДохода);
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходовКИК", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", ОтборЗаПределамиРФ);
	Показатель2 = ЗначениеПоказателя("СуммаРубДоходаЗаПределамиРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_НалоговаяБаза(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 060 раздела 2 должна быть равна сумме
		|(строка 030 + строка 051 - строка 040 - строка 050) раздела 2
		|при условии, что строка 060 раздела 2 больше или равна 0';
		|en = 'Строка 060 раздела 2 должна быть равна сумме
		|(строка 030 + строка 051 - строка 040 - строка 050) раздела 2
		|при условии, что строка 060 раздела 2 больше или равна 0'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена налоговая база';
									|en = 'Завышена налоговая база'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена налоговая база';
									|en = 'Занижена налоговая база'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Доходы    = ЗначениеПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ДанныеОтчета, ДополнительныеПараметры);
	ДоходыКИК = ЗначениеПоказателя("ОбщаяСуммаДоходовКИК", ДанныеОтчета, ДополнительныеПараметры);
	Вычеты    = ЗначениеПоказателя("СуммаНалоговыхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	Расходы   = ЗначениеПоказателя("СуммаРасходов", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("НалоговаяБаза", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = Доходы + ДоходыКИК - Вычеты - Расходы;
	
	ЭтоОшибка = Показатель1 >= 0 И Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Если Показатель1 < 0 Тогда
		Расшифровка = СтрШаблон(НСтр("ru = '%1 < 0';
									|en = '%1 < 0'"), Показатель1);
	Иначе
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 - %5 - %6 Итог [%7]';
									|en = '%1 %2 %3 + %4 - %5 - %6 Итог [%7]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, Доходы,
			ДоходыКИК, Вычеты, Расходы, Показатель2);
	КонецЕсли;
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаНалога(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 070 раздела 2 должна быть равна
		|произведению (строка 060 * строка 001) раздела 2 (с учетом округления)';
		|en = 'Строка 070 раздела 2 должна быть равна
		|произведению (строка 060 * строка 001) раздела 2 (с учетом округления)'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма налога, исчисленная к уплате';
									|en = 'Завышена общая сумма налога, исчисленная к уплате'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма налога, исчисленная к уплате';
									|en = 'Занижена общая сумма налога, исчисленная к уплате'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		НалоговаяБаза   = ЗначениеПоказателя("НалоговаяБаза", Страница.Данные, ДополнительныеПараметры);
		НалоговаяСтавка = ЗначениеПоказателя("НалоговаяСтавка", Страница.Данные, ДополнительныеПараметры);
		
		Показатель1   = ЗначениеПоказателя("СуммаНалогаИсчисленная", Страница.Данные, ДополнительныеПараметры);
		Показатель2   = Окр(НалоговаяБаза * НалоговаяСтавка / 100);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 * %4 Итог [%5]';
									|en = '%1 %2 %3 * %4 Итог [%5]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, НалоговаяБаза, НалоговаяСтавка, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
 
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаНалогаВыплаты(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 080 раздела 2 должна быть равна сумме всех строк 080 Приложения 1';
						|en = 'Строка 080 раздела 2 должна быть равна сумме всех строк 080 Приложения 1'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма налога, удержанного у источника выплаты';
									|en = 'Завышена общая сумма налога, удержанного у источника выплаты'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма налога, удержанного у источника выплаты';
									|en = 'Занижена общая сумма налога, удержанного у источника выплаты'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("СуммаНалогаУдержанная", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("СуммаНалогаУдержаннаяРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ОбщаяСуммаНалогаМатериальнаяВыгода(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	НалоговаяСтавка = НалоговыеСтавки(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма).Вклады;
	ЭтоОшибка       = Ложь;
	ОписаниеКС      = СтрШаблон(НСтр("ru = 'Строка 090 раздела 2 должна быть равна 0
		|при условии, что строка 001 раздела 2 равна %1';
		|en = 'Строка 090 раздела 2 должна быть равна 0
		|при условии, что строка 001 раздела 2 равна %1'"), НалоговаяСтавка);
	СсылкаНаЗакон   = НСтр("ru = 'ст. 210 НК РФ';
							|en = 'ст. 210 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена общая сумма налога,
		|удержанного в отношении доходов в виде материальной выгоды';
		|en = 'Завышена общая сумма налога,
		|удержанного в отношении доходов в виде материальной выгоды'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаУдержаннаяСМатериальнойВыгоды",
			Страница.Данные, ДополнительныеПараметры);
		Показатель2 = ЗначениеПоказателя("НалоговаяСтавка", Страница.Данные, ДополнительныеПараметры);
		
		ЭтоОшибка = Показатель2 = НалоговаяСтавка И Показатель1 <> 0;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, 0, ПредметНарушения);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 0';
									|en = '%1 %2 0'"), Показатель1, ПараметрыНарушения.ЗнакСравнения);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаТорговогоСбора(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС       = НСтр("ru = 'Строка 100 раздела 2 должна быть меньше или равна строке 070 раздела 2';
							|en = 'Строка 100 раздела 2 должна быть меньше или равна строке 070 раздела 2'");
	СсылкаНаЗакон    = НСтр("ru = 'ст. 210 НК РФ';
							|en = 'ст. 210 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету';
							|en = 'Завышена сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		Показатель1 = ЗначениеПоказателя("СуммаТорговогоСбора", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = ЗначениеПоказателя("СуммаНалогаИсчисленная", Страница.Данные, ДополнительныеПараметры);
		ЭтоОшибка   = Показатель1 > Показатель2;
		
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
									|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_ФактическиеПлатежи(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 110 раздела 2 должна быть равна строке 070 Приложения 3';
						|en = 'Строка 110 раздела 2 должна быть равна строке 070 Приложения 3'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 210 НК РФ';
						|en = 'ст. 210 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма фактически уплаченных платежей';
									|en = 'Завышена сумма фактически уплаченных платежей'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма фактически уплаченных платежей';
									|en = 'Занижена сумма фактически уплаченных платежей'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("СуммаУплаченныхАвансовыхПлатежей", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("СуммаУплаченныхАвансовыхПлатежейИП", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалогаПрибыльКИК(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 130 раздела 2 по ставке 13% должна быть равна
		|сумме строк 130 Приложения 2 по ставке 13%';
		|en = 'Строка 130 раздела 2 по ставке 13% должна быть равна
		|сумме строк 130 Приложения 2 по ставке 13%'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 228 НК РФ';
						|en = 'ст. 228 НК РФ'");
	
	ДопустимоеРасхождение = ДопустимоеРасхождениеВСуммахНалогаКИК();
	
	ПредметНарушенияБольше = СтрШаблон(НСтр("ru = 'Завышена сумма налога, уплаченная в иностранных государствах,
		|подлежащая зачету в РФ (при условии расхождения свыше %1 руб.)';
		|en = 'Завышена сумма налога, уплаченная в иностранных государствах,
		|подлежащая зачету в РФ (при условии расхождения свыше %1 руб.)'"), ДопустимоеРасхождение);
	ПредметНарушенияМеньше = СтрШаблон(НСтр("ru = 'Занижена сумма налога, уплаченная в иностранных государствах,
		|подлежащая зачету в РФ (при условии расхождения свыше %1 руб.)';
		|en = 'Занижена сумма налога, уплаченная в иностранных государствах,
		|подлежащая зачету в РФ (при условии расхождения свыше %1 руб.)'"), ДопустимоеРасхождение);
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	
	НалоговаяСтавка = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПоУмолчанию", "НалоговаяСтавка", НалоговыеСтавки(ВыбраннаяФорма));
	
	СтавкаЗаПределамиРФ = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПоУмолчанию", "НалоговаяСтавкаДоходаЗаПределамиРФ", НалоговыеСтавки(ВыбраннаяФорма));
	
	ДополнительныеПараметры.Вставить("Условие", НалоговаяСтавка);
	Показатель1 = ЗначениеПоказателя("СуммаНалогаИностранногоГосударства", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", СтавкаЗаПределамиРФ);
	Показатель2 = ЗначениеПоказателя("СуммаПодлежащаяЗачетуВРФ", ДанныеОтчета, ДополнительныеПараметры);
	
	РазностьПоказателей = Показатель1 - Показатель2;
	
	Если РазностьПоказателей < 0 Тогда
		РазностьПоказателей = РазностьПоказателей * -1;
	КонецЕсли;
	
	ЭтоОшибка = РазностьПоказателей > ДопустимоеРасхождение;
	
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалогаБюджет(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 150 раздела 2 должна быть равна разнице строк
		|(строка 070 - строка 080 - строка 090 - строка 100 - строка 110 - строка 120 - строка 130 - строка 140) раздела 2
		|при условии, что строка 150 раздела 2 больше 0';
		|en = 'Строка 150 раздела 2 должна быть равна разнице строк
		|(строка 070 - строка 080 - строка 090 - строка 100 - строка 110 - строка 120 - строка 130 - строка 140) раздела 2
		|при условии, что строка 150 раздела 2 больше 0'");
	
	ЭтоОшибка     = Ложь;
	СсылкаНаЗакон = НСтр("ru = 'ст. 225, 346.45 НК РФ';
						|en = 'ст. 225, 346.45 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма налога, подлежащая уплате (доплате) в бюджет';
									|en = 'Завышена сумма налога, подлежащая уплате (доплате) в бюджет'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма налога, подлежащая уплате (доплате) в бюджет';
									|en = 'Занижена сумма налога, подлежащая уплате (доплате) в бюджет'");
	
	ВидыРасходов = Новый Массив;
	ВидыРасходов.Добавить("СуммаНалогаУдержанная");
	ВидыРасходов.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	ВидыРасходов.Добавить("СуммаТорговогоСбора");
	ВидыРасходов.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	ВидыРасходов.Добавить("СуммаФиксированныхАвансовыхПлатежей");
	ВидыРасходов.Добавить("СуммаНалогаИностранногоГосударства");
	ВидыРасходов.Добавить("СуммаНалогаПСН");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		РасшифровкаПраваяЧасть = "";
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаПодлежащаяУплате", Страница.Данные, ДополнительныеПараметры);
		Если Показатель1 > 0 Тогда
			
			НалогИсчисленный = ЗначениеПоказателя("СуммаНалогаИсчисленная", Страница.Данные, ДополнительныеПараметры);
			
			СуммаРасходов = СуммаСпискаПоказателей(ВидыРасходов, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
			РасшифровкаПраваяЧасть = СтрЗаменить(РасшифровкаПраваяЧасть, "+", "-");
			
			Показатель2 = НалогИсчисленный - СуммаРасходов;
			ЭтоОшибка = Показатель1 <> Показатель2;
		
		КонецЕсли;
		
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Если Показатель1 <= 0 Тогда
			Расшифровка = СтрШаблон(НСтр("ru = '%1 <= 0';
										|en = '%1 <= 0'"), Показатель1);
		Иначе
			Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
										|en = '%1 %2 %3 - %4 Итог [%5]'"),
				Показатель1, ПараметрыНарушения.ЗнакСравнения, НалогИсчисленный, РасшифровкаПраваяЧасть, Показатель2);
		КонецЕсли;
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалогаВозвратБюджета(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 160 раздела 2 должна быть равна сумме
		|(строка 080 + строка 090 + строка 100 + строка 110 + строка 120 + строка 130 - строка 070) раздела 2
		|при условии, что строка 160 раздела 2 > 0 и строка 160 раздела 2 <
		|(строка 080 + строка 090 + строка 110) раздела 2';
		|en = 'Строка 160 раздела 2 должна быть равна сумме
		|(строка 080 + строка 090 + строка 100 + строка 110 + строка 120 + строка 130 - строка 070) раздела 2
		|при условии, что строка 160 раздела 2 > 0 и строка 160 раздела 2 <
		|(строка 080 + строка 090 + строка 110) раздела 2'");
	
	ЭтоОшибка     = Ложь;
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма налога, подлежащая возврату из бюджета';
									|en = 'Завышена сумма налога, подлежащая возврату из бюджета'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма налога, подлежащая возврату из бюджета';
									|en = 'Занижена сумма налога, подлежащая возврату из бюджета'");
	
	КлючиУсловия = Новый Массив;
	КлючиУсловия.Добавить("СуммаНалогаУдержанная");
	КлючиУсловия.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	КлючиУсловия.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	
	ВидыРасхода = Новый Массив;
	ВидыРасхода.Добавить("СуммаНалогаУдержанная");
	ВидыРасхода.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	ВидыРасхода.Добавить("СуммаТорговогоСбора");
	ВидыРасхода.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	ВидыРасхода.Добавить("СуммаФиксированныхАвансовыхПлатежей");
	ВидыРасхода.Добавить("СуммаНалогаИностранногоГосударства");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		РасшифровкаПраваяЧасть = "";
		СтрокаНарушения        = "";
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаПодлежащаяВозврату", Страница.Данные, ДополнительныеПараметры);
		Если Показатель1 > 0 Тогда
			
			НалогИсчисленный = ЗначениеПоказателя("СуммаНалогаИсчисленная", Страница.Данные, ДополнительныеПараметры);
			ДопПоказатель = СуммаСпискаПоказателей(КлючиУсловия, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
			
			Если Показатель1 < ДопПоказатель Тогда
				
				РасшифровкаПраваяЧасть = "";
				СуммаРасхода = СуммаСпискаПоказателей(ВидыРасхода, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
				Показатель2  = СуммаРасхода - НалогИсчисленный;
				ЭтоОшибка    = Показатель1 <> Показатель2;
				
				ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
				СтрокаНарушения    = ПараметрыНарушения.СтрокаНарушения;
				
				Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
											|en = '%1 %2 %3 - %4 Итог [%5]'"),
					Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, НалогИсчисленный, Показатель2);
				
			Иначе
				Расшифровка = СтрШаблон(НСтр("ru = '%1 >= %2';
											|en = '%1 >= %2'"), Показатель1, РасшифровкаПраваяЧасть);
			КонецЕсли;
			
		Иначе
			Расшифровка = СтрШаблон(НСтр("ru = '%1 <= 0';
										|en = '%1 <= 0'"), Показатель1);
		КонецЕсли;
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_Раздел2_СуммаНалогаВозвратБюджетаДополнение(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС = НСтр("ru = 'Строка 160 раздела 2 должна быть меньше или равна сумме
		|(строка 080 + строка 090 + строка 110) раздела 2';
		|en = 'Строка 160 раздела 2 должна быть меньше или равна сумме
		|(строка 080 + строка 090 + строка 110) раздела 2'");
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
							|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена сумма налога, подлежащая возврату из бюджета';
							|en = 'Завышена сумма налога, подлежащая возврату из бюджета'");
	
	ВидыРасхода = Новый Массив;
	ВидыРасхода.Добавить("СуммаНалогаУдержанная");
	ВидыРасхода.Добавить("СуммаНалогаУдержаннаяСМатериальнойВыгоды");
	ВидыРасхода.Добавить("СуммаУплаченныхАвансовыхПлатежей");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		РасшифровкаПраваяЧасть = "";
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаПодлежащаяВозврату", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = СуммаСпискаПоказателей(ВидыРасхода, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
		
		ЭтоОшибка = Показатель1 > Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
									|en = '%1 %2 %3 Итог [%4]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение2

Процедура КонтрольныеСоотношения_Приложение2(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Приложение2");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Приложение2_СуммаДоходаЛиквидацияКИК(Результат, ДанныеОтчета, "4.1", ДополнительныеПараметры);
	ПроверкаКС_Приложение2_СуммаДоходаПрибыльКИК(Результат, ДанныеОтчета, "4.2", ДополнительныеПараметры);
	ПроверкаКС_Приложение2_ОбщаяСуммаДоходаПрибыльКИК(Результат, ДанныеОтчета, "4.3, 4.4", ДополнительныеПараметры);
	ПроверкаКС_Приложение2_СуммаДоходаПоСтавкеРФ(Результат, ДанныеОтчета, "4.5, 4.6", ДополнительныеПараметры);
	ПроверкаКС_Приложение2_СуммаНалогаКЗачету(Результат, ДанныеОтчета, "4.7", ДополнительныеПараметры);
	ПроверкаКС_Приложение2_СуммаНалогаКЗачетуДополнение(Результат, ДанныеОтчета, "4.8", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_СуммаДоходаЛиквидацияКИК(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ПрибыльКИК = КодыВидовДоходовЗаПределамиРФ(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма).ПрибыльКИК;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка 071 Приложения 2 должна быть равна 0
		|при выполнении условия: строка 031 не равна %1 Приложения 2';
		|en = 'Строка 071 Приложения 2 должна быть равна 0
		|при выполнении условия: строка 031 не равна %1 Приложения 2'"), ПрибыльКИК);
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
							|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма дохода в денежной и (или) натуральной формах,
		|полученная при ликвидации иностранной организации (прекращении (ликвидации) иностранной
		|структуры без образования юридического лица), освобождаемая от налогообложения
		|на основании положений пункта 60 статьи 217 НК РФ';
		|en = 'Завышена сумма дохода в денежной и (или) натуральной формах,
		|полученная при ликвидации иностранной организации (прекращении (ликвидации) иностранной
		|структуры без образования юридического лица), освобождаемая от налогообложения
		|на основании положений пункта 60 статьи 217 НК РФ'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		Показатель1 = ЗначениеПоказателя("СуммаРубСтоимостиИмуществаПриЛиквидацииКИК", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = ЗначениеПоказателя("КодВидаДоходаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		
		Если Показатель2 <> ПрибыльКИК Тогда
			ЭтоОшибка = Показатель1 <> 0;
		Иначе
			ЭтоОшибка = Ложь;
		КонецЕсли;
		
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, 0, ПредметНарушения);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 0';
									|en = '%1 %2 0'"), Показатель1, ПараметрыНарушения.ЗнакСравнения);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_СуммаДоходаПрибыльКИК(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ПрибыльКИК = КодыВидовДоходовЗаПределамиРФ(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма).ПрибыльКИК;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка 072 Приложения 2 должна быть равна 0
		|при выполнении условия: строка 031 не равна %1 Приложения 2';
		|en = 'Строка 072 Приложения 2 должна быть равна 0
		|при выполнении условия: строка 031 не равна %1 Приложения 2'"), ПрибыльКИК);
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения';
		|en = 'Завышена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		Показатель1 = ЗначениеПоказателя("СуммаРубДивидендовКИК", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = ЗначениеПоказателя("КодВидаДоходаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		
		Если Показатель2 <> ПрибыльКИК Тогда
			ЭтоОшибка = Показатель1 <> 0;
		Иначе
			ЭтоОшибка = Ложь;
		КонецЕсли;
		
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, 0, ПредметНарушения);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 0';
									|en = '%1 %2 0'"), Показатель1, ПараметрыНарушения.ЗнакСравнения);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_ОбщаяСуммаДоходаПрибыльКИК(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 110 Приложения 2 должна быть равна
		|произведению (строка 100 * строка 090) Приложения 2';
		|en = 'Строка 110 Приложения 2 должна быть равна
		|произведению (строка 100 * строка 090) Приложения 2'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения';
		|en = 'Завышена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения';
		|en = 'Занижена сумма дохода, полученная от контролируемой иностранной компании
		|в результате распределения прибыли этой компании, освобождаемая от налогообложения'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		КурсВалюты  = ЗначениеПоказателя("КурсНаДатуУплатыНалогаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		СуммаНалога = ЗначениеПоказателя("СуммаНалогаУплаченнаяЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = Окр(КурсВалюты * СуммаНалога, 2);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 * %4 Итог [%5]';
									|en = '%1 %2 %3 * %4 Итог [%5]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, КурсВалюты, СуммаНалога, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_СуммаДоходаПоСтавкеРФ(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 120 Приложения 2 должна быть равна
		|произведению строка 070 Приложения 2 * строка 001 Приложения 2 / 100';
		|en = 'Строка 120 Приложения 2 должна быть равна
		|произведению строка 070 Приложения 2 * строка 001 Приложения 2 / 100'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма налога, исчисленная в Российской Федерации
		|по соответствующей ставке';
		|en = 'Завышена сумма налога, исчисленная в Российской Федерации
		|по соответствующей ставке'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма налога, исчисленная в Российской Федерации
		|по соответствующей ставке';
		|en = 'Занижена сумма налога, исчисленная в Российской Федерации
		|по соответствующей ставке'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		СуммаДохода     = ЗначениеПоказателя("СуммаРубДоходаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		НалоговаяСтавка = ЗначениеПоказателя("НалоговаяСтавкаДоходаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		
		Показатель1 = ЗначениеПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = Окр(СуммаДохода * НалоговаяСтавка / 100);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 * %4 / 100 Итог [%5]';
									|en = '%1 %2 %3 * %4 / 100 Итог [%5]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаДохода, НалоговаяСтавка, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_СуммаНалогаКЗачету(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 130 Приложения 2 должна быть равна сумме
		|(строка 110 + строка 115) Приложение 2
		|при условии, что строка 110 Приложения 2 меньше или равна строке 120 Приложения 2';
		|en = 'Строка 130 Приложения 2 должна быть равна сумме
		|(строка 110 + строка 115) Приложение 2
		|при условии, что строка 110 Приложения 2 меньше или равна строке 120 Приложения 2'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации';
		|en = 'Завышена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации';
		|en = 'Занижена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		НалогУплаченный  = ЗначениеПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ",
			Страница.Данные, ДополнительныеПараметры);
		ПрибыльКИК       = ЗначениеПоказателя("СуммаНалогаИсчисленнаяВОтношенииПрибылиКИК",
			Страница.Данные, ДополнительныеПараметры);
		НалогИсчисленный = ЗначениеПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ",
			Страница.Данные, ДополнительныеПараметры);
		
		Показатель1 = ЗначениеПоказателя("СуммаПодлежащаяЗачетуВРФ", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = Окр(НалогУплаченный + ПрибыльКИК);
		
		ЭтоОшибка = НалогУплаченный <= НалогИсчисленный И Показатель1 <> Показатель2;
		ПараметрыНарушения   = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		ЗнакСравненияУсловие = ПараметрыНарушения(НалогУплаченный, НалогИсчисленный, "", "").ЗнакСравнения;
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]; %3 %6 %7';
									|en = '%1 %2 %3 + %4 Итог [%5]; %3 %6 %7'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, НалогУплаченный, ПрибыльКИК, Показатель2,
			ЗнакСравненияУсловие, НалогИсчисленный);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение2_СуммаНалогаКЗачетуДополнение(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 130 Приложения 2 должна быть равна строке 120 Приложение 2
		|при условии, что строка 120 Приложения 2 меньше или равна строке 110 Приложения 2';
		|en = 'Строка 130 Приложения 2 должна быть равна строке 120 Приложение 2
		|при условии, что строка 120 Приложения 2 меньше или равна строке 110 Приложения 2'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 210, ст. 225, ст. 231 НК РФ';
						|en = 'ст. 210, ст. 225, ст. 231 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации';
		|en = 'Завышена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации';
		|en = 'Занижена расчетная сумма налога, подлежащая зачету (уменьшению)
		|в Российской Федерации'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		СуммаКЗачету    = ЗначениеПоказателя("СуммаПодлежащаяЗачетуВРФ", Страница.Данные, ДополнительныеПараметры);
		НалогУплаченный = ЗначениеПоказателя("СуммаНалогаРубУплаченнаяЗаПределамиРФ", Страница.Данные, ДополнительныеПараметры);
		НалогИсчисленный= ЗначениеПоказателя("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ",
			Страница.Данные, ДополнительныеПараметры);
		
		ЭтоОшибка = НалогИсчисленный <= НалогУплаченный И СуммаКЗачету <> НалогИсчисленный;
		ПараметрыНарушения = ПараметрыНарушения(СуммаКЗачету, НалогИсчисленный,
			ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
									|en = '%1 %2 %3'"), СуммаКЗачету, ПараметрыНарушения.ЗнакСравнения, НалогИсчисленный);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Приложение3

Процедура КонтрольныеСоотношения_Приложение3(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Приложение3");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Приложение3_ФактическиеРасходы(Результат, ДанныеОтчета, "5.1, 5.2", ДополнительныеПараметры);
	ПроверкаКС_Приложение3_ЧастнаяПредпринимательскаяДеятельность(Результат, ДанныеОтчета, "5.3, 5.4", ДополнительныеПараметры);
	ПроверкаКС_Приложение3_ЗавышениеЗатратПоНормативу(Результат, ДанныеОтчета, "5.5", ДополнительныеПараметры);
	ПроверкаКС_Приложение3_ВычетПредпринимательскаяДеятельность(Результат, ДанныеОтчета, "5.6", ДополнительныеПараметры);
	ПроверкаКС_Приложение3_ОбщаяСуммаПрофессиональныхВычетов(Результат, ДанныеОтчета, "5.7, 5.8", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение3_ФактическиеРасходы(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 040 Приложения 3 должна быть равна сумме
		|(строка 041 + срока 042 + строка 043 + строка 044) Приложения 3';
		|en = 'Строка 040 Приложения 3 должна быть равна сумме
		|(строка 041 + срока 042 + строка 043 + строка 044) Приложения 3'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 221, 227 НК РФ';
						|en = 'ст. 221, 227 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма фактически произведенных расходов,
		|учитываемых в составе профессионального налогового вычета';
		|en = 'Завышена сумма фактически произведенных расходов,
		|учитываемых в составе профессионального налогового вычета'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма фактически произведенных расходов,
		|учитываемых в составе профессионального налогового вычета';
		|en = 'Занижена сумма фактически произведенных расходов,
		|учитываемых в составе профессионального налогового вычета'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Расходы = Новый Массив;
	Расходы.Добавить("МатериальныеРасходыИП");
	Расходы.Добавить("АмортизацияИП");
	Расходы.Добавить("ЗарплатаИП");
	Расходы.Добавить("ПрочиеРасходыИП");
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		РасшифровкаПраваяЧасть = "";
		
		Показатель1 = ЗначениеПоказателя("СуммаРасходовИП", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = СуммаСпискаПоказателей(Расходы, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
									|en = '%1 %2 %3 Итог [%4]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверкаКС_Приложение3_ЧастнаяПредпринимательскаяДеятельность(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 050 Приложения 3 должна быть равна сумме строк 030 Приложения 3';
						|en = 'Строка 050 Приложения 3 должна быть равна сумме строк 030 Приложения 3'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 221, 227 НК РФ';
						|en = 'ст. 221, 227 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма дохода, полученного от предпринимательской,
		|адвокатской деятельности и частной практики';
		|en = 'Завышена общая сумма дохода, полученного от предпринимательской,
		|адвокатской деятельности и частной практики'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма дохода, полученного от предпринимательской,
		|адвокатской деятельности и частной практики';
		|en = 'Занижена общая сумма дохода, полученного от предпринимательской,
		|адвокатской деятельности и частной практики'");
		
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
	ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаДоходаИП", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("СуммаДоходаИП", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение3_ЗавышениеЗатратПоНормативу(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	РазрешенныеВидыДеятельности = РазрешенныеВидыДеятельности(ВыбраннаяФорма);
	ПроцентВычета  = ПроцентПрофессиональногоВычета(ВыбраннаяФорма);
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка 060 Приложения 3 должна быть равна
		|сумме расходов в соответствии с Порядком учета доходов и расходов и хозяйственных операций,
		|утвержденным Приказом Минфина России и МНС России от 13.08.2002 N 86н/БГ-3-04/430 или
		|произведению %1 * строка 030 Приложения 3
		|для кода вида деятельности (строка 010) = 02, 03 04, 06, 07, 08 или 09
		|при отсутствии документально подтвержденных расходов';
		|en = 'Строка 060 Приложения 3 должна быть равна
		|сумме расходов в соответствии с Порядком учета доходов и расходов и хозяйственных операций,
		|утвержденным Приказом Минфина России и МНС России от 13.08.2002 N 86н/БГ-3-04/430 или
		|произведению %1 * строка 030 Приложения 3
		|для кода вида деятельности (строка 010) = 02, 03 04, 06, 07, 08 или 09
		|при отсутствии документально подтвержденных расходов'"), Формат(ПроцентВычета / 100, "ЧДЦ=1"));
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 221, 227 НК РФ';
						|en = 'ст. 221, 227 НК РФ'");
	
	ПредметНарушения = СтрШаблон(НСтр("ru = 'Возможно необоснованное применение профессиональных налоговых вычетов;
		|включения в них затрат, непосредственно не связанных с получением дохода от предпринимательской деятельности;
		|завышение норматива профессиональных налоговых вычетов, установленного для ИП;
		|одновременное включение в состав профессиональных налоговых вычетов как документально подтвержденных расходов
		|так и по нормативу в размере %1%% от общей суммы дохода;
		|включение в состав профессиональных налоговых вычетов затрат по нормативу в размере %1%%
		|от общей суммы дохода для кода вида деятельности (строка 010) = 02, 03, 04, 06, 07, 08 или 09;
		|включение в состав профессиональных налоговых вычетов убытков
		|прошлых лет/возможное занижение профессиональных налоговых вычетов';
		|en = 'Возможно необоснованное применение профессиональных налоговых вычетов;
		|включения в них затрат, непосредственно не связанных с получением дохода от предпринимательской деятельности;
		|завышение норматива профессиональных налоговых вычетов, установленного для ИП;
		|одновременное включение в состав профессиональных налоговых вычетов как документально подтвержденных расходов
		|так и по нормативу в размере %1%% от общей суммы дохода;
		|включение в состав профессиональных налоговых вычетов затрат по нормативу в размере %1%%
		|от общей суммы дохода для кода вида деятельности (строка 010) = 02, 03, 04, 06, 07, 08 или 09;
		|включение в состав профессиональных налоговых вычетов убытков
		|прошлых лет/возможное занижение профессиональных налоговых вычетов'"), ПроцентВычета);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаВычетаИП", ДанныеОтчета, ДополнительныеПараметры);
	СуммаРасходов = ЗначениеПоказателя("СуммаРасходовИП", ДанныеОтчета, ДополнительныеПараметры);
	
	ОтборКодВидаДеятельности = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		РазрешенныеВидыДеятельности, "КодВидаДеятельностиИП");
	
	ДополнительныеПараметры.Вставить("Условие", ОтборКодВидаДеятельности);
	СуммаДохода = ЗначениеПоказателя("СуммаДоходаИП", ДанныеОтчета, ДополнительныеПараметры);
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель2 = Окр(СуммаДохода * ПроцентВычета / 100, 2);
	
	ЭтоОшибка = Не(Показатель1 = СуммаРасходов Или Показатель1 = Показатель2);
	
	ПараметрыНарушения1 = ПараметрыНарушения(Показатель1, СуммаРасходов, ПредметНарушения);
	ПараметрыНарушения2 = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	СтрокаНарушения = ?(ПараметрыНарушения1.СтрокаНарушения = "",
		ПараметрыНарушения2.СтрокаНарушения, ПараметрыНарушения1.СтрокаНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3; %1 %4 %5 * %6 Итог [%7]';
								|en = '%1 %2 %3; %1 %4 %5 * %6 Итог [%7]'"),
		Показатель1, ПараметрыНарушения1.ЗнакСравнения, СуммаРасходов,
		ПараметрыНарушения2.ЗнакСравнения, СуммаДохода, ПроцентВычета / 100, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = СтрокаНарушения;
	СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение3_ВычетПредпринимательскаяДеятельность(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 060 Приложения 3 должна быть меньше или равна строке 050 Приложения 3';
						|en = 'Строка 060 Приложения 3 должна быть меньше или равна строке 050 Приложения 3'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 221 НК РФ';
						|en = 'ст. 221 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'По результатам онп профессиональные налоговые вычеты превысили сумму дохода
		|от предпринимательской деятельности и НП ФЛ уменьшил налоговую базу по доходам, полученным
		|в онп и непосредственно не связанным с предпринимательской деятельностью, на сумму убытка';
		|en = 'По результатам онп профессиональные налоговые вычеты превысили сумму дохода
		|от предпринимательской деятельности и НП ФЛ уменьшил налоговую базу по доходам, полученным
		|в онп и непосредственно не связанным с предпринимательской деятельностью, на сумму убытка'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаВычетаИП", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("ОбщаяСуммаДоходаИП", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение3_ОбщаяСуммаПрофессиональныхВычетов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Cтрока 150 Приложения 3 должна быть равна сумме
		|(строка 120 + строка 130 + строка 140) Приложения 3';
		|en = 'Cтрока 150 Приложения 3 должна быть равна сумме
		|(строка 120 + строка 130 + строка 140) Приложения 3'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 221 НК РФ';
						|en = 'ст. 221 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма профессиональных расходов, принимаемых к вычету';
									|en = 'Завышена общая сумма профессиональных расходов, принимаемых к вычету'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма профессиональных расходов, принимаемых к вычету';
									|en = 'Занижена общая сумма профессиональных расходов, принимаемых к вычету'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Расходы = Новый Массив;
	Расходы.Добавить("СуммаРасходовПоДоговорамГПХ");
	Расходы.Добавить("ФактическийРасходАвторскоеВознаграждение");
	Расходы.Добавить("НормативныйРасходАвторскоеВознаграждение");
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
		РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
			ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		РасшифровкаПраваяЧасть = "";
		
		Показатель1 = ЗначениеПоказателя("ОбщаяСуммаПрофессиональныхВычетов", Страница.Данные, ДополнительныеПараметры);
		Показатель2 = СуммаСпискаПоказателей(Расходы, Страница.Данные, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
		
		ЭтоОшибка = Показатель1 <> Показатель2;
		ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
		
		Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
									|en = '%1 %2 %3 Итог [%4]'"),
			Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
		
		СтруктураОписание = НовоеОписаниеОшибки();
		СтруктураОписание.НомерКС               = НомерКС;
		СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
		СтруктураОписание.ОписаниеКС            = ОписаниеКС;
		СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
		СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
		
		ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Приложение4

Процедура КонтрольныеСоотношения_Приложение4(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Приложение4");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ДополнительныеПараметры.Вставить("СсылкаНаЗакон", НСтр("ru = 'ст. 217 НК РФ';
															|en = 'ст. 217 НК РФ'"));
	ДополнительныеПараметры.Вставить("ОписаниеКС",    ОписаниеКС_СуммаВсехПоказателейСтраницы(
		ДополнительныеПараметры.ИмяРаздела,
		ДополнительныеПараметры.ПоказателиДекларации,
		ДополнительныеПараметры.НаименованиеРаздела));
	
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше",
		НСтр("ru = 'Завышена сумма дохода, не подлежащая налогообложению';
			|en = 'Завышена сумма дохода, не подлежащая налогообложению'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше",
		НСтр("ru = 'Занижена сумма дохода, не подлежащая налогообложению';
			|en = 'Занижена сумма дохода, не подлежащая налогообложению'"));
	
	ПроверитьИтоговуюСуммуПриложения(Результат, ДанныеОтчета,
		"СуммаДоходовНеПодлежащаяНалогообложению", "6.1, 6.2", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ОписаниеКС", НСтр("ru = 'п. %1 Приложения 4 должен быть меньше или равен %2 руб.';
														|en = 'п. %1 Приложения 4 должен быть меньше или равен %2 руб.'"));
	
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше",
		НСтр("ru = 'Неправомерно освобождены доходы от налогообложения в сумме, превышающей %1 руб.';
			|en = 'Неправомерно освобождены доходы от налогообложения в сумме, превышающей %1 руб.'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше", "");
	
	ТаблицаПроверки = ТаблицаПроверкиПревышенияСумм(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	
	Для Каждого ТекущееПравило Из ТаблицаПроверки Цикл
		
		ДополнительныеПараметры.Вставить("КлючПоказателя", ТекущееПравило.КлючПоказателя);
		ДополнительныеПараметры.Вставить("НомерПункта",    ТекущееПравило.НомерПункта);
		ДополнительныеПараметры.Вставить("Значение",       ТекущееПравило.Значение);
		
		ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, ТекущееПравило.КодКС, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПроверкиПревышенияСумм(ВыбраннаяФорма)
	
	НеоблагаемыеСуммы = НеоблагаемыеСуммыДоходов(ВыбраннаяФорма);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КлючПоказателя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(56)));
	ТаблицаРезультат.Колонки.Добавить("НомерПункта", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("КодКС", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(4)));
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "СтоимостьПодарковНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 2;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.Подарок;
	НовоеПравило.КодКС          = "6.4";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "СтоимостьПризовНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 3;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.Призы;
	НовоеПравило.КодКС          = "6.5";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 4;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.МатериальнаяПомощьРаботникам;
	НовоеПравило.КодКС          = "6.6";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 5;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.ЛекарственныеПрепараты;
	НовоеПравило.КодКС          = "6.7";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 6;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.РекламаТоваров;
	НовоеПравило.КодКС          = "6.8";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 7;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.МатериальнаяПомощьИнвалидам;
	НовоеПравило.КодКС          = "6.9";
	
	НовоеПравило = ТаблицаРезультат.Добавить();
	НовоеПравило.КлючПоказателя = "СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению";
	НовоеПравило.НомерПункта    = 8;
	НовоеПравило.Значение       = НеоблагаемыеСуммы.Лотереи;
	НовоеПравило.КодКС          = "6.10";
	
	Если ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
		
		НовоеПравило = ТаблицаРезультат.Добавить();
		НовоеПравило.КлючПоказателя = "МатериальнаяПомощьСтудентамНеПодлежащаяНалогообложению";
		НовоеПравило.НомерПункта    = 9;
		НовоеПравило.Значение       = НеоблагаемыеСуммы.МатериальнаяПомощьСтудентам;
		НовоеПравило.КодКС          = "6.11";
		
		НовоеПравило = ТаблицаРезультат.Добавить();
		НовоеПравило.КлючПоказателя = "СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению";
		НовоеПравило.НомерПункта    = 10;
		НовоеПравило.Значение       = НеоблагаемыеСуммы.ПомощьУчастникамВОВ;
		НовоеПравило.КодКС          = "6.12";
		
		НовоеПравило = ТаблицаРезультат.Добавить();
		НовоеПравило.КлючПоказателя = "ВзносыРаботодателяНеПодлежащиеНалогообложению";
		НовоеПравило.НомерПункта    = 11;
		НовоеПравило.Значение       = НеоблагаемыеСуммы.СтраховыеВзносы;
		НовоеПравило.КодКС          = "6.13";
		
	Иначе
		
		НовоеПравило = ТаблицаРезультат.Добавить();
		НовоеПравило.КлючПоказателя = "СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению";
		НовоеПравило.НомерПункта    = 9;
		НовоеПравило.Значение       = НеоблагаемыеСуммы.ПомощьУчастникамВОВ;
		НовоеПравило.КодКС          = "6.11";
		
		НовоеПравило = ТаблицаРезультат.Добавить();
		НовоеПравило.КлючПоказателя = "ВзносыРаботодателяНеПодлежащиеНалогообложению";
		НовоеПравило.НомерПункта    = 10;
		НовоеПравило.Значение       = НеоблагаемыеСуммы.СтраховыеВзносы;
		НовоеПравило.КодКС          = "6.12";
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОписаниеКС_СуммаВсехПоказателейСтраницы(ИмяСтраницы, ПоказателиДекларации, НаименованиеРаздела)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСтраницы", ИмяСтраницы);
	
	КлючиРаздела = ПоказателиДекларации.НайтиСтроки(Отбор);
	
	Результат = "";
	КоличествоПоказателей = КлючиРаздела.Количество();
	Если КоличествоПоказателей < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Показатель1 = НомерПунктаПоказателя(КлючиРаздела[КоличествоПоказателей - 1].ИмяПоля);
	
	СуммаПоказателей = Новый Массив;
	Для Индекс = 0 По КоличествоПоказателей - 2 Цикл
		СуммаПоказателей.Добавить(СтрШаблон(НСтр("ru = 'п. %1';
												|en = 'п. %1'"), НомерПунктаПоказателя(КлючиРаздела[Индекс].ИмяПоля)));
	КонецЦикла;
	
	Результат = СтрШаблон(НСтр("ru = 'п. %1 Приложения 4 должна быть равне сумме (%2) %3';
								|en = 'п. %1 Приложения 4 должна быть равне сумме (%2) %3'"),
		Показатель1,
		СтрСоединить(СуммаПоказателей, " + "),
		ПолучитьСклоненияСтроки(НаименованиеРаздела, , "ПД=Родительный")[0]);
	
	Возврат Результат;
	
КонецФункции

Функция НомерПунктаПоказателя(ИмяПоказателя)
	
	Результат = КодСтрокиПредставление(ИмяПоказателя);
	СлужебныйСимвол = "0";
	
	Если СтрНачинаетсяС(Результат, СлужебныйСимвол) Тогда
		Результат = Прав(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(Результат, СлужебныйСимвол) Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Приложение5

Процедура КонтрольныеСоотношения_Приложение5(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Приложение5");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Приложение5_ОбщаяСуммаСтандартныхВычетов(Результат, ДанныеОтчета, "7.5, 7.6", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаПожертвований(Результат, ДанныеОтчета, "7.7", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаСоциальныхВычетов(Результат, ДанныеОтчета, "7.9, 7.10", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаСоциальныхВычетовСОграничением(Результат, ДанныеОтчета, "7.11, 7.12", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаСоциальныхВычетовПоДекларации(Результат, ДанныеОтчета, "7.13, 7.14", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаПенсионныхСтраховыхВзносов(Результат, ДанныеОтчета, "7.15, 7.16", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_ОбщаяСуммаСтандартныхСоциальныхВычетов(Результат, ДанныеОтчета, "7.17, 7.18", ДополнительныеПараметры);
	ПроверкаКС_Приложение5_СуммаИнвестиционногоВычета(Результат, ДанныеОтчета, "7.19", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение5_ОбщаяСуммаСтандартныхВычетов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 1.8 Приложения 5 должен быть равен сумме
		|(пп. 1.1 + пп. 1.2 + пп. 1.3 + пп. 1.4 + пп. 1.5 + пп. 1.6 - пп. 1.7) Приложения 5';
		|en = 'пп. 1.8 Приложения 5 должен быть равен сумме
		|(пп. 1.1 + пп. 1.2 + пп. 1.3 + пп. 1.4 + пп. 1.5 + пп. 1.6 - пп. 1.7) Приложения 5'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 218 НК РФ';
						|en = 'ст. 218 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма стандартных вычетов';
									|en = 'Завышена общая сумма стандартных вычетов'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма стандартных вычетов';
									|en = 'Занижена общая сумма стандартных вычетов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	РасшифровкаПраваяЧасть = "";
	
	СтандартныеВычеты = Новый Массив;
	СтандартныеВычеты.Добавить("СтандартныйВычетПо218_1_1");
	СтандартныеВычеты.Добавить("СтандартныйВычетПо218_1_2");
	СтандартныеВычеты.Добавить("СтандартныйВычетНаДетей");
	СтандартныеВычеты.Добавить("СтандартныйВычетНаДетейЕдинственномуРодителю");
	СтандартныеВычеты.Добавить("СтандартныйВычетНаДетейИнвалидов");
	СтандартныеВычеты.Добавить("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю");
	
	Показатель1  = ЗначениеПоказателя("ОбщаяСуммаСтандартныхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2  = СуммаСпискаПоказателей(СтандартныеВычеты, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	СуммаВычетов = ЗначениеПоказателя("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами",
		ДанныеОтчета, ДополнительныеПараметры);
	Показатель2  = Показатель2 - СуммаВычетов;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
								|en = '%1 %2 %3 - %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, СуммаВычетов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаПожертвований(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	
	ПроцентДоходов = ПределВычета("ПожертвованияПроцентДохода", ВыбраннаяФорма);
	НалоговаяСтавка= НалоговыеСтавки(ВыбраннаяФорма).ПоУмолчанию;
	ОписаниеКС     = СтрШаблон(НСтр("ru = 'пп. 2.1 Приложения 5 должен быть меньше или равен
		|(%1 * строка 030 раздела 2 (по ставке %2%%)';
		|en = 'пп. 2.1 Приложения 5 должен быть меньше или равен
		|(%1 * строка 030 раздела 2 (по ставке %2%%)'"), ПроцентДоходов, НалоговаяСтавка);
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 219 НК РФ';
							|en = 'ст. 219 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Неправомерно предоставлены социальные налоговые вычеты в отношении сумм,
		|перечисленных в виде пожертвований';
		|en = 'Неправомерно предоставлены социальные налоговые вычеты в отношении сумм,
		|перечисленных в виде пожертвований'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	УсловиеОтбора = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПоУмолчанию", "НалоговаяСтавка", НалоговыеСтавки(ВыбраннаяФорма));
	
	ДополнительныеПараметры.Вставить("Условие", УсловиеОтбора);
	СуммаДоходов  = ЗначениеПоказателя("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ДанныеОтчета, ДополнительныеПараметры);
	ДополнительныеПараметры.Удалить("Условие");
	
	Показатель1 = ЗначениеПоказателя("СоциальныйВычетПожертвования", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = Окр(ПроцентДоходов * СуммаДоходов, 2);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 * %4 Итог [%5]';
								|en = '%1 %2 %3 * %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, ПроцентДоходов, СуммаДоходов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаСоциальныхВычетов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.4 Приложения 5 должен быть равен сумме
		|(пп. 2.1 + пп. 2.2 + пп. 2.3) Приложения 5';
		|en = 'пп. 2.4 Приложения 5 должен быть равен сумме
		|(пп. 2.1 + пп. 2.2 + пп. 2.3) Приложения 5'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма социальных вычетов,
		|в отношении которых не применяется ограничение, установленное п. 2 ст. 219 НК РФ';
		|en = 'Завышена общая сумма социальных вычетов,
		|в отношении которых не применяется ограничение, установленное п. 2 ст. 219 НК РФ'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма социальных вычетов,
		|в отношении которых не применяется ограничение, установленное п. 2 ст. 219 НК РФ';
		|en = 'Занижена общая сумма социальных вычетов,
		|в отношении которых не применяется ограничение, установленное п. 2 ст. 219 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	РасшифровкаПраваяЧасть = "";
	
	СоциальныеВычеты = Новый Массив;
	СоциальныеВычеты.Добавить("СоциальныйВычетПожертвования");
	СоциальныеВычеты.Добавить("СоциальныйВычетОбучениеДетей");
	СоциальныеВычеты.Добавить("СоциальныйВычетДорогостоящееЛечение");
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СуммаСпискаПоказателей(СоциальныеВычеты, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
								|en = '%1 %2 %3 Итог [%4]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаСоциальныхВычетовСОграничением(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	СоциальныйВычет = ПределВычета("СоциальныеВычеты", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	
	Если ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма = РеквизитыФормыОтчета2021().ФормаОтчета
		Или ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма = РеквизитыФормыОтчета2020().ФормаОтчета Тогда
		
		ДобавитьПункт321 = Истина;
		ШаблонОписания = НСтр("ru = 'пп. 3.6 Приложения 5 должен быть равен сумме
			|(пп. 3.1 + пп. 3.2 + пп. 3.2.1 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5, если сумма
			|(пп. 3.1 + пп. 3.2 + пп. 3.2.1 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5
			|меньше либо равна %1 руб.';
			|en = 'пп. 3.6 Приложения 5 должен быть равен сумме
			|(пп. 3.1 + пп. 3.2 + пп. 3.2.1 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5, если сумма
			|(пп. 3.1 + пп. 3.2 + пп. 3.2.1 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5
			|меньше либо равна %1 руб.'");
	Иначе
		ДобавитьПункт321 = Ложь;
		ШаблонОписания = НСтр("ru = 'пп. 3.6 Приложения 5 должен быть равен сумме
			|(пп. 3.1 + пп. 3.2 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5, если сумма
			|(пп. 3.1 + пп. 3.2 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5
			|меньше либо равна %1 руб.';
			|en = 'пп. 3.6 Приложения 5 должен быть равен сумме
			|(пп. 3.1 + пп. 3.2 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5, если сумма
			|(пп. 3.1 + пп. 3.2 + пп. 3.3 + пп. 3.4 + пп. 3.5) Приложения 5
			|меньше либо равна %1 руб.'");
	КонецЕсли;
	
	ОписаниеКС = СтрШаблон(ШаблонОписания, СоциальныйВычет);
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма социальных вычетов,
		|в отношении которых применяется ограничение, установленное п. 2 ст. 219 НК РФ';
		|en = 'Завышена общая сумма социальных вычетов,
		|в отношении которых применяется ограничение, установленное п. 2 ст. 219 НК РФ'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма социальных вычетов,
		|в отношении которых применяется ограничение, установленное п. 2 ст. 219 НК РФ';
		|en = 'Занижена общая сумма социальных вычетов,
		|в отношении которых применяется ограничение, установленное п. 2 ст. 219 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	РасшифровкаПраваяЧасть = "";
	
	Вычеты = Новый Массив;
	Вычеты.Добавить("СоциальныйВычетОбучениеСвое");
	Вычеты.Добавить("СоциальныйВычетМедицинскоеСтрахование");
	
	Если ДобавитьПункт321 Тогда
		Вычеты.Добавить("СоциальныйВычетМедикаменты");
		Вычеты.Добавить("СоциальныйВычетОбычноеЛечение");
	Иначе
		Вычеты.Добавить("СоциальныйВычетЛечениеМедикаменты");
	КонецЕсли;
	
	Вычеты.Добавить("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни");
	Вычеты.Добавить("РасходыНаПрохождениеНезависимойОценкиКвалификации");
	
	ОбщаяСуммаВычетов = ЗначениеПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением", ДанныеОтчета, ДополнительныеПараметры);
	СуммаПоСписку     = СуммаСпискаПоказателей(Вычеты, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	
	ЭтоОшибка = СуммаПоСписку <= СоциальныйВычет И ОбщаяСуммаВычетов <> СуммаПоСписку;
	ПараметрыНарушения = ПараметрыНарушения(ОбщаяСуммаВычетов, СуммаПоСписку,
		ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
								|en = '%1 %2 %3 Итог [%4]'"),
		ОбщаяСуммаВычетов, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, СуммаПоСписку);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаСоциальныхВычетовПоДекларации(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 3.7 Приложения 5 должен быть равен сумме
		|(пп. 2.4 + пп. 3.6 - пп. 3.6.1) Приложения 5';
		|en = 'пп. 3.7 Приложения 5 должен быть равен сумме
		|(пп. 2.4 + пп. 3.6 - пп. 3.6.1) Приложения 5'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма социальных налоговых вычетов, заявляемая по декларации';
									|en = 'Завышена сумма социальных налоговых вычетов, заявляемая по декларации'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма социальных налоговых вычетов, заявляемая по декларации';
									|en = 'Занижена сумма социальных налоговых вычетов, заявляемая по декларации'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СоциальныйВычет       = ЗначениеПоказателя("ОбщаяСуммаСоциальныхВычетовБезОграничения",
		ДанныеОтчета, ДополнительныеПараметры);
	СоцВычетСОграничением = ЗначениеПоказателя("ОбщаяСуммаСоциальныхВычетовСОграничением",
		ДанныеОтчета, ДополнительныеПараметры);
	СоциальныйВычетНА     = ЗначениеПоказателя("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами",
		ДанныеОтчета, ДополнительныеПараметры);
		
	Показатель1 = ЗначениеПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СоциальныйВычет + СоцВычетСОграничением - СоциальныйВычетНА;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 - %5 Итог [%6]';
								|en = '%1 %2 %3 + %4 - %5 Итог [%6]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения,
		СоциальныйВычет, СоцВычетСОграничением, СоциальныйВычетНА, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаПенсионныхСтраховыхВзносов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 3.4 Приложения 5 должен быть равен п. 2 Расчета к Приложению 5';
						|en = 'пп. 3.4 Приложения 5 должен быть равен п. 2 Расчета к Приложению 5'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма социальных налоговых вычетов
		|в отношении сумм пенсионных и страховых взносов, уплаченных по договорам негосударственного пенсионного обеспечения,
		|добровольного пенсионного страхования и добровольного страхования жизни,
		|дополнительных страховых взносов на накопительную пенсию';
		|en = 'Завышена сумма социальных налоговых вычетов
		|в отношении сумм пенсионных и страховых взносов, уплаченных по договорам негосударственного пенсионного обеспечения,
		|добровольного пенсионного страхования и добровольного страхования жизни,
		|дополнительных страховых взносов на накопительную пенсию'");
	
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма социальных налоговых вычетов
		|в отношении сумм пенсионных и страховых взносов, уплаченных по договорам негосударственного пенсионного обеспечения,
		|добровольного пенсионного страхования и добровольного страхования жизни,
		|дополнительных страховых взносов на накопительную пенсию';
		|en = 'Занижена сумма социальных налоговых вычетов
		|в отношении сумм пенсионных и страховых взносов, уплаченных по договорам негосударственного пенсионного обеспечения,
		|добровольного пенсионного страхования и добровольного страхования жизни,
		|дополнительных страховых взносов на накопительную пенсию'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_ОбщаяСуммаСтандартныхСоциальныхВычетов(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'п. 4 Приложения 5 должен быть равен сумме (пп. 1.8 + пп. 3.7) Приложения 5';
						|en = 'п. 4 Приложения 5 должен быть равен сумме (пп. 1.8 + пп. 3.7) Приложения 5'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена общая сумма стандартных и социальных налоговых вычетов,
		|заявляемая по декларации';
		|en = 'Завышена общая сумма стандартных и социальных налоговых вычетов,
		|заявляемая по декларации'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена общая сумма стандартных и социальных налоговых вычетов,
		|заявляемая по декларации';
		|en = 'Занижена общая сумма стандартных и социальных налоговых вычетов,
		|заявляемая по декларации'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СтандартныйВычет = ЗначениеПоказателя("ОбщаяСуммаСтандартныхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	СоциальныйВычет  = ЗначениеПоказателя("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаСтандартныхСоциальныхВычетов", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СтандартныйВычет + СоциальныйВычет;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СтандартныйВычет, СоциальныйВычет, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение5_СуммаИнвестиционногоВычета(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	Показатель2   = ПределВычета("ИнвестиционныйВычет", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	
	ОписаниеКС    = СтрШаблон(НСтр("ru = 'пп. 5.1 Приложения 5 меньше либо равен %1 руб.';
									|en = 'пп. 5.1 Приложения 5 меньше либо равен %1 руб.'"), Показатель2);
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма инвестиционного налогового вычета,
		|предусмотренного пп. 2 п. 1 статьи 219.1 НК РФ';
		|en = 'Завышена сумма инвестиционного налогового вычета,
		|предусмотренного пп. 2 п. 1 статьи 219.1 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя("ИнвестиционныйВычет", ДанныеОтчета, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Приложение6

Процедура КонтрольныеСоотношения_Приложение6(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",         "Приложение6");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	ДополнительныеПараметры.Вставить("СсылкаНаЗакон",       НСтр("ru = 'ст. 220 НК РФ';
																|en = 'ст. 220 НК РФ'"));
	
	ПределПродажаИногоИмущества = ПределВычета("ПродажаИногоИмущества", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	ОписаниеКСПревышение = НСтр("ru = 'пп. %1 Приложения 6 должен быть меньше или равен %2 руб.';
								|en = 'пп. %1 Приложения 6 должен быть меньше или равен %2 руб.'");
	
	ДополнительныеПараметры.Вставить("ОписаниеКС", ОписаниеКСПревышение);
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше",
		НСтр("ru = 'Неправомерно заявлен имущественный налоговый вычет в сумме, превышающей %1 руб.';
			|en = 'Неправомерно заявлен имущественный налоговый вычет в сумме, превышающей %1 руб.'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше","");
	
	ДополнительныеПараметры.Вставить("КлючПоказателя", "ИмущественныйВычетПродажаЖилойНедвижимости");
	ДополнительныеПараметры.Вставить("НомерПункта",    "1.1");
	ДополнительныеПараметры.Вставить("Значение",       ПределВычета("ПродажаЖилойНедвижимости",
		ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма));
	
	ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, "8.1", ДополнительныеПараметры);
	
	ПроверкаКС_Приложение6_ИмущественныйВычетПродажаЖилойНедвижимости(Результат, ДанныеОтчета, "8.3", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ОписаниеКС",     ОписаниеКСПревышение);
	ДополнительныеПараметры.Вставить("КлючПоказателя", "ИмущественныйВычетПродажаИнойНедвижимости");
	ДополнительныеПараметры.Вставить("НомерПункта",    "2.1");
	ДополнительныеПараметры.Вставить("Значение",       ПределПродажаИногоИмущества);
	
	ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, "8.4", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("КлючПоказателя", "ИмущественныйВычетПродажаИногоИмущества");
	ДополнительныеПараметры.Вставить("НомерПункта",    "3.1");
	ДополнительныеПараметры.Вставить("Значение",       ПределПродажаИногоИмущества);
	
	ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, "8.5", ДополнительныеПараметры);

	ДополнительныеПараметры.Вставить("ОписаниеКС", НСтр("ru = 'п. 10 Приложения 6 должен быть равен сумме
		|(пп. 1.1 + пп. 1.2 + пп. 1.3 + пп. 1.4 + пп. 2.1 + пп. 2.2 + пп. 3.1 + пп. 3.2
		|+ пп. 4.1 + пп. 5.1 + пп. 5.2 + пп. 6.1 + пп. 7.1 + пп. 8.1 + пп. 9.1) Приложения 6';
		|en = 'п. 10 Приложения 6 должен быть равен сумме
		|(пп. 1.1 + пп. 1.2 + пп. 1.3 + пп. 1.4 + пп. 2.1 + пп. 2.2 + пп. 3.1 + пп. 3.2
		|+ пп. 4.1 + пп. 5.1 + пп. 5.2 + пп. 6.1 + пп. 7.1 + пп. 8.1 + пп. 9.1) Приложения 6'"));
	
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше",
		НСтр("ru = 'Завышена общая сумма имущественных налоговых вычетов и расходов, принимаемых к вычету';
			|en = 'Завышена общая сумма имущественных налоговых вычетов и расходов, принимаемых к вычету'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше",
		НСтр("ru = 'Занижена общая сумма имущественных налоговых вычетов и расходов, принимаемых к вычету';
			|en = 'Занижена общая сумма имущественных налоговых вычетов и расходов, принимаемых к вычету'"));
	
	ПроверитьИтоговуюСуммуПриложения(Результат, ДанныеОтчета,
		"ОбщаяСуммаИмущественногоВычета", "8.6, 8.7", ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение6_ИмущественныйВычетПродажаЖилойНедвижимости(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	Показатель2 = ПределВычета("ПродажаЖилойНедвижимости", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	ОписаниеКС  = СтрШаблон(НСтр("ru = 'Сумма (пп. 1.1 + пп. 1.3) Приложения 6 должна быть меньше или равна %1 руб.';
								|en = 'Сумма (пп. 1.1 + пп. 1.3) Приложения 6 должна быть меньше или равна %1 руб.'"),
		Показатель2);
	
	ПредметНарушения = СтрШаблон(НСтр("ru = 'Неправомерно заявлен имущественный налоговый вычет в сумме,
		|превышающей %1 руб.';
		|en = 'Неправомерно заявлен имущественный налоговый вычет в сумме,
		|превышающей %1 руб.'"), Показатель2);
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 220 НК РФ';
							|en = 'ст. 220 НК РФ'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ИмущественныйВычет = ЗначениеПоказателя("ИмущественныйВычетПродажаЖилойНедвижимости",
		ДанныеОтчета, ДополнительныеПараметры);
	ВычетДоля          = ЗначениеПоказателя("ИмущественныйВычетПродажаДолиЖилойНедвижимости",
		ДанныеОтчета, ДополнительныеПараметры);
	Показатель1        = ИмущественныйВычет + ВычетДоля;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 + %2 Итог [%3] %4 %5';
								|en = '%1 + %2 Итог [%3] %4 %5'"),
		ИмущественныйВычет, ВычетДоля, Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Приложение7

Процедура КонтрольныеСоотношения_Приложение7(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	Если РазделПуст(ДанныеОтчета, ДеревоДляЗагрузки, "Приложение7", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяРаздела",          "Приложение7");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ДополнительныеПараметры.Вставить("СсылкаНаЗакон", НСтр("ru = 'ст. 220 НК РФ';
															|en = 'ст. 220 НК РФ'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияБольше", НСтр("ru = 'Завышена сумма имущественного налогового вычета';
																	|en = 'Завышена сумма имущественного налогового вычета'"));
	ДополнительныеПараметры.Вставить("ПредметНарушенияМеньше", "");
	
	ПределИмущество  = ПределВычета("НаПриобретениеНедвижимостиСтоимость",
		ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	
	ОписаниеКСПревышение = НСтр("ru = 'Сумма строк %1 всех листов Приложений 7 должна быть меньше или равна %2 руб.';
								|en = 'Сумма строк %1 всех листов Приложений 7 должна быть меньше или равна %2 руб.'");
	ДополнительныеПараметры.Вставить("ОписаниеКС", ОписаниеКСПревышение);
	
	ПроверкаКС_Приложение7_НалоговаяБаза(Результат, ДанныеОтчета, "9.1", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_НовоеСтроительствоПриобретениеЖилья(Результат, ДанныеОтчета, "9.2, 9.3", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_ЦелевыеКредитыЗаймы(Результат, ДанныеОтчета, "9.4, 9.5", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_НовоеСтроительствоПриобретениеЖильяОНП(Результат, ДанныеОтчета, "9.6", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_РазмерНалоговойБазыДляРасчетаИмущественногоВычета(Результат, ДанныеОтчета, "9.7", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_СуммаРасходовНаПриобретениеНедвижимостиКВычету(Результат, ДанныеОтчета, "9.8", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_СуммаПроцентовПоКредитуНаНедвижимостьКВычету(Результат, ДанныеОтчета, "9.9", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_КредитыЗаймыИмущественныйВычет(Результат, ДанныеОтчета, "9.10", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_ИмущественныйВычетУведомление(Результат, ДанныеОтчета, "9.11", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_ЦелевыеКредитыЗаймыПроценты(Результат, ДанныеОтчета, "9.12", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ОписаниеКС",     ОписаниеКСПревышение);
	ДополнительныеПараметры.Вставить("КлючПоказателя", "СуммаРасходовНаПриобретениеНедвижимости");
	ДополнительныеПараметры.Вставить("НомерПункта",    "080");
	ДополнительныеПараметры.Вставить("Значение",       ПределИмущество);
	
	ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, "9.13", ДополнительныеПараметры);
	
	ПроверкаКС_Приложение7_ИмущественныйВычетПриобретениеНедвижимости(Результат, ДанныеОтчета, "9.14", ДополнительныеПараметры);
	ПроверкаКС_Приложение7_ИмущественныйВычетПриобретениеНедвижимостиПроценты(Результат, ДанныеОтчета, "9.15", ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("ОписаниеКС",     ОписаниеКСПревышение);
	ДополнительныеПараметры.Вставить("КлючПоказателя", "СуммаПроцентовПоКредитуНаНедвижимость");
	ДополнительныеПараметры.Вставить("НомерПункта",    "090");
	ДополнительныеПараметры.Вставить("Значение",       ПределИмущество);
	
	ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, "9.16", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_НалоговаяБаза(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	КодСтроки = КодСтрокиПредставление(СвойствоПоказателя("СуммаДоходовНеПодлежащаяНалогообложению",
		ДополнительныеПараметры.ПоказателиДекларации).ИмяПоля);
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'пп. 2.5 Приложения 7 должен быть равен сумме
		|строка 010 (по налоговой ставке 13%%) Раздела 2
		|- (п. 3.2 + п. 6.5) Приложения 3
		|- п. %1 Приложения 4
		|- (п. 1.7 + п. 3.6.1 + п. 4 + п. 5.1) Приложения 5
		|- п. 10 Приложения 6
		|- (пп. 2.3 + пп. 2.4) Приложения 7
		|- (строка 040 + строка 052 + строка 060 + строка 070) Приложения 8';
		|en = 'пп. 2.5 Приложения 7 должен быть равен сумме
		|строка 010 (по налоговой ставке 13%%) Раздела 2
		|- (п. 3.2 + п. 6.5) Приложения 3
		|- п. %1 Приложения 4
		|- (п. 1.7 + п. 3.6.1 + п. 4 + п. 5.1) Приложения 5
		|- п. 10 Приложения 6
		|- (пп. 2.3 + пп. 2.4) Приложения 7
		|- (строка 040 + строка 052 + строка 060 + строка 070) Приложения 8'"),
		Лев(КодСтроки, 2));
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 208, 210 НК РФ';
							|en = 'ст. 208, 210 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Допущены арифметические ошибки в определении налогооблагаемой базы';
							|en = 'Допущены арифметические ошибки в определении налогооблагаемой базы'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВыбраннаяФорма = ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма;
	УсловиеСтавка  = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"ПоУмолчанию", "НалоговаяСтавка", НалоговыеСтавки(ВыбраннаяФорма));
	УсловиеДоход   = УсловиеОтбораПоля(ДополнительныеПараметры.ПоказателиДекларации,
		"Иное", "ВидДохода", ВидыДоходов(ВыбраннаяФорма));
	УсловиеОтбора  = Новый Структура("ГруппаИ", Новый Массив);
	УсловиеОтбора.ГруппаИ.Добавить(УсловиеСтавка);
	УсловиеОтбора.ГруппаИ.Добавить(УсловиеДоход);
	
	Показатель1 = 0;
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	Показатель1 = ЗначениеПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета",
		РазделИтоги, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("Условие", УсловиеОтбора);
	СуммаДоходов = ЗначениеПоказателя("ОбщаяСуммаДоходов", ДанныеОтчета, ДополнительныеПараметры);
	ДополнительныеПараметры.Удалить("Условие");
	
	РасшифровкаПраваяЧасть = "";
	
	СписокВычетов = Новый Массив;
	СписокВычетов.Добавить("ОбщаяСуммаВычетаИП");
	СписокВычетов.Добавить("ОбщаяСуммаПрофессиональныхВычетов");
	СписокВычетов.Добавить("СуммаДоходовНеПодлежащаяНалогообложению");
	СписокВычетов.Добавить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами");
	СписокВычетов.Добавить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами");
	СписокВычетов.Добавить("ОбщаяСуммаСтандартныхСоциальныхВычетов");
	СписокВычетов.Добавить("ИнвестиционныйВычет");
	СписокВычетов.Добавить("ОбщаяСуммаИмущественногоВычета");
	СписокВычетов.Добавить("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы");
	СписокВычетов.Добавить("ЦенныеБумагиСуммаУбытка");
	СписокВычетов.Добавить("ЦенныеБумагиСуммаПрибылиКВычету");
	СписокВычетов.Добавить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	ВычетыПриложения7 = Новый Массив;
	ВычетыПриложения7.Добавить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы");
	ВычетыПриложения7.Добавить("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты");
	
	СуммаВычетов = СуммаСпискаПоказателей(СписокВычетов, ДанныеОтчета, РасшифровкаПраваяЧасть, ДополнительныеПараметры)
		+ СуммаСпискаПоказателей(ВычетыПриложения7, РазделИтоги, РасшифровкаПраваяЧасть, ДополнительныеПараметры);
	Показатель2  = СуммаДоходов - СуммаВычетов;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - (%4) Итог [%5]';
								|en = '%1 %2 %3 - (%4) Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаДоходов, РасшифровкаПраваяЧасть, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение7_НовоеСтроительствоПриобретениеЖилья(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.8 Приложения 7 должен быть равен разнице
		|(пп. 1.8 - пп. 2.1 - пп. 2.3 - пп. 2.6) Приложения 7';
		|en = 'пп. 2.8 Приложения 7 должен быть равен разнице
		|(пп. 1.8 - пп. 2.1 - пп. 2.3 - пп. 2.6) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, переходящая на следующий налоговый период';
		|en = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, переходящая на следующий налоговый период'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, переходящая на следующий налоговый период';
		|en = 'Занижена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, переходящая на следующий налоговый период'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаРасходов = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимости", ДанныеОтчета, ДополнительныеПараметры);
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ВычетПредыдущиеГоды = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет  = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы",
		РазделИтоги, ДополнительныеПараметры);
	РасходыНедвижимость = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", РазделИтоги, ДополнительныеПараметры);
	Показатель2 = Макс(СуммаРасходов - ВычетПредыдущиеГоды - ИмущественныйВычет - РасходыНедвижимость, 0);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 - %5 - %6 Итог [%7]';
								|en = '%1 %2 %3 - %4 - %5 - %6 Итог [%7]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения,
		СуммаРасходов, ВычетПредыдущиеГоды, ИмущественныйВычет, РасходыНедвижимость, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_ЦелевыеКредитыЗаймы(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.9 Приложения 7 должен быть равен разнице
		|(пп. 1.9 - пп. 2.2 - пп. 2.4 - пп. 2.7) Приложения 7';
		|en = 'пп. 2.9 Приложения 7 должен быть равен разнице
		|(пп. 1.9 - пп. 2.2 - пп. 2.4 - пп. 2.7) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|переходящая на следующий налоговый период';
		|en = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|переходящая на следующий налоговый период'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма уплаченных процентов по целевым займам (кредитам),
		|переходящая на следующий налоговый период';
		|en = 'Занижена сумма уплаченных процентов по целевым займам (кредитам),
		|переходящая на следующий налоговый период'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаПроцентов = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеОтчета, ДополнительныеПараметры);
	
	ВычетыПредыдущийГод = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту",
		РазделИтоги, ДополнительныеПараметры);
	ПроцентыКВычету     = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет  = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", РазделИтоги, ДополнительныеПараметры);
	Показатель2 = Макс(СуммаПроцентов - ВычетыПредыдущийГод - ИмущественныйВычет - ПроцентыКВычету, 0);
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 - %5 - %6 Итог [%7]';
								|en = '%1 %2 %3 - %4 - %5 - %6 Итог [%7]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения,
		СуммаПроцентов, ВычетыПредыдущийГод, ИмущественныйВычет, ПроцентыКВычету, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_НовоеСтроительствоПриобретениеЖильяОНП(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.6 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.8 - пп. 2.1 - пп. 2.3) Приложения 7';
		|en = 'пп. 2.6 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.8 - пп. 2.1 - пп. 2.3) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, принимаемая к зачету в онп на основании декларации';
		|en = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, принимаемая к зачету в онп на основании декларации'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
		
	СуммаРасходов = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимости", ДанныеОтчета, ДополнительныеПараметры);
	
	ВычетПредыдущийГод = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", РазделИтоги, ДополнительныеПараметры);
	Показатель2 = Макс(СуммаРасходов - ВычетПредыдущийГод - ИмущественныйВычет, 0);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 - %5 Итог [%6]';
								|en = '%1 %2 %3 - %4 - %5 Итог [%6]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения,
		СуммаРасходов, ВычетПредыдущийГод, ИмущественныйВычет, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_РазмерНалоговойБазыДляРасчетаИмущественногоВычета(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'п. 2.5 Приложения 7 должен быть больше или равен сумме (пп. 2.6 + пп. 2.7) Приложения 7';
						|en = 'п. 2.5 Приложения 7 должен быть больше или равен сумме (пп. 2.6 + пп. 2.7) Приложения 7'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья и уплату процентов, принимаемая к зачету в онп на основании декларации';
		|en = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья и уплату процентов, принимаемая к зачету в онп на основании декларации'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	НалоговаяБаза = 0;
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	НалоговаяБаза = ЗначениеПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета",
		РазделИтоги, ДополнительныеПараметры);
	
	СуммаРасходов  = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", РазделИтоги, ДополнительныеПараметры);
	СуммаПроцентов = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", РазделИтоги, ДополнительныеПараметры);
	
	СуммаВсего = СуммаРасходов + СуммаПроцентов;
	
	ЭтоОшибка = НалоговаяБаза < СуммаВсего;
	ПараметрыНарушения = ПараметрыНарушения(НалоговаяБаза, СуммаВсего, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		НалоговаяБаза, ПараметрыНарушения.ЗнакСравнения, СуммаРасходов, СуммаПроцентов, СуммаВсего);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_СуммаРасходовНаПриобретениеНедвижимостиКВычету(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС       = НСтр("ru = 'пп. 2.6 Приложения 7 должен быть меньше или равен пп. 2.5 Приложения 7';
							|en = 'пп. 2.6 Приложения 7 должен быть меньше или равен пп. 2.5 Приложения 7'");
	СсылкаНаЗакон    = НСтр("ru = 'ст. 220 НК РФ';
							|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, принимаемая к зачету в онп на основании декларации';
		|en = 'Завышена сумма документально подтвержденных расходов на новое строительство
		|или приобретение жилья, принимаемая к зачету в онп на основании декларации'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	Показатель1 = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", РазделИтоги, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", РазделИтоги, ДополнительныеПараметры);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_СуммаПроцентовПоКредитуНаНедвижимостьКВычету(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС       = НСтр("ru = 'пп. 2.7 Приложения 7 должен быть меньше разнице (пп. 2.5 - пп. 2.6) Приложения 7';
							|en = 'пп. 2.7 Приложения 7 должен быть меньше разнице (пп. 2.5 - пп. 2.6) Приложения 7'");
	СсылкаНаЗакон    = НСтр("ru = 'ст. 220 НК РФ';
							|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма документально подтвержденных расходов на уплату процентов,
		|принимаемая к зачету в онп на основании декларации';
		|en = 'Завышена сумма документально подтвержденных расходов на уплату процентов,
		|принимаемая к зачету в онп на основании декларации'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	СуммаРасходов = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", РазделИтоги, ДополнительныеПараметры);
	НалоговаяБаза = ЗначениеПоказателя("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету", РазделИтоги, ДополнительныеПараметры);
	Показатель2 = НалоговаяБаза - СуммаРасходов;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
								|en = '%1 %2 %3 - %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, НалоговаяБаза, СуммаРасходов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_КредитыЗаймыИмущественныйВычет(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.7 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.9 - пп. 2.2 - пп. 2.4) Приложения 7';
		|en = 'пп. 2.7 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.9 - пп. 2.2 - пп. 2.4) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|принимаемая для целей имущественного налогового вычета за отчетный налоговый период';
		|en = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|принимаемая для целей имущественного налогового вычета за отчетный налоговый период'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаПроцентов = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеОтчета, ДополнительныеПараметры);
	
	СуммаВычетов       = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",
		РазделИтоги, ДополнительныеПараметры);
	Показатель2 = Макс(СуммаПроцентов - СуммаВычетов - ИмущественныйВычет, 0);
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 - %5 Итог [%6]';
								|en = '%1 %2 %3 - %4 - %5 Итог [%6]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаПроцентов, СуммаВычетов, ИмущественныйВычет, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_ИмущественныйВычетУведомление(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.3 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.8 - пп. 2.1) Приложения 7';
		|en = 'пп. 2.3 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.8 - пп. 2.1) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма имущественного налогового вычета,
		|предоставленная налоговым агентом на основании Уведомления';
		|en = 'Завышена сумма имущественного налогового вычета,
		|предоставленная налоговым агентом на основании Уведомления'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаРасходов = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимости", ДанныеОтчета, ДополнительныеПараметры);
	
	СуммаВычетов  = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы",
		РазделИтоги, ДополнительныеПараметры);
	Показатель2 = СуммаРасходов - СуммаВычетов;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
								|en = '%1 %2 %3 - %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаРасходов, СуммаВычетов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_ЦелевыеКредитыЗаймыПроценты(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'пп. 2.4 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.9 - пп. 2.2) Приложения 7';
		|en = 'пп. 2.4 Приложения 7 должен быть меньше или равен разнице
		|(пп. 1.9 - пп. 2.2) Приложения 7'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|предоставленная налоговым агентом на основании Уведомления';
		|en = 'Завышена сумма уплаченных процентов по целевым займам (кредитам),
		|предоставленная налоговым агентом на основании Уведомления'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаПроцентов = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеОтчета, ДополнительныеПараметры);
	
	СуммаВычетов   = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту",
		РазделИтоги, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты",
		РазделИтоги, ДополнительныеПараметры);
	Показатель2 = СуммаПроцентов - СуммаВычетов;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 Итог [%5]';
								|en = '%1 %2 %3 - %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаПроцентов, СуммаВычетов, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение7_ИмущественныйВычетПриобретениеНедвижимости(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	Показатель2 = ПределВычета("НаПриобретениеНедвижимостиСтоимость", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	ОписаниеКС  = СтрШаблон(НСтр("ru = 'Сумма (пп. 2.1 + пп. 2.3 + пп. 2.6 + пп. 2.8) Приложения 7
		|должна быть меньше или равна %1 руб.';
		|en = 'Сумма (пп. 2.1 + пп. 2.3 + пп. 2.6 + пп. 2.8) Приложения 7
		|должна быть меньше или равна %1 руб.'"), Показатель2);
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 220 НК РФ';
							|en = 'ст. 220 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена сумма имущественного налогового вычета';
							|en = 'Завышена сумма имущественного налогового вычета'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	ВычетПредыдущийГод = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиРасходы",
		РазделИтоги, ДополнительныеПараметры);
	СуммаРасходов  = ЗначениеПоказателя("СуммаРасходовНаПриобретениеНедвижимостиКВычету", РазделИтоги, ДополнительныеПараметры);
	ОстатокНаКонец = ЗначениеПоказателя("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", РазделИтоги, ДополнительныеПараметры);
	Показатель1 = ВычетПредыдущийГод + ИмущественныйВычет + СуммаРасходов + ОстатокНаКонец;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 + %2 +%3 + %4 Итог [%5] %6 %7';
								|en = '%1 + %2 +%3 + %4 Итог [%5] %6 %7'"),
		ВычетПредыдущийГод, ИмущественныйВычет, СуммаРасходов, ОстатокНаКонец,
		Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение7_ИмущественныйВычетПриобретениеНедвижимостиПроценты(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	Показатель2 = ПределВычета("НаПриобретениеНедвижимостиПроценты", ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма);
	ОписаниеКС  = СтрШаблон(НСтр("ru = 'Сумма (пп. 2.2 + пп. 2.4 + пп. 2.7 + пп. 2.9) Приложения 7
		|должна быть меньше или равна %1 руб.';
		|en = 'Сумма (пп. 2.2 + пп. 2.4 + пп. 2.7 + пп. 2.9) Приложения 7
		|должна быть меньше или равна %1 руб.'"), Показатель2);
	
	СсылкаНаЗакон    = НСтр("ru = 'ст. 220 НК РФ';
							|en = 'ст. 220 НК РФ'");
	ПредметНарушения = НСтр("ru = 'Завышена сумма имущественного налогового вычета';
							|en = 'Завышена сумма имущественного налогового вычета'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	РазделИтоги = Раздел[Раздел.Количество() - 1].Данные;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаВычетов       = ЗначениеПоказателя("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту",
		РазделИтоги, ДополнительныеПараметры);
	ИмущественныйВычет = ЗначениеПоказателя("СуммаИмущественногоВычетаПредоставленногоНалоговымиАгентамиПроценты",
		РазделИтоги, ДополнительныеПараметры);
	СуммаПроцентов     = ЗначениеПоказателя("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",
		РазделИтоги, ДополнительныеПараметры);
	ОстатокНаКонец     = ЗначениеПоказателя("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость",
		РазделИтоги, ДополнительныеПараметры);
	Показатель1        = СуммаВычетов + ИмущественныйВычет + СуммаПроцентов + ОстатокНаКонец;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 + %2 +%3 + %4 Итог [%5] %6 %7';
								|en = '%1 + %2 +%3 + %4 Итог [%5] %6 %7'"),
		СуммаВычетов, ИмущественныйВычет, СуммаПроцентов, ОстатокНаКонец,
		Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Приложение8

Процедура КонтрольныеСоотношения_Приложение8(Результат, ДанныеОтчета, ДополнительныеПараметры)

	ДополнительныеПараметры.Вставить("ИмяРаздела",         "Приложение8");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Приложение8_ЦенныеБумагиСуммаРасходовУменьшающаяДоходы(Результат, ДанныеОтчета, "10.1", ДополнительныеПараметры);
	ПроверкаКС_Приложение8_ЦенныеБумагиСуммаДохода(Результат, ДанныеОтчета, "10.2", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение8_ЦенныеБумагиСуммаРасходовУменьшающаяДоходы(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС       = НСтр("ru = 'Строка 040 Приложения 8 должна быть меньше или равна строке 030 Приложения 8';
							|en = 'Строка 040 Приложения 8 должна быть меньше или равна строке 030 Приложения 8'");
	СсылкаНаЗакон    = НСтр("ru = 'ст. 214.1 НК РФ';
							|en = 'ст. 214.1 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена общая сумма расходов, принимаемых в уменьшение доходов';
							|en = 'Завышена общая сумма расходов, принимаемых в уменьшение доходов'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		Для Каждого ТекущаяСтрока Из Страница.ДанныеДопСтрок Цикл
			
			ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
				ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
			
			ДополнительныеПараметры.Вставить("НомерПравила", ДополнительныеПараметры.НомерПравила);
			ДополнительныеПараметры.Вставить("ИндексПоказателя", Страница.ДанныеДопСтрок.Индекс(ТекущаяСтрока) + 1);
			
			Показатель1 = ЗначениеПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы",
				ТекущаяСтрока, ДополнительныеПараметры);
			Показатель2 = ЗначениеПоказателя("ЦенныеБумагиСуммаРасходовПоРеализации", ТекущаяСтрока, ДополнительныеПараметры);
			
			ЭтоОшибка = Показатель1 > Показатель2;
			ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
			
			Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
										|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
			
			СтруктураОписание = НовоеОписаниеОшибки();
			СтруктураОписание.НомерКС               = НомерКС;
			СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
			СтруктураОписание.ОписаниеКС            = ОписаниеКС;
			СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
			СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
			
			ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение8_ЦенныеБумагиСуммаДохода(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'Строка 020 Приложения 8 должна быть больше или равна сумме
		|(строка 040 + строка 052 + строка 060 + строка 070) Приложения 8';
		|en = 'Строка 020 Приложения 8 должна быть больше или равна сумме
		|(строка 040 + строка 052 + строка 060 + строка 070) Приложения 8'");
	СсылкаНаЗакон = НСтр("ru = 'ст. 214.1 НК РФ';
						|en = 'ст. 214.1 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Завышена общая сумма расходов (убытков), принимаемых в уменьшение доходов';
							|en = 'Завышена общая сумма расходов (убытков), принимаемых в уменьшение доходов'");
	
	Раздел = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
		
		ДанныеДопСтрок = Страница.ДанныеДопСтрок;
		Для Каждого ТекущаяСтрока Из ДанныеДопСтрок Цикл
			
			ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
				ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
			
			ДополнительныеПараметры.Вставить("ИндексПоказателя", Страница.ДанныеДопСтрок.Индекс(ТекущаяСтрока) + 1);
			
			СуммаРасходов   = ЗначениеПоказателя("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы",
				ТекущаяСтрока, ДополнительныеПараметры);
			СуммаПрибыли    = ЗначениеПоказателя("ЦенныеБумагиСуммаПрибылиКВычету", ТекущаяСтрока, ДополнительныеПараметры);
			СуммаПрибылиИИС = ЗначениеПоказателя("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету",
				ТекущаяСтрока, ДополнительныеПараметры);
			СуммаУбытка     = ЗначениеПоказателя("ЦенныеБумагиСуммаУбытка", ТекущаяСтрока, ДополнительныеПараметры);
			
			Показатель1 = ЗначениеПоказателя("ЦенныеБумагиСуммаДохода", ТекущаяСтрока, ДополнительныеПараметры);
			Показатель2 = СуммаРасходов + СуммаУбытка + СуммаПрибыли + СуммаПрибылиИИС;
			
			ЭтоОшибка = Показатель1 < Показатель2;
			ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
			
			Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 + %5 + %6 Итог [%7]';
										|en = '%1 %2 %3 + %4 + %5 + %6 Итог [%7]'"), Показатель1,
				ПараметрыНарушения.ЗнакСравнения,
				СуммаРасходов, СуммаУбытка, СуммаПрибыли, СуммаПрибылиИИС, Показатель2);
			
			СтруктураОписание = НовоеОписаниеОшибки();
			СтруктураОписание.НомерКС               = НомерКС;
			СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
			СтруктураОписание.ОписаниеКС            = ОписаниеКС;
			СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
			СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
			
			ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение1Расчет

Процедура КонтрольныеСоотношения_Приложение1Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры)

	Если ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
		КонтрольныеСоотношения_Приложение1Расчет_2021(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура КонтрольныеСоотношения_Приложение1Расчет_2021(Результат, ДанныеОтчета, ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("ИмяРаздела",         "Приложение1Расчет");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПараметрыПроверки = НовыйПараметрыПроверкиКонтрольногоСоотношения();
	ПараметрыПроверки.Результат = Результат;
	ПараметрыПроверки.ДанныеОтчета = ДанныеОтчета;
	ПараметрыПроверки.НомерКС = "12.1";
	ПараметрыПроверки.Показатель1 = "ДоходПродажиНалогооблагаемый";
	ПараметрыПроверки.Показатель2 = "ДоходПродажиЦенаДоговора";
	ПараметрыПроверки.Показатель3 = "КадастроваяСтоимостьКоэффициент";
	
	ПроверкаКС_Приложение1Расчет(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.Результат = Результат;
	ПараметрыПроверки.ДанныеОтчета = ДанныеОтчета;
	ПараметрыПроверки.НомерКС = "12.2";
	ПараметрыПроверки.Показатель1 = "ДоходПродажиНалогооблагаемый";
	ПараметрыПроверки.Показатель2 = "КадастроваяСтоимостьКоэффициент";
	ПараметрыПроверки.Показатель3 = "ДоходПродажиЦенаДоговора";
	
	ПроверкаКС_Приложение1Расчет(ПараметрыПроверки, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение1Расчет(ДанныеВыполнения, ДополнительныеПараметры)

	ПоказателиДекларации = ДополнительныеПараметры.ПоказателиДекларации;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка %1 Расчета к Приложению 1 должна быть равна строке %2 Расчета к Приложению 1,
		|при условии, что строка %2 Расчета к Приложению 1 больше или равна строке %3 Расчета к Приложению 1';
		|en = 'Строка %1 Расчета к Приложению 1 должна быть равна строке %2 Расчета к Приложению 1,
		|при условии, что строка %2 Расчета к Приложению 1 больше или равна строке %3 Расчета к Приложению 1'"),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель1, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель2, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель3, ПоказателиДекларации).ИмяПоля));
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 220 НК РФ';
						|en = 'ст. 220 НК РФ'");
	
	ПредметНарушения = НСтр("ru = 'Занижена сумма дохода от продажи объекта недвижимого имущества в целях налогообложения';
							|en = 'Занижена сумма дохода от продажи объекта недвижимого имущества в целях налогообложения'");
	
	Раздел = ДанныеВыполнения.ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	
	Для Каждого Страница Из Раздел Цикл
		
		Для Каждого ТекущаяСтрока Из Страница.ДанныеДопСтрок Цикл
			
			ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
				ДополнительныеПараметры.СписокРасшифровкиФормулы,
				ОписаниеКС, ,
				ДополнительныеПараметры.НомерПравила);
			
			ДополнительныеПараметры.Вставить("НомерСтраницы", Раздел.Индекс(Страница) + 1);
			
			Показатель1 = ЗначениеПоказателя(ДанныеВыполнения.Показатель1, ТекущаяСтрока, ДополнительныеПараметры);
			Показатель2 = ЗначениеПоказателя(ДанныеВыполнения.Показатель2, ТекущаяСтрока, ДополнительныеПараметры);
			Показатель3 = ЗначениеПоказателя(ДанныеВыполнения.Показатель3, ТекущаяСтрока, ДополнительныеПараметры);
			
			Если Показатель2 >= Показатель3 Тогда
				ЭтоОшибка = Показатель1 <> Показатель2;
			Иначе
				ЭтоОшибка = Ложь;
			КонецЕсли;
			
			ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
			
			Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
										|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
			
			СтруктураОписание = НовоеОписаниеОшибки();
			СтруктураОписание.НомерКС               = ДанныеВыполнения.НомерКС;
			СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
			СтруктураОписание.ОписаниеКС            = ОписаниеКС;
			СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
			СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
			
			ОписаниеВСтруктуруОшибок(ДанныеВыполнения.Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение3Расчет

Процедура КонтрольныеСоотношения_Приложение3Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры)

	Если ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма = "ФормаОтчета2021кв1" Тогда
		КонтрольныеСоотношения_Приложение3Расчет_2021(Результат, ДанныеОтчета, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура КонтрольныеСоотношения_Приложение3Расчет_2021(Результат, ДанныеОтчета, ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("ИмяРаздела",         "Приложение3Расчет");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПараметрыПроверки = НовыйПараметрыПроверкиКонтрольногоСоотношения();
	ПараметрыПроверки.Результат = Результат;
	ПараметрыПроверки.ДанныеОтчета = ДанныеОтчета;
	ПараметрыПроверки.НомерКС = "13.1";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'первый квартал';
											|en = 'первый квартал'");
	ПараметрыПроверки.Показатель1 = "НалоговаяБазаИП1Квартал";
	ПараметрыПроверки.Показатель2 = "ДоходыИП1Квартал";
	ПараметрыПроверки.Показатель3 = "ПрофВычетИП1Квартал";
	ПараметрыПроверки.Показатель4 = "СтандартныйВычетИП1Квартал";
	
	ПроверкаКС_Приложение3Расчет_НалоговаяБазаАвансовогоПлатежа(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "13.2";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'полугодие';
											|en = 'полугодие'");
	ПараметрыПроверки.Показатель1 = "НалоговаяБазаИППолугодие";
	ПараметрыПроверки.Показатель2 = "ДоходыИППолугодие";
	ПараметрыПроверки.Показатель3 = "ПрофВычетИППолугодие";
	ПараметрыПроверки.Показатель4 = "СтандартныйВычетИППолугодие";
	
	ПроверкаКС_Приложение3Расчет_НалоговаяБазаАвансовогоПлатежа(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "13.3";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'девять месяцев';
											|en = 'девять месяцев'");
	ПараметрыПроверки.Показатель1 = "НалоговаяБазаИП9Месяцев";
	ПараметрыПроверки.Показатель2 = "ДоходыИП9Месяцев";
	ПараметрыПроверки.Показатель3 = "ПрофВычетИП9Месяцев";
	ПараметрыПроверки.Показатель4 = "СтандартныйВычетИП9Месяцев";
	
	ПроверкаКС_Приложение3Расчет_НалоговаяБазаАвансовогоПлатежа(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "13.4";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'первый квартал';
											|en = 'первый квартал'");
	ПараметрыПроверки.Показатель1 = "АвансовыйПлатежИП1Квартал";
	ПараметрыПроверки.Показатель2 = "НалоговаяБазаИП1Квартал";
	ПараметрыПроверки.Показатель3 = НалоговыеСтавки(ДанныеОтчета.РеквизитыДокумента.ВыбраннаяФорма).ПоУмолчанию / 100;
	ПараметрыПроверки.Показатель4 = "";
	
	ПроверкаКС_Приложение3Расчет_АвансовыйПлатеж(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "13.5";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'полугодие';
											|en = 'полугодие'");
	ПараметрыПроверки.Показатель1 = "АвансовыйПлатежИППолугодие";
	ПараметрыПроверки.Показатель2 = "НалоговаяБазаИППолугодие";
	
	ПроверкаКС_Приложение3Расчет_АвансовыйПлатеж(ПараметрыПроверки, ДополнительныеПараметры);
	
	ПараметрыПроверки.НомерКС = "13.6";
	ПараметрыПроверки.ПериодСтрокой = НСтр("ru = 'девять месяцев';
											|en = 'девять месяцев'");
	ПараметрыПроверки.Показатель1 = "АвансовыйПлатежИП9Месяцев";
	ПараметрыПроверки.Показатель2 = "НалоговаяБазаИП9Месяцев";
	
	ПроверкаКС_Приложение3Расчет_АвансовыйПлатеж(ПараметрыПроверки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение3Расчет_НалоговаяБазаАвансовогоПлатежа(ДанныеВыполнения, ДополнительныеПараметры)

	ПоказателиДекларации = ДополнительныеПараметры.ПоказателиДекларации;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка %1 Расчета к Приложению 3 больше или равна
		|разности (строка %2 - строка %3 - строка %4) Расчета к Приложению 3
		|при условии, что строка %1 Расчета к Приложению 3 больше 0';
		|en = 'Строка %1 Расчета к Приложению 3 больше или равна
		|разности (строка %2 - строка %3 - строка %4) Расчета к Приложению 3
		|при условии, что строка %1 Расчета к Приложению 3 больше 0'"),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель1, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель2, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель3, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель4, ПоказателиДекларации).ИмяПоля));
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 227 НК РФ';
						|en = 'ст. 227 НК РФ'");
	
	ПредметНарушения = СтрШаблон(
		НСтр("ru = 'Занижена налоговая база для исчисления авансового платежа по НДФЛ за %1';
			|en = 'Занижена налоговая база для исчисления авансового платежа по НДФЛ за %1'"),
		ДанныеВыполнения.ПериодСтрокой);
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы,
		ОписаниеКС, ,
		ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя(ДанныеВыполнения.Показатель1, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя(ДанныеВыполнения.Показатель2, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	Показатель3 = ЗначениеПоказателя(ДанныеВыполнения.Показатель3, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	Показатель4 = ЗначениеПоказателя(ДанныеВыполнения.Показатель4, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	
	РазностьПоказателей = Показатель2 - Показатель3 - Показатель4;
	
	Если Показатель1 > 0 Тогда
		ЭтоОшибка = Показатель1 < РазностьПоказателей;
	Иначе
		ЭтоОшибка = Ложь;
	КонецЕсли;
	
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, РазностьПоказателей, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 - %5 Итог [%6]';
								|en = '%1 %2 %3 - %4 - %5 Итог [%6]'"),
		Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		Показатель2,
		Показатель3,
		Показатель4,
		РазностьПоказателей);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = ДанныеВыполнения.НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(ДанныеВыполнения.Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКС_Приложение3Расчет_АвансовыйПлатеж(ДанныеВыполнения, ДополнительныеПараметры)

	ПоказателиДекларации = ДополнительныеПараметры.ПоказателиДекларации;
	
	ОписаниеКС = СтрШаблон(НСтр("ru = 'Строка %1 Расчета к Приложению 3 должна быть больше или равна
		|произведению (строка %2 * %3) Расчета к Приложению 3';
		|en = 'Строка %1 Расчета к Приложению 3 должна быть больше или равна
		|произведению (строка %2 * %3) Расчета к Приложению 3'"),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель1, ПоказателиДекларации).ИмяПоля),
		КодСтрокиПредставление(СвойствоПоказателя(ДанныеВыполнения.Показатель2, ПоказателиДекларации).ИмяПоля),
		Формат(ДанныеВыполнения.Показатель3, "ЧДЦ=2"));
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 227 НК РФ';
						|en = 'ст. 227 НК РФ'");
	
	ПредметНарушения = СтрШаблон(
		НСтр("ru = 'Занижена сумма исчисленного авансового платежа по НДФЛ за %1';
			|en = 'Занижена сумма исчисленного авансового платежа по НДФЛ за %1'"),
		ДанныеВыполнения.ПериодСтрокой);
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы,
		ОписаниеКС, ,
		ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя(ДанныеВыполнения.Показатель1, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = ЗначениеПоказателя(ДанныеВыполнения.Показатель2, ДанныеВыполнения.ДанныеОтчета, ДополнительныеПараметры);
	
	ПроизведениеПоказателей = Окр(Показатель2 * ДанныеВыполнения.Показатель3);
	
	ЭтоОшибка = Показатель1 < ПроизведениеПоказателей;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, ПроизведениеПоказателей, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 * %4 Итог [%5]';
								|en = '%1 %2 %3 * %4 Итог [%5]'"),
		Показатель1,
		ПараметрыНарушения.ЗнакСравнения,
		Показатель2,
		ДанныеВыполнения.Показатель3,
		ПроизведениеПоказателей);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = ДанныеВыполнения.НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	СтруктураОписание.Комментарий           = КомментарийВозможнаПогрешностьОкругления();
	
	ОписаниеВСтруктуруОшибок(ДанныеВыполнения.Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Приложение5Расчет

Процедура КонтрольныеСоотношения_Приложение5Расчет(Результат, ДанныеОтчета, ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("ИмяРаздела",         "Приложение5Расчет");
	ДополнительныеПараметры.Вставить("НаименованиеРаздела", НаименованиеВыбранногоРаздела(ДополнительныеПараметры));
	
	ПроверкаКС_Приложение5Расчет(Результат, ДанныеОтчета, "11.1, 11.2", ДополнительныеПараметры);

КонецПроцедуры

Процедура ПроверкаКС_Приложение5Расчет(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	ОписаниеКС    = НСтр("ru = 'п. 2 Расчета к Приложению 5 должен быть равен сумме
		|строк 060 и 070 по всем Расчетам к Приложению 5';
		|en = 'п. 2 Расчета к Приложению 5 должен быть равен сумме
		|строк 060 и 070 по всем Расчетам к Приложению 5'");
	
	СсылкаНаЗакон = НСтр("ru = 'ст. 219 НК РФ';
						|en = 'ст. 219 НК РФ'");
	
	ПредметНарушенияБольше = НСтр("ru = 'Завышена сумма социальных налоговых вычетов';
									|en = 'Завышена сумма социальных налоговых вычетов'");
	ПредметНарушенияМеньше = НСтр("ru = 'Занижена сумма социальных налоговых вычетов';
									|en = 'Занижена сумма социальных налоговых вычетов'");
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	СуммаВзносовПФ  = ЗначениеПоказателя("СуммаВзносовПенсионныйФондКВычету", ДанныеОтчета, ДополнительныеПараметры);
	СтраховыеВзносы = ЗначениеПоказателя("СтраховыеВзносыНаПенсиюКВычету", ДанныеОтчета, ДополнительныеПараметры);
	
	Показатель1 = ЗначениеПоказателя("ОбщаяСуммаВзносовПенсионныйФонд", ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = СуммаВзносовПФ + СтраховыеВзносы;
	
	ЭтоОшибка = Показатель1 <> Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушенияБольше, ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 + %4 Итог [%5]';
								|en = '%1 %2 %3 + %4 Итог [%5]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, СуммаВзносовПФ, СтраховыеВзносы, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

Процедура ЗарегистрироватьПоказатель(ПараметрыПоказателя, СписокРасшифровкиПоказателей, СсылкаНаДокумент)
	
	Раздел        = ПараметрыПоказателя.Раздел;
	НомерСтраницы = ПараметрыПоказателя.НомерСтраницы;
	
	КодСтроки     = КодСтрокиПредставление(ПараметрыПоказателя.ИмяПоказателя);
	
	ИмяПоказателя = ПараметрыПоказателя.ИмяПоказателя;
	
	ПустоеПреставлениеПоказателя = ПустаяСтрока(ПараметрыПоказателя.ПредставлениеПоказателя);
	
	Если ПараметрыПоказателя.ИндексПоказателя <> Неопределено Тогда
		НазваниеПоказателя = СтрШаблон("%1, Строка %2, страница №%3 (строка %4)",
			ПараметрыПоказателя.НаименованиеРаздела, КодСтроки, НомерСтраницы, ПараметрыПоказателя.ИндексПоказателя);
	ИначеЕсли Не ПустоеПреставлениеПоказателя Тогда
		НазваниеПоказателя = ПараметрыПоказателя.ПредставлениеПоказателя;
	ИначеЕсли НомерСтраницы = Неопределено Тогда
		НазваниеПоказателя = СтрШаблон("%1, Строка %2", ПараметрыПоказателя.НаименованиеРаздела, КодСтроки);
	Иначе
		НазваниеПоказателя = СтрШаблон("%1, Строка %2, страница №%3",
			ПараметрыПоказателя.НаименованиеРаздела,
			КодСтроки,
			НомерСтраницы);
	КонецЕсли;
	
	Если ПустоеПреставлениеПоказателя И ПараметрыПоказателя.ИндексПоказателя <> Неопределено Тогда
		ИмяПоказателя = СтрШаблон("%1_%2", ИмяПоказателя, ПараметрыПоказателя.ИндексПоказателя);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		НазваниеПоказателя,
		ПараметрыПоказателя.ЗначениеПоказателя,
		"",
		СсылкаНаДокумент,
		СтрЗаменить(Раздел, " ", ""), Неопределено,
		НомерСтраницы,
		ПараметрыПоказателя.НомерПравила);
	
КонецПроцедуры

Функция ЗначениеПоказателя(КлючПоказателя, ДанныеОтчета, ДополнительныеПараметры)
	
	СписокРасшифровкиПоказателей = ДополнительныеПараметры.СписокРасшифровкиПоказателей;
	СсылкаНаДокумент             = ДополнительныеПараметры.СсылкаНаДокумент;
	НомерПравила                 = ДополнительныеПараметры.НомерПравила;
	
	ИмяРаздела       = Неопределено;
	ИндексПоказателя = Неопределено;
	НомерСтраницы    = Неопределено;
	Условие          = Неопределено;
	
	ДополнительныеПараметры.Свойство("ИмяРаздела",       ИмяРаздела);
	ДополнительныеПараметры.Свойство("ИндексПоказателя", ИндексПоказателя);
	ДополнительныеПараметры.Свойство("НомерСтраницы",    НомерСтраницы);
	ДополнительныеПараметры.Свойство("Условие",          Условие);
	
	СтрокаПоказателя = СвойствоПоказателя(КлючПоказателя, ДополнительныеПараметры.ПоказателиДекларации);
	ИмяПоказателя    = СтрокаПоказателя.ИмяПоля;
	
	ПараметрыПоказателя = ПараметрыРегистрацииПоказателя(СтрокаПоказателя.ИмяСтраницы,
		НаименованиеВыбранногоРаздела(ДополнительныеПараметры, СтрокаПоказателя.ИмяСтраницы),
		ДополнительныеПараметры.НомерПравила);
	
	ПараметрыПоказателя.Вставить("ИмяПоказателя", ИмяПоказателя);
	
	ТипДанныхОтчета = ТипЗнч(ДанныеОтчета);
	
	Если ТипДанныхОтчета = Тип("СтрокаТаблицыЗначений")
		Или ТипДанныхОтчета = Тип("Структура")
		И Не ДанныеОтчета.Свойство("РеквизитыДокумента") Тогда
		
		ЗначениеПоказателя  = ДанныеОтчета[ИмяПоказателя];
		ПараметрыПоказателя = ПараметрыРегистрацииПоказателя(ДополнительныеПараметры.ИмяРаздела,
			ДополнительныеПараметры.НаименованиеРаздела, НомерПравила);
		
		ПараметрыПоказателя.Вставить("НомерСтраницы", НомерСтраницы);
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("СписокЗначений") Тогда 
			
			СуммаПоказателя = 0;
			Для Каждого ЭлементСписка Из ЗначениеПоказателя Цикл
				
				СуммаПоказателя      = СуммаПоказателя + ЭлементСписка.Значение;
				ИндексЗначения       = ЗначениеПоказателя.Индекс(ЭлементСписка) + 1;
				ИмяПоказателяТекущее = СтрШаблон("%1_%2_%3", ИмяПоказателя, ИндексПоказателя, ИндексЗначения);
				
				ПараметрыПоказателя.Вставить("ИмяПоказателя",      ИмяПоказателяТекущее);
				ПараметрыПоказателя.Вставить("ЗначениеПоказателя", ЭлементСписка.Значение);
				ПараметрыПоказателя.Вставить("ИндексПоказателя",   СтрШаблон("%1 - %2", ИндексПоказателя, ИндексЗначения));
				ПараметрыПоказателя.Вставить("ПредставлениеПоказателя", ИндексПоказателя);
				ЗарегистрироватьПоказатель(ПараметрыПоказателя, СписокРасшифровкиПоказателей, СсылкаНаДокумент);
				
			КонецЦикла;
			
		Иначе
			
			СуммаПоказателя = ЗначениеПоказателя;
			ПараметрыПоказателя.Вставить("ИмяПоказателя",      ИмяПоказателя);
			ПараметрыПоказателя.Вставить("ЗначениеПоказателя", СуммаПоказателя);
			ПараметрыПоказателя.Вставить("ИндексПоказателя",   ИндексПоказателя);
			ЗарегистрироватьПоказатель(ПараметрыПоказателя, СписокРасшифровкиПоказателей, СсылкаНаДокумент);
			
		КонецЕсли;
		
	Иначе
		СуммаПоказателя = СуммаПоказателяРаздела(ДанныеОтчета,
			ДополнительныеПараметры.СписокРасшифровкиПоказателей,
			ПараметрыПоказателя, Условие);
	КонецЕсли;
	
	Возврат СуммаПоказателя;
	
КонецФункции

// Допустимое расхождение сумм налога, уплаченных в иностранных государствах, подлежащих зачету в РФ
Функция ДопустимоеРасхождениеВСуммахНалогаКИК()
	
	Возврат 2;
	
КонецФункции

Функция КодСтрокиПредставление(ИмяПоказателя)
	
	ИмяПоказателяТекущее = ИмяПоказателя;
	
	ПозицияСоставнойПоказатель = Найти(ИмяПоказателяТекущее, "_");
	Если ПозицияСоставнойПоказатель > 0 Тогда
		ИмяПоказателяТекущее = Лев(ИмяПоказателяТекущее, ПозицияСоставнойПоказатель - 1);
	КонецЕсли;
	
	Возврат Прав(ИмяПоказателяТекущее, 3);
	
КонецФункции

Функция НовоеОписаниеОшибки()
	
	СтруктураОписание = Новый Структура;
	СтруктураОписание.Вставить("НомерКС",               "");
	СтруктураОписание.Вставить("СсылкаНаЗакон",         "");
	СтруктураОписание.Вставить("ОписаниеКС",            "");
	СтруктураОписание.Вставить("РасшифровкаФормулы",    "");
	СтруктураОписание.Вставить("ФормулировкаНарушения", "");
	СтруктураОписание.Вставить("Комментарий",           "");
	
	Возврат СтруктураОписание;
	
КонецФункции

Функция СвойствоПоказателя(КлючПоказателя, ТаблицаПоказателей, ИмяПоказателя = Неопределено)
	
	Если ИмяПоказателя = Неопределено Тогда
		СтрокаПоиска = ТаблицаПоказателей.Найти(КлючПоказателя, "Ключ");
		ТекстОшибки  = СтрШаблон(Нстр("ru = 'Не найден ключ показателя ""%1""';
										|en = 'Не найден ключ показателя ""%1""'"), КлючПоказателя);
	Иначе
		СтрокаПоиска = ТаблицаПоказателей.Найти(ИмяПоказателя, "ИмяПоля");
		ТекстОшибки  = СтрШаблон(Нстр("ru = 'Не найдено имя поля показателя ""%1""';
										|en = 'Не найдено имя поля показателя ""%1""'"), ИмяПоказателя);
	КонецЕсли;
	
	Если СтрокаПоиска = Неопределено Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ПредставленияРазделов(ВыбраннаяФорма)
	
	ДеревоСтраницОтчета = ДеревоСтраницОтчета(ВыбраннаяФорма);
	СтруктураРезультат  = Новый Структура;
	
	Для Каждого ТекущийРаздел Из ДеревоСтраницОтчета.Строки Цикл
		СтруктураРезультат.Вставить(ТекущийРаздел.ИмяСтраницы, ТекущийРаздел.Представление);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция НаименованиеВыбранногоРаздела(СтруктураДанные, ИмяРаздела = Неопределено)
	
	Если ИмяРаздела = Неопределено Тогда
		Представление = СтруктураДанные.ПредставленияРазделов[СтруктураДанные.ИмяРаздела];
	Иначе
		Представление = СтруктураДанные.ПредставленияРазделов[ИмяРаздела];
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция НовыйПараметрыПроверкиКонтрольногоСоотношения()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"); // См. НовыйРезультатПроверкиКонтрольныхСоотношений()
	Результат.Вставить("ДанныеОтчета"); // Структура - Показатели отчета
	Результат.Вставить("НомерКС", ""); // Строка - Пункты проверяемых контрольных соотношений
	Результат.Вставить("ВидСравненияБольшеИлиРавно", Ложь);
	Результат.Вставить("ПериодСтрокой", ""); // Строка - Период, за который проверяются контрольные соотношения
	Результат.Вставить("Показатель1", "");
	Результат.Вставить("Показатель2", "");
	Результат.Вставить("Показатель3", "");
	Результат.Вставить("Показатель4", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДополнительныеСтрокиРаздела(ПараметрыВыполнения, СписокРасшифровкиПоказателей, СуммаПоказателя)
	
	ИмяПоказателя    = ПараметрыВыполнения.ИмяПоказателя;
	ПрименитьУсловие = ПараметрыВыполнения.ПрименитьУсловие;
	ДанныеДопСтрок   = ПараметрыВыполнения.ДанныеДопСтрок;
	Условие          = ПараметрыВыполнения.Условие;
	НомерСтраницы    = ПараметрыВыполнения.НомерСтраницы;
	СсылкаНаДокумент = ПараметрыВыполнения.СсылкаНаДокумент;
	
	ПараметрыПоказателя = ПараметрыРегистрацииПоказателя(
		ПараметрыВыполнения.ИмяРаздела,
		ПараметрыВыполнения.НаименованиеРаздела,
		ПараметрыВыполнения.НомерПравила);
	
	ПараметрыПоказателя.Вставить("НомерСтраницы", НомерСтраницы);
	
	Для Каждого ТекущаяСтрока Из ДанныеДопСтрок Цикл
		
		УчестьСтроку = Не ПрименитьУсловие;
		Если ПрименитьУсловие И УсловиеВыполняется(ТекущаяСтрока, Условие) Тогда
			УчестьСтроку = Истина;
		КонецЕсли;
		
		Если УчестьСтроку Тогда
			
			ЗначениеПоказателя = ТекущаяСтрока[ИмяПоказателя];
			ИндексПоказателя   = ДанныеДопСтрок.Индекс(ТекущаяСтрока) + 1;
			
			Если ТипЗнч(ЗначениеПоказателя) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из ЗначениеПоказателя Цикл
					
					СуммаПоказателя = СуммаПоказателя + ЭлементСписка.Значение;
					ИндексЗначения  = ЗначениеПоказателя.Индекс(ЭлементСписка) + 1;
					
					ИмяПоказателяТекущее = СтрШаблон("%1_%2_%3", ИмяПоказателя, ИндексПоказателя, ИндексЗначения);
					
					ПараметрыПоказателя.Вставить("ИмяПоказателя",      ИмяПоказателяТекущее);
					ПараметрыПоказателя.Вставить("ЗначениеПоказателя", ЭлементСписка.Значение);
					ПараметрыПоказателя.Вставить("ИндексПоказателя",   СтрШаблон("%1 - %2", ИндексПоказателя, ИндексЗначения));
					ПараметрыПоказателя.Вставить("ПредставлениеПоказателя", ИндексПоказателя);
					ЗарегистрироватьПоказатель(ПараметрыПоказателя, СписокРасшифровкиПоказателей, СсылкаНаДокумент);
					
				КонецЦикла;
				
			Иначе
				
				СуммаПоказателя = СуммаПоказателя + ?(ЗначениеЗаполнено(ЗначениеПоказателя), ЗначениеПоказателя, 0);
				
				ПараметрыПоказателя.Вставить("ИмяПоказателя",      ИмяПоказателя);
				ПараметрыПоказателя.Вставить("ЗначениеПоказателя", ЗначениеПоказателя);
				ПараметрыПоказателя.Вставить("ИндексПоказателя",   ИндексПоказателя);
				ЗарегистрироватьПоказатель(ПараметрыПоказателя, СписокРасшифровкиПоказателей, СсылкаНаДокумент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры)
	
	ОписаниеКС = СтрЗаменить(СтруктураОписание.ОписаниеКС, Символы.ПС, " ");
	
	ТекстПроверкаКС = СтрШаблон(НСтр("ru = 'Проверка %1 (КС %2)';
									|en = 'Проверка %1 (КС %2)'"),
		ДополнительныеПараметры.НаименованиеРаздела, СтруктураОписание.НомерКС);
	
	ПредставлениеФормулы = СтрШаблон(НСтр("ru = '%1%2%3';
											|en = '%1%2%3'"), ТекстПроверкаКС, Символы.ПС, ОписаниеКС);
	
	Если Не ЭтоОшибка Тогда
		Результат.КоличествоНайденныхБезОшибок = Результат.КоличествоНайденныхБезОшибок + 1;
	Иначе
		Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
	КонецЕсли;
	
	ВсегоПравил = Результат.КоличествоНайденныхОшибок + Результат.КоличествоНайденныхБезОшибок;
	
	НомерОшибкиСтрока    = Формат(ВсегоПравил, "ЧГ=0");
	СтруктураОшибок      = Результат.СтруктураОшибок;
	
	Если СтруктураОшибок = Неопределено Тогда
		СтруктураОшибок  = Новый Структура;
	КонецЕсли;
	
	ФормулировкаНарушения = СтрЗаменить(СтруктураОписание.ФормулировкаНарушения, Символы.ПС, " ");
	
	СтруктураОшибок.Вставить(СтрШаблон("Описание%1", НомерОшибкиСтрока),    ФормулировкаНарушения);
	СтруктураОшибок.Вставить(СтрШаблон("Нарушение%1", НомерОшибкиСтрока),   СтруктураОписание.СсылкаНаЗакон);
	СтруктураОшибок.Вставить(СтрШаблон("Расшифровка%1", НомерОшибкиСтрока), СтруктураОписание.РасшифровкаФормулы);
	СтруктураОшибок.Вставить(СтрШаблон("ЭтоОшибка%1", НомерОшибкиСтрока),   ЭтоОшибка);
	СтруктураОшибок.Вставить(СтрШаблон("Комментарий%1", НомерОшибкиСтрока), СтруктураОписание.Комментарий);
	СтруктураОшибок.Вставить(СтрШаблон("ТекстовоеПредставлениеФормулы%1",   НомерОшибкиСтрока), ПредставлениеФормулы);
	СтруктураОшибок.Вставить(СтрШаблон("НомерФормулыРасшифровки%1",
		НомерОшибкиСтрока), ДополнительныеПараметры.НомерПравила);
	
	Результат.Вставить("СтруктураОшибок", СтруктураОшибок);
	// Удаление использованных ключей
	ДополнительныеПараметры.Удалить("НомерСтраницы");
	ДополнительныеПараметры.Удалить("Условие");
	
КонецПроцедуры

Функция ПараметрыРегистрацииПоказателя(РазделПоУмолчанию, НаименованиеРазделаПоУмолчанию, НомерПравилаПоУмолчанию)
	
	ПараметрыПоказателя = Новый Структура;
	ПараметрыПоказателя.Вставить("Раздел",                  РазделПоУмолчанию);
	ПараметрыПоказателя.Вставить("НаименованиеРаздела",     НаименованиеРазделаПоУмолчанию);
	ПараметрыПоказателя.Вставить("НомерПравила",            НомерПравилаПоУмолчанию);
	ПараметрыПоказателя.Вставить("ИмяПоказателя",           "");
	ПараметрыПоказателя.Вставить("ЗначениеПоказателя",      "");
	ПараметрыПоказателя.Вставить("НомерСтраницы",           Неопределено);
	ПараметрыПоказателя.Вставить("ИндексПоказателя",        Неопределено);
	ПараметрыПоказателя.Вставить("ПредставлениеПоказателя", "");
	
	Возврат ПараметрыПоказателя;
	
КонецФункции

Функция ПараметрыНарушения(Показатель1, Показатель2, ОписаниеНарушенияБольшеРавно, ОписаниеНарушенияМеньше = "")
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("СтрокаНарушения", "");
	СтруктураРезультат.Вставить("ЗнакСравнения",   "=");
	
	Если Показатель1 = Неопределено Или Показатель2 = Неопределено Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ТекстНарушения = "";
	
	Если Показатель1 > Показатель2 Тогда
		
		ТекстНарушения = ОписаниеНарушенияБольшеРавно;
		СтруктураРезультат.Вставить("ЗнакСравнения", ">");
		
	ИначеЕсли Показатель1 < Показатель2 Тогда
		
		ТекстНарушения = ОписаниеНарушенияМеньше;
		СтруктураРезультат.Вставить("ЗнакСравнения", "<");
		
	КонецЕсли;
	
	Если ТекстНарушения = "" Тогда
		ТекстНарушения = ОписаниеНарушенияБольшеРавно;
	КонецЕсли;
	
	СтруктураРезультат.Вставить("СтрокаНарушения", СтрЗаменить(ТекстНарушения, Символы.ПС, " "));
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ПравилоПревышенияСуммыПриложения(Результат, ДанныеОтчета, НомерКС, ДополнительныеПараметры)

	КлючПоказателя = ДополнительныеПараметры.КлючПоказателя;
	НомерПункта    = ДополнительныеПараметры.НомерПункта;
	Значение       = ДополнительныеПараметры.Значение;
	
	ОписаниеКС = СтрШаблон(ДополнительныеПараметры.ОписаниеКС, НомерПункта, Значение);
	Если Найти(ДополнительныеПараметры.ПредметНарушенияБольше, "%") > 0 Тогда
		ПредметНарушения = СтрШаблон(ДополнительныеПараметры.ПредметНарушенияБольше, Значение);
	Иначе
		ПредметНарушения = ДополнительныеПараметры.ПредметНарушенияБольше;
	КонецЕсли;
	
	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Показатель1 = ЗначениеПоказателя(КлючПоказателя, ДанныеОтчета, ДополнительныеПараметры);
	Показатель2 = Значение;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2, ПредметНарушения);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3';
								|en = '%1 %2 %3'"), Показатель1, ПараметрыНарушения.ЗнакСравнения, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = ДополнительныеПараметры.СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
	// Удаление использованных свойств
	ДополнительныеПараметры.Удалить("КлючПоказателя");
	ДополнительныеПараметры.Удалить("НомерПункта");
	ДополнительныеПараметры.Удалить("Значение");
	
КонецПроцедуры

Функция ПределВычета(КлючПоказателя, ВыбраннаяФорма)
	
	ЗначениеПоказателя = Неопределено;
	
	ПределыВычетов = ПределыВычетов(ВыбраннаяФорма);
	ПределыВычетов.Свойство(КлючПоказателя, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Процедура ПроверитьИтоговуюСуммуПриложения(Результат, ДанныеОтчета, КонтрольнаяЯчейка, НомерКС, ДополнительныеПараметры)

	ДополнительныеПараметры.НомерПравила = ДополнительныеПараметры.НомерПравила + 1;
	ОписаниеКС = СтрЗаменить(ДополнительныеПараметры.ОписаниеКС, Символы.ПС, " ");
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(
		ДополнительныеПараметры.СписокРасшифровкиФормулы, ОписаниеКС,, ДополнительныеПараметры.НомерПравила);
	
	Раздел        = ДанныеОтчета[ДополнительныеПараметры.ИмяРаздела];
	ИмяПоказателя = СвойствоПоказателя(КонтрольнаяЯчейка, ДополнительныеПараметры.ПоказателиДекларации).ИмяПоля;
	Показатель1   = ЗначениеПоказателя(КонтрольнаяЯчейка, ДанныеОтчета, ДополнительныеПараметры);
	Показатель2   = 0;
	
	РасшифровкаПраваяЧасть = "";
	
	Для Каждого ТекущаяСтрока Из Раздел Цикл
		
		Если ТекущаяСтрока.Ключ = ИмяПоказателя Тогда
			Продолжить;
		КонецЕсли;
		
		КлючПоказателя = СвойствоПоказателя(, ДополнительныеПараметры.ПоказателиДекларации, ТекущаяСтрока.Ключ).Ключ;
		Показатель2    = Показатель2 + ЗначениеПоказателя(КлючПоказателя, Раздел, ДополнительныеПараметры);
		
		Если ПустаяСтрока(РасшифровкаПраваяЧасть) Тогда
			РасшифровкаПраваяЧасть = СтрШаблон(НСтр("ru = '%1';
													|en = '%1'"), ТекущаяСтрока.Значение);
		Иначе
			РасшифровкаПраваяЧасть = СтрШаблон(НСтр("ru = '%1 + %2';
													|en = '%1 + %2'"), РасшифровкаПраваяЧасть, ТекущаяСтрока.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоОшибка = Показатель1 > Показатель2;
	ПараметрыНарушения = ПараметрыНарушения(Показатель1, Показатель2,
		ДополнительныеПараметры.ПредметНарушенияБольше, ДополнительныеПараметры.ПредметНарушенияМеньше);
	
	Расшифровка = СтрШаблон(НСтр("ru = '%1 %2 %3 Итог [%4]';
								|en = '%1 %2 %3 Итог [%4]'"),
		Показатель1, ПараметрыНарушения.ЗнакСравнения, РасшифровкаПраваяЧасть, Показатель2);
	
	СтруктураОписание = НовоеОписаниеОшибки();
	СтруктураОписание.НомерКС               = НомерКС;
	СтруктураОписание.СсылкаНаЗакон         = ДополнительныеПараметры.СсылкаНаЗакон;
	СтруктураОписание.ОписаниеКС            = ОписаниеКС;
	СтруктураОписание.РасшифровкаФормулы    = Расшифровка;
	СтруктураОписание.ФормулировкаНарушения = ПараметрыНарушения.СтрокаНарушения;
	
	ОписаниеВСтруктуруОшибок(Результат, СтруктураОписание, ЭтоОшибка, ДополнительныеПараметры);
	
КонецПроцедуры

Функция РазрешенныеВидыДеятельности(ВыбраннаяФорма)
	
	ВидыДеятельности = КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма);
	
	МассивРезультат  = Новый Массив;
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("ПредпринимательскаяДеятельность");
	МассивИсключений.Добавить("ДеятельностьГлавыКФХ");
	
	Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
		Если МассивИсключений.Найти(ВидДеятельности.Ключ) = Неопределено Тогда
			МассивРезультат.Добавить(ВидДеятельности.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция СуммаСпискаПоказателей(Ключи, ДанныеОтчета, Расшифровка, ДополнительныеПараметры = Неопределено)
	
	СуммаПоказателя = 0;
	
	Для Каждого ТекущийКлюч Из Ключи Цикл
		
		ЗначениеПоказателя = ЗначениеПоказателя(ТекущийКлюч, ДанныеОтчета, ДополнительныеПараметры);
		СуммаПоказателя    = СуммаПоказателя + ЗначениеПоказателя;
		
		Если ПустаяСтрока(Расшифровка) Тогда
			Расшифровка = СтрШаблон(НСтр("ru = '%1';
										|en = '%1'"), ЗначениеПоказателя);
		Иначе
			Расшифровка = СтрШаблон(НСтр("ru = '%1 + %2';
										|en = '%1 + %2'"), Расшифровка, ЗначениеПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаПоказателя;
	
КонецФункции

Функция СуммаПоказателяРаздела(ДанныеОтчета, Расшифровка, ПараметрыПоказателя, Условие = Неопределено)
	
	СсылкаНаДокумент    = ДанныеОтчета.РеквизитыДокумента.Ссылка;
	ИмяПоказателя       = ПараметрыПоказателя.ИмяПоказателя;
	НаименованиеРаздела = ПараметрыПоказателя.НаименованиеРаздела;
	Раздел              = ДанныеОтчета[ПараметрыПоказателя.Раздел];
	РезультатСумма      = 0;
	ПрименитьУсловие    = Условие <> Неопределено;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяПоказателя",       ИмяПоказателя);
	ПараметрыВыполнения.Вставить("ИмяРаздела",          ПараметрыПоказателя.Раздел);
	ПараметрыВыполнения.Вставить("НаименованиеРаздела", НаименованиеРаздела);
	ПараметрыВыполнения.Вставить("НомерПравила",        ПараметрыПоказателя.НомерПравила);
	ПараметрыВыполнения.Вставить("ПрименитьУсловие",    ПрименитьУсловие);
	ПараметрыВыполнения.Вставить("Условие",             Условие);
	ПараметрыВыполнения.Вставить("СсылкаНаДокумент",    СсылкаНаДокумент);
	
	Если ТипЗнч(Раздел) = Тип("Структура") Тогда 
		
		РезультатСумма = Раздел[ИмяПоказателя];
		
		Если ПустаяСтрока(ПараметрыПоказателя.ПредставлениеПоказателя) Тогда
			НазваниеПоказателя = СтрШаблон("%1, Строка %2", НаименованиеРаздела, КодСтрокиПредставление(ИмяПоказателя));
		Иначе
			НазваниеПоказателя = СтрШаблон("%1, %2", НаименованиеРаздела, ПараметрыПоказателя.ПредставлениеПоказателя);
		КонецЕсли;
		
		ПараметрыПоказателя.Вставить("ЗначениеПоказателя",      РезультатСумма);
		ПараметрыПоказателя.Вставить("ПредставлениеПоказателя", НазваниеПоказателя);
		ЗарегистрироватьПоказатель(ПараметрыПоказателя, Расшифровка, СсылкаНаДокумент);
		
		Возврат РезультатСумма;
	
	КонецЕсли;
	
	Для Каждого Страница Из Раздел Цикл
		
		НомерСтраницы   = Раздел.Индекс(Страница) + 1;
		СуммаПоказателя = 0;
		ПараметрыПоказателя.Вставить("НомерСтраницы",  НомерСтраницы);
		
		Если ЗначениеЗаполнено(Страница.ДанныеДопСтрок)
			И Страница.ДанныеДопСтрок.Колонки.Найти(ИмяПоказателя) <> Неопределено Тогда
			
			ПараметрыВыполнения.Вставить("НомерСтраницы",  НомерСтраницы);
			ПараметрыВыполнения.Вставить("ДанныеДопСтрок", Страница.ДанныеДопСтрок);
			ОбработатьДополнительныеСтрокиРаздела(ПараметрыВыполнения, Расшифровка, СуммаПоказателя);
			
		Иначе
			
			Если Не ПрименитьУсловие Или ПрименитьУсловие И УсловиеВыполняется(Страница.Данные, Условие) Тогда
				УчестьСтроку = Истина;
			ИначеЕсли ПрименитьУсловие Тогда
				УчестьСтроку = Ложь;
			КонецЕсли;
			
			Если УчестьСтроку Тогда
				
				ЗначениеПоказателя = Страница.Данные[ИмяПоказателя];
				СуммаПоказателя    = СуммаПоказателя + ЗначениеПоказателя;
				
				НазваниеПоказателя = СтрШаблон("%1, Строка %2, страница №%3",
					НаименованиеРаздела, КодСтрокиПредставление(ИмяПоказателя), НомерСтраницы);
				
				ПараметрыПоказателя.Вставить("ЗначениеПоказателя",      ЗначениеПоказателя);
				ПараметрыПоказателя.Вставить("ПредставлениеПоказателя", НазваниеПоказателя);
				ЗарегистрироватьПоказатель(ПараметрыПоказателя, Расшифровка, СсылкаНаДокумент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатСумма = РезультатСумма + СуммаПоказателя;
		
	КонецЦикла;
	
	Возврат РезультатСумма;
	
КонецФункции

Функция КомментарийВозможнаПогрешностьОкругления()
	
	Возврат НСтр("ru = 'Возможно влияние погрешности в результате округления показателей';
				|en = 'Возможно влияние погрешности в результате округления показателей'");
	
КонецФункции

Функция УсловиеВыполняется(СтруктураЗначений, Условие)
	
	Если Условие.Свойство("ГруппаИ") Тогда
		
		Для Каждого ТекущееУсловие Из Условие.ГруппаИ Цикл
			ЗначениеУсловия = СтруктураЗначений[ТекущееУсловие.ЛевоеЗначение];
			Если Не УсловиеЗначенияВыполняется(ЗначениеУсловия, ТекущееУсловие) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		РезультатЗначение = Истина;
		
	Иначе
		
		ЗначениеУсловия   = СтруктураЗначений[Условие.ЛевоеЗначение];
		РезультатЗначение = УсловиеЗначенияВыполняется(ЗначениеУсловия, Условие);
		
	КонецЕсли;
	
	Возврат РезультатЗначение;
	
КонецФункции

Функция УсловиеЗначенияВыполняется(Значение, Условие)
	
	ЭтоМассивЗначений = ТипЗнч(Условие.ПравоеЗначение) = Тип("Массив");
	
	Если Условие.ВидСравнения = ВидСравнения.НеРавно И ЭтоМассивЗначений Тогда
		РезультатЗначение = ЭтоМассивЗначений И Условие.ПравоеЗначение.Найти(Значение) = Неопределено;
	ИначеЕсли Условие.ВидСравнения = ВидСравнения.НеРавно Тогда
		РезультатЗначение = Условие.ПравоеЗначение <> Значение;
	ИначеЕсли ЭтоМассивЗначений Тогда
		РезультатЗначение = Условие.ПравоеЗначение.Найти(Значение) <> Неопределено;
	Иначе
		РезультатЗначение = (Условие.ПравоеЗначение = Значение);
	КонецЕсли;
	
	Возврат РезультатЗначение;
	
КонецФункции

Функция УсловиеОтбораПоля(ПоказателиДекларации, КлючиЗначений, ИсточникДанных, СтруктураЗначений = Неопределено, Равенство = Истина)
	
	Если ТипЗнч(КлючиЗначений) = Тип("Массив") Тогда
		
		Значения = КлючиЗначений;
		
	Иначе
		
		МассивКлючей = СтрРазделить(КлючиЗначений, ",");
		
		Значения = Новый Массив;
		Для Каждого ТекущийКлюч Из МассивКлючей Цикл
			Значения.Добавить(СтруктураЗначений[СокрЛП(ТекущийКлюч)]);
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяПоля = СвойствоПоказателя(ИсточникДанных, ПоказателиДекларации).ИмяПоля;
	
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить("ЛевоеЗначение",  ИмяПоля);
	УсловиеОтбора.Вставить("ПравоеЗначение", Значения);
	Если Равенство Тогда
		УсловиеОтбора.Вставить("ВидСравнения", ВидСравнения.Равно);
	Иначе
		УсловиеОтбора.Вставить("ВидСравнения", ВидСравнения.НеРавно);
	КонецЕсли;
	
	Возврат УсловиеОтбора;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, ПараметрыРаздела, ДанныеОтчета, ВыбраннаяФорма)
	
	Разделы = Новый Массив;
	Если ТипЗнч(ПараметрыРаздела) = Тип("Строка") Тогда
		Если СтрНайти(ПараметрыРаздела, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(ПараметрыРаздела);
			Для Каждого ТекущийЭлемент Из СтрРазделы Цикл
				Разделы.Добавить(ТекущийЭлемент.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(ПараметрыРаздела);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Ложь;
	Для Каждого Раздел Из Разделы Цикл
		Если РазделПуст(ДанныеОтчета, ДеревоВыгрузки, Раздел, ВыбраннаяФорма) Тогда
			РазделыПусты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не РазделыПусты;
	
КонецФункции

Процедура ПроверитьСтраницуРаздела1(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы)
	
	ПоказателиРаздела1_Пункт1 = ПоказателиРаздела1_Пункт1();
	ЗначенияПоказателей = Новый Структура;
	НомерСтроки = 1;
	
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П000100001020_%1", НомерСтроки)) Цикл
		
		Для Каждого Показатель Из ПоказателиРаздела1_Пункт1 Цикл
			ИмяЯчейки = СтрШаблон(Показатель.Значение, НомерСтроки);
			ЗначенияПоказателей.Вставить(Показатель.Ключ, ДанныеСтраницы[ИмяЯчейки]);
		КонецЦикла;
		
		СтрокаЗаполнена = Ложь;
		Для Каждого КлючИЗначение Из ЗначенияПоказателей Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаЗаполнена Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		// Код ОКТМО
		ИмяЯчейкиОКТМО = СтрШаблон(ПоказателиРаздела1_Пункт1["КодОТКМО"], НомерСтроки);
		Если ПустаяСтрока(ЗначенияПоказателей.КодОТКМО) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 в строке %2 не указан код ОКТМО!';
								|en = 'На странице %1 Раздела 1 в строке %2 не указан код ОКТМО!'"), НомерСтраницы, НомерСтроки),
				"Раздел1",
				ИмяЯчейкиОКТМО,
				НомерСтраницы);
		Иначе
			ДлинаОКТМО = СтрДлина(СокрЛП(ЗначенияПоказателей.КодОТКМО));
			Если ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
					СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 в строке %2 указан код ОКТМО некорректной длины!';
									|en = 'На странице %1 Раздела 1 в строке %2 указан код ОКТМО некорректной длины!'"), НомерСтраницы, НомерСтроки),
					"Раздел1",
					ИмяЯчейкиОКТМО,
					НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	КБКПредпринимателя = Неопределено;
	Если ДанныеСтраницы.Свойство("П000100001060", КБКПредпринимателя) И ЗначениеЗаполнено(КБКПредпринимателя) Тогда
		ЯчейкиОКТМО = СтрРазделить("П000100001070,П000100001090,П000100001120,П000100001150", ",");
		Для Каждого ИмяЯчейки Из ЯчейкиОКТМО Цикл
			// Код ОКТМО
			ЗначениеОКТМО = Неопределено;
			Если ДанныеСтраницы.Свойство(ИмяЯчейки, ЗначениеОКТМО) И Не ПустаяСтрока(ЗначениеОКТМО) Тогда
				ДлинаОКТМО = СтрДлина(СокрЛП(ЗначениеОКТМО));
				Если ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
						СтрШаблон(НСтр("ru = 'На странице %1 Раздела 1 указан код ОКТМО некорректной длины!';
										|en = 'На странице %1 Раздела 1 указан код ОКТМО некорректной длины!'"), НомерСтраницы),
						"Раздел1",
						ИмяЯчейки,
						НомерСтраницы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуРаздела2(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы)
	
	КодВидаДохода = ДанныеСтраницы["П000200001001"];
	Если Не ЗначениеЗаполнено(КодВидаДохода) Тогда
		Возврат;
	КонецЕсли;
	
	УдержаноНалогаПоПовышеннойСтавке = ДанныеСтраницы["П000200001081"];
	ДопустимыеКодыВидовДоходаДляПоказателя81 = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16", ",");
	
	Если УдержаноНалогаПоПовышеннойСтавке > 0 И ДопустимыеКодыВидовДоходаДляПоказателя81.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Сумма налога, удержанная у источника выплаты по ставке, предусмотренной абзацем третьим пункта 1
			|или абзацем третьим пункта 3.1 статьи 224 НК РФ, заполняется только в отношении кодок вида доход с «01» по «16»';
			|en = 'Сумма налога, удержанная у источника выплаты по ставке, предусмотренной абзацем третьим пункта 1
			|или абзацем третьим пункта 3.1 статьи 224 НК РФ, заполняется только в отношении кодок вида доход с «01» по «16»'"),
			"Раздел2",
			"П000200001081",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаНалогаУдержаннаяСМатериальнойВыгоды = ДанныеСтраницы["П000200001090"];
	ДопустимыеКодыВидовДоходаДляПоказателя90 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("19");
	
	Если СуммаНалогаУдержаннаяСМатериальнойВыгоды > 0 И ДопустимыеКодыВидовДоходаДляПоказателя90.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Сумма налога, удержанная c доходов в виде материальной выгоды,
			|заполняется только в отношении кода вида дохода «19»';
			|en = 'Сумма налога, удержанная c доходов в виде материальной выгоды,
			|заполняется только в отношении кода вида дохода «19»'"),
			"Раздел2",
			"П000200001090",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаТорговогоСбора = ДанныеСтраницы["П000200001100"];
	ДопустимыеКодыВидовДоходаДляПоказателя100 = СтрРазделить("07,20", ",");
	
	Если СуммаТорговогоСбора > 0 И ДопустимыеКодыВидовДоходаДляПоказателя100.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету,
			|заполняется только в отношении кодов вида дохода «07» или «20»';
			|en = 'Сумма торгового сбора, уплаченная в налоговом периоде, подлежащая зачету,
			|заполняется только в отношении кодов вида дохода «07» или «20»'"),
			"Раздел2",
			"П000200001100",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаФиксированныхАвансовыхПлатежей = ДанныеСтраницы["П000200001120"];
	ДопустимыеКодыВидовДоходаДляПоказателя120 = СтрРазделить("01,10,16", ",");
	
	Если СуммаФиксированныхАвансовыхПлатежей > 0 И ДопустимыеКодыВидовДоходаДляПоказателя120.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Сумма фиксированных авансовых платежей, уплаченная налогоплательщиком, или сумма налога на прибыль организаций,
			|подлежащие зачету, заполняется только в отношении кодов вида дохода «01», «10» или «16»';
			|en = 'Сумма фиксированных авансовых платежей, уплаченная налогоплательщиком, или сумма налога на прибыль организаций,
			|подлежащие зачету, заполняется только в отношении кодов вида дохода «01», «10» или «16»'"),
			"Раздел2",
			"П000200001120",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаНалогаПСН = ДанныеСтраницы["П000200001140"];
	ДопустимыеКодыВидовДоходаДляПоказателя140 = СтрРазделить("07,20", ",");
	
	Если СуммаНалогаПСН > 0 И ДопустимыеКодыВидовДоходаДляПоказателя140.Найти(КодВидаДохода) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			НСтр("ru = 'Сумма налога, уплаченная в связи с применением патентной системы налогообложения,
			|подлежащая зачету, заполняется только в отношении кодов вида дохода «07» или «20»';
			|en = 'Сумма налога, уплаченная в связи с применением патентной системы налогообложения,
			|подлежащая зачету, заполняется только в отношении кодов вида дохода «07» или «20»'"),
			"Раздел2",
			"П000200001140",
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения1(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ВыбраннаяФорма)
	
	ВидыДоходов = ВидыДоходов(ВыбраннаяФорма);
	
	НомерСтроки = 1;
	
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П000300001030_%1", НомерСтроки)) Цикл
		
		КодВидаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001010_%1", НомерСтроки)];
		Если Не ЗначениеЗаполнено(КодВидаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указан код вида доходов", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001010_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НалоговаяСтавкаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001020_%1", НомерСтроки)];
		Если КодВидаДоходаРФ = ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
			Если Не ЗначениеЗаполнено(НалоговаяСтавкаДоходаРФ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
					СтрШаблон("На странице %1 Приложения 1 в строке %2 не указана ставка налога", НомерСтраницы, НомерСтроки),
					"Приложение1",
					"П000300001020_" + НомерСтроки,
					НомерСтраницы);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НалоговаяСтавкаДоходаРФ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
					"Налоговая ставка заполняется только в отношении кода вида дохода 25",
					"Приложение1",
					"П000300001020_" + НомерСтроки,
					НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		
		ИННИсточникаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001030_%1", НомерСтроки)];
		ДлинаИНН = СтрДлина(СокрЛП(ИННИсточникаДоходаРФ));
		Если ДлинаИНН > 0 И ДлинаИНН <> 12 И  ДлинаИНН <> 10  Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 1 в строке %2 указан ИНН некорректной длины!", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001030_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		КППИсточникаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001040_%1", НомерСтроки)];
		ДлинаКПП = СтрДлина(СокрЛП(КППИсточникаДоходаРФ));
		Если ДлинаИНН = 10 И ДлинаКПП <> 9  Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 1 в строке %2 указан КПП некорректной длины!", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001040_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НаименованиеИсточникаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001060_%1", НомерСтроки)];
		Если Не ЗначениеЗаполнено(НаименованиеИсточникаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указано Наименование источника выплаты дохода", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001060_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		СуммаДоходаРФ = ДанныеСтраницы[СтрШаблон("П000300001070_%1", НомерСтроки)];
		Если Не ЗначениеЗаполнено(СуммаДоходаРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 1 в строке %2 не указана сумма дохода", НомерСтраницы, НомерСтроки),
				"Приложение1",
				"П000300001070_" + НомерСтроки,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения2(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ВыбраннаяФорма)
	
	ВидыДоходов = ВидыДоходов(ВыбраннаяФорма);
	
	ОКСМДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001010"];
	Если Не ЗначениеЗаполнено(ОКСМДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указан код страны источника выплаты", НомерСтраницы),
			"Приложение2",
			"П000400001010",
			НомерСтраницы);
	КонецЕсли;
	
	НаименованиеИсточникаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001020"];
	Если Не ЗначениеЗаполнено(НаименованиеИсточникаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указано Наименование источника выплаты дохода", НомерСтраницы),
			"Приложение2",
			"П000400001020",
			НомерСтраницы);
	КонецЕсли;
	
	ВалютаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001030"];
	Если Не ЗначениеЗаполнено(ВалютаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указан код валюты", НомерСтраницы),
			"Приложение2",
			"П000400001030",
			НомерСтраницы);
	КонецЕсли;
	
	КодВидаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001031"];
	Если Не ЗначениеЗаполнено(КодВидаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указан код вида дохода", НомерСтраницы),
			"Приложение2",
			"П000400001031",
			НомерСтраницы);
	КонецЕсли;
	
	ДатаПолученияДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001040"];
	Если Не ЗначениеЗаполнено(ДатаПолученияДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указана дата получения дохода", НомерСтраницы),
			"Приложение2",
			"П000400001040",
			НомерСтраницы);
	КонецЕсли;
	
	НалоговаяСтавкаДоходаЗаПределамиРФ = ДанныеСтраницы.П000400001041;
	Если КодВидаДоходаЗаПределамиРФ = ВидыДоходов.ИнойДоходПоИнойСтавке Тогда
		Если Не ЗначениеЗаполнено(НалоговаяСтавкаДоходаЗаПределамиРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Приложения 2: не указана ставка налога", НомерСтраницы),
				"Приложение2",
				"П000400001041",
				НомерСтраницы);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НалоговаяСтавкаДоходаЗаПределамиРФ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				"Налоговая ставка заполняется только в отношении кода вида дохода 25",
				"Приложение2",
				"П000400001041",
				НомерСтраницы);
		КонецЕсли;
	КонецЕсли;
	
	КурсНаДатуДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001050"];
	Если Не ЗначениеЗаполнено(КурсНаДатуДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указан курс иностранной валюты", НомерСтраницы),
			"Приложение2",
			"П000400001050",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001060"];
	Если Не ЗначениеЗаполнено(СуммаДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указана сумма дохода, полученная в иностранной валюте", НомерСтраницы),
			"Приложение2",
			"П000400001060",
			НомерСтраницы);
	КонецЕсли;
	
	СуммаРубДоходаЗаПределамиРФ = ДанныеСтраницы["П000400001070"];
	Если Не ЗначениеЗаполнено(СуммаРубДоходаЗаПределамиРФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
			СтрШаблон("На странице %1 Приложения 2 не указана сумма дохода, полученная в иностранной валюте в пересчете в рубли", НомерСтраницы),
			"Приложение2",
			"П000400001070",
			НомерСтраницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения7(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ВыбраннаяФорма)
	
	КодыОбъектовНедвижимости = КодыНаименованияОбъектаНедвижимости(ВыбраннаяФорма);
	
	Если ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		ПроверитьСтраницуПриложения7_2024(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, КодыОбъектовНедвижимости);
	Иначе
		ПроверитьСтраницуПриложения7_2025(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, КодыОбъектовНедвижимости);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложения8(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ВыбраннаяФорма)
	
	ПризнакиУчетаУбытков = ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма);
	
	Если ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		ПроверитьСтраницуПриложения8_2024(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ПризнакиУчетаУбытков);
	Иначе
		ПроверитьСтраницуПриложения8_2025(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы, ПризнакиУчетаУбытков);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложение5Расчет(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы)
	
	Если ДанныеСтраницы.П001000001060 <> 0 Тогда
		
		ДлинаИНН = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001010)); //ИНН
		ДлинаКПП = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001020)); //КПП
		ДлинаНомераДоговора = СтрДлина(СокрЛП(ДанныеСтраницы.П001000001050));
		
		Если ДлинаИНН <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан ИНН некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан ИНН некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001010",
				НомерСтраницы);
		КонецЕсли;
		
		Если ДлинаКПП <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан КПП некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан КПП некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001020",
				НомерСтраницы);
		КонецЕсли;
		
		Если ДлинаНомераДоговора = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон(НСтр("ru = 'На странице %1 Расчета к Приложению 5 указан номер договора некорректной длины!';
								|en = 'На странице %1 Расчета к Приложению 5 указан номер договора некорректной длины!'"), НомерСтраницы),
				"Приложение5Расчет",
				"П001000001050",
				НомерСтраницы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтраницуПриложение1Расчет(ДанныеСтраницы, НомерСтраницы, РеквизитыФормы)
	
	НомерСтроки = 1;
	Пока ДанныеСтраницы.Свойство(СтрШаблон("П001900001010_%1", НомерСтроки)) Цикл
		
		ИмяПоля = СтрШаблон("П001900001010_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Расчета к Приложению 1 в строке %2 не указан кадастровый номер", НомерСтраницы, НомерСтроки),
				"Приложение1Расчет",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("П001900001030_%1", НомерСтроки);
		Если Не ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоля]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
				СтрШаблон("На странице %1 Расчета к Приложению 1 в строке %2 не указана сумма дохода исходя из цены договора", НомерСтраницы, НомерСтроки),
				"Приложение1Расчет",
				ИмяПоля,
				НомерСтраницы);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоказателиРаздела1_Пункт1()
	
	Показатели = Новый Соответствие;
	Показатели.Вставить("КБК", "П000100001020_%1");
	Показатели.Вставить("КодОТКМО", "П000100001030_%1");
	Показатели.Вставить("СуммаУплата", "П000100001040_%1");
	Показатели.Вставить("СуммаВозврат", "П000100001050_%1");
	
	Возврат Показатели;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(Стр, РеквизитыФормы)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T"  ИЛИ Стр.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Длина значения показателя ""%1"" (%2) меньше минимально возможной (%3<%4) (%5)';
											|en = 'Длина значения показателя ""%1"" (%2) меньше минимально возможной (%3<%4) (%5)'"),
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МинРазмерность,
					Стр.Раздел);
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
					ТекстОшибки,
					Стр.Раздел,
					Стр.Ключ,
					НомерСтраницыРаздела(Стр, РеквизитыФормы));
			Иначе
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Длина значения показателя ""%1"" (%2) меньше минимально возможной (%3 < %4) (%5)';
						|en = 'Длина значения показателя ""%1"" (%2) меньше минимально возможной (%3 < %4) (%5)'"),
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МинРазмерность,
					Стр.Раздел);
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы, ТекстСообщения, "Титульный", "");
			КонецЕсли;
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Длина значения показателя ""%1"" (%2) больше максимально возможной (%3 > %4) (%5)';
											|en = 'Длина значения показателя ""%1"" (%2) больше максимально возможной (%3 > %4) (%5)'"),
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МаксРазмерность,
					Стр.Раздел);
				
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы,
					ТекстОшибки,
					Стр.Раздел,
					Стр.Ключ,
					НомерСтраницыРаздела(Стр, РеквизитыФормы));
			Иначе
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Длина значения показателя ""%1"" (%2) больше максимально возможной (%3 > %4) (%5)';
						|en = 'Длина значения показателя ""%1"" (%2) больше максимально возможной (%3 > %4) (%5)'"),
					РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр),
					Стр.Код,
					ДлинаЗначения,
					Стр.МаксРазмерность,
					Стр.Раздел);
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РеквизитыФормы, ТекстСообщения, "Титульный", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция НомерСтраницыРаздела(СтрокаРаздела, РеквизитыФормы)
	
	НомерСтраницы = "";
	
	Если СтрокаРаздела.Многостраничность И СтрокаРаздела.Родитель <> Неопределено Тогда
		
		Если СтрокаРаздела.Многострочность Тогда
			// Ячейки в многострочных разделах нужно искать через данные отчета
			НомерСтраницы = НомерСтраницыПоСтрокеМногострочногоРаздела(СтрокаРаздела.Родитель.Строки,
				СтрокаРаздела.Раздел,
				РеквизитыФормы.ДанныеОтчета[СтрокаРаздела.Раздел],
				РеквизитыФормы.ВыбраннаяФорма);
		Иначе
			// Ячейка располагается в узле родителя верхнего уровня (ячейка - строка - страница)
			ТекущаяСтрокаВДереве = СтрокаРаздела.Родитель;
			НомерСтраницы = ТекущаяСтрокаВДереве.Родитель.Строки.Индекс(ТекущаяСтрокаВДереве) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерСтраницы;
	
КонецФункции

Функция НомерСтраницыПоСтрокеМногострочногоРаздела(СтрокаРаздела, ИмяРаздела, ДанныеРаздела, ВыбраннаяФорма)
	
	// Номер страницы по многострочному разделу будем искать по полному совпадению полей в строке данных всего раздела
	
	КоличествоСтрокНаСтранице = МаксимальноеКоличествоСтрокНаСтранице(ВыбраннаяФорма, ИмяРаздела);
	
	Для Каждого ТекущаяСтрока Из ДанныеРаздела Цикл
		
		Если ТекущаяСтрока.Данные = Неопределено Или ТекущаяСтрока.Данные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексСтроки = 1 По КоличествоСтрокНаСтранице Цикл
			
			КоличествоПолей = 0;
			КоличествоСовпадающихЗначений = 0;
			
			Для Каждого ТекущееПоле Из СтрокаРаздела Цикл
				
				Если Не ЗначениеЗаполнено(ТекущееПоле.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоПолей = КоличествоПолей + 1;
				
				ИмяЯчейкиСтроки = СтрШаблон("%1_%2", ТекущееПоле.Ключ, ИндексСтроки);
				ЗначениеПоказателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяСтрока.Данные, ИмяЯчейкиСтроки);
				Если ЗначениеВФорматеXML(ТекущееПоле, ЗначениеПоказателя) = ТекущееПоле.Значение Тогда
					КоличествоСовпадающихЗначений = КоличествоСовпадающихЗначений + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПолей = КоличествоСовпадающихЗначений Тогда
				Возврат ДанныеРаздела.Индекс(ТекущаяСтрока) + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если не найдено соответствие по строке, то по умолчанию возвращается всегда первая страница раздела
	Возврат 0;
	
КонецФункции

Функция ЗначениеВФорматеXML(Узел, ЗначениеПоказателя)
	
	// Преобразуем значение показателя по данным нужного узла
	
	СтруктураУзла = Новый Структура("Значение, Код, Формат, МинРазмерность, МаксРазмерность");
	ЗаполнитьЗначенияСвойств(СтруктураУзла, Узел);
	ВывестиПоказательВXML(СтруктураУзла, ЗначениеПоказателя);
	
	Возврат СтруктураУзла.Значение;
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Код = "ОКВЭД" Тогда
		// Для ОКВЭД нужно убрать точки в конце
		ЗначениеПоказателя = СтрЗаменить(СокрЛП(СтрЗаменить(ЗначениеПоказателя, ".", " ")) ," ", ".");
	ИначеЕсли Узел.Код = "Тлф" Тогда
		ЗначениеПоказателя = ТелефонДляОтчета(ЗначениеПоказателя);
	ИначеЕсли Узел.Код = "НомОбъект" Или Узел.Код = "СвМестОбъект" Или Узел.Код = "НомКадОтчуждОНИ" Тогда
		ЗначениеПоказателя = СтрЗаменить(ЗначениеПоказателя, Символы.ПС, " ");
	КонецЕсли;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=0; ЧГ=";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			// Пустое значение для gYear
			Узел.Значение = "0001";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
			
			Узел.Значение = Прав(СокрЛП(Формат(ЗначениеПоказателя, "ЧГ=")), 4);
			
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальноеКоличествоСтрокНаСтранице(ВыбраннаяФорма, ИмяСтраницы)
	
	МаксимальноеКоличествоСтрок = 0;
	СвойстваРазделовДекларации = СвойстваРазделовДекларации(ВыбраннаяФорма, ИмяСтраницы);
	Для Каждого Раздел Из СвойстваРазделовДекларации.Строки Цикл
		Если Раздел.ИмяСтраницы = ИмяСтраницы Тогда
			Если Раздел.МногострочностьВРазделе.Количество() <> 0 Тогда
				МаксимальноеКоличествоСтрок = Раздел.МногострочностьВРазделе[0].МаксимальноеКоличествоСтрокНаСтранице;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеКоличествоСтрок;
	
КонецФункции

Функция ДанныеРазделовПоПолямТабличногоДокумента(ПоказателиОтчета)
	
	ДанныеРазделов = Новый Структура;
	
	ДанныеРазделов.Вставить("Титульный", ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
	ДанныеРазделов.Вставить("Приложение4", ПоказателиОтчета.ПолеТабличногоДокументаПриложение4);
	ДанныеРазделов.Вставить("Приложение5", ПоказателиОтчета.ПолеТабличногоДокументаПриложение5);
	ДанныеРазделов.Вставить("Приложение6", ПоказателиОтчета.ПолеТабличногоДокументаПриложение6);
	
	Если ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРаздел1Приложение") Тогда
		ДанныеРазделов.Вставить("Раздел1Приложение", ПоказателиОтчета.ПолеТабличногоДокументаРаздел1Приложение);
	КонецЕсли;
	
	Если ПоказателиОтчета.Свойство("ПолеТабличногоДокументаПриложение3Расчет") Тогда
		ДанныеРазделов.Вставить("Приложение3Расчет", ПоказателиОтчета.ПолеТабличногоДокументаПриложение3Расчет);
	КонецЕсли;
	
	Если ПоказателиОтчета.Свойство("ПолеТабличногоДокументаПриложение5Продолжение") Тогда
		ДанныеРазделов.Вставить("Приложение5Продолжение", ПоказателиОтчета.ПолеТабличногоДокументаПриложение5Продолжение);
	КонецЕсли;
	
	Возврат ДанныеРазделов;
	
КонецФункции

Функция НоваяТаблицаСообщений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Раздел", ОбщегоНазначения.ОписаниеТипаСтрока(22));
	Результат.Колонки.Добавить("ИмяЯчейки", ОбщегоНазначения.ОписаниеТипаСтрока(13));
	Результат.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("Страница", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Результат.Колонки.Добавить("ОтчетДок", Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	Результат.Колонки.Добавить("Отчет", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДанныхОтчета

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, РеквизитыФормы)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(РеквизитыФормы.ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Индекс);
		Если Не ПустаяСтрока(ТекСтр.Условие) Тогда
			Если Не РегламентированнаяОтчетность.УсловиеВыполнено(РеквизитыФормы, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, РеквизитыФормы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(РеквизитыФормы, Узел, ДанныеРаздела = Неопределено, НомерСтроки = Неопределено, ТолькоАтрибуты = Ложь)
	
	Если Узел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем данные конкретного раздела
	Если ДанныеРаздела = Неопределено Тогда
		ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	КонецЕсли;
	
	СтрокиУзла = Новый Массив;
	Для Каждого ТекущаяСтрока Из Узел.Строки Цикл
		СтрокиУзла.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из СтрокиУзла Цикл
		Если (ТекущаяСтрока.Тип = "С" Или ТекущаяСтрока.Тип = "C") И Не ТолькоАтрибуты Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, "ИмяКлючевогоУзлаСодержательнойЧасти")
				И ТекущаяСтрока.Код = ДанныеРаздела.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(РеквизитыФормы, ТекущаяСтрока);
			ИначеЕсли ТекущаяСтрока.Многострочность Тогда
				//Особенность декларации, многострочные подузлы
				Если ТекущаяСтрока.Родитель.Многострочность Тогда
					Если ЭтоРеквизитОписанияОрганизации(ТекущаяСтрока.Код) Тогда
						Если УсловиеЮр_Физ(ДанныеРаздела, ТекущаяСтрока, НомерСтроки) Тогда
							ЗаполнитьДаннымиУзел(РеквизитыФормы, ТекущаяСтрока, ДанныеРаздела, НомерСтроки);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ТекущаяСтрока);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, ТекущаяСтрока);
					ЗаполнитьДаннымиУзел(РеквизитыФормы, УзелСоответствующийСтроке, ДанныеРаздела, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				Если ЭтоРеквизитОписанияОрганизации(ТекущаяСтрока.Код) Тогда
					Если УсловиеЮр_Физ(ДанныеРаздела, ТекущаяСтрока, НомерСтроки) Тогда
						ЗаполнитьДаннымиУзел(РеквизитыФормы, ТекущаяСтрока, ДанныеРаздела, НомерСтроки);
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Раздел) И Не ТекущаяСтрока.Многостраничность Тогда
					ЗаполнитьДаннымиУзел(РеквизитыФормы, ТекущаяСтрока, , НомерСтроки);
				Иначе
					ЗаполнитьДаннымиУзел(РеквизитыФормы, ТекущаяСтрока, ДанныеРаздела, НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ТекущаяСтрока.ЗначениеПоУмолчанию) Тогда
				Если Не ПустаяСтрока(ТекущаяСтрока.Ключ) Тогда
					ПолныйКодПоказателя = ТекущаяСтрока.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеРаздела, ПолныйКодПоказателя) Тогда
						ЗначениеПоказателя = ?(ДанныеРаздела[ПолныйКодПоказателя] = 0, ТекущаяСтрока.ЗначениеПоУмолчанию, ДанныеРаздела[ПолныйКодПоказателя]);
						Если ЗначениеПоказателя = "" И ТекущаяСтрока.Формат = "N" Тогда
							ЗначениеПоказателя = ЗначениеПоказателяПустогоПоказателя(ТекущаяСтрока);
						КонецЕсли;
						ВывестиПоказательВXML(ТекущаяСтрока, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ТекущаяСтрока, "");
					КонецЕсли;
				Иначе
					ТекущаяСтрока.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(ТекущаяСтрока.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ТекущаяСтрока, ДанныеРаздела[Сред(ТекущаяСтрока.ЗначениеПоУмолчанию, 2)]);
			Иначе
				ТекущаяСтрока.Значение = ТекущаяСтрока.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоРеквизитОписанияОрганизации(ТекущийКлюч)
	
	КлючиОписания = РеквизитыОписанияЮрЛицо();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КлючиОписания, РеквизитыОписанияФизЛицо());
	
	Возврат КлючиОписания.Найти(ТекущийКлюч) <> Неопределено;
	
КонецФункции

Функция РеквизитыОписанияЮрЛицо()
	
	Результат = Новый Массив;
	Результат.Добавить("ИстЮЛ");
	Результат.Добавить("СведИст");
	Результат.Добавить("СвОрг");
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыОписанияФизЛицо()
	
	Результат = Новый Массив;
	Результат.Добавить("ИстФЛИн");
	Результат.Добавить("СвФЛ");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(РеквизитыФормы, УзелСодержательнойЧасти)
	
	Если УзелСодержательнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем Родительский узел - эталон, структура будет определеяться по эталонному узлу.
	// После цикла по всем элементам эталонного узла, он должен быть удален.
	Эталон = СкопироватьУзел(УзелСодержательнойЧасти.Родитель, УзелСодержательнойЧасти);
	
	// Очищаем все подчиненные узлы родительского узла.
	// По мере необходимости эти узлы будут создаваться.
	УзелСодержательнойЧасти.Строки.Очистить();
	
	Для Каждого ПодчиненныйУзел Из Эталон.Строки Цикл
		
		Если ПодчиненныйУзел.Многостраничность Тогда
			ЗаполнитьДаннымиУзелМногостраничногоРаздела(РеквизитыФормы, УзелСодержательнойЧасти, ПодчиненныйУзел);
		Иначе
			ЗаполнитьДаннымиУзелРаздела(РеквизитыФормы, УзелСодержательнойЧасти, ПодчиненныйУзел);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем эталон из дерева выгрузки.
	Эталон.Родитель.Строки.Удалить(Эталон);
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелРаздела(РеквизитыФормы, Родитель, Узел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(Родитель.Владелец(), Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Если РеквизитыФормы.ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		ЗаполнитьДаннымиУзелРаздела2024(РеквизитыФормы, Родитель, Узел, ПоказателиРаздела);
	Иначе
		ЗаполнитьДаннымиУзелРаздела2025(РеквизитыФормы, Родитель, Узел, ПоказателиРаздела);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелРаздела_Приложение5(РеквизитыФормы, Родитель, Узел)
	
	ПоказателиПриложение5 = ПолучитьПоказателиРаздела(Узел, "Приложение5", РеквизитыФормы.ВыбраннаяФорма);
	
	Приложение5Пустое = СтраницаПуста(РеквизитыФормы.ДанныеОтчета.Приложение5,
		ПоказателиПриложение5,
		Узел.Многострочность);
	
	Если Приложение5Пустое Тогда
		Возврат;
	КонецЕсли;
	
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла);
	
	РасчВычСтанд = ПолучитьПодчиненныйЭлемент(Узел, "РасчВычСтанд");
	Если РасчВычСтанд <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, РасчВычСтанд, РеквизитыФормы.ДанныеОтчета.Приложение5);
	КонецЕсли;
	
	РасчВычСоцБез219_2 = ПолучитьПодчиненныйЭлемент(Узел, "РасчВычСоцБез219.2");
	Если РасчВычСоцБез219_2 <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, РасчВычСоцБез219_2, РеквизитыФормы.ДанныеОтчета.Приложение5);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелРаздела_Приложение5Продолжение(РеквизитыФормы, Родитель, Узел)
	
	ПоказателиПриложение5Продолжение = ПолучитьПоказателиРаздела(Узел,
		"Приложение5Продолжение",
		РеквизитыФормы.ВыбраннаяФорма);
	
	Приложение5ПродолжениеПустое = СтраницаПуста(РеквизитыФормы.ДанныеОтчета.Приложение5Продолжение,
		ПоказателиПриложение5Продолжение,
		Узел.Многострочность);
	
	Если Приложение5ПродолжениеПустое Тогда
		Возврат;
	КонецЕсли;
	
	ЭкземплярУзла = Родитель.Строки.Найти(Узел.Код, "Код");
	Если ЭкземплярУзла = Неопределено Тогда
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	КонецЕсли;
	
	ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла);
	
	РасчВычСоц219_2 = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчВычСоц219.2");
	Если РасчВычСоц219_2 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Суммы обучения за себя находятся на странице Приложения 5, но включены в другой раздел
	СуммаОбученияЗаСебя = ПолучитьПодчиненныйЭлемент(РасчВычСоц219_2, "СумОбуч");
	Если СуммаОбученияЗаСебя <> Неопределено Тогда
		СуммаОбученияЗаСебя.Значение = Формат(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыФормы.ДанныеОтчета.Приложение5,
			СуммаОбученияЗаСебя.Ключ, 0), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	КонецЕсли;
	
	СуммаОбученияЗаСебяИностранное = ПолучитьПодчиненныйЭлемент(РасчВычСоц219_2, "СумОбучИн");
	Если СуммаОбученияЗаСебяИностранное <> Неопределено Тогда
		СуммаОбученияЗаСебяИностранное.Значение = Формат(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			РеквизитыФормы.ДанныеОтчета.Приложение5,
			СуммаОбученияЗаСебяИностранное.Ключ, 0), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела(РеквизитыФормы, Родитель, Узел)
	
	Если Узел.Код = "СумНалПу" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_СумНалПу(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДоходИстИно" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходИстИно(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДоходПредпр" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходПредпр(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ВычСоцИнв219" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ИмущНалВычНов" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ИмущНалВычНов(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ЗаявЗачВозвр" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ЗаявЗачВозвр(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	Если Узел.Код = "ДохОперЦБ" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ(РеквизитыФормы, Родитель, Узел);
		Возврат;
	КонецЕсли;
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(Родитель.Владелец(), Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
 	Для Каждого СтраницаРаздела Из РеквизитыФормы.ДанныеОтчета[Узел.Раздел] Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		// Проверим заполненность страницы раздела.
		Если СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, Узел.Многострочность) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Узел.Многострочность Тогда
			// Требуется особая обработка, т.к. каждая строка листа соответствует отдельному элементу в структуре выгрузки.
			Для Каждого СтрокаМногострочнойЧасти Из СтраницаРаздела.ДанныеДопСтрок Цикл
				ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
				ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, СтрокаМногострочнойЧасти);
			КонецЦикла;
		Иначе
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_СумНалПу(РеквизитыФормы, Родитель, Узел)
	
	Перем ЭкземплярУзла;
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	// Создаем экземпляр узла СумНалПу
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		Если Не СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭкземплярУзла <> Неопределено Тогда
		
		// Добавляем строки СумНалПуИскл227, соответствующие пункту 1 раздела, из многострочной части страниц раздела
		ЭталонСумНалПуИскл227 = ПолучитьПодчиненныйЭлемент(Узел, "СумНалПуИскл227");
		Если ЭталонСумНалПуИскл227 <> Неопределено Тогда
			Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
				
				ДанныеСтраницы = СтраницаРаздела.Данные;
				
				Если СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаМногострочнойЧасти Из СтраницаРаздела.ДанныеДопСтрок Цикл
					ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСумНалПуИскл227);
					ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярСтроки, СтрокаМногострочнойЧасти);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем строки СумНалПу227, соответствующие пункту 2 раздела
		ЭталонСумНалПу227 = ПолучитьПодчиненныйЭлемент(Узел, "СумНалПу227");
		Если ЭталонСумНалПу227 <> Неопределено Тогда
			Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
				
				ДанныеСтраницы = СтраницаРаздела.Данные;
				
				Если СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСумНалПу227);
				ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярСтроки, ДанныеСтраницы);
				
				// АвПУУменПг, АвПУУмен9м, НалПУУменПер - состоит из двух значений: ячейка к доплате и ячейка к уменьшению
				ЭталонАвПУУменПг = ПолучитьПодчиненныйЭлемент(ЭкземплярСтроки, "АвПУУменПг");
				Если ЭталонАвПУУменПг <> Неопределено Тогда
					ВывестиПоказательВXML(ЭталонАвПУУменПг, ДанныеСтраницы.П000100001100 - ДанныеСтраницы.П000100001110);
				КонецЕсли;
				
				ЭталонАвПУУмен9м = ПолучитьПодчиненныйЭлемент(ЭкземплярСтроки, "АвПУУмен9м");
				Если ЭталонАвПУУмен9м <> Неопределено Тогда
					ВывестиПоказательВXML(ЭталонАвПУУмен9м, ДанныеСтраницы.П000100001130 - ДанныеСтраницы.П000100001140);
				КонецЕсли;
				
				ЭталоНалПУУменПер = ПолучитьПодчиненныйЭлемент(ЭкземплярСтроки, "НалПУУменПер");
				Если ЭталоНалПУУменПер <> Неопределено Тогда
					ВывестиПоказательВXML(ЭталоНалПУУменПер, ДанныеСтраницы.П000100001160 - ДанныеСтраницы.П000100001170);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходИстИно(РеквизитыФормы, Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	СтавкиИУзлы = Новый Соответствие;
	
	ЭталонСтроки = ПолучитьПодчиненныйЭлемент(Узел, "РасчДохНалИно");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		
		ПоказателиЛиста = СтраницаЛиста.Данные;
		
		Если СтраницаПуста(ПоказателиЛиста, ПоказателиРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаЛиста = Неопределено;
		Если ПоказателиЛиста.Свойство("П000400001041", СтавкаЛиста) Тогда
			
			ЭкземплярУзла = СтавкиИУзлы.Получить(СтавкаЛиста);
			Если ЭкземплярУзла = Неопределено Тогда
				ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
				СтавкиИУзлы.Вставить(СтавкаЛиста, ЭкземплярУзла);
				ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ПоказателиЛиста, , Истина);
			КонецЕсли;
			
			ЭкземплярСтроки = СкопироватьУзел(ЭкземплярУзла, ЭталонСтроки);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярСтроки, ПоказателиЛиста);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДоходПредпр(РеквизитыФормы, Родитель, Узел)
	
	Перем ДанныеПоследнейСтраницы;
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРазделаПриложение3 = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	// Создаем узел раздела, в него будем добавлять подузлы для видов деятельности
	УзелПриложение3 = СкопироватьУзел(Родитель, Узел);
	
	УзелВидДеятельности = ПолучитьПодчиненныйЭлемент(Узел, "РасчВидДеят");
	УзелПрофВычет = ПолучитьПодчиненныйЭлемент(Узел, "ПрофНалВыч");
	
	ПоказателиРазделаПриложение3 = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаПриложение3 Из ДанныеРазделаПриложение3 Цикл
		
		ДанныеСтраницы = СтраницаПриложение3.Данные;
		
		Если СтраницаПуста(ДанныеСтраницы, ПоказателиРазделаПриложение3) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УзелВидДеятельности <> Неопределено Тогда
			ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, УзелВидДеятельности);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
		Если УзелВидДеятельности <> Неопределено Тогда
			ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, УзелПрофВычет);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ДанныеСтраницы);
		КонецЕсли;
		
		ДанныеПоследнейСтраницы = ДанныеСтраницы;
		
	КонецЦикла;
	
	УзелКФХ = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "СведКФХ");
	Если УзелКФХ <> Неопределено И ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, УзелКФХ, ДанныеПоследнейСтраницы);
	КонецЕсли;
	
	УзелНБКор105_3 = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "НБКор105.3");
	Если УзелНБКор105_3 <> Неопределено И ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, УзелНБКор105_3, ДанныеПоследнейСтраницы);
	КонецЕсли;
	
	Если ДанныеПоследнейСтраницы <> Неопределено Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, УзелПриложение3, ДанныеПоследнейСтраницы, , Истина);
	КонецЕсли;
	
	РасчАвансПлат = ПолучитьПодчиненныйЭлемент(УзелПриложение3, "РасчАвансПлат");
	Если РасчАвансПлат <> Неопределено Тогда
		
		ПоказателиРазделаПриложение3Продолжение = ПолучитьПоказателиРаздела(
			УзелПриложение3.Владелец(), РасчАвансПлат.Раздел, РеквизитыФормы.ВыбраннаяФорма);
		
		ДанныеРазделаПриложение3Продолжение = РеквизитыФормы.ДанныеОтчета.Приложение3Продолжение;
		
		Если ДанныеРазделаПриложение3Продолжение.Количество() <> 0
			И ДанныеРазделаПриложение3Продолжение[0].Данные.Количество() <> 0 Тогда
		
			ДанныеСтраницыПриложение3Продолжение = ДанныеРазделаПриложение3Продолжение[0].Данные;
			
			Если Не СтраницаПуста(ДанныеСтраницыПриложение3Продолжение,
				ПоказателиРазделаПриложение3Продолжение, РасчАвансПлат.Многострочность) Тогда
				
				ЭкземплярУзла = СкопироватьУзел(УзелПриложение3, РасчАвансПлат);
				ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ДанныеСтраницыПриложение3Продолжение);
				
				// Приказ ФНС России от 15.10.2021 N ЕД-7-11/903@
				// Сведения по суммам (налоговым базам) к Приложению 3 (СвСумРасчПр3)
				// За9м - Элемент является обязательным при отсутствии элементов <ЗаКв> и <ЗаПг>
				//
				// Если налоговая база или сумма к уплате пустая, то нужно вывести обязательный элемент
				
				ИтогиПоПриложению = ИтоговыеПоказателиПриложения3Расчет(ДанныеСтраницыПриложение3Продолжение,
					РеквизитыФормы.ВыбраннаяФорма);
				Если ИтогиПоПриложению.СуммаНалоговыхБаз = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "НалБазаИсч");
				КонецЕсли;
				
				Если ИтогиПоПриложению.СуммаАвансовыхПлатежей = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "СумИсчАванс");
				КонецЕсли;
				
				Если ИтогиПоПриложению.СуммаДоходов = 0 Тогда
					УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, "СумПолДох");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219(РеквизитыФормы, Родитель, Узел)
	
	// Расчет к Приложению 5 по-разному выгружается группа РасчСумИнвВыч в зависимости от редакции формы
	Если РеквизитыФормы.ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219_2024(РеквизитыФормы, Родитель, Узел);
	Иначе
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ВычСоцИнв219_2025(РеквизитыФормы, Родитель, Узел);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ИмущНалВычНов(РеквизитыФормы, Родитель, Узел)
	
	ДеревоВыгрузки = Родитель.Владелец();
	
	ДанныеРаздела = РеквизитыФормы.ДанныеОтчета[Узел.Раздел];
	
	ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
	
	Экземпляр_РасчИмущВыч = ПолучитьПодчиненныйЭлемент(ЭкземплярУзла, "РасчИмущВыч");
	Эталон_РасчИмущВыч = ПолучитьПодчиненныйЭлемент(Узел, "РасчИмущВыч");
	Эталон_СвОбъектРасх = ПолучитьПодчиненныйЭлемент(Эталон_РасчИмущВыч, "СвОбъектРасх");
	Экземпляр_СвОбъектРасх = ПолучитьПодчиненныйЭлемент(Экземпляр_РасчИмущВыч, "СвОбъектРасх");
	Экземпляр_СвОбъектРасх.Родитель.Строки.Удалить(Экземпляр_СвОбъектРасх);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	НужноЗаполнитьИтог = Ложь;
	Для Каждого СтраницаЛиста Из ДанныеРаздела Цикл
		// Проверим заполненность страницы раздела
		Если Не СтраницаПуста(СтраницаЛиста.Данные, ПоказателиРаздела) Тогда
			Экземпляр_СвОбъектРасх = СкопироватьУзел(Экземпляр_РасчИмущВыч, Эталон_СвОбъектРасх);
			ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_СвОбъектРасх, СтраницаЛиста.Данные);
			НужноЗаполнитьИтог = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НужноЗаполнитьИтог Тогда
		ЗаполнитьДаннымиУзел(РеквизитыФормы, Экземпляр_РасчИмущВыч, СтраницаЛиста.Данные, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ(РеквизитыФормы, Родитель, Узел)
	
	// Приложение 8 имеет многострочную часть для показателей П001200001051 и П001200001052.
	Если РеквизитыФормы.ВыбраннаяФорма = "ФормаОтчета2024кв1" Тогда
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ2024(РеквизитыФормы, Родитель, Узел);
	Иначе
		ЗаполнитьДаннымиУзелМногостраничногоРаздела_ДохОперЦБ2025(РеквизитыФормы, Родитель, Узел);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзелМногостраничногоРаздела_ЗаявЗачВозвр(РеквизитыФормы, Родитель, Узел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(Родитель.Владелец(), Узел.Раздел, РеквизитыФормы.ВыбраннаяФорма);
	
	Для Каждого СтраницаРаздела Из РеквизитыФормы.ДанныеОтчета[Узел.Раздел] Цикл
		
		ДанныеСтраницы = СтраницаРаздела.Данные;
		
		// Проверим заполненность страницы раздела.
		Если СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела, Узел.Многострочность) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярУзла = СкопироватьУзел(Родитель, Узел);
		ЗаполнитьДаннымиУзел(РеквизитыФормы, ЭкземплярУзла, ДанныеСтраницы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИтоговыеПоказателиПриложения3Расчет(ДанныеПриложения, ВыбраннаяФорма)
	
	Результат = Новый Структура("СуммаНалоговыхБаз, СуммаАвансовыхПлатежей, СуммаДоходов", 0, 0, 0);
	
	КлючиПоказателей = КлючиПоказателейДекларации(ВыбраннаяФорма);;
	
	ИдентификаторыНалоговойБазы = Новый Массив;
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИП1Квартал");
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИППолугодие");
	ИдентификаторыНалоговойБазы.Добавить("НалоговаяБазаИП9Месяцев");
	
	ИдентификаторыАвансовогоПлатежа = Новый Массив;
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИП1Квартал");
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИППолугодие");
	ИдентификаторыАвансовогоПлатежа.Добавить("АвансовыйПлатежИП9Месяцев");
	
	ИдентификаторыДоходовИП = Новый Массив;
	ИдентификаторыДоходовИП.Добавить("ДоходыИП1Квартал");
	ИдентификаторыДоходовИП.Добавить("ДоходыИППолугодие");
	ИдентификаторыДоходовИП.Добавить("ДоходыИП9Месяцев");
	
	Отбор = Новый Структура("ИмяСтраницы", "Приложение3Продолжение");
	
	ПоказателиПриложения = КлючиПоказателей.НайтиСтроки(Отбор);
	
	Для Каждого ТекущийПараметр Из ПоказателиПриложения Цикл
		
		Если ИдентификаторыНалоговойБазы.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаНалоговыхБаз = Результат.СуммаНалоговыхБаз + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
		Если ИдентификаторыАвансовогоПлатежа.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаАвансовыхПлатежей = Результат.СуммаАвансовыхПлатежей + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
		Если ИдентификаторыДоходовИП.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
			Результат.СуммаДоходов = Результат.СуммаДоходов + ДанныеПриложения[ТекущийПараметр.ИмяПоля];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УсловиеЮр_Физ(СтрокаТаблицы, Узел, НомерСтроки = Неопределено)
	
	// Проверка на длину ИНН для заполнения соответствующей ветки
	Результат = Ложь;
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("Структура") Тогда
		ДанныеСтроки = СтрокаТаблицы;
	Иначе
		ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	КонецЕсли;
	
	ЗначениеПоказателя = Неопределено;
	Если РеквизитыОписанияЮрЛицо().Найти(Узел.Код) <> Неопределено Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННЮЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если ДанныеСтроки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если Не ЗначениеЗаполнено(ЗначениеПоказателя) Или СтрДлина(СокрЛП(ЗначениеПоказателя)) > 10 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РеквизитыОписанияФизЛицо().Найти(Узел.Код) <> Неопределено Тогда
		КлючПодчиненногоЭлемента = Узел.Строки.Найти("ИННФЛ").Ключ;
		ПолныйКодПоказателя = КлючПодчиненногоЭлемента + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
		Если ДанныеСтроки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) И СтрДлина(СокрЛП(ЗначениеПоказателя)) < 12 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого ТекущаяСтрока из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Ключ) Тогда
			Возврат ТекущаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗначениеПоказателяПустогоПоказателя(Узел)
	
	Если Узел.Формат = "N" Тогда
		Если 0 < Узел.МинРазмерность И Узел.МинРазмерность <= 128 Тогда
			ШаблонФорматирования = СтрШаблон("ЧРД=.; ЧЦ=%1; ЧДЦ=%2;",
				Формат(Узел.МинРазмерность + 1, "ЧГ=0"),
				Формат(Узел.МинРазмерность, "ЧГ=0"));
			ЗначениеПоказателя = СтрШаблон("0%1", Сред(Формат(1, ШаблонФорматирования), 2));
		Иначе
			ЗначениеПоказателя = "0";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		ЗначениеПоказателя = "0001";
	Иначе
		ЗначениеПоказателя = "";
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция УзелПуст(Узел)

	Для Каждого Стр из Узел.Строки Цикл
		Если Не УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		УзелПуст = Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		УзелПуст = Не ЗначениеЗаполнено(Узел.Значение) Или Узел.Значение = ЗначениеПоказателяПустогоПоказателя(Узел);
	ИначеЕсли Узел.Формат = "gYear" Тогда
		УзелПуст = Узел.Значение = ЗначениеПоказателяПустогоПоказателя(Узел);
	Иначе
		УзелПуст = Не ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Возврат УзелПуст;
	
КонецФункции

Функция ЭтоРазделПриложения5(ИмяРаздела)
	
	Возврат (ИмяРаздела = "Приложение5" Или ИмяРаздела = "Приложение5Продолжение");
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура УказатьОбязательностьВыгрузки_СвСумРасчПр3(ЭкземплярУзла, ИмяЭлемента)
	
	Отбор = Новый Структура("Код", ИмяЭлемента);
	СтрокаЭлемента = ЭкземплярУзла.Строки.НайтиСтроки(Отбор);
	Если СтрокаЭлемента.Количество() > 0 Тогда
		
		ОтборЭлемента = Новый Структура("Код", "За9м");
		ОбязательныйЭлемент = СтрокаЭлемента[0].Строки.НайтиСтроки(ОтборЭлемента);
		
		Если ОбязательныйЭлемент.Количество() > 0 Тогда
			ОбязательныйЭлемент[0].Обязательность = "О";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли