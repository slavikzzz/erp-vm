#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить параметры исполнения отчета.
// 
// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
// 
// Возвращаемое значение:
//  Структура - Получить параметры исполнения отчета:
// * ИспользоватьПередКомпоновкойМакета - Булево - 
// * ИспользоватьПослеКомпоновкиМакета - Булево - 
// * ИспользоватьПослеВыводаРезультата - Булево - 
// * ИспользоватьДанныеРасшифровки - Булево - 
// * ИспользоватьПриВыводеЗаголовка - Булево - 
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно уточнить особенности вывода заголовка в отчете.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.Период);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки", Результат.ВысотаТаблицы);
	
КонецПроцедуры

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	НачалоПериода = ?(КонецДня(ПараметрыОтчета.Период) = КонецГода(ПараметрыОтчета.Период),
		НачалоГода(ПараметрыОтчета.Период), НачалоКвартала(ПараметрыОтчета.Период));
	
	ПредставлениеПериодаРасчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоПериода, КонецДня(ПараметрыОтчета.Период));
		
	Возврат СтрШаблон(НСтр("ru = 'Справка-расчет земельного налога%1';
							|en = 'Detailed calculation of land value tax%1'"), ПредставлениеПериодаРасчета);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	КонецЕсли;
	
	// В структуре настроек есть таблицы для разных случаев и периодов.
	// Выберем нужную, остальные удалим ниже.
	ИмяГруппировки = "";
	
	Если КонецКвартала(ПараметрыОтчета.Период) <> КонецГода(ПараметрыОтчета.Период) Тогда
		ИмяГруппировки = "РасчетЗемельногоНалога_Аванс";
	Иначе
		ИмяГруппировки = "РасчетЗемельногоНалога";
	КонецЕсли;
	
	// Перебираем группировки верхнего уровня и удаляем все кроме нужной. Идем с конца. Оставшуюся группировку переименовываем, 
	// чтобы не пересекаться с вложенной группировкой таблицы.
	КоличествоГруппировок = КомпоновщикНастроек.Настройки.Структура.Количество();
	Для Счетчик = 1 По КоличествоГруппировок Цикл
		Индекс = КоличествоГруппировок - Счетчик;
		Группировка = КомпоновщикНастроек.Настройки.Структура[Индекс];
		Если Группировка.Имя <> ИмяГруппировки Тогда
			КомпоновщикНастроек.Настройки.Структура.Удалить(Группировка);
		Иначе
			Группировка.Имя = "Таблица";
		КонецЕсли;
	КонецЦикла; 
	
	// Настраиваем оставшуюся таблицу группировок
	ТаблицаГруппировок = КомпоновщикНастроек.Настройки.Структура[0];
	// Строки из предопределенных настроек используем как шаблон. При этом фактическая структура отчета задается
	// настройками группировок отчета. Ниже после заполнения структуры удалим предопределенную структуру.
	СтрокиКУдалению = Новый Массив; 
	Для каждого СтрокаТаблицы Из ТаблицаГруппировок.Строки Цикл
		СтрокиКУдалению.Добавить(СтрокаТаблицы);
	КонецЦикла; 
	// В таблицу добавляем группировки строк в соответствии с настройками отчета.
	ГруппировкаТаблицы = ТаблицаГруппировок.Строки; // верхний уровень, далее подменяется на подчиненную группировку и т.д. до нижнего уровня
	
	// Предполагаем, что группировки строк заданы в первой корневой строке таблицы (из предопределнных настроек).
	// Группировку-шаблон ищем в этой строке, включая подчиненные строки.
	ГруппировкаШаблон = ТаблицаГруппировок.Строки[0];
	
	СправкиРасчеты.ДобавитьГруппировкиТаблицыКомпоновкиДанныхПоШаблону(
		ГруппировкаТаблицы,
		ГруппировкаШаблон,
		ПараметрыОтчета.Группировка,
		ИмяГруппировки,
		ТаблицаГруппировок.Выбор.Элементы);
	
	// Удаляем предопределенные группировки таблицы - они служили как шаблон
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаГруппировок.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	
	Для каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество() + ВысотаШапки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	ТекстШапкиГруппировок = ПолучитьТекстШапкиГруппировок(ПараметрыОтчета.Группировка);
	Группировки = Результат.НайтиТекст("###Группировки###");
	Если Группировки <> Неопределено Тогда
		Группировки.Текст = ТекстШапкиГруппировок;
		Результат.ТекущаяОбласть = Группировки;
	КонецЕсли;
	
	// Группируем ячейки с вспомогательными данными
	// Графы 4-5: ОКТМО и код НО
	НомерПервойКолонки = 4;
	НомерПоследнейСтроки = ?(ПараметрыОтчета.ВыводитьЕдиницуИзмерения, 7, 6);
	НомерПоследнейКолонки = 5;
	
	Результат.Область(, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки).Сгруппировать(
		,
		РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
		
	// Графы 6-9: даты изменений и категория земель
	НомерПервойКолонки = 6;
	НомерПоследнейКолонки = 9;
	
	Результат.Область(, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки).Сгруппировать(
		,
		РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСлева = 0;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

// Задает набор показателей, которые позволяют анализировать отчет.
//
// Возвращаемое значение:
//   Массив      - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	
	Возврат НаборПоказателей;
	
КонецФункции

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//  ОписаниеОтчета - СтрокаДерева, ОбъектМетаданных - описание настроек, метаданные или ссылка отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов.
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Задает набор вариантов настроек.
//
// Возвращаемое значение:
//   Массив      - основные варианты настроек.
//
Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "РасчетЗемельногоНалога", НСтр("ru = 'Расчет земельного налога';
																						|en = 'Land value tax calculation'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстШапкиГруппировок(Группировки)
	
	ТекстШапки = "";
	Для каждого Группа Из Группировки Цикл
		Если Группа.Использование И Группа.Поле <> "Группировки.ДатаСведений" Тогда
			ТекстШапки = ТекстШапки + ?(ПустаяСтрока(ТекстШапки), "", ", ") + Группа.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстШапки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
