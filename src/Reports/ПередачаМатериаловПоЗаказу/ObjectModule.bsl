//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьПараметрыОтбора(Форма);
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
// Параметры:
//	Контекст							- Произвольный									- параметры контекста, в котором используется отчет.
//	КлючСхемы							- Строка										- идентификатор текущей схемы компоновщика настроек.
//	КлючВарианта						- Строка, Неопределено							- имя предопределенного или уникальный идентификатор пользовательского
//																							варианта отчета.
//																							Неопределено когда вызов для варианта расшифровки или без контекста.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных, Неопределено		- настройки варианта отчета, которые будут загружены
//																							в компоновщик настроек после его инициализации.
//																							Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных,
//											Неопределено								- пользовательские настройки, которые будут загружены в компоновщик
//																							настроек после его инициализации.
//																							Неопределено когда пользовательские настройки не надо загружать
//																							(уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючСхемы		= КлючВарианта;
	ЗаголовкиПолей	= ПараметризуемыеЗаголовкиПолей();
	
	КомпоновкаДанныхСервер.УстановитьЗаголовкиВыбранныхПолей(НовыеНастройкиКД.Выбор.Элементы, ЗаголовкиПолей);
	
	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = НовыеНастройкиКД.Выбор.ИдентификаторПользовательскойНастройки;
	
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		НайденныйЭлементНастройки = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ИдентификаторНастройки);
		
		Если НайденныйЭлементНастройки <> Неопределено Тогда 
			КомпоновкаДанныхСервер.УстановитьЗаголовкиВыбранныхПолей(НайденныйЭлементНастройки.Элементы, ЗаголовкиПолей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Изменение текста запроса.
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
	ПодставитьВТекстЗапросаПараметрыВесаОбъема(ТекстЗапроса);
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	
	// Компоновка и вывод.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);

	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(ПараметризуемыеЗаголовкиПолей(), МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы.
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыОтбора(Форма)
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("КлючВарианта") Тогда
		Если Параметры.КлючВарианта = "ПередачаМатериаловПоЗаказуКонтекст" Тогда
			
			Если Параметры.Свойство("ПараметрКоманды") Тогда
				Форма.ФормаПараметры.Отбор.Вставить("Распоряжение", Параметры.ПараметрКоманды);
			КонецЕсли;
			
		ИначеЕсли Параметры.КлючВарианта = "ПередачаМатериаловПоМаршрутномуЛистуКонтекст" Тогда
			
			Если Параметры.Свойство("ПараметрКоманды") Тогда
				
				ПараметрыДокумента = ПараметрыМаршрутногоЛиста(Параметры.ПараметрКоманды);
			    	
				Форма.ФормаПараметры.Отбор.Вставить("Распоряжение", ПараметрыДокумента.Распоряжение);
				Форма.ФормаПараметры.Отбор.Вставить("Подразделение", ПараметрыДокумента.Подразделение);
				Форма.ФормаПараметры.Отбор.Вставить("Номенклатура", ПараметрыДокумента.Номенклатура);
				Форма.ФормаПараметры.Отбор.Вставить("Этап", ПараметрыДокумента.Этап);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыМаршрутногоЛиста(МаршрутныйЛист)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Распоряжение,
	|	МаршрутныйЛистПроизводства.Подразделение,
	|	МаршрутныйЛистПроизводства.Этап
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК МаршрутныйЛистПроизводстваМатериалыИУслуги
	|ГДЕ
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛист);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	Материалы = РезультатЗапроса[1].Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("Распоряжение", РеквизитыШапки.Распоряжение);
	Результат.Вставить("Подразделение", РеквизитыШапки.Подразделение);
	Результат.Вставить("Этап", РеквизитыШапки.Этап);
	Результат.Вставить("Номенклатура", Материалы.ВыгрузитьКолонку("Номенклатура"));
	
	Возврат Результат;
	
КонецФункции

Процедура ПодставитьВТекстЗапросаПараметрыВесаОбъема(ТекстЗапроса)
	
	// Таблица ЗаказыМатериаловОбороты
	
	ТекстЗапросаВес = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"ЗаказыМатериаловОбороты.Номенклатура.ЕдиницаИзмерения",
		"ЗаказыМатериаловОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесНоменклатуры_ЗаказыМатериалов", ТекстЗапросаВес);
	
	ТекстЗапросаОбъем = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"ЗаказыМатериаловОбороты.Номенклатура.ЕдиницаИзмерения",
		"ЗаказыМатериаловОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемНоменклатуры_ЗаказыМатериалов", ТекстЗапросаОбъем);
	
	// Таблица ЗаказыМатериаловВПроизводствоОбороты
	
	ТекстЗапросаВес = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"ЗаказыМатериаловВПроизводствоОбороты.Номенклатура.ЕдиницаИзмерения",
		"ЗаказыМатериаловВПроизводствоОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесНоменклатуры_ЗаказыВПроизводство", ТекстЗапросаВес);
	
	ТекстЗапросаОбъем = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"ЗаказыМатериаловВПроизводствоОбороты.Номенклатура.ЕдиницаИзмерения",
		"ЗаказыМатериаловВПроизводствоОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемНоменклатуры_ЗаказыВПроизводство", ТекстЗапросаОбъем);
	
	// Таблица ПотребностьВМатериалахВПроизводствеОбороты
	
	ТекстЗапросаВес = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"ПотребностьВМатериалахВПроизводствеОбороты.Номенклатура.ЕдиницаИзмерения",
		"ПотребностьВМатериалахВПроизводствеОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесНоменклатуры_ПотребностьВМатериалахВПроизводстве", ТекстЗапросаВес);
	
	ТекстЗапросаОбъем = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"ПотребностьВМатериалахВПроизводствеОбороты.Номенклатура.ЕдиницаИзмерения",
		"ПотребностьВМатериалахВПроизводствеОбороты.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемНоменклатуры_ПотребностьВМатериалахВПроизводстве", ТекстЗапросаОбъем);
	
	// Таблица МатериалыИРаботыВПроизводстве
	
	ТекстЗапросаВес = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"МатериалыИРаботыВПроизводстве.Номенклатура.ЕдиницаИзмерения",
		"МатериалыИРаботыВПроизводстве.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесНоменклатуры_МатериалыИРаботыВПроизводстве", ТекстЗапросаВес);
	
	ТекстЗапросаОбъем = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"МатериалыИРаботыВПроизводстве.Номенклатура.ЕдиницаИзмерения",
		"МатериалыИРаботыВПроизводстве.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемНоменклатуры_МатериалыИРаботыВПроизводстве", ТекстЗапросаОбъем);
	
КонецПроцедуры

Функция ПараметризуемыеЗаголовкиПолей()
	
	ЗаголовкиПолей = Новый Соответствие;
	
	ЕдиницаВеса = Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	ЕдиницаОбъема = Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
	ПараметрЕдиницыКоличества = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницыКоличества");
	
	Если ПараметрЕдиницыКоличества <> Неопределено
		И ПараметрЕдиницыКоличества.Значение = 0 Тогда
		ЗаголовокЕдИзм = НСтр("ru = 'Итого материалов в единицах хранения';
								|en = 'Total materials in stock UOM'");
	Иначе
		ЗаголовокЕдИзм = НСтр("ru = 'Итого материалов в единицах для отчетов';
								|en = 'Total materials in units for reports'");
	КонецЕсли;
	
	ЗаголовкиПолей.Вставить("12", ЕдиницаВеса); // ЕдиницаВеса
	ЗаголовкиПолей.Вставить("13", ЕдиницаОбъема); // ЕдиницаОбъема
	ЗаголовкиПолей.Вставить("11", ЗаголовокЕдИзм); // ЗаголовокГруппировкиЕдИзм
	
	Возврат ЗаголовкиПолей;
	
КонецФункции

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21