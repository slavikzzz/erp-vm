//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЗапуститьВыполнениеВФоне = Истина;
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("СостояниеВыполненияЗаказовНаПроизводство", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	Иначе
		ПоказыватьЭтапы = Истина;
		СкрыватьВыполненное = Истина;
		ПродукцияВыпущенаЕслиОформленВыпуск = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаЗатрат) Тогда
		ВалютаЗатрат = 1;
	КонецЕсли;
	
	СписокЗаказов = Неопределено;
	Если Параметры.Свойство("СписокЗаказов") Тогда
		СписокЗаказов = Параметры.СписокЗаказов;
	ИначеЕсли Параметры.Свойство("ПараметрКоманды") Тогда
		СписокЗаказов = Новый Массив;
		СписокЗаказов.Добавить(Параметры.ПараметрКоманды);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СписокЗаказов) Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие отчета ""Состояние выполнения заказа на производство"" не предусмотрено. 
			|Для открытия отчета можно воспользоваться командой ""Состояние выполнения"" в формах документов.';
			|en = 'Cannot open the ""Production order state"" report.
			|To open the report, click ""Fulfillment state"" in document forms.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
	ОтборЗаказНаПроизводство.ЗагрузитьЗначения(СписокЗаказов);
	
	УстановитьЗаголовок();
	
	УстановитьСвойстваЭлементовФормы();
	
	РезультатРасчета = ОбновитьДанныеНаСервере();
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ЗагрузитьДанныеНаСервере();
		
	Иначе
		
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища       = РезультатРасчета.АдресХранилища;
		
		ОткрытьФормуДлительнойОперацииПриОткрытии = Истина;
		
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытьФормуДлительнойОперацииПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДлительнойОперации", 0.1, Истина);
	Иначе
		РазвернутьВсе();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СостояниеВыполненияЗаказовНаПроизводство" Тогда
		// Событие вызывается, чтобы в уже открытой форме обработать новые заказы
		ОтборЗаказНаПроизводство.ЗагрузитьЗначения(Параметр.СписокЗаказов);
		ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьЭтапыПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьВыполненноеПриИзменении(Элемент)
	
	ОбновитьДанные(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗатратыПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостояниеЗаказов

&НаКлиенте
Процедура СостояниеЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "СостояниеЗаказовЗатратыПлан"
		И Поле.Имя <> "СостояниеЗаказовЗатратыФакт"
		И Поле.Имя <> "СостояниеЗаказовОтклонение"
		И Поле.Имя <> "СостояниеЗаказовОтклонениеПроцент"
		И Поле.Имя <> "СостояниеЗаказовОтклонениеЗначимость" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СостояниеЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭтапов = СписокЭтаповРасшифровки(ТекущиеДанные.ПолучитьИдентификатор());
	
	Если СписокЭтапов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Этапы не выполнены. Расшифровка невыполненных этапов невозможна.';
									|en = 'Stages are not completed. Cannot drill down an incomplete stage.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",                     "ОтклонениеФактаОтСпецификацииЗаказаБезПрогноза");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",          Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",  Ложь);
	ПараметрыФормы.Вставить("РежимРасшифровки",                 Истина);
	
	Отбор = Новый Структура();
	
	Отбор.Вставить("ЗаказРасшифровка",                          ТекущиеДанные.Заказ);
	Отбор.Вставить("КодСтрокиРасшифровка",                      ТекущиеДанные.КодСтроки);
	Отбор.Вставить("Этап",                                      СписокЭтапов);
	Отбор.Вставить("ДанныеОтчета",                              ВалютаЗатрат);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Отчет.ОтклонениеЗаказаФактаОтКалькуляции.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьВсе(Команда)
	
	РазвернутьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернутьВсе(Команда)
	
	СвернутьВсе();
	
КонецПроцедуры


&НаКлиенте
Процедура ОпределятьГотовностьПоВыполненнымМЛ(Команда)
	
	ОпределятьГотовностьПриИзменении(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьГотовностьПоОформленнымВыпускамПродукции(Команда)
	
	ОпределятьГотовностьПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПлановойСтоимости(Команда)
	
	ВалютаЗатратПриИзменении(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРеглУчета(Команда)
	
	ВалютаЗатратПриИзменении(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУпрУчета(Команда)
	
	ВалютаЗатратПриИзменении(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗатраты(Команда)
	
	ПоказыватьЗатраты = НЕ ПоказыватьЗатраты;
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЭтапы(Команда)
	
	ПоказыватьЭтапы = НЕ ПоказыватьЭтапы;
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьВыполненное(Команда)
	
	СкрыватьВыполненное = НЕ СкрыватьВыполненное;
	ОбновитьДанные(Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанных

&НаКлиенте
Процедура ОбновитьДанные(СохранитьПараметрыОтбора = Ложь, ОбновитьСвойстваЭлементовФормы = Ложь)
	
	РезультатРасчета = ОбновитьДанныеНаСервере(СохранитьПараметрыОтбора, ОбновитьСвойстваЭлементовФормы);
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ЗагрузитьДанные();
		
	Иначе
		
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища       = РезультатРасчета.АдресХранилища;
		
		ОткрытьФормуДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеНаСервере(СохранитьПараметрыОтбора = Ложь, ОбновитьСвойстваЭлементовФормы = Ложь)
	
	Если СохранитьПараметрыОтбора Тогда
		СохранитьПараметрыОтбора();
	КонецЕсли;
	
	Если ОбновитьСвойстваЭлементовФормы Тогда
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СписокЗаказов",        ОтборЗаказНаПроизводство);
	ПараметрыЗадания.Вставить("ПоказыватьЭтапы",      ПоказыватьЭтапы);
	ПараметрыЗадания.Вставить("ПродукцияВыпущенаЕслиОформленВыпуск", ПродукцияВыпущенаЕслиОформленВыпуск);
	ПараметрыЗадания.Вставить("СкрыватьВыполненное",  СкрыватьВыполненное);
	ПараметрыЗадания.Вставить("ТекущаяДатаСеанса",    ТекущаяДатаСеанса());
	ПараметрыЗадания.Вставить("ПоказыватьЗатраты",    ПоказыватьЗатраты);
	ПараметрыЗадания.Вставить("ВалютаЗатрат",         ВалютаЗатрат);
	
	Если ЗапуститьВыполнениеВФоне Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Получение состояния выполнения заказов на производство';
									|en = 'Receiving production order state'");
		РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
							УникальныйИдентификатор,
							"Отчеты.СостояниеВыполненияЗаказовНаПроизводство.СостояниеВыполненияЗаказовНаПроизводство",
							ПараметрыЗадания,
							НаименованиеЗадания);
							
	Иначе
	
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.СостояниеВыполненияЗаказовНаПроизводство.СостояниеВыполненияЗаказовНаПроизводство(ПараметрыЗадания, АдресХранилища);
		
		РезультатРасчета = Новый Структура;
		РезультатРасчета.Вставить("АдресХранилища",   АдресХранилища);
		РезультатРасчета.Вставить("ЗаданиеВыполнено", Истина);
		
	КонецЕсли; 
	
	Возврат РезультатРасчета;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанные()

	ЗагрузитьДанныеНаСервере();
	РазвернутьВсе();

	Если АктивироватьСтроку <> -1 Тогда
		Элементы.СостояниеЗаказов.ТекущаяСтрока = АктивироватьСтроку;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере()

	// Запомним текущую строку чтобы потом ее восстановить
	АктивироватьСтроку = -1;
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ТекущийЗаказ = Документы.ЗаказНаПроизводство.ПустаяСсылка();
	ТекущийКлючСвязиПродукция = ПустойКлюч;
	ТекущийКлючСвязиПолуфабрикат = ПустойКлюч;
	ТекущийКлючСвязи = ПустойКлюч;
	ТекущаяСтрока = Элементы.СостояниеЗаказов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СостояниеЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийЗаказ = ТекущиеДанные.Заказ;
			ТекущийКлючСвязиПродукция = ТекущиеДанные.КлючСвязиПродукция;
			ТекущийКлючСвязиПолуфабрикат = ТекущиеДанные.КлючСвязиПолуфабрикат;
			ТекущийКлючСвязи = ТекущиеДанные.КлючСвязи;
		КонецЕсли;
	КонецЕсли;
	
	СостояниеЗаказовДерево = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВРеквизитФормы(СостояниеЗаказовДерево, "СостояниеЗаказов");
	
	// Определим есть ли невыполненные строки заказа
	ЗаказПолностьюВыполнен = Истина;
	Для каждого СтрокаЗаказаПродукция Из СостояниеЗаказовДерево.Строки Цикл
		Если СтрокаЗаказаПродукция.СтатусВыполнения <> 1 Тогда
			ЗаказПолностьюВыполнен = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	// Восстановим текущую строку
	Если НЕ ТекущийЗаказ.Пустая() Тогда
		СтрокиЗаказы = СостояниеЗаказов.ПолучитьЭлементы();
		НайтиТекущуюСтроку(СтрокиЗаказы);
	КонецЕсли;
	
	УстановитьЗаголовок(ЗаказПолностьюВыполнен);

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ЗагрузитьДанные();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	// Уменьшим шаг увеличения времени опроса выполнения задания
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Скроем представление заказа
	#Область СкрытьПредставлениеЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовГруппа3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовПредставлениеЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Скроем представление продукции, этапов
	#Область СкрытьПредставлениеПродукцииЭтапов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовГруппа2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовПредставлениеНоменклатураЭтап.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовПодразделениеИзготовитель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовНомерКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти

	// Выделение представления заказа
	#Область ВыделитьПредставлениеЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	#КонецОбласти
	
	// Выделение жирным строки продукции
	#Область ВыделитьЖирнымПродукцию
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ЭтоСтрокаПродукции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	#КонецОбласти	
	
	// Выделение даты если график не рассчитан
	#Область ГрафикНеРассчитан
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовДатаОкончанияПоГрафику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не рассчитана';
																|en = 'Not calculated'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
	// Выделение светло-серым
	#Область ВыделитьСветлосерым
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.СтатусВыполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	#КонецОбласти
	
	// Выделение темно-серым
	#Область ВыделитьТемносерым
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.СтатусВыполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста2);
	#КонецОбласти
	
	// Выделение красным просроченной даты окончания по графику
	#Область ВыделитьКраснымДатуОкончанияПоГрафику
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовДатаОкончанияПоГрафику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеЗаказов.ДатаОкончанияПоГрафикуПросрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
	// Отображение затрат
	#Область ПоказыватьЗатраты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаКолонокЗатраты.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовЗатратыПлан.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовЗатратыФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовОтклонение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовОтклонениеПроцент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеЗаказовОтклонениеЗначимость.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказыватьЗатраты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе()

	СтрокиЗаказов = СостояниеЗаказов.ПолучитьЭлементы();
	Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
		Элементы.СостояниеЗаказов.Развернуть(СтрокаЗаказа.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе()

	СтрокиЗаказов = СостояниеЗаказов.ПолучитьЭлементы();
	Для каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
		Элементы.СостояниеЗаказов.Свернуть(СтрокаЗаказа.ПолучитьИдентификатор());
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("ПоказыватьЭтапы,ПродукцияВыпущенаЕслиОформленВыпуск,СкрыватьВыполненное, ПоказыватьЗатраты, ВалютаЗатрат");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("СостояниеВыполненияЗаказовНаПроизводство", "ПараметрыОтбора", ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок(ЗаказПолностьюВыполнен = Ложь)

	ДопТекст = "";
	Если ОтборЗаказНаПроизводство.Количество() = 1 Тогда
		ТекстЗаголовок = НСтр("ru = 'Состояние выполнения заказа %1';
								|en = 'Order fulfillment state %1'");
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборЗаказНаПроизводство[0].Значение, "Дата,Номер");
		ДопТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '№ %1 от %2';
												|en = 'No. %1 from %2'"),
											?(ЗначениеЗаполнено(РеквизитыЗаказа.Номер), " " + РеквизитыЗаказа.Номер, ""),
											Формат(РеквизитыЗаказа.Дата, "ДЛФ=D"));
		
		Если ЗаказПолностьюВыполнен Тогда
			ДопТекст = ДопТекст + " " + НСтр("ru = '(заказ полностью выполнен)';
											|en = '(order is fully fulfilled)'");
		КонецЕсли;
	Иначе
		ТекстЗаголовок = НСтр("ru = 'Состояние выполнения заказов %1';
								|en = 'Order fulfillment state %1'");
		Если ЗаказПолностьюВыполнен Тогда
			ДопТекст = НСтр("ru = '(все заказы выполнены)';
							|en = '(all orders are fulfilled)'");
		КонецЕсли;
	КонецЕсли;

	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовок, ДопТекст);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ВалютаУправленческогоУчета      = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаПлановойСтоимости         = Константы.ВалютаПлановойСебестоимостиПродукции.Получить();
	
	ВидЦеныПлановойСтоимости        = Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить();
	ЦенаВключаетНДС                 = ЗначениеЗаполнено(ВидЦеныПлановойСтоимости) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦеныПлановойСтоимости, "ЦенаВключаетНДС");
	
	Если ЦенаВключаетНДС Тогда
		ШаблонПредставления = НСтр("ru = '%1 (с НДС)';
									|en = '%1 (VAT included)'");
	Иначе
		ШаблонПредставления = НСтр("ru = '%1 (без НДС)';
									|en = '%1 (excluding VAT)'");
	КонецЕсли;
	
	Элементы.ФормаВалютаРеглУчета.Видимость = НЕ ЦенаВключаетНДС;
	
	Если ВалютаЗатрат = 1 Тогда
		ЗаголовокКолонкиЗатрат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			ВалютаУправленческогоУчета);
	ИначеЕсли ВалютаЗатрат = 2 Тогда
		ЗаголовокКолонкиЗатрат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			ВалютаПлановойСтоимости);
	ИначеЕсли  ВалютаЗатрат = 3 Тогда
		ЗаголовокКолонкиЗатрат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.ГруппаКолонокЗатраты.Заголовок = НСтр("ru = 'Затраты';
													|en = 'Costs'") + ", " + ЗаголовокКолонкиЗатрат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Если СкрыватьВыполненное И ПоказыватьЗатраты Тогда
		ПоказыватьЗатраты = Ложь;
	КонецЕсли;
	
	Элементы.ВалютаЗатрат.Доступность = ПоказыватьЗатраты;
	Элементы.ПоказыватьЗатраты.Доступность = Не СкрыватьВыполненное;
	
	Элементы.ФормаСкрыватьВыполненное.Пометка = СкрыватьВыполненное;
	Элементы.ФормаПоказыватьЗатраты.Пометка   = ПоказыватьЗатраты;
	Элементы.ФормаПоказыватьЭтапы.Пометка     = ПоказыватьЭтапы;
	
	Элементы.ФормаВалютаУпрУчета.Пометка          = (ВалютаЗатрат = 1);
	Элементы.ФормаВалютаПлановойСтоимости.Пометка = (ВалютаЗатрат = 2);
	Элементы.ФормаВалютаРеглУчета.Пометка         = (ВалютаЗатрат = 3);
	
	Элементы.ФормаОпределятьГотовностьПоВыполненнымМЛ.Пометка                = НЕ ПродукцияВыпущенаЕслиОформленВыпуск;
	Элементы.ФормаОпределятьГотовностьПоОформленнымВыпускамПродукции.Пометка = ПродукцияВыпущенаЕслиОформленВыпуск;
	
КонецПроцедуры

&НаСервере
Процедура НайтиТекущуюСтроку(КоллекцияСтрока)

	Для каждого ДанныеСтроки Из КоллекцияСтрока Цикл
		Если ДанныеСтроки.Заказ = ТекущийЗаказ
			И ДанныеСтроки.КлючСвязиПродукция = ТекущийКлючСвязиПродукция
			И ДанныеСтроки.КлючСвязиПолуфабрикат = ТекущийКлючСвязиПолуфабрикат
			И ДанныеСтроки.КлючСвязи = ТекущийКлючСвязи Тогда
			
			АктивироватьСтроку = ДанныеСтроки.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Найдем рекурсивно
	Для каждого ДанныеСтроки Из КоллекцияСтрока Цикл
		ПодчиненныеСтроки = ДанныеСтроки.ПолучитьЭлементы();
		НайтиТекущуюСтроку(ПодчиненныеСтроки);
		Если АктивироватьСтроку <> -1 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыработкеСотрудников(Команда)

	ПараметрыФормы = ПараметрыФормы();
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКЗаказамПереработчикам(Команда)

	//++ Устарело_Переработка24
	ПараметрыФормы = ПараметрыФормы();
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	//-- Устарело_Переработка24
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКМаршрутнымЛистам(Команда)
	
	ПараметрыФормы = ПараметрыФормы();
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыпускуПродукции(Команда)

	ПараметрыФормы = ПараметрыФормы();
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормы()

	ТекущиеДанные = Элементы.СостояниеЗаказов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		
		СписокЭтапов = Новый Массив;
		ДанныеЭтапа = Новый Структура;
		ДанныеЭтапа.Вставить("Заказ", ТекущиеДанные.Заказ);
		ДанныеЭтапа.Вставить("КодСтрокиПродукция", ТекущиеДанные.КодСтроки);
		ДанныеЭтапа.Вставить("Этап", ТекущиеДанные.Этап);
		СписокЭтапов.Добавить(ДанныеЭтапа);
		
		ПараметрыФормы = Новый Структура("ОтборПоСпискуЭтапов", СписокЭтапов);
		
	Иначе
		
		СписокПродукции = Новый Массив;
		ДанныеПродукции = Новый Структура("Заказ,КодСтроки");
		ДанныеПродукции.Вставить("Заказ", ТекущиеДанные.Заказ);
		ДанныеПродукции.Вставить("КодСтроки", ТекущиеДанные.КодСтроки);
		СписокПродукции.Добавить(ДанныеПродукции);
		
		ПараметрыФормы = Новый Структура("ОтборПоСпискуПродукции", СписокПродукции);
		
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);

	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция СписокЭтаповРасшифровки(Идентификатор)
	
	МассивЭтапов = Новый Массив;
	
	ТекущаяСтрока = СостояниеЗаказов.НайтиПоИдентификатору(Идентификатор);
	
	ДобавитьЭтапыРекурсивно(ТекущаяСтрока, МассивЭтапов);
	
	Возврат МассивЭтапов;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭтапыРекурсивно(Строка, Массив)
	
	Если ЗначениеЗаполнено(Строка.Этап) И Строка.СтатусВыполнения <> 0 Тогда
		Массив.Добавить(Строка.Этап);
	КонецЕсли;
	
	Строки = Строка.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		ДобавитьЭтапыРекурсивно(Строка, Массив);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЗатратПриИзменении(Знач НовоеЗначение)
	
	Если НовоеЗначение = 3 ИЛИ НовоеЗначение = 2 Тогда
		ВалютаЗатрат = НовоеЗначение;
	Иначе
		ВалютаЗатрат = 1;
	КонецЕсли;
	
	ОбновитьДанные(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределятьГотовностьПриИзменении(Знач НовоеЗначение)
	
	ПродукцияВыпущенаЕслиОформленВыпуск = НовоеЗначение;
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21