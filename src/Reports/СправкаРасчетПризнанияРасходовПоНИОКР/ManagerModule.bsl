#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область КомандыПодменюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// 
// Возвращаемое значение:
// ТаблицаЗначений - см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
// Неопределено.
//
Функция ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СправкаРасчетПризнанияРасходовПоНИОКР) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СправкаРасчетПризнанияРасходовПоНИОКР.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Справка-расчет признания расходов по НИОКР в НУ';
											|en = 'Detailed calculation of R&D expenses recognition in TA'");
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СправкаРасчетПризнанияРасходовПоНИОКР");
		КомандаОтчет.КлючВарианта = "ПризнаниеРасходовПоНИОКР";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Функция возвращает параметры отчета, см. БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьПослеВыводаРезультата - Булево -
// * ИспользоватьПриВыводеЗаголовка - Булево -
// * ИспользоватьПослеКомпоновкиМакета - Булево -
// * ИспользоватьПередКомпоновкойМакета - Булево -
// * ИспользоватьДанныеРасшифровки - Булево -
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

// В процедуре можно уточнить особенности вывода заголовка в отчете.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	ДобавитьИнформационноеСообщениеВШапку(Результат, ПараметрыОтчета);
	
КонецПроцедуры

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ТекстЗаголовка = НСтр("ru = 'Справка-расчет ""Признание расходов по НИОКР"" %1';
							|en = 'Detailed calculation ""Recognition of R&D expenses"" %1'");
	
	Возврат СтрШаблон(ТекстЗаголовка, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		ПараметрыОтчета.НачалоПериода,
		ПараметрыОтчета.КонецПериода));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ГруппировкаФормулаРасчета = БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура,"ФормулаРасчета");
		Если ГруппировкаФормулаРасчета <> Неопределено Тогда
			Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок Тогда 
				ГруппировкаФормулаРасчета.Использование = Истина;
			Иначе
				ГруппировкаФормулаРасчета.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		ПериодРасчета = НачалоДня(КонецМесяца(ПараметрыОтчета.КонецПериода));
	Иначе
		ПериодРасчета = НачалоДня(КонецМесяца(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодРасчета", ПериодРасчета);        
	
	ПовышающийКоэффициент = УчетРасходовПоИсследованиямИРазработкамЛокализация.ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ(ПериодРасчета);	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ", ПовышающийКоэффициент);
	
	ШаблонФормулыКолонка5 = НСтр("ru = 'Колонка [5] = [льготируемые из графы 2] и графа [4] * %1';
								|en = 'Колонка [5] = [льготируемые из графы 2] и графа [4] * %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ФормулаКолонка5", СтрШаблон(ШаблонФормулыКолонка5, ПовышающийКоэффициент));
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "ДокументПризнанияРасходов", ПараметрыОтчета.ДокументПризнанияРасходов,,ЗначениеЗаполнено(ПараметрыОтчета.ДокументПризнанияРасходов));
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСверху = 0;
	
	Результат.ФиксацияСлева = 0;
	
КонецПроцедуры

// Функция возвращает показатели отчета, см. БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения
// Возвращаемое значение:
//	Массив из Строка
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

// Процедура используется подсистемой варианты отчетов.
//
// Параметры:
//  Настройки    - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
// Задает набор вариантов настроек.
//
// Возвращаемое значение:
//   Массив  из Структура
//
Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ВариантНастройкиУбытки", "Признание расходов по НИОКР"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьИнформационноеСообщениеВШапку(ТабДок, ПараметрыОтчета)

	СписокПроблем = Новый Массив;
	
	ПроверитьАктуальностьПризнанияРасходовПоНИОКР(ПараметрыОтчета, СписокПроблем);
	
	Если СписокПроблем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПроблем = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокПроблем);
	
	ТекстСообщения = СтрСоединить(СписокПроблем, Символы.ПС);

	ТабДок.Область("R1C1").Текст = ТекстСообщения;
	ТабДок.Область("R1C1").ЦветТекста = Метаданные.ЭлементыСтиля.ЦветТекстаПроблема.Значение;
	ТабДок.Область(1, 1, 1, ).ВысотаСтроки = 0;
	
КонецПроцедуры

Процедура ПроверитьАктуальностьПризнанияРасходовПоНИОКР(ПараметрыОтчета, СписокПроблем)

	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаданияКЗакрытиюМесяца.Организация.Представление КАК ОрганизацияПредставление
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|ГДЕ
	|	ЗаданияКЗакрытиюМесяца.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаданияКЗакрытиюМесяца.Операция = &Операция
	|	И ЗаданияКЗакрытиюМесяца.Организация = &Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Операция", Перечисления.ОперацииЗакрытияМесяца.ПризнаниеРасходовПоИсследованиямИРазработкам);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПроблем.Добавить(НСтр("ru = 'Расчет признания расходов по НИОКР в НУ не актуален:';
								|en = 'Calculation of R&D expenses recognition in TA is not relevant:'"));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = НСтр("ru = '- для организации ""%1"" необходимо выполнить закрытие месяца';
								|en = '- for the company ""%1"" you must perform a month-end closing'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ОрганизацияПредставление);
		СписокПроблем.Добавить(ТекстСообщения); 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли