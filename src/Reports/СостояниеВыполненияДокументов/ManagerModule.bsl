#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует отчет "Состояние выполнения документов" путем выполнения пакета запросов. 
// 
// Параметры:
// ВходящиеДокументы - СписокЗначений - Список ссылок на документы.
// ТаблицаОтчета - ТабличныйДокумент - Табличный документ отчета.
//
Процедура СформироватьОтчетСостояниеВыполненияДокументов(ВходящиеДокументы, ТаблицаОтчета) Экспорт
	
	ТаблицаОтчета.АвтоМасштаб = Истина;
	ТаблицаОтчета.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СОСТОЯНИЕВЫПОЛНЕНИЯДОКУМЕНТОВ";
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ВходящиеДокументы[0].Значение);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	СтруктураПараметров = МенеджерОбъекта.СтруктураСостояниеВыполненияДокумента(); //см. ИнициализироватьСтруктуруСостояниеВыполненияДокумента
	
	Макет = ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	
	// Установка параметров запроса.
	Запрос.УстановитьПараметр("МассивДокументов", ВходящиеДокументы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	// Формирование текстов запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДокументы(ИмяТаблицы, СтруктураПараметров), "ВтДокументы");
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаДокументы(СтруктураПараметров), "ТаблицаДокументы");
	
	ВсегоТаблиц = 0;
	ВыводитьТаблицуРасчетов = Ложь;
	
	Если СтруктураПараметров.ВыводитьТаблицуРасчетыСКлиентами <> 0
		 И ЕстьПравоДоступаКНаборуДанных("РасчетыСКлиентами", СтруктураПараметров) Тогда
		 
		Запрос.УстановитьПараметр("Отгрузка", НСтр("ru = 'Отгрузка';
													|en = 'Shipment'"));
		ТекстыЗапроса.Добавить(ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров), "ВтОбъектыРасчетов");
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеПоРасчетамСКлиентами(ИмяТаблицы, СтруктураПараметров), "ВтДанныеПоРасчетамСКлиентами");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаРасчетыСКлиентами(СтруктураПараметров), "ТаблицаРасчетыСКлиентами");
		ВыводитьТаблицуРасчетов = Истина;
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицуРасчетыСПоставщиками <> 0
		 И ЕстьПравоДоступаКНаборуДанных("РасчетыСПоставщиками", СтруктураПараметров) Тогда
		
		Если НЕ ВыводитьТаблицуРасчетов Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров), "ВтОбъектыРасчетов");
		КонецЕсли; 
		Запрос.УстановитьПараметр("Поступление", НСтр("ru = 'Поступление';
														|en = 'Receipt'"));
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеПоРасчетамСПоставщиками(ИмяТаблицы, СтруктураПараметров), "ВтДанныеПоРасчетамСПоставщиками");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаРасчетыСПоставщиками(СтруктураПараметров), "ТаблицаРасчетыСПоставщиками");
		ВыводитьТаблицуРасчетов = Истина;
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	
	Если ВыводитьТаблицуРасчетов Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаГрафикиОплаты(ИмяТаблицы, СтруктураПараметров), "ТаблицаГрафикиОплаты");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПодчиненныеДокументы(ИмяТаблицы, СтруктураПараметров), "ТаблицаПодчиненныеДокументы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыОбеспечение <> 0 Тогда
		Запрос.УстановитьПараметр("МассивСтатусовБезОтгрузки", СтатусыБезОтгрузки(ИмяТаблицы));
		
		ТекстЗапросаТаблицаНеобеспеченныеТовары = ТекстЗапросаТаблицаНеобеспеченныеТовары(ИмяТаблицы, СтруктураПараметров);
		ТекстЗапросаТаблицаСостояниеОбеспечения = ТекстЗапросаТаблицаСостояниеОбеспечения(ИмяТаблицы, СтруктураПараметров);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаНеобеспеченныеТовары, "ТаблицаНеобеспеченныеТовары");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаСостояниеОбеспечения, "ТаблицаСостояниеОбеспечения");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыОтгрузка <> 0 И ЕстьПравоДоступаКНаборуДанных("Отгрузка", СтруктураПараметров) Тогда
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыКОтгрузке(СтруктураПараметров), "ВТТоварыКОтгрузке");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено(ИмяТаблицы, СтруктураПараметров, ТекстыЗапроса), "ВТТоварыРаспоряжениеЗаказОтгружено");
		КонецЕсли;
		Если СтруктураПараметров.ЭтоНакладная Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено(ИмяТаблицы, СтруктураПараметров), "ВТТоварыРаспоряжениеНакладнаяОтгружено");
		КонецЕсли;
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтгрузка(СтруктураПараметров), "ТаблицаОтгрузка");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтгружено(СтруктураПараметров), "ТаблицаОтгружено");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицуЗаказано Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаЗаказано(ИмяТаблицы, СтруктураПараметров), "ТаблицаЗаказано");
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыПоступление <> 0 И ЕстьПравоДоступаКНаборуДанных("Поступление", СтруктураПараметров) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыПоступление(СтруктураПараметров), "ВТТоварыПоступление");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ(ИмяТаблицы, СтруктураПараметров, ТекстыЗапроса), "ВТТоварыРаспоряженияПоступлениеЗаказ");
		КонецЕсли;
		Если СтруктураПараметров.ЭтоНакладная Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная(ИмяТаблицы, СтруктураПараметров), "ВТТоварыРаспоряженияПоступлениеНакладная");
		КонецЕсли;
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПоступление(СтруктураПараметров), "ТаблицаПоступление");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПоступило(СтруктураПараметров), "ТаблицаПоступило");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		Запрос.УстановитьПараметр("СписокХозоперацийРаздельнойЗакупки", ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов());
	КонецЕсли;
	
	//++ НЕ УТ

	//++ НЕ УТКА

	Если СтруктураПараметров.ВыводитьТаблицуУслугДавальцуКОформлению <> 0
		И ЕстьПравоДоступаКНаборуДанных("УслугиДавальцуКОформлению", СтруктураПараметров) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВТПродукцияПоЗаказуДавальца(), "ВТПродукцияПоЗаказуДавальца");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаУслугиДавальцуКОформлению(), "ТаблицаУслугиДавальцуКОформлению");
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	
	//-- НЕ УТКА

	//-- НЕ УТ
	
	Если СтруктураПараметров.ВыводитьТаблицыОтмененоОтгрузка <> 0 Тогда
		
		ТекстЗапросаТаблицаОтменено = ТекстЗапросаТаблицаОтмененоОтгрузка(ИмяТаблицы, СтруктураПараметров);
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтменено, "ТаблицаОтмененоОтгрузка");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыОтмененоПоступление <> 0 Тогда
		
		ТекстЗапросаТаблицаОтменено = ТекстЗапросаТаблицаОтмененоПоступление(ИмяТаблицы, СтруктураПараметров);
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтменено, "ТаблицаОтмененоПоступление");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыВозврат <> 0
		И ЕстьПравоДоступаКНаборуДанных("ЗаявкиНаВозвратТоваровОтКлиентов", СтруктураПараметров) Тогда
		
		ТекстЗапросаТаблицаВозвратТоваров = ТекстЗапросаТаблицаВозвратТоваров(ИмяТаблицы, СтруктураПараметров);
		ТекстЗапросаТаблицаВозвращеноТоваров = ТекстЗапросаТаблицаВозвращеноТоваров(ИмяТаблицы, СтруктураПараметров);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаВТВозвращаемыеТовары(СтруктураПараметров), "ВТВозвращаемыеТовары");
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыКВозврату(СтруктураПараметров), "ВТТоварыКВозврату");
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаВозвратТоваров, "ТаблицаВозвратТоваров");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаВозвращеноТоваров, "ТаблицаВозвращеноТоваров");
		
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	//++ НЕ УТ
	Если СтруктураПараметров.ВыводитьТаблицуПродукцияКОформлениюВОтчетеПереработчику <> 0 
		И ЕстьПравоДоступаКНаборуДанных("ПродукцияКОформлениюВОтчетеПереработчику", СтруктураПараметров) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПродукцияКОформлениюВОтчетеПереработчику(СтруктураПараметров), "ТаблицаПродукцияКОформлениюВОтчетеПереработчику");
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	Если СтруктураПараметров.ВыводитьТаблицуСырьеУПереработчика <> 0
		И ЕстьПравоДоступаКНаборуДанных("СырьеУПереработчика", СтруктураПараметров) Тогда
		
		ТекстЗапросаТаблицаСырьеУПереработчика(ТекстыЗапроса, СтруктураПараметров);
		
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	//-- НЕ УТ
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если ПустаяСтрока(ТекстЗапроса.Значение) Тогда
			ТекстыЗапроса.Удалить(ТекстЗапроса);
		КонецЕсли;
	КонецЦикла; 
	
	// Инициализация таблиц запроса.
	ТаблицыРезультатов = ПолучитьТаблицуРезультатовЗапроса(Запрос, ТекстыЗапроса);
	
	// Вывод результатов в табличный документ.
	НомерТипаДокумента = 0;
	ТаблицаДокументов = ТаблицыРезультатов.ТаблицаДокументы.Строки;
	
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЕстьДанные = Ложь;
		
		ВывестиЗаголовокОтчета(ТаблицаОтчета, Макет, СтрокаДокумент);
		Для НомерТаблицы = 1 По ВсегоТаблиц Цикл
			
			Если СтруктураПараметров.ВыводитьТаблицуРасчетыСКлиентами = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, "ТаблицаРасчетыСКлиентами")
					Или ЕстьДанные;
				ЕстьДанные = ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов) 
					Или ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуРасчетыСПоставщиками = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, "ТаблицаРасчетыСПоставщиками")
					Или ЕстьДанные;
				ЕстьДанные = ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов)
					Или ЕстьДанные;
					
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуЗаказано = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуЗаказано(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыПоступление = НомерТаблицы Тогда
				
				ЕстьДанныеПоступление = ВывестиТаблицуПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеПоступление = ВывестиТаблицуПоступило(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеПоступление;
				ЕстьДанныеПоступление = ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров) 
					Или ЕстьДанныеПоступление;
				Если ЕстьДанныеПоступление Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеПоступление ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыОтгрузка = НомерТаблицы Тогда
				
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтгрузка(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтгружено(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров) 
					Или ЕстьДанныеОтгрузка;
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтмененоОтгрузка(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеОтгрузка;
				Если ЕстьДанныеОтгрузка Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли; 
				
				ЕстьДанные = ЕстьДанныеОтгрузка ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыОбеспечение = НомерТаблицы Тогда	
				
				ЕстьДанныеОбеспечение = ВывестиТаблицуНеобеспеченныеТовары(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеОбеспечение = ВывестиТаблицуСостояниеОбеспечения(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					ИЛИ ЕстьДанныеОбеспечение;
					
				Если ЕстьДанныеОбеспечение Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеОбеспечение ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыВозврат = НомерТаблицы Тогда
				
				ЕстьДанныеВозврат = ВывестиТаблицуВозвратТоваров(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеВозврат = ВывестиТаблицуВозвращеноТоваров(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеВозврат;
				ЕстьДанныеВозврат = ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеВозврат;
				Если ЕстьДанныеВозврат Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеВозврат ИЛИ ЕстьДанные;
				
			//++ НЕ УТ

			//++ НЕ УТКА
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуУслугДавальцуКОформлению = НомерТаблицы Тогда	
			
				ЕстьДанныеДавальцы = ВывестиТаблицуУслугиДавальцуКОформлению(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				Если ЕстьДанныеДавальцы Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				ЕстьДанные = ЕстьДанныеДавальцы ИЛИ ЕстьДанные;
			//-- НЕ УТКА
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуПродукцияКОформлениюВОтчетеПереработчику = НомерТаблицы Тогда	
				
				ЕстьДанные = ВывестиТаблицуПродукцияКОформлениюВОтчетеПереработчику(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				Если ЕстьДанные Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуСырьеУПереработчика = НомерТаблицы Тогда	
			
				ЕстьДанные = ВывестиТаблицуСырьеУПереработчика(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				Если ЕстьДанные Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
			//-- НЕ УТ
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиТаблицуНетДанных(ТаблицаОтчета, Макет, СтрокаДокумент, ЕстьДанные);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	Запрос - Запрос
// 	ТекстыЗапроса - СписокЗначений
// 	
// Возвращаемое значение:
// 	Структура:
// 		* ТаблицаДокументы                                  - ДеревоЗначений:
// 			** Ссылка - ДокументСсылка
// 		* ТаблицаРасчетыСПоставщиками                       - ДеревоЗначений
// 		* ТаблицаРасчетыСКлиентами                          - ДеревоЗначений
// 		* ТаблицаГрафикиОплаты                              - ДеревоЗначений
// 		* ТаблицаПодчиненныеДокументы                       - ДеревоЗначений
// 		* ТаблицаНеобеспеченныеТовары                       - ДеревоЗначений
// 		* ТаблицаСостояниеОбеспечения                       - ДеревоЗначений
// 		* ТаблицаОтгрузка                                   - ДеревоЗначений
// 		* ТаблицаОтгружено                                  - ДеревоЗначений
// 		* ТаблицаЗаказано                                   - ДеревоЗначений
// 		* ТаблицаПоступление                                - ДеревоЗначений
// 		* ТаблицаПоступило                                  - ДеревоЗначений
// 		* ТаблицаУслугиДавальцуКОформлению                  - ДеревоЗначений
// 		* ТаблицаПродукцияКОформлениюВОтчетеПереработчику   - ДеревоЗначений
// 		* ТаблицаОтмененоОтгрузка                           - ДеревоЗначений
// 		* ТаблицаОтмененоПоступление                        - ДеревоЗначений
// 		* ТаблицаВозвратТоваров                             - ДеревоЗначений
// 		* ТаблицаВозвращеноТоваров                          - ДеревоЗначений
//
Функция ПолучитьТаблицуРезультатовЗапроса(Запрос, ТекстыЗапроса)

	Возврат ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа.
// 
// Возвращаемое значение:
//  Структура - Инициализировать структуру состояние выполнения документа:
// * ВыводитьТаблицуРасчетыСКлиентами - Число -
// * ВыводитьТаблицуРасчетыСПоставщиками - Число -
// * ВыводитьТаблицыОбеспечение - Число -
// * ВыводитьТаблицыОтгрузка - Число -
// * ВыводитьТаблицыВозврат - Число -
// * ВыводитьТаблицыПоступление - Число -
// * ВыводитьТаблицыОтмененоОтгрузка - Число -
// * ВыводитьТаблицыОтмененоПоступление - Число -
// * ВыводитьТаблицуЗаказано - Число -
// * ВыводитьТаблицуУслугДавальцуКОформлению - Число -
// * ВыводитьТаблицуПродукцияКОформлениюВОтчетеПереработчику - Число -
// * ВыводитьТаблицуСырьеУПереработчика - Число -
// * ЭтоЗаказ - Булево -
// * ЭтоНакладная - Булево -
// * ЭтоПоступлениеТоваров - Булево -
// * СкладВШапке - Булево -
// * ЕстьСуммовыеПоказателиОтгрузки - Булево -
// * ЕстьСуммовыеПоказателиПоступления - Булево -
// * ЕстьПричиныОтменыОтгрузки - Булево -
// * ЕстьПричиныОтменыПоступления - Булево -
// * ИмяТЧТоварыОтгрузка - Строка -
// * ИмяТЧТоварыПоступление - Строка -
// * ИмяПоляДатаОтгрузки - Строка -
// * ИмяПоляСклад - Строка -
// * ИмяПоляСкладПолучатель - Строка -
// * ИмяПоляСумма - Строка -
// * ИмяРегистраОтгрузкаУслуг - Неопределено -
// * ИмяРегистраПоступлениеУслуг - Неопределено -
// * ИмяПоляНакладнаяПоЗаказам - Неопределено -
// * СтруктураДопЗапросов - Неопределено -
// * ДействиеРасшифровкаКоличествоОтгружено - Неопределено -
// * ДействиеРасшифровкаКоличествоПоступило - Неопределено -
// * ТекстТоварУслугаОтгрузка - Строка -
// * ТекстТоварУслугаПоступление - Строка -
// * ТекстОтмененоОтгрузка - Строка -
// * ТекстОтмененоПоступление - Строка -
Функция ИнициализироватьСтруктуруСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Новый Структура;
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",           0); // 0 - не выводить, другое значение указывает порядок вывода таблицы
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками",        0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение",                 0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",                    0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыВозврат",                     0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление",                 0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка",            0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление",         0);
	СтруктураСостояние.Вставить("ВыводитьТаблицуЗаказано",                    0);
	//++ НЕ УТ

	//++ НЕ УТКА
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению",                 0);
	//-- НЕ УТКА
	СтруктураСостояние.Вставить("ВыводитьТаблицуПродукцияКОформлениюВОтчетеПереработчику", 0);
	СтруктураСостояние.Вставить("ВыводитьТаблицуСырьеУПереработчика", 0);
	//-- НЕ УТ
	
	СтруктураСостояние.Вставить("ЭтоЗаказ",                                   Ложь);
	СтруктураСостояние.Вставить("ЭтоНакладная",                               Ложь);
	СтруктураСостояние.Вставить("ЭтоПоступлениеТоваров",                      Ложь);

	СтруктураСостояние.Вставить("СкладВШапке",                                Ложь);
	
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",             Ложь);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления",          Ложь);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки",                  Ложь);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыПоступления",               Ложь);
	
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",                        "Товары");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление",                     "Товары");
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки",                        "ДатаОтгрузки");
	СтруктураСостояние.Вставить("ИмяПоляСклад",                               "Склад");
	СтруктураСостояние.Вставить("ИмяПоляСкладПолучатель",                     "Склад");
	СтруктураСостояние.Вставить("ИмяПоляСумма",                               "СуммаСНДС");
	
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг",                   Неопределено);
	СтруктураСостояние.Вставить("ИмяРегистраПоступлениеУслуг",                Неопределено);
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам",                  Неопределено);
	
	СтруктураСостояние.Вставить("СтруктураДопЗапросов",                       Неопределено);
	
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоОтгружено",     Неопределено);
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоПоступило",     Неопределено);
	
	СтруктураСостояние.Вставить("СуффиксМакетаТаблицыПродукцияКОформлениюВОтчетеПереработчику", "");
	СтруктураСостояние.Вставить("СуффиксМакетаТаблицыСырьеУПереработчика", "");
	
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка",    НСтр("ru = 'Товар (услуга)';
																	|en = 'Goods (service)'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru = 'Товар (услуга)';
																	|en = 'Goods (service)'"));
	СтруктураСостояние.Вставить("ТекстОтмененоОтгрузка",     НСтр("ru = 'Отменено (%1%)';
																	|en = 'Canceled (%1%)'"));
	СтруктураСостояние.Вставить("ТекстОтмененоПоступление",  НСтр("ru = 'Отменено (%1%)';
																	|en = 'Canceled (%1%)'"));
	
	Возврат СтруктураСостояние
	
КонецФункции

#Область СтандартныеПодсистемы
// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.Настройки
//   ОписаниеОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
//
// Вспомогательные методы:
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//
// Примеры:
//
//  1. Установка описания варианта.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//
//  2. Отключение варианта отчета.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Включен = Ложь;
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	// Отключение контекстных вариантов
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#Область КомандыПодменюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияЗаказКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		КомандаОтчет.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет,
			"ЭтоЗаказКакСчет",
			Ложь, 
			ВидСравненияКомпоновкиДанных.Равно);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияЗаявокНаВозврат(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		КомандаОтчет.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет,
			"ЭтоЗаказКакСчет",
			Ложь, 
			ВидСравненияКомпоновкиДанных.Равно);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СостояниеВыполненияРеализацииАкта";
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияЗаказПереработчику(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции


// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Fulfillment state'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
Функция ДобавитьКомандуСостояниеВыполненияДоговора(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Состояние выполнения';
											|en = 'Execution state'");
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность = "Важное";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет, 
			"ГрафикИсполненияДоговора", 
			,
			ВидСравненияКомпоновкиДанных.Заполнено);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВтДокументы(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВтДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВтДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК ДокументСсылка,
	|	ТИПЗНАЧЕНИЯ(Документ.Ссылка) КАК ТипДокумента,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Проведен КАК Проведен,
	|	Документ.Номер КАК НомерДокумента
	|ПОМЕСТИТЬ
	|	ВтДокументы
	|ИЗ
	|	&ИмяТаблицы КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов);
	|	
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументы(СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документы.ДокументСсылка КАК Ссылка,
	|	Документы.ДатаДокумента КАК ДатаДокумента,
	|	Документы.Проведен КАК ДокументПроведен,
	|	Документы.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	ВтДокументы КАК Документы;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВтОбъектыРасчетов") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВтОбъектыРасчетов;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документы.ДокументСсылка КАК Документ,
	|	
	|	ВЫБОР
	|		КОГДА Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА Документы.ДокументСсылка.Договор
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.РеализацияТоваровУслуг)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.АктВыполненныхРабот))
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.ЗаказКлиента) 
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПоставщику) 
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетДавальцу)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказДавальца)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	//-- Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетДавальцу2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов В (
	|											ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным),
	|											ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказДавальца2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА Документы.ДокументСсылка
	//-- НЕ УТКА

	//++ НЕ УТ
	
	//++ Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетПереработчика)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	//-- Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетПереработчика2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА Документы.ДокументСсылка
	//++ Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПереработчику)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|			ТОГДА Документы.ДокументСсылка
	//-- Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПереработчику2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА Документы.ДокументСсылка
	//-- НЕ УТ
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			И Документы.ТипДокумента <> ТИП(Документ.ГрафикИсполненияДоговора)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ГрафикИсполненияДоговора)
	|		ТОГДА ИСТИНА
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.РеализацияТоваровУслуг)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.АктВыполненныхРабот))
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|		ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|		ТОГДА ИСТИНА
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.ЗаказКлиента)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|		ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПоставщику) 
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|		ТОГДА ИСТИНА
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетДавальцу)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|		ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказДавальца)
	|			И (Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
	|				ИЛИ Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|		ТОГДА ИСТИНА
	//-- Устарело_Переработка24
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ОтчетДавальцу2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов В (
	|											ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным),
	|											ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
	|				ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказДавальца2_5)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				ТОГДА ИСТИНА
	//-- НЕ УТКА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяГрафик, 
	|	Документы.ДокументСсылка.ПорядокРасчетов КАК ПорядокРасчетов
	|ИЗ
	|	ВтДокументы КАК Документы
	|";
	
	Если ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина,
			|	Документ.ПорядокРасчетов
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И НЕ Документ.РеализацияПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказКлиента,
			|	Истина,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И Документ.Ссылка.РеализацияПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка.Договор,
			|	Ложь,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|	И НЕ Документ.Ссылка.РеализацияПоЗаказам
			|";
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина,
			|	Документ.ПорядокРасчетов
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И НЕ Документ.ПоступлениеПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказПоставщику,
			|	Истина,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И Документ.Ссылка.ПоступлениеПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка.Договор,
			|	Ложь,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|	И НЕ Документ.Ссылка.ПоступлениеПоЗаказам
			|";
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина,
			|	Документ.ПорядокРасчетов
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И НЕ Документ.АктПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказКлиента,
			|	Истина,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	(Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	И Документ.Ссылка.АктПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка.Договор,
			|	Ложь,
			|	Документ.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
			|		И НЕ Документ.Ссылка.АктПоЗаказам 
			|";
	КонецЕсли;
	
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	Если ИмяТаблицы = "Документ.ОтчетДавальцу" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	ОтчетыДавальцу.ЗаказДавальца,
			|	Истина,
			|	ОтчетыДавальцу.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.ОтчетДавальцу.Продукция КАК ОтчетыДавальцу
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО ОтчетыДавальцу.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	ОтчетыДавальцу.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|		ИЛИ ОтчетыДавальцу.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|";
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Если ИмяТаблицы = "Документ.ОтчетДавальцу2_5" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	ОтчетыДавальцу.ЗаказДавальца,
			|	Истина,
			|	ОтчетыДавальцу.Ссылка.ПорядокРасчетов
			|ИЗ
			|	Документ.ОтчетДавальцу2_5.Продукция КАК ОтчетыДавальцу
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО ОтчетыДавальцу.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	ОтчетыДавальцу.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|";
	КонецЕсли;

	//-- НЕ УТКА
	
	ТекстЗапросаОбъектовРасчета = "
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Документ КАК Документ,
	|	ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТребуетсяГрафик КАК ТребуетсяГрафик,
	|	ПорядокРасчетов КАК ПорядокРасчетов
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|	ИЗ
	|	&ТаблицаЗапроса КАК ТаблицаОбъектовРасчета
	|;";
	
	ТекстЗапросаОбъектовРасчета = СтрЗаменить(ТекстЗапросаОбъектовРасчета, "&ТаблицаЗапроса", "("+ ТекстЗапроса +")");
	
	Возврат ТекстЗапросаОбъектовРасчета;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикиОплаты(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТаблицаГрафикиОплаты") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСКлиентами;
	КонецЕсли;
	
	Если СтруктураПараметров.ЭтоЗаказ Тогда
		
		СуммаПлатежа = "ДокументЭтапыГрафикаОплаты.СуммаПлатежа + ДокументЭтапыГрафикаОплаты.СуммаЗалогаЗаТару";
		
		//++ НЕ УТ
		Если ИмяТаблицы = "Документ.ЗаказПереработчику2_5"
			//++ Устарело_Переработка24
			Или ИмяТаблицы = "Документ.ЗаказПереработчику"
			//-- Устарело_Переработка24
			Или Ложь Тогда
			СуммаПлатежа = "ДокументЭтапыГрафикаОплаты.СуммаПлатежа";
		КонецЕсли; 
		//-- НЕ УТ
		
		//++ НЕ УТКА
		Если ИмяТаблицы = "Документ.ЗаказДавальца2_5"
			//++ Устарело_Переработка24
			Или ИмяТаблицы = "Документ.ЗаказДавальца"
			//-- Устарело_Переработка24
			Или Ложь Тогда
			СуммаПлатежа = "ДокументЭтапыГрафикаОплаты.СуммаПлатежа";
		КонецЕсли; 
		//-- НЕ УТКА
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
		|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
		|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
		|	&СуммаПлатежа КАК СуммаПлатежа
		|ИЗ
		|	&ИмяТаблицы КАК ДокументЭтапыГрафикаОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
		|		И ОбъектыРасчетов.ТребуетсяГрафик";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаПлатежа", СуммаПлатежа);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + ".ЭтапыГрафикаОплаты");
		
	ИначеЕсли СтруктураПараметров.ЭтоНакладная Тогда
		
		Если ЗначениеЗаполнено(СтруктураДопЗапросов)
			И СтруктураДопЗапросов.Свойство("ТаблицаГрафикОплатыПоНакладной") Тогда
			
			ТекстЗапроса = СтруктураДопЗапросов.ТаблицаГрафикОплатыПоНакладной;
			
		ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот" 
			ИЛИ ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг"
			//++ НЕ УТКА

			//++ Устарело_Переработка24
			ИЛИ ИмяТаблицы = "Документ.ОтчетДавальцу"
			//-- Устарело_Переработка24
			ИЛИ ИмяТаблицы = "Документ.ОтчетДавальцу2_5"
			//-- НЕ УТКА
			Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ДокументЭтапыГрафикаОплаты.Ссылка                       КАК Документ,
			|	ДокументЭтапыГрафикаОплаты.НомерСтроки                  КАК НомерСтроки,
			|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
			|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа                  КАК ДатаПлатежа,
			|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа                 КАК СуммаПлатежа
			|ИЗ
			|	&ИмяТаблицы КАК ДокументЭтапыГрафикаОплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
			|		И ОбъектыРасчетов.ТребуетсяГрафик";

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + ".ЭтапыГрафикаОплаты");
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументНакладная.Ссылка КАК Документ,
			|	1 КАК НомерСтроки,
			|	ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг))  КАК ВариантОплаты,
			|	ДокументНакладная.ДатаПлатежа КАК ДатаПлатежа,
			|	ДокументНакладная.СуммаДокумента КАК СуммаПлатежа
			|ИЗ
			|	&ИмяТаблицы КАК ДокументНакладная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументНакладная.Ссылка)
			|		И ОбъектыРасчетов.ТребуетсяГрафик";

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
		
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаказКлиента");
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаявкаНаВозвратТоваровОтКлиента");
			
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.ПриобретениеТоваровУслуг" Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаказПоставщику");
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоДоговор") И СтруктураПараметров.ЭтоДоговор Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументЭтапыГрафикаОплаты.Ссылка.Договор КАК Документ,
		|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
		|	ДокументЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
		|ИЗ
		|	&ИмяТаблицы КАК ДокументЭтапыГрафикаОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка.Договор
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + ".ЭтапыГрафикаОплаты");
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИТОГИ ПО
	|	Ссылка;";
	
	Возврат ТекстЗапроса

КонецФункции

Функция ТекстЗапросаПоГрафикуОплатыОбъектРасчетов(ИмяДокумента)

	Если Не ПравоДоступа("Чтение", Метаданные.Документы.Найти(ИмяДокумента)) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
	|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа + ДокументЭтапыГрафикаОплаты.СуммаЗалогаЗаТару КАК СуммаПлатежа
	|ИЗ
	|	&ИмяТаблицы КАК ДокументЭтапыГрафикаОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы","Документ." + ИмяДокумента + ".ЭтапыГрафикаОплаты");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеПоРасчетамСКлиентами(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ВтДанныеПоРасчетамСКлиентами") Тогда
		
		Возврат СтруктураДопЗапросов.ВтДанныеПоРасчетамСКлиентами;
	КонецЕсли;
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеПоРасчетам.Период КАК Период,
	|	СУММА(ДанныеПоРасчетам.ОплатаПлан) КАК ОплатаПлан,
	|	СУММА(ДанныеПоРасчетам.ОплатаФакт) КАК ОплатаФакт
	|ПОМЕСТИТЬ ВтДанныеПоРасчетамСКлиентами
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентами.ОбъектРасчетов КАК ОбъектРасчетов,
	|		НАЧАЛОПЕРИОДА(ВЫБОР КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|					ТОГДА РасчетыСКлиентами.ДатаРегистратора
	|					ИНАЧЕ РасчетыСКлиентами.Период
	|					КОНЕЦ, ДЕНЬ) КАК Период,
	|		РасчетыСКлиентами.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|			И НЕ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|			И НЕ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|				ТОГДА РасчетыСКлиентами.КОплате
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				И НЕ РасчетыСКлиентами.ОбъектРасчетов.Объект = РасчетыСКлиентами.Регистратор
	|				И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|					ТОГДА -РасчетыСКлиентами.КОплате
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|					ТОГДА ВЫБОР
	|							КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							ТОГДА РасчетыСКлиентами.КОплате
	|							ИНАЧЕ -РасчетыСКлиентами.КОплате
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплатаПлан,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ТОГДА ВЫБОР
	|					КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|						И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА -РасчетыСКлиентами.Сумма
	|					КОГДА РасчетыСКлиентами.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|						И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА РасчетыСКлиентами.Сумма
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|						ИЛИ РасчетыСКлиентами.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|					ТОГДА 0
	|					ИНАЧЕ РасчетыСКлиентами.Сумма
	|				КОНЕЦ
	|		КОНЕЦ КАК ОплатаФакт
	|	ИЗ
	|		ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК СправочникОбъектыРасчетов
	|			ПО ОбъектыРасчетов.ОбъектРасчетов = СправочникОбъектыРасчетов.Объект
	|			И НЕ СправочникОбъектыРасчетов.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ПО СправочникОбъектыРасчетов.Ссылка = РасчетыСКлиентами.ОбъектРасчетов
	|	ГДЕ 
	|		РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|	) КАК ДанныеПоРасчетам
	|
	|	СГРУППИРОВАТЬ ПО
	|	ДанныеПоРасчетам.Период,
	|	ДанныеПоРасчетам.ОбъектРасчетов
	|;";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаРасчетыСКлиентами") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСКлиентами;
	КонецЕсли;
	
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Документ КАК Документ,
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.ПорядокРасчетов КАК ПорядокРасчетов,
		|	РасчетыСКлиентами.Валюта КАК Валюта,
		|	ОбъектыРасчетов.ТребуетсяГрафик КАК ТребуетсяГрафик,
		|	ВЫБОР
		|		КОГДА ДанныПоРасчетамПоХО.ОплатаПлан > 0
		|			ТОГДА ВЫРАЗИТЬ(""ОплатаПоГрафику"" КАК СТРОКА(150))
		|		КОГДА ДанныПоРасчетамПоХО.ОплатаПлан < 0
		|			ТОГДА ВЫРАЗИТЬ(""ПереносАванса"" КАК СТРОКА(150))
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ДанныПоРасчетамПоХО.ОплатаФакт <> 0
		|				ТОГДА ВЫРАЗИТЬ(""ОплатаНеПоГрафику"" КАК СТРОКА(150))
		|			ИНАЧЕ ВЫРАЗИТЬ(""Отгрузка"" КАК СТРОКА(150))
		|		КОНЕЦ
		|	КОНЕЦ КАК ЭтапОплатыОтгрузки,
		|	РасчетыСКлиентами.Период КАК ДатаПлатежа,
		|	ВЫБОР КОГДА ОбъектыРасчетов.ТребуетсяГрафик
		|			ТОГДА ЕСТЬNULL(ДанныПоРасчетамПоХО.ОплатаПлан, 0)
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК ОплатаПлан,
		|	ЕСТЬNULL(ДанныПоРасчетамПоХО.ОплатаФакт, 0) КАК ОплатаФакт,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Период < &ТекущаяДата
		|		И РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
		|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОплатаПросрочено,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) > 0
		|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОплатаПросроченоИтого,
		|	РасчетыСКлиентами.КОтгрузкеРасход КАК ОтгрузкаПлан,
		|	РасчетыСКлиентами.КОтгрузкеПриход КАК ОтгрузкаФакт,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Период < &ТекущаяДата
		|		И РасчетыСКлиентами.КОтгрузкеКонечныйОстаток < 0
		|			ТОГДА -РасчетыСКлиентами.КОтгрузкеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОтгрузкаПросрочено,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(-РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОтгрузкеПриход,
		|			0) > 0
		|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОтгрузкеПриход,
		|				0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОтгрузкаПросроченоИтого
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
		|			,
		|			,
		|			День,
		|			,
		|			ОбъектРасчетов.Объект В
		|				(ВЫБРАТЬ
		|					ОбъектыРасчетов.ОбъектРасчетов
		|				ИЗ
		|					ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО (ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентами.ОбъектРасчетов.Объект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
		|				&ТекущаяДата,
		|				ОбъектРасчетов.Объект В
		|					(ВЫБРАТЬ
		|						ОбъектыРасчетов.ОбъектРасчетов
		|					ИЗ
		|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентамиОстатки
		|		ПО РасчетыСКлиентами.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
		|				&ТекущаяДата,
		|				,
		|				,
		|				ОбъектРасчетов.Объект В
		|					(ВЫБРАТЬ
		|						ОбъектыРасчетов.ОбъектРасчетов
		|					ИЗ
		|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
		|		ПО (РасчетыСКлиентами.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоРасчетамСКлиентами КАК ДанныПоРасчетамПоХО
		|		ПО РасчетыСКлиентами.ОбъектРасчетов = ДанныПоРасчетамПоХО.ОбъектРасчетов
		|		И РасчетыСКлиентами.Период = ДанныПоРасчетамПоХО.Период
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСКлиентами.Период
		|ИТОГИ
		|	МАКСИМУМ(ПорядокРасчетов),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ТребуетсяГрафик),
		|	СУММА(ОплатаПлан),
		|	СУММА(ОплатаФакт),
		|	МАКСИМУМ(ОплатаПросроченоИтого),
		|	СУММА(ОтгрузкаПлан),
		|	СУММА(ОтгрузкаФакт),
		|	МАКСИМУМ(ОтгрузкаПросроченоИтого)
		|ПО
		|	Документ,
		|	ОбъектРасчетов
		|;";


	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВтДанныеПоРасчетамСПоставщиками(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ВтДанныеПоРасчетамСПоставщиками") Тогда
		
		Возврат СтруктураДопЗапросов.ВтДанныеПоРасчетамСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеПоРасчетам.Период КАК Период,
		|	СУММА(ДанныеПоРасчетам.ОплатаПлан) КАК ОплатаПлан,
		|	СУММА(ДанныеПоРасчетам.ОплатаФакт) КАК ОплатаФакт
		|ПОМЕСТИТЬ ВтДанныеПоРасчетамСПоставщиками
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
		|		НАЧАЛОПЕРИОДА(ВЫБОР КОГДА РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|					ТОГДА РасчетыСПоставщиками.ДатаРегистратора
		|					ИНАЧЕ РасчетыСПоставщиками.Период
		|				КОНЕЦ, ДЕНЬ) КАК Период,
		|		ВЫБОР
		|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И НЕ РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
		|			И НЕ РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|				ТОГДА РасчетыСПоставщиками.КОплате
		|			КОГДА РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
		|				И НЕ РасчетыСПоставщиками.ОбъектРасчетов.Объект = РасчетыСПоставщиками.Регистратор
		|				И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА -РасчетыСПоставщиками.КОплате
		|			КОГДА РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|					ТОГДА ВЫБОР
		|							КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА РасчетыСПоставщиками.КОплате
		|							ИНАЧЕ -РасчетыСПоставщиками.КОплате
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ОплатаПлан,
		|		ВЫБОР
		|			КОГДА РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|							ТОГДА РасчетыСПоставщиками.Сумма
		|							ИНАЧЕ -РасчетыСПоставщиками.Сумма
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|							ТОГДА 0
		|							ИНАЧЕ РасчетыСПоставщиками.Сумма
		|						КОНЕЦ
		|			КОНЕЦ КАК ОплатаФакт
		|	ИЗ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК СправочникОбъектыРасчетов
		|			ПО ОбъектыРасчетов.ОбъектРасчетов = СправочникОбъектыРасчетов.Объект
		|			И НЕ СправочникОбъектыРасчетов.ПометкаУдаления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ПО СправочникОбъектыРасчетов.Ссылка = РасчетыСПоставщиками.ОбъектРасчетов
		|	ГДЕ 
		|		РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
		|	) КАК ДанныеПоРасчетам
		|	СГРУППИРОВАТЬ ПО
		|	ДанныеПоРасчетам.Период,
		|	ДанныеПоРасчетам.ОбъектРасчетов
		|;";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаРасчетыСПоставщиками") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыРасчетов.Документ КАК Документ,
	|	РасчетыСПоставщиками.ОбъектРасчетов.Объект КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ПорядокРасчетов КАК ПорядокРасчетов,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	ОбъектыРасчетов.ТребуетсяГрафик,
	|	ВЫБОР
	|		КОГДА ДанныПоРасчетамПоХО.ОплатаПлан > 0
	|			ТОГДА ВЫРАЗИТЬ(""ОплатаПоГрафику"" КАК СТРОКА(150))
	|		КОГДА ДанныПоРасчетамПоХО.ОплатаПлан < 0
	|			ТОГДА ВЫРАЗИТЬ(""ПереносАванса"" КАК СТРОКА(150))
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДанныПоРасчетамПоХО.ОплатаФакт <> 0
	|				ТОГДА ВЫРАЗИТЬ(""ОплатаНеПоГрафику"" КАК СТРОКА(150))
	|			ИНАЧЕ ВЫРАЗИТЬ(""Поступление"" КАК СТРОКА(150))
	|		КОНЕЦ
	|	КОНЕЦ КАК ЭтапОплатыОтгрузки,
	|	РасчетыСПоставщиками.Период КАК ДатаПлатежа,
	|	ЕСТЬNULL(ДанныПоРасчетамПоХО.ОплатаПлан, 0) КАК ОплатаПлан,
	|	ЕСТЬNULL(ДанныПоРасчетамПоХО.ОплатаФакт, 0) КАК ОплатаФакт,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Период < &ТекущаяДата
	|				И РасчетыСПоставщиками.КОплатеКонечныйОстаток < 0
	|			ТОГДА -РасчетыСПоставщиками.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаПросрочено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0) < 0
	|			ТОГДА -(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаПросроченоИтого,
	|	РасчетыСПоставщиками.КПоступлениюРасход КАК ОтгрузкаФакт,
	|	РасчетыСПоставщиками.КПоступлениюПриход КАК ОтгрузкаПлан,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Период < &ТекущаяДата
	|				И РасчетыСПоставщиками.КПоступлениюКонечныйОстаток > 0
	|			ТОГДА РасчетыСПоставщиками.КПоступлениюКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтгрузкаПросрочено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КПоступлениюРасход, 0) > 0 ТОГДА
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КПоступлениюРасход, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ОтгрузкаПросроченоИтого
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			,
	|			,
	|			День,
	|			,
	|			ОбъектРасчетов.Объект В
	|				(ВЫБРАТЬ
	|					ОбъектыРасчетов.ОбъектРасчетов
	|				ИЗ
	|					ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				&ТекущаяДата,
	|				ОбъектРасчетов.Объект В
	|					(ВЫБРАТЬ
	|						ОбъектыРасчетов.ОбъектРасчетов
	|					ИЗ
	|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщикамиОстатки
	|		ПО РасчетыСПоставщиками.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|				&ТекущаяДата,
	|				,
	|				,
	|				ОбъектРасчетов.Объект В
	|					(ВЫБРАТЬ
	|						ОбъектыРасчетов.ОбъектРасчетов
	|					ИЗ
	|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщикамиОбороты
	|		ПО РасчетыСПоставщиками.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоРасчетамСПоставщиками КАК ДанныПоРасчетамПоХО
	|		ПО РасчетыСПоставщиками.ОбъектРасчетов = ДанныПоРасчетамПоХО.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Период = ДанныПоРасчетамПоХО.Период
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПоставщиками.Период
	|ИТОГИ
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ПорядокРасчетов),
	|	СУММА(ОплатаПлан),
	|	СУММА(ОплатаФакт),
	|	МАКСИМУМ(ОплатаПросроченоИтого),
	|	СУММА(ОтгрузкаПлан),
	|	СУММА(ОтгрузкаФакт),
	|	МАКСИМУМ(ОтгрузкаПросроченоИтого),
	|	МАКСИМУМ(ТребуетсяГрафик)
	|ПО
	|	Документ,
	|	ОбъектРасчетов
	|;";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаПодчиненныеДокументы(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПодчиненныеДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПодчиненныеДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "";
	МассивТекстовЗапроса = Новый Массив();
	
	Если (ИмяТаблицы = "Документ.ЗаказКлиента" 
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента")
		И ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказКлиента = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления
		|";

		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если (ИмяТаблицы = "Документ.ЗаказКлиента" 
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента") 
		И ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
			
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка КАК Документ,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
			|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
			|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
			|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК ТчДокументРеализациии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
			|		ПО ТчДокументРеализациии.ЗаказКлиента = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
			|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления";
			
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" 
		И ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказПоставщику = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления
		|";

		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;

	//++ НЕ УТ

	//++ НЕ УТКА

	//++ Устарело_Переработка24
	Если ИмяТаблицы = "Документ.ЗаказДавальца" 
		И ПравоДоступа("Чтение", Метаданные.Документы.ОтчетДавальцу) Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцу.Продукция КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказДавальца = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Если ИмяТаблицы = "Документ.ЗаказДавальца2_5"
		И ПравоДоступа("Чтение", Метаданные.Документы.ОтчетДавальцу2_5) Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка                         КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта                КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента        КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка                       КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.Продукция КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказДавальца = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ Устарело_Переработка24
	Если ИмяТаблицы = "Документ.ЗаказПереработчику"
		И ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПереработчика) Тогда
		
		ТекстЗапроса ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ОтчетПереработчика КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТаблицаДокумента.ЗаказПереработчику = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ТаблицаДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТаблицаДокумента.ПометкаУдаления
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Если ИмяТаблицы = "Документ.ЗаказПереработчику2_5"
	   И ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПереработчика2_5) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаДокумента.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ОтчетПереработчика2_5 КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТаблицаДокумента.ЗаказПереработчику = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ТаблицаДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТаблицаДокумента.ПометкаУдаления
		|";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	//-- НЕ УТ
	
	КоличествоЗапросов = МассивТекстовЗапроса.Количество();
	Если КоличествоЗапросов Тогда
		Пока КоличествоЗапросов > 1 Цикл
			КоличествоЗапросов = КоличествоЗапросов - 1;
			МассивТекстовЗапроса[КоличествоЗапросов] = СтрЗаменить(МассивТекстовЗапроса[КоличествоЗапросов], "РАЗРЕШЕННЫЕ", "");
		КонецЦикла;
		
		ТекстЗамены = СтрСоединить(МассивТекстовЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);

		ТекстЗапроса = "
			|//////////////////////////////////////////////////////
			|&ТекстЗамены
			|
			|ИТОГИ
			|	МАКСИМУМ(ПорядокРасчетов),
			|	МАКСИМУМ(Валюта)
			|ПО
			|	Документ;
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены", ТекстЗамены);
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаНеобеспеченныеТовары(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаНеобеспеченныеТовары") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаНеобеспеченныеТовары;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	&ИмяПоляСумма КАК Сумма
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|	И НЕ ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаСостояниеОбеспечения(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаСостояниеОбеспечения") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаСостояниеОбеспечения;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.Серия КАК Серия,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	&ИмяПоляДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументТовары.ВариантОбеспечения КАК Действие,
	|	&ИмяПоляСумма КАК Сумма
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	(ДокументТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|	ИЛИ ВЫБОР КОГДА ДокументТовары.Ссылка.Статус В (&МассивСтатусовБезОтгрузки) ТОГДА
	|		ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	КОНЕЦ)
	|	И НЕ ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляДатаОтгрузки", "ДокументТовары." + СтруктураПараметров.ИмяПоляДатаОтгрузки);
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТТоварыКОтгрузке(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыКОтгрузке") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыКОтгрузке;
	КонецЕсли;
	
	ТекстЗапроса = "";
	МассивТекстовЗапроса = Новый Массив();
	
	Если СтруктураПараметров.ЕстьПравоНаТаблицуОтгрузки Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
		|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход КАК КОтгрузке,
		|	ТоварыКОтгрузкеОстатки.СобираетсяКонечныйОстаток КАК Собирается,
		|	ТоварыКОтгрузкеОстатки.СобраноКонечныйОстаток КАК Собрано,
		|	ТоварыКОтгрузкеОстатки.КОформлениюКонечныйОстаток КАК Оформить,
		|	ТоварыКОтгрузкеОстатки.КОформлениюРасход КАК Оформлено,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток КАК Отгрузить,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеРасход КАК Отгружено,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И &ТекущаяДата >= ТоварыКОтгрузкеОстатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке
		|ПОМЕСТИТЬ ВТТоварыКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОтгрузки В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)) КАК ТоварыКОтгрузкеОстатки
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ЕстьПравоДоступаРегистрОтгрузкаУслуг") 
		И СтруктураПараметров.ЕстьПравоДоступаРегистрОтгрузкаУслуг 
		И СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ДокументОтгрузки,
		|	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
		|	ЗаказыКлиентовОстатки.Склад КАК Склад,
		|	ЗаказыКлиентовОстатки.Серия КАК Серия,
		|	ЗаказыКлиентовОстатки.ЗаказаноПриход КАК КОтгрузке,
		|	0 КАК Собирается,
		|	0 КАК Собрано,
		|	ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток КАК Оформить,
		|	ЗаказыКлиентовОстатки.КОформлениюРасход КАК Оформлено,
		|	0 КАК Отгрузить,
		|	0 КАК Отгружено,
		|	ЛОЖЬ КАК ОрдернаяСхемаПриОтгрузке
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ЗаказКлиента В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)
		|			И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)) 
		|		)КАК ЗаказыКлиентовОстатки
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ЕстьПравоДоступаРегистрОтгрузкаУслуг") 
		И СтруктураПараметров.ЕстьПравоДоступаРегистрОтгрузкаУслуг 
		И СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыНаВнутреннееПотребление" Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.Характеристика КАК Характеристика,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад КАК Склад,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.Серия КАК Серия,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказаноПриход КАК КОтгрузке,
		|	0 КАК Собирается,
		|	0 КАК Собрано,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюКонечныйОстаток КАК Оформить,
		|	ЗаказыНаВнутреннееПотреблениеОстатки.КОформлениюРасход КАК Оформлено,
		|	0 КАК Отгрузить,
		|	0 КАК Отгружено,
		|	ЛОЖЬ КАК ОрдернаяСхемаПриОтгрузке
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ЗаказНаВнутреннееПотребление В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)
		|			И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		)КАК ЗаказыНаВнутреннееПотреблениеОстатки
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;

	КоличествоЗапросов = МассивТекстовЗапроса.Количество();
	Если КоличествоЗапросов Тогда
		Пока КоличествоЗапросов > 1 Цикл
			КоличествоЗапросов = КоличествоЗапросов - 1;
			МассивТекстовЗапроса[КоличествоЗапросов] = СтрЗаменить(МассивТекстовЗапроса[КоличествоЗапросов], "РАЗРЕШЕННЫЕ", "");
		КонецЦикла;
		
		ТекстЗамены = СтрСоединить(МассивТекстовЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);

		ТекстЗапроса = "
			|//////////////////////////////////////////////////////
			|&ТекстЗамены;";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены", ТекстЗамены);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено(ИмяТаблицы,СтруктураПараметров, ТекстыЗапроса)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(&ИмяПоляСумма) КАК СуммаСНДС,
	|	ДокументТовары.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ &СкладРасположение
	|	КОНЕЦ КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|,&ВТТоварыРаспоряженияОтгружено
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ВтДокументы.Проведен
	|	И НЕ ДокументТовары.Ссылка.Статус В (&МассивСтатусовБезОтгрузки)
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Серия,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ &СкладРасположение
	|	КОНЕЦ,
	|	ВтДокументы.ДокументСсылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСклад);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Склад");
	КонецЕсли;
	Если (ИмяТаблицы = "Документ.ЗаказКлиента"
			Или ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента")
		И (ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг)
			Или ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровХранителю)) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ВТТоварыРаспоряженияОтгружено", "ПОМЕСТИТЬ ВТПредварительноТоварыРаспоряженияОтгружено");
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	СУММА(ДокументТовары.Количество),
			|	СУММА(ДокументТовары.СуммаСНДС),
			|	ДокументТовары.Серия,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказКлиента)
			|ГДЕ
			|	ДокументТовары.Ссылка.Проведен
			|	И ДокументТовары.КодСтроки = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	ДокументТовары.Упаковка,
			|	ДокументТовары.Серия,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка";
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровХранителю) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	СУММА(ДокументТовары.Количество),
			|	СУММА(ДокументТовары.Сумма),
			|	ДокументТовары.Серия,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|ИЗ
			|	Документ.ПередачаТоваровХранителю.Товары КАК ДокументТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказКлиента)
			|ГДЕ
			|	ДокументТовары.Ссылка.Проведен
			|	И ДокументТовары.КодСтроки = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	ДокументТовары.Упаковка,
			|	ДокументТовары.Серия,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ";";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыРаспоряжения.Номенклатура КАК Номенклатура,
		|	ТоварыРаспоряжения.Характеристика КАК Характеристика,
		|	СУММА(ТоварыРаспоряжения.Количество) КАК Количество,
		|	СУММА(ТоварыРаспоряжения.СуммаСНДС) КАК СуммаСНДС,
		|	ТоварыРаспоряжения.Серия КАК Серия,
		|	ТоварыРаспоряжения.Склад КАК Склад,
		|	ТоварыРаспоряжения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	ВТПредварительноТоварыРаспоряженияОтгружено КАК ТоварыРаспоряжения
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРаспоряжения.Номенклатура,
		|	ТоварыРаспоряжения.Характеристика,
		|	ТоварыРаспоряжения.Серия,
		|	ТоварыРаспоряжения.Склад,
		|	ТоварыРаспоряжения.Ссылка;
		|";
	//++ НЕ УТ
	
	//++ Устарело_Переработка24
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПереработчику"
		И ПравоДоступа("Чтение", Метаданные.Документы.ПередачаСырьяПереработчику) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ВТТоварыРаспоряженияОтгружено", "ПОМЕСТИТЬ ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(ДокументТовары.Сумма),
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ПередачаСырьяПереработчику.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказПереработчику)
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка;";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыРаспоряжения.Номенклатура КАК Номенклатура,
		|	ТоварыРаспоряжения.Характеристика КАК Характеристика,
		|	СУММА(ТоварыРаспоряжения.Количество) КАК Количество,
		|	СУММА(ТоварыРаспоряжения.СуммаСНДС) КАК СуммаСНДС,
		|	ТоварыРаспоряжения.Серия КАК Серия,
		|	ТоварыРаспоряжения.Склад КАК Склад,
		|	ТоварыРаспоряжения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	ВТПредварительноТоварыРаспоряженияОтгружено КАК ТоварыРаспоряжения
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРаспоряжения.Номенклатура,
		|	ТоварыРаспоряжения.Характеристика,
		|	ТоварыРаспоряжения.Серия,
		|	ТоварыРаспоряжения.Склад,
		|	ТоварыРаспоряжения.Ссылка;
		|";
	//-- Устарело_Переработка24
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПереработчику2_5"
			И ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровХранителю) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ВТТоварыРаспоряженияОтгружено", "ПОМЕСТИТЬ ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		//++ НЕ УТКА
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	0,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|	ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка.ЗаказПереработчику
		|
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И НЕ ДокументТовары.Отменено
		|	И ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		//-- НЕ УТКА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(ДокументТовары.Сумма),
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ПередачаТоваровХранителю.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказКлиента)
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|;";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыРаспоряжения.Номенклатура КАК Номенклатура,
		|	ТоварыРаспоряжения.Характеристика КАК Характеристика,
		|	СУММА(ТоварыРаспоряжения.Количество) КАК Количество,
		|	СУММА(ТоварыРаспоряжения.СуммаСНДС) КАК СуммаСНДС,
		|	ТоварыРаспоряжения.Серия КАК Серия,
		|	ТоварыРаспоряжения.Склад КАК Склад,
		|	ТоварыРаспоряжения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	ВТПредварительноТоварыРаспоряженияОтгружено КАК ТоварыРаспоряжения
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРаспоряжения.Номенклатура,
		|	ТоварыРаспоряжения.Характеристика,
		|	ТоварыРаспоряжения.Серия,
		|	ТоварыРаспоряжения.Склад,
		|	ТоварыРаспоряжения.Ссылка;
		|";
	//++ НЕ УТКА
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказДавальца2_5"
		И ПравоДоступа("Чтение", Метаданные.Документы.ОтчетДавальцу2_5) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ВТТоварыРаспоряженияОтгружено", "ПОМЕСТИТЬ ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(ДокументТовары.СуммаСНДС),
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.Продукция КАК ДокументТовары
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|	ПО ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказДавальца
		|
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|;";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыРаспоряжения.Номенклатура КАК Номенклатура,
		|	ТоварыРаспоряжения.Характеристика КАК Характеристика,
		|	СУММА(ТоварыРаспоряжения.Количество) КАК Количество,
		|	СУММА(ТоварыРаспоряжения.СуммаСНДС) КАК СуммаСНДС,
		|	ТоварыРаспоряжения.Серия КАК Серия,
		|	ТоварыРаспоряжения.Склад КАК Склад,
		|	ТоварыРаспоряжения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	ВТПредварительноТоварыРаспоряженияОтгружено КАК ТоварыРаспоряжения
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРаспоряжения.Номенклатура,
		|	ТоварыРаспоряжения.Характеристика,
		|	ТоварыРаспоряжения.Серия,
		|	ТоварыРаспоряжения.Склад,
		|	ТоварыРаспоряжения.Ссылка;
		|";
	//-- НЕ УТКА

	//-- НЕ УТ
		
	ИначеЕсли Не ИмяТаблицы = "Документ.ЗаказНаВнутреннееПотребление"
		//++ НЕ УТКА
		И Не ИмяТаблицы = "Документ.ЗаказНаРемонт"
		//-- НЕ УТКА
		И Не СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки Тогда
		
		ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузке.Номенклатура     КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика   КАК Характеристика,
		|	ТоварыКОтгрузке.Серия            КАК Серия,
		|	ТоварыКОтгрузке.Склад            КАК Склад,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК Ссылка,
		|	ТоварыКОтгрузке.КОтгрузкеПриход КАК Количество,
		|	0 КАК СуммаСНДС
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(,,,
		|		ДокументОтгрузки В(
		|			ВЫБРАТЬ
		|				ВтДокументы.ДокументСсылка
		|			ИЗ
		|				ВтДокументы КАК ВтДокументы)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.КОтгрузкеПриход > 0
		|;
		|";
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ВТТоварыРаспоряженияОтгружено", "ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено");
		ТекстЗапроса = ТекстЗапроса + ";";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено(ИмяТаблицы,СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(&ИмяПоляСумма) КАК СуммаСНДС,
	|	ДокументТовары.Серия КАК Серия,
	|	&СкладРасположение КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|	И &ДопУсловия
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Серия,
	|	&СкладРасположение,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСклад);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Склад");
	КонецЕсли;
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	ИмяПоляНакладнаяПоЗаказам = СтруктураПараметров.ИмяПоляНакладнаяПоЗаказам;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "И НЕ ДокументТовары.Ссылка." + ИмяПоляНакладнаяПоЗаказам);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтгрузка(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтгрузка") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтгрузка;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияОтгружено.Ссылка КАК Документ,
	|	ВТТоварыКОтгрузке.Склад КАК Склад,
	|	ВТТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ВТТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияОтгружено.СуммаСНДС КАК СуммаСНДС,
	|	ВТТоварыРаспоряженияОтгружено.Серия КАК Серия,
	|	ВТТоварыКОтгрузке.КОтгрузке КАК КОтгрузке,
	|	ВТТоварыКОтгрузке.Собирается КАК Собирается,
	|	ВТТоварыКОтгрузке.Собрано КАК Собрано,
	|	ВТТоварыКОтгрузке.Оформить КАК Оформить,
	|	ВТТоварыКОтгрузке.Оформлено КАК Оформлено,
	|	ВТТоварыКОтгрузке.Отгрузить КАК Отгрузить,
	|	ВТТоварыКОтгрузке.Отгружено КАК Отгружено,
	|	ВТТоварыКОтгрузке.ОрдернаяСхемаПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке
	|ИЗ
	|	ВТТоварыКОтгрузке КАК ВТТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыРаспоряженияОтгружено КАК ВТТоварыРаспоряженияОтгружено
	|		ПО ВТТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыРаспоряженияОтгружено.Ссылка
	|			И ВТТоварыКОтгрузке.Номенклатура = ВТТоварыРаспоряженияОтгружено.Номенклатура
	|			И ВТТоварыКОтгрузке.Характеристика = ВТТоварыРаспоряженияОтгружено.Характеристика
	|			И ВТТоварыКОтгрузке.Склад = ВТТоварыРаспоряженияОтгружено.Склад
	|			И ВТТоварыКОтгрузке.Серия = ВТТоварыРаспоряженияОтгружено.Серия
	|ГДЕ
	|	НЕ ВТТоварыРаспоряженияОтгружено.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыКОтгрузке.Отгрузить <> 0
	|			ИЛИ ВТТоварыКОтгрузке.Оформить <> 0)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриОтгрузке)
	|ПО
	|	Документ,
	|	Склад
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтгружено(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияОтгружено.Ссылка КАК Документ,
	|	ВТТоварыРаспоряженияОтгружено.Номенклатура КАК Номенклатура,
	|	ВТТоварыРаспоряженияОтгружено.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияОтгружено.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТТоварыРаспоряженияОтгружено.Количество КАК Количество,
	|	ВТТоварыРаспоряженияОтгружено.СуммаСНДС КАК Сумма,
	|	ВТТоварыРаспоряженияОтгружено.Серия КАК Серия
	|ИЗ
	|	ВТТоварыРаспоряженияОтгружено КАК ВТТоварыРаспоряженияОтгружено
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКОтгрузке КАК ВТТоварыКОтгрузке
	|		ПО (ВТТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыРаспоряженияОтгружено.Ссылка)
	|			И (ВТТоварыКОтгрузке.Номенклатура = ВТТоварыРаспоряженияОтгружено.Номенклатура)
	|			И (ВТТоварыКОтгрузке.Характеристика = ВТТоварыРаспоряженияОтгружено.Характеристика)
	|			И (ВТТоварыКОтгрузке.Склад = ВТТоварыРаспоряженияОтгружено.Склад)
	|			И (ВТТоварыКОтгрузке.Серия = ВТТоварыРаспоряженияОтгружено.Серия)
	|ГДЕ
	|	(ВТТоварыКОтгрузке.Отгрузить = 0
	|	И ВТТоварыКОтгрузке.Оформить = 0)
	|		ИЛИ ВТТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыПоступление(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыПоступление;
	КонецЕсли;
	
	ТекстЗапроса  = "";
	ТекстыЗапроса = Новый Массив;
	
	Если СтруктураПараметров.ЕстьПравоНаТаблицуПоступления Тогда
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад КАК Склад,
		|	ЛОЖЬ КАК РаздельнаяЗакупка,
		|	0 КАК КПоступлению,
		|	ТоварыКПоступлению.ПринимаетсяКонечныйОстаток КАК Принимается,
		|	ТоварыКПоступлению.КОформлениюОрдеровРасход КАК Принято,
		|	0 КАК Оформить,
		|	0 КАК Оформлено,
		|	ТоварыКПоступлению.КОформлениюОрдеровКонечныйОстаток КАК Принять,
		|	ТоварыКПоступлению.КОформлениюОрдеровРасход КАК Поступило
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
		|			,,,,
		|			ДокументПоступления В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)
		|			И ХозяйственнаяОперация НЕ В (&СписокХозоперацийРаздельнойЗакупки)) КАК ТоварыКПоступлению
		|");
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ //При операциях раздельной закупки вместо информации по ордеру, выводится информации об оформлении документа Поступление товаров
		|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад КАК Склад,
		|	ИСТИНА КАК РаздельнаяЗакупка,
		|	0 КАК КПоступлению,
		|	0 КАК Принимается,
		|	ТоварыКПоступлению.КОформлениюПоступленийПоРаспоряжениюРасход КАК Принято,
		|	0 КАК Оформить,
		|	0 КАК Оформлено,
		|	ТоварыКПоступлению.КОформлениюПоступленийПоРаспоряжениюКонечныйОстаток КАК Принять,
		|	ТоварыКПоступлению.КОформлениюПоступленийПоРаспоряжениюРасход КАК Поступило
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
		|			,,,,
		|			ДокументПоступления В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)
		|			И ХозяйственнаяОперация В (&СписокХозоперацийРаздельнойЗакупки)) КАК ТоварыКПоступлению
		|");
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПравоДоступаЗаказыПоставщикам Тогда
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЗаказыПоставщикам.ЗаказПоставщику            КАК ДокументПоступления,
		|	ЗаказыПоставщикам.Номенклатура               КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика             КАК Характеристика,
		|	ЗаказыПоставщикам.Склад                      КАК Склад,
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикам.ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику
		|			И ВЫРАЗИТЬ(ЗаказыПоставщикам.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация В (&СписокХозоперацийРаздельнойЗакупки)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                        КАК РаздельнаяЗакупка,
		|	ВЫБОР
		//++ НЕ УТ
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ЗаказыПоставщикам.КодСтроки = 0
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			ТОГДА ЗаказыПоставщикам.КПоступлениюПриход
		//-- НЕ УТ
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыПоставщикам.КОформлениюПриход
		|	КОНЕЦ                                        КАК КПоступлению,
		|	0                                            КАК Принимается,
		|	0                                            КАК Принято,
		|	ВЫБОР
		//++ НЕ УТ
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			ТОГДА ЗаказыПоставщикам.КПоступлениюКонечныйОстаток
		//-- НЕ УТ
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыПоставщикам.КОформлениюКонечныйОстаток
		|	КОНЕЦ                                        КАК Оформить,
		|	ВЫБОР
		//++ НЕ УТ
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			ТОГДА ЗаказыПоставщикам.КПоступлениюРасход
		//-- НЕ УТ
		|		КОГДА ИСТИНА
		|			ТОГДА ЗаказыПоставщикам.КОформлениюРасход
		|	КОНЕЦ                                        КАК Оформлено,
		|	0                                            КАК Принять,
		|	0                                            КАК Поступило
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
		|				,,,,
		//++ НЕ УТ
		|				ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику2_5)
		|						ТОГДА Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И
		//-- НЕ УТ
		|				ЗаказПоставщику В
		|					(ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ЗаказыПоставщикам
		|");
		
	КонецЕсли;
	
	Если Не ТекстыЗапроса.Количество() = 0 Тогда
		
		ТекстЗапроса =
		"
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад КАК Склад,
		|	МАКСИМУМ(ТоварыКПоступлению.РаздельнаяЗакупка) КАК РаздельнаяЗакупка,
		|	СУММА(ТоварыКПоступлению.КПоступлению) КАК КПоступлению,
		|	СУММА(ТоварыКПоступлению.Принимается) КАК Принимается,
		|	СУММА(ТоварыКПоступлению.Принято) КАК Принято,
		|	СУММА(ТоварыКПоступлению.Оформить) КАК Оформить,
		|	СУММА(ТоварыКПоступлению.Оформлено) КАК Оформлено,
		|	СУММА(ТоварыКПоступлению.Принять) КАК Принять,
		|	СУММА(ТоварыКПоступлению.Поступило) КАК Поступило,
		|	ВЫБОР
		|		КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ
		|	&ВложенныйЗапрос КАК ТоварыКПоступлению
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Склад,
		|	ВЫБОР
		|		КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВложенныйЗапрос", "(" + СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ(ИмяТаблицы,СтруктураПараметров,ТекстыЗапроса)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(&ИмяПоляСумма) КАК СуммаСНДС,
	|	&СкладРасположение КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступлениеБезОбъединения
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	И &ДопУсловия
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	&СкладРасположение,
	|	ВтДокументы.ДокументСсылка
	|";
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	СУММА(ДокументТовары.Количество),
			|	СУММА(ДокументТовары.СуммаСНДС),
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг.Товары КАК ДокументТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказПоставщику)
			|ГДЕ
			|	ДокументТовары.Ссылка.Проведен
			|	И ДокументТовары.КодСтроки = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	ДокументТовары.Упаковка,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|";
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПриемкаТоваровНаХранение) Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	СУММА(ДокументТовары.Количество),
			|	СУММА(ДокументТовары.Сумма),
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|ИЗ
			|	Документ.ПриемкаТоваровНаХранение.Товары КАК ДокументТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказПоставщику)
			|ГДЕ
			|	ДокументТовары.Ссылка.Проведен
			|	И ДокументТовары.КодСтроки = 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	ДокументТовары.Упаковка,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|";
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.АктОРасхожденияхПослеПриемки) Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	СУММА(ДокументТовары.Количество - ДокументТовары.КоличествоПоДокументу),
			|	СУММА(ДокументТовары.Сумма - ДокументТовары.СуммаПоДокументу),
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|ИЗ
			|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК ДокументТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказПоставщику)
			|ГДЕ
			|	ДокументТовары.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Номенклатура,
			|	ДокументТовары.Характеристика,
			|	ДокументТовары.Упаковка,
			|	ДокументТовары.Склад,
			|	ВтДокументы.ДокументСсылка
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыПоступление);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Склад");
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "
			|	И ДокументТовары.Ссылка.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))");
	//++ НЕ УТ
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПереработчику2_5"
		//++ Устарело_Переработка24
		Или ИмяТаблицы = "Документ.ЗаказПереработчику"
		//-- Устарело_Переработка24
		Или Ложь Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "
			|	И ДокументТовары.Ссылка.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))");
	//-- НЕ УТ
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТТоварыРаспоряженияПоступлениеБезОбъединения");

	ТекстЗапроса = "
		   	|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	       	|	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Номенклатура КАК Номенклатура,
	       	|	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Характеристика КАК Характеристика,
		    |	СУММА(ВТТоварыРаспоряженияПоступлениеБезОбъединения.Количество) КАК Количество,
		    |	СУММА(ВТТоварыРаспоряженияПоступлениеБезОбъединения.СуммаСНДС) КАК СуммаСНДС,
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Склад КАК Склад,
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Ссылка КАК Ссылка
		    |ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
		    |ИЗ
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения КАК ВТТоварыРаспоряженияПоступлениеБезОбъединения
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Номенклатура,
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Характеристика,
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Склад,
		    |	ВТТоварыРаспоряженияПоступлениеБезОбъединения.Ссылка
			|;
			|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная(ИмяТаблицы,СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(&ИмяПоляСумма) КАК СуммаСНДС,
	|	&СкладРасположение КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|	И &ДопУсловия
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	&СкладРасположение,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыПоступление);
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Склад");
	КонецЕсли;
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	ИмяПоляНакладнаяПоЗаказам = СтруктураПараметров.ИмяПоляНакладнаяПоЗаказам;
	Если ЗначениеЗаполнено(ИмяПоляНакладнаяПоЗаказам) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "И НЕ ДокументТовары.Ссылка." + ИмяПоляНакладнаяПоЗаказам);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "");
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказано(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаЗаказано") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаЗаказано;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(&ИмяПоляСумма) КАК Сумма,
	|	&СкладРасположение КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Документ
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	И &ДопУсловия
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Упаковка,
	|	&СкладРасположение,
	|	ВтДокументы.ДокументСсылка
	|ИТОГИ ПО
	|	Документ
	|";
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыПоступление);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкладРасположение", "ДокументТовары.Склад");
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "И НЕ ДокументТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ДопУсловия", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступление(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПоступление;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияПоступление.Ссылка КАК Документ,
	|	ВТТоварыПоступление.Склад КАК Склад,
	|	ВТТоварыПоступление.Номенклатура КАК Номенклатура,
	|	ВТТоварыПоступление.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияПоступление.СуммаСНДС КАК СуммаСНДС,
	|	ВТТоварыПоступление.КПоступлению КАК КПоступлению,
	|	ВТТоварыПоступление.Принимается КАК Принимается,
	|	ВТТоварыПоступление.Принято КАК Принято,
	|	ВТТоварыПоступление.Оформить КАК Оформить,
	|	ВТТоварыПоступление.Оформлено КАК Оформлено,
	|	ВТТоварыПоступление.Принять КАК Принять,
	|	ВТТоварыПоступление.Поступило КАК Поступило,
	|	ВТТоварыПоступление.ОрдернаяСхемаПриПоступлении КАК ОрдернаяСхемаПриПоступлении,
	|	ВТТоварыПоступление.РаздельнаяЗакупка КАК РаздельнаяЗакупка
	|ИЗ
	|	ВТТоварыПоступление КАК ВТТоварыПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыРаспоряженияПоступление КАК ВТТоварыРаспоряженияПоступление
	|		ПО ВТТоварыПоступление.ДокументПоступления = ВТТоварыРаспоряженияПоступление.Ссылка
	|			И ВТТоварыПоступление.Номенклатура = ВТТоварыРаспоряженияПоступление.Номенклатура
	|			И ВТТоварыПоступление.Характеристика = ВТТоварыРаспоряженияПоступление.Характеристика
	|			И ВТТоварыПоступление.Склад = ВТТоварыРаспоряженияПоступление.Склад
	|ГДЕ
	|	НЕ ВТТоварыРаспоряженияПоступление.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыПоступление.Принять <> 0
	|			ИЛИ ВТТоварыПоступление.Оформить <> 0)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриПоступлении),
	|	МАКСИМУМ(РаздельнаяЗакупка)
	|ПО
	|	Документ,
	|	Склад
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступило(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПоступило") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПоступило;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияПоступление.Ссылка КАК Документ,
	|	ВТТоварыРаспоряженияПоступление.Номенклатура КАК Номенклатура,
	|	ВТТоварыРаспоряженияПоступление.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияПоступление.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТТоварыРаспоряженияПоступление.Количество КАК Количество,
	|	ВТТоварыРаспоряженияПоступление.СуммаСНДС КАК Сумма
	|ИЗ
	|	ВТТоварыРаспоряженияПоступление КАК ВТТоварыРаспоряженияПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыПоступление КАК ВТТоварыПоступление
	|		ПО (ВТТоварыПоступление.ДокументПоступления = ВТТоварыРаспоряженияПоступление.Ссылка)
	|			И (ВТТоварыПоступление.Номенклатура = ВТТоварыРаспоряженияПоступление.Номенклатура)
	|			И (ВТТоварыПоступление.Характеристика = ВТТоварыРаспоряженияПоступление.Характеристика)
	|			И (ВТТоварыПоступление.Склад = ВТТоварыРаспоряженияПоступление.Склад)
	|ГДЕ
	|	(ВТТоварыПоступление.Принять = 0
	|	И ВТТоварыПоступление.Оформить = 0)
	|		ИЛИ ВТТоварыПоступление.ДокументПоступления ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтмененоОтгрузка(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтмененоОтгрузка") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтмененоОтгрузка;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	&ИмяПоляПричинаОтмены КАК ПричинаОтмены,
	|	&ИмяПоляСумма КАК Сумма
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляПричинаОтмены", ?(СтруктураПараметров.ЕстьПричиныОтменыОтгрузки, "ДокументТовары.ПричинаОтмены", """"""));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаОтмененоПоступление(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтмененоПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтмененоПоступление;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	&ИмяПоляПричинаОтмены КАК ПричинаОтмены,
	|	&ИмяПоляСумма КАК Сумма
	|ИЗ
	|	&ИмяТаблицы КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы + "." + СтруктураПараметров.ИмяТЧТоварыПоступление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляПричинаОтмены", ?(СтруктураПараметров.ЕстьПричиныОтменыПоступления, "ДокументТовары.ПричинаОтмены", """"""));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТТоварыКВозврату(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыКОтгрузке") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыКОтгрузке;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаявкиОстатки.Заявка КАК Заявка,
	|	ЗаявкиОстатки.Номенклатура КАК Номенклатура,
	|	ЗаявкиОстатки.Характеристика КАК Характеристика,
	|	ЗаявкиОстатки.Склад КАК Склад,
	|	СУММА(ЗаявкиОстатки.КОформлению) КАК КОформлению,
	|	СУММА(ЗаявкиОстатки.Принимается) КАК Принимается,
	|	СУММА(ЗаявкиОстатки.Принято) КАК Принято,
	|	СУММА(ЗаявкиОстатки.Оформить) КАК Оформить,
	|	СУММА(ЗаявкиОстатки.Оформлено) КАК Оформлено,
	|	СУММА(ЗаявкиОстатки.Принять) КАК Принять,
	|	СУММА(ЗаявкиОстатки.Поступило) КАК Поступило,
	|	ВЫБОР
	|		КОГДА ЗаявкиОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &ТекущаяДата >= ЗаявкиОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении
	|ПОМЕСТИТЬ ВТТоварыКВозврату
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКПоступлению.ДокументПоступления КАК Заявка,
	|		ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|		ТоварыКПоступлению.Характеристика КАК Характеристика,
	|		ТоварыКПоступлению.Склад КАК Склад,
	|		0 КАК КОформлению,
	|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток КАК Принимается,
	|		ТоварыКПоступлению.КОформлениюОрдеровРасход КАК Принято,
	|		0 КАК Оформить,
	|		0 КАК Оформлено,
	|		ТоварыКПоступлению.КОформлениюОрдеровКонечныйОстаток КАК Принять,
	|		ТоварыКПоступлению.КОформлениюОрдеровРасход КАК Поступило
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
	|				,
	|				,
	|				,
	|				,
	|				ДокументПоступления В
	|					(ВЫБРАТЬ
	|						ВтДокументы.ДокументСсылка
	|					ИЗ
	|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТоварыКВозврату.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
	|		ТоварыКВозврату.Номенклатура КАК Номенклатура,
	|		ТоварыКВозврату.Характеристика КАК Характеристика,
	|		ТоварыКВозврату.ЗаявкаНаВозвратТоваровОтКлиента.Склад КАК Склад,
	|		ТоварыКВозврату.ЗаявленоПриход КАК КОформлению,
	|		0,
	|		0,
	|		ТоварыКВозврату.КОформлениюКонечныйОстаток КАК Оформить,
	|		ТоварыКВозврату.КОформлениюРасход КАК Оформлено,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ЗаявкаНаВозвратТоваровОтКлиента В
	|				(ВЫБРАТЬ
	|					ВтДокументы.ДокументСсылка
	|				ИЗ
	|					ВтДокументы КАК ВтДокументы)) КАК ТоварыКВозврату) КАК ЗаявкиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиОстатки.Заявка,
	|	ЗаявкиОстатки.Номенклатура,
	|	ЗаявкиОстатки.Характеристика,
	|	ЗаявкиОстатки.Склад,
	|	ВЫБОР
	|		КОГДА ЗаявкиОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &ТекущаяДата >= ЗаявкиОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТВозвращаемыеТовары(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТВозвращаемыеТовары") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТВозвращаемыеТовары;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.НоменклатураОприходование
	|		ИНАЧЕ ДокументТовары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ДокументТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.СуммаСНДС) КАК СуммаСНДС,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТВозвращаемыеТовары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	И НЕ ДокументТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована), 
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.НоменклатураОприходование
	|		ИНАЧЕ ДокументТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ДокументТовары.Характеристика
	|	КОНЕЦ,
	|	ДокументТовары.Порча,
	|	ДокументТовары.Ссылка.ХозяйственнаяОперация,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	Возврат ТекстЗапроса
	
	
КонецФункции

Функция ТекстЗапросаТаблицаВозвратТоваров(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаВозвратТоваров") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаВозвратТоваров;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыКВозврату.Заявка КАК Документ,
	|	ВТТоварыКВозврату.Склад КАК Склад,
	|	ВТТоварыКВозврату.Принимается КАК Принимается,
	|	ВТТоварыКВозврату.Принято КАК Принято,
	|	ВТТоварыКВозврату.КОформлению КАК КОформлению,
	|	ВТТоварыКВозврату.Оформлено КАК Оформлено,
	|	ВТТоварыКВозврату.Оформить КАК Оформить,
	|	ВТТоварыКВозврату.Принять КАК Принять,
	|	ВТТоварыКВозврату.Поступило КАК Поступило,
	|	ВТТоварыКВозврату.ОрдернаяСхемаПриПоступлении КАК ОрдернаяСхемаПриПоступлении,
	|	ВТТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ВТТоварыКВозврату.Характеристика КАК Характеристика
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвращаемыеТовары КАК ВТВозвращаемыеТовары
	|		ПО ВТТоварыКВозврату.Заявка = ВТВозвращаемыеТовары.Ссылка
	|			И ВТТоварыКВозврату.Номенклатура = ВТВозвращаемыеТовары.Номенклатура
	|			И ВТТоварыКВозврату.Характеристика = ВТВозвращаемыеТовары.Характеристика
	|ГДЕ
	|	НЕ ВТВозвращаемыеТовары.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыКВозврату.Принять <> 0
	|			ИЛИ ВТТоварыКВозврату.Оформить <> 0
	|			ИЛИ ВТТоварыКВозврату.Оформлено <> ВТТоварыКВозврату.Поступило)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриПоступлении)
	|ПО
	|	Документ,
	|	Склад
	|;";
	
	Возврат ТекстЗапроса
	
	
КонецФункции

Функция ТекстЗапросаТаблицаВозвращеноТоваров(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаВозвращеноТоваров") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаВозвращеноТоваров;
	КонецЕсли;
	
	ТекстЗапроса =" 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВозвращаемыеТовары.Ссылка КАК Документ,
	|	ВТВозвращаемыеТовары.Номенклатура КАК Номенклатура,
	|	ВТВозвращаемыеТовары.Характеристика КАК Характеристика,
	|	ВТВозвращаемыеТовары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТВозвращаемыеТовары.Количество КАК Количество,
	|	ВТВозвращаемыеТовары.СуммаСНДС КАК Сумма
	|ИЗ
	|	ВТВозвращаемыеТовары КАК ВТВозвращаемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ПО (ВТТоварыКВозврату.Заявка = ВТВозвращаемыеТовары.Ссылка)
	|			И (ВТТоварыКВозврату.Номенклатура = ВТВозвращаемыеТовары.Номенклатура)
	|			И (ВТТоварыКВозврату.Характеристика = ВТВозвращаемыеТовары.Характеристика)
	|ГДЕ
	|	(ВТТоварыКВозврату.Принять = 0
	|	И ВТТоварыКВозврату.Оформить = 0
	|	И ВТТоварыКВозврату.Оформлено = ВТТоварыКВозврату.Поступило)
	|		ИЛИ ВТТоварыКВозврату.Заявка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

//++ НЕ УТ

//++ НЕ УТКА

Функция ТекстЗапросаВТПродукцияПоЗаказуДавальца()
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ
	|	ЗаказДавальца2_5Продукция.Номенклатура КАК Номенклатура,
	|	ЗаказДавальца2_5Продукция.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЗаказДавальца2_5Продукция.Упаковка) КАК Упаковка,
	|	СУММА(ЗаказДавальца2_5Продукция.Количество) КАК Количество,
	|	СУММА(ЗаказДавальца2_5Продукция.СуммаСНДС) КАК Сумма,
	|	ЗаказДавальца2_5Продукция.Ссылка КАК Ссылка,
	|	МИНИМУМ(ЗаказДавальца2_5Продукция.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПродукцияПоЗаказуДавальца
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ЗаказДавальца2_5Продукция
	|ГДЕ
	|	ЗаказДавальца2_5Продукция.Ссылка В(&МассивДокументов)
	|	И НЕ ЗаказДавальца2_5Продукция.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказДавальца2_5Продукция.Номенклатура,
	|	ЗаказДавальца2_5Продукция.Характеристика,
	|	ЗаказДавальца2_5Продукция.Ссылка
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказДавальцаПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Упаковка) КАК Упаковка,
	|	СУММА(ЗаказДавальцаПродукция.Количество) КАК Количество,
	|	СУММА(ЗаказДавальцаПродукция.СуммаСНДС) КАК Сумма,
	|	ЗаказДавальцаПродукция.Ссылка КАК Ссылка,
	|	МИНИМУМ(ЗаказДавальцаПродукция.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|ГДЕ
	|	ЗаказДавальцаПродукция.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказДавальцаПродукция.Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика,
	|	ЗаказДавальцаПродукция.Ссылка
	//-- Устарело_Переработка24
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика
	|;";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению()
	
	ТекстЗапроса = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыКлиентовОстатки.ЗаказКлиента                                                       КАК Документ,
	|	ЗаказыКлиентовОстатки.Номенклатура                                                       КАК Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика                                                     КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ                                                                                    КАК Упаковка,
	|	ЗаказыКлиентовОстатки.КОформлениюОстаток * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиентовОстатки.КОформлениюОстаток = ВложенныйЗапрос.Количество
	|			ТОГДА ВложенныйЗапрос.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма
	|						/ ВложенныйЗапрос.Количество
	|						* ЗаказыКлиентовОстатки.КОформлениюОстаток КАК ЧИСЛО(31, 2))
	|	КОНЕЦ                                                                                    КАК Сумма,
	|	ВложенныйЗапрос.НомерСтроки                                                              КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, 
	|				(ЗаказКлиента, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ 
	|						ВТПродукцияПоЗаказуДавальца.Ссылка         КАК Ссылка,
	|						ВТПродукцияПоЗаказуДавальца.Номенклатура   КАК Номенклатура,
	|						ВТПродукцияПоЗаказуДавальца.Характеристика КАК Характеристика
	|					ИЗ
	|						ВТПродукцияПоЗаказуДавальца КАК ВТПродукцияПоЗаказуДавальца)
	|				И ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказДавальца2_5)) КАК ЗаказыКлиентовОстатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродукцияПоЗаказуДавальца КАК ВложенныйЗапрос
	|		ПО ЗаказыКлиентовОстатки.ЗаказКлиента   = ВложенныйЗапрос.Ссылка
	|		 И ЗаказыКлиентовОстатки.Номенклатура   = ВложенныйЗапрос.Номенклатура
	|		 И ЗаказыКлиентовОстатки.Характеристика = ВложенныйЗапрос.Характеристика
	|ГДЕ
	|	ЗаказыКлиентовОстатки.КОформлениюОстаток > 0
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УслугиДавальцуКОформлениюОстатки.ЗаказДавальца КАК Документ,
	|	УслугиДавальцуКОформлениюОстатки.Номенклатура КАК Номенклатура,
	|	УслугиДавальцуКОформлениюОстатки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	УслугиДавальцуКОформлениюОстатки.КОформлениюОстаток * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Количество,
	|	ВЫБОР
	|		КОГДА УслугиДавальцуКОформлениюОстатки.КОформлениюОстаток = ВложенныйЗапрос.Количество
	|			ТОГДА ВложенныйЗапрос.Сумма
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма
	|						/ ВложенныйЗапрос.Количество
	|						* УслугиДавальцуКОформлениюОстатки.КОформлениюОстаток КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК Сумма,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки(, 
	|				(ЗаказДавальца, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ 
	|						ВТПродукцияПоЗаказуДавальца.Ссылка КАК Ссылка,
	|						ВТПродукцияПоЗаказуДавальца.Номенклатура КАК Номенклатура,
	|						ВТПродукцияПоЗаказуДавальца.Характеристика КАК Характеристика
	|					ИЗ ВТПродукцияПоЗаказуДавальца КАК ВТПродукцияПоЗаказуДавальца)) КАК УслугиДавальцуКОформлениюОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродукцияПоЗаказуДавальца КАК ВложенныйЗапрос
	|		ПО УслугиДавальцуКОформлениюОстатки.ЗаказДавальца = ВложенныйЗапрос.Ссылка
	|			И УслугиДавальцуКОформлениюОстатки.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И УслугиДавальцуКОформлениюОстатки.Характеристика = ВложенныйЗапрос.Характеристика
	|ГДЕ
	|	УслугиДавальцуКОформлениюОстатки.КОформлениюОстаток > 0
	//-- Устарело_Переработка24
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|;";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТКА

Функция ТекстЗапросаТаблицаПродукцияКОформлениюВОтчетеПереработчику(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
	   И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПродукцияКОформлениюВОтчетеПереработчику") Тогда
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПродукцияКОформлениюВОтчетеПереработчику;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	//++ Устарело_Переработка24
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Распоряжение КАК Документ,
	|	Т.АналитикаУчетаНоменклатуры.Номенклатура.Представление КАК НоменклатураПредставление,
	|	Т.АналитикаУчетаНоменклатуры.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	Т.АналитикаУчетаНоменклатуры.Серия.Представление КАК СерияПредставление,
	|	Т.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Представление КАК Упаковка,
	|	Т.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Распоряжение В (&МассивДокументов)) КАК Т
	|ГДЕ
	|	Т.КоличествоОстаток > 0
	|ИТОГИ ПО
	|	Документ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	//-- Устарело_Переработка24
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСырьеУПереработчика(ТекстыЗапроса, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
	   И СтруктураДопЗапросов.Свойство("ТаблицаСырьеУПереработчика") Тогда
	   	
		ТекстЗапроса = СтруктураДопЗапросов.ТаблицаСырьеУПереработчика;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаСырьеУПереработчика");
		
		Возврат;
		
	КонецЕсли;

	ТекстЗапроса =  
	// 0
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.Переработчик,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЕдиницИзмерения > 1
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЕдиницИзмерения > 1
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ДокументТовары
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДокументы.ДокументСсылка КАК Документ,
	|		ТаблицаДокумент.Партнер КАК Переработчик,
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		МИНИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументТовары.Упаковка) КАК КоличествоЕдиницИзмерения
	|	ИЗ
	|		ВтДокументы КАК ВтДокументы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5 КАК ТаблицаДокумент
	|			ПО (ТаблицаДокумент.Ссылка = ВтДокументы.ДокументСсылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|			ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|				И НЕ ДокументТовары.Отменено
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтДокументы.ДокументСсылка,
	|		ТаблицаДокумент.Партнер,
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	//++ Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтДокументы.ДокументСсылка КАК Документ,
	|		ТаблицаДокумент.Партнер КАК Переработчик,
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		МИНИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументТовары.Упаковка) КАК КоличествоЕдиницИзмерения
	|	ИЗ
	|		ВтДокументы КАК ВтДокументы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаДокумент
	|			ПО (ТаблицаДокумент.Ссылка = ВтДокументы.ДокументСсылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Материалы КАК ДокументТовары
	|			ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|				И НЕ ДокументТовары.Отменено
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтДокументы.ДокументСсылка,
	|		ТаблицаДокумент.Партнер,
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	//-- Устарело_Переработка24
	|
	//++ НЕ УТКА
	
	//++ Устарело_Переработка24
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтДокументы.ДокументСсылка КАК Документ,
	|		ТаблицаДокумент.Партнер КАК Переработчик,
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		МИНИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументТовары.Упаковка) КАК КоличествоЕдиницИзмерения
	|	ИЗ
	|		ВтДокументы КАК ВтДокументы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаДокумент
	|			ПО (ТаблицаДокумент.Ссылка = ВтДокументы.ДокументСсылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|			ПО ТаблицаДокумент.Ссылка = ЭтапПроизводства.ЗаказПереработчику
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|			ПО ЭтапПроизводства.Ссылка = ДокументТовары.Ссылка
	|				И НЕ ДокументТовары.Отменено
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВтДокументы.ДокументСсылка,
	|		ТаблицаДокумент.Партнер,
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	//-- Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтДокументы.ДокументСсылка КАК Документ,
	|		ТаблицаДокумент.Партнер КАК Переработчик,
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		МИНИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументТовары.Упаковка) КАК КоличествоЕдиницИзмерения
	|	ИЗ
	|		ВтДокументы КАК ВтДокументы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5 КАК ТаблицаДокумент
	|			ПО (ТаблицаДокумент.Ссылка = ВтДокументы.ДокументСсылка)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|			ПО ТаблицаДокумент.Ссылка = ЭтапПроизводства.ЗаказПереработчику
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|			ПО ЭтапПроизводства.Ссылка = ДокументТовары.Ссылка
	|				И НЕ ДокументТовары.Отменено
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВтДокументы.ДокументСсылка,
	|		ТаблицаДокумент.Партнер,
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	//-- НЕ УТКА
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.Переработчик,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЕдиницИзмерения > 1
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоЕдиницИзмерения > 1
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВложенныйЗапрос.Упаковка",
		"ВложенныйЗапрос.Номенклатура"));
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_ДокументТовары");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Переработчик,
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	ДокументТовары КАК ДокументТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Переработчик,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_Товары");
	
	ТекстЗапроса = "
	// 2
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.КлючАналитики КАК КлючАналитики,
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(АналитикаНоменклатуры.МестоХранения КАК Справочник.Партнеры) КАК Переработчик
	|ПОМЕСТИТЬ АналитикаНоменклатуры
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|ГДЕ
	|	(АналитикаНоменклатуры.Номенклатура, АналитикаНоменклатуры.Характеристика, АналитикаНоменклатуры.МестоХранения) В
	|			(ВЫБРАТЬ
	|				ВТ_Товары.Номенклатура,
	|				ВТ_Товары.Характеристика,
	|				ВТ_Товары.Переработчик
	|			ИЗ
	|				ВТ_Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_АналитикаНоменклатуры");
	
	ТекстЗапроса = "
	// 3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
	|	АналитикаНоменклатуры.Переработчик КАК Переработчик,
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика КАК Характеристика,
	|	0 КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	АналитикаНоменклатуры КАК АналитикаНоменклатуры
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.Переработчик КАК Переработчик,
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(
	|			,
	|			АналитикаУчетаНоменклатуры В
	|				(ВЫБРАТЬ
	|					АналитикаНоменклатуры.КлючАналитики
	|				ИЗ
	|					АналитикаНоменклатуры)) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО (АналитикаНоменклатуры.КлючАналитики = ТаблицаОстатки.АналитикаУчетаНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТаблицаОстатки.Партнер КАК Переработчик,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Партнер) В
	|				(ВЫБРАТЬ
	|					ВТ_Товары.Номенклатура,
	|					ВТ_Товары.Характеристика,
	|					ВТ_Товары.Переработчик
	|				ИЗ
	|					ВТ_Товары)
	|			И ДокументПередачи ССЫЛКА Документ.ПередачаСырьяПереработчику) КАК ТаблицаОстатки
	//-- Устарело_Переработка24
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_ТаблицаОстатки");
	
	ТекстЗапроса = "
	// 4
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Переработчик,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	СУММА(ВложенныйЗапрос.Заказано - ВложенныйЗапрос.Оформлено) КАК Потребность
	|ПОМЕСТИТЬ ТаблицаПотребность
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ВТ_Товары.Переработчик КАК Переработчик,
	|		ВТ_Товары.Номенклатура КАК Номенклатура,
	|		ВТ_Товары.Характеристика КАК Характеристика,
	|		ЗаказМатериалов.Количество КАК Заказано,
	|		0 КАК Оформлено
	|	ИЗ
	|		ВТ_Товары КАК ВТ_Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами КАК ЗаказМатериалов
	|			ПО ЗаказМатериалов.Номенклатура = ВТ_Товары.Номенклатура
	|				И ЗаказМатериалов.Характеристика = ВТ_Товары.Характеристика
	|				И ЗаказМатериалов.Ссылка.Партнер = ВТ_Товары.Переработчик
	|				И ЗаказМатериалов.Ссылка.Проведен
	|				И ЗаказМатериалов.Ссылка.ГруппировкаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//++ Устарело_Переработка24
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Товары.Переработчик КАК Переработчик,
	|		ВТ_Товары.Номенклатура КАК Номенклатура,
	|		ВТ_Товары.Характеристика КАК Характеристика,
	|		ЗаказМатериалов.Количество КАК Заказано,
	|		0 КАК Оформлено
	|	ИЗ
	|		ВТ_Товары КАК ВТ_Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Материалы КАК ЗаказМатериалов
	|			ПО ЗаказМатериалов.Номенклатура = ВТ_Товары.Номенклатура
	|				И ЗаказМатериалов.Характеристика = ВТ_Товары.Характеристика
	|				И ЗаказМатериалов.Ссылка.Партнер = ВТ_Товары.Переработчик
	|				И ЗаказМатериалов.Ссылка.Проведен
	|				И ЗаказМатериалов.Ссылка.ГруппировкаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- Устарело_Переработка24
	
	//++ НЕ УТКА
	
	//++ Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Товары.Переработчик КАК Переработчик,
	|		ВТ_Товары.Номенклатура КАК Номенклатура,
	|		ВТ_Товары.Характеристика КАК Характеристика,
	|		ЗаказМатериалов.Количество КАК Заказано,
	|		0 КАК Оформлено
	|	ИЗ
	|		ВТ_Товары КАК ВТ_Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ДокЗаказПереработчику
	|			ПО ДокЗаказПереработчику.Партнер = ВТ_Товары.Переработчик
	|				И ДокЗаказПереработчику.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|				И ДокЗаказПереработчику.Проведен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДокЭтап
	|			ПО ДокЗаказПереработчику.Ссылка = ДокЭтап.ЗаказПереработчику
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЗаказМатериалов
	|			ПО ЗаказМатериалов.Ссылка = ДокЭтап.Ссылка
	|				И ЗаказМатериалов.Номенклатура = ВТ_Товары.Номенклатура
	|				И ЗаказМатериалов.Характеристика = ВТ_Товары.Характеристика
	|				И НЕ ЗаказМатериалов.Отменено
	//-- Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Товары.Переработчик КАК Переработчик,
	|		ВТ_Товары.Номенклатура КАК Номенклатура,
	|		ВТ_Товары.Характеристика КАК Характеристика,
	|		ЗаказМатериалов.Количество КАК Заказано,
	|		0 КАК Оформлено
	|	ИЗ
	|		ВТ_Товары КАК ВТ_Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5 КАК ДокЗаказПереработчику
	|			ПО ДокЗаказПереработчику.Партнер = ВТ_Товары.Переработчик
	|				И ДокЗаказПереработчику.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|				И ДокЗаказПереработчику.Проведен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДокЭтап
	|			ПО ДокЗаказПереработчику.Ссылка = ДокЭтап.ЗаказПереработчику
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЗаказМатериалов
	|			ПО ЗаказМатериалов.Ссылка = ДокЭтап.Ссылка
	|				И ЗаказМатериалов.Номенклатура = ВТ_Товары.Номенклатура
	|				И ЗаказМатериалов.Характеристика = ВТ_Товары.Характеристика
	|				И НЕ ЗаказМатериалов.Отменено
	//-- НЕ УТКА
	
	//++ Устарело_Переработка24
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Товары.Переработчик,
	|		ВТ_Товары.Номенклатура,
	|		ВТ_Товары.Характеристика,
	|		0,
	|		ОтчетПереработчикаМатериалы.Количество
	|	ИЗ
	|		ВТ_Товары КАК ВТ_Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика.Материалы КАК ОтчетПереработчикаМатериалы
	|			ПО ОтчетПереработчикаМатериалы.Номенклатура = ВТ_Товары.Номенклатура
	|				И ОтчетПереработчикаМатериалы.Характеристика = ВТ_Товары.Характеристика
	|				И ОтчетПереработчикаМатериалы.Ссылка.Партнер = ВТ_Товары.Переработчик
	|				И ОтчетПереработчикаМатериалы.Ссылка.Проведен
	|				И ОтчетПереработчикаМатериалы.Ссылка.ПоЗаказам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратСырья.АналитикаУчетаНоменклатуры.МестоХранения КАК Переработчик,
	|		ВозвратСырья.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ВозвратСырья.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		0 КАК Заказано,
	|		ВЫБОР ВозвратСырья.ВидДвижения
	|			КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВозвратСырья.Количество
	|			КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ВозвратСырья.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Оформлено
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеПереработчику КАК ВозвратСырья
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|			ПО ВозвратСырья.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|	ГДЕ
	|		ВозвратСырья.Регистратор ССЫЛКА Документ.ВозвратСырьяОтПереработчика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВозвратТары.Партнер КАК Переработчик,
	|		ВозвратТары.Номенклатура КАК Номенклатура,
	|		ВозвратТары.Характеристика КАК Характеристика,
	|		ЕСТЬNULL(-ВозвратТары.КоличествоРасход, 0) КАК Заказано,
	|		0 КАК Оформлено
	|	ИЗ
	|		РегистрНакопления.ПереданнаяВозвратнаяТара.Обороты(, , ,
	|			(Номенклатура, Характеристика, Партнер) В
	|				(ВЫБРАТЬ
	|					ВТ_Товары.Номенклатура,
	|					ВТ_Товары.Характеристика,
	|					ВТ_Товары.Переработчик
	|				ИЗ
	|					ВТ_Товары)
	|			И ДокументПередачи ССЫЛКА Документ.ПередачаСырьяПереработчику) КАК ВозвратТары
	//-- Устарело_Переработка24
	|
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Переработчик,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Переработчик,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_ТаблицаПотребность");
	
	ТекстЗапроса = "
	// 5
	|ВЫБРАТЬ
	|	ДокументТовары.Документ КАК Документ,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ДокументТовары.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ДокументТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ТаблицаОстатки.Количество, 0) * ДокументТовары.КоэффициентУпаковки КАК ВНаличии,
	|	ЕСТЬNULL(ТаблицаПотребность.Потребность, 0) * ДокументТовары.КоэффициентУпаковки КАК Потребность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаПотребность.Потребность, 0) >= 0
	|			ТОГДА (ЕСТЬNULL(ТаблицаОстатки.Количество, 0) - ЕСТЬNULL(ТаблицаПотребность.Потребность, 0)) * ДокументТовары.КоэффициентУпаковки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Излишек
	|ИЗ
	|	ДокументТовары КАК ДокументТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПотребность КАК ТаблицаПотребность
	|		ПО (ТаблицаПотребность.Номенклатура = ДокументТовары.Номенклатура)
	|			И (ТаблицаПотребность.Характеристика = ДокументТовары.Характеристика)
	|			И (ТаблицаПотребность.Переработчик = ДокументТовары.Переработчик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО (ТаблицаОстатки.Номенклатура = ДокументТовары.Номенклатура)
	|			И (ТаблицаОстатки.Характеристика = ДокументТовары.Характеристика)
	|			И (ТаблицаОстатки.Переработчик = ДокументТовары.Переработчик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументТовары.НомерСтроки
	|
	|ИТОГИ ПО
	|	Документ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаСырьеУПереработчика");
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область ВыводДанных

// Параметры:
// 	ТаблицаОтчета - ТабличныйДокумент
// 	Макет - ТабличныйДокумент
// 	Выборка - СтрокаТаблицыЗначений - должна содержать:
// 		* Ссылка - ДокументСсылка
// 		* НомерДокумента - Строка
// 		* ДатаДокумента - Дата
//
Процедура ВывестиЗаголовокОтчета(ТаблицаОтчета, Макет, Выборка)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		СтруктураПараметров.Вставить("ИмяДокумента", Строка(Выборка.Ссылка));
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ХозяйственнаяОперация") = 
				Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5 Тогда
		СтруктураПараметров.Вставить(
			"ИмяДокумента",
			СтрШаблон(НСтр("ru = '%1 %2 от %3';
							|en = '%1 %2 dated %3'"),
					  ДавальческаяСхемаКлиентСервер.СинонимДокументаПриемкаТоваровНаХранение(),
					  Выборка.НомерДокумента,
					  Формат(Выборка.ДатаДокумента, "ДЛФ=D")));
	//-- НЕ УТКА
	Иначе
		СтруктураПараметров.Вставить("ИмяДокумента", ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(Выборка.Ссылка, 
		Выборка.НомерДокумента, 
		Выборка.ДатаДокумента));
	КонецЕсли;
	Область.Параметры.Заполнить(СтруктураПараметров);
	Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", Выборка.Ссылка, "ОткрытьЗначение");
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ОбластьЗаголовок = Область.Области.ОбластьЗаголовок; // ОбластьЯчеекТабличногоДокумента
		ОбластьЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовокОтчетаВТакси;
	КонецЕсли;
	
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

Функция ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, ИмяТаблицы)
	Перем ТаблицаРасчетов;
	
	Если НЕ ТаблицыРезультатов.Свойство(ИмяТаблицы, ТаблицаРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадолженностьПоДокументу = ТаблицаРасчетов.Строки.Найти(Документ, "Документ");
	Если ЗадолженностьПоДокументу = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОтгрузка = (ИмяТаблицы = "ТаблицаРасчетыСКлиентами");
	
	ВыводитьОтступ = Ложь;
	Для каждого ЗадолженностьПоОбъектуРасчетов Из ЗадолженностьПоДокументу.Строки Цикл 
		
		ТребуетсяГрафик = ЗадолженностьПоОбъектуРасчетов.ТребуетсяГрафик;
		
		Если ТребуетсяГрафик Тогда
			
			Если НЕ ТаблицыРезультатов.Свойство("ТаблицаГрафикиОплаты") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ГрафикОплаты = ТаблицыРезультатов.ТаблицаГрафикиОплаты.Строки.Найти(ЗадолженностьПоОбъектуРасчетов.ОбъектРасчетов, "Документ");
			Если ГрафикОплаты = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ДатаПредыдущегоЭтапа = Дата(1,1,1);
			ИмяЭтапа = "";
			ПлановыеПлатежиНаДень = 0;
			
			Для Каждого ЭтапГрафикаОплаты Из ГрафикОплаты.Строки Цикл
				
				ДатаПлатежа = НачалоДня(ЭтапГрафикаОплаты.ДатаПлатежа);
				
				Если ДатаПредыдущегоЭтапа = ДатаПлатежа Тогда
					ПлановыеПлатежиНаДень = ПлановыеПлатежиНаДень + ЭтапГрафикаОплаты.СуммаПлатежа;
					Если СтрЧислоВхождений(ИмяЭтапа, ЭтапГрафикаОплаты.ВариантОплаты) = 0 Тогда
						ИмяЭтапа  = ?(ПустаяСтрока(ИмяЭтапа), ЭтапГрафикаОплаты.ВариантОплаты, ИмяЭтапа + Символы.ПС + ЭтапГрафикаОплаты.ВариантОплаты);
					КонецЕсли;
				Иначе
					ПлановыеПлатежиНаДень = ЭтапГрафикаОплаты.СуммаПлатежа;
					ИмяЭтапа = ЭтапГрафикаОплаты.ВариантОплаты;
				КонецЕсли;
				ДатаПредыдущегоЭтапа = ДатаПлатежа;
				
				НайденныеСтрокиРасчетов = ЗадолженностьПоОбъектуРасчетов.Строки.НайтиСтроки(Новый Структура("ДатаПлатежа, ОплатаПлан",
				                                                                            ДатаПлатежа,
				                                                                            ПлановыеПлатежиНаДень));
				
				Если НайденныеСтрокиРасчетов.Количество() > 0 Тогда
					Для Каждого НайденнаяСтрокаРасчетов Из НайденныеСтрокиРасчетов Цикл
						Если СокрЛП(НайденнаяСтрокаРасчетов.ЭтапОплатыОтгрузки) = "ОплатаПоГрафику" Тогда
							НайденнаяСтрокаРасчетов.ЭтапОплатыОтгрузки = ИмяЭтапа;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			РаспределитьОплатыПоГрафику(ЗадолженностьПоОбъектуРасчетов.Строки, ГрафикОплаты.Строки);
			
		КонецЕсли;
		
		ВывестиТаблицуРасчетовПоОбъектуРасчетов(ТаблицаОтчета, Макет, ЗадолженностьПоОбъектуРасчетов, ВыводитьОтступ, ЭтоОтгрузка);
		ВыводитьОтступ = Истина;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуРасчетовПоОбъектуРасчетов(ТаблицаОтчета, Макет, ЗадолженностьПоДокументу, ВыводитьОтступ, ЭтоОтгрузка)
	
	Если ВыводитьОтступ Тогда
		
		ИмяОбласти = "СтрокаТаблицыПоследняя";
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
		ТаблицаОтчета.Вывести(Область);
		
	КонецЕсли;
	
	ИмяОбласти = "ПорядокРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "ОбъектРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", ЗадолженностьПоДокументу.ОбъектРасчетов, "ОткрытьЗначение");
	ТаблицаОтчета.Вывести(Область);
	
	Если ЭтоОтгрузка Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Задолженность клиента';
								|en = 'Customer AR/AP open items'");
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Наша задолженность';
								|en = 'Payments / Invoices reconciliation'");
	КонецЕсли; 
	
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	СтруктураЗаголовка = Новый Структура("Заголовок", ЗаголовокТаблицы);
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыЗадолженность";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ЗаголовокОтгрузкаПоступление = ?(ЭтоОтгрузка, НСтр("ru = 'Отгрузка';
																		|en = 'Shipment'"), НСтр("ru = 'Поступление';
																									|en = 'Receipt'"));
	Область.Параметры.ЗаголовокЭтапОплаты = ?(ЭтоОтгрузка, НСтр("ru = 'Этап оплаты/отгрузки';
																|en = 'Payment/shipment step'"), НСтр("ru = 'Этап оплаты/поступления';
																									|en = 'Payment/receipt step'"));
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыЗадолженность";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаЗадолженностьСтрока";
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаЗадолженность Из ЗадолженностьПоДокументу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаЗадолженность);
		Область.Параметры.ЭтапОплатыОтгрузки = ЭтапОплатыОтгрузкиСтрокой(СтрокаЗадолженность.ЭтапОплатыОтгрузки);
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла; 
	
	ИмяОбласти = "СтрокаТаблицыЗадолженностьИтого";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	Область.Параметры.ОплатаПланИтого = ЗадолженностьПоДокументу.ОплатаПлан;
	Область.Параметры.ОплатаФактИтого = ЗадолженностьПоДокументу.ОплатаФакт;
	Область.Параметры.ОтгрузкаПланИтого = ЗадолженностьПоДокументу.ОтгрузкаПлан;
	Область.Параметры.ОтгрузкаФактИтого = ЗадолженностьПоДокументу.ОтгрузкаФакт;
	
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПодчиненныеДокументы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодчиненныеДокументы = ТаблицыРезультатов.ТаблицаПодчиненныеДокументы.Строки.Найти(Документ, "Документ");
	Если ПодчиненныеДокументы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ПорядокРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ПодчиненныеДокументы);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);

	Заголовок = НСтр("ru = 'Объекты расчетов (%1%)';
					|en = 'AR/AP objects (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", ПодчиненныеДокументы.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "СтрокаПодчиненныйДокумент";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для каждого СтрокаДокумент Из ПодчиненныеДокументы.Строки Цикл
		Область.Параметры.ПредставлениеДокумента = Строка(СтрокаДокумент.ПодчиненныйДокумент)
			+ " " + НСтр("ru = 'на сумму';
						|en = 'in the amount of'") + " " + Формат(СтрокаДокумент.СуммаДокумента,"ЧДЦ=2") + " " 
			+ СтрокаДокумент.Валюта;
		Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", 
			СтрокаДокумент.ПодчиненныйДокумент,
			"ОткрытьЗначение");
		ТаблицаОтчета.Вывести(Область);
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуНеобеспеченныеТовары(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаНеобеспеченныеТовары") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НеобеспеченныеТовары = ТаблицыРезультатов.ТаблицаНеобеспеченныеТовары.Строки.Найти(Документ, "Документ");
	Если НеобеспеченныеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Необеспеченные товары и услуги (%1%)';
					|en = 'Not supplied goods and services (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", НеобеспеченныеТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	Если СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыНеОбеспечено";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыНеОбеспечено";
		ИмяОбластиТаблицСтрока = "ТаблицаНеОбеспеченоСтрока";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыНеОбеспеченоБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыНеОбеспеченоБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаНеОбеспеченоСтрокаБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента

	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из НеобеспеченныеТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина
	
КонецФункции

Функция ВывестиТаблицуСостояниеОбеспечения(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаСостояниеОбеспечения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КОбеспечениюТовары = ТаблицыРезультатов.ТаблицаСостояниеОбеспечения.Строки.Найти(Документ, "Документ");
	Если КОбеспечениюТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Обеспечение (%1%)';
					|en = 'Supply (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", КОбеспечениюТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОбеспечение";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОбеспечение";
		ИмяОбластиТаблицСтрока = "ТаблицаОбеспечениеСтрока";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОбеспечениеБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОбеспечениеБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаОбеспечениеСтрокаБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из КОбеспечениюТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	Если ЕстьПравоДоступаКНаборуДанных("ОбеспечениеДополнительно", СтруктураПараметров) Тогда
		ИмяОбласти = "СтрокаТаблицыОбеспечениеДополнительно";
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Ссылка"), "ОткрытьСостояниеОбеспечения");
		ТаблицаОтчета.Вывести(Область);
	КонецЕсли;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуОтгрузка(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтгрузка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтгрузкаТовары = ТаблицыРезультатов.ТаблицаОтгрузка.Строки.Найти(Документ, "Документ");
	Если ОтгрузкаТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ОтгрузкаТоварыПоСкладу Из ОтгрузкаТовары.Строки Цикл
		
		ВывестиТаблицуОтгрузкиПоСкладу(ТаблицаОтчета, Макет, ОтгрузкаТоварыПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуОтгружено(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтгружено") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтгруженоТовары = ТаблицыРезультатов.ТаблицаОтгружено.Строки.Найти(Документ, "Документ");
	Если ОтгруженоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Отгружено (%1%)';
					|en = 'Shipped (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", ОтгруженоТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОтгружено";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОтгружено";
		ИмяОбластиТаблицСтрока = "ТаблицаОтгруженоСтрока";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОтгруженоБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОтгруженоБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаОтгруженоСтрокаБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ОтгруженоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		Если СтруктураПараметров.ДействиеРасшифровкаКоличествоОтгружено <> Неопределено Тогда
			РасшифровкаКоличество = Новый Структура("Номенклатура,Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(РасшифровкаКоличество, СтрокаТовар);
			РасшифровкаКоличество.Вставить("Документ", Документ);
			РасшифровкаКоличество.Вставить("Действие", СтруктураПараметров.ДействиеРасшифровкаКоличествоОтгружено);
			Область.Параметры.РасшифровкаКоличество = РасшифровкаКоличество;
		КонецЕсли; 
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуПоступление(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПоступление") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступлениеТовары = ТаблицыРезультатов.ТаблицаПоступление.Строки.Найти(Документ, "Документ");
	Если ПоступлениеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ПоступлениеТоварыПоСкладу Из ПоступлениеТовары.Строки Цикл
		
		ВывестиТаблицуПоступленияПоСкладу(ТаблицаОтчета, Макет, ПоступлениеТоварыПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуПоступило(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПоступило") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступилоТовары = ТаблицыРезультатов.ТаблицаПоступило.Строки.Найти(Документ, "Документ");
	Если ПоступилоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Поступило (%1%)';
					|en = 'Received (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", ПоступилоТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступило";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступило";
		ИмяОбластиТаблицСтрока = "ТаблицаПоступилоСтрока";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступилоБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступилоБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаПоступилоСтрокаБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ПоступилоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		Если СтруктураПараметров.ДействиеРасшифровкаКоличествоПоступило <> Неопределено Тогда
			РасшифровкаКоличество = Новый Структура("Номенклатура,Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(РасшифровкаКоличество, СтрокаТовар);
			РасшифровкаКоличество.Вставить("Документ", Документ);
			РасшифровкаКоличество.Вставить("Действие", СтруктураПараметров.ДействиеРасшифровкаКоличествоПоступило);
			Область.Параметры.РасшифровкаКоличество = РасшифровкаКоличество;
		КонецЕсли; 
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуЗаказано(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаЗаказано") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступилоТовары = ТаблицыРезультатов.ТаблицаЗаказано.Строки.Найти(Документ, "Документ");
	Если ПоступилоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Заказано (%1%)';
					|en = 'Ordered (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", ПоступилоТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступило";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступило";
		ИмяОбластиТаблицСтрока = "ТаблицаПоступилоСтрока";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступилоБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступилоБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаПоступилоСтрокаБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ПоступилоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		Если ЗначениеЗаполнено(СтрокаТовар.Упаковка) Тогда
			Область.Параметры.Количество = СтрокаТовар.КоличествоУпаковок;
		КонецЕсли;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуОтгрузкиПоСкладу(ТаблицаОтчета, Макет, ТоварыПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ТоварыПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru = 'В процессе отгрузки на складе ""%СкладОтгрузки%"" (%1%)';
								|en = 'While shipping in warehouse ""%СкладОтгрузки%"" (%1%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ТоварыПоСкладу.Склад);
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Услуги и работы в процессе оформления (%1%)';
								|en = 'Services and labor under registration (%1%)'");
	КонецЕсли;
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(ЗаголовокТаблицы, "%1%", ТоварыПоСкладу.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	Если СтруктураПараметров.ЭтоНакладная Тогда
		ШапкаТаблицыОтгрузка = "ШапкаТаблицыОтгрузкаНакладная";
		СтрокаТаблицыОтгрузка = "СтрокаТаблицыОтгрузкаНакладная";
		ТаблицаОтгрузкаСтрока = "ТаблицаОтгрузкаСтрокаНакладная";
	ИначеЕсли Не (СтруктураПараметров.ЭтоЗаказ И ТоварыПоСкладу.ОрдернаяСхемаПриОтгрузке) Тогда
		ШапкаТаблицыОтгрузка = "ШапкаТаблицыОтгрузкаБезОрдера";
		СтрокаТаблицыОтгрузка = "СтрокаТаблицыОтгрузкаБезОрдера";
		ТаблицаОтгрузкаСтрока = "ТаблицаОтгрузкаСтрокаБезОрдера";
	Иначе
		ШапкаТаблицыОтгрузка = "ШапкаТаблицыОтгрузка";
		СтрокаТаблицыОтгрузка = "СтрокаТаблицыОтгрузка";
		ТаблицаОтгрузкаСтрока = "ТаблицаОтгрузкаСтрока";
	КонецЕсли;
		
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = ШапкаТаблицыОтгрузка;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = СтрокаТаблицыОтгрузка;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = ТаблицаОтгрузкаСтрока;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ТоварыПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиТаблицуПоступленияПоСкладу(ТаблицаОтчета, Макет, ТоварыПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ТоварыПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru = 'В процессе поступления на склад ""%СкладОтгрузки%"" (%1%)';
								|en = 'Goods received / Invoicing reconciliation ""%СкладОтгрузки%"" (%1%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ТоварыПоСкладу.Склад);
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Услуги и работы в процессе оформления (%1%)';
								|en = 'Services and labor under registration (%1%)'");
	КонецЕсли;
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(ЗаголовокТаблицы, "%1%", ТоварыПоСкладу.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступление";
	ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступление";
	ИмяОбластиТаблицСтрока = "ТаблицаПоступлениеСтрока";
	
	Если СтруктураПараметров.ЭтоЗаказ Или СтруктураПараметров.ЭтоПоступлениеТоваров Тогда
		Если ТоварыПоСкладу.ОрдернаяСхемаПриПоступлении Или ТоварыПоСкладу.РаздельнаяЗакупка Тогда
			ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступление";
			ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступление";
			ИмяОбластиТаблицСтрока = "ТаблицаПоступлениеСтрока";
		Иначе
			ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступлениеБезОрдера";
			ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступлениеБезОрдера";
			ИмяОбластиТаблицСтрока = "ТаблицаПоступлениеСтрокаБезОрдера";
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ЭтоНакладная Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыПоступлениеНакладная";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыПоступлениеНакладная";
		ИмяОбластиТаблицСтрока = "ТаблицаПоступлениеСтрокаНакладная";
	КонецЕсли;
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ТоварыПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуОтмененоОтгрузка(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтмененоОтгрузка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтмененоТовары = ТаблицыРезультатов.ТаблицаОтмененоОтгрузка.Строки.Найти(Документ, "Документ");
	Если ОтмененоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВывестиТаблицуОтменено(
				ТаблицаОтчета, 
				Макет, 
				ОтмененоТовары, 
				СтруктураПараметров, 
				СтруктураПараметров.ЕстьПричиныОтменыОтгрузки,
				СтруктураПараметров.ТекстОтмененоОтгрузка);
	
КонецФункции

Функция ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтмененоПоступление") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтмененоТовары = ТаблицыРезультатов.ТаблицаОтмененоПоступление.Строки.Найти(Документ, "Документ");
	Если ОтмененоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВывестиТаблицуОтменено(
				ТаблицаОтчета, 
				Макет, 
				ОтмененоТовары, 
				СтруктураПараметров, 
				СтруктураПараметров.ЕстьПричиныОтменыПоступления,
				СтруктураПараметров.ТекстОтмененоПоступление,
				Ложь);
	
КонецФункции

Функция ВывестиТаблицуОтменено(ТаблицаОтчета, Макет, ОтмененоТовары, СтруктураПараметров, ИспользоватьПричиныОтмены, ЗаголовокТаблицы, Отгрузка = Истина)
	
	ЕстьСуммовыеПоказатели = Отгрузка И СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки
	                             Или Не Отгрузка И СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;

	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(ЗаголовокТаблицы, "%1%", ОтмененоТовары.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если ИспользоватьПричиныОтмены И ЕстьСуммовыеПоказатели Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОтменено";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОтменено";
		ИмяОбластиТаблицСтрока = "ТаблицаОтмененоСтрока";
	ИначеЕсли Не ИспользоватьПричиныОтмены И ЕстьСуммовыеПоказатели Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОтмененоБезПричины";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОтмененоБезПричины";
		ИмяОбластиТаблицСтрока = "ТаблицаОтмененоСтрокаБезПричины";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыОтмененоБезПричиныБезСумм";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыОтмененоБезПричиныБезСумм";
		ИмяОбластиТаблицСтрока = "ТаблицаОтмененоСтрокаБезПричиныБезСумм";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = ?(Отгрузка, СтруктураПараметров.ТекстТоварУслугаОтгрузка, СтруктураПараметров.ТекстТоварУслугаПоступление);
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ОтмененоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуВозвратТоваров(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаВозвратТоваров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступлениеТовары = ТаблицыРезультатов.ТаблицаВозвратТоваров.Строки.Найти(Документ, "Документ");
	Если ПоступлениеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВозвратТоваровПоСкладу Из ПоступлениеТовары.Строки Цикл
		
		ВывестиТаблицуВозвратТоваровПоСкладу(ТаблицаОтчета, Макет, ВозвратТоваровПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуВозвратТоваровПоСкладу(ТаблицаОтчета, Макет, ВозвратТоваровПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ВозвратТоваровПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru = 'В процессе возврата на склад ""%СкладОтгрузки%"" (%1%)';
								|en = 'While returning to warehouse ""%СкладОтгрузки%"" (%1%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ВозвратТоваровПоСкладу.Склад);
	КонецЕсли;
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(ЗаголовокТаблицы, "%1%", ВозвратТоваровПоСкладу.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Если СтруктураПараметров.ЭтоНакладная Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыВозврат";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыВозврат";
		ИмяОбластиТаблицСтрока = "ТаблицаВозвратСтрока";
	ИначеЕсли Не (СтруктураПараметров.ЭтоЗаказ И ВозвратТоваровПоСкладу.ОрдернаяСхемаПриПоступлении) Тогда
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыВозвратБезОрдера";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыВозвратБезОрдера";
		ИмяОбластиТаблицСтрока = "ТаблицаВозвратСтрокаБезОрдера";
	Иначе
		ИмяОбластиШапкаТаблицы = "ШапкаТаблицыВозврат";
		ИмяОбластиСтрокаТаблицы = "СтрокаТаблицыВозврат";
		ИмяОбластиТаблицСтрока = "ТаблицаВозвратСтрока";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиШапкаТаблицы);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);
	ОбластьСтроки = Область.Области[ИмяОбластиТаблицСтрока]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ВозвратТоваровПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуВозвращеноТоваров(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаВозвращеноТоваров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВозвращеноТоваров = ТаблицыРезультатов.ТаблицаВозвращеноТоваров.Строки.Найти(Документ, "Документ");
	Если ВозвращеноТоваров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаголовокТаблицы = НСтр("ru = 'Возвращено товаров клиентом (%1%)';
							|en = 'Goods returned by a customer (%1%)'");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(ЗаголовокТаблицы, "%1%", ВозвращеноТоваров.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыВозвращено";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыВозвращено";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаВозвращеноСтрока";
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ВозвращеноТоваров.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиПоследнююСтроку(ТаблицаОтчета, Макет)
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицыПоследняя");
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

Процедура ВывестиТаблицуНетДанных(ТаблицаОтчета, Макет, Выборка, ЕстьДанные)
	
	Если ЕстьДанные Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ Выборка.ДокументПроведен Тогда
		ТекстСообщения = НСтр("ru = 'Документ не проведен. Нет данных для заполнения.';
								|en = 'Document is not posted. No data for population.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения.';
								|en = 'No data for population.'");
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицыНетДанных");
	Область.Параметры.ТекстСообщения = ТекстСообщения;
	ТаблицаОтчета.Вывести(Область);
	
	ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
	
КонецПроцедуры

//++ НЕ УТ

//++ НЕ УТКА

Функция ВывестиТаблицуУслугиДавальцуКОформлению(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаУслугиДавальцуКОформлению") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УслугиДавальцуКОформлению = ТаблицыРезультатов.ТаблицаУслугиДавальцуКОформлению.Строки.Найти(Документ, "Документ");
	Если УслугиДавальцуКОформлению = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Услуги давальцу к оформлению (%1%)';
					|en = 'Services to material provider for registration (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", УслугиДавальцуКОформлению.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыУслугиДавальцуКОформлению";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыУслугиДавальцуКОформлению";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаУслугиДавальцуКОформлениюСтрока";
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из УслугиДавальцуКОформлению.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
		СтрокаТовар.Номенклатура,
		СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина
	
КонецФункции

//-- НЕ УТКА

Функция ВывестиТаблицуПродукцияКОформлениюВОтчетеПереработчику(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)

	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПродукцияКОформлениюВОтчетеПереработчику") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПродукцияКОформлению = ТаблицыРезультатов.ТаблицаПродукцияКОформлениюВОтчетеПереработчику.Строки.Найти(Документ, "Документ");
	Если ПродукцияКОформлению = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru = 'Продукция и услуги к оформлению в отчете переработчику (%1%)';
					|en = 'Manufactured products and services for registration in subcontractor report (%1%)'");
	СтруктураЗаголовка = Новый Структура("Заголовок", 
							СтрЗаменить(Заголовок, "%1%", ПродукцияКОформлению.Строки.Количество()));
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	СуффиксМакета = СтруктураПараметров.СуффиксМакетаТаблицыПродукцияКОформлениюВОтчетеПереработчику;
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыКОформлениюВОтчетеПереработчику" + СуффиксМакета;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыКОформлениюВОтчетеПереработчику" + СуффиксМакета;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ИмяОбластьСтроки = "ТаблицаКОформлениюВОтчетеПереработчикуСтрока" + СуффиксМакета;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ПродукцияКОформлению.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.НоменклатураПредставление,
					СтрокаТовар.ХарактеристикаПредставление,
					,
					СтрокаТовар.СерияПредставление);
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;

КонецФункции

Функция ВывестиТаблицуСырьеУПереработчика(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)

	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаСырьеУПереработчика") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СырьеУПереработчика = ТаблицыРезультатов.ТаблицаСырьеУПереработчика.Строки.Найти(Документ, "Документ");
	Если СырьеУПереработчика = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Заголовок = НСтр("ru = 'Сырье и материалы у переработчика (%1%)';
					|en = 'Raw and consumable materials held by subcontractor (%1%)'");
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить(
		"Заголовок",
		СтрЗаменить(Заголовок, "%1%", СырьеУПереработчика.Строки.Количество()));
	
	Область.Параметры.Заполнить(СтруктураЗаголовка);
	ТаблицаОтчета.Вывести(Область);
	
	СуффиксМакета = СтруктураПараметров.СуффиксМакетаТаблицыСырьеУПереработчика;
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыСырьеУПереработчика" + СуффиксМакета;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыСырьеУПереработчика" + СуффиксМакета;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ИмяОбластьСтроки = "ТаблицаСырьеУПереработчикаСтрока" + СуффиксМакета;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки]; // ОбластьЯчеекТабличногоДокумента
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из СырьеУПереработчика.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаТовар.НоменклатураПредставление,
					СтрокаТовар.ХарактеристикаПредставление);
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;

КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область Прочее

Процедура РаспределитьОплатыПоГрафику(Оплаты, ЭтапыГрафика)
	
	КоличествоЭтаповГрафикаОплаты = ЭтапыГрафика.Количество();
	Если КоличествоЭтаповГрафикаОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокСФактическимиОплатами = Новый Массив;
	ЕстьОплатыНеПоГрафику = Ложь;
	Для Каждого Оплата Из Оплаты Цикл
		Если Оплата.ОплатаФакт <> 0 Тогда
			МассивСтрокСФактическимиОплатами.Добавить(Оплата);
			Если Оплата.ЭтапОплатыОтгрузки = "ОплатаНеПоГрафику" Тогда
				ЕстьОплатыНеПоГрафику = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОплатыНеПоГрафику Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаГрафикаОплат = 0;
	Для Каждого СтрокаСФактическойОплатой Из МассивСтрокСФактическимиОплатами Цикл
		
		Если ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаСФактическойОплатой.ОплатаФакт = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Тогда
			
			Если СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = "ОплатаНеПоГрафику" Тогда
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
			КонецЕсли;
			
			ТекущаяСтрокаГрафикаОплат = ТекущаяСтрокаГрафикаОплат + 1;
			
		ИначеЕсли СтрокаСФактическойОплатой.ОплатаФакт < ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Тогда
			
			Если СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = "ОплатаНеПоГрафику" Тогда
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
			КонецЕсли;
			ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа - СтрокаСФактическойОплатой.ОплатаФакт;
			
		Иначе
			
			ОсталосьРаспределить = СтрокаСФактическойОплатой.ОплатаФакт;
			МассивВидовОплатыПоПлатежу = Новый Массив;
			
			Пока ОсталосьРаспределить >= ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Цикл
				ОсталосьРаспределить = ОсталосьРаспределить - ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа;
				
				ВариантОплатыЭтапа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
				Если МассивВидовОплатыПоПлатежу.Найти(ВариантОплатыЭтапа) = Неопределено Тогда
					МассивВидовОплатыПоПлатежу.Добавить(ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты);
				КонецЕсли;
				 
				ТекущаяСтрокаГрафикаОплат = ТекущаяСтрокаГрафикаОплат + 1;
				Если ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОсталосьРаспределить > 0 И (НЕ ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1) Тогда
				ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа - ОсталосьРаспределить;
				ВариантОплатыЭтапа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
				Если МассивВидовОплатыПоПлатежу.Найти(ВариантОплатыЭтапа) = Неопределено Тогда
					МассивВидовОплатыПоПлатежу.Добавить(ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты);
				КонецЕсли;
			КонецЕсли;
			
			Если МассивВидовОплатыПоПлатежу.Количество() = 1
				И СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = "ОплатаНеПоГрафику" Тогда
				
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = МассивВидовОплатыПоПлатежу[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПравоДоступаКНаборуДанных(ИмяНабораДанных, СтруктураПараметров)
	
	ЕстьПравоДоступа = Ложь;
	
	Если ИмяНабораДанных = "РасчетыСКлиентами" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		
	ИначеЕсли ИмяНабораДанных = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		ЕстьПравоДоступа = ЕстьПравоДоступа И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
		
	ИначеЕсли ИмяНабораДанных = "РасчетыСПоставщиками" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	ИначеЕсли ИмяНабораДанных = "Отгрузка" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
		СтруктураПараметров.Вставить("ЕстьПравоНаТаблицуОтгрузки", ЕстьПравоДоступа);
		
		Если СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыКлиентов" Тогда
			
			ЕстьПравоДоступаРегистрОтгрузкаУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов);
			ЕстьПравоДоступа = ЕстьПравоДоступа Или ЕстьПравоДоступаРегистрОтгрузкаУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрОтгрузкаУслуг", ЕстьПравоДоступаРегистрОтгрузкаУслуг);
			
		ИначеЕсли СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыНаВнутреннееПотребление" Тогда
			
			ЕстьПравоДоступаРегистрОтгрузкаУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
			ЕстьПравоДоступа = ЕстьПравоДоступа Или ЕстьПравоДоступаРегистрОтгрузкаУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрОтгрузкаУслуг", ЕстьПравоДоступаРегистрОтгрузкаУслуг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяНабораДанных = "Поступление" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
		СтруктураПараметров.Вставить("ЕстьПравоНаТаблицуПоступления", ЕстьПравоДоступа);
		
		ЕстьПравоДоступаЗаказыПоставщикам = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
		СтруктураПараметров.Вставить("ЕстьПравоДоступаЗаказыПоставщикам", ЕстьПравоДоступаЗаказыПоставщикам);
		
		Если СтруктураПараметров.ИмяРегистраПоступлениеУслуг = "ЗаказыПоставщикам" Тогда
			
			ЕстьПравоДоступа = ЕстьПравоДоступа Или ЕстьПравоДоступаЗаказыПоставщикам;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрПоступлениеУслуг", ЕстьПравоДоступаЗаказыПоставщикам);
			
		ИначеЕсли СтруктураПараметров.ИмяРегистраПоступлениеУслуг = "ЗаказыНаСборку" Тогда
			
			ЕстьПравоДоступаРегистрПоступлениеУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаСборку);
			ЕстьПравоДоступа = ЕстьПравоДоступа И ЕстьПравоДоступаРегистрПоступлениеУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрПоступлениеУслуг", ЕстьПравоДоступаРегистрПоступлениеУслуг);
			
		ИначеЕсли СтруктураПараметров.ИмяРегистраПоступлениеУслуг = "ЗаказыНаПеремещение" Тогда
			
			ЕстьПравоДоступаРегистрПоступлениеУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаПеремещение);
			ЕстьПравоДоступа = ЕстьПравоДоступа И ЕстьПравоДоступаРегистрПоступлениеУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрПоступлениеУслуг", ЕстьПравоДоступаРегистрПоступлениеУслуг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяНабораДанных = "ОбеспечениеДополнительно" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспеченияЗаказов);
		
	//++ НЕ УТКА

	ИначеЕсли ИмяНабораДанных = "УслугиДавальцуКОформлению" Тогда
		
		ЕстьПравоДоступа =
			ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
			//++ Устарело_Переработка24
			И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению)
			//-- Устарело_Переработка24
			И Истина;
	
	//-- НЕ УТКА

	//++ НЕ УТ
	ИначеЕсли ИмяНабораДанных = "ПродукцияКОформлениюВОтчетеПереработчику" Тогда
		
		СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
		
		ЕстьПравоДоступа = ЗначениеЗаполнено(СтруктураДопЗапросов)
						   И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПродукцияКОформлениюВОтчетеПереработчику")
						   //++ Устарело_Переработка24
						   Или ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыПолученныеОтПереработчика)
						   //-- Устарело_Переработка24
						   Или Ложь;
		
	ИначеЕсли ИмяНабораДанных = "СырьеУПереработчика" Тогда
		
		СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
		
		ЕстьПравоДоступа = ЗначениеЗаполнено(СтруктураДопЗапросов)
						   И СтруктураДопЗапросов.Свойство("ТаблицаСырьеУПереработчика")
						   //++ Устарело_Переработка24
						   Или ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыПереданныеПереработчику)
						   //-- Устарело_Переработка24
						   Или Ложь;
	//-- НЕ УТ
	КонецЕсли;
	
	Возврат ЕстьПравоДоступа;
	
КонецФункции

Функция СтатусыБезОтгрузки(ИмяТаблицы)
	
	МассивСтатусов = Новый Массив();
	
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату);
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
	МассивСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.НаСогласовании);
	//++ НЕ УТ
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Создан);
	//-- НЕ УТ
	Возврат МассивСтатусов
	
КонецФункции

Функция ЭтапОплатыОтгрузкиСтрокой(ИдентификаторЭтапаОплатыОтгрузки)
	
	Если ИдентификаторЭтапаОплатыОтгрузки = "ОплатаПоГрафику" Тогда
		Возврат НСтр("ru = 'Оплата по графику';
					|en = 'Payment on schedule'");
	ИначеЕсли ИдентификаторЭтапаОплатыОтгрузки = "ОплатаНеПоГрафику" Тогда
		Возврат НСтр("ru = 'Оплата не по графику';
					|en = 'Not scheduled payment'");
	ИначеЕсли ИдентификаторЭтапаОплатыОтгрузки = "Отгрузка" Тогда
		Возврат НСтр("ru = 'Отгрузка';
					|en = 'Shipment'");
	ИначеЕсли ИдентификаторЭтапаОплатыОтгрузки = "Поступление" Тогда
		Возврат НСтр("ru = 'Поступление';
					|en = 'Receipt'");
	ИначеЕсли ИдентификаторЭтапаОплатыОтгрузки = "ПереносАванса" Тогда
		Возврат НСтр("ru = 'Перенос аванса';
					|en = 'Prepayment offset'");
	Иначе
		Возврат ИдентификаторЭтапаОплатыОтгрузки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
