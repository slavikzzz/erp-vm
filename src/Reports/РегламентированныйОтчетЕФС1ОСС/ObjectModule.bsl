#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета",
	"ЕФС-1: Сведения о начисленных страховых взносах на обязательное социальное страхование от несчастных случаев на производстве и профессиональных заболеваний");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР211М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР211М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР22М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("Титульный_ИменаЗависимыхПоказателей", СтрРазделить(
		"РегНомер,НаимОрг,ИНН,КПП,ОКФС,ОКОГУ,ОКПО,ОКВЭД,ОГРН,КодКатСтрахФЛ,Телефон,ЭлПочта", ",", Ложь));
		
	Иначе// "ФормаОтчета2023Кв1"
		
		СтруктураРеквизитовФормы.Вставить("Титульный_ИменаЗависимыхПоказателей", СтрРазделить(
		"РегНомер,НаимОрг,ИНН,КПП,ОКФС,ОКОГУ,ОКПО,ОКВЭД,ОГРН,Телефон,ЭлПочта", ",", Ложь));
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР211М1 = "П00211М1";
	СтруктураРеквизитовФормы.мИдГруппыР211М2 = "П00211М2";
	СтруктураРеквизитовФормы.мИдГруппыР22М1  = "П00022М1";
	
	// Группа П00211М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00211М100002");
	ИменаГраф.Добавить("П00211М100003");
	ИменаГраф.Добавить("П00211М100004");
	ИменаГраф.Добавить("П00211М100005");
	ИменаГраф.Добавить("П00211М100006");
	ИменаГраф.Добавить("П00211М100007");
	ИменаГраф.Добавить("П00211М100008");
	ИменаГраф.Добавить("П00211М100009");
	ИменаГраф.Добавить("П00211М100010");
	ИменаГраф.Добавить("П00211М100011");
	ИменаГраф.Добавить("П00211М100012");
	ИменаГраф.Добавить("П00211М100013");
	ИменаГраф.Добавить("П00211М100014");
	ИменаГраф.Добавить("П00211М100015");
	ИменаГраф.Добавить("П00211М100016");
	ИменаГраф.Добавить("П00211М100017");
	ИменаГраф.Добавить("П00211М100018");
	ИменаГраф.Добавить("П00211М100019");
	ИменаГраф.Добавить("П00211М100020");
	ИменаГраф.Добавить("П00211М100021");
	ИменаГраф.Добавить("П00211М100022");
	ИменаГраф.Добавить("П00211М100023");
	ИменаГраф.Добавить("П00211М100024");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР211М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00211М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00211М200001");
	ИменаГраф.Добавить("П00211М200002");
	ИменаГраф.Добавить("П00211М200003");
	ИменаГраф.Добавить("П00211М200004");
	ИменаГраф.Добавить("П00211М200005");
	ИменаГраф.Добавить("П00211М200009");
	ИменаГраф.Добавить("П00211М200010");
	ИменаГраф.Добавить("П00211М200011");
	ИменаГраф.Добавить("П00211М200012");
	ИменаГраф.Добавить("П00211М200013");
	ИменаГраф.Добавить("П00211М200014");
	ИменаГраф.Добавить("П00211М200015");
	ИменаГраф.Добавить("П00211М200016");
	ИменаГраф.Добавить("П00211М200017");
	ИменаГраф.Добавить("П00211М200018");
	ИменаГраф.Добавить("П00211М200019");
	ИменаГраф.Добавить("П00211М200020");
	ИменаГраф.Добавить("П00211М200021");
	ИменаГраф.Добавить("П00211М200022");
	ИменаГраф.Добавить("П00211М200023");
	ИменаГраф.Добавить("П00211М200024");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР211М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00022М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00022М100001");
	ИменаГраф.Добавить("П00022М100002");
	ИменаГраф.Добавить("П00022М100003");
	ИменаГраф.Добавить("П00022М100004");
	ИменаГраф.Добавить("П00022М100005");
	ИменаГраф.Добавить("П00022М100006");
	ИменаГраф.Добавить("П00022М100007");
	ИменаГраф.Добавить("П00022М100008");
	ИменаГраф.Добавить("П00022М100009");
	ИменаГраф.Добавить("П00022М100010");
	ИменаГраф.Добавить("П00022М100011");
	ИменаГраф.Добавить("П00022М100012");
	ИменаГраф.Добавить("П00022М100013");
	ИменаГраф.Добавить("П00022М100014");
	ИменаГраф.Добавить("П00022М100015");
	ИменаГраф.Добавить("П00022М100016");
	ИменаГраф.Добавить("П00022М100017");
	ИменаГраф.Добавить("П00022М100018");
	ИменаГраф.Добавить("П00022М100019");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР22М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР211М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР211М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел211", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР22М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел22", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел23", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел211";
	СтрокаУровня1.Представление      = "Подраздел 2.1.1";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел22";
	СтрокаУровня1.Представление      = "Подраздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел23";
	СтрокаУровня1.Представление      = "Подраздел 2.3";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	СтруктураДанныхРазделов.СтруктураДанныхТитульный["ПризнакСтрахователя"] = "V";
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "РегНомерСФР, КодОрганаПФР, РегНомПФР, НаимЮЛПол, НаимЮЛСокр, ФИО, ИННЮЛ, КППЮЛ, ОКФС, ОКПО,"
		+ " ОКВЭД2, ОГРН, ТелОрганизации, АдресЭлектроннойПочтыОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024
			И СведенияОбОрганизации.Свойство("РегНомерСФР")
			И ТипЗнч(СведенияОбОрганизации.РегНомерСФР) = Тип("Строка")
			И ЗначениеЗаполнено(СведенияОбОрганизации.РегНомерСФР) Тогда
			
			РегНом = Лев(СокрЛП(СведенияОбОрганизации.РегНомерСФР), 10);
			
		Иначе
			
			РегНом = СокрЛП(СведенияОбОрганизации.РегНомПФР);
			
			Если СтрДлина(РегНом) > 10 И СтрДлина(РегНом) < 14 Тогда
				Если Сред(РегНом, 4, 1) <> "-" Тогда
					РегНом = Лев(РегНом, 3) + "-" + Сред(РегНом, 4);
				КонецЕсли;
				Если Сред(РегНом, 8, 1) <> "-" Тогда
					РегНом = Лев(РегНом, 7) + "-" + Сред(РегНом, 8);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрДлина(РегНом) = 10 И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(РегНом) Тогда
			
			КодОргана = "";
			
		Иначе
			
			КодОргана = СокрЛП(СведенияОбОрганизации.КодОрганаПФР);
			
			КодОргана = СтрЗаменить(КодОргана, "-", "");
			КодОргана = Лев(КодОргана, 6);
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
			Иначе
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
		КонецЕсли;
		
		ИНН   = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП   = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		ОКФС = СокрЛП(СведенияОбОрганизации.ОКФС);
		
		ОКФС = ?(СтрРазделить("12,13,14", ",", Ложь).Найти(ОКФС) = Неопределено, "", ОКФС);
		
		ОКПО  = СокрЛП(СведенияОбОрганизации.ОКПО);
		ОКВЭД = СокрЛП(СведенияОбОрганизации.ОКВЭД2);
		ОГРН  = СокрЛП(СведенияОбОрганизации.ОГРН);
		
		Тел = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		Тел = ?(СтрНачинаетсяС(Тел, "+7"), "8" + Сред(Тел, 3), Тел);
		ТелДлина = СтрДлина(Тел);
		Телефон = "";
		Для Ном = 1 По ТелДлина Цикл
			ТекСимв = Сред(Тел, Ном, 1);
			Если СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ТекСимв) Тогда
				Телефон = Телефон + ТекСимв;
			КонецЕсли;
		КонецЦикла;
		Телефон = Лев(Телефон, 15);
		
		АдресЭлектроннойПочтыОрганизации = СокрЛП(СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации);
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			ТДО = СтруктураДанныхТитульный.Области;
			
			ТДО.КодОргана.Значение = КодОргана;
			
			ТДО.Предст_РегНомер.Значение = РегНом;
			
			ТДО.Предст_НаимОрг.Значение = НаименованиеОрганизации;
			
			ТДО.Предст_ИНН.Значение   = ИНН;
			ТДО.Предст_КПП.Значение   = КПП;
			ТДО.Предст_ОКФС.Значение  = ОКФС;
			ТДО.Предст_ОКПО.Значение  = ОКПО;
			ТДО.Предст_ОКВЭД.Значение = ОКВЭД;
			ТДО.Предст_ОГРН.Значение  = ОГРН;
			
			ТДО.Предст_Телефон.Значение = Телефон;
			ТДО.Предст_ЭлПочта.Значение = АдресЭлектроннойПочтыОрганизации;
			
			ТДО.ДатаПодписи.Значение = ДатаПодписи;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.КодОргана = КодОргана;
			
			СтруктураДанныхТитульный.Предст_РегНомер = РегНом;
			
			СтруктураДанныхТитульный.Предст_НаимОрг = НаименованиеОрганизации;
			
			СтруктураДанныхТитульный.Предст_ИНН   = ИНН;
			СтруктураДанныхТитульный.Предст_КПП   = КПП;
			СтруктураДанныхТитульный.Предст_ОКФС  = ОКФС;
			СтруктураДанныхТитульный.Предст_ОКПО  = ОКПО;
			СтруктураДанныхТитульный.Предст_ОКВЭД = ОКВЭД;
			СтруктураДанныхТитульный.Предст_ОГРН  = ОГРН;
			
			СтруктураДанныхТитульный.Предст_Телефон = Телефон;
			СтруктураДанныхТитульный.Предст_ЭлПочта = АдресЭлектроннойПочтыОрганизации;
			
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи,
										СсылкаНаРегистрациюВНО = Неопределено) Экспорт
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ДолжнРук, ФамилияРук, ИмяРук, ОтчествоРук");
		
		Должн = СокрЛП(СведенияОбОрганизации.ДолжнРук);
		
		Фам = СокрЛП(СведенияОбОрганизации.ФамилияРук);
		Имя = СокрЛП(СведенияОбОрганизации.ИмяРук);
		Отч = СокрЛП(СведенияОбОрганизации.ОтчествоРук);
		
		
	Иначе
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФамилияИП, ИмяИП, ОтчествоИП");
		
		Должн = "Индивидуальный предприниматель";
		
		Фам = СокрЛП(СведенияОбОрганизации.ФамилияИП);
		Имя = СокрЛП(СведенияОбОрганизации.ИмяИП);
		Отч = СокрЛП(СведенияОбОрганизации.ОтчествоИП);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		ТДО = СтруктураДанныхТитульный.Области;
		
		Если ЗначениеЗаполнено(ТДО.ПризнакСтрахователя.Значение) Тогда
			
			ТДО.Рук_Должность.Значение = Должн;
			
			ТДО.Рук_Фамилия.Значение = Фам;
			ТДО.Рук_Имя.Значение = Имя;
			ТДО.Рук_Отчество.Значение = Отч;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ПризнакСтрахователя) Тогда
			
			СтруктураДанныхТитульный.Рук_Должность = Должн;
			
			СтруктураДанныхТитульный.Рук_Фамилия = Фам;
			СтруктураДанныхТитульный.Рук_Имя = Имя;
			СтруктураДанныхТитульный.Рук_Отчество = Отч;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитЭлементаСправочника(ИмяФормы, Ссылка) Экспорт
	
	Если Ссылка.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		Возврат Ссылка.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида
	= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ВерсияФормы",                  ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",          ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",               ПараметрыЗаписи.Автозаполнение);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																						|en = '%1'"),
		РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(
	ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "utf-8";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ЕФС1ОСС");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		
	КонецЦикла;
	
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2023Кв1") Тогда
		
		ДеревоРаздела = СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел2;
		Ветка = ДеревоРаздела.Строки[0];
		Если НЕ Ветка.Данные.Свойство("П000210Льгота") Тогда
			// Особая обработка: код льготы.
			Ветка.Данные.Вставить("П000210Льгота", "");
		КонецЕсли;
		СохраненныеДанныеОтчета.ДанныеМногоуровневыхРазделов.Вставить("Раздел2", ДеревоРаздела);
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("КодОргана", СокрЛП(Титульный.КодОргана));
	
	ПараметрыВыгрузки.Вставить("СтраховательПредставляетЗаСебя", ЗначениеЗаполнено(Титульный["ПризнакСтрахователя"]));
	
	Для каждого ИмяПок Из СтруктураРеквизитовФормы["Титульный_ИменаЗависимыхПоказателей"] Цикл
		ПараметрыВыгрузки.Вставить("Предст_" + ИмяПок, СокрЛП(Титульный["Предст_" + ИмяПок]));
		ПараметрыВыгрузки.Вставить(ИмяПок, ?(ПараметрыВыгрузки.СтраховательПредставляетЗаСебя, "", СокрЛП(Титульный[ИмяПок])));
	КонецЦикла;
	
	Если ПараметрыВыгрузки.СтраховательПредставляетЗаСебя Тогда
		
		ПараметрыВыгрузки.Вставить("ОГРН", "");
		ПараметрыВыгрузки.Вставить("ОГРНИП", "");
		
	Иначе
		
		ОГРН = СокрЛП(Титульный["ОГРН"]);
		Если СтрДлина(СокрЛП(Титульный["ИНН"])) = 12 Тогда
			ПараметрыВыгрузки.Вставить("ОГРН", "");
			ПараметрыВыгрузки.Вставить("ОГРНИП", ОГРН);
		Иначе
			ПараметрыВыгрузки.Вставить("ОГРН", ОГРН);
			ПараметрыВыгрузки.Вставить("ОГРНИП", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Предст_ОГРН = СокрЛП(Титульный["Предст_ОГРН"]);
	Если СтрДлина(СокрЛП(Титульный["Предст_ИНН"])) = 12 Тогда
		ПараметрыВыгрузки.Вставить("Предст_ОГРН", "");
		ПараметрыВыгрузки.Вставить("Предст_ОГРНИП", Предст_ОГРН);
	Иначе
		ПараметрыВыгрузки.Вставить("Предст_ОГРН", Предст_ОГРН);
		ПараметрыВыгрузки.Вставить("Предст_ОГРНИП", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("НомерКорректировки", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.Вид, "ЧЦ=3; ЧН=000; ЧВН="));
	ПараметрыВыгрузки.Вставить("Период", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПрекращениеДеятельности", ?(ЗначениеЗаполнено(Титульный.ПрекращениеДеятельности), "1", ""));
	
	ПараметрыВыгрузки.Вставить("Рук_Фамилия",  СокрЛП(Титульный.Рук_Фамилия));
	ПараметрыВыгрузки.Вставить("Рук_Имя",      СокрЛП(Титульный.Рук_Имя));
	ПараметрыВыгрузки.Вставить("Рук_Отчество", СокрЛП(Титульный.Рук_Отчество));
	
	ПараметрыВыгрузки.Вставить("Рук_Должность", СокрЛП(Титульный.Рук_Должность));
	
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", Формат(Титульный.ДатаПодписи, "ДФ=""гггг-ММ-дд"""));
	
	ПараметрыВыгрузки.Вставить("ГУИД", Строка(Новый УникальныйИдентификатор));
	
	ДатаВремя = ТекущаяДатаСеанса();
	Смещение_ЧетвертиЧаса = Окр(Число(ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()) / 900);
	Смещение_Часы = Цел(Смещение_ЧетвертиЧаса / 4);
	ДобавкаЧасов = ?(Смещение_Часы >= 0, "+", "") + Формат(Смещение_Часы, "ЧГ=;ЧЦ=2;ЧВН=;ЧН=00");
	ДобавкаМинут = СтрЗаменить(Формат((Смещение_ЧетвертиЧаса - Смещение_Часы * 4) * 15, "ЧГ=;ЧЦ=2;ЧВН=;ЧН=00"), "-", "");
	ПараметрыВыгрузки.Вставить("ДатаВремя",
	Формат(ДатаВремя, "ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""") + ДобавкаЧасов + ":" + ДобавкаМинут);
	
	ПараметрыВыгрузки.Вставить("ПрограммаПодготовки",
	РегламентированнаяОтчетность.НазваниеПрограммы() + " " + РегламентированнаяОтчетность.ВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи", Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ОСС");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
		
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки2024Кв1");
		
	Иначе// "ФормаОтчета2023Кв1"
		
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки2023Кв1");
		
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло((ПараметрыВыгрузки.ОтчетГод)) < 2023 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Календарный год не должен быть ранее 2023 года",
		"Титульный", "ОтчетГод");
		СтатусПроверки = Ложь;
	КонецЕсли;

	// Сведения о страхователе.
	//
	НачСообщ = "В Сведениях о страхователе ";
	
	ТекстСообщ = "";
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_РегНомер) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан регистрационный номер", "Титульный", "Предст_РегНомер");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегистрационныйНомерСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.Предст_РегНомер, ТекстСообщ) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		НачСообщ + "задан некорректный регистрационный номер. " + ТекстСообщ, "Титульный", "Предст_РегНомер");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.Предст_РегНомер) = 14 Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодОргана) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код территориального органа, принимающего ЕФС-1",
			"Титульный", "КодОргана");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодОргана) <> 6
			ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.КодОргана) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан код территориального органа, принимающего ЕФС-1, не состоящий из 6 цифр", "Титульный", "КодОргана");
			СтатусПроверки = Ложь;
		КонецЕсли;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.Предст_РегНомер) = 10 Тогда
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодОргана) И НЕ (СтрДлина(ПараметрыВыгрузки.КодОргана) = 6
			И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.КодОргана)) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан код территориального органа, принимающего ЕФС-1, не состоящий из 6 цифр. "
			+ "Код территориального органа указывать необязательно, если регистрационный номер страхователя состоит из 10 цифр",
			"Титульный", "КодОргана");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_НаимОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задано наименование организации, обособленного "
		+ "подразделения/фамилия, имя, отчество (при наличии) индивидуального предпринимателя, физического лица)",
		"Титульный", "Предст_НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ИНН) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан ИНН", "Титульный", "Предст_ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.Предст_ИНН) <> 10 И СтрДлина(ПараметрыВыгрузки.Предст_ИНН) <> 12)
		ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_ИНН) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ИНН, не состоящий из 10 или 12 цифр",
		"Титульный", "Предст_ИНН");
		СтатусПроверки = Ложь;
	Иначе
		Если СтрДлина(ПараметрыВыгрузки.Предст_ИНН) = 10 Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_КПП) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан КПП", "Титульный", "Предст_КПП");
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ПараметрыВыгрузки.Предст_КПП) <> 9 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан КПП, не состоящий из 9 символов",
				"Титульный", "Предст_КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОГРН) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан ОГРН. Если ОГРН отсутствует, укажите 0 (ноль)",
				"Титульный", "Предст_ОГРН");
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ (ПараметрыВыгрузки.Предст_ОГРН = "0" ИЛИ (СтрДлина(ПараметрыВыгрузки.Предст_ОГРН) = 13
				И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_ОГРН))) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
				+ "задан ОГРН, не состоящий из 13 цифр. Если ОГРН отсутствует, укажите 0 (ноль)",
				"Титульный", "Предст_ОГРН");
				СтатусПроверки = Ложь;
			КонецЕсли;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.Предст_ИНН) = 12 Тогда
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_КПП) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "КПП не должен быть задан при ИНН, состоящем из 12 цифр",
				"Титульный", "Предст_КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОГРНИП) И (СтрДлина(ПараметрыВыгрузки.Предст_ОГРНИП) <> 15
				ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_ОГРНИП)) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОГРНИП, не состоящий из 15 цифр",
				"Титульный", "Предст_ОГРН");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОКФС) Тогда
		ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "КодыПоОКФС");
		Если ВозмКоды.МассивЗначений <> Неопределено
			И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.Предст_ОКФС) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НачСообщ + "задан некорректный ОКФС. Возможны значения: " + ВозмКоды.СтрокаЗначений, "Титульный", "Предст_ОКФС");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОКОГУ) Тогда
		Если СтрДлина(ПараметрыВыгрузки.Предст_ОКОГУ) <> 7
			ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_ОКОГУ) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОКОГУ, не состоящий из 7 цифр",
			"Титульный", "Предст_ОКОГУ");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОКПО) Тогда
		Если НЕ (СтрДлина(ПараметрыВыгрузки.Предст_ОКПО) = 8
			ИЛИ СтрДлина(ПараметрыВыгрузки.Предст_ОКПО) = 10 ИЛИ СтрДлина(ПараметрыВыгрузки.Предст_ОКПО) = 14)
			ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_ОКПО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОКПО, не состоящий из 8, 10 или 14 цифр",
			"Титульный", "Предст_ОКПО");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ОКВЭД)
		И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.Предст_ОКВЭД) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "задан код по ОКВЭД, не соответствующий одному из шаблонов: "
		+ """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)", "Титульный", "Предст_ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
		
		ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "КодыКатСтрахФЛ");
		
		Если СтрДлина(ПараметрыВыгрузки.Предст_ИНН) = 12 Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_КодКатСтрахФЛ) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
				+ "не задан код категории страхователя - физического лица", "Титульный", "Предст_КодКатСтрахФЛ");
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКоды.МассивЗначений <> Неопределено
				И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.Предст_КодКатСтрахФЛ) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
				+ "задан некорректный код категории страхователя - физического лица. Возможны значения: "
				+ ВозмКоды.СтрокаЗначений, "Титульный", "Предст_КодКатСтрахФЛ");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_КодКатСтрахФЛ)
				И ВозмКоды.МассивЗначений <> Неопределено
				И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.Предст_КодКатСтрахФЛ) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
				+ "задан некорректный код категории страхователя - физического лица. Возможны значения: "
				+ ВозмКоды.СтрокаЗначений, "Титульный", "Предст_КодКатСтрахФЛ");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_Телефон)
		И НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Предст_Телефон) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан номер контактного телефона, не состоящий только из цифр",
		"Титульный", "Предст_Телефон");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстСообщ = "";
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Предст_ЭлПочта)
		И НЕ АдресЭлектроннойПочтыСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.Предст_ЭлПочта, ТекстСообщ) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан некорректный адрес электронной почты. " + ТекстСообщ,
		"Титульный", "Предст_ЭлПочта");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о страхователе, за которого представляются сведения.
	//
	Если НЕ ПараметрыВыгрузки.СтраховательПредставляетЗаСебя Тогда
		
		НачСообщ = "В Сведениях о страхователе, за которого представляются сведения, ";
		
		ТекстСообщ = "";
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РегНомер) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан регистрационный номер", "Титульный", "РегНомер");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегистрационныйНомерСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.РегНомер, ТекстСообщ) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НачСообщ + "задан некорректный регистрационный номер. " + ТекстСообщ, "Титульный", "РегНомер");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задано наименование организации, обособленного "
			+ "подразделения/фамилия, имя, отчество (при наличии) индивидуального предпринимателя, физического лица)",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан ИНН", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ИНН) <> 10 И СтрДлина(ПараметрыВыгрузки.ИНН) <> 12)
			ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ИНН, не состоящий из 10 или 12 цифр",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		Иначе
			Если СтрДлина(ПараметрыВыгрузки.ИНН) = 10 Тогда
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан КПП", "Титульный", "КПП");
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан КПП, не состоящий из 9 символов",
					"Титульный", "КПП");
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРН) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "не задан ОГРН. Если ОГРН отсутствует, укажите 0 (ноль)",
					"Титульный", "ОГРН");
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ (ПараметрыВыгрузки.ОГРН = "0" ИЛИ (СтрДлина(ПараметрыВыгрузки.ОГРН) = 13
					И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОГРН))) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
					+ "задан ОГРН, не состоящий из 13 цифр. Если ОГРН отсутствует, укажите 0 (ноль)",
					"Титульный", "ОГРН");
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) = 12 Тогда
				Если ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "КПП не должен быть задан при ИНН, состоящем из 12 цифр",
					"Титульный", "КПП");
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРНИП) И (СтрДлина(ПараметрыВыгрузки.ОГРНИП) <> 15
					ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОГРНИП)) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОГРНИП, не состоящий из 15 цифр",
					"Титульный", "ОГРН");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКФС) Тогда
			ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "КодыПоОКФС");
			Если ВозмКоды.МассивЗначений <> Неопределено
				И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.ОКФС) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				НачСообщ + "задан некорректный ОКФС. Возможны значения: " + ВозмКоды.СтрокаЗначений, "Титульный", "ОКФС");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКОГУ) Тогда
			Если СтрДлина(ПараметрыВыгрузки.ОКОГУ) <> 7
				ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОГУ) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОКОГУ, не состоящий из 7 цифр",
				"Титульный", "ОКОГУ");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКПО) Тогда
			Если НЕ (СтрДлина(ПараметрыВыгрузки.ОКПО) = 8
				ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) = 10 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) = 14)
				ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан ОКПО, не состоящий из 8, 10 или 14 цифр",
				"Титульный", "ОКПО");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД)
			И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "задан код по ОКВЭД, не соответствующий одному из шаблонов: "
			+ """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра)", "Титульный", "ОКВЭД");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
			
			ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "КодыКатСтрахФЛ");
			
			Если СтрДлина(ПараметрыВыгрузки.ИНН) = 12 Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодКатСтрахФЛ) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
					+ "не задан код категории страхователя - физического лица", "Титульный", "КодКатСтрахФЛ");
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКоды.МассивЗначений <> Неопределено
					И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.КодКатСтрахФЛ) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
					+ "задан некорректный код категории страхователя - физического лица. Возможны значения: "
					+ ВозмКоды.СтрокаЗначений, "Титульный", "КодКатСтрахФЛ");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодКатСтрахФЛ)
					И ВозмКоды.МассивЗначений <> Неопределено
					И ВозмКоды.МассивЗначений.Найти(ПараметрыВыгрузки.КодКатСтрахФЛ) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ
					+ "задан некорректный код категории страхователя - физического лица. Возможны значения: "
					+ ВозмКоды.СтрокаЗначений, "Титульный", "КодКатСтрахФЛ");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.Телефон)
			И НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.Телефон) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан номер контактного телефона, не состоящий только из цифр",
			"Титульный", "Телефон");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТекстСообщ = "";
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ЭлПочта)
			И НЕ АдресЭлектроннойПочтыСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.ЭлПочта, ТекстСообщ) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, НачСообщ + "задан некорректный адрес электронной почты. " + ТекстСообщ,
			"Титульный", "ЭлПочта");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	//Сведения о руководителе (уполномоченном представителе) страхователя.
	//
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Рук_Должность) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задано наименование должности руководителя (уполномоченного представителя) страхователя",
		"Титульный", "Рук_Должность");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Рук_Фамилия) И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Рук_Имя) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не заданы фамилия и имя руководителя (уполномоченного представителя) "
		+ "страхователя. Должно быть указано хотя бы одно из значений: фамилия или имя", "Титульный", "Рук_Фамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ДатаПодписи) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана дата подписи", "Титульный", "ДатаПодписи");
		СтатусПроверки = Ложь;
	ИначеЕсли Год(ПараметрыВыгрузки.ДатаПодписи) < 2023 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Дата подписи не должна быть ранее 2023 года", "Титульный", "ДатаПодписи");
		СтатусПроверки = Ложь;
	ИначеЕсли НачалоДня(ПараметрыВыгрузки.ДатаПодписи) > НачалоДня(ТекущаяДатаСеанса() + 86400) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Дата подписи не должна быть позже текущей даты более чем на 1 день",
		"Титульный", "ДатаПодписи");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.1.
	//
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	ДерРазд2 = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	СохрСтруктура = Неопределено;
	
	Дан2 = ДерРазд2.Строки[0].Данные;
	
	Льгота60 = СокрЛП(Дан2["П000210Льгота"]);
	Если ЗначениеЗаполнено(Льгота60) Тогда
		ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "П000210Льгота");
		Если ВозмКоды.МассивЗначений <> Неопределено И ВозмКоды.МассивЗначений.Найти(Льгота60) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2: задан некорректный код льготы. Возможны значения: "
			+ ВозмКоды.СтрокаЗначений, "Раздел2", "П000210Льгота", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 2.1.1.
	//
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	ДерРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел211"];
	СохрСтруктура = Неопределено;
	
	Если ЗаполненРаздел(ИмяФормы, ДерРазд, "Раздел211", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		Дан = ДерРазд.Строки[0].Данные;
		
		НомерСтраницы = 1;
		
		ИмяЗаполненногоПоказателя = "";
		ИмяЗаполненногоПоказателя = ?(ЗначениеЗаполнено(Дан2["П000210000503"]) И НЕ ЗначениеЗаполнено(
			ИмяЗаполненногоПоказателя), "П000210000503", ИмяЗаполненногоПоказателя);
		ИмяЗаполненногоПоказателя = ?(ЗначениеЗаполнено(Дан2["П000210000603"]) И НЕ ЗначениеЗаполнено(
			ИмяЗаполненногоПоказателя), "П000210000603", ИмяЗаполненногоПоказателя);
		ИмяЗаполненногоПоказателя = ?(ЗначениеЗаполнено(Дан2["П000210000703"]) И НЕ ЗначениеЗаполнено(
			ИмяЗаполненногоПоказателя), "П000210000703", ИмяЗаполненногоПоказателя);
		ИмяЗаполненногоПоказателя = ?(ЗначениеЗаполнено(Дан2["П000210000803"]) И НЕ ЗначениеЗаполнено(
			ИмяЗаполненногоПоказателя), "П000210000803", ИмяЗаполненногоПоказателя);
		
		Если ИмяЗаполненногоПоказателя <> "" Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1: строки 5-8 не должны быть заполнены, если заполнен подраздел 2.1.1",
			"Раздел2", ИмяЗаполненногоПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		// Раздел 2.1.1.
		//
		Возм_ТипыСтрах = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "ТипыСтрахователя");
		
		ЗначПок = СокрЛП(Дан["П002110000100"]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1: не задан тип страхователя",
			"Раздел211", "П002110000100", НомерСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли Возм_ТипыСтрах.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1: некорректно задан тип страхователя. Возможны значения: "
			+ Возм_ТипыСтрах.СтрокаЗначений, "Раздел211", "П002110000100", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТипСтрахователя = ЗначПок;
		
		Если Дан2["П000210000303"] <> Дан["П00211ВСЕГО09"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 9 должна быть равна сумме по графе 3 строки 3 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО09", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000403"] <> Дан["П00211ВСЕГО10"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 10 должна быть равна сумме по графе 3 строки 4 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО10", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000304"] <> Дан["П00211ВСЕГО11"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 11 должна быть равна сумме по графе 4 строки 3 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО11", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000404"] <> Дан["П00211ВСЕГО12"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 12 должна быть равна сумме по графе 4 строки 4 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО12", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000305"] <> Дан["П00211ВСЕГО13"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 13 должна быть равна сумме по графе 5 строки 3 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО13", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000405"] <> Дан["П00211ВСЕГО14"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 14 должна быть равна сумме по графе 5 строки 4 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО14", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000306"] <> Дан["П00211ВСЕГО15"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 15 должна быть равна сумме по графе 6 строки 3 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО15", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000406"] <> Дан["П00211ВСЕГО16"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 16 должна быть равна сумме по графе 6 строки 4 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО16", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000307"] <> Дан["П00211ВСЕГО17"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 17 должна быть равна сумме по графе 7 строки 3 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО17", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000407"] <> Дан["П00211ВСЕГО18"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 18 должна быть равна сумме по графе 7 строки 4 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО18", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000903"] <> Дан["П00211ВСЕГО19"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 19 должна быть равна сумме по графе 3 строки 9 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО19", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000904"] <> Дан["П00211ВСЕГО20"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 20 должна быть равна сумме по графе 4 строки 9 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО20", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000905"] <> Дан["П00211ВСЕГО22"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 22 должна быть равна сумме по графе 5 строки 9 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО22", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000906"] <> Дан["П00211ВСЕГО23"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 23 должна быть равна сумме по графе 6 строки 9 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО23", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Дан2["П000210000907"] <> Дан["П00211ВСЕГО24"] Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 2.1.1: всего сумма по графе 24 должна быть равна сумме по графе 7 строки 9 подраздела 2.1",
			"Раздел211", "П00211ВСЕГО24", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДеревоМнЧ = ДерРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			НомерСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
			
			Дан = СтрокаМнЧ.Данные;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Дан["П00211М100002"])) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> Основной ВЭД: в " + НомерСтроки
				+ " строке не задано наименование ВЭД организации", "Раздел211", "П00211М100002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Дан["П00211М100003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> Основной ВЭД: в " + НомерСтроки
				+ " строке не задан код ОКВЭД организации", "Раздел211", "П00211М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> Основной ВЭД: в " + НомерСтроки
				+ " строке задан некорректный код ОКВЭД. Допустимы значения, соответствующие шаблонам: "
				+ "XX, XX.X, XX.XX, XX.XX.X, XX.XX.XX (X - любая цифра)",
				"Раздел211", "П00211М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Дан["П00211М100004"])) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> Основной ВЭД: в " + НомерСтроки
				+ " строке не задано наименование организации", "Раздел211", "П00211М100004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ДеревоМнЧ = ДерРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М2];
		
		Если ЗаполненаМногострочнаяЧасть(ИмяФормы, ДеревоМнЧ, "Раздел211",
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			Если ТипСтрахователя <> "1" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Подраздел 2.1.1 -> Блок ""СКЕ"" может быть заполнен только при типе страхователя ""1""",
				"Раздел211", "П002110000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				НомерСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				
				Дан = СтрокаМнЧ.Данные;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(Дан["П00211М200002"])) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> СКЕ: в " + НомерСтроки
					+ " строке не задано наименование ВЭД СКЕ", "Раздел211", "П00211М200002_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Дан["П00211М200003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> СКЕ: в " + НомерСтроки
					+ " строке не задан код ОКВЭД СКЕ", "Раздел211", "П00211М200003_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> СКЕ: в " + НомерСтроки
					+ " строке задан некорректный код ОКВЭД. Допустимы значения, соответствующие шаблонам: "
					+ "XX, XX.X, XX.XX, XX.XX.X, XX.XX.XX (X - любая цифра)",
					"Раздел211", "П00211М200003_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(Дан["П00211М200004"])) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.1.1 -> СКЕ: в " + НомерСтроки
					+ " строке не задано наименование подразделения", "Раздел211", "П00211М200004_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 2.2.
	//
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	ДерРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел22"];
	СохрСтруктура = Неопределено;
	
	Если ЗаполненРаздел(ИмяФормы, ДерРазд, "Раздел22", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		НомерСтраницы = 1;
		
		ДеревоМнЧ = ДерРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			НомерСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
			
			Дан = СтрокаМнЧ.Данные;
			
			ЗначПок = СокрЛП(Дан["П00022М100002"]);
			ТекстСообщ = "";
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке не задан регистрационный номер", "Раздел22", "П00022М100002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РегистрационныйНомерСоответствуетТребованиям(ИмяФормы, ЗначПок, ТекстСообщ) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке задан некорректный регистрационный номер. " + ТекстСообщ,
				"Раздел22", "П00022М100002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИНН = СокрЛП(Дан["П00022М100003"]);
			КПП = СокрЛП(Дан["П00022М100004"]);
			Если НЕ ЗначениеЗаполнено(ИНН) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке не задан ИНН", "Раздел22", "П00022М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли (СтрДлина(ИНН) <> 10 И СтрДлина(ИНН) <> 12)
				ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ИНН) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке задан ИНН, не состоящий из 10 или 12 цифр", "Раздел22", "П00022М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если СтрДлина(ИНН) = 10 Тогда
					Если НЕ ЗначениеЗаполнено(КПП) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
						+ " строке не задан КПП", "Раздел22", "П00022М100004_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(КПП) <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
						+ " строке задан КПП, не состоящий из 9 символов", "Раздел22", "П00022М100004_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли СтрДлина(ИНН) = 12 Тогда
					Если ЗначениеЗаполнено(КПП) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
						+ " строке КПП не должен быть задан при ИНН, состоящем из 12 цифр",
						"Раздел22", "П00022М100004_" + НомерСтроки, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Дан["П00022М100005"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке не задан ОКВЭД", "Раздел22", "П00022М100005_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке задан некорректный ОКВЭД. Допустимы значения, соответствующие шаблонам: "
				+ "XX, XX.X, XX.XX, XX.XX.X, XX.XX.XX (X - любая цифра)",
				"Раздел22", "П00022М100005_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если Дан["П00022М100006"] < Дан["П00022М100007"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке значение по графе 6 не должно быть меньше значения по графе 7",
				"Раздел22", "П00022М100006_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если Дан["П00022М100008"] < Дан["П00022М100009"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке значение по графе 8 не должно быть меньше значения по графе 9",
				"Раздел22", "П00022М100008_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если Дан["П00022М100010"] < Дан["П00022М100011"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке значение по графе 10 не должно быть меньше значения по графе 11",
				"Раздел22", "П00022М100010_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если Дан["П00022М100012"] < Дан["П00022М100013"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке значение по графе 12 не должно быть меньше значения по графе 13",
				"Раздел22", "П00022М100012_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если Дан["П00022М100014"] < Дан["П00022М100015"] Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 2.2: в " + НомерСтроки
				+ " строке значение по графе 14 не должно быть меньше значения по графе 15",
				"Раздел22", "П00022М100014_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено) Экспорт
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(ИмяФормы,
									  СтраницаРаздела,
									  ИмяРаздела,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтраницаРаздела(ИмяФормы,
								 Знач СтраницаРаздела,
								 Знач ИмяРаздела,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ДопПараметры = Неопределено)
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ИмяФормы,
											 ДеревоМнЧ,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ИмяФормы,
								ДеревоПодчРаздела,
								ИмяПодчРаздела,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов,
								ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаМногострочнаяЧасть(ИмяФормы,
									Знач ДеревоМнЧ,
									Знач ИмяРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов,
									ДопПараметры = Неопределено)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
											   СтрокаМнЧ,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
										  Знач СтрокаМнЧ,
										  Знач ИмяРаздела,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов,
										  ДопПараметры = Неопределено)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
													   СтрокаПодчМнЧ,
													   ИмяРаздела,
													   СтруктураРеквизитовФормы,
													   СтруктураМногоуровневыхРазделов,
													   ДопПараметры) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, Знач ИмяРаздела, ДопПараметры = Неопределено)
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

Функция РегистрационныйНомерСоответствуетТребованиям(ИмяФормы, Знач РегНомер, ТекстСообщения)
	
	ТекстСообщенияОбщий = НСтр(
	"ru = 'Регистрационный номер должен соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХХХХ"", ""ХХХХХХХХХХ"" (X - любая цифра)';
	|en = 'Регистрационный номер должен соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХХХХ"", ""ХХХХХХХХХХ"" (X - любая цифра)'");
	
	РегНомер = СокрЛП(РегНомер);
	
	Если СтрДлина(РегНомер) = 14 Тогда
		
		Для Ном = 1 По 14 Цикл
			
			ТекСимв = Сред(РегНомер, Ном, 1);
			
			Если Ном = 4 ИЛИ Ном = 8 Тогда
				РегНомерСоответствуетТребованиям = ТекСимв = "-";
			Иначе
				РегНомерСоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
			КонецЕсли;
			
			Если НЕ РегНомерСоответствуетТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтрДлина(РегНомер) = 10 Тогда
		
		Для Ном = 1 По 10 Цикл
			
			ТекСимв = Сред(РегНомер, Ном, 1);
			
			РегНомерСоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
			
			Если НЕ РегНомерСоответствуетТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = ТекстСообщенияОбщий;
		
	КонецЕсли;
	
	Возврат ?(ТекстСообщения = "", Истина, Ложь);
	
КонецФункции

Функция АдресЭлектроннойПочтыСоответствуетТребованиям(ИмяФормы, Знач ЭлПочта, ТекстСообщения)
	
	ЭлПочта = СокрЛП(ЭлПочта);
	
	Если СтрНайти(ЭлПочта, "@") = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсутствует символ ""@""';
								|en = 'Отсутствует символ ""@""'");
		
	ИначеЕсли СтрНайти(ЭлПочта, ".") = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсутствует символ "".""';
								|en = 'Отсутствует символ "".""'");
		
	ИначеЕсли СтрНачинаетсяС(ЭлПочта, "@") Тогда
		
		ТекстСообщения = НСтр("ru = 'Адрес не должен начинаться с символа ""@""';
								|en = 'Адрес не должен начинаться с символа ""@""'");
		
	ИначеЕсли СтрЗаканчиваетсяНа(ЭлПочта, ".") Тогда
		
		ТекстСообщения = НСтр("ru = 'Адрес не должен заканчиваться символом "".""';
								|en = 'Адрес не должен заканчиваться символом "".""'");
		
	Иначе
		
		ПозицияСимв1_ПервыйСлева  = СтрНайти(ЭлПочта, "@");
		ПозицияСимв2_ПервыйСправа = СтрНайти(ЭлПочта, ".", НаправлениеПоиска.СКонца);
		
		Если ПозицияСимв1_ПервыйСлева > ПозицияСимв2_ПервыйСправа ИЛИ СтрНайти(ЭлПочта, "@.") > 0 Тогда
			
			ТекстСообщения = НСтр(
			"ru = 'Символ ""."" должен содержаться справа от символа ""@"", но не должен следовать сразу за ним';
			|en = 'Символ ""."" должен содержаться справа от символа ""@"", но не должен следовать сразу за ним'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(ТекстСообщения = "", Истина, Ложь);
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, ИмяГруппыЗначений)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
		
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2024Кв1");
		
	Иначе// "ФормаОтчета2023Кв1"
		
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2023Кв1");
		
	КонецЕсли;
	
	МассивЗначений = Неопределено;
	СтрокаЗначений = Неопределено;
	
	МассивЧисел = Новый Массив;
	
	ПереченьЦелыхУникальныхЧисел = Истина;
	
	Область = МакетСоставаПоказателей.Области.Найти(ИмяГруппыЗначений);
	Если Область <> Неопределено Тогда
		МассивЗначений = Новый Массив;
		ВерхОбласти = Область.Верх;
		НизОбласти  = Область.Низ;
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			ТекЗначение = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				Если ПереченьЦелыхУникальныхЧисел Тогда
					ПровЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекЗначение);
					Если ТипЗнч(ПровЗначение) = Тип("Число") И Формат(ПровЗначение, "ЧГ=") = Формат(Цел(ПровЗначение), "ЧГ=")
						И МассивЧисел.Найти(ПровЗначение) = Неопределено Тогда
						МассивЧисел.Добавить(ПровЗначение);
					Иначе
						ПереченьЦелыхУникальныхЧисел = Ложь;
					КонецЕсли;
				КонецЕсли;
				МассивЗначений.Добавить(ТекЗначение);
			КонецЕсли;
		КонецЦикла;
		Если ПереченьЦелыхУникальныхЧисел Тогда
			СтрокаЗначений = ПредставлениеПеречняЦелыхУникальныхЧисел(МассивЧисел);
		Иначе
			СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

Функция ПредставлениеПеречняЦелыхУникальныхЧисел(Знач МассивЧисел, Разделитель = ", ", Выводить123Как1_3 = Истина)
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	Если Выводить123Как1_3 Тогда
		
		ПредЗнач = Неопределено;
		ПредПредЗнач = Неопределено;
		СледЗнач = Неопределено;
		
		НачИнтервала = Неопределено;
		
		Для НомСч = 0 По МассивЧисел.Количество() - 1 Цикл
			
			ТекЗнач = МассивЧисел[НомСч];
			
			ПредЗнач = ?(НомСч = 0, Неопределено, МассивЧисел[НомСч - 1]);
			
			ПредПредЗнач = ?(НомСч = 0 ИЛИ НомСч = 1, Неопределено, МассивЧисел[НомСч - 2]);
			
			СледЗнач = ?(НомСч = МассивЧисел.Количество() - 1, Неопределено, МассивЧисел[НомСч + 1]);
			
			ЭтоВнутренняяЧастьИнтервала
			= ПредЗнач <> Неопределено И СледЗнач <> Неопределено И ПредЗнач + 1 = ТекЗнач И ТекЗнач + 1 = СледЗнач;
			
			ЭтоКонецИнтервала
			= (СледЗнач = Неопределено ИЛИ (СледЗнач <> Неопределено И ТекЗнач + 1 <> СледЗнач))
			И ПредПредЗнач <> Неопределено И ПредЗнач + 1 = ТекЗнач И ПредПредЗнач + 1 = ПредЗнач;
			
			Если ЭтоКонецИнтервала Тогда
				Результат = Результат + "-" + Формат(ТекЗнач, "ЧГ=");
			ИначеЕсли НЕ ЭтоВнутренняяЧастьИнтервала Тогда
				Результат = Результат + ?(Результат = "", "", Разделитель) + Формат(ТекЗнач, "ЧГ=;ЧН=");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для НомСч = 0 По МассивЧисел.Количество() - 1 Цикл
			
			ТекЗнач = МассивЧисел[НомСч];
			МассивЧисел[НомСч] = Формат(ТекЗнач, "ЧГ=");
			
		КонецЦикла;
		
		Результат = СтрСоединить(МассивЧисел, Разделитель);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки)
	
	Если СтрДлина(ПараметрыВыгрузки.Предст_РегНомер) = 10 Тогда
		
		Возврат "ПФР_" + ПараметрыВыгрузки.Предст_РегНомер
		+ "_ЕФС-1_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд") + "_" + ПараметрыВыгрузки.ГУИД;
		
	Иначе
		
		Возврат "ПФР_" + ПараметрыВыгрузки.Предст_РегНомер + "_" + ПараметрыВыгрузки.КодОргана
		+ "_ЕФС-1_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд") + "_" + ПараметрыВыгрузки.ГУИД;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	ДанныеМногоуровневыхРазделов = СохрСтруктура.ДанныеМногоуровневыхРазделов;
	СохрСтруктура = Неопределено;
	
	ДеревоРазд = ДанныеМногоуровневыхРазделов["Раздел2"];
	Дан = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ДеревоРазд.Строки[0].Данные);
	Дан.Вставить("НомерКорректировки",      ПараметрыВыгрузки["НомерКорректировки"]);
	Дан.Вставить("Период",                  ПараметрыВыгрузки["Период"]);
	Дан.Вставить("ОтчетГод",                ПараметрыВыгрузки["ОтчетГод"]);
	Дан.Вставить("ПрекращениеДеятельности", ПараметрыВыгрузки["ПрекращениеДеятельности"]);
	Если НЕ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Раздел211"], "Раздел211",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		Для каждого Эл Из УзелРодитель.Строки Цикл
			Если Эл.Код = "РССВ" Тогда
				Для каждого Эл_ Из Эл.Строки Цикл
					Если Эл_.Код = "СтраховойТариф" ИЛИ Эл_.Код = "СкидкаТариф"
						ИЛИ Эл_.Код = "НадбавкаТариф" ИЛИ Эл_.Код = "ТарифУчСкидНадб" Тогда
						Эл_.Обязательность = "О";
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Дан, УзелРодитель);
	
	ДеревоРазд = ДанныеМногоуровневыхРазделов["Раздел211"];
	РССВ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РССВ");
	ОблБаза = ПолучитьПодчиненныйЭлемент(ИмяФормы, РССВ, "ОблБаза");
	Если ЗаполненРаздел(ИмяФормы, ДеревоРазд, "Раздел211",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		Дан = ДеревоРазд.Строки[0].Данные;
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Дан, ОблБаза);
		ОсновнойВЭД = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОблБаза, "ОсновнойВЭД");
		ДеревоМнЧ = ДеревоРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОблБаза, ОсновнойВЭД));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ОсновнойВЭД);
		СКЕ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОблБаза, "СКЕ");
		ДеревоМнЧ = ДеревоРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М2];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОблБаза, СКЕ));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СКЕ);
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ОблБаза);
	КонецЕсли;
	
	ДеревоРазд = ДанныеМногоуровневыхРазделов["Раздел22"];
	ИсчСтрахВзнос = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ИсчСтрахВзнос");
	Если ЗаполненРаздел(ИмяФормы, ДеревоРазд, "Раздел22",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		ДеревоМнЧ = ДеревоРазд.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
		Запись = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИсчСтрахВзнос, "Запись");
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ИсчСтрахВзнос, Запись));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Запись);
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(ИсчСтрахВзнос);
	КонецЕсли;
	
	ДеревоРазд = ДанныеМногоуровневыхРазделов["Раздел23"];
	Дан = ДеревоРазд.Строки[0].Данные;
	РПО = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РПО");
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Дан, РПО);
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если Узел.Код = "ТарифУчСкидНадб" Тогда
			
			// Особая обработка.
			СтрокаФормата = "ЧРД=.;ЧН=0.000;";
			
		КонецЕсли;
		
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ Узел.Значение = "0.000" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы,
							ДеревоВыгрузки,
							ПараметрыВыгрузки,
							КодировкаФайлаВыгрузки,
							СтруктураРеквизитовФормы,
							СтруктураМногоуровневыхРазделов)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки,
	СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы,
								 СтрокаДерева,
								 ПотокXML,
								 ПараметрыВыгрузки,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ЭДПФР");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
			
			ПотокXML.ЗаписатьАтрибут("xmlns", "http://пф.рф/ЕФС-1/2024-01-01");
			
		Иначе// "ФормаОтчета2023Кв1"
			
			ПотокXML.ЗаписатьАтрибут("xmlns", "http://пф.рф/ЕФС-1/2022-09-22");
			
		КонецЕсли;
		
		ПотокXML.ЗаписатьАтрибут("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
			
			ПотокXML.ЗаписатьАтрибут("xmlns:ЕФС", "http://пф.рф/ВС/ЕФС/2024-01-01");
			
		Иначе// "ФормаОтчета2023Кв1"
			
			ПотокXML.ЗаписатьАтрибут("xmlns:ЕФС", "http://пф.рф/ВС/ЕФС/2022-09-22");
			
		КонецЕсли;
		
		ПотокXML.ЗаписатьАтрибут("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
		ПотокXML.ЗаписатьАтрибут("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки,
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		ПараметрыПечати.СохраненныйОтчет.Организация);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ДанныеРазделов = Новый Структура;
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",          ВидПечати);
		
		ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров,
		СтруктураРеквизитовФормы, ДанныеРазделов, СтруктураМногоуровневыхРазделов);
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	СтруктураРеквизитовФормы, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета + НСтр("ru = ' за ';
																				|en = ' за '")
	+ ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ФП = Истина")
	+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка",    АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка", ИмяФайлаПечатногоБланка);
	
	Возврат ПечатныйБланк;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов, СтруктураМногоуровневыхРазделов)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
		
		Макет = ЭтотОбъект.ПолучитьМакет("ПечатныйБланк2024Кв1");
		
	Иначе// "ФормаОтчета2023Кв1"
		
		Макет = ЭтотОбъект.ПолучитьМакет("ПечатныйБланк2023Кв1");
		
	КонецЕсли;
	
	НомерСтраницы = 0;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ПечФорма = Макет.Получитьобласть("Титул");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ПечФорма.Автомасштаб = Истина;
		
		ПечФорма.Параметры.Заполнить(ДанныеРазделов.Титульный);
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
			
			ИменаПоказателей = СтрРазделить("ИНН,КПП,ОКФС,ОКОГУ,ОКПО,ОКВЭД,ОГРН,КодКатСтрахФЛ,Телефон", ",", Ложь);
			
		Иначе// "ФормаОтчета2024Кв1"
			
			ИменаПоказателей = СтрРазделить("ИНН,КПП,ОКФС,ОКОГУ,ОКПО,ОКВЭД,ОГРН,Телефон", ",", Ложь);
			
		КонецЕсли;
		
		ЗначенияВЗнакоместах = Новый Структура;
		Для каждого ИмяПок Из ИменаПоказателей Цикл
			
			КолЗнакомест = 0;
			КолЗнакомест = ?(ИмяПок = "ИНН",  12, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "КПП",   9, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОКФС",  2, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОКОГУ", 7, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОКПО", 14, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОКВЭД", 6, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОГРН" ИЛИ ИмяПок = "Телефон", 15, КолЗнакомест);
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
				
				КолЗнакомест = ?(ИмяПок = "КодКатСтрахФЛ", 4, КолЗнакомест);
				
			КонецЕсли;
			
			Предст_ИмяПок = "Предст_" + ИмяПок;
			ЗначПок = СокрЛП(ДанныеРазделов.Титульный[Предст_ИмяПок]);
			Если Предст_ИмяПок = "Предст_ИНН" Тогда
				ЗначПок = ?(СтрДлина(ЗначПок) = 10, ЗначПок + "--", ЗначПок);
			ИначеЕсли Предст_ИмяПок = "Предст_ОКПО" Тогда
				ЗначПок = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначПок, 14, " ", "Справа");
			ИначеЕсли Предст_ИмяПок = "Предст_ОКВЭД" Тогда
				ЗначПок = СтрЗаменить(ЗначПок, ".", "");
			ИначеЕсли Предст_ИмяПок = "Предст_ОГРН" Тогда
				ЗначПок = ?(СтрДлина(ЗначПок) = 13, "00" + ЗначПок, ЗначПок);
			КонецЕсли;
			Для НомПоз = 1 По КолЗнакомест Цикл
				ЗначенияВЗнакоместах.Вставить(Предст_ИмяПок + НомПоз, Сред(ЗначПок, НомПоз, 1));
			КонецЦикла;
			
			ЗначПок = СокрЛП(ДанныеРазделов.Титульный[ИмяПок]);
			Если ИмяПок = "ИНН" Тогда
				ЗначПок = ?(СтрДлина(ЗначПок) = 10, ЗначПок + "--", ЗначПок);
			ИначеЕсли Предст_ИмяПок = "ОКПО" Тогда
				ЗначПок = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначПок, 14, " ", "Справа");
			ИначеЕсли ИмяПок = "ОКВЭД" Тогда
				ЗначПок = СтрЗаменить(ЗначПок, ".", "");
			ИначеЕсли ИмяПок = "ОГРН" Тогда
				ЗначПок = ?(СтрДлина(ЗначПок) = 13, "00" + ЗначПок, ЗначПок);
			ИначеЕсли ИмяПок = "Телефон" Тогда
				Продолжить;
			КонецЕсли;
			Для НомПоз = 1 По КолЗнакомест Цикл
				ЗначенияВЗнакоместах.Вставить(ИмяПок + НомПоз, Сред(ЗначПок, НомПоз, 1));
			КонецЦикла;
			
		КонецЦикла;
		ПечФорма.Параметры.Заполнить(ЗначенияВЗнакоместах);
		
		Фам = СокрЛП(ДанныеРазделов.Титульный["Рук_Фамилия"]);
		Имя = СокрЛП(ДанныеРазделов.Титульный["Рук_Имя"]);
		Отч = СокрЛП(ДанныеРазделов.Титульный["Рук_Отчество"]);
		ФИОРук = "";
		Если ЗначениеЗаполнено(Фам) Тогда
			ФИОРук = Фам;
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ФИОРук = ?(ЗначениеЗаполнено(ФИОРук), ФИОРук + " " + Имя, Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отч) Тогда
			ФИОРук = ?(ЗначениеЗаполнено(ФИОРук), ФИОРук + " " + Отч, Отч);
		КонецЕсли;
		ПечФорма.Параметры.ФИОРук = ФИОРук;
		
		ДатаПодписи_Мас = СтрРазделить(Формат(ДанныеРазделов.Титульный["ДатаПодписи"], "ДФ=""дд ММММ гггг"""), " ", Ложь);
		Если ДатаПодписи_Мас.Количество() = 3 Тогда
			ПечФорма.Параметры.ДатаПодписи_Ч = ДатаПодписи_Мас[0];
			ПечФорма.Параметры.ДатаПодписи_М = ДатаПодписи_Мас[1];
			ПечФорма.Параметры.ДатаПодписи_Г = ДатаПодписи_Мас[2];
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
		СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		ПечФорма = Макет.Получитьобласть("Разд2");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		СтруктураПараметров.Вставить("ОриентацияЛиста", "Ландшафт");
		
		ПечФорма.Параметры.Заполнить(ДанныеРазделов.Титульный);
		
		ИменаПоказателей = СтрРазделить("НомерКорректировки,Период,ОтчетГод", ",", Ложь);
		ЗначенияВЗнакоместах = Новый Структура;
		Для каждого ИмяПок Из ИменаПоказателей Цикл
			КолЗнакомест = 0;
			КолЗнакомест = ?(ИмяПок = "НомерКорректировки", 3, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "Период",             2, КолЗнакомест);
			КолЗнакомест = ?(ИмяПок = "ОтчетГод",           4, КолЗнакомест);
			ЗначПок = СокрЛП(ДанныеРазделов.Титульный[ИмяПок]);
			Если ИмяПок = "НомерКорректировки" Тогда
				ЗначПок = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначПок, 3, "0", "Слева");
			КонецЕсли;
			Для НомПоз = 1 По КолЗнакомест Цикл
				ЗначенияВЗнакоместах.Вставить(ИмяПок + НомПоз, Сред(ЗначПок, НомПоз, 1));
			КонецЦикла;
		КонецЦикла;
		ПечФорма.Параметры.Заполнить(ЗначенияВЗнакоместах);
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		Дан = ДеревоРаздела.Строки[0].Данные;
		
		ИменаПоказателей = СтрРазделить("П000020000100,П000020000200,П000020000300,П000020000400", ",", Ложь);
		ЗначенияВЗнакоместах = Новый Структура;
		Если Дан["П000020000100"] > 999999 ИЛИ Дан["П000020000200"] > 999999
			ИЛИ Дан["П000020000300"] > 999999 ИЛИ Дан["П000020000400"] > 999999 Тогда
			КолЗнакомест = 7;
			ТекСекция = Макет.Получитьобласть("Численность7Ячеек");
		Иначе
			КолЗнакомест = 6;
			ТекСекция = Макет.Получитьобласть("Численность6Ячеек");
		КонецЕсли;
		Для каждого ИмяПок Из ИменаПоказателей Цикл
			ЗначПок = Формат(Дан[ИмяПок], "ЧГ=;ЧН=0");
			ЗначПок = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначПок, КолЗнакомест, " ", "Слева");
			Для НомПоз = 1 По КолЗнакомест Цикл
				ЗначенияВЗнакоместах.Вставить(ИмяПок + "_" + НомПоз, Сред(ЗначПок, НомПоз, 1));
			КонецЦикла;
		КонецЦикла;
		ТекСекция.Параметры.Заполнить(ЗначенияВЗнакоместах);
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
			
			ТекСекция.Параметры["П000210Льгота"] = Дан["П000210Льгота"];
			
		КонецЕсли;
		
		ПечФорма.Вывести(ТекСекция);
		
		ТекСекция = Макет.Получитьобласть("Подр21");
		ТекСекция.Параметры.Заполнить(Дан);
		ПечФорма.Вывести(ТекСекция);
		
		НомерСтраницы = НомерСтраницы + 1;
		СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
		СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	ИначеЕсли ИмяТекРаздела = "Раздел211" Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел211"]);
		
		Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел211",
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			ПечФорма = Макет.Получитьобласть("ШапкаПодр211");
			ПечФорма.ПолеСверху = 5;
			ПечФорма.ПолеСправа = 5;
			ПечФорма.ПолеСнизу  = 5;
			ПечФорма.ПолеСлева  = 5;
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			СтруктураПараметров.Вставить("ОриентацияЛиста", "Ландшафт");
			
			ПодшапкаТабл211 = Макет.Получитьобласть("ПодшапкаТабл211");
			ВсегоТабл       = Макет.Получитьобласть("ВсегоТабл");
			СтрокаТаблОВЭД  = Макет.Получитьобласть("СтрокаТаблОВЭД");
			СтрокаТаблСКЕ   = Макет.Получитьобласть("СтрокаТаблСКЕ");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
				
				Сноска = Макет.Получитьобласть("Сноска211");
				
			КонецЕсли;
			
			МассивПроверки = Новый Массив;
			
			Ветка = ДеревоРаздела.Строки[0];
			Дан = Ветка.Данные;
			
			ЗначенияВЗнакоместах = Новый Структура;
			Если СтрРазделить("1,2,3", ",", Ложь).Найти(СокрЛП(Дан["П002110000100"])) <> Неопределено Тогда
				ЗначенияВЗнакоместах.Вставить("ТипСтрахователя" + СокрЛП(Дан["П002110000100"]), "V");
			КонецЕсли;
			ПечФорма.Параметры.Заполнить(ЗначенияВЗнакоместах);
			
			ПечФорма.Вывести(ПодшапкаТабл211);
			
			ВсегоТабл.Параметры.Заполнить(Дан);
			ПечФорма.Вывести(ВсегоТабл);
			
			ДеревоМнЧ_1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М1];
			
			Для каждого СтрокаМнЧ_1 Из ДеревоМнЧ_1.Строки Цикл
				
				Дан_1 = СтрокаМнЧ_1.Данные;
				
				Для ИндПарам = 0 По СтрокаТаблОВЭД.Параметры.Количество() - 1 Цикл
					СтрокаТаблОВЭД.Параметры[ИндПарам] = Неопределено;
				КонецЦикла;
				
				СтрокаТаблОВЭД.Параметры.Заполнить(Дан_1);
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(СтрокаТаблОВЭД);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
					СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					ПечФорма.Вывести(ПодшапкаТабл211);
					
				КонецЕсли;
				
				ПечФорма.Вывести(СтрокаТаблОВЭД);
				ПечФормаСтрокаТаблОВЭД = ПечФорма.Область("СтрокаТаблОВЭД");
				ПечФормаСтрокаТаблОВЭД.Имя = "_" + Формат(ПечФормаСтрокаТаблОВЭД.Верх, "ЧГ=");
				
			КонецЦикла;
			
			ДеревоМнЧ_2 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М2];
			
			Для каждого СтрокаМнЧ_2 Из ДеревоМнЧ_2.Строки Цикл
				
				Дан_2 = СтрокаМнЧ_2.Данные;
				
				Для ИндПарам = 0 По СтрокаТаблСКЕ.Параметры.Количество() - 1 Цикл
					СтрокаТаблСКЕ.Параметры[ИндПарам] = Неопределено;
				КонецЦикла;
				
				СтрокаТаблСКЕ.Параметры.Заполнить(Дан_2);
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(СтрокаТаблСКЕ);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
					СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					ПечФорма.Вывести(ПодшапкаТабл211);
					
				КонецЕсли;
				
				ПечФорма.Вывести(СтрокаТаблСКЕ);
				ПечФормаСтрокаТаблСКЕ = ПечФорма.Область("СтрокаТаблСКЕ");
				ПечФормаСтрокаТаблСКЕ.Имя = "_" + Формат(ПечФормаСтрокаТаблСКЕ.Верх, "ЧГ=");
				
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв1") Тогда
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(Сноска);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
					СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					
				КонецЕсли;
				
				ПечФорма.Вывести(Сноска);
				
			КонецЕсли;
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
			СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел22" Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"]);
		
		Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел22",
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			ПечФорма = Макет.Получитьобласть("ШапкаПодр22");
			ПечФорма.ПолеСверху = 5;
			ПечФорма.ПолеСправа = 5;
			ПечФорма.ПолеСнизу  = 5;
			ПечФорма.ПолеСлева  = 5;
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			СтруктураПараметров.Вставить("ОриентацияЛиста", "Ландшафт");
			
			ПодшапкаТабл22 = Макет.Получитьобласть("ПодшапкаТабл22");
			СтрокаТабл22  = Макет.Получитьобласть("СтрокаТабл22");
			
			МассивПроверки = Новый Массив;
			
			ПечФорма.Вывести(ПодшапкаТабл22);
			
			ДеревоМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				Дан = СтрокаМнЧ.Данные;
				
				Для ИндПарам = 0 По СтрокаТабл22.Параметры.Количество() - 1 Цикл
					СтрокаТабл22.Параметры[ИндПарам] = Неопределено;
				КонецЦикла;
				
				СтрокаТабл22.Параметры.Заполнить(Дан);
				
				МассивПроверки.Очистить();
				МассивПроверки.Добавить(СтрокаТабл22);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					
					СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
					СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ПечФорма.Очистить();
					ПечФорма.Вывести(ПодшапкаТабл22);
					
				КонецЕсли;
				
				ПечФорма.Вывести(СтрокаТабл22);
				ПечФормаСтрокаТабл22 = ПечФорма.Область("СтрокаТабл22");
				ПечФормаСтрокаТабл22.Имя = "_" + Формат(ПечФормаСтрокаТабл22.Верх, "ЧГ=");
				
			КонецЦикла;
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
			СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Раздел23" Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел23"]);
		
		ПечФорма = Макет.Получитьобласть("Подр23");
		ПечФорма.ПолеСверху = 5;
		ПечФорма.ПолеСправа = 5;
		ПечФорма.ПолеСнизу  = 5;
		ПечФорма.ПолеСлева  = 5;
		ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПечФорма.Автомасштаб = Истина;
		
		СтруктураПараметров.Вставить("ОриентацияЛиста", "Ландшафт");
		
		Дан = ДеревоРаздела.Строки[0].Данные;
		
		ПечФорма.Параметры.Заполнить(Дан);
		
		НомерСтраницы = НомерСтраницы + 1;
		СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
		СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли