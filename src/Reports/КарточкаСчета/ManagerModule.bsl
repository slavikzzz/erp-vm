#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция-конструктор для хранения настроек отчета в универсальном формате.
// 
// Возвращаемое значение:
//  Структура - БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета().
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Общая структура настроек.
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();

	ПараметрыОтчета.ИдентификаторОтчета = "КарточкаСчета";
	БухгалтерскиеОтчеты.ДобавитьПоказателиВПараметры(ПараметрыОтчета, ПолучитьНаборПоказателей());

	ОтчетОбъект = Отчеты.ОборотыСчета.Создать();
	// Особенностью отчета Карточка счета является безусловное размещение дополнительных полей вместе с полями-субконто.
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей",
		БухгалтерскиеОтчетыКлиентСервер.РазмещениеДополнительныхПолей().ВместеСВладельцем);
	ПараметрыОтчета.Вставить("ДополнительныеПоля", ОтчетОбъект.ДополнительныеПоля.ВыгрузитьКолонки());
	
	ПараметрыОтчета.Вставить("Периодичность", БухгалтерскиеОтчетыКлиентСервер.Периодичность().Период); // без детализации по периодам
	ПараметрыОтчета.Вставить("Счет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());

	Возврат ПараметрыОтчета;
	
КонецФункции

// Заполняет структуру настроек универсального формата из реквизитов формы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета()
//  Форма - УправляемаяФорма - содержит основновной реквизит Отчет .
//
Процедура ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма) Экспорт
	
	БухгалтерскиеОтчеты.ЗаполнитьПараметрыИзФормы(ПараметрыОтчета, Форма);

	Отчет = Форма.Отчет;

	ПараметрыОтчета.Периодичность = Отчет.Периодичность;
	ПараметрыОтчета.Счет = Отчет.Счет;
	
КонецПроцедуры

// Инициализирует представления полей-субконто.
//
// Параметры:
//  Схема        - СхемаКомпоновкиДанных, Строка - обрабатываемая схема или адрес, где она лежит.
//  Счет         - ПланСчетовСсылка.Хозрасчетный - источник видов субконто.
//
Процедура НастроитьСхемуКомпоновкиДанных(Схема, Счет) Экспорт
	
	// В наборах данных есть три вида полей, требующих подготовки, после того как пользователь выбрал в отчете конкретный счет:
	// * Субконто1/2/3 . Используются, чтобы пользователь мог в интерфейсе выбрать субконто конкретного вида. Ему присваивается нужный тип.
	// * Поля доп.наборов . Используются, чтобы получить данные из регистров сведений, связанные с Субконто1. Нужно включить их использование,
	//   если Субконто1 по выбранному пользователем счету имеет тип ОС, НМА или физлица.
	// * Поля основного набора, имеющие имена как в доп.наборах. Эти поля аналогично с полями субконто применяются лишь для выбора
	//   пользователем в интерфейса и аналогично с полями доп.наборов отключаются, если Субконто1 не подходящего типа.
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Схема) = Тип("Строка") Тогда
		СхемаКомпоновкиДанныхАдрес = Схема;
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Схема);
	Иначе
		СхемаКомпоновкиДанныхАдрес = "";
		СхемаКомпоновкиДанных = Схема;
	КонецЕсли;

	ОсновнойНабор = СхемаКомпоновкиДанных.НаборыДанных.Проводки;
	ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ЭталонныйНабор = Неопределено;
	ПараметрыЭталонногоНабора = Неопределено;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	// Изменение представления и наложения ограничения типа значения.
	Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл

		Поле = ОсновнойНабор.Поля.Найти("Субконто" + Индекс);
		Если Поле = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Поле.ТипЗначения = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"];
		Поле.Заголовок   = СвойстваСчета["ВидСубконто" + Индекс + "Наименование"];
		
		НаборПараметров = Неопределено;
		Если Поле.ТипЗначения.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
			НаборПараметров = ПараметрыОС;
			ЭталонныйНабор = "ДанныеОСДт";
		ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
			НаборПараметров = ПараметрыНМА;
			ЭталонныйНабор = "ДанныеНМАДт";
		ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			НаборПараметров = ПараметрыФизЛица;
			ЭталонныйНабор = "ДанныеФизЛицаДт";
		КонецЕсли;
		Если НаборПараметров <> Неопределено Тогда
			НаборПараметров.ИндексСубконто    = Индекс;
			НаборПараметров.ЗаголовокСубконто = Поле.Заголовок;
			ПараметрыЭталонногоНабора = НаборПараметров;
		КонецЕсли;

	КонецЦикла;
	
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеОСДт", ПараметрыОС, "СубконтоДт");
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеОСКт", ПараметрыОС, "СубконтоКт");
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеНМАДт", ПараметрыНМА, "СубконтоДт");
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеНМАКт", ПараметрыНМА, "СубконтоКт");
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеФизЛицаДт", ПараметрыФизЛица, "СубконтоДт");
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеФизЛицаКт", ПараметрыФизЛица, "СубконтоКт");
	
	// Включаем те же поля в основном наборе, чтобы они были доступны для выбора.
	Если ЭталонныйНабор <> Неопределено Тогда
		
		// При необходимости заменяем номер субконто в основном наборе данных. Например, "Субконто2" вместо "Субконто1".
		БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "Проводки", ПараметрыЭталонногоНабора);
		
		ПоляЭталонногоНабора = СхемаКомпоновкиДанных.НаборыДанных[ЭталонныйНабор].Поля;
		Для Каждого ПолеНабора Из ОсновнойНабор.Поля Цикл
			
			ИмяПоля = Строка(ПолеНабора.Поле);
			Если Не СтрНачинаетсяС(ИмяПоля, "СвязанноеПоле") Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеНабора.ОграничениеИспользования.Группировка           = Истина;
			ПолеНабора.ОграничениеИспользования.Условие               = Истина;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
			
			// Имена полей набора Дт такие же как полей набора Кт, поэтому для проверки вхождения поля в набор полей достаточно использовать любую
			// из сторон эталонного набора полей. В данном случае используем Дт.
			СвязанноеПоле = ПоляЭталонногоНабора.Найти(СтрШаблон("СубконтоДт%1.%2", ПараметрыЭталонногоНабора.ИндексСубконто, ИмяПоля));
			ОтключитьДоступность = (СвязанноеПоле = Неопределено);
			ПолеНабора.ОграничениеИспользования.Поле              = ОтключитьДоступность;
			ПолеНабора.ОграничениеИспользования.Порядок           = ОтключитьДоступность;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле    = ОтключитьДоступность;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок = ОтключитьДоступность;

		КонецЦикла;
		
	КонецЕсли;
	
	// Присваиваем набор типов для кор.полей, которые будут использоваться в настройках пользователем.
	Для Индекс = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		Поле = ОсновнойНабор.Поля.Найти("КорСубконто" + Индекс);
		Если Поле = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Поле.ТипЗначения = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		Поле.Заголовок   = СтрШаблон(НСтр("ru = 'Кор. Субконто%1';
											|en = 'Corr. Extra dimension%1'"), Индекс);
		
	КонецЦикла;
	
	Если ПустаяСтрока(СхемаКомпоновкиДанныхАдрес) Тогда
		Схема = СхемаКомпоновкиДанных;
	Иначе
		Схема = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, СхемаКомпоновкиДанныхАдрес);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ПроверкаИтогов",                     Ложь);

	Возврат Результат;

КонецФункции

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Карточка счета %1%2';
			|en = '%1%2 account card'"),
		ПараметрыОтчета.Счет,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчеты.ИзменитьСхемуДляОтборовПоДопСвойствамСубконто(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		НастроитьСхемуКомпоновкиДанных(Схема, ПараметрыОтчета.Счет);
	КонецЕсли;
	
	ЗначениеПараметра = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПараметрыОтчета.Счет);
	Если ЗначениеЗаполнено(ПараметрыОтчета.Счет) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет", ЗначениеПараметра);
		ИзменитьСхемуДляОтборовПоСубконтоСубсчетов(ПараметрыОтчета, Схема, КомпоновщикНастроек);		
	КонецЕсли;	
	
	ИзменитьСхемуДляПоказателяКонтроль(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	ИзменитьСхемуДляВыводаДополнительныхПолей(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	НачалоПериода = ?(ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода),
		НачалоДня(ПараметрыОтчета.НачалоПериода), Дата(1, 1, 1));

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	
	КонецПериода = ?(ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода),
		КонецДня(ПараметрыОтчета.КонецПериода), Дата(3999, 12, 31));

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецПериода);
	
	КонецПериодаОстатки = Новый Граница(КонецПериода, ВидГраницы.Включая);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериодаОстатки", КонецПериодаОстатки);
	
	Если ПараметрыОтчета.Периодичность = 0 Тогда

		КомпоновщикНастроек.Настройки.Структура[0].Использование = Ложь;
		
		НастраиваемаяСтруктура = КомпоновщикНастроек.Настройки.Структура[1];
		НастраиваемаяСтруктура.Использование = Истина;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			НастраиваемаяСтруктура.Структура[0].Отбор, "Регистратор", , ВидСравненияКомпоновкиДанных.Заполнено);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
			НастраиваемаяСтруктура.Структура[0], "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);

	Иначе
		
		НастраиваемаяСтруктура = КомпоновщикНастроек.Настройки.Структура[0];
		НастраиваемаяСтруктура.Использование = Истина;
		НастраиваемаяСтруктура = НастраиваемаяСтруктура.Структура[0];
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			НастраиваемаяСтруктура.Отбор, "ПериодГруппировки", , ВидСравненияКомпоновкиДанных.Заполнено);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			НастраиваемаяСтруктура.Структура[0].Отбор, "Регистратор", , ВидСравненияКомпоновкиДанных.Заполнено);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
			НастраиваемаяСтруктура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
			НастраиваемаяСтруктура.Структура[0], "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);

		КомпоновщикНастроек.Настройки.Структура[1].Использование = Ложь;
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыПереопределяемый.УстановитьПараметрыВалют(Схема, КомпоновщикНастроек, ПараметрыОтчета);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);
	
	// Добавляем поля, соответствующие выбранным показателям.
	// Для показателя СверкаНУ в самой схеме компоновки данных при вычисляемых полей использована логика, позволяющая выводить СверкаНУ с той
	// же стороны, с которой выводится НУ. Если БУ и НУ на разных сторонах (Дт и Кт), то вместо "БУ-НУ" формула будет "БУ*(-1)-НУ".
	// Например, для ресурса "СверкаНУТекущийОстаток" формула состоит из частей
	// [источник суммы БУ] * [знак суммы БУ] - [источник суммы НУ] , где
	// [источник суммы БУ] = Выбор Когда БУКонечныйОстатокДт <> 0 Тогда БУКонечныйОстатокДт Когда БУКонечныйОстатокКт <> 0 Тогда БУКонечныйОстатокКт иначе 0 Конец
    // [знак суммы БУ]     = Выбор когда БУКонечныйОстатокДт <> 0 И НУКонечныйОстатокДт <> 0 ИЛИ БУКонечныйОстатокКт <> 0 И НУКонечныйОстатокКт <> 0 тогда 1 иначе -1 конец
	// [источник суммы НУ] = Выбор Когда НУКонечныйОстатокДт <> 0 Тогда НУКонечныйОстатокДт Когда НУКонечныйОстатокКт <> 0 Тогда НУКонечныйОстатокКт иначе 0 Конец
	
	ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить("ПериодГруппировкиЗаголовок"); 
	МассивМакетов.Добавить("ОбщиеИтогиЗаголовок");
	МассивМакетов.Добавить("ОбщиеИтогиПодвал");
	МассивМакетов.Добавить("ПроводкиЗаголовок");	
		
	Для Каждого ЭлементМакет Из МассивМакетов Цикл
		
		ОписаниеМакета = Схема.Макеты[ЭлементМакет + "Образец"].Макет;
		Схема.Макеты[ЭлементМакет].Макет = БухгалтерскиеОтчетыВызовСервера.ПолучитьКопиюОписанияМакета(ОписаниеМакета);
		ОписаниеМакета = Схема.Макеты[ЭлементМакет].Макет;
		
		МассивСтрокДляУдаления = Новый Массив;
		Индекс = 0;
		Для Каждого ЭлементМассива Из ПараметрыОтчета.НаборПоказателей Цикл
			 Если 	Не БухгалтерскиеОтчетыКлиентСервер.ПоказательДоступен(КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ЭлементМассива + "ОборотДт") 
				Или Не ПараметрыОтчета["Показатель" + ЭлементМассива] Тогда
				МассивСтрокДляУдаления.Добавить(ОписаниеМакета[Индекс]);
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;	
		
		Для Каждого Строка Из МассивСтрокДляУдаления Цикл
			ОписаниеМакета.Удалить(Строка);
		КонецЦикла;
		
		КоличествоСтрок = ОписаниеМакета.Количество();
		
		// Обвести область.
		Если КоличествоСтрок > 0 Тогда
			Для Индекс = 0 По 12 Цикл
				ПоследняяСтрока = ?(ЭлементМакет = "ОбщиеИтогиПодвал" И Индекс < 4, 0, КоличествоСтрок - 1);
				ПараметрГраницы = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ОписаниеМакета[0].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Сверху", ЛинияСплошная);
				ПараметрГраницы = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ОписаниеМакета[ПоследняяСтрока].Ячейки[Индекс].Оформление.Элементы, "СтильГраницы");
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ПараметрГраницы.ЗначенияВложенныхПараметров, "СтильГраницы.Снизу", ЛинияСплошная);	
			КонецЦикла;
		КонецЕсли;
		
		Для Индекс = 1 По КоличествоСтрок - 1 Цикл
			ОписаниеМакета[Индекс].Ячейки[0].Элементы.Очистить();	
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[0].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[1].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[1].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[2].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[2].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			ОписаниеМакета[Индекс].Ячейки[3].Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[3].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			Если ЭлементМакет = "ПроводкиЗаголовок" Тогда
				ОписаниеМакета[Индекс].Ячейки[5].Элементы.Очистить();
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[5].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
				ОписаниеМакета[Индекс].Ячейки[8].Элементы.Очистить();
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ОписаниеМакета[Индекс].Ячейки[8].Оформление.Элементы, "Расшифровка", Неопределено, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ПараметрыОтчета.ПоказательБУ Тогда
		ГруппаОтборов = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование = Истина;
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Для Каждого ЭлементМассива Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ЭлементМассива <> "БУ" И ПараметрыОтчета["Показатель" + ЭлементМассива] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, ЭлементМассива + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборов, ЭлементМассива + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Порядок сортировки в этом отчете не настраивается пользователем, поэтому всегда берется из схемы.
	БухгалтерскиеОтчеты.УстановитьПорядокСортировкиИзСхемы(Схема, КомпоновщикНастроек);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	// Если показатель один, то удалим столбик "Показатель".
	Если КоличествоПоказателей = 1 Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			// Пропускаем макеты не соответствующего типа.
			Если ТипЗнч(Макет) = Тип("ОписаниеМакетаОбластиМакетаКомпоновкиДанных")
				И ТипЗнч(Макет.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаМакета Из Макет.Макет Цикл
				Если СтрокаМакета.Ячейки.Количество() > 4 Тогда // удаляем только из неслужебных строк
					СтрокаМакета.Ячейки.Удалить(СтрокаМакета.Ячейки[4]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	ВысотаЗаголовка = ?(Результат.Области.Найти("Заголовок") = Неопределено, 0, Результат.Области.Заголовок.Низ);
	КоличествоСтрокПараметров = 0;
	БухгалтерскиеОтчетыПереопределяемый.ВысотаВыводимыхПараметров(ПараметрыОтчета.СхемаКомпоновкиДанных, КоличествоСтрокПараметров);

	Результат.ФиксацияСверху = ВысотаЗаголовка + 2 + КоличествоСтрокПараметров;
	
КонецПроцедуры

// Задает набор показателей, которые позволяет анализировать отчет.
//
// Возвращаемое значение:
//   Массив      - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	БухгалтерскиеОтчетыПереопределяемый.ДополнительныеПоказателиБухгалтерскихОтчетов(НаборПоказателей);
	
	Возврат НаборПоказателей;
	
КонецФункции

// Задает набор опций, которые позволяет настраивать отчет.
//
// Возвращаемое значение:
//   Массив      - имена опций.
//
Функция СохраняемыеОпции() Экспорт
	
	КоллекцияНастроек = Новый Массив;
	Для каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Добавить("Показатель" + Показатель);
	КонецЦикла;
	КоллекцияНастроек.Добавить("Периодичность");
	КоллекцияНастроек.Добавить("РазмещениеДополнительныхПолей");
	
	Возврат КоллекцияНастроек;
	
КонецФункции

#Область РасшифровкаСтандартныхОтчетов

// Заполняет настройки расшифровки (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки) для переданного экземпляра отчета.
//
// Параметры:
//  Настройки				 - Структура								 - Настройки расшифровки отчета, которые нужно заполнить (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//  Объект					 - ОтчетОбъект								 - Отчет из данных которого нудно собрать универсальные настройки.
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки отчета.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных  - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
//  РеквизитыРасшифровки	 - Структура								 - Реквизиты отчета полученные из контекста расшифровываемой ячейки.
//
Процедура ЗаполнитьНастройкиРасшифровки(Настройки, Объект, ДанныеРасшифровки, ИдентификаторРасшифровки, РеквизитыРасшифровки) Экспорт

	БухгалтерскиеОтчетыРасшифровка.ЗаполнитьНастройкиРасшифровкиПоДаннымСтандартногоОтчета(
		Настройки,
		ДанныеРасшифровки,
		ИдентификаторРасшифровки,
		Объект,
		РеквизитыРасшифровки);
	
КонецПроцедуры

// Адаптирует переданные настройки для данного вида отчетов.
// Перед применением настроек расшифровки может возникнуть необходимость учесть особенности этого вида отчетов.
//
// Параметры:
//  Настройки	 - Структура - Настройки которые нужно адаптировать (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//
Процедура АдаптироватьНастройки(Настройки) Экспорт
	
	ТаблицаДополнительныеПоля = Настройки.ТаблицаДополнительныеПоля;
	КоличествоДопПолей = ТаблицаДополнительныеПоля.Количество();
	Для инд = 1 По КоличествоДопПолей Цикл

		ДопПоле = ТаблицаДополнительныеПоля[КоличествоДопПолей - инд];
		Если Не СтрНачинаетсяС(ДопПоле.Поле, "Субконто") И Не СтрНачинаетсяС(ДопПоле.Поле, "Подразделение") Тогда
			ТаблицаДополнительныеПоля.Удалить(КоличествоДопПолей - инд);
		КонецЕсли;

	КонецЦикла;
	
	// Удалим автоотступ из условного оформления.
	БухгалтерскиеОтчеты.УдалитьАвтоотступИзУсловногоОформления(Настройки.УсловноеОформление);
	
КонецПроцедуры

// Устанавливает какими отчетами и при каких условиях может быть расшифрован этот вид отчетов.
//
// Параметры:
//  Правила - ТаблицаЗначений - таблица с правилами расшифровки этого отчета см. БухгалтерскиеОтчетыРасшифровка.НовыйПравилаРасшифровки().
//
Процедура ЗаполнитьПравилаРасшифровки(Правила) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вместо номеров субконто счета-группы подставляет номера субконто из КартаСубконто.
//
Функция ЗаменитьНомераСубконтоВТексте(Знач ТекстЗапроса, КартаСубконто)
	
	// Предполагается, что исходный текст запроса содержит:
	// Субконто1 КАК Субконто1,
	// Субконто2 КАК Субконто2,
	// Требуется обменять местами поля выборки Субконто1 и Субконто2, а псевдонимы оставить те же.
	Для каждого НаборСубконто Из КартаСубконто Цикл
		
		Если НаборСубконто.НомерСубконто = НаборСубконто.НомерСубконтоСубсчета Тогда
			Продолжить;
		КонецЕсли;

		ШаблонПоиска = "(Субконто%1).* КАК Субконто%2";
		ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконто, НаборСубконто.НомерСубконто);
		НовоеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконтоСубсчета, НаборСубконто.НомерСубконто);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
		
		ШаблонПоиска = "Субконто%1.* КАК Субконто%2";
		ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконто, НаборСубконто.НомерСубконто);
		НовоеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконтоСубсчета, НаборСубконто.НомерСубконто);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);

	КонецЦикла;
	
	// Теперь текст запроса содержит:
	// Субконто2 КАК Субконто1,
	// Субконто2 КАК Субконто2,
	// Требуется оставить среди полей выборки Субконто1.
	Для каждого НаборСубконто Из КартаСубконто Цикл
		
		Если НаборСубконто.НомерСубконто = НаборСубконто.НомерСубконтоСубсчета Тогда
			Продолжить;
		КонецЕсли;

		ШаблонПоиска = "(Субконто%1).* КАК Субконто%2";
		ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконтоСубсчета, НаборСубконто.НомерСубконтоСубсчета);
		НовоеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконто, НаборСубконто.НомерСубконтоСубсчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);
		
		ШаблонПоиска = "Субконто%1.* КАК Субконто%2";
		ИсходноеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконтоСубсчета, НаборСубконто.НомерСубконтоСубсчета);
		НовоеСоответствие = СтрШаблон(ШаблонПоиска, НаборСубконто.НомерСубконто, НаборСубконто.НомерСубконтоСубсчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИсходноеСоответствие, НовоеСоответствие);

	КонецЦикла;
	
	// В конце текст запроса содержит:
	// Субконто2 КАК Субконто1,
	// Субконто1 КАК Субконто2,
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Для случая, когда у выбранного счета есть субсчета с несовпадающими субконто, и по этим субконто установлены
// отборы, будет произведена замена в тексте схемы компоновки данных. Это позволит корректно отработать такие отборы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляОтборовПоСубконтоСубсчетов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	ОтбираемыеВидыСубконто = Новый Массив;
	БухгалтерскиеОтчеты.СписокОтборовПоСубконто(КомпоновщикНастроек.Настройки.Отбор.Элементы, ОтбираемыеВидыСубконто);
	Если ОтбираемыеВидыСубконто.Количество() = 0 Тогда // нет отборов по субконто
		Возврат;
	КонецЕсли;
	
	// Проверяем наличие отборов по видам субконто субсчетов, которые не совпадают с видами субконто счета-группы.
	НесовпадающиеСубконто = НесовпадающиеСубконтоСубсчетов(ПараметрыОтчета, КомпоновщикНастроек, ОтбираемыеВидыСубконто);
	Если НесовпадающиеСубконто.Пустой() Тогда // нет несовпадающих видов субконто среди субсчетов
		Возврат;
	КонецЕсли;
	
	// В запросах по остаткам оставим только субконто, используемые в отборах. Их номера будут в заведомо известном нам
	// порядке вне зависимости от расположения у конкретного субсчета. Это будет гарантировано за счет явного указания
	// порядка видов субконто как для остатков, так и для движений.
	
	КартаСубконто = Новый ТаблицаЗначений;
	// Номер вида субконто у счета-группы.
	КартаСубконто.Колонки.Добавить("НомерСубконто",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	// Номер вида субконто у субсчета.
	КартаСубконто.Колонки.Добавить("НомерСубконтоСубсчета",
		КартаСубконто.Колонки.НомерСубконто.ТипЗначения);
	
	ИсточникВидовСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	НомерСубконто = 0;
	ВидыСубконтоОтборов = Новый СписокЗначений;
	Для каждого НомерСубконтоСубсчета Из ОтбираемыеВидыСубконто Цикл
		
		ВидСубконто = ИсточникВидовСубконто["ВидСубконто" + НомерСубконтоСубсчета];
		ВидыСубконтоОтборов.Добавить(ВидСубконто);
		НомерСубконто = НомерСубконто + 1;
		
		// Задаем номера меняемых местами субконто.
		Проекция = КартаСубконто.Добавить();
		Проекция.НомерСубконто = НомерСубконтоСубсчета;
		Проекция.НомерСубконтоСубсчета = НомерСубконто;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек,
			"ВидСубконто" + НомерСубконто,
			ВидСубконто,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЦикла;

	Если Не КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
		НастроитьСхемуКомпоновкиДанных(Схема, ПараметрыОтчета.Счет);
	КонецЕсли;		
	
	ОписаниеЗапроса = Новый СхемаЗапроса;
	ОписаниеЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных.Проводки.Запрос);
	ПакетЗапросов = ОписаниеЗапроса.ПакетЗапросов;
	
	ИменаОбрабатываемыхЗапросов = Новый Массив;
	ИменаОбрабатываемыхЗапросов.Добавить("ДвиженияССубконто");
	ИменаОбрабатываемыхЗапросов.Добавить("ХозрасчетныйОстаткиИОбороты");
	ИменаОбрабатываемыхЗапросов.Добавить("ОстаткиНаНачало");
	ИменаОбрабатываемыхЗапросов.Добавить("ОстаткиНаКонец");
	
	ТекстыЗапросов = Новый Массив;	
	Для каждого ЗапросПакета Из ПакетЗапросов Цикл
		
		ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Если ИменаОбрабатываемыхЗапросов.Найти(ЗапросПакета.ТаблицаДляПомещения) <> Неопределено Тогда
			ТекстЗапроса = ЗаменитьНомераСубконтоВТексте(ТекстЗапроса, КартаСубконто);
		КонецЕсли;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	КонецЦикла;
	Для Индекс = 0 По ПакетЗапросов.Количество() - 1 Цикл
		ПакетЗапросов[Индекс].УстановитьТекстЗапроса(ТекстыЗапросов[Индекс]);
	КонецЦикла;
	
	Схема.НаборыДанных.Проводки.Запрос = ОписаниеЗапроса.ПолучитьТекстЗапроса();
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);
											
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоОтборов", ВидыСубконтоОтборов);
	
КонецПроцедуры

// Дополняет текст наборов данных ОстаткиНаКонец и ОстаткиНаНачало подзапросом, удаляющим суммы Контроль по счетам,
// где налоговый учет не ведется.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляПоказателяКонтроль(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	Если Не ПараметрыОтчета.ПоказательКонтроль Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСчет = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Счет");
	
	// Проверяем наличие субсчетов, на одних из которых включен налоговый учет, а на других отключен.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субсчета", ПараметрСчет.Значение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Хозрасчетный.НалоговыйУчет) КАК СуществуетНУ,
	|	МИНИМУМ(Хозрасчетный.НалоговыйУчет) КАК ЛюбойНУ
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&Субсчета)";
	
	Проверка = Запрос.Выполнить().Выбрать();
	Если Проверка.Следующий()
	   И Проверка.СуществуетНУ = Проверка.ЛюбойНУ Тогда // на всех счетах признак НУ одинаковый
		Возврат;
	КонецЕсли;

	Если Не КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
	КонецЕсли;
	
	ТекстОсновногоЗапроса = Схема.НаборыДанных.Проводки.Запрос;
	
	// Запросы общих остатков получают остаток как по счетам, поддерживающим налоговый учет (контроль нужен),
	// так и по счетам, неподдерживающим налоговый учет (контроль должен давать 0).
	// Чтобы оставить только остатки по счетам с НУ, мы добавляем второй подзапрос, который получает сторнирующие суммы
	// для основного запроса.
	
	ОписаниеЗапроса = Новый СхемаЗапроса;
	ОписаниеЗапроса.УстановитьТекстЗапроса(ТекстОсновногоЗапроса);
	
	Для каждого ЗапросПакета Из ОписаниеЗапроса.ПакетЗапросов Цикл
	
		Если ЗапросПакета.ТаблицаДляПомещения <> "ОстаткиНаНачало"
		   И ЗапросПакета.ТаблицаДляПомещения <> "ОстаткиНаКонец" Тогда
			Продолжить;
		КонецЕсли;
		
		БухгалтерскиеОтчеты.ДобавитьСторноДляПоказателяКонтроль(ПараметрыОтчета, ЗапросПакета);
	
	КонецЦикла;
	
	ТекстОсновногоЗапроса = ОписаниеЗапроса.ПолучитьТекстЗапроса();
											
	// Остатки на момент определенной проводки могут содержать как сумму по счетам, поддерживающим НУ, так и сумму по
	// счетам без НУ.
	// Выделять остаток по счетам с НУ для каждой проводки нерационально. Отключаем контроль в строках по проводкам.

	СкрываемыеПоказатели = Новый Массив;
	СкрываемыеПоказатели.Добавить("КонтрольНачальныйОстатокДт");
	СкрываемыеПоказатели.Добавить("КонтрольНачальныйОстатокКт");
	СкрываемыеПоказатели.Добавить("КонтрольКонечныйОстатокДт");
	СкрываемыеПоказатели.Добавить("КонтрольКонечныйОстатокКт");
	Для каждого Показатель Из СкрываемыеПоказатели Цикл
	
		ПозицияКонца = СтрНайти(ТекстОсновногоЗапроса, " КАК " + Показатель, НаправлениеПоиска.СКонца);
		ПозицияНачала = СтрНайти(ТекстОсновногоЗапроса, ",", НаправлениеПоиска.СКонца, ПозицияКонца);
		ТекстОсновногоЗапроса = Лев(ТекстОсновногоЗапроса, ПозицияНачала)
			+ Символы.ПС + Символы.Таб + "0"
			+ Сред(ТекстОсновногоЗапроса, ПозицияКонца);
	
	КонецЦикла; 
	
	Схема.НаборыДанных.Проводки.Запрос = ТекстОсновногоЗапроса;
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);
											
КонецПроцедуры

// Добавляет в тексты вычисляемых полей вывод реквизитов субконто или подразделения.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляВыводаДополнительныхПолей(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	// В колонках "Аналитика Дт" и "Аналитика Кт" могут выводиться не только значения субконто, но и значения реквизитов субконто.
	// Все содержимое аналитик и реквизитов - это текст, формируемый вычисляемым полем: аналитики выводятся всегда и разделяются переносами
	// строк, а реквизиты выводятся согласно настройках пользователя через запятую от аналитик, с которыми они связаны.
	// Данная процедура добавляет к выражению вычисляемого поля из СКД (содержит только субконто) выражения для дополнительных
	// реквизитов этих субконто.
	// * Поддерживаются также данные из регистров сведений по ОС, НМА и физлицам.
	// * Поддерживаются также значения из регистров дополнительных реквизитов и дополнительных сведений.
	
	// Получаем группы дополнительных полей, которые требуется вывести в отчет.
	ГруппыДопПолей = Новый Структура;
	ГруппаПолей = Неопределено;
	КоличествоДопПолей = ПараметрыОтчета.ДополнительныеПоля.Количество();
	Для инд = 1 По КоличествоДопПолей Цикл

		ДопПоле = ПараметрыОтчета.ДополнительныеПоля[КоличествоДопПолей - инд];
		Если Не ДопПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьПоля = Строка(ДопПоле.Поле);
		ПозицияТочки = СтрНайти(ПутьПоля, ".");
		Если ПозицияТочки <> 0 Тогда
			
			ИмяГруппыПолей = Лев(ПутьПоля, ПозицияТочки - 1);
			Если Не ГруппыДопПолей.Свойство(ИмяГруппыПолей, ГруппаПолей) Тогда

				ГруппаПолей = Новый Массив;
				ГруппыДопПолей.Вставить(ИмяГруппыПолей, ГруппаПолей);

			КонецЕсли;
			ГруппаПолей.Добавить(Сред(ПутьПоля, ПозицияТочки));
			
		КонецЕсли;
		
	КонецЦикла;
	Если ГруппыДопПолей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Перенесем доп.поля также и в соответствующие виды субконто на субсчетах, не совпадающие по номеру со счетом-группой.
	ОтбираемыеВидыСубконто = Новый Массив;
	Для Каждого ГруппаДопПолей Из ГруппыДопПолей Цикл
		Если СтрНачинаетсяС(ГруппаДопПолей.Ключ, "Субконто") Тогда
			ОтбираемыеВидыСубконто.Добавить(Число(Сред(ГруппаДопПолей.Ключ, 9, 1)));
		КонецЕсли;
	КонецЦикла;
	НесовпадающиеСубконто = НесовпадающиеСубконтоСубсчетов(ПараметрыОтчета, КомпоновщикНастроек, ОтбираемыеВидыСубконто);
	КартаСубконто = НесовпадающиеСубконто.Выгрузить();
	КартаСубконто.Свернуть("НомерСубконто,НомерСубконтоСубсчета");
	КартаСубконто.Колонки.Добавить("ГруппаПолей", Новый ОписаниеТипов("Массив"));
	Для Каждого ДопПоле Из КартаСубконто Цикл

		ДопПоле.ГруппаПолей = ГруппыДопПолей["Субконто" + ДопПоле.НомерСубконто];
		Если Не ГруппыДопПолей.Свойство("Субконто" + ДопПоле.НомерСубконтоСубсчета) Тогда
			ГруппыДопПолей.Вставить("Субконто" + ДопПоле.НомерСубконтоСубсчета, Неопределено); // будет взято из счета-группы
		КонецЕсли;

	КонецЦикла;
	Для Каждого НомерСубконто Из ОтбираемыеВидыСубконто Цикл
		
		ДопПоле = КартаСубконто.Добавить();
		ДопПоле.НомерСубконто         = НомерСубконто;
		ДопПоле.НомерСубконтоСубсчета = НомерСубконто;
		ДопПоле.ГруппаПолей           = ГруппыДопПолей["Субконто" + ДопПоле.НомерСубконто];
		
	КонецЦикла;
	
	Если Не КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		// Если изменялись вычисляемые поля, то обновим схему до эталонной. Достаточно проверить по стороне Дт.
		ИзменяемоеПоле = Схема.ВычисляемыеПоля.Найти("АналитикаДт");
		ЕстьДопПоля = Ложь;
		ПозицияПоиска = 2;
		Пока ПозицияПоиска <> 1 Цикл
			
			Если Сред(ИзменяемоеПоле.Выражение, ПозицияПоиска + 2, 1) = "."       // СубконтоДт1.
			 Или Сред(ИзменяемоеПоле.Выражение, ПозицияПоиска + 1, 1) = "." Тогда // ПодразделениеДт.
				ЕстьДопПоля = Истина;
				Прервать;
			КонецЕсли;
			ПозицияПоиска = СтрНайти(ИзменяемоеПоле.Выражение, "Дт", , ПозицияПоиска) + 1;
			
		КонецЦикла;
		Если ЕстьДопПоля Тогда
			Схема = ПолучитьМакет("СхемаКомпоновкиДанных");
			НастроитьСхемуКомпоновкиДанных(Схема, ПараметрыОтчета.Счет);
		КонецЕсли;
		
	КонецЕсли;
	
	// Параметры запроса для использования в вычисляемом поле.
	ПараметрСчет = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Счет");
	ИсточникВидовСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		ИмяВида = "ВидСубконто" + НомерСубконто;
		ЗначениеВида = ИсточникВидовСубконто[ИмяВида];
		Если Не ЗначениеЗаполнено(ЗначениеВида) Тогда
			Прервать;
		КонецЕсли;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяВида, ЗначениеВида);
		
	КонецЦикла;
	
	// Добавляет вывод доп.полей в текст вычисляемых полей "АналитикаДт" и "АналитикаКт".
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	ПараметрыВставки = Новый Структура;
	ПараметрыВставки.Вставить("ГруппаДопПолей");
	ПараметрыВставки.Вставить("ДопПоле");
	ПараметрыВставки.Вставить("ОграничитьПоВидуСубконто", Ложь);
	ПараметрыВставки.Вставить("НомерСубконто",            "0");
	ПараметрыВставки.Вставить("НомерСубконтоСубсчета",    0);
	ПараметрыВставки.Вставить("СторонаПроводки",          "");
	ПараметрыВставки.Вставить("ТочкаВставки",             0);
	
	Для Каждого ГруппаДопПолей Из ГруппыДопПолей Цикл
		
		ПараметрыВставки.ГруппаДопПолей = ГруппаДопПолей;
		Если СтрНачинаетсяС(ГруппаДопПолей.Ключ, "Субконто") Тогда
 			ПараметрыВставки.НомерСубконто = Сред(ГруппаДопПолей.Ключ, 9);
			ПараметрыВставки.ОграничитьПоВидуСубконто = Истина;
		ИначеЕсли СтрНачинаетсяС(ГруппаДопПолей.Ключ, "КорСубконто") Тогда
			ПараметрыВставки.НомерСубконто = Сред(ГруппаДопПолей.Ключ, 12);
			ПараметрыВставки.ОграничитьПоВидуСубконто = Ложь;
		Иначе
			ПараметрыВставки.НомерСубконто = "0";
			ПараметрыВставки.ОграничитьПоВидуСубконто = Ложь;
		КонецЕсли;
		
		ПараметрыВставки.ТочкаВставки = 0;
		Для Каждого СторонаПроводки Из СтороныПроводки Цикл
			
			ПараметрыВставки.СторонаПроводки = СторонаПроводки;
			Если ПараметрыВставки.ОграничитьПоВидуСубконто Тогда

				ОтборПоНомеруСубконто = Новый Структура("НомерСубконтоСубсчета", Число(ПараметрыВставки.НомерСубконто));
				НаборыДопПолейСДаннымНомеромСубконто = КартаСубконто.НайтиСтроки(ОтборПоНомеруСубконто);
				Для Каждого ДопПоле Из НаборыДопПолейСДаннымНомеромСубконто Цикл
					
					ПараметрыВставки.ДопПоле = ДопПоле;
					ВставитьВыражениеДопПоля(Схема.ВычисляемыеПоля, ПараметрыВставки);

				КонецЦикла;
				
			Иначе
				
				ПараметрыВставки.ДопПоле = Неопределено;
				ВставитьВыражениеДопПоля(Схема.ВычисляемыеПоля, ПараметрыВставки);

			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);
	
КонецПроцедуры

Процедура ВставитьВыражениеДопПоля(ВычисляемыеПоля, ПараметрыВставки)
	
	ГруппаДопПолей = ПараметрыВставки.ГруппаДопПолей;
	ДопПоле = ПараметрыВставки.ДопПоле;
	Если ПараметрыВставки.ОграничитьПоВидуСубконто Тогда
		ИмяГруппыПолей = "Субконто" + ПараметрыВставки.СторонаПроводки + ДопПоле.НомерСубконтоСубсчета;
	ИначеЕсли СтрНачинаетсяС(ГруппаДопПолей.Ключ, "КорСубконто") <> 0 Тогда
		ИмяГруппыПолей = "Субконто" + ПараметрыВставки.СторонаПроводки + ПараметрыВставки.НомерСубконто;
	Иначе // Подразделение
		ИмяГруппыПолей = ГруппаДопПолей.Ключ + ПараметрыВставки.СторонаПроводки;
	КонецЕсли;

	ИзменяемоеПоле = ВычисляемыеПоля.Найти("Аналитика" + ПараметрыВставки.СторонаПроводки);
	Если ПараметрыВставки.ТочкаВставки = 0 Тогда
		
		ИскомоеВыражение = "Представление(" + ИмяГруппыПолей + ")";
		ПараметрыВставки.ТочкаВставки = СтрНайти(ИзменяемоеПоле.Выражение, ИскомоеВыражение, , , 2);
		Если ПараметрыВставки.ТочкаВставки = 0 Тогда
			Возврат;
		КонецЕсли;
		ПараметрыВставки.ТочкаВставки = ПараметрыВставки.ТочкаВставки + СтрДлина(ИскомоеВыражение);
		
	КонецЕсли;
	ИзменяемоеВыражение = Лев(ИзменяемоеПоле.Выражение, ПараметрыВставки.ТочкаВставки);

	НаборДопПолей = ?(ПараметрыВставки.ОграничитьПоВидуСубконто, ДопПоле.ГруппаПолей, ГруппаДопПолей.Значение);
	Если НаборДопПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КоличествоДопПолей = НаборДопПолей.Количество();

	ГруппаПолей = Новый Массив;
	Для инд = 1 По КоличествоДопПолей Цикл
		// Проходим по доп.полям от последних к первым, чтобы точка вставки была в одном и том же месте, а выражения полей добавлялись справа.
		ГруппаПолей.Добавить(
		    СтрШаблон("Выбор Когда ЗначениеЗаполнено(%1%2) Тогда "", "" + СТРОКА(Представление(%1%2)) Иначе """" Конец",
				ИмяГруппыПолей, НаборДопПолей[КоличествоДопПолей - инд]));

	КонецЦикла;
	ПутьПоля = СтрСоединить(ГруппаПолей, " + ");
	
	Если ПараметрыВставки.ОграничитьПоВидуСубконто Тогда

		ИзменяемоеВыражение = ИзменяемоеВыражение
			+ СтрШаблон("+ Выбор Когда ВидСубконто%1%2 = &ВидСубконто%3 Тогда %4 Иначе """" Конец ",
				ПараметрыВставки.СторонаПроводки, ДопПоле.НомерСубконтоСубсчета, ДопПоле.НомерСубконто, ПутьПоля);

	Иначе
			
		ИзменяемоеВыражение = ИзменяемоеВыражение + СтрШаблон("+ %1 ", ПутьПоля);
		
	КонецЕсли;
			
	ИзменяемоеПоле.Выражение = ИзменяемоеВыражение + Сред(ИзменяемоеПоле.Выражение, ПараметрыВставки.ТочкаВставки + 1);
	
КонецПроцедуры

// Список номеров субконто субсчетов, виды которых не совпадают с видами субконто счета-группы.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//  ОтбираемыеВидыСубконто - Массив из Число - список номеров интересующих видов субконто.
//
// Возвращаемое значение:
//   РезультатЗапроса - соответствие разных номеров субконто счета и субсчетов с одинаковыми видами субконто.
//
Функция НесовпадающиеСубконтоСубсчетов(ПараметрыОтчета, КомпоновщикНастроек, ОтбираемыеВидыСубконто)
	
	ПараметрСчет = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа",     ПараметрыОтчета.Счет);
	Запрос.УстановитьПараметр("Субсчета",       ПараметрСчет.Значение);
	Запрос.УстановитьПараметр("СписокСубконто", ОтбираемыеВидыСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки КАК НомерСубконто,
	|	ХозрасчетныйВидыСубконто_Субсчета.НомерСтроки КАК НомерСубконтоСубсчета,
	|	ХозрасчетныйВидыСубконто_Субсчета.Ссылка КАК Субсчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_СчетГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Субсчета
	|		ПО ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки <> ХозрасчетныйВидыСубконто_Субсчета.НомерСтроки
	|			И ХозрасчетныйВидыСубконто_СчетГруппа.ВидСубконто = ХозрасчетныйВидыСубконто_Субсчета.ВидСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто_СчетГруппа.Ссылка = &СчетГруппа
	|	И ХозрасчетныйВидыСубконто_Субсчета.Ссылка В(&Субсчета)
	|	И ХозрасчетныйВидыСубконто_Субсчета.Ссылка <> &СчетГруппа
	|	И ХозрасчетныйВидыСубконто_СчетГруппа.НомерСтроки В(&СписокСубконто)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецЕсли