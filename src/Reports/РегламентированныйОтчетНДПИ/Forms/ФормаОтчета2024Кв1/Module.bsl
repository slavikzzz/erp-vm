
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем НастройкиКС;

&НаСервере
Перем ТаблицаРезультата;

&НаСервере
Перем ТаблицаРасшифровки;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/03/2024";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР211М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР212М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР22М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР311М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР4М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР51М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР51М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР52М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР62М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР71М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР73М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР81М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР82М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела3_КодВидаПИ", Неопределено);
	СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела5_КодВидаПИ", Неопределено);
	СтруктураРеквизитовФормы.Вставить("НеотрицательноеЧисло11_10",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 10, ДопустимыйЗнак.Неотрицательный)));
	СтруктураРеквизитовФормы.Вставить("НеотрицательноеЧисло15_10",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 10, ДопустимыйЗнак.Неотрицательный)));
	СтруктураРеквизитовФормы.Вставить("НеотрицательноеЧисло16_10",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 10, ДопустимыйЗнак.Неотрицательный)));
	СтруктураРеквизитовФормы.Вставить("НеотрицательноеЧисло16_15",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 15, ДопустимыйЗнак.Неотрицательный)));
	СтруктураРеквизитовФормы.Вставить("Число17_10",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 10, ДопустимыйЗнак.Любой)));
	СтруктураРеквизитовФормы.Вставить("НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.Вставить("НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей",
	СтрРазделить("П000030014003,П000070004003", ",", Ложь));
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
		
	Иначе
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения", СтруктураРеквизитовФормы.Организация, ДатаПодписи);
			Если Сред(КПП, 5, 2) = "50"
				И РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
				
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1   = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР211М1 = "П00211М1";
	СтруктураРеквизитовФормы.мИдГруппыР212М1 = "П00212М1";
	СтруктураРеквизитовФормы.мИдГруппыР22М1  = "П00022М1";
	СтруктураРеквизитовФормы.мИдГруппыР311М1 = "П00311М1";
	СтруктураРеквизитовФормы.мИдГруппыР4М1   = "П00004М1";
	СтруктураРеквизитовФормы.мИдГруппыР51М1  = "П00051М1";
	СтруктураРеквизитовФормы.мИдГруппыР51М2  = "П00051М2";
	СтруктураРеквизитовФормы.мИдГруппыР52М1  = "П00052М1";
	СтруктураРеквизитовФормы.мИдГруппыР62М1  = "П00062М1";
	СтруктураРеквизитовФормы.мИдГруппыР71М1  = "П00071М1";
	СтруктураРеквизитовФормы.мИдГруппыР73М1  = "П00073М1";
	СтруктураРеквизитовФормы.мИдГруппыР81М1  = "П00081М1";
	СтруктураРеквизитовФормы.мИдГруппыР82М1  = "П00082М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М101003");
	ИменаГраф.Добавить("П00001М102003");
	ИменаГраф.Добавить("П00001М103003");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00211М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00211М100001");
	ИменаГраф.Добавить("П00211М100002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР211М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00212М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00212М100001");
	ИменаГраф.Добавить("П00212М100002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР212М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00022М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00022М130003");
	ИменаГраф.Добавить("П00022М131003");
	ИменаГраф.Добавить("П00022М132003");
	ИменаГраф.Добавить("П00022М133003");
	ИменаГраф.Добавить("П00022М133503");
	ИменаГраф.Добавить("П00022М134003");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР22М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00311М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00311М100001");
	ИменаГраф.Добавить("П00311М100002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР311М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00004М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00004М100001");
	ИменаГраф.Добавить("П00004М100002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР4М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00051М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00051М105501");
	ИменаГраф.Добавить("П00051М105502");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР51М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00051М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00051М200001");
	ИменаГраф.Добавить("П00051М200002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР51М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00052М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00052М118003");
	ИменаГраф.Добавить("П00052М119003");
	ИменаГраф.Добавить("П00052М119503");
	ИменаГраф.Добавить("П00052М120003");
	ИменаГраф.Добавить("П00052М120103");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР52М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00062М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00062М100001");
	ИменаГраф.Добавить("П00062М100002");
	ИменаГраф.Добавить("П00062М100003");
	ИменаГраф.Добавить("П00062М100004");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР62М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00071М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00071М105303");
	ИменаГраф.Добавить("П00071М105403");
	ИменаГраф.Добавить("П00071М105503");
	ИменаГраф.Добавить("П00071М105603");
	ИменаГраф.Добавить("П00071М105703");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР71М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00073М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00073М117003");
	ИменаГраф.Добавить("П00073М118003");
	ИменаГраф.Добавить("П00073М119003");
	ИменаГраф.Добавить("П00073М120003");
	ИменаГраф.Добавить("П00073М121003");
	ИменаГраф.Добавить("П00073М122003");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР73М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00081М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00081М100001");
	ИменаГраф.Добавить("П00081М100002");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР81М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	// Группа П00082М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00082М120003");
	ИменаГраф.Добавить("П00082М121003");
	ИменаГраф.Добавить("П00082М122003");
	ИменаГраф.Добавить("П00082М123003");
	ИменаГраф.Добавить("П00082М123503");
	ИменаГраф.Добавить("П00082М124003");
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР82М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, Новый Массив));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел21");
	ИменаПодчиненныхРазделов.Добавить("Раздел22");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел211");
	ИменаПодчиненныхРазделов.Добавить("Раздел212");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 2.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел21", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР211М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел21");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 2.1.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел211", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР212М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел21");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 2.1.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел212", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР22М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 2.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел22", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел31");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел311");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел3");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 3.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел31", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР311М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел31");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 3.1.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел311", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР4М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел51");
	ИменаПодчиненныхРазделов.Добавить("Раздел52");
	ИменаПодчиненныхРазделов.Добавить("Раздел53");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел5", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР51М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР51М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел5");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 5.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел51", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР52М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел5");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 5.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел52", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел5");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 5.3");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел53", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР62М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел6", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел71");
	ИменаПодчиненныхРазделов.Добавить("Раздел72");
	ИменаПодчиненныхРазделов.Добавить("Раздел73");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел7", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР71М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел7");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 7.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел71", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел7");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 7.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел72", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР73М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел7");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 7.3");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел73", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел81");
	ИменаПодчиненныхРазделов.Добавить("Раздел82");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел8", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР81М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел8");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 8.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел81", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР82М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел8");
	СтруктураРаздела.Вставить("НаимСтраницы", "Подраздел 8.2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел82", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		УстановитьПостоянныеЗначенияПоказателей(Элем.Ключ);
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПостоянныеЗначенияПоказателей(ИмяРаздела)
	
	// Особая обработка.
	Если ИмяРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Области["П000020001003"].Значение = "03100";
		ТабличныйДокумент.Области["П000020003003"].Значение = "168";
	ИначеЕсли ИмяРаздела = "Раздел8" Тогда
		ТабличныйДокумент.Области["П000080001003"].Значение = "03100";
		ТабличныйДокумент.Области["П000080003003"].Значение = "168";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
			ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИмяОтчета(ИмяФормы),
		ИмяФормыОтчета(ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел5";
	СтрокаУровня1.Представление      = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел6";
	СтрокаУровня1.Представление      = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел7";
	СтрокаУровня1.Представление      = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел8";
	СтрокаУровня1.Представление      = "Раздел 8";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2024Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора[?(СтруктураРеквизитовФормы.ИП,
	"МестаПредставленияИП", "МестаПредставленияЮЛ")]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М101003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р1"]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020002003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р2"]);
	//2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210013503", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р21"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210013603", 1, ,
	"Выбор признака порядка применения вычета", КоллекцияСписковВыбора["ПрПорядВыч_Р21"]);
	//2.1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00211М100001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р211"]);
	//2.1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П002120023003", 0, ,
	"Выбор значения коэффициента Кд", КоллекцияСписковВыбора["Кд_Р212"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00212М100001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р212"]);
	//2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00022М130003", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р22"]);
	
	//Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001003", 5, ,
	"Выбор кода вида добытого полезного ископаемого", КоллекцияСписковВыбора["КодыПИ_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030002003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030003003", 3, ,
	"Выбор кода по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030009503", 0, ,
	"Выбор значения показателя Ккг", КоллекцияСписковВыбора["Ккг_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030011003", 0, ,
	"Выбор значения коэффициента Ов", КоллекцияСписковВыбора["Ов_Р3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030017003", 0, ,
	"Выбор значения коэффициента Кгп", КоллекцияСписковВыбора["Кгп_Р3"]);
	//3.1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П003110029006", 0, ,
	"Выбор значения коэффициента Кас", КоллекцияСписковВыбора["Кас_Р311"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00311М100001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р311"]);
	
	//Раздел 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040001003", 5, ,
	"Выбор кода вида добытого полезного ископаемого", КоллекцияСписковВыбора["КодыПИ_Р4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040002003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040003003", 3, ,
	"Выбор кода по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Р4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00004М100001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040015503", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р4"]);
	
	//Раздел 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000050001003", 5, ,
	"Выбор кода вида добытого полезного ископаемого", КоллекцияСписковВыбора["КодыПИ_Р5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000050002003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000050003003", 3, ,
	"Выбор кода по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	//5.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510005003", 0, ,
	"Выбор значения коэффициента Крента", КоллекцияСписковВыбора["Крента_Р5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510005103", 1, ,
	"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПрНП_Р51"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510005203", 2, ,
	"Выбор кода субъекта РФ", КоллекцияСписковВыбора["КодыСубРФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00051М105501", 2, ,
	"Выбор признака коэффициента", КоллекцияСписковВыбора["ПрКоэф_Р51"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00051М200001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р51"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510016403", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р51"]);
	//5.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00052М118003", 2, ,
	"Выбор признака металла", КоллекцияСписковВыбора["ПрМет_Р52"]);
	//5.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000530025503", 1, ,
	"Выбор признака остатка суммы", КоллекцияСписковВыбора["ПрОстСум_Р53"]);
	
	//Раздел 6.
	//6.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000620011003", 3, ,
	"Выбор кода по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00062М100001", 5, ,
	"Выбор кода вида добытого полезного ископаемого", КоллекцияСписковВыбора["КодыПИ_Р62"]);
	
	//Раздел 7.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000070002003", 3, ,
	"Выбор кода по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Р7"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000070003503", 2, ,
	"Выбор кода субъекта РФ", КоллекцияСписковВыбора["КодыСубРФ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000070004003", 0, ,
	"Выбор значения коэффициента Ктд", КоллекцияСписковВыбора["Ктд_Р7"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000070004503", 1, ,
	"Выбор признака коэффициента Ктд", КоллекцияСписковВыбора["ПрКтд_Р7"]);
	//7.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000710005103", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р71"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00071М105303", 5, ,
	"Выбор кода вида добытого полезного ископаемого", КоллекцияСписковВыбора["КодыПИ_Р71"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00071М105403", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р71"]);
	
	//Раздел 8.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000080002003", 0, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Р8"]);
	//8.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000810010003", 1, ,
	"Выбор признака коэффициента Кг", КоллекцияСписковВыбора["ПрКг_Р81"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000810011003", 0, ,
	"Выбор значения коэффициента Кг", КоллекцияСписковВыбора["Кг_Р81"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000810016003", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р81"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000810016103", 1, ,
	"Выбор признака порядка применения вычета", КоллекцияСписковВыбора["ПрПорядВыч_Р81"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00081М100001", 4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["КодыОснНал_Р81"]);
	//8.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00082М120003", 2, ,
	"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрНалВыч_Р82"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = КодПериода + 70;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодПериода, "ЧЦ=2;ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКорневогоРаздела(Форма, Знач ИмяРаздела)
	
	ИмяГлРаздела = Неопределено;
	
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Пока СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Цикл
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
		СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
	КонецЦикла;
	
	Возврат ?(ИмяГлРаздела = Неопределено, ИмяРаздела, ИмяГлРаздела);
	
КонецФункции

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц   = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрНачинаетсяС(Область.Имя, "ДобавитьСтроку") И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтроку") И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "ДобавитьСтраницу") И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтраницу") И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "П000210007003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение");
		СписокКодов.Добавить(559, "559 - с 01.01.2016");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли Область.Имя = "П000210012003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0);
		СписокКодов.Добавить(1);
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли Область.Имя = "П000040007003"
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00073М117003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00073М122003") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОтображатьВыборГода", Истина);
		ДопПараметры.Вставить("ОтображатьМесяцы", Истина);
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ДополнительныеПараметры", ДопПараметры);
		
		МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + Область.Значение);
		Если ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
			ПараметрыВыбора.Вставить("НачалоПериода", МесяцИГод_Дата);
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(МесяцИГод_Дата));
		Иначе
			ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("Область", Область);
		СтруктПарам.Вставить("Элемент", Элемент);
		
		Оп = Новый ОписаниеОповещения("ВыбратьМесяцИГодЗавершение", ЭтотОбъект, СтруктПарам);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборОтчетногоПериода",
		ПараметрыВыбора, ЭтотОбъект, , , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Область.Имя = "П000810006003" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "0000", "0000 (отсутствует промышл. добыча нефти)");
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М102003") ИЛИ ИмяПоказателя = "П000210004003"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00022М131003") ИЛИ ИмяПоказателя = "П000310019003"
		ИЛИ ИмяПоказателя = "П000040004003" ИЛИ ИмяПоказателя = "П000510004003" ИЛИ ИмяПоказателя = "П000070003003"
		ИЛИ ИмяПоказателя = "П000810004003" ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00082М121003") Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
				|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М101003")
		ИЛИ ИмяПоказателя = "П000020002003" ИЛИ ИмяПоказателя = "П000030002003" ИЛИ ИмяПоказателя = "П000040002003"
		ИЛИ ИмяПоказателя = "П000050002003" ИЛИ ИмяПоказателя = "П000710005103" ИЛИ ИмяПоказателя = "П000080002003" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'КБК должен состоять из 20 цифр. Значение очищено';
				|en = 'КБК должен состоять из 20 цифр. Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000040001003" Тогда
		Если СокрЛП(ЗначПоказателя) = "03401" Тогда
			ТабличныйДокумент.Области["П000040002003"].Значение = "00000000000000000000";
		ИначеЕсли ТабличныйДокумент.Области["П000040002003"].Значение = "00000000000000000000" Тогда
			ТабличныйДокумент.Области["П000040002003"].Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000050001003" Тогда
		Если СокрЛП(ЗначПоказателя) = "03400" Тогда
			ТабличныйДокумент.Области["П000050002003"].Значение = "00000000000000000000";
		ИначеЕсли ТабличныйДокумент.Области["П000050002003"].Значение = "00000000000000000000" Тогда
			ТабличныйДокумент.Области["П000050002003"].Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000720012003" И ЗначПоказателя > 0.3 Тогда
		Область.Значение = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Значение коэффициента Кт не должно превышать 0,3. Значение очищено';
			|en = 'Значение коэффициента Кт не должно превышать 0,3. Значение очищено'"));
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей.Найти(
		ИмяОбласти) <> Неопределено И Область.Значение = 0 И (ПараметрВводаПоля = Неопределено
		ИЛИ (ПараметрВводаПоля <> Неопределено И СтруктураРеквизитовФормы.мАвтоВыборКодов)) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущееПредставлениеНулевогоЗначения = Сред(Область.Формат, СтрНайти(Область.Формат, "ЧН=") + 3, 1);
		
		Сп = Новый СписокЗначений;
		Сп.Добавить("-", "отобразить ""-"" (прочерк)  ");
		Сп.Добавить("0", "отобразить ""0"" (ноль)");
		
		Оп = Новый ОписаниеОповещения("ВыбратьПредставлениеНулевогоЗначенияИзСпискаЗавершение",
		ЭтотОбъект, Новый Структура("Область", Область));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(ТекущееПредставлениеНулевогоЗначения));
		
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ". Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		
		Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел211" ИЛИ ИмяРаздела = "Раздел212" ИЛИ ИмяРаздела = "Раздел22"
			ИЛИ ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311" ИЛИ ИмяРаздела = "Раздел5"
			ИЛИ ИмяРаздела = "Раздел51" ИЛИ ИмяРаздела = "Раздел52" ИЛИ ИмяРаздела = "Раздел53" ИЛИ ИмяРаздела = "Раздел7"
			ИЛИ ИмяРаздела = "Раздел71" ИЛИ ИмяРаздела = "Раздел72" ИЛИ ИмяРаздела = "Раздел73" ИЛИ ИмяРаздела = "Раздел81"
			ИЛИ ИмяРаздела = "Раздел82" Тогда
			СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		Иначе
			РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область = ДополнительныеПараметры.Область;
	
	МесяцИГод_Строка = Формат(Месяц(РезультатВыбора.КонецПериода), "ЧЦ=2;ЧВН=")
	+ "." + Формат(Год(РезультатВыбора.КонецПериода), "ЧГ=");
	
	Если СокрЛП(Область.Значение) <> МесяцИГод_Строка Тогда
		Область.Значение = МесяцИГод_Строка;
	Иначе
		Область.Значение = "";
	КонецЕсли;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныеПараметры.Область.Значение Тогда
			ДополнительныеПараметры.Область.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПредставлениеНулевогоЗначенияИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Область.Значение = 0;
	
	Если ВыбЭлемент <> Неопределено
		И ВыбЭлемент.Значение <> Сред(Область.Формат, СтрНайти(Область.Формат, "ЧН=") + 3, 1) Тогда
		
		Область.Формат = СтрЗаменить(Область.Формат,
		Сред(Область.Формат, СтрНайти(Область.Формат, "ЧН=") + 3, 1), ВыбЭлемент.Значение);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		ТДО["СекцияПояснение"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ПрНалВыч   = СокрЛП(ТДО["П000210013503"].Значение);
		ПрПорядВыч = СокрЛП(ТДО["П000210013603"].Значение);
		
		ОбрабатываемаяОбласть = ТДО["П000210013603"];
		Если ПрНалВыч = "00" ИЛИ НЕ ЗначениеЗаполнено(ПрНалВыч) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		Если ПрПорядВыч = "2" Тогда
			
			ОбрабатываемаяОбласть = ТДО["П000210014003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
			ОбрабатываемаяОбласть = ТДО["П000210014503"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=-";
			
			ОбрабатываемаяОбласть = ТДО["П000210015003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Инд = АвтоРасчПоказатели.Найти("П000210015003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			
		Иначе
			
			ОбрабатываемаяОбласть = ТДО["П000210014003"];
			Если ПрПорядВыч = "1" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			КонецЕсли;
			
			ОбрабатываемаяОбласть = ТДО["П000210014503"];
			Если ПрПорядВыч = "1" Тогда
				Если ПрНалВыч = "06" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
					ОбрабатываемаяОбласть.Формат = "ЧН=-";
				Иначе// Случай, когда ПрНалВыч равно 01, 02, 03, 04, 05, 08, 09 или 14
					ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
					ОбрабатываемаяОбласть.Формат = "ЧН=0";
				КонецЕсли;
			Иначе// Случай незаполненного значения ПрПорядВыч
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			КонецЕсли;
			
			ОбрабатываемаяОбласть = ТДО["П000210015003"];
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел212" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ОпределяющееЗначение = ТДО["П002120023003"].Значение;
		ОбрабатываемаяОбласть1 = ТДО["П002120024003"];
		ОбрабатываемаяОбласть2 = ТДО["П002120025003"];
		Если ОпределяющееЗначение = 1 Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00022М130003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			ПрНалВыч = СокрЛП(Обл.Значение);
			ОбрабатываемаяОбласть = ТДО.Найти("П00022М133503_" + ИндексСтр);
			Если ПрНалВыч = "06" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			ИначеЕсли ЗначениеЗаполнено(ПрНалВыч) Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=0";
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00022М130003_" + ИндексСтр);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаПИ = СокрЛП(ТДО["П000030001003"].Значение);
		
		ОбрабатываемаяОбласть = ТДО["П000030004003"];
		Если КодВидаПИ = "03200" Тогда
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		ИначеЕсли КодВидаПИ = "03300" Тогда
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030004503"];
		Если КодВидаПИ = "03200" Тогда
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		ИначеЕсли КодВидаПИ = "03300" Тогда
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030005003"];
		Если КодВидаПИ = "03200" Тогда
		ИначеЕсли КодВидаПИ = "03300" Тогда
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030006003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030007003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030008003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030009003"];
		Если КодВидаПИ = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030009103"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030009503"];
		Если КодВидаПИ = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030009603"];
		Если КодВидаПИ = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030009703"];
		Если КодВидаПИ = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		ИначеЕсли КодВидаПИ = "03300" И Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20240801' Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030015003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030016003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030018003"];
		Если КодВидаПИ = "03300" Тогда
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000030018703"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ОбрабатываемаяОбласть = ТДО["П000310021503"];
		Если Форма.СтруктураРеквизитовФормы["РодительскаяСтраницаРаздела3_КодВидаПИ"] = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел311" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаПИ = СокрЛП(ТДО["П000040001003"].Значение);
		ОбрабатываемаяОбласть1 = ТДО["П000040002003"];
		ОбрабатываемаяОбласть2 = ТДО["П000040013003"];
		ОбрабатываемаяОбласть3 = ТДО["П000040014003"];
		Если КодВидаПИ = "03401" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ОбрабатываемаяОбласть2.Формат = СтрЗаменить(ОбрабатываемаяОбласть2.Формат, "ЧН=-", "ЧН=0");
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			ОбрабатываемаяОбласть3.Формат = СтрЗаменить(ОбрабатываемаяОбласть3.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ОбрабатываемаяОбласть2.Формат = СтрЗаменить(ОбрабатываемаяОбласть2.Формат, "ЧН=0", "ЧН=-");
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			ОбрабатываемаяОбласть3.Формат = СтрЗаменить(ОбрабатываемаяОбласть3.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ПрНалВыч = СокрЛП(ТДО["П000040015503"].Значение);
		ОбрабатываемаяОбласть = ТДО["П000040016003"];
		Если ПрНалВыч = "00" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда
		
		КодВидаПИ = СокрЛП(ТДО["П000050001003"].Значение);
		ОбрабатываемаяОбласть = ТДО["П000050002003"];
		Если КодВидаПИ = "03400" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, Ложь);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел51" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		КодВидаПИ = Форма.СтруктураРеквизитовФормы["РодительскаяСтраницаРаздела5_КодВидаПИ"];
		
		ПрНП = СокрЛП(ТДО["П000510005103"].Значение);
		
		МассивПрКоэф = Новый Массив;
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00051М105501_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			ПрКоэф = СокрЛП(Обл.Значение);
			МассивПрКоэф.Добавить(ПрКоэф);
			ОбрабатываемаяОбласть = ТДО.Найти("П00051М105502_" + ИндексСтр);
			Если ПрКоэф = "00" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00051М105501_" + ИндексСтр);
		КонецЦикла;
		
		Если ПоказательДолженПрисутствовать(
			Новый Структура("ИмяПоказателя,ПрНП,МассивПрКоэф", "П000510005203", ПрНП, МассивПрКоэф)) Тогда
			ТДО["КодСубъектаРФ"].Видимость = Истина;
			ТДО["ПсевдоКодСубъектаРФ"].Видимость = Ложь;
		Иначе
			ТДО["П000510005203"].Очистить();
			ТДО["КодСубъектаРФ"].Видимость = Ложь;
			ТДО["ПсевдоКодСубъектаРФ"].Видимость = Истина;
		КонецЕсли;
		
		Если ПоказательДолженПрисутствовать(
			Новый Структура("ИмяПоказателя,ПрНП", "П000510005303", ПрНП)) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000510005303"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000510005303"]);
		КонецЕсли;
		
		ПрНалВыч = СокрЛП(ТДО["П000510016403"].Значение);
		ОбрабатываемаяОбласть = ТДО["П000510016503"];
		Если ПрНалВыч = "00" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000510017003"];
		Если КодВидаПИ = "10017" ИЛИ КодВидаПИ = "04104" ИЛИ КодВидаПИ = "04106"
			ИЛИ (КодВидаПИ = "13001" И Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20240630') Тогда
			УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ОбрабатываемаяОбласть.Имя);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел52" Тогда
		
		КодВидаПИ = Форма.СтруктураРеквизитовФормы["РодительскаяСтраницаРаздела5_КодВидаПИ"];
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00052М120003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если КодВидаПИ = "05100" Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00052М120003_" + ИндексСтр);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00052М120103_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если КодВидаПИ = "04104" Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00052М120103_" + ИндексСтр);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел53" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		ПрКтд = СокрЛП(ТДО["П000070004503"].Значение);
		
		Если ПоказательДолженПрисутствовать(
			Новый Структура("ИмяПоказателя,ПрКтд", "П000070003503", ПрКтд)) Тогда
			ТДО["КодСубъектаРФ"].Видимость = Истина;
			ТДО["ПсевдоКодСубъектаРФ"].Видимость = Ложь;
		Иначе
			ТДО["П000070003503"].Очистить();
			ТДО["КодСубъектаРФ"].Видимость = Ложь;
			ТДО["ПсевдоКодСубъектаРФ"].Видимость = Истина;
		КонецЕсли;
		
		ОбрабатываемаяОбласть = ТДО["П000070004003"];
		Если ПоказательДолженПрисутствовать(
			Новый Структура("ИмяПоказателя,ПрКтд", "П000070004003", ПрКтд)) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел71" ИЛИ ИмяРаздела = "Раздел72" ИЛИ ИмяРаздела = "Раздел73" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел81" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		ПрНалВыч   = СокрЛП(ТДО["П000810016003"].Значение);
		ПрПорядВыч = СокрЛП(ТДО["П000810016103"].Значение);
		
		ОбрабатываемаяОбласть = ТДО["П000810016103"];
		Если ПрНалВыч = "00" ИЛИ НЕ ЗначениеЗаполнено(ПрНалВыч) Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		Если ПрПорядВыч = "2" Тогда
			
			ОбрабатываемаяОбласть = ТДО["П000810016503"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
			ОбрабатываемаяОбласть = ТДО["П000810017003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=-";
			
			ОбрабатываемаяОбласть = ТДО["П000810018003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Инд = АвтоРасчПоказатели.Найти("П000810018003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			
		Иначе
			
			ОбрабатываемаяОбласть = ТДО["П000810016503"];
			Если ПрПорядВыч = "1" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			КонецЕсли;
			
			ОбрабатываемаяОбласть = ТДО["П000810017003"];
			Если ПрПорядВыч = "1" Тогда
				Если ПрНалВыч = "06" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
					ОбрабатываемаяОбласть.Формат = "ЧН=-";
				Иначе// Случай, когда ПрНалВыч равно 01, 02, 03, 04, 05, 08, 09 или 14
					ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
					ОбрабатываемаяОбласть.Формат = "ЧН=0";
				КонецЕсли;
			Иначе// Случай незаполненного значения ПрПорядВыч
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			КонецЕсли;
			
			ОбрабатываемаяОбласть = ТДО["П000810018003"];
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел82" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00082М120003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			ПрНалВыч = СокрЛП(Обл.Значение);
			ОбрабатываемаяОбласть = ТДО.Найти("П00082М123503_" + ИндексСтр);
			Если ПрНалВыч = "06" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			ИначеЕсли ЗначениеЗаполнено(ПрНалВыч) Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=0";
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				ОбрабатываемаяОбласть.Формат = "ЧН=-";
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00082М120003_" + ИндексСтр);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьИмяАвтоРасчПоказателя(Форма, АвтоРасчПоказатели, ИмяПоказателя)
	
	Инд = АвтоРасчПоказатели.Найти(ИмяПоказателя);
	Если Инд <> Неопределено Тогда
		АвтоРасчПоказатели.Удалить(Инд);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина
			И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
		 ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Форма, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтотОбъект, НаимРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		Для каждого ИмяПок Из СтруктураРеквизитовФормы["НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей"] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяПок);
			Если Обл <> Неопределено Тогда
				ТекВетка.Данные.Вставить("Ф" + Сред(ИмяПок, 2), Обл.Формат);
			КонецЕсли;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимРаздела)
	
	СохранитьДанныеРаздела(НаимРаздела);
	
	Если Модифицированность Тогда
		
		РасчетНаСервере();
		
		ОблУдалитьСтраницуЗначокТекст = Неопределено;
		ОблУдалитьСтраницуЗначокГиперссылка = Неопределено;
		ОблУдалитьСтраницуТекст = Неопределено;
		ОблУдалитьСтраницуГиперссылка = Неопределено;
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено Тогда
			ОблУдалитьСтраницуЗначокТекст = ОблУдалитьСтраницуЗначок.Текст;
			ОблУдалитьСтраницуЗначокГиперссылка = ОблУдалитьСтраницуЗначок.Гиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницуТекст = ОблУдалитьСтраницу.Текст;
			ОблУдалитьСтраницуГиперссылка = ОблУдалитьСтраницу.Гиперссылка;
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокумент(НаимРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено
			И ОблУдалитьСтраницуЗначокТекст <> Неопределено
			И ОблУдалитьСтраницуЗначокГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницуЗначок.Текст = ОблУдалитьСтраницуЗначокТекст;
			ОблУдалитьСтраницуЗначок.Гиперссылка = ОблУдалитьСтраницуЗначокГиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено
			И ОблУдалитьСтраницуТекст <> Неопределено
			И ОблУдалитьСтраницуГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = ОблУдалитьСтраницуТекст;
			ОблУдалитьСтраницу.Гиперссылка = ОблУдалитьСтраницуГиперссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ИмяФормы)].ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	УстановитьЧисловойФорматОбласти(ИмяТекРаздела);
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		ТекВетка = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела(ЭтотОбъект, ИмяТекРаздела)]);
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			Иначе
				ИмяПок = "П" + Сред(ЭлСтруктуры.Ключ, 2);
				Если СтруктураРеквизитовФормы["НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей"].Найти(ИмяПок)
					<> Неопределено Тогда
					Обл = ТабличныйДокумент.Области.Найти(ИмяПок);
					Если Обл <> Неопределено Тогда
						Обл.Формат = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
		// Особая обработка.
		//
		Если ИмяТекРаздела = "Раздел31" Тогда
			РодительскаяСтраницаРаздела3 = ТекВетка.Родитель.Родитель;
			СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела3_КодВидаПИ",
			СокрЛП(РодительскаяСтраницаРаздела3.Данные["П000030001003"]));
		Иначе
			СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела3_КодВидаПИ", Неопределено);
		КонецЕсли;
		Если ИмяТекРаздела = "Раздел51" ИЛИ ИмяТекРаздела = "Раздел52" Тогда
			РодительскаяСтраницаРаздела5 = ТекВетка.Родитель.Родитель;
			СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела5_КодВидаПИ",
			СокрЛП(РодительскаяСтраницаРаздела5.Данные["П000050001003"]));
		Иначе
			СтруктураРеквизитовФормы.Вставить("РодительскаяСтраницаРаздела5_КодВидаПИ", Неопределено);
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуНаСервере(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере(ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтотОбъект, ИмяРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	Для каждого ИмяПок Из СтруктураРеквизитовФормы["НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей"] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ИмяПок);
		Если Обл <> Неопределено Тогда
			ТекВетка.Данные.Вставить("Ф" + Сред(ИмяПок, 2), Обл.Формат);
		КонецЕсли;
	КонецЦикла;
	
	РодительскаяВетка = ?(ТекВетка.Родитель = Неопределено, ДеревоДанныхРаздела, ТекВетка.Родитель);
	НовВетка = РодительскаяВетка.Строки.Добавить();
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = РодительскаяВетка.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	УстановитьПостоянныеЗначенияПоказателей(ИмяРаздела);
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
	ДеревоДанныхРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1] = НомерНовВетки;
	
	Модифицированность = Истина;
	
	Для каждого ПромежуточнаяСтрока Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ПромежуточнаяСтрока.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
			Для Инд = 0 По СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Цикл
				ЭлементыПромежуточнойСтроки = ПромежуточнаяСтрока.ПолучитьЭлементы();
				Для каждого ЭлементПромежуточнойСтроки Из ЭлементыПромежуточнойСтроки Цикл
					Если ЭлементПромежуточнойСтроки.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[Инд] Тогда
						Если Инд = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Тогда
							Элементы.РазделыОтчета.ТекущаяСтрока = ЭлементПромежуточнойСтроки.ПолучитьИдентификатор();
							Возврат;
						Иначе
							ПромежуточнаяСтрока = ЭлементПромежуточнойСтроки;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	УдалитьСтраницуНаСервере(ИмяРаздела);
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере(ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтотОбъект, ИмяРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	НомУдаляемойСтраницы = НомерСтроки;
	
	РодительскаяВетка = ?(ТекВетка.Родитель = Неопределено, ДеревоДанныхРаздела, ТекВетка.Родитель);
	НомПоследнейСтраницы = РодительскаяВетка.Строки.Количество();
	
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	РодительскаяВетка.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
	ДеревоДанныхРаздела = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1] = НомСтраницыПослеУдаления;
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Модифицированность = Истина;
	
	Для каждого ПромежуточнаяСтрока Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ПромежуточнаяСтрока.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
			Для Инд = 0 По СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Цикл
				ЭлементыПромежуточнойСтроки = ПромежуточнаяСтрока.ПолучитьЭлементы();
				Для каждого ЭлементПромежуточнойСтроки Из ЭлементыПромежуточнойСтроки Цикл
					Если ЭлементПромежуточнойСтроки.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[Инд] Тогда
						Если Инд = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Тогда
							Элементы.РазделыОтчета.ТекущаяСтрока = ЭлементПромежуточнойСтроки.ПолучитьИдентификатор();
							Возврат;
						Иначе
							ПромежуточнаяСтрока = ЭлементПромежуточнойСтроки;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел73" Тогда
		
		ИмяОбласти = ТабличныйДокумент.ТекущаяОбласть.Имя;
		ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
		ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
		
		Если СтрНачинаетсяС(ИмяОбласти, СтруктураРеквизитовФормы.мИдГруппыР73М1) Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыР73М1]["ИменаГраф"][0];
			Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_36") <> Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Возможно не более 36 групп строк 170-220 в разделе 7.3';
											|en = 'Возможно не более 36 групп строк 170-220 в разделе 7.3'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		
		Модифицированность = Истина;
		
		СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Не выбрана удаляемая строка многострочного раздела';
			|en = 'Не выбрана удаляемая строка многострочного раздела'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	Модифицированность = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел211" ИЛИ ИмяРаздела = "Раздел212" ИЛИ ИмяРаздела = "Раздел22"
		ИЛИ ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311" ИЛИ ИмяРаздела = "Раздел5"
		ИЛИ ИмяРаздела = "Раздел51" ИЛИ ИмяРаздела = "Раздел52" ИЛИ ИмяРаздела = "Раздел53" ИЛИ ИмяРаздела = "Раздел7"
		ИЛИ ИмяРаздела = "Раздел71" ИЛИ ИмяРаздела = "Раздел72" ИЛИ ИмяРаздела = "Раздел73" ИЛИ ИмяРаздела = "Раздел81"
		ИЛИ ИмяРаздела = "Раздел82"Тогда
	
		РасчетВДеревеЗначений(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Стр.170.
				ТДО["П000040017003"].Значение = ?(ТДО["П000040015003"].Значение = 0, ТДО["П000040014003"].Значение
				- ТДО["П000040016003"].Значение, ТДО["П000040015003"].Значение - ТДО["П000040016003"].Значение);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Стр.040.
				ТДО["П000610004003"].Значение
				= ТДО["П000610001003"].Значение + ТДО["П000610002003"].Значение - ТДО["П000610003003"].Значение;
				
				// Стр.090.
				ТДО["П000610009003"].Значение
				= ТДО["П000610005003"].Значение + ТДО["П000610006003"].Значение + ?(ТДО["П000610008003"].Значение = 0, 0,
				Окр(ТДО["П000610007003"].Значение * ТДО["П000610001003"].Значение / ТДО["П000610008003"].Значение, 2));
				
				// Стр.100.
				ТДО["П000610010003"].Значение = ТДО["П000610004003"].Значение + ТДО["П000610009003"].Значение;
				
				СуммаПоГрафе2 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00062М100002_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					СуммаПоГрафе2 = СуммаПоГрафе2 + Обл.Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00062М100002_" + ИндексСтр);
				КонецЦикла;
				
				СуммаПоГрафе3ЗаИсклПоследнейСтроки = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00062М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					ЭтоПоследняяСтрокаРаздела62 = ТДО.Найти("П00062М100002_" + Формат(Индекс + 1, "ЧГ=")) = Неопределено;
					
					Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
						Обл.Значение = ?(СуммаПоГрафе2 = 0, 0, Окр(ТДО["П00062М100002_" + ИндексСтр].Значение / СуммаПоГрафе2, 7));
						СуммаПоГрафе3ЗаИсклПоследнейСтроки = СуммаПоГрафе3ЗаИсклПоследнейСтроки + Обл.Значение;
					Иначе
						Обл.Значение = ?(СуммаПоГрафе2 <> 0, 1 - СуммаПоГрафе3ЗаИсклПоследнейСтроки, 0);
					КонецЕсли;
					
					ТДО["П00062М100004_" + ИндексСтр].Значение = Окр(Обл.Значение * ТДО["П000610010003"].Значение, 2);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00062М100003_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(Форма, ИмяРаздела);
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел211" ИЛИ ИмяРаздела = "Раздел212" ИЛИ ИмяРаздела = "Раздел22" Тогда
		
		ВозмКоды_РасчетНалогаПоДаннымР211 = СтрРазделить(
		"4000,4002,4003,4005,4006,4007,4008,4009,4010", ",", Ложь);
		
		ВозмКоды_РасчетСтр260 = СтрРазделить(
		"4000,4002,4003,4005,4006,4007,4008,4009,4010,4300", ",", Ложь);
		
		ВозмПрНалВыч_22 = СтрРазделить("01,02,03,04,05,06,08,09,14", ",", Ложь);
		
		Для каждого Ветка_2 Из ДеревоДанных.Строки Цикл
			
			Сведения_21 = Новый Структура;
			
			Для каждого Ветка_21 Из Ветка_2.Строки[0].Строки Цикл
				
				ОКТМО_21      = СокрЛП(Ветка_21.Данные["П000210004003"]);
				ПрНалВыч_21   = СокрЛП(Ветка_21.Данные["П000210013503"]);
				ПрПорядВыч_21 = СокрЛП(Ветка_21.Данные["П000210013603"]);
				
				Ветка_211 = Ветка_21.Строки[0].Строки[0];
				
				// Сумма налога по данным раздела 2.1.1 для расчета стр.130.
				Количество_Графа2 = 0;
				ДеревоМнЧ = Ветка_211.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР211М1];
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					Если ВозмКоды_РасчетНалогаПоДаннымР211.Найти(СокрЛП(СтрокаМнЧ.Данные["П00211М100001"])) <> Неопределено Тогда
						Количество_Графа2 = Количество_Графа2 + СтрокаМнЧ.Данные["П00211М100002"];
					КонецЕсли;
				КонецЦикла;
				СуммаНалогаПоДаннымР211 = Окр(Количество_Графа2 * Ветка_21.Данные["П000210005503"]);
				
				СуммаНалогаПоДаннымР212 = 0;
				
				Для каждого Ветка_212 Из Ветка_21.Строки[1].Строки Цикл
					
					// Стр.260.
					Количество_Графа2 = 0;
					ДеревоМнЧ = Ветка_212.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР212М1];
					Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
						Если ВозмКоды_РасчетСтр260.Найти(СокрЛП(СтрокаМнЧ.Данные["П00212М100001"])) <> Неопределено Тогда
							Количество_Графа2 = Количество_Графа2 + СтрокаМнЧ.Данные["П00212М100002"];
						КонецЕсли;
					КонецЦикла;
					Ветка_212.Данные.Вставить("П002120026003", Окр(Количество_Графа2 * Ветка_212.Данные["П002120020503"]));
					
					// Сумма налога по данным разделов 2.1.2 для расчета стр.130.
					СуммаНалогаПоДаннымР212 = СуммаНалогаПоДаннымР212 + Ветка_212.Данные["П002120026003"];
					
				КонецЦикла;
				
				// Стр.130.
				Ветка_21.Данные.Вставить("П000210013003", СуммаНалогаПоДаннымР211 + СуммаНалогаПоДаннымР212);
				
				// Стр.150.
				Если ПрПорядВыч_21 = "2" Тогда
					Ветка_21.Данные.Вставить("П000210015003", 0);
				Иначе
					Ветка_21.Данные.Вставить("П000210015003", Ветка_21.Данные["П000210013003"] - Ветка_21.Данные["П000210014003"]);
				КонецЕсли;
				
				Если ПрПорядВыч_21 = "2" И ВозмПрНалВыч_22.Найти(ПрНалВыч_21) <> Неопределено И ЗначениеЗаполнено(ОКТМО_21) Тогда
					ТекКлюч = "_" + ПрНалВыч_21 + "_" + ОКТМО_21;
					Если Сведения_21.Свойство(ТекКлюч) Тогда
						Сведения_21.Вставить(ТекКлюч, Сведения_21[ТекКлюч] + Ветка_21.Данные["П000210013003"]);
					Иначе
						Сведения_21.Вставить(ТекКлюч, Ветка_21.Данные["П000210013003"]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Ветка_22 = Ветка_2.Строки[1].Строки[0];
			ДеревоМнЧ = Ветка_22.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР22М1];
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				// Стр.320.
				СумИсчНал = 0;
				ПрНалВыч_22 = СокрЛП(СтрокаМнЧ.Данные["П00022М130003"]);
				ОКТМО_22    = СокрЛП(СтрокаМнЧ.Данные["П00022М131003"]);
				Если ВозмПрНалВыч_22.Найти(ПрНалВыч_22) <> Неопределено И ЗначениеЗаполнено(ОКТМО_22) Тогда
					ТекКлюч = "_" + ПрНалВыч_22 + "_" + ОКТМО_22;
					Если Сведения_21.Свойство(ТекКлюч) Тогда
						СумИсчНал = Сведения_21[ТекКлюч];
					Конецесли;
				КонецЕсли;
				СтрокаМнЧ.Данные.Вставить("П00022М132003", СумИсчНал);
				
				// Стр.340.
				СтрокаМнЧ.Данные.Вставить("П00022М134003", СтрокаМнЧ.Данные["П00022М132003"] - СтрокаМнЧ.Данные["П00022М133003"]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311" Тогда
		
		Для каждого Ветка_3 Из ДеревоДанных.Строки Цикл
			
			КодВидаПИ = СокрЛП(Ветка_3.Данные["П000030001003"]);
			
			// Стр.100.
			Ветка_3.Данные.Вставить("П000030010003", Окр(Ветка_3.Данные["П000030013003"] * Ветка_3.Данные["П000030011003"]
			+ Ветка_3.Данные["П000030014003"] * (1 - Ветка_3.Данные["П000030011003"]), 4));
			
			СуммаСтр210 = 0;
			
			Для каждого Ветка_31 Из Ветка_3.Строки[0].Строки Цикл
				
				СуммаСтр310 = 0;
				
				Для каждого Ветка_311 Из Ветка_31.Строки[0].Строки Цикл
					
					// Стр.290.
					Стр230 = Ветка_31.Данные["П000310023003"];
					Если Стр230 > 0.9 Тогда
						Ветка_311.Данные.Вставить("П003110029003", 0.5);
					ИначеЕсли Стр230 > 0.7 Тогда
						Ветка_311.Данные.Вставить("П003110029003", Окр(2.75 - 2.5 * Стр230, 4));
					ИначеЕсли Стр230 <> 0 Тогда
						Ветка_311.Данные.Вставить("П003110029003", 1);
					Иначе// Стр230 = 0
						Ветка_311.Данные.Вставить("П003110029003", 0);
					КонецЕсли;
					
					// Стр.300.
					Ветка_311.Данные.Вставить("П003110030003", Мин(Ветка_311.Данные["П003110029003"],
					Ветка_311.Данные["П003110029004"], Ветка_311.Данные["П003110029005"],
					Ветка_311.Данные["П003110029006"], Ветка_311.Данные["П003110029007"]));
					
					// Стр.310.
					Количество_Графа2 = 0;
					ДеревоМнЧ = Ветка_311.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР311М1];
					Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
						Если СокрЛП(СтрокаМнЧ.Данные["П00311М100001"]) = "4000" Тогда
							Количество_Графа2 = Количество_Графа2 + СтрокаМнЧ.Данные["П00311М100002"];
						КонецЕсли;
					КонецЦикла;
					Ветка_311.Данные.Вставить("П003110031003", Окр(Количество_Графа2 * Ветка_311.Данные["П003110028503"]));
					
					СуммаСтр310 = СуммаСтр310 + Ветка_311.Данные["П003110031003"];
					
				КонецЦикла;
				
				// Стр.210.
				Ветка_31.Данные.Вставить("П000310021003", СуммаСтр310);
				
				// Особая обработка: стр.215.
				//
				Если КодВидаПИ = "03200" Тогда
					// Ячейка "белая".
					Ветка_31.Данные.Вставить("П000310021503", 0);
				Иначе
					// Ручное редактирование стр.215.
				КонецЕсли;
				
				// Стр.220.
				Ветка_31.Данные.Вставить("П000310022003",
				Окр(Ветка_31.Данные["П000310021003"] - Ветка_31.Данные["П000310021503"]));
				
				// Стр.240.
				ЧислСтр240 = 0.15 * Ветка_3.Данные["П000030017003"] * (Ветка_3.Данные["П000030010003"]
				* Ветка_31.Данные["П000310025003"] + Ветка_3.Данные["П000030015003"] * (1 - Ветка_31.Данные["П000310025003"]));
				ЗнамСтр240 = (1 - Ветка_31.Данные["П000310025003"]) * 42 + Ветка_31.Данные["П000310025003"] * 35;
				Ветка_31.Данные.Вставить("П000310024003", ?(ЗнамСтр240 = 0, 0, Окр(ЧислСтр240 / ЗнамСтр240, 4)));
				
				СуммаСтр210 = СуммаСтр210 + Ветка_31.Данные["П000310021003"];
				
			КонецЦикла;
			
			// Стр.040.
			Если КодВидаПИ = "03200" Тогда
				Ветка_3.Данные.Вставить("П000030004003", СуммаСтр210);
			ИначеЕсли КодВидаПИ = "03300" Тогда
				Ветка_3.Данные.Вставить("П000030004003", 0);
			Иначе
				// Ручное редактирование стр.040.
			КонецЕсли;
			
			// Стр.045.
			Если КодВидаПИ = "03200" Тогда
				Ветка_3.Данные.Вставить("П000030004503", Окр(
				Ветка_3.Данные["П000030006003"] * Ветка_3.Данные["П000030007003"] * Ветка_3.Данные["П000030008003"], 2));
			ИначеЕсли КодВидаПИ = "03300" Тогда
				Ветка_3.Данные.Вставить("П000030004503", 0);
			Иначе
				// Ручное редактирование стр.045.
			КонецЕсли;
			
			// Стр.050.
			Если КодВидаПИ = "03200" Тогда
				Ветка_3.Данные.Вставить("П000030005003", Окр(Ветка_3.Данные["П000030004003"] - Ветка_3.Данные["П000030004503"]));
			ИначеЕсли КодВидаПИ = "03300" Тогда
				Ветка_3.Данные.Вставить("П000030005003", 0);
			Иначе
				// Ручное редактирование стр.050.
			КонецЕсли;
			
			// Стр.180.
			Если КодВидаПИ = "03300" Тогда
				Ветка_3.Данные.Вставить("П000030018003", 0);
			Иначе
				Ветка_3.Данные.Вставить("П000030018003",
				?(Ветка_3.Данные["П000030017003"] = 0, 0, Окр(6.5 / Ветка_3.Данные["П000030017003"], 15)));
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			// Стр.170.
			Ветка.Данные.Вставить("П000040017003", ?(Ветка.Данные["П000040015003"] = 0, Ветка.Данные["П000040014003"]
			- Ветка.Данные["П000040016003"], Ветка.Данные["П000040015003"] - Ветка.Данные["П000040016003"]));
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел5" ИЛИ ИмяРаздела = "Раздел51" ИЛИ ИмяРаздела = "Раздел52" ИЛИ ИмяРаздела = "Раздел53" Тогда
		
		Для каждого Ветка_5 Из ДеревоДанных.Строки Цикл
			
			КодВидаПИ = СокрЛП(Ветка_5.Данные["П000050001003"]);
			
			Для каждого Ветка_51 Из Ветка_5.Строки[0].Строки Цикл
				
				// Стр.170.
				Если КодВидаПИ = "10017" ИЛИ КодВидаПИ = "04104" ИЛИ КодВидаПИ = "04106"
					ИЛИ (КодВидаПИ = "13001" И Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20240630') Тогда
					// Ручное редактирование стр.170.
				Иначе
					Ветка_51.Данные.Вставить("П000510017003", ?(Ветка_51.Данные["П000510016003"] = 0, Ветка_51.Данные["П000510015003"]
					- Ветка_51.Данные["П000510016503"], Ветка_51.Данные["П000510016003"] - Ветка_51.Данные["П000510016503"]));
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого Ветка_52 Из Ветка_5.Строки[1].Строки Цикл
				
				ДеревоМнЧ = Ветка_52.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР52М1];
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					
					// Особая обработка: стр.200.
					//
					Если КодВидаПИ = "05100" Тогда
						// Ручное редактирование стр.200.
					Иначе
						// Ячейка "белая".
						СтрокаМнЧ.Данные.Вставить("П00052М120003", 0);
					КонецЕсли;
					
					// Особая обработка: стр.201.
					//
					Если КодВидаПИ = "04104" Тогда
						// Ручное редактирование стр.201.
					Иначе
						// Ячейка "белая".
						СтрокаМнЧ.Данные.Вставить("П00052М120103", 0);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Ветка_53 = Ветка_5.Строки[2].Строки[0];
			
			// Стр.254.
			Ветка_53.Данные.Вставить("П000530025403", Ветка_53.Данные["П000530025203"] - Ветка_53.Данные["П000530025303"]);
			
			Стр256
			= Ветка_53.Данные["П000530025003"] + Ветка_53.Данные["П000530025103"] - Ветка_53.Данные["П000530025403"];
			
			// Стр.255.
			ЗаполнятьСтр255 = Ложь;
			
			МасИменПоказателей = СтрРазделить(
			"П000530025003,П000530025103,П000530025203,П000530025303,П000530025403", ",", Ложь);
			Для каждого ИмяПок Из МасИменПоказателей Цикл
				ЗаполнятьСтр255 = ЗаполнятьСтр255 ИЛИ ЗначениеЗаполнено(Ветка_53.Данные[ИмяПок]);
			КонецЦикла;
			
			Если ЗаполнятьСтр255 Тогда
				Ветка_53.Данные.Вставить("П000530025503", ?(Стр256 < 0, "1", "0"));
			Иначе
				Ветка_53.Данные.Вставить("П000530025503", "");
			КонецЕсли;
			
			// Стр.256.
			Ветка_53.Данные.Вставить("П000530025603", ?(Стр256 < 0, - Стр256, Стр256));
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		Ветка = ДеревоДанных.Строки[0];
		
		// Стр.040.
		Ветка.Данные.Вставить("П000610004003",
		Ветка.Данные["П000610001003"] + Ветка.Данные["П000610002003"] - Ветка.Данные["П000610003003"]);
		
		// Стр.090.
		Ветка.Данные.Вставить("П000610009003",
		Ветка.Данные["П000610005003"] + Ветка.Данные["П000610006003"] + ?(Ветка.Данные["П000610008003"] = 0, 0,
		Окр(Ветка.Данные["П000610007003"] * Ветка.Данные["П000610001003"] / Ветка.Данные["П000610008003"], 2)));
		
		// Стр.100.
		Ветка.Данные.Вставить("П000610010003", Ветка.Данные["П000610004003"] + Ветка.Данные["П000610009003"]);
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР62М1];
		
		СуммаПоГрафе2 = 0;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			СуммаПоГрафе2 = СуммаПоГрафе2 + СтрокаМнЧ.Данные["П00062М100002"];
			
		КонецЦикла;
		
		СуммаПоГрафе3ЗаИсклПоследнейСтроки = 0;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			ЭтоПоследняяСтрокаРаздела62 = ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) = ДеревоМнЧ.Строки.Количество() - 1;
			
			Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
				СтрокаМнЧ.Данные.Вставить("П00062М100003",
				?(СуммаПоГрафе2 = 0, 0, Окр(СтрокаМнЧ.Данные["П00062М100002"] / СуммаПоГрафе2, 7)));
				СуммаПоГрафе3ЗаИсклПоследнейСтроки = СуммаПоГрафе3ЗаИсклПоследнейСтроки + СтрокаМнЧ.Данные["П00062М100003"];
			Иначе
				СтрокаМнЧ.Данные.Вставить("П00062М100003", ?(СуммаПоГрафе2 <> 0, 1 - СуммаПоГрафе3ЗаИсклПоследнейСтроки, 0));
			КонецЕсли;
			
			СтрокаМнЧ.Данные.Вставить("П00062М100004",
			Окр(СтрокаМнЧ.Данные["П00062М100003"] * Ветка.Данные["П000610010003"], 2));
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел7" ИЛИ ИмяРаздела = "Раздел71" ИЛИ ИмяРаздела = "Раздел72" ИЛИ ИмяРаздела = "Раздел73" Тогда
		
		ВозмКоды_РасчетВариант1 = СтрРазделить("1010,1020,1040,1050,1060,6000,6100", ",", Ложь);
		ВозмКоды_РасчетВариант2 = СтрРазделить("6001,6101", ",", Ложь);
		
		Для каждого Ветка_7 Из ДеревоДанных.Строки Цикл
			
			СуммаСтр057_6000_6001 = 0;
			
			Для каждого Ветка_71 Из Ветка_7.Строки[0].Строки Цикл
				
				ДеревоМнЧ = Ветка_71.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР71М1];
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					
					КодОснНал = СокрЛП(СтрокаМнЧ.Данные["П00071М105403"]);
					
					// Стр.057.
					Если ВозмКоды_РасчетВариант1.Найти(КодОснНал) <> Неопределено Тогда
						СтрокаМнЧ.Данные.Вставить("П00071М105703",
						Окр(СтрокаМнЧ.Данные["П00071М105503"] * СтрокаМнЧ.Данные["П00071М105603"]));
						СуммаСтр057_6000_6001 = СуммаСтр057_6000_6001 + ?(КодОснНал = "6000", СтрокаМнЧ.Данные["П00071М105703"], 0);
					ИначеЕсли ВозмКоды_РасчетВариант2.Найти(КодОснНал) <> Неопределено Тогда
						СтрокаМнЧ.Данные.Вставить("П00071М105703",
						Окр(СтрокаМнЧ.Данные["П00071М105503"] * СтрокаМнЧ.Данные["П00071М105603"] * 0.6));
						СуммаСтр057_6000_6001 = СуммаСтр057_6000_6001 + ?(КодОснНал = "6001", СтрокаМнЧ.Данные["П00071М105703"], 0);
					Иначе
						СтрокаМнЧ.Данные.Вставить("П00071М105703", 0);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Ветка_72 = Ветка_7.Строки[1].Строки[0];
			
			// Стр.070.
			Ветка_72.Данные.Вставить("П000720007003",
			Окр(Ветка_72.Данные["П000720008003"] + Ветка_72.Данные["П000720009003"] + Ветка_72.Данные["П000720010003"]));
			
			// Стр.130.
			Ветка_72.Данные.Вставить("П000720013003", СуммаСтр057_6000_6001);
			
			// Стр.140.
			Ветка_72.Данные.Вставить("П000720014003",
			Окр(Ветка_72.Данные["П000720013003"] * Ветка_72.Данные["П000720012003"]));
			
			// Стр.110.
			Ветка_72.Данные.Вставить("П000720011003",
			Мин(Ветка_72.Данные["П000720014003"], Ветка_72.Данные["П000720006003"] + Ветка_72.Данные["П000720007003"]));
			
			// Стр.150.
			Ветка_72.Данные.Вставить("П000720015003",
			Ветка_72.Данные["П000720013003"] - Ветка_72.Данные["П000720011003"]);
			
			// Стр.160.
			Ветка_72.Данные.Вставить("П000720016003",
			Ветка_72.Данные["П000720006003"] + Ветка_72.Данные["П000720007003"] - Ветка_72.Данные["П000720011003"]);
			
			Ветка_73 = Ветка_7.Строки[2].Строки[0];
			
			ДеревоМнЧ = Ветка_73.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР73М1];
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				// Стр.210.
				СтрокаМнЧ.Данные.Вставить("П00073М121003",
				СтрокаМнЧ.Данные["П00073М118003"] - СтрокаМнЧ.Данные["П00073М119003"] - СтрокаМнЧ.Данные["П00073М120003"]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел81" ИЛИ ИмяРаздела = "Раздел82" Тогда
		
		ВозмПрНалВыч_82 = СтрРазделить("01,02,03,04,05,06,08,09,14", ",", Ложь);
		
		Для каждого Ветка_8 Из ДеревоДанных.Строки Цикл
			
			Сведения_81 = Новый Структура;
			
			Для каждого Ветка_81 Из Ветка_8.Строки[0].Строки Цикл
				
				ОКТМО_81      = СокрЛП(Ветка_81.Данные["П000810004003"]);
				ПрНалВыч_81   = СокрЛП(Ветка_81.Данные["П000810016003"]);
				ПрПорядВыч_81 = СокрЛП(Ветка_81.Данные["П000810016103"]);
				
				// Стр.070.
				Ветка_81.Данные.Вставить("П000810007003",
				Окр(0.5 * (Ветка_81.Данные["П000810008003"] - 15) * Ветка_81.Данные["П000810009003"] * 7.3
				* Ветка_81.Данные["П000810011003"] - Ветка_81.Данные["П000810012003"] * Ветка_81.Данные["П000810009003"]
				+ Ветка_81.Данные["П000810013003"] * Ветка_81.Данные["П000810014003"] + Ветка_81.Данные["П000810014503"], 4));
				
				// Стр.180.
				Если ПрПорядВыч_81 = "2" Тогда
					Ветка_81.Данные.Вставить("П000810018003", 0);
				Иначе
					Ветка_81.Данные.Вставить("П000810018003", Ветка_81.Данные["П000810015003"] - Ветка_81.Данные["П000810016503"]);
				КонецЕсли;
				
				Если ПрПорядВыч_81 = "2" И ВозмПрНалВыч_82.Найти(ПрНалВыч_81) <> Неопределено И ЗначениеЗаполнено(ОКТМО_81) Тогда
					ТекКлюч = "_" + ПрНалВыч_81 + "_" + ОКТМО_81;
					Если Сведения_81.Свойство(ТекКлюч) Тогда
						Сведения_81.Вставить(ТекКлюч, Сведения_81[ТекКлюч] + Ветка_81.Данные["П000810015003"]);
					Иначе
						Сведения_81.Вставить(ТекКлюч, Ветка_81.Данные["П000810015003"]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Ветка_82 = Ветка_8.Строки[1].Строки[0];
			ДеревоМнЧ = Ветка_82.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР82М1];
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				// Стр.220.
				СумИсчНал = 0;
				ПрНалВыч_82 = СокрЛП(СтрокаМнЧ.Данные["П00082М120003"]);
				ОКТМО_82    = СокрЛП(СтрокаМнЧ.Данные["П00082М121003"]);
				Если ВозмПрНалВыч_82.Найти(ПрНалВыч_82) <> Неопределено И ЗначениеЗаполнено(ОКТМО_82) Тогда
					ТекКлюч = "_" + ПрНалВыч_82 + "_" + ОКТМО_82;
					Если Сведения_81.Свойство(ТекКлюч) Тогда
						СумИсчНал = Сведения_81[ТекКлюч];
					Конецесли;
				КонецЕсли;
				СтрокаМнЧ.Данные.Вставить("П00082М122003", СумИсчНал);
				
				// Стр.240.
				СтрокаМнЧ.Данные.Вставить("П00082М124003", СтрокаМнЧ.Данные["П00082М122003"] - СтрокаМнЧ.Данные["П00082М123003"]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.2.
	Структ = Новый Структура;
	Структ.Вставить("П00022М132003");
	Структ.Вставить("П00022М134003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел22", Структ);
	
	// Раздел 2.1.2.
	Структ = Новый Структура;
	Структ.Вставить("П002120026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел212", Структ);
	
	// Раздел 2.1.
	Структ = Новый Структура;
	Структ.Вставить("П000210013003");
	Структ.Вставить("П000210015003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел21", Структ);
	
	// Раздел 3.1.1.
	Структ = Новый Структура;
	Структ.Вставить("П003110029003");
	Структ.Вставить("П003110030003");
	Структ.Вставить("П003110031003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел311", Структ);
	
	// Раздел 3.1.
	Структ = Новый Структура;
	Структ.Вставить("П000310021003");
	Структ.Вставить("П000310022003");
	Структ.Вставить("П000310024003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел31", Структ);
	
	// Раздел 3.
	Структ = Новый Структура;
	Структ.Вставить("П000030004003");
	Структ.Вставить("П000030004503");
	Структ.Вставить("П000030005003");
	Структ.Вставить("П000030010003");
	Структ.Вставить("П000030018003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
	// Раздел 4.
	Структ = Новый Структура;
	Структ.Вставить("П000040017003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел4", Структ);
	
	// Раздел 5.3.
	Структ = Новый Структура;
	Структ.Вставить("П000530025403");
	Структ.Вставить("П000530025503");
	Структ.Вставить("П000530025603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел53", Структ);
	
	// Раздел 5.1.
	Структ = Новый Структура;
	Структ.Вставить("П000510017003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел51", Структ);
	
	// Раздел 6.
	Структ = Новый Структура;
	Структ.Вставить("П000610004003");
	Структ.Вставить("П000610009003");
	Структ.Вставить("П000610010003");
	Структ.Вставить("П00062М100003");
	Структ.Вставить("П00062М100004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел6", Структ);
	
	// Раздел 7.3.
	Структ = Новый Структура;
	Структ.Вставить("П00073М121003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел73", Структ);
	
	// Раздел 7.1.
	Структ = Новый Структура;
	Структ.Вставить("П00071М105703");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел71", Структ);
	
	// Раздел 7.2.
	Структ = Новый Структура;
	Структ.Вставить("П000720007003");
	Структ.Вставить("П000720011003");
	Структ.Вставить("П000720013003");
	Структ.Вставить("П000720014003");
	Структ.Вставить("П000720015003");
	Структ.Вставить("П000720016003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел72", Структ);
	
	// Раздел 8.1.
	Структ = Новый Структура;
	Структ.Вставить("П000810007003");
	Структ.Вставить("П000810018003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел81", Структ);
	
	// Раздел 8.2.
	Структ = Новый Структура;
	Структ.Вставить("П00082М122003");
	Структ.Вставить("П00082М124003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел82", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки509");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
																	|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки509");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
															|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки509");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДПИ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_NDPI"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПериода      = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12",",", Ложь);
	ВозможныеКодыПериодаРеорг = СтрРазделить("71,72,73,74,75,76,77,78,79,80,81,82",",", Ложь);
	
	ВозможныеКодыПоМесту = ВозможныеЗначенияИзСпискаВыбораПоказателя("ПоМесту");
	
	ВозможныеКодыФормыРеорганизции = ВозможныеЗначенияИзСпискаВыбораПоказателя("КодФормыРеорганизации");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 12 цифр.", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогоплательщика.", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места нахождения (учета)", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.МассивЗначений.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Код места нахождения (учета) должен принимать одно из значений: "
		+ ВозможныеКодыПоМесту.СтрокаЗначений, "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту = "213" И Сред(ПараметрыВыгрузки.КПП, 5, 2) <> "50" Тогда
		СообщитьВТС(
		"5-й и 6-й символы КПП организации должны быть равны 50 при коде места нахождения (учета) 213",
		"Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту <> "213" И ПараметрыВыгрузки.ПоМесту <> "216"
		И ПараметрыВыгрузки.ПоМесту <> "331" И Сред(ПараметрыВыгрузки.КПП, 5, 2) = "50" Тогда
		СообщитьВТС(
		"Код места нахождения (учета) может быть равен 213, 216 или 331, если 5-й и 6-й символы КПП организации равны 50",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(
		"Не задано наименование документа, подтверждающего полномочия представителя налогоплательщика",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации)", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		Иначе
			Если ВозможныеКодыФормыРеорганизции.МассивЗначений.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Код формы реорганизации (ликвидации) может принимать одно из значений: "
				+ ВозможныеКодыФормыРеорганизции.СтрокаЗначений, "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	НомСтраницы = "1";
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М101003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 1: в строке " + НомСтроки + ?(ДлинаЗначПок = 0, " не", "") + " задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел1", "П00001М101003_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М102003"]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС("Раздел 1: в строке " + НомСтроки + ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 8 или 11 цифр", ""), "Раздел1", "П00001М102003_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СообщитьВТС("Не заполнен раздел 1", "Раздел1", "П00001М101003_1", НомСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел2") Тогда
		
		ВозможныеПрНалВыч_21    = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000210013503");
		ВозможныеПрПорядВычет   = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000210013603");
		ВозможныеКодыОснНал_211 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00211М100001");
		ВозможныеКодыОснНал_212 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00212М100001");
		ВозможныеПрНалВыч_22    = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00022М130003");
		
		Для каждого Ветка_2 Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы_2 = Формат(ДеревоРаздела.Строки.Индекс(Ветка_2) + 1, "ЧГ=");
			
			Если СокрЛП(Ветка_2.Данные["П000020001003"]) <> "03100" Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2
				+ ": код вида добытого полезного ископаемого должен быть равен 03100", "Раздел2", "П000020001003", НомСтраницы_2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_2.Данные["П000020002003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел2", "П000020002003", НомСтраницы_2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СокрЛП(Ветка_2.Данные["П000020003003"]) <> "168" Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + ": код единицы измерения должен быть равен 168",
				"Раздел2", "П000020003003", НомСтраницы_2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДолженОтсутствовать_Раздел22 = Ложь;
			
			// Подраздел 2.1.
			Для каждого Ветка_21 Из Ветка_2.Строки[0].Строки Цикл
				
				НомСтраницы_21 = Формат(Ветка_2.Строки[0].Строки.Индекс(Ветка_21) + 1, "ЧГ=");
				Координаты_21 = НомСтраницы_2 + ",1," + НомСтраницы_21;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_21.Данные["П000210004003"]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
					", не состоящий из 8 или 11 цифр", ""), "Раздел21", "П000210004003", Координаты_21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Ветка_21.Данные["П000210005003"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
					+ ": " + ТекстСообщения, "Раздел21", "П000210005003", Координаты_21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_21.Данные["П000210005004"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
					+ ": " + ТекстСообщения, "Раздел21", "П000210005004", Координаты_21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_21.Данные["П000210005005"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
					+ ": " + ТекстСообщения, "Раздел21", "П000210005005", Координаты_21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка_21.Данные["П000210013503"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеПрНалВыч_21.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
					+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогового вычета" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрНалВыч_21.СтрокаЗначений, ""),
					"Раздел21", "П000210013503", Координаты_21);
					СтатусПроверки = Ложь;
				Иначе
					ЗначПок_Стр136 = СокрЛП(Ветка_21.Данные["П000210013603"]);
					Если ЗначПок = "00" И ЗначениеЗаполнено(ЗначПок_Стр136) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
						+ ": признак порядка применения налогового вычета не должен быть заполнен, если признак налогового вычета равен 00",
						"Раздел21", "П000210013603", Координаты_21);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "00" И НЕ ЗначениеЗаполнено(ЗначПок_Стр136) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
						+ ": признак порядка применения налогового вычета должен быть заполнен, если признак налогового вычета неравен 00",
						"Раздел21", "П000210013603", Координаты_21);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "00" И ВозможныеПрПорядВычет.МассивЗначений.Найти(ЗначПок_Стр136) = Неопределено Тогда
						ДлинаЗначПок_Стр136 = СтрДлина(ЗначПок_Стр136);
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21 + ": "
						+ ?(ДлинаЗначПок_Стр136 = 0, "не задан ", "") + "признак порядка применения налогового вычета"
						+ ?(ДлинаЗначПок_Стр136 <> 0, " должен принимать одно из значений: " + ВозможныеПрПорядВычет.СтрокаЗначений, ""),
						"Раздел21", "П000210013603", Координаты_21);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДолженОтсутствовать_Раздел22 = ДолженОтсутствовать_Раздел22 ИЛИ ЗначПок = "00" ИЛИ ЗначПок_Стр136 = "1";
				
				// Подраздел 2.1.1.
				Ветка_211 = Ветка_21.Строки[0].Строки[0];
				ДанныеМнЧ = Ветка_211.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М1];
				Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
					Координаты_211 = Координаты_21 + ",1,1";
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00211М100001"]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						Если ВозможныеКодыОснНал_211.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
							+ " -> Подраздел 2.1.1: в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
							+ "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
							+ ВозможныеКодыОснНал_211.СтрокаЗначений, ""), "Раздел211", "П00211М100001_" + НомСтроки, Координаты_211);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				// Подраздел 2.1.2.
				Если ЗаполненРаздел(Ветка_21.Строки[1], "Раздел212") Тогда
					
					Для каждого Ветка_212 Из Ветка_21.Строки[1].Строки Цикл
						
						НомСтраницы_212 = Формат(Ветка_21.Строки[1].Строки.Индекс(Ветка_212) + 1, "ЧГ=");
						Координаты_212 = Координаты_21 + ",2," + НомСтраницы_212;
						
						Если НЕ ЗначениеЗаполнено(Ветка_212.Данные["П002120016003"]) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
							+ " -> Подраздел 2.1.2 -> Страница " + НомСтраницы_212 + ": не задано наименование залежи",
							"Раздел212", "П002120016003", Координаты_212);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ДанныеМнЧ = Ветка_212.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР212М1];
						Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00212М100001"]);
							ДлинаЗначПок = СтрДлина(ЗначПок);
							Если ВозможныеКодыОснНал_212.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.1 -> Страница " + НомСтраницы_21
								+ " -> Подраздел 2.1.2 -> Страница " + НомСтраницы_212 + ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0,
								"не задан ", "") + "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
								+ ВозможныеКодыОснНал_212.СтрокаЗначений, ""), "Раздел212", "П00212М100001_" + НомСтроки, Координаты_212);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Подраздел 2.2.
			Ветка_22 = Ветка_2.Строки[1].Строки[0];
			
			Координаты_22 = НомСтраницы_2 + ",2";
			
			ДанныеМнЧ = Ветка_22.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			
			Если ДолженОтсутствовать_Раздел22 И ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + ": Подраздел 2.2 не должен быть заполнен, если "
				+ "Подраздел 2.1 содержит значение 00 признака налогового вычета или значение 1 признака порядка применения "
				+ "налогового вычета", "Раздел22", "П00022М130003_1", Координаты_22);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00022М130003"]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ВозможныеПрНалВыч_22.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.2: в строке " + НомСтроки + " "
						+ ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогового вычета" + ?(ДлинаЗначПок <> 0,
						" должен принимать одно из значений: " + ВозможныеПрНалВыч_22.СтрокаЗначений, ""),
						"Раздел22", "П00022М130003_" + НомСтроки, Координаты_22);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00022М131003"]));
					Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы_2 + " -> Подраздел 2.2: в строке "
						+ НомСтроки + ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
						", не состоящий из 8 или 11 цифр", ""), "Раздел22", "П00022М131003_" + НомСтроки, Координаты_22);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел3") Тогда
		
		ВозможныеКодыПИ     = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000030001003");
		ВозможныеКодыОснНал = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00311М100001");
		
		Для каждого Ветка_3 Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы_3 = Формат(ДеревоРаздела.Строки.Индекс(Ветка_3) + 1, "ЧГ=");
			
			Если ВозможныеКодыПИ.МассивЗначений.Найти(СокрЛП(Ветка_3.Данные["П000030001003"])) = Неопределено Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3
				+ ": код вида добытого полезного ископаемого должен принимать одно из значений: "
				+ ВозможныеКодыПИ.СтрокаЗначений, "Раздел3", "П000030001003", НомСтраницы_3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_3.Данные["П000030002003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел3", "П000030002003", НомСтраницы_3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_3.Данные["П000030003003"]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код единицы измерения" + ?(ДлинаЗначПок <> 0, ", не состоящий из 3 цифр", ""),
				"Раздел3", "П000030003003", НомСтраницы_3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 3.1.
			Для каждого Ветка_31 Из Ветка_3.Строки[0].Строки Цикл
				
				НомСтраницы_31 = Формат(Ветка_3.Строки[0].Строки.Индекс(Ветка_31) + 1, "ЧГ=");
				Координаты_31 = НомСтраницы_3 + ",1," + НомСтраницы_31;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_31.Данные["П000310019003"]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
					", не состоящий из 8 или 11 цифр", ""), "Раздел31", "П000310019003", Координаты_31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Ветка_31.Данные["П000310020003"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
					+ ": " + ТекстСообщения, "Раздел31", "П000310020003", Координаты_31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_31.Данные["П000310020004"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
					+ ": " + ТекстСообщения, "Раздел31", "П000310020004", Координаты_31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_31.Данные["П000310020005"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
					+ ": " + ТекстСообщения, "Раздел31", "П000310020005", Координаты_31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Подраздел 3.1.1.
				Для каждого Ветка_311 Из Ветка_31.Строки[0].Строки Цикл
					
					НомСтраницы_311 = Формат(Ветка_31.Строки[0].Строки.Индекс(Ветка_311) + 1, "ЧГ=");
					Координаты_311 = Координаты_31 + ",1," + НомСтраницы_311;
					
					Если НЕ ЗначениеЗаполнено(Ветка_311.Данные["П003110026003"]) Тогда
						СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
						+ " -> Подраздел 3.1.1 -> Страница " + НомСтраницы_311 + ": не задано наименование залежи",
						"Раздел311", "П003110026003", Координаты_311);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДанныеМнЧ = Ветка_311.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР311М1];
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00311М100001"]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						Если ВозможныеКодыОснНал.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы_3 + " -> Подраздел 3.1 -> Страница " + НомСтраницы_31
							+ " -> Подраздел 3.1.1 -> Страница " + НомСтраницы_311 + ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0,
							"не задан ", "") + "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
							+ ВозможныеКодыОснНал.СтрокаЗначений, ""), "Раздел311", "П00311М100001_" + НомСтроки, Координаты_311);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел4"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел4") Тогда
		
		ВозможныеКодыПИ     = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000040001003");
		ВозможныеКодыОснНал = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00004М100001");
		ВозможныеПрНалВыч   = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000040015503");
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если ВозможныеКодыПИ.МассивЗначений.Найти(СокрЛП(Ветка.Данные["П000040001003"])) = Неопределено Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы
				+ ": код вида добытого полезного ископаемого должен принимать одно из значений: "
				+ ВозможныеКодыПИ.СтрокаЗначений, "Раздел4", "П000040001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000040002003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел4", "П000040002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000040003003"]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код единицы измерения" + ?(ДлинаЗначПок <> 0, ", не состоящий из 3 цифр", ""),
				"Раздел4", "П000040003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000040004003"]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 8 или 11 цифр", ""), "Раздел4", "П000040004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Серия, номер и вид лицензии на пользование недрами.
			ТекстСообщения = "";
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Ветка.Данные["П000040005003"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ТекстСообщения,
				"Раздел4", "П000040005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка.Данные["П000040005004"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ТекстСообщения,
				"Раздел4", "П000040005004", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка.Данные["П000040005005"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ТекстСообщения,
				"Раздел4", "П000040005005", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П000040006003"]) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы
				+ ": не задано наименование нового морского месторождения", "Раздел4", "П000040006003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П000040007003"]) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы
				+ ": не заданы месяц и год начала промышленной добычи углеводородного сырья",
				"Раздел4", "П000040007003", НомСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + СокрЛП(Ветка.Данные["П000040007003"]));
				Если НЕ ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
					СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы
					+ ": заданы месяц и год начала промышленной добычи углеводородного сырья, не соответствующие шаблону ""ММ.ГГГГ""",
					"Раздел4", "П000040007003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(МесяцИГод_Дата) Тогда
					СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы
					+ ": заданы месяц и год начала промышленной добычи углеводородного сырья, "
					+ "выходящие за пределы периода с 01.1900 по 12.2099", "Раздел4", "П000040007003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР4М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00004М100001"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеКодыОснНал.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0,
					"не задан ", "") + "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
					+ ВозможныеКодыОснНал.СтрокаЗначений, ""), "Раздел4", "П00004М100001_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗначПок = СокрЛП(Ветка.Данные["П000040015503"]);
			ДлинаЗначПок = СтрДлина(ЗначПок);
			Если ВозможныеПрНалВыч.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не задан ", "")
				+ "признак налогового вычета" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
				+ ВозможныеПрНалВыч.СтрокаЗначений, ""), "Раздел4", "П000040015503", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел5"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел5") Тогда
		
		ВозможныеКодыПИ        = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000050001003");
		ВозможныеКрента        = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000510005003");
		ВозможныеПрНП          = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000510005103");
		ВозможныеКодыСубРФ     = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000510005203");
		ВозможныеПрКоэф        = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00051М105501");
		ВозможныеКодыОснНал_51 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00051М200001");
		ВозможныеПрНалВыч      = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000510016403");
		ВозможныеПрМет         = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00052М118003");
		ВозможныеПрОстСум      = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000530025503");
		
		Для каждого Ветка_5 Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы_5 = Формат(ДеревоРаздела.Строки.Индекс(Ветка_5) + 1, "ЧГ=");
			
			КодВидаПИ = СокрЛП(Ветка_5.Данные["П000050001003"]);
			
			Если НЕ ЗначениеЗаполнено(КодВидаПИ) Тогда
				СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5
				+ ": не задан код вида добытого полезного ископаемого", "Раздел5", "П000050001003", НомСтраницы_5);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеКодыПИ.МассивЗначений.Найти(КодВидаПИ) = Неопределено Тогда
				СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5
				+ ": код вида добытого полезного ископаемого должен принимать одно из значений: "
				+ ВозможныеКодыПИ.СтрокаЗначений, "Раздел5", "П000050001003", НомСтраницы_5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_5.Данные["П000050002003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел5", "П000050002003", НомСтраницы_5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_5.Данные["П000050003003"]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код единицы измерения" + ?(ДлинаЗначПок <> 0, ", не состоящий из 3 цифр", ""),
				"Раздел5", "П000050003003", НомСтраницы_5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 5.1.
			Для каждого Ветка_51 Из Ветка_5.Строки[0].Строки Цикл
				
				НомСтраницы_51 = Формат(Ветка_5.Строки[0].Строки.Индекс(Ветка_51) + 1, "ЧГ=");
				Координаты_51 = НомСтраницы_5 + ",1," + НомСтраницы_51;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_51.Данные["П000510004003"]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
					", не состоящий из 8 или 11 цифр", ""), "Раздел51", "П000510004003", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				ВозможныеДлиныЗначенияРеквизита = Новый Массив;
				ВозможныеДлиныЗначенияРеквизита.Добавить(3);
				ВозможныеДлиныЗначенияРеквизита.Добавить(4);
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита,ВозможныеДлиныЗначенияРеквизита",
				"Серия", СокрЛП(Ветка_51.Данные["П000510004103"]), ВозможныеДлиныЗначенияРеквизита);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ТекстСообщения, "Раздел51", "П000510004103", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_51.Данные["П000510004104"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ТекстСообщения, "Раздел51", "П000510004104", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_51.Данные["П000510004105"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ТекстСообщения, "Раздел51", "П000510004105", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если Ветка_51.Данные["П000510005003"] = 0 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": не задан рентный коэффициент Крента", "Раздел51", "П000510005003", Координаты_51);
					СтатусПроверки = Ложь;
				Иначе
					ЗначПок = Формат(Ветка_51.Данные["П000510005003"], "ЧН=;ЧРД=','");
					Если ВозможныеКрента.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": " + ?(ЗначПок = "", "не задан ", "") + "рентный коэффициент Крента" + ?(ЗначПок <> "",
						" должен принимать одно из значений: " + ВозможныеКрента.СтрокаЗначений, ""),
						"Раздел51", "П000510005003", Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				МассивПрКоэф = Новый Массив;
				
				ДанныеМнЧ = Ветка_51.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР51М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					МассивПрКоэф.Добавить(СокрЛП(СтрокаМнЧ.Данные["П00051М105501"]));
				КонецЦикла;
				
				ПрНП = СокрЛП(Ветка_51.Данные["П000510005103"]);
				
				ДлинаЗначПок = СтрДлина(ПрНП);
				Если ВозможныеПрНП.МассивЗначений.Найти(ПрНП) = Неопределено Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогоплательщика" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрНП.СтрокаЗначений, ""),
					"Раздел51", "П000510005103", Координаты_51);
					СтатусПроверки = Ложь;
				Иначе
					Если (МассивПрКоэф.Найти("01") <> Неопределено ИЛИ МассивПрКоэф.Найти("03") <> Неопределено) И ПрНП <> "1" Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": признак налогоплательщика должен принимать значение 1 при значении 01 или 03 признака коэффициента, "
						+ "применяемого к ставке налога", "Раздел51", "П000510005103", Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если МассивПрКоэф.Найти("02") <> Неопределено И ПрНП <> "2" Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": признак налогоплательщика должен принимать значение 2 при значении 02 признака коэффициента, "
						+ "применяемого к ставке налога", "Раздел51", "П000510005103", Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка_51.Данные["П000510005203"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ПоказательДолженПрисутствовать(
					Новый Структура("ИмяПоказателя,ПрНП,МассивПрКоэф", "П000510005203", ПрНП, МассивПрКоэф)) Тогда
					Если ВозможныеКодыСубРФ.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "код субъекта Российской Федерации, на территории "
						+ "которого налогоплательщиком получен статус участника РИП или резидента ТОР" + ?(ДлинаЗначПок <> 0,
						", должен принимать одно из значений: " + ВозможныеКодыСубРФ.СтрокаЗначений, ""),
						"Раздел51", "П000510005203", Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": код субъекта Российской Федерации, на территории которого налогоплательщиком получен статус участника "
					+ "РИП или резидента ТОР, не должен быть задан при указанных значениях признака налогоплательщика и "
					+ "признака коэффициента, применяемого к ставке налога", "Раздел51", "П000510005203", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ПоказательДолженПрисутствовать(Новый Структура("ИмяПоказателя,ПрНП", "П000510005303", ПрНП)) Тогда
					Если Ветка_51.Данные["П000510005303"] = 0 Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": среднесписочная численность работников организации должна быть задана, "
						+ "если признак налогоплательщика равен " + ПрНП, "Раздел51", "П000510005303", Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли Ветка_51.Данные["П000510005303"] <> 0 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": среднесписочная численность работников организации не должна быть задана, "
					+ "если признак налогоплательщика равен " + ПрНП, "Раздел51", "П000510005303", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ПрКоэф = СокрЛП(СтрокаМнЧ.Данные["П00051М105501"]);
					ДлинаЗначПок = СтрДлина(ПрКоэф);
					Если ВозможныеПрКоэф.МассивЗначений.Найти(ПрКоэф) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница "
						+ НомСтраницы_51 + ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
						+ "признак коэффициента, применяемого к ставке налога" + ?(ДлинаЗначПок <> 0,
						", должен принимать одно из значений: " + ВозможныеПрКоэф.СтрокаЗначений, ""),
						"Раздел51", "П00051М105501_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрРазделить("01,02,03", ",", Ложь).Найти(ПрКоэф) <> Неопределено И ПрНП = "0" Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": в строке " + НомСтроки + " признак коэффициента, применяемого к ставке налога, не должен быть равен "
						+ "01, 02, 03, если признак налогоплательщика равен 0", "Раздел51", "П00051М105501_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СтрокаМнЧ.Данные["П00051М105502"];
					Если ПрКоэф = "07" И ЗначПок <> 0.1 И ЗначПок <> 1 Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": в строке " + НомСтроки + " значение коэффициента, применяемого к ставке налога, должно быть равно 0,1 "
						+ "или 1, если признак коэффициента равен 07", "Раздел51", "П00051М105502_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					ИначеЕсли ПрКоэф = "05" И ЗначПок <> 0.25 И ЗначПок <> 1 Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": в строке " + НомСтроки + " значение коэффициента, применяемого к ставке налога, должно быть равно 0,25 "
						+ "или 1, если признак коэффициента равен 05", "Раздел51", "П00051М105502_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					ИначеЕсли ПрКоэф = "00" И ЗначПок <> 0 Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": в строке " + НомСтроки + " значение коэффициента, применяемого к ставке налога, должно быть равно 0, "
						+ "если признак коэффициента равен 00", "Раздел51", "П00051М105502_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеМнЧ = Ветка_51.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР51М2];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00051М200001"]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ВозможныеКодыОснНал_51.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
						+ ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
						+ "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
						+ ВозможныеКодыОснНал_51.СтрокаЗначений, ""), "Раздел51", "П00051М200001_" + НомСтроки, Координаты_51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Ветка_51.Данные["П000510009003"] = 0 И Ветка_51.Данные["П000510010003"] <> 0 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": не задано количество реализованного добытого полезного ископаемого при заполненном значении "
					+ "выручки от реализации добытого полезного ископаемого", "Раздел51", "П000510009003", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если Ветка_51.Данные["П000510009003"] <> 0 И Ветка_51.Данные["П000510010003"] = 0 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": не задана выручка от реализации добытого полезного ископаемого при заполненном значении "
					+ "количества реализованного добытого полезного ископаемого", "Раздел51", "П000510010003", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка_51.Данные["П000510016403"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеПрНалВыч.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.1 -> Страница " + НомСтраницы_51
					+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогового вычета" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрНалВыч.СтрокаЗначений, ""),
					"Раздел51", "П000510016403", Координаты_51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			// Подраздел 5.2.
			Если ВозможныеКодыПИ.МассивЗначений.Найти(КодВидаПИ) <> Неопределено Тогда
				
				Если Раздел52ДолженБытьЗаполнен(КодВидаПИ) И НЕ ЗаполненРаздел(Ветка_5.Строки[1], "Раздел52") Тогда
					
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5
					+ " -> Подраздел 5.2 должен быть заполнен при коде вида добытого полезного ископаемого, равном "
					+ КодВидаПИ, "Раздел52", "П000520017703", НомСтраницы_5 + ",2,1");
					СтатусПроверки = Ложь;
					
				ИначеЕсли НЕ Раздел52ДолженБытьЗаполнен(КодВидаПИ) И ЗаполненРаздел(Ветка_5.Строки[1], "Раздел52") Тогда
					
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5
					+ " -> Подраздел 5.2 не должен быть заполнен при коде вида добытого полезного ископаемого, равном "
					+ КодВидаПИ, "Раздел52", "П000520017703", НомСтраницы_5 + ",2,1");
					СтатусПроверки = Ложь;
					
				ИначеЕсли Раздел52ДолженБытьЗаполнен(КодВидаПИ) И ЗаполненРаздел(Ветка_5.Строки[1], "Раздел52") Тогда
					
					Для каждого Ветка_52 Из Ветка_5.Строки[1].Строки Цикл
						
						НомСтраницы_52 = Формат(Ветка_5.Строки[1].Строки.Индекс(Ветка_52) + 1, "ЧГ=");
						Координаты_52 = НомСтраницы_5 + ",2," + НомСтраницы_52;
						
						// Серия, номер и вид лицензии на пользование недрами.
						ТекстСообщения = "";
						ВозможныеДлиныЗначенияРеквизита = Новый Массив;
						ВозможныеДлиныЗначенияРеквизита.Добавить(3);
						ВозможныеДлиныЗначенияРеквизита.Добавить(4);
						СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита,ВозможныеДлиныЗначенияРеквизита",
						"Серия", СокрЛП(Ветка_52.Данные["П000520017703"]), ВозможныеДлиныЗначенияРеквизита);
						Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
							СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2 -> Страница " + НомСтраницы_52
							+ ": " + ТекстСообщения, "Раздел52", "П000520017703", Координаты_52);
							СтатусПроверки = Ложь;
						КонецЕсли;
						СтруктураПараметров
						= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_52.Данные["П000520017704"]));
						Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
							СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2 -> Страница " + НомСтраницы_52
							+ ": " + ТекстСообщения, "Раздел52", "П000520017704", Координаты_52);
							СтатусПроверки = Ложь;
						КонецЕсли;
						СтруктураПараметров
						= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_52.Данные["П000520017705"]));
						Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
							СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2 -> Страница " + НомСтраницы_52
							+ ": " + ТекстСообщения, "Раздел52", "П000520017705", Координаты_52);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ДанныеМнЧ = Ветка_52.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР52М1];
						
						Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00052М118003"]);
							ДлинаЗначПок = СтрДлина(ЗначПок);
							Если ВозможныеПрМет.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2: в строке " + НомСтроки
								+ " " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак металла" + ?(ДлинаЗначПок <> 0,
								" должен принимать одно из значений: " + ВозможныеПрМет.СтрокаЗначений, ""),
								"Раздел52", "П00052М118003_" + НомСтроки, Координаты_52);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							Если КодВидаПИ = "04104" И СтрокаМнЧ.Данные["П00052М120003"] <> 0 Тогда
								СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2: в строке " + НомСтроки
								+ " доля содержания металла в руде не должна быть заполнена при коде вида добытого полезного ископаемого, "
								+ "равном " + КодВидаПИ, "Раздел52", "П00052М120003_" + НомСтроки, Координаты_52);
								СтатусПроверки = Ложь;
							ИначеЕсли КодВидаПИ = "05100" И СтрокаМнЧ.Данные["П00052М120103"] <> 0 Тогда
								СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.2: в строке " + НомСтроки
								+ " процент содержания железа в руде не должен быть заполнен при коде вида добытого полезного ископаемого, "
								+ "равном " + КодВидаПИ, "Раздел52", "П00052М120103_" + НомСтроки, Координаты_52);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Подраздел 5.3.
			Ветка_53 = Ветка_5.Строки[2].Строки[0];
			
			Если ЗаполненаСтраницаРаздела(Ветка_53, "Раздел53") Тогда
				
				Координаты_53 = НомСтраницы_5 + ",3";
				
				ЗначПок = СокрЛП(Ветка_53.Данные["П000530025503"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеПрОстСум.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 + " -> Подраздел 5.3: " + ?(ДлинаЗначПок = 0,
					"не задан ", "") + "признак остатка суммы осуществленных капитальных вложений" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрОстСум.СтрокаЗначений, ""),
					"Раздел53", "П000530025503", Координаты_53);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если Ветка_53.Данные["П000530025603"] < 0 Тогда
					СообщитьВТС("Раздел 5 -> Страница " + НомСтраницы_5 
					+ " -> Подраздел 5.3: значение в строке 256 не должно быть отрицательным",
					"Раздел53", "П000530025603", Координаты_53);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 6.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел6"];
	НомСтраницы = "1";
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел6") Тогда
		
		Ветка = ДеревоРаздела.Строки[0];
		
		ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000620011003"]));
		Если ДлинаЗначПок <> 3 Тогда
			СообщитьВТС("Раздел 6: " + ?(ДлинаЗначПок = 0, "не ", "")
			+ "задан код единицы измерения" + ?(ДлинаЗначПок <> 0, ", не состоящий из 3 цифр", ""),
			"Раздел6", "П000620011003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ВозможныеКодыПИ = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00062М100001");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР62М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00062М100001"]);
			Если ВозможныеКодыПИ.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Раздел 6: в строке " + НомСтроки
				+ " Подраздела 6.2 код добытого полезного ископаемого должен принимать одно из значений: "
				+ ВозможныеКодыПИ.СтрокаЗначений, "Раздел6", "П00062М100001_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Раздел 7.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел7"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел7") Тогда
		
		ВозможныеКодыСубРФ  = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000070003503");
		ВозможныеКтд        = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000070004003");
		ВозможныеПрКтд      = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000070004503");
		ВозможныеКодыПИ     = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00071М105303");
		ВозможныеКодыОснНал = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00071М105403");
		
		Для каждого Ветка_7 Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы_7 = Формат(ДеревоРаздела.Строки.Индекс(Ветка_7) + 1, "ЧГ=");
			
			// Серия, номер и вид лицензии на пользование недрами.
			ТекстСообщения = "";
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Ветка_7.Данные["П000070001003"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ТекстСообщения,
				"Раздел7", "П000070001003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_7.Данные["П000070001004"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ТекстСообщения,
				"Раздел7", "П000070001004", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров
			= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_7.Данные["П000070001005"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ТекстСообщения,
				"Раздел7", "П000070001005", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_7.Данные["П000070002003"]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код единицы измерения" + ?(ДлинаЗначПок <> 0, ", не состоящий из 3 цифр", ""),
				"Раздел7", "П000070002003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_7.Данные["П000070003003"]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 8 или 11 цифр", ""), "Раздел7", "П000070003003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПрКтд = СокрЛП(Ветка_7.Данные["П000070004503"]);
			
			ЗначПок = СокрЛП(Ветка_7.Данные["П000070003503"]);
			ДлинаЗначПок = СтрДлина(ЗначПок);
			Если ПоказательДолженПрисутствовать(Новый Структура("ИмяПоказателя,ПрКтд", "П000070003503", ПрКтд)) Тогда
				Если ВозможныеКодыСубРФ.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": " + ?(ДлинаЗначПок = 0, "не задан ", "")
					+ "код субъекта Российской Федерации, на территории которого налогоплательщиком получен статус участника "
					+ "РИП или резидента ТОР" + ?(ДлинаЗначПок <> 0, ", должен принимать одно из значений: "
					+ ВозможныеКодыСубРФ.СтрокаЗначений, ""), "Раздел7", "П000070003503", НомСтраницы_7);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": код субъекта Российской Федерации, на территории "
				+ "которого налогоплательщиком получен статус участника РИП или резидента ТОР, не должен быть задан при "
				+ "указанном значении признака коэффициента Ктд", "Раздел7", "П000070003503", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПоказательДолженПрисутствовать(Новый Структура("ИмяПоказателя,ПрКтд", "П000070004003", ПрКтд)) Тогда
				ЗначПок = Формат(Ветка_7.Данные["П000070004003"], "ЧН=0;ЧРД=','");
				ЗначПок = ?(Ветка_7.Данные["П000070004003"] = 0 И СтрНайти(Ветка_7.Данные.Ф000070004003, "ЧН=0") = 0, "-", ЗначПок);
				Если ВозможныеКтд.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": коэффициент Ктд должен принимать одно из значений: "
					+ ВозможныеКтд.СтрокаЗначений, "Раздел7", "П000070004003", НомСтраницы_7);
					СтатусПроверки = Ложь;
				КонецЕсли;
			ИначеЕсли Ветка_7.Данные["П000070004003"] <> 0 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": значение коэффициента Ктд не должно быть заполнено",
				"Раздел7", "П000070004003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПрКтд) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": не задан признак коэффициента Ктд",
				"Раздел7", "П000070004503", НомСтраницы_7);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозможныеПрКтд.МассивЗначений.Найти(ПрКтд) = Неопределено Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7
				+ ": признак коэффициента Ктд должен принимать одно из значений: " + ВозможныеПрКтд.СтрокаЗначений,
				"Раздел7", "П000070004503", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьКодДПИ_01150 = Ложь;
			Для каждого Ветка_71 Из Ветка_7.Строки[0].Строки Цикл
				ДанныеМнЧ = Ветка_71.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР71М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЕстьКодДПИ_01150 = ЕстьКодДПИ_01150 ИЛИ СокрЛП(СтрокаМнЧ.Данные["П00071М105303"]) = "01150";
					Если ЕстьКодДПИ_01150 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьКодДПИ_01150 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗначПок = Ветка_7.Данные["П000070005003"];
			Если ЗначПок = 0 И ЕстьКодДПИ_01150 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": должно быть задано значение коэффициента Куг, "
				+ "если Подраздел 7.1.1 содержит значение 01150 кода вида добытого полезного ископаемого",
				"Раздел7", "П000070005003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначПок <> 0 И НЕ ЕстьКодДПИ_01150 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + ": не должно быть задано значение коэффициента Куг, "
				+ "если Подраздел 7.1.1 не содержит значение 01150 кода вида добытого полезного ископаемого",
				"Раздел7", "П000070005003", НомСтраницы_7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 7.1.
			Для каждого Ветка_71 Из Ветка_7.Строки[0].Строки Цикл
				
				НомСтраницы_71 = Формат(Ветка_7.Строки[0].Строки.Индекс(Ветка_71) + 1, "ЧГ=");
				Координаты_71 = НомСтраницы_7 + ",1," + НомСтраницы_71;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_71.Данные["П000710005103"]));
				Если ДлинаЗначПок <> 20 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.1 -> Страница " + НомСтраницы_71
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
					+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел71", "П000710005103", Координаты_71);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДанныеМнЧ = Ветка_71.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР71М1];
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00071М105303"]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ВозможныеКодыПИ.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.1 -> Страница " + НомСтраницы_71
						+ ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
						+ "код вида добытого полезного ископаемого" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
						+ ВозможныеКодыПИ.СтрокаЗначений, ""), "Раздел71", "П00071М105303_" + НомСтроки, Координаты_71);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00071М105403"]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ВозможныеКодыОснНал.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.1 -> Страница " + НомСтраницы_71
						+ ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
						+ "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
						+ ВозможныеКодыОснНал.СтрокаЗначений, ""), "Раздел71", "П00071М105403_" + НомСтроки, Координаты_71);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Подраздел 7.2.
			Ветка_72 = Ветка_7.Строки[1].Строки[0];
			
			Координаты_72 = НомСтраницы_7 + ",2";
			
			Если Ветка_72.Данные["П000720012003"] > 0.3 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.2: "
				+ "значение коэффициента Кт не должно превышать 0,3", "Раздел72", "П000720012003", Координаты_72);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 7.3.
			Ветка_73 = Ветка_7.Строки[2].Строки[0];
			
			Координаты_73 = НомСтраницы_7 + ",3";
			
			ДанныеМнЧ = Ветка_73.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР73М1];
			
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Если ДанныеМнЧ.Строки.Количество() > 36 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7
					+ " -> Подраздел 7.3: возможно не более 36 групп строк 170-220", "Раздел73", "П00073М117003_37", Координаты_73);
					СтатусПроверки = Ложь;
				Иначе
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						Корректная_ДатаНач = Неопределено;
						Корректная_ДатаКон = Неопределено;
						
						Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00073М117003"]) Тогда
							СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке "
							+ НомСтроки + " не заданы месяц и год возникновения права на налоговый вычет",
							"Раздел73", "П00073М117003_" + НомСтроки, Координаты_73);
							СтатусПроверки = Ложь;
						Иначе
							МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + СокрЛП(СтрокаМнЧ.Данные["П00073М117003"]));
							Если НЕ ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
								СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке " + НомСтроки
								+ " заданы месяц и год возникновения права на налоговый вычет, не соответствующие шаблону ""ММ.ГГГГ""",
								"Раздел73", "П00073М117003_" + НомСтроки, Координаты_73);
								СтатусПроверки = Ложь;
							ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(МесяцИГод_Дата) Тогда
								СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке " + НомСтроки
								+ " заданы месяц и год возникновения права на налоговый вычет, "
								+ "выходящие за пределы периода с 01.1900 по 12.2099", "Раздел73", "П00073М117003_" + НомСтроки, Координаты_73);
								СтатусПроверки = Ложь;
							Иначе
								Корректная_ДатаНач = МесяцИГод_Дата;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00073М122003"]) Тогда
							СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке "
							+ НомСтроки + " не заданы месяц и год окончания права на налоговый вычет",
							"Раздел73", "П00073М122003_" + НомСтроки, Координаты_73);
							СтатусПроверки = Ложь;
						Иначе
							МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + СокрЛП(СтрокаМнЧ.Данные["П00073М122003"]));
							Если НЕ ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
								СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке " + НомСтроки
								+ " заданы месяц и год окончания права на налоговый вычет, не соответствующие шаблону ""ММ.ГГГГ""",
								"Раздел73", "П00073М122003_" + НомСтроки, Координаты_73);
								СтатусПроверки = Ложь;
							ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(МесяцИГод_Дата) Тогда
								СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке " + НомСтроки
								+ " заданы месяц и год окончания права на налоговый вычет, "
								+ "выходящие за пределы периода с 01.1900 по 12.2099", "Раздел73", "П00073М122003_" + НомСтроки, Координаты_73);
								СтатусПроверки = Ложь;
							Иначе
								Корректная_ДатаКон = МесяцИГод_Дата;
							КонецЕсли;
						КонецЕсли;
						
						Если Корректная_ДатаНач <> Неопределено И Корректная_ДатаКон <> Неопределено
							И Корректная_ДатаКон < Корректная_ДатаНач Тогда
							СообщитьВТС("Раздел 7 -> Страница " + НомСтраницы_7 + " -> Подраздел 7.3: в строке " + НомСтроки
							+ " месяц и год окончания права на налоговый вычет не могут быть раньше месяца и года возникновения "
							+ "права на налоговый вычет", "Раздел73", "П00073М122003_" + НомСтроки, Координаты_73);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 8.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел8"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел8") Тогда
		
		ВозможныеПрКг_81       = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000810010003");
		ВозможныеПрНалВыч_81   = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000810016003");
		ВозможныеПрПорядВычет  = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000810016103");
		ВозможныеКодыОснНал_81 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00081М100001");
		ВозможныеПрНалВыч_82   = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00082М120003");
		
		Для каждого Ветка_8 Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы_8 = Формат(ДеревоРаздела.Строки.Индекс(Ветка_8) + 1, "ЧГ=");
			
			Если СокрЛП(Ветка_8.Данные["П000080001003"]) <> "03100" Тогда
				СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8
				+ ": код вида добытого полезного ископаемого должен быть равен 03100", "Раздел8", "П000080001003", НомСтраницы_8);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_8.Данные["П000080002003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан КБК"
				+ ?(ДлинаЗначПок <> 0, ", не состоящий из 20 цифр", ""), "Раздел8", "П000080002003", НомСтраницы_8);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СокрЛП(Ветка_8.Данные["П000080003003"]) <> "168" Тогда
				СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + ": код единицы измерения должен быть равен 168",
				"Раздел8", "П000080003003", НомСтраницы_8);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДолженОтсутствовать_Раздел82 = Ложь;
			
			// Подраздел 8.1.
			Для каждого Ветка_81 Из Ветка_8.Строки[0].Строки Цикл
				
				НомСтраницы_81 = Формат(Ветка_8.Строки[0].Строки.Индекс(Ветка_81) + 1, "ЧГ=");
				Координаты_81 = НомСтраницы_8 + ",1," + НомСтраницы_81;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_81.Данные["П000810004003"]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
					", не состоящий из 8 или 11 цифр", ""), "Раздел81", "П000810004003", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Ветка_81.Данные["П000810005003"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ТекстСообщения, "Раздел81", "П000810005003", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Ветка_81.Данные["П000810005004"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ТекстСообщения, "Раздел81", "П000810005004", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров
				= Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Ветка_81.Данные["П000810005005"]));
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ТекстСообщения, "Раздел81", "П000810005005", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка_81.Данные["П000810006003"]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ?(ДлинаЗначПок = 0, "не ", "") + "задан год начала промышленной добычи нефти"
					+ ?(ДлинаЗначПок <> 0, ", не состоящий из 4 цифр", ""), "Раздел81", "П000810006003", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка_81.Данные["П000810010003"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеПрКг_81.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак коэффициента Кг" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрКг_81.СтрокаЗначений, ""),
					"Раздел81", "П000810010003", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка_81.Данные["П000810016003"]);
				ДлинаЗначПок = СтрДлина(ЗначПок);
				Если ВозможныеПрНалВыч_81.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": " + ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогового вычета" + ?(ДлинаЗначПок <> 0,
					" должен принимать одно из значений: " + ВозможныеПрНалВыч_81.СтрокаЗначений, ""),
					"Раздел81", "П000810016003", Координаты_81);
					СтатусПроверки = Ложь;
				Иначе
					ЗначПок_Стр161 = СокрЛП(Ветка_81.Данные["П000810016103"]);
					Если ЗначПок = "00" И ЗначениеЗаполнено(ЗначПок_Стр161) Тогда
						СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
						+ ": признак порядка применения налогового вычета не должен быть заполнен, если признак налогового вычета равен 00",
						"Раздел81", "П000810016103", Координаты_81);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "00" И НЕ ЗначениеЗаполнено(ЗначПок_Стр161) Тогда
						СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
						+ ": признак порядка применения налогового вычета должен быть заполнен, если признак налогового вычета неравен 00",
						"Раздел81", "П000810016103", Координаты_81);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "00" И ВозможныеПрПорядВычет.МассивЗначений.Найти(ЗначПок_Стр161) = Неопределено Тогда
						ДлинаЗначПок_Стр161 = СтрДлина(ЗначПок_Стр161);
						СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81 + ": "
						+ ?(ДлинаЗначПок_Стр161 = 0, "не задан ", "") + "признак порядка применения налогового вычета"
						+ ?(ДлинаЗначПок_Стр161 <> 0, " должен принимать одно из значений: " + ВозможныеПрПорядВычет.СтрокаЗначений, ""),
						"Раздел81", "П000810016103", Координаты_81);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДолженОтсутствовать_Раздел82 = ДолженОтсутствовать_Раздел82 ИЛИ ЗначПок = "00" ИЛИ ЗначПок_Стр161 = "1";
				
				ДанныеМнЧ = Ветка_81.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР81М1];
				Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00081М100001"]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						Если ВозможныеКодыОснНал_81.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
							+ ": в строке " + НомСтроки + " " + ?(ДлинаЗначПок = 0, "не задан ", "")
							+ "код основания налогообложения" + ?(ДлинаЗначПок <> 0, " должен принимать одно из значений: "
							+ ВозможныеКодыОснНал_81.СтрокаЗначений, ""), "Раздел81", "П00081М100001_" + НомСтроки, Координаты_81);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.1 -> Страница " + НомСтраницы_81
					+ ": не заданы сведения о кодах основания налогообложения и количестве нефти, подлежащей налогообложению",
					"Раздел81", "П00081М100001_1", Координаты_81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			// Подраздел 8.2.
			Ветка_82 = Ветка_8.Строки[1].Строки[0];
			
			Координаты_82 = НомСтраницы_8 + ",2";
			
			ДанныеМнЧ = Ветка_82.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР82М1];
			
			Если ДолженОтсутствовать_Раздел82 И ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				
				СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + ": Подраздел 8.2 не должен быть заполнен, если "
				+ "Подраздел 8.1 содержит значение 00 признака налогового вычета или значение 1 признака порядка применения "
				+ "налогового вычета", "Раздел82", "П00082М120003_1", Координаты_82);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00082М120003"]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ВозможныеПрНалВыч_82.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.2: в строке " + НомСтроки + " "
						+ ?(ДлинаЗначПок = 0, "не задан ", "") + "признак налогового вычета" + ?(ДлинаЗначПок <> 0,
						" должен принимать одно из значений: " + ВозможныеПрНалВыч_82.СтрокаЗначений, ""),
						"Раздел82", "П00082М120003_" + НомСтроки, Координаты_82);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00082М121003"]));
					Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
						СообщитьВТС("Раздел 8 -> Страница " + НомСтраницы_8 + " -> Подраздел 8.2: в строке "
						+ НомСтроки + ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок <> 0,
						", не состоящий из 8 или 11 цифр", ""), "Раздел82", "П00082М121003_" + НомСтроки, Координаты_82);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения)
	
	ТипРеквизита      = СтруктураПараметров.ТипРеквизита;
	ЗначениеРеквизита = СтруктураПараметров.ЗначениеРеквизита;
	
	Если ТипРеквизита = "Серия" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ВозможныеДлиныЗначенияРеквизита = Неопределено;
			СтруктураПараметров.Свойство("ВозможныеДлиныЗначенияРеквизита", ВозможныеДлиныЗначенияРеквизита);
			Если ТипЗнч(ВозможныеДлиныЗначенияРеквизита) <> Тип("Массив") Тогда
				ВозможныеДлиныЗначенияРеквизита = Новый Массив;
				ВозможныеДлиныЗначенияРеквизита.Добавить(3);
			КонецЕсли;
			
			Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначениеРеквизита, Истина)
				ИЛИ ВозможныеДлиныЗначенияРеквизита.Найти(СтрДлина(ЗначениеРеквизита)) = Неопределено Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'серия лицензии на пользование недрами должна состоять из %1 букв русского алфавита';
				|en = 'серия лицензии на пользование недрами должна состоять из %1 букв русского алфавита'"),
				СтрСоединить(ВозможныеДлиныЗначенияРеквизита, "-"));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задана серия лицензии на пользование недрами';
									|en = 'не задана серия лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = "Номер" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ВозможныеДлиныЗначенияРеквизита = Новый Массив;
			ВозможныеДлиныЗначенияРеквизита.Добавить(5);
			ВозможныеДлиныЗначенияРеквизита.Добавить(6);
			
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеРеквизита, , Истина)
				ИЛИ ВозможныеДлиныЗначенияРеквизита.Найти(СтрДлина(ЗначениеРеквизита)) = Неопределено Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'номер лицензии на пользование недрами должен состоять из %1 цифр';
												|en = 'номер лицензии на пользование недрами должен состоять из %1 цифр'"),
				СтрСоединить(ВозможныеДлиныЗначенияРеквизита, "-"));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задан номер лицензии на пользование недрами';
									|en = 'не задан номер лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = "Вид" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначениеРеквизита, Истина)
				ИЛИ СтрДлина(ЗначениеРеквизита) <> 2 Тогда
				
				ТекстСообщения = НСтр("ru = 'вид лицензии на пользование недрами должен состоять из 2 букв русского алфавита';
										|en = 'вид лицензии на пользование недрами должен состоять из 2 букв русского алфавита'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задан вид лицензии на пользование недрами';
									|en = 'не задан вид лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	Возврат СтрРазделить("П000020001003,П000020003003,П000080001003,П000080003003,", ",", Ложь);
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено
			И НЕ СтрНачинаетсяС(Пок.Ключ, "Ф0") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено
			И НЕ СтрНачинаетсяС(Пок.Ключ, "Ф0") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтотОбъект, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) ИЛИ СокрЛП(МассивЗначений[ОбрИнд]) = "-" Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	СумПУ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУ");
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, СкопироватьУзел(СумНалПУ, СумПУ, СумНалПУ.Строки.Количество() - 1));
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СумПУ);
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	ИсчНалНефт = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалНефт");
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел2") Тогда
		
		Для каждого Ветка_2 Из ДеревоРаздела.Строки Цикл
			
			ЭкзИсчНалНефт = СкопироватьУзел(УзелРодитель, ИсчНалНефт, УзелРодитель.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(Ветка_2.Данные, ЭкзИсчНалНефт);
			
			// 2.1.
			ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефт, "ПокРасчНал");
			
			Для каждого Ветка_21 Из Ветка_2.Строки[0].Строки Цикл
				
				ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалНефт, ПокРасчНал, ЭкзИсчНалНефт.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(Ветка_21.Данные, ЭкзПокРасчНал);
				
				// Переопределение для строк 140, 145, 150.
				ПрВычет      = СокрЛП(Ветка_21.Данные["П000210013503"]);
				ПрПорядВычет = СокрЛП(Ветка_21.Данные["П000210013603"]);
				Для каждого Эл Из ЭкзПокРасчНал.Строки Цикл
					Если Эл.Ключ = "П000210014003" Тогда
						Если ПрПорядВычет = "1" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					ИначеЕсли Эл.Ключ = "П000210014503" Тогда
						Если ПрВычет = "06" И ПрПорядВычет = "1" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					ИначеЕсли Эл.Ключ = "П000210015003" Тогда
						Если ПрПорядВычет = "2" Тогда
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						Иначе
							Эл.Обязательность = "О";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// 2.1.1.
				Ветка_211 = Ветка_21.Строки[0].Строки[0];
				ДанныеМнЧ = Ветка_211.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР211М1];
				ДобНефтУчНедр = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтУчНедр");
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
					СкопироватьУзел(ЭкзПокРасчНал, ДобНефтУчНедр, ЭкзПокРасчНал.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(ДобНефтУчНедр);
				
				// 2.1.2.
				ДобНефтЗалеж = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтЗалеж");
				
				Для каждого Ветка_212 Из Ветка_21.Строки[1].Строки Цикл
					
					ЭкзДобНефтЗалеж = СкопироватьУзел(ЭкзПокРасчНал, ДобНефтЗалеж, ЭкзПокРасчНал.Строки.Количество() - 1);
					ЗаполнитьДаннымиУзел(Ветка_212.Данные, ЭкзДобНефтЗалеж);
					
					ДанныеМнЧ = Ветка_212.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР212М1];
					КолНефтОсн = ПолучитьПодчиненныйЭлемент(ЭкзДобНефтЗалеж, "КолНефтОсн");
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
						СкопироватьУзел(ЭкзДобНефтЗалеж, КолНефтОсн, ЭкзДобНефтЗалеж.Строки.Количество() - 1));
					КонецЦикла;
					РегламентированнаяОтчетность.УдалитьУзел(КолНефтОсн);
					
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(ДобНефтЗалеж);
				
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(ПокРасчНал);
			
			// 2.2.
			Ветка_22 = Ветка_2.Строки[1].Строки[0];
			
			ДанныеМнЧ = Ветка_22.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			СумНалПУВыч = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефт, "СумНалПУВыч");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЭкзСумНалПУВыч = СкопироватьУзел(ЭкзИсчНалНефт, СумНалПУВыч, ЭкзИсчНалНефт.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСумНалПУВыч);
				
				// Переопределение для строки 335.
				ПрВычет = СокрЛП(СтрокаМнЧ.Данные["П00022М130003"]);
				Для каждого Эл Из ЭкзСумНалПУВыч.Строки Цикл
					Если Эл.Ключ = "П00022М133503" Тогда
						Если ПрВычет = "06" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СумНалПУВыч);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчНалНефт);
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	ИсчНалГаз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалГаз");
	
	Для каждого Ветка_3 Из ДеревоРаздела.Строки Цикл
		
		ЭкзИсчНалГаз = СкопироватьУзел(УзелРодитель, ИсчНалГаз, УзелРодитель.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(Ветка_3.Данные, ЭкзИсчНалГаз);
		
		// Переопределение для строки 095.
		КодДПИ = СокрЛП(Ветка_3.Данные["П000030001003"]);
		Для каждого Эл Из ЭкзИсчНалГаз.Строки Цикл
			Если Эл.Ключ = "П000030009503" Тогда
				Если КодДПИ = "03300" Тогда
					Эл.Обязательность = "О";
				Иначе
					Эл.Обязательность = "Н";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// 3.1.
		ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалГаз, "ПокРасчНал");
		
		Для каждого Ветка_31 Из Ветка_3.Строки[0].Строки Цикл
			
			ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалГаз, ПокРасчНал, ЭкзИсчНалГаз.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(Ветка_31.Данные, ЭкзПокРасчНал);
			
			// 3.1.1.
			КолДПИЗал = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "КолДПИЗал");
			
			Для каждого Ветка_311 Из Ветка_31.Строки[0].Строки Цикл
				
				ЭкзКолДПИЗал = СкопироватьУзел(ЭкзПокРасчНал, КолДПИЗал, ЭкзПокРасчНал.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(Ветка_311.Данные, ЭкзКолДПИЗал);
				
				ДанныеМнЧ = Ветка_311.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР311М1];
				КолДПИЗалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолДПИЗал, "КолДПИЗалОсн");
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
					СкопироватьУзел(ЭкзКолДПИЗал, КолДПИЗалОсн, ЭкзКолДПИЗал.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(КолДПИЗалОсн);
				
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(КолДПИЗал);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ПокРасчНал);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчНалГаз);
	
	// Раздел 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел4"];
	ИсчУплНалНов = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалНов");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзИсчУплНалНов = СкопироватьУзел(УзелРодитель, ИсчУплНалНов, УзелРодитель.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзИсчУплНалНов);
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР4М1];
		КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалНов, "КолПИНалОсн");
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
			СкопироватьУзел(ЭкзИсчУплНалНов, КолПИНалОсн, ЭкзИсчУплНалНов.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(КолПИНалОсн);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчУплНалНов);
	
	// Раздел 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел5"];
	
	ИсчУплНалИскл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалИскл");
	
	Для каждого Ветка_5 Из ДеревоРаздела.Строки Цикл
		
		ЭкзИсчУплНалИскл = СкопироватьУзел(УзелРодитель, ИсчУплНалИскл, УзелРодитель.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(Ветка_5.Данные, ЭкзИсчУплНалИскл);
		
		// 5.1.
		КолПИУчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "КолПИУчНал");
		
		Для каждого Ветка_51 Из Ветка_5.Строки[0].Строки Цикл
			
			ЭкзКолПИУчНал = СкопироватьУзел(ЭкзИсчУплНалИскл, КолПИУчНал, ЭкзИсчУплНалИскл.Строки.Количество() - 1);
			
			ПрНП = СокрЛП(Ветка_51.Данные["П000510005103"]);
			
			Для каждого Эл Из ЭкзКолПИУчНал.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П000510005003" Тогда
						Эл.Значение = Формат(Ветка_51.Данные["П000510005003"], "ЧН=;ЧРД='.'");
					ИначеЕсли Эл.Ключ = "П000510005303" Тогда
						Если ПоказательДолженПрисутствовать(Новый Структура("ИмяПоказателя,ПрНП", "П000510005303", ПрНП)) Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
						КонецЕсли;
						ВывестиПоказательВXML(Эл, Ветка_51.Данные[Эл.Ключ]);
					Иначе
						ВывестиПоказательВXML(Эл, Ветка_51.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = Ветка_51.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР51М1];
			ПрЗначКоэф = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "ПрЗначКоэф");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
				СкопироватьУзел(ЭкзКолПИУчНал, ПрЗначКоэф, ЭкзКолПИУчНал.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрЗначКоэф);
			
			ДанныеМнЧ = Ветка_51.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР51М2];
			КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "КолПИНалОсн");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
				СкопироватьУзел(ЭкзКолПИУчНал, КолПИНалОсн, ЭкзКолПИУчНал.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(КолПИНалОсн);
			
			СумНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "СумНалУпл");
			ЭкзСумНалУпл = СкопироватьУзел(ЭкзКолПИУчНал, СумНалУпл, ЭкзКолПИУчНал.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСумНалУпл.Строки Цикл
				// Переопределение для строк 090, 100.
				Если Эл.Ключ = "П000510009003" ИЛИ Эл.Ключ = "П000510010003" Тогда
					Если Ветка_51.Данные["П000510009003"] <> 0 ИЛИ Ветка_51.Данные["П000510010003"] <> 0 Тогда
						Эл.Обязательность = "О";
					Иначе
						Эл.Обязательность = "Н";
					КонецЕсли;
				КонецЕсли;
				ВывестиПоказательВXML(Эл, Ветка_51.Данные[Эл.Ключ]);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СумНалУпл);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(КолПИУчНал);
		
		// 5.2.
		ДаннРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "ДаннРасчНал");
		
		КодВидаПИ = СокрЛП(Ветка_5.Данные["П000050001003"]);
		
		Если Раздел52ДолженБытьЗаполнен(КодВидаПИ) Тогда
			
			Для каждого Ветка_52 Из Ветка_5.Строки[1].Строки Цикл
				
				ЭкзДаннРасчНал = СкопироватьУзел(ЭкзИсчУплНалИскл, ДаннРасчНал, ЭкзИсчУплНалИскл.Строки.Количество() - 1);
				
				Для каждого Эл Из ЭкзДаннРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, Ветка_52.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ = Ветка_52.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР52М1];
				ДаннРасчНалЛиц = ПолучитьПодчиненныйЭлемент(ЭкзДаннРасчНал, "ДаннРасчНалЛиц");
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЭкзДаннРасчНалЛиц = СкопироватьУзел(ЭкзДаннРасчНал, ДаннРасчНалЛиц, ЭкзДаннРасчНал.Строки.Количество() - 1);
					Для каждого Эл Из ЭкзДаннРасчНалЛиц.Строки Цикл
						Если (Эл.Ключ = "П00052М120003" И КодВидаПИ = "05100")
							ИЛИ (Эл.Ключ = "П00052М120103" И КодВидаПИ = "04104") Тогда
							Эл.Обязательность = "О";
						КонецЕсли;
						ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
					КонецЦикла;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(ДаннРасчНалЛиц);
				
			КонецЦикла;
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.УдалитьУзел(ДаннРасчНал);
		
		// 5.3.
		ДаннКподз = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "ДаннКподз");
		Ветка_53 = Ветка_5.Строки[2].Строки[0];
		ЗаполнитьДаннымиУзел(Ветка_53.Данные,
		СкопироватьУзел(ЭкзИсчУплНалИскл, ДаннКподз, ЭкзИсчУплНалИскл.Строки.Количество() - 1));
		РегламентированнаяОтчетность.УдалитьУзел(ДаннКподз);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчУплНалИскл);
	
	// Раздел 6.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел6"];
	Ветка = ДеревоРаздела.Строки[0];
	
	СтоимЕдДПИ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СтоимЕдДПИ");
	
	ЭкзСтоимЕдДПИ = СкопироватьУзел(УзелРодитель, СтоимЕдДПИ, УзелРодитель.Строки.Количество() - 1);
	
	ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзСтоимЕдДПИ);
	
	СумРасхДПИОтд = ПолучитьПодчиненныйЭлемент(ЭкзСтоимЕдДПИ, "СумРасхДПИОтд");
	СумРасхДПИКод = ПолучитьПодчиненныйЭлемент(СумРасхДПИОтд, "СумРасхДПИКод");
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР62М1];
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
		СкопироватьУзел(СумРасхДПИОтд, СумРасхДПИКод, СумРасхДПИОтд.Строки.Количество() - 1));
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(СумРасхДПИКод);
	
	РегламентированнаяОтчетность.УдалитьУзел(СтоимЕдДПИ);
	
	// Раздел 7.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел7"];
	
	ИсчУплНалУг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалУг");
	
	Для каждого Ветка_7 Из ДеревоРаздела.Строки Цикл
		
		ЭкзИсчУплНалУг = СкопироватьУзел(УзелРодитель, ИсчУплНалУг, УзелРодитель.Строки.Количество() - 1);
		
		ПрКтд = СокрЛП(Ветка_7.Данные["П000070004503"]);
		
		Для каждого Эл Из ЭкзИсчУплНалУг.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Ключ = "П000070004003" Тогда
					Если ПоказательДолженПрисутствовать(Новый Структура("ИмяПоказателя,ПрКтд", "П000070004003", ПрКтд)) Тогда
						Эл.Значение = Формат(Ветка_7.Данные["П000070004003"], "ЧН=0;ЧРД='.'");
						Эл.Обязательность = "О";
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Эл, Ветка_7.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// 7.1.
		РасчНалВидУгл = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалВидУгл");
		
		Для каждого Ветка_71 Из Ветка_7.Строки[0].Строки Цикл
			
			ЭкзРасчНалВидУгл = СкопироватьУзел(ЭкзИсчУплНалУг, РасчНалВидУгл, ЭкзИсчУплНалУг.Строки.Количество() - 1);
			
			Для каждого Эл Из ЭкзРасчНалВидУгл.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, Ветка_71.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = Ветка_71.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР71М1];
			ДанДПИУг = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалВидУгл, "ДанДПИУг");
			ДанДПИУгУч = ПолучитьПодчиненныйЭлемент(ДанДПИУг, "ДанДПИУгУч");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
				СкопироватьУзел(ДанДПИУг, ДанДПИУгУч, ДанДПИУг.Строки.Количество() - 1));
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ДанДПИУгУч);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалВидУгл);
		
		// 7.2.
		РасчНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалУпл");
		
		Ветка_72 = Ветка_7.Строки[1].Строки[0];
		
		ЗаполнитьДаннымиУзел(Ветка_72.Данные,
		СкопироватьУзел(ЭкзИсчУплНалУг, РасчНалУпл, ЭкзИсчУплНалУг.Строки.Количество() - 1));
		
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалУпл);
		
		// 7.3.
		РасчНалВыч = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалВыч");
		
		ЭкзРасчНалВыч = СкопироватьУзел(ЭкзИсчУплНалУг, РасчНалВыч, ЭкзИсчУплНалУг.Строки.Количество() - 1);
		
		Ветка_73 = Ветка_7.Строки[2].Строки[0];
		
		ДанныеМнЧ = Ветка_73.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР73М1];
		РасчНалВычПер = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалВыч, "РасчНалВычПер");
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
			СкопироватьУзел(ЭкзРасчНалВыч, РасчНалВычПер, ЭкзРасчНалВыч.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалВычПер);
		
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалВыч);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчУплНалУг);
	
	// Раздел 8.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел8"];
	ИсчНалНефтНДД = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалНефтНДД");
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел8") Тогда
		
		Для каждого Ветка_8 Из ДеревоРаздела.Строки Цикл
			
			ЭкзИсчНалНефтНДД = СкопироватьУзел(УзелРодитель, ИсчНалНефтНДД, УзелРодитель.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(Ветка_8.Данные, ЭкзИсчНалНефтНДД);
			
			// 8.1.
			РасчНалУч = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефтНДД, "РасчНалУч");
			
			Для каждого Ветка_81 Из Ветка_8.Строки[0].Строки Цикл
				
				ЭкзРасчНалУч = СкопироватьУзел(ЭкзИсчНалНефтНДД, РасчНалУч, ЭкзИсчНалНефтНДД.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(Ветка_81.Данные, ЭкзРасчНалУч);
				
				// Переопределение для строк 165, 170, 180.
				ПрВычет      = СокрЛП(Ветка_81.Данные["П000810016003"]);
				ПрПорядВычет = СокрЛП(Ветка_81.Данные["П000810016103"]);
				Для каждого Эл Из ЭкзРасчНалУч.Строки Цикл
					Если Эл.Ключ = "П000810016503" Тогда
						Если ПрПорядВычет = "1" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					ИначеЕсли Эл.Ключ = "П000810017003" Тогда
						Если ПрВычет = "06" И ПрПорядВычет = "1" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					ИначеЕсли Эл.Ключ = "П000810018003" Тогда
						Если ПрПорядВычет = "2" Тогда
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						Иначе
							Эл.Обязательность = "О";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ = Ветка_81.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР81М1];
				КолНефтНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалУч, "КолНефтНалОсн");
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
					СкопироватьУзел(ЭкзРасчНалУч, КолНефтНалОсн, ЭкзРасчНалУч.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(КолНефтНалОсн);
				
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(РасчНалУч);
			
			// 8.2.
			Ветка_82 = Ветка_8.Строки[1].Строки[0];
			
			ДанныеМнЧ = Ветка_82.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР82М1];
			СумНалПУВыч = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефтНДД, "СумНалПУВыч");
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЭкзСумНалПУВыч = СкопироватьУзел(ЭкзИсчНалНефтНДД, СумНалПУВыч, ЭкзИсчНалНефтНДД.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСумНалПУВыч);
				
				// Переопределение для строки 235.
				ПрВычет = СокрЛП(СтрокаМнЧ.Данные["П00082М120003"]);
				Для каждого Эл Из ЭкзСумНалПУВыч.Строки Цикл
					Если Эл.Ключ = "П00082М123503" Тогда
						Если ПрВычет = "06" Тогда
							Эл.Обязательность = "О";
						Иначе
							Эл.Обязательность = "Н";
							Эл.Значение = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СумНалПУВыч);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьУзел(ИсчНалНефтНДД);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоНДПИ");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки509");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ТекущийРазделОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
				|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
				|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
				|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), Заголовок));
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел71"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел52"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел72"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел82" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(2);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел53"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел73" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(3);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел211"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(2);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ИмяФормы)].ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		УстановитьПостоянныеЗначенияПоказателей(ИмяСтраницы);
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ПоказатьПредупреждение(, НСтр(
	"ru = 'Печать без штрихкода PDF417 формы отчета,
	|утвержденной приказом ФНС России
	|от 08.12.2023 № ЕД-7-3/944@, будет реализована
	|в будущих версиях программы';
	|en = 'Печать без штрихкода PDF417 формы отчета,
	|утвержденной приказом ФНС России
	|от 08.12.2023 № ЕД-7-3/944@, будет реализована
	|в будущих версиях программы'"));
	
	Возврат;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, Новый Структура);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2024Кв1_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			Если Область.Имя = "П000310022003" Тогда
				ЗначМЧБ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(Область.Значение, "ЧГ="), 10, "-", "Справа");
				НовСтр.Значение = ЗначМЧБ;
				НовСтр.ЗначениеМЧБ = ЗначМЧБ;
			Иначе
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	// ОКТМО.
	Для каждого Показатель Из Показатели Цикл
		Если СтрНачинаетсяС(Показатель.Имя, "П00001М102003") ИЛИ Показатель.Имя = "П000210004003" ИЛИ СтрНачинаетсяС(
			Показатель.Имя, "П00022М131003") ИЛИ Показатель.Имя = "П000310019003" ИЛИ Показатель.Имя = "П000040004003"
			ИЛИ Показатель.Имя = "П000510004003" ИЛИ Показатель.Имя = "П000070003003" ИЛИ Показатель.Имя = "П000810004003"
			ИЛИ СтрНачинаетсяС(Показатель.Имя, "П00082М121003") Тогда
			Показатель.ЗначениеМЧБ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
			СокрЛП(Показатель.Значение), 11, "-", "Справа");
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = 'Не удалось заполнить область ""%1""';
						|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти));
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапуска = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ИНН",                          СтруктураДанныхТитульный.ИНН);
	ПараметрыОтчета.Вставить("КПП",                          СтруктураДанныхТитульный.КПП);
	ПараметрыОтчета.Вставить("НомерКорректировки",           СтруктураДанныхТитульный.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтотОбъект);
			Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока
				= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.';
											|en = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Получение данных из контейнера.
	СтруктураДанныхТитульный = Контейнер["Титульный"];
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Раздел2") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2";
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Раздел3") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3";
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Раздел5") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5";
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Раздел7") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7";
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Раздел8") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере();
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",              СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ИмяРаздела",                          СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ПараметрыОтчета.Вставить("КоординатыСтраницыРаздела",           СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ИмяФормы),
	ИмяФормыОтчета(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	ТаблицаРезультата	= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуРезультата();
	ТаблицаРасшифровки	= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуРасшифровки();
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("Счетчик"		, 0);
	ДанныеКС.Вставить("ЧислоОшибок"	, 0);
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОкончания", ДанныеКС.Отчет.ДатаОкончания);
	ДанныеКС.Вставить("ТолькоОшибки", Истина);
	ДанныеКС.Вставить("МакетСКП"	, "Базовая_1");
	ДанныеКС.Вставить("ВариантСКП"	, "ПоРазделам_1_1");
	ДанныеКС.Вставить("АдресРезультата");
	ДанныеКС.Вставить("АдресРасшифровки");
	
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	ЗаполнитьВременныеТаблицы();
	
#Область Проверки

	// критические проверки НК РФ
	
	// Проверки Раздела 1
	ПроверкаКС_13_1_к();
	ПроверкаКС_13_5_к();
	ПроверкаКС_13_6_к();
	
	// основные проверки
	
	// проверки Раздела 2
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	
	// проверки Раздела 4
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	
	// проверки Раздела 5
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	ПроверкаКС_5_09();
	ПроверкаКС_5_10();
	ПроверкаКС_5_11();
	
	// проверки Раздела 6
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	
	// проверки Раздела 7
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	
	// проверки Раздела 8
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	
#КонецОбласти

	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРезультата, УникальныйИдентификатор,
		ДанныеКС.АдресРезультата);
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		ДанныеКС.АдресРасшифровки);
	
	Возврат ПодготовитьРезультат();
	
КонецФункции

#КонецОбласти

#Область Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "НДПИ");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2024Кв1");
	СтруктураРезультата.Вставить("ДатаФормирования"		, Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	
	ТаблицаОписаний		= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуОписаний();
	ДанныеКС 			= Новый Структура;
	ДанныеКС.Вставить("Счетчик"			, 0);
	ДанныеКС.Вставить("ДатаОкончания"	, ТекущаяДата());
	СформироватьПриоритетыРазделов();
	
#Область Проверки

	// критические проверки НК РФ
	
	// Проверки Раздела 1
	ПроверкаКС_13_1_к();
	ПроверкаКС_13_5_к();
	ПроверкаКС_13_6_к();
	
	// основные проверки
	
	// проверки Раздела 2
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	
	// проверки Раздела 4
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	
	// проверки Раздела 5
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	ПроверкаКС_5_09();
	ПроверкаКС_5_10();
	ПроверкаКС_5_11();
	
	// проверки Раздела 6
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	
	// проверки Раздела 7
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	
	// проверки Раздела 8
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	
#КонецОбласти

	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ИменаРазделов = Новый Структура();
	
	ИменаРазделов.Вставить("Р01", "Раздел1");
	ИменаРазделов.Вставить("Р02", "Раздел2");
	ИменаРазделов.Вставить("Р21", "Раздел21");
	ИменаРазделов.Вставить("Р22", "Раздел22");
	ИменаРазделов.Вставить("Р23", "Раздел211");
	ИменаРазделов.Вставить("Р24", "Раздел212");
	ИменаРазделов.Вставить("Р03", "Раздел3");
	ИменаРазделов.Вставить("Р31", "Раздел31");
	ИменаРазделов.Вставить("Р32", "Раздел311");
	ИменаРазделов.Вставить("Р04", "Раздел4");
	ИменаРазделов.Вставить("Р05", "Раздел5");
	ИменаРазделов.Вставить("Р51", "Раздел51");
	ИменаРазделов.Вставить("Р52", "Раздел52");
	ИменаРазделов.Вставить("Р53", "Раздел53");
	ИменаРазделов.Вставить("Р54", "Раздел51");
	ИменаРазделов.Вставить("Р61", "Раздел6");
	ИменаРазделов.Вставить("Р62", "Раздел6");
	ИменаРазделов.Вставить("Р07", "Раздел7");
	ИменаРазделов.Вставить("Р71", "Раздел71");
	ИменаРазделов.Вставить("Р72", "Раздел72");
	ИменаРазделов.Вставить("Р73", "Раздел73");
	ИменаРазделов.Вставить("Р74", "Раздел71");
	ИменаРазделов.Вставить("Р08", "Раздел8");
	ИменаРазделов.Вставить("Р81", "Раздел81");
	ИменаРазделов.Вставить("Р82", "Раздел82");
	
	ДанныеКС.Вставить("ИменаРазделов", ИменаРазделов);
	
	ПредставленияРазделов = Новый Структура();
	
	ПредставленияРазделов.Вставить("Р01", "Раздела 1");
	ПредставленияРазделов.Вставить("Р02", "Раздела 2");
	ПредставленияРазделов.Вставить("Р21", "Подраздела 2.1 Раздела 2");
	ПредставленияРазделов.Вставить("Р22", "Подраздела 2.2 Раздела 2");
	ПредставленияРазделов.Вставить("Р23", "Подраздела 2.1.1 Раздела 2");
	ПредставленияРазделов.Вставить("Р24", "Подраздела 2.1.2 Раздела 2");
	ПредставленияРазделов.Вставить("Р03", "Раздела 3");
	ПредставленияРазделов.Вставить("Р31", "Подраздела 3.1 Раздела 3");
	ПредставленияРазделов.Вставить("Р32", "Подраздела 3.1.1 Раздела 3");
	ПредставленияРазделов.Вставить("Р04", "Раздела 4");
	ПредставленияРазделов.Вставить("Р05", "Раздела 5");
	ПредставленияРазделов.Вставить("Р51", "Подраздела 5.1 Раздела 5");
	ПредставленияРазделов.Вставить("Р52", "Подраздела 5.2 Раздела 5");
	ПредставленияРазделов.Вставить("Р53", "Подраздела 5.3 Раздела 5");
	ПредставленияРазделов.Вставить("Р54", "Подраздела 5.1.1 Раздела 5");
	ПредставленияРазделов.Вставить("Р61", "Подраздела 6.1 Раздела 6");
	ПредставленияРазделов.Вставить("Р62", "Подраздела 6.2 Раздела 6");
	ПредставленияРазделов.Вставить("Р07", "Раздела 7");
	ПредставленияРазделов.Вставить("Р71", "Подраздела 7.1 Раздела 7");
	ПредставленияРазделов.Вставить("Р72", "Подраздела 7.2 Раздела 7");
	ПредставленияРазделов.Вставить("Р73", "Подраздела 7.3 Раздела 7");
	ПредставленияРазделов.Вставить("Р74", "Подраздела 7.1.1 Раздела 7");
	ПредставленияРазделов.Вставить("Р08", "Раздела 8");
	ПредставленияРазделов.Вставить("Р81", "Подраздела 8.1 Раздела 8");
	ПредставленияРазделов.Вставить("Р82", "Подраздела 8.2 Раздела 8");
	
	ДанныеКС.Вставить("ПредставленияРазделов", ПредставленияРазделов);
	
	СтруктураРазделов = Новый ТаблицаЗначений; 
	
	ТипСтрока12	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(12));
	ТипЧисло	= Новый ОписаниеТипов("Число");
	
	СтруктураРазделов.Колонки.Добавить("Раздел"		, ТипСтрока12);
	СтруктураРазделов.Колонки.Добавить("Подраздел"	, ТипСтрока12);
	СтруктураРазделов.Колонки.Добавить("Уровень"	, ТипЧисло); 
	СтруктураРазделов.Колонки.Добавить("Индекс"		, ТипЧисло); 
	
	ДанныеРазделов = Новый Массив;
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел2"	, "Подраздел21"	, 1, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел2"	, "Подраздел22"	, 1, 1));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Подраздел21", "Подраздел211", 3, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Подраздел21", "Подраздел212", 3, 1));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел3"	, "Подраздел31"	, 1, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Подраздел31", "Подраздел311", 3, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел5"	, "Подраздел51"	, 1, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел5"	, "Подраздел52"	, 1, 1));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел5"	, "Подраздел53"	, 1, 2));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел7"	, "Подраздел71"	, 1, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел7"	, "Подраздел72"	, 1, 1));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел7"	, "Подраздел73"	, 1, 2));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел8"	, "Подраздел81"	, 1, 0));
	ДанныеРазделов.Добавить(Новый Структура("Раздел,Подраздел,Уровень,Индекс", "Раздел8"	, "Подраздел82"	, 1, 1)); 
	
	
	Для каждого ЭлементМассива Из ДанныеРазделов Цикл
	
		НоваяСтрока = СтруктураРазделов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
	
	КонецЦикла;
	
	ДанныеКС.Вставить("СтруктураРазделов", СтруктураРазделов);
	
	ЦелочисленныеРазделы = Новый Массив;
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	// Раздел 2
	МассивПолейСписочныхЗначений.Добавить("П000020002003");
	МассивПолейСписочныхЗначений.Добавить("П000210013503");
	МассивПолейСписочныхЗначений.Добавить("П000210013603");
	МассивПолейСписочныхЗначений.Добавить("П00211М100001");
	МассивПолейСписочныхЗначений.Добавить("П002120023003");
	МассивПолейСписочныхЗначений.Добавить("П00212М100001");
	МассивПолейСписочныхЗначений.Добавить("П00022М130003");
	
	// Раздел 3
	МассивПолейСписочныхЗначений.Добавить("П000030001003");
	МассивПолейСписочныхЗначений.Добавить("П000030002003");
	МассивПолейСписочныхЗначений.Добавить("П000030003003");
	МассивПолейСписочныхЗначений.Добавить("П000030009503");
	МассивПолейСписочныхЗначений.Добавить("П000030011003");
	МассивПолейСписочныхЗначений.Добавить("П000030017003");
	МассивПолейСписочныхЗначений.Добавить("П003110029006");
	МассивПолейСписочныхЗначений.Добавить("П00311М100001");
	
	// Раздел 4
	МассивПолейСписочныхЗначений.Добавить("П000040001003");
	МассивПолейСписочныхЗначений.Добавить("П000040002003");
	МассивПолейСписочныхЗначений.Добавить("П000040003003");
	МассивПолейСписочныхЗначений.Добавить("П00004М100001");
	МассивПолейСписочныхЗначений.Добавить("П000040015503");
	
	// Раздел 5
	МассивПолейСписочныхЗначений.Добавить("П000050001003");
	МассивПолейСписочныхЗначений.Добавить("П000050002003");
	МассивПолейСписочныхЗначений.Добавить("П000050003003");
	МассивПолейСписочныхЗначений.Добавить("П000510005003");
	МассивПолейСписочныхЗначений.Добавить("П000510005103");
	МассивПолейСписочныхЗначений.Добавить("П000510005203");
	МассивПолейСписочныхЗначений.Добавить("П00051М105501");
	МассивПолейСписочныхЗначений.Добавить("П00051М200001");
	МассивПолейСписочныхЗначений.Добавить("П000510016403");
	МассивПолейСписочныхЗначений.Добавить("П00052М118003");
	МассивПолейСписочныхЗначений.Добавить("П000530025503");
	
	// Раздел 6
	МассивПолейСписочныхЗначений.Добавить("П000620011003");
	МассивПолейСписочныхЗначений.Добавить("П00062М100001");
	
	// Раздел 7
	МассивПолейСписочныхЗначений.Добавить("П000070002003");
	МассивПолейСписочныхЗначений.Добавить("П000070003503");
	МассивПолейСписочныхЗначений.Добавить("П000070004003");
	МассивПолейСписочныхЗначений.Добавить("П000070004503");
	МассивПолейСписочныхЗначений.Добавить("П000710005103");
	МассивПолейСписочныхЗначений.Добавить("П00071М105303");
	МассивПолейСписочныхЗначений.Добавить("П00071М105403");
	
	// Раздел 8
	МассивПолейСписочныхЗначений.Добавить("П000080002003");
	МассивПолейСписочныхЗначений.Добавить("П000810010003");
	МассивПолейСписочныхЗначений.Добавить("П000810011003");
	МассивПолейСписочныхЗначений.Добавить("П000810016003");
	МассивПолейСписочныхЗначений.Добавить("П000810016103");
	МассивПолейСписочныхЗначений.Добавить("П00081М100001");
	МассивПолейСписочныхЗначений.Добавить("П00082М120003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	ПоляПреобразованияСтр = "П002120023003,П000030009503,П000030011003,П000030017003,П003110029006,П000510005003";
	МассивПреобразования = СтрРазделить(ПоляПреобразованияСтр, ",");
	МассивПреобразования.Добавить("П000070004003");
	МассивПреобразования.Добавить("П000810011003");
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			ПреобразоватьВЧисло = НЕ МассивПреобразования.Найти(СтрокаТЗ.Показатель) = Неопределено;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если ПреобразоватьВЧисло Тогда
					СоответствиеЗначений.Вставить(СтрокаВЧисло(СтрокаЗначения.Код), 1);
				Иначе
					СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
				КонецЕсли;
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
	ЗаменаНекорректныхСтрок = Новый Соответствие;
	ДанныеКС.Вставить("ЗаменаНекорректныхСтрок", ЗаменаНекорректныхСтрок);
	
	ЗаменаНекорректныхГраф = Новый Соответствие;
	ДанныеКС.Вставить("ЗаменаНекорректныхГраф", ЗаменаНекорректныхГраф);
	
	СформироватьПриоритетыРазделов();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета)
	
	СтруктураДанных = СохраненныеДанныеОтчета();
	
	Если СтруктураДанных.Свойство("ДанныеМногоуровневыхРазделов") Тогда
		Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
			
			ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
				
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("НомерСтраницы", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
					Новый Структура("Наименование, Уровень", Раздел.Ключ, 1),
					Новый Структура("Уровень", ""));
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			
			ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ПоказателиОтчета") Тогда
		Для каждого Раздел Из СтруктураДанных.ПоказателиОтчета Цикл
			
			КлючРаздела = Сред(Раздел.Ключ, 24);
			ДанныеКС.Вставить("КолвоСтраниц" + КлючРаздела, 1);
			ДанныеКС.Вставить(КлючРаздела, ОбщегоНазначения.СкопироватьРекурсивно(Раздел.Значение));
			
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКС.Вставить("Раздел1", ДанныеКС.Раздел1[0]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)

	Если НЕ СтруктураИсточник.Данные = Неопределено Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
					МнЧасть.Значение.Строки.Количество());
				Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
					СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
						ПоказательСтроки.Значение);
				КонецЦикла;
				
				Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
					ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
						Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураИсточник) = Тип("СтрокаДереваЗначений") И НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
			
		ПараметрыОтбора = Новый Структура("Раздел,Уровень", ВходящийРаздел.Наименование, ВходящийРаздел.Уровень); 
		СписокПодразделов = ДанныеКС.СтруктураРазделов.НайтиСтроки(ПараметрыОтбора);
		
		Если СписокПодразделов.Количество() = 0 Тогда
			
			КлючПриложения = ВходящийРаздел.Наименование + ВходящийРаздел.Уровень;
			СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, СтруктураИсточник.Строки.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаПодраздела Из СтруктураИсточник.Строки Цикл
		
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("НомерСтраницы", СтруктураПриемник.НомерСтраницы + "," +
					XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПодраздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПодраздела, 
					Новый Структура("Наименование, Уровень", КлючПриложения, ВходящийРаздел.Уровень + 1), ВходящаяМнЧасть);
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
			
		Иначе
			Для каждого ДанныеПодраздела Из СписокПодразделов Цикл
				
				КлючПриложения = ДанныеПодраздела.Подраздел;
				СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, 
					СтруктураИсточник.Строки[ДанныеПодраздела.Индекс].Строки.Количество());
				МассивСтраниц = Новый Массив;
				НомерСтраницы = ДанныеПодраздела.Индекс + 1;
				
				Для каждого СтраницаПодраздела Из СтруктураИсточник.Строки[ДанныеПодраздела.Индекс].Строки Цикл
			
					ДанныеСтраницы = Новый Структура;
					ДанныеСтраницы.Вставить("НомерСтраницы", СтруктураПриемник.НомерСтраницы + "," + НомерСтраницы + "," +
						XMLСтрока(СтруктураИсточник.Строки[ДанныеПодраздела.Индекс].Строки.Индекс(СтраницаПодраздела) + 1));
					ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПодраздела, 
						Новый Структура("Наименование, Уровень", КлючПриложения, ВходящийРаздел.Уровень + 2), ВходящаяМнЧасть);
					ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
					МассивСтраниц.Добавить(ДанныеСтраницы);
					
				КонецЦикла;
				СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПриоритетыРазделов()
	
	ПриоритетыРазделов = Новый Массив;
	ПриоритетыРазделов.Добавить("Раздел 1");
	ПриоритетыРазделов.Добавить("Раздел 2");
	ПриоритетыРазделов.Добавить("Раздел 3");
	ПриоритетыРазделов.Добавить("Раздел 4");
	ПриоритетыРазделов.Добавить("Раздел 5");
	ПриоритетыРазделов.Добавить("Раздел 6");
	ПриоритетыРазделов.Добавить("Раздел 7");
	ПриоритетыРазделов.Добавить("Раздел 8");
	
	ДанныеКС.Вставить("ПриоритетыРазделов", ПриоритетыРазделов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВременныеТаблицы()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТипСтрока20	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока11	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11));
	ТипСтрока31	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(31));
	ТипСтрока3	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ТипЧисло	= Новый ОписаниеТипов("Число");

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ключ"			, ТипСтрока31);
	ТаблицаДанных.Колонки.Добавить("КБК"			, ТипСтрока20);
	ТаблицаДанных.Колонки.Добавить("ОКТМО"			, ТипСтрока11);
	ТаблицаДанных.Колонки.Добавить("Сумма"			, ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("Раздел"			, ТипСтрока3);
	ТаблицаДанных.Колонки.Добавить("НомерСтраницы"	, ТипСтрока11);
	ТаблицаДанных.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"	, "П00001М101003_");
	ИменаПоказателей.Вставить("Р01С020"	, "П00001М102003_");
	ИменаПоказателей.Вставить("Р01С030"	, "П00001М103003_");
	ИменаПоказателей.Вставить("Р05С020"	, "П000050002003");
	ИменаПоказателей.Вставить("Р51С040"	, "П000510004003");
	ИменаПоказателей.Вставить("Р54С170"	, "П000510017003");
	ИменаПоказателей.Вставить("Р07С030"	, "П000070003003");
	ИменаПоказателей.Вставить("Р71С051"	, "П000710005103");
	ИменаПоказателей.Вставить("Р71С052"	, "П000710005203");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КБК 	= СокрЛП(Показатели.Р01С010.Значение);
		НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р01С020.Значение);
		НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
		НоваяСтрока.Сумма	= Показатели.Р01С030.Значение;
		НоваяСтрока.Раздел	= "Р01";
		НоваяСтрока.НомерСтроки = Счетчик;
		НоваяСтрока.НомерСтраницы	= 1;
	
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		ЗаполнитьПоказатель(Показатели.Р05С020, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Подраздел51 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р51С040, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р54С170, СтраницаПодраздела);
		
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КБК 	= СокрЛП(Показатели.Р05С020.Значение);
			НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р51С040.Значение);
			НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
			НоваяСтрока.Сумма	= Показатели.Р54С170.Значение;
			НоваяСтрока.Раздел	= "Р05";
			НоваяСтрока.НомерСтраницы	= СтраницаПодраздела.НомерСтраницы;
	
		КонецЦикла; 
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
		ЗаполнитьПоказатель(Показатели.Р07С030, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Подраздел71 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р71С051, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р71С052, СтраницаПодраздела);
		
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КБК 	= СокрЛП(Показатели.Р71С051.Значение);
			НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р07С030.Значение);
			НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
			НоваяСтрока.Сумма	= Показатели.Р71С052.Значение;
			НоваяСтрока.Раздел	= "Р07";
			НоваяСтрока.НомерСтраницы	= СтраницаПодраздела.НомерСтраницы;
	
		КонецЦикла; 
	КонецЦикла; 
	
	// Создание запроса
	ВТ				= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса	= Новый СхемаЗапроса;
		
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Оператор	= Пакет.Операторы[0];
	ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&ТаблицаДанных");
	Пакет.ТаблицаДляПомещения = "ВТ_1";
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВТ;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("ВременныеТаблицы", ВТ);
	
КонецПроцедуры

#КонецОбласти

#Область Сервис

&НаСервере
Функция СформироватьПоказатели(ИменаПоказателей)
	
	Показатели = Новый Структура;
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ИмяРаздела				= "";
		ПредставлениеРаздела	= "";
		
		ПрефиксРаздела			= Сред(Элемент.Ключ, 1, 3);
		ПрефиксДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаСтроки 		= ДанныеКС.ЗаменаНекорректныхСтрок.Получить(Элемент.Значение);
		ПодстрокаСтроки			= ?(ПодстрокаСтроки = Неопределено, Сред(Элемент.Значение, 9, 3), ПодстрокаСтроки);
		ПодстрокаГрафы 			= ДанныеКС.ЗаменаНекорректныхГраф.Получить(Элемент.Значение);
		ПодстрокаГрафы			= ?(ПодстрокаГрафы = Неопределено, Сред(Элемент.Значение, 13,1), ПодстрокаГрафы);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		
		ДанныеКС.ИменаРазделов.Свойство(ПрефиксРаздела			, ИмяРаздела);
		ДанныеКС.ПредставленияРазделов.Свойство(ПрефиксРаздела	, ПредставлениеРаздела);
		
		Если ПрефиксДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ПрефиксДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПредставлениеРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ПрефиксРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("ПрефиксРаздела"	, ПрефиксРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяРаздела"		, ИмяРаздела);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("НомерСтраницы"	, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока							= ТаблицаРасшифровки.Добавить();
	НоваяСтрока.НомерЭлемента			= ДанныеКС.Счетчик;
	
	НоваяСтрока.СсылкаНаОтчет			= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.ИмяРаздела				= Показатель.ИмяРаздела;
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.НомерСтраницы			= Показатель.НомерСтраницы;
	
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
		Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(НомерСтроки) = Тип("Массив") Тогда
		НомерСтроки = СтрСоединить(НомерСтроки, "_");
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			
			Показатель.НомерСтраницы = ?(Источник.Свойство("НомерСтраницы"), Источник.НомерСтраницы, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
	
		ЗначениеВИсточнике = Источник["Сумма"];
		
		Показатель.Отчет			= ДанныеКС.Отчет;
		Показатель.НомерСтраницы 	= Источник.НомерСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтотОбъект, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПроверку();

	ДанныеКС.Счетчик = ДанныеКС.Счетчик + 1;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуРезультата()
	
	Если ДанныеКС.ТолькоОшибки И НЕ НастройкиКС.ЭтоОшибка Тогда
		УдалитьСтрокиТаблицыРасшифровки(ДанныеКС.Счетчик);
		Возврат;
	КонецЕсли;
	
	Если НастройкиКС.ЭтоОшибка Тогда
		ДанныеКС.ЧислоОшибок = ДанныеКС.ЧислоОшибок + 1;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	
	НоваяСтрока.Раздел 			= НастройкиКС.Раздел;
	НоваяСтрока.Приоритет		= НастройкиКС.Приоритет;
	
	НоваяСтрока.НомерЭлемента 	= ДанныеКС.Счетчик;
	НоваяСтрока.НомерКС 		= НастройкиКС.НомерКС;
	
	НоваяСтрока.Описание 		= НастройкиКС.Описание;
	НоваяСтрока.Детализация 	= НастройкиКС.Детализация;
	НоваяСтрока.Нарушение 		= НастройкиКС.Нарушение;
	НоваяСтрока.Основание 		= НастройкиКС.Основание;
	НоваяСтрока.Рекомендации 	= НастройкиКС.Рекомендации;
	
	НоваяСтрока.ДопСведения 	= НастройкиКС.ДопСведения;
	НоваяСтрока.Комментарий 	= НастройкиКС.Комментарий;
	
	НоваяСтрока.ЭтоОшибка 		= НастройкиКС.ЭтоОшибка;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыРасшифровки(НомерЭлемента)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерЭлемента", НомерЭлемента);
	
	УдаляемыеСтроки = ТаблицаРасшифровки.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаРасшифровки.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНастройки(Заголовки)
		
	НастройкиКС = Новый Структура;
	
	НастройкиКС.Вставить("Раздел"				, "");
	НастройкиКС.Вставить("НомерКС"				, "");
	
	НастройкиКС.Вставить("Описание"				, "");
	НастройкиКС.Вставить("Детализация"			, "");
	НастройкиКС.Вставить("Нарушение"			, "");
	НастройкиКС.Вставить("Основание"			, "");
	НастройкиКС.Вставить("Рекомендации"			, "");
	
	НастройкиКС.Вставить("ДопСведения"			, "");
	НастройкиКС.Вставить("Комментарий"			, "");
	
	НастройкиКС.Вставить("ЭтоОшибка"			, Ложь);
	
	НастройкиКС.Вставить("Условие"				, "");
	НастройкиКС.Вставить("ДляДокументации"		, "");
	
	НастройкиКС.Вставить("ШаблонДетализации"	, "");
	НастройкиКС.Вставить("ШаблонДопСведений"	, "");
	
	Для каждого ЭлементКоллекции Из Заголовки Цикл
		Если НастройкиКС.Свойство(ЭлементКоллекции.Ключ) Тогда
			НастройкиКС.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Приоритет = ДанныеКС.ПриоритетыРазделов.Найти(НастройкиКС.Раздел);
	Приоритет = ?(Приоритет = Неопределено, 0, Приоритет + 1);
	
	НастройкиКС.Вставить("Приоритет"			, Приоритет);
	
	Если Документирование Тогда
		ДанныеКС.Счетчик = ДанныеКС.Счетчик + 1;
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, НастройкиКС);
		СтрокаОписания.НомерЭлемента = ДанныеКС.Счетчик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультат();
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("АдресТаблицыРезультата"		, ДанныеКС.АдресРезультата);
	СтруктураРезультата.Вставить("АдресТаблицыРасшифровки"		, ДанныеКС.АдресРасшифровки);
	СтруктураРезультата.Вставить("ЧислоОшибок"					, ДанныеКС.ЧислоОшибок);
	СтруктураРезультата.Вставить("ТекстЗаголовка"				, 
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок));
	СтруктураРезультата.Вставить("МакетСКП"						, ДанныеКС.МакетСКП);
	СтруктураРезультата.Вставить("ВариантСКП"					, ДанныеКС.ВариантСКП);
	
	Возврат СтруктураРезультата;
		
КонецФункции

&НаСервере
Функция СтрокаВЧисло(ИсходнаяСтрока)

	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходнаяСтрока);
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено
			ИЛИ СтрНайти(Элемент.Ключ, "П00") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "Колво") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "МнЧасть") = 0
			Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция НомСтр(Знач НомерСтраницы)
	
	МассивНомеров = СтрРазделить(НомерСтраницы, ",");
	
	Если МассивНомеров.Количество() = 5 Тогда
		
		МассивНомеров.Удалить(3);
		МассивНомеров.Удалить(1);
		Возврат СтрСоединить(МассивНомеров, ",");
	
	ИначеЕсли МассивНомеров.Количество() = 3 Тогда
		
		МассивНомеров.Удалить(1);
		Возврат СтрСоединить(МассивНомеров, ",");
		
	Иначе
		
		Возврат НомерСтраницы;
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначСтр(ЗначениеПоказателя)
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПоказателя), ЗначениеПоказателя, "(...)");
	
КонецФункции

#КонецОбласти

#Область Проверки

#Область КС_Проверки_Критические_НК_РФ

#Область Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_13_1_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.1.к';
													|en = '13.1.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 >= 0';
													|en = 'Сумма налога в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочная сумма налога';
													|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Раздела 1';
													|en = 'Группа строк %1 Раздела 1'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П00001М103003_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
		
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р01С030.Значение < 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С030.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", Счетчик);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_5_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.5.к';
													|en = '13.5.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 подр.5.1 Раздела 5 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 подр.5.1 Раздела 5 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочная сумма налога';
													|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р05");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р54С170");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000510017003");
	
	ПроверкаКС_13_5_к_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_5_к_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П00001М103003_");
	ИменаПоказателей.Вставить(НастройкиКС.КлючПоказателя, НастройкиКС.ИмяПоказателя);
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_1.Ключ КАК Ключ,
	|	ВТ_1.КБК КАК КБК,
	|	ВТ_1.ОКТМО КАК ОКТМО,
	|	ВТ_1.Сумма КАК Сумма,
	|	ВТ_1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.Раздел = ""Р01""
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КБК),
	|	МИНИМУМ(ОКТМО),
	|	СУММА(Сумма)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.Ключ КАК Ключ,
	|	ВТ_1.КБК КАК КБК,
	|	ВТ_1.ОКТМО КАК ОКТМО,
	|	ВТ_1.Сумма КАК Сумма,
	|	ВТ_1.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.Раздел = &Раздел
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(КБК),
	|	МИНИМУМ(ОКТМО),
	|	СУММА(Сумма)
	|ПО
	|	Ключ";
	
	Запрос.УстановитьПараметр("Раздел", НастройкиКС.КодРаздела);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР1.Следующий() Цикл
	
		ЗарегистрироватьПроверку();
		Показатели.Р01С030.Итог = 0;
		Показатели[НастройкиКС.КлючПоказателя].Итог = 0;
		КлючНайден = Ложь;
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, Выборка, Выборка.НомерСтроки);
		КонецЦикла;
		
		ВыборкаРХ = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаРХ.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			КлючНайден = Истина;
			Выборка = ВыборкаРХ.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.КлючПоказателя], Выборка);
			КонецЦикла; 
		КонецЕсли;
		ВыборкаРХ.Сбросить();
		
		НастройкиКС.ЭтоОшибка = КлючНайден И НЕ Показатели.Р01С030.Итог = Показатели[НастройкиКС.КлючПоказателя].Итог;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С030.Итог, Показатели[НастройкиКС.КлючПоказателя].Итог, ЗначСтр(ВыборкаР1.КБК),
			ЗначСтр(ВыборкаР1.ОКТМО));
		ДополнитьТаблицуРезультата();
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_6_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.6.к';
													|en = '13.6.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.052 подр.7.1 Раздела 7 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.052 подр.7.1 Раздела 7 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочная сумма налога';
													|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р07");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р71С052");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000710005203");
	
	ПроверкаКС_13_5_к_код();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Проверки_Основные

#Область Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_2_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.01';
													|en = '2.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение КБК';
													|en = 'Возможно ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Выберите КБК в стр.020 Раздела 2 из списка значений';
													|en = 'Выберите КБК в стр.020 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 2';
													|en = 'Страница %1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р02С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000020002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_01_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(НастройкиКС.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			НастройкиКС.ЭтоОшибка = Список.Получить(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				?(ТипЗнч(Показатели[НастройкиКС.Показатель1].Значение)=Тип("Число"), Показатели[НастройкиКС.Показатель1].Значение, 
				Показатели[НастройкиКС.Показатель1].ЗначениеСтр));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.02';
													|en = '2.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение признака налогового вычета в стр.135 подр.2.1 ';
													|en = 'Значение признака налогового вычета в стр.135 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 должно соответствовать списку допустимых значений';
			|en = 'Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака налогового вычета';
													|en = 'Возможно ошибочное значение признака налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака налогового вычета в стр.135 подр.2.1 Раздела 2 из списка значений';
			|en = 'Выберите значение признака налогового вычета в стр.135 подр.2.1 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р21С135");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000210013503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел21");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(НастройкиКС.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела[НастройкиКС.Подраздел_] Цикл
		
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
				НастройкиКС.ЭтоОшибка = Список.Получить(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					?(ТипЗнч(Показатели[НастройкиКС.Показатель1].Значение)=Тип("Число"), Показатели[НастройкиКС.Показатель1].Значение, 
					Показатели[НастройкиКС.Показатель1].ЗначениеСтр));
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", 
					НомСтр(СтраницаПодраздела1.НомерСтраницы));
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.03';
													|en = '2.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение признака порядка применения в стр.136 подр.2.1 ';
													|en = 'Значение признака порядка применения в стр.136 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 должно соответствовать списку допустимых значений';
			|en = 'Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака порядка применения';
													|en = 'Возможно ошибочное значение признака порядка применения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака порядка применения в стр.136 подр.2.1 Раздела 2 из списка значений';
			|en = 'Выберите значение признака порядка применения в стр.136 подр.2.1 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р21С136");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000210013603");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел21");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.04';
													|en = '2.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 подр.2.1.1 ';
													|en = 'Код основания налогообложения в гр.1 подр.2.1.1 '") +
		НСтр("ru = 'Раздела 2 должен соответствовать списку допустимых значений';
			|en = 'Раздела 2 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 подр.2.1.1 Раздела 2 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 подр.2.1.1 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.2.1.1 Раздела 2';
													|en = 'Строка %1 Страница %2 подр.2.1.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23Г001", "П00211М100001_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р23Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Подраздел21 Цикл
				Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Подраздел211 Цикл
					Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП00211М1 Цикл
		
						ЗарегистрироватьПроверку();
						ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
						
						НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р23Г001.Значение) = Неопределено;
						НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
							Показатели.Р23Г001.ЗначениеСтр);
						НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
							Счетчик, НомСтр(СтраницаПодраздела2.НомерСтраницы));
						ДополнитьТаблицуРезультата();
		
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.05';
													|en = '2.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кд в стр.230 подр.2.1.2 ';
													|en = 'Значение коэффициента Кд в стр.230 подр.2.1.2 '") +
		НСтр("ru = 'Раздела 2 должно соответствовать списку допустимых значений';
			|en = 'Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный коэффициент Кд';
													|en = 'Возможно ошибочный коэффициент Кд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите коэффициент Кд в стр.230 подр.2.1.2 Раздела 2 из списка значений';
			|en = 'Выберите коэффициент Кд в стр.230 подр.2.1.2 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р24С001", "П002120023003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р24С001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Подраздел21 Цикл
				Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Подраздел212 Цикл
		
					ЗарегистрироватьПроверку();
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р24С001, СтраницаПодраздела2);
					
					НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р24С001.Значение) = Неопределено;
					НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
						Показатели.Р24С001.Значение);
					НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", 
						НомСтр(СтраницаПодраздела2.НомерСтраницы));
					ДополнитьТаблицуРезультата();
		
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.06';
													|en = '2.06'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 подр.2.1.2 ';
													|en = 'Код основания налогообложения в гр.1 подр.2.1.2 '") +
		НСтр("ru = 'Раздела 2 должен соответствовать списку допустимых значений';
			|en = 'Раздела 2 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 подр.2.1.2 Раздела 2 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 подр.2.1.2 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.2.1.2 Раздела 2';
													|en = 'Строка %1 Страница %2 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р24Г001", "П00212М100001_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р24Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Подраздел21 Цикл
				Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Подраздел212 Цикл
					Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП00212М1 Цикл
		
						ЗарегистрироватьПроверку();
						ЗаполнитьИРасшифроватьПоказатель(Показатели.Р24Г001, СтраницаПодраздела2, Счетчик);
						
						НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р24Г001.Значение) = Неопределено;
						НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
							Показатели.Р24Г001.ЗначениеСтр);
						НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
							Счетчик, НомСтр(СтраницаПодраздела2.НомерСтраницы));
						ДополнитьТаблицуРезультата();
		
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.07';
													|en = '2.07'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.300 подр.2.2 ';
													|en = 'Признак налогового вычета в стр.300 подр.2.2 '") +
		НСтр("ru = 'Раздела 2 должен соответствовать списку допустимых значений';
			|en = 'Раздела 2 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак налогового вычета';
													|en = 'Возможно ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.300 подр.2.2 Раздела 2 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.300 подр.2.2 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Страница %2 подр.2.2 Раздела 2';
													|en = 'Группа строк %1 Страница %2 подр.2.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р22С300");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00022М130003_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел22");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00022М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_07_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(НастройкиКС.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела[НастройкиКС.Подраздел_] Цикл
				Для Счетчик = 1 По СтраницаПодраздела1[НастройкиКС.ТабЧасть] Цикл
	
					ЗарегистрироватьПроверку();
					ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1, Счетчик);
					
					НастройкиКС.ЭтоОшибка = Список.Получить(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
					НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
						?(ТипЗнч(Показатели[НастройкиКС.Показатель1].Значение) = Тип("Число"), 
						Показатели[НастройкиКС.Показатель1].Значение, Показатели[НастройкиКС.Показатель1].ЗначениеСтр));
					НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
						Счетчик, НомСтр(СтраницаПодраздела1.НомерСтраницы));
					ДополнитьТаблицуРезультата();
	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_3_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.01';
													|en = '3.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 3 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 3 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код вида полезного ископаемого';
													|en = 'Возможно ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в стр.010 Раздела 3 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в стр.010 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.02';
													|en = '3.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'КБК в стр.020 Раздела 3 должен соответствовать списку ';
													|en = 'КБК в стр.020 Раздела 3 должен соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный КБК';
													|en = 'Возможно ошибочный КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Выберите КБК в стр.020 Раздела 3 из списка значений';
													|en = 'Выберите КБК в стр.020 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.03';
													|en = '3.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 3 должен соответствовать ';
													|en = 'Код единицы измерения в стр.030 Раздела 3 должен соответствовать '") +
		НСтр("ru = 'списку допустимых значений';
			|en = 'списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код единицы измерения';
													|en = 'Возможно ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код единицы измерения в стр.030 Раздела 3 из списка значений';
			|en = 'Выберите код единицы измерения в стр.030 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С030");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030003003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.04';
													|en = '3.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Показатель Ккг в стр.095 Раздела 3 должен соответствовать ';
													|en = 'Показатель Ккг в стр.095 Раздела 3 должен соответствовать '") +
		НСтр("ru = 'списку допустимых значений';
			|en = 'списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный показатель Ккг';
													|en = 'Возможно ошибочный показатель Ккг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение показателя Ккг в стр.095 Раздела 3 из списка значений';
			|en = 'Выберите значение показателя Ккг в стр.095 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С095");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030009503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.05';
													|en = '3.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Коэффициент Ов в стр.110 Раздела 3 должен ';
													|en = 'Коэффициент Ов в стр.110 Раздела 3 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный коэффициент Ов';
													|en = 'Возможно ошибочный коэффициент Ов'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите коэффициент Ов в стр.110 Раздела 3 из списка значений';
			|en = 'Выберите коэффициент Ов в стр.110 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С110");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030011003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.06';
													|en = '3.06'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Коэффициент Кгп в стр.170 Раздела 3 должен ';
													|en = 'Коэффициент Кгп в стр.170 Раздела 3 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный коэффициент Кгп';
													|en = 'Возможно ошибочный коэффициент Кгп'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите коэффициент Кгп в стр.170 Раздела 3 из списка значений';
			|en = 'Выберите коэффициент Кгп в стр.170 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С170");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000030017003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.07';
													|en = '3.07'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кас в стр.290 подр.3.1.1 ';
													|en = 'Значение коэффициента Кас в стр.290 подр.3.1.1 '") +
		НСтр("ru = 'Раздела 3 должно соответствовать списку допустимых значений';
			|en = 'Раздела 3 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный коэффициент Кас';
													|en = 'Возможно ошибочный коэффициент Кас'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите коэффициент Кас в стр.290 подр.3.1.1 Раздела 3 из списка значений';
			|en = 'Выберите коэффициент Кас в стр.290 подр.3.1.1 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С001", "П003110029006");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р32С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Подраздел31 Цикл
				Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Подраздел311 Цикл
		
					ЗарегистрироватьПроверку();
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С001, СтраницаПодраздела2);
					
					НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р32С001.Значение) = Неопределено;
					НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
						Показатели.Р32С001.Значение);
					НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", 
						НомСтр(СтраницаПодраздела2.НомерСтраницы));
					ДополнитьТаблицуРезультата();
		
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.08';
													|en = '3.08'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 подр.3.1.1 ';
													|en = 'Код основания налогообложения в гр.1 подр.3.1.1 '") +
		НСтр("ru = 'Раздела 3 должен соответствовать списку допустимых значений';
			|en = 'Раздела 3 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 подр.3.1.1 Раздела 3 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 подр.3.1.1 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.3.1.1 Раздела 3';
													|en = 'Строка %1 Страница %2 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32Г001", "П00311М100001_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р32Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Подраздел31 Цикл
				Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Подраздел311 Цикл
					Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП00311М1 Цикл
		
						ЗарегистрироватьПроверку();
						ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32Г001, СтраницаПодраздела2, Счетчик);
						
						НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р32Г001.Значение) = Неопределено;
						НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
							Показатели.Р32Г001.ЗначениеСтр);
						НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
							Счетчик, НомСтр(СтраницаПодраздела2.НомерСтраницы));
						ДополнитьТаблицуРезультата();
		
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_4

&НаСервере
Процедура ПроверкаКС_4_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.01';
													|en = '4.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 4 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код вида полезного ископаемого';
													|en = 'Возможно ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в стр.010 Раздела 4 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в стр.010 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000040001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.02';
													|en = '4.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 4 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 4 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение КБК';
													|en = 'Возможно ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 4 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000040002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.03';
													|en = '4.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 4 должен ';
													|en = 'Код единицы измерения в стр.030 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код единицы измерения';
													|en = 'Возможно ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код единицы измерения в стр.030 Раздела 4 из списка значений';
			|en = 'Выберите код единицы измерения в стр.030 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С030");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000040003003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.04';
													|en = '4.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 Раздела 4 ';
													|en = 'Код основания налогообложения в гр.1 Раздела 4 '") +
		НСтр("ru = 'должен соответствовать списку допустимых значений';
			|en = 'должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 Раздела 4 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 Раздела 4';
													|en = 'Строка %1 Страница %2 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04Г001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00004М100001_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00004М1");
	
	ПроверкаКС_4_04_код(); 

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(НастройкиКС.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
			Для Счетчик = 1 По СтраницаРаздела[НастройкиКС.ТабЧасть] Цикл

				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаРаздела, Счетчик);
				
				НастройкиКС.ЭтоОшибка = Список.Получить(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					?(ТипЗнч(Показатели[НастройкиКС.Показатель1].Значение) = Тип("Число"), 
					Показатели[НастройкиКС.Показатель1].Значение, Показатели[НастройкиКС.Показатель1].ЗначениеСтр));
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаРаздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.05';
													|en = '4.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.155 Раздела 4 должен ';
													|en = 'Признак налогового вычета в стр.155 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак налогового вычета';
													|en = 'Возможно ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.155 Раздела 4 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.155 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С155");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000040015503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_5

&НаСервере
Процедура ПроверкаКС_5_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.01';
													|en = '5.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 5 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код вида полезного ископаемого';
													|en = 'Возможно ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в стр.010 Раздела 5 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в стр.010 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000050001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.02';
													|en = '5.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'КБК в стр.020 Раздела 5 должен соответствовать списку ';
													|en = 'КБК в стр.020 Раздела 5 должен соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение КБК';
													|en = 'Возможно ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 5 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000050002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.03';
													|en = '5.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 5 должен ';
													|en = 'Код единицы измерения в стр.030 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код единицы измерения';
													|en = 'Возможно ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код единицы измерения в стр.030 Раздела 5 из списка значений';
			|en = 'Выберите код единицы измерения в стр.030 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С030");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000050003003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.04';
													|en = '5.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 должно ';
													|en = 'Значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение рентного коэффициента';
													|en = 'Возможно ошибочное значение рентного коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51С050");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000510005003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.05';
													|en = '5.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогоплательщика в стр.051 подр.5.1 Раздела 5 должен ';
													|en = 'Признак налогоплательщика в стр.051 подр.5.1 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака налогоплательщика';
													|en = 'Возможно ошибочное значение признака налогоплательщика'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака налогоплательщика в стр.051 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите значение признака налогоплательщика в стр.051 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51С051");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000510005103");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.06';
													|en = '5.06'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код субъекта РФ в стр.052 подр.5.1 Раздела 5 должен ';
													|en = 'Код субъекта РФ в стр.052 подр.5.1 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение кода субъекта РФ';
													|en = 'Возможно ошибочное значение кода субъекта РФ'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51С052");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000510005203");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.07';
													|en = '5.07'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак коэффициента в гр.1 стр.055 подр.5.1 ';
													|en = 'Признак коэффициента в гр.1 стр.055 подр.5.1 '") +
		НСтр("ru = 'Раздела 5 должен соответствовать списку допустимых значений';
			|en = 'Раздела 5 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак коэффициента';
													|en = 'Возможно ошибочный признак коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите признак коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1 Страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51П001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00051М105501_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00051М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.08';
													|en = '5.08'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 подр.5.1 Раздела 5 ';
													|en = 'Код основания налогообложения в гр.1 подр.5.1 Раздела 5 '") +
		НСтр("ru = 'должен соответствовать списку допустимых значений';
			|en = 'должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1 Страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51Г001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00051М200001_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00051М2");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.09';
													|en = '5.09'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.164 подр.5.1.1 Раздела 5 должен ';
													|en = 'Признак налогового вычета в стр.164 подр.5.1.1 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака налогового вычета';
													|en = 'Возможно ошибочное значение признака налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака налогового вычета в стр.164 подр.5.1.1 Раздела 5 из списка значений';
			|en = 'Выберите значение признака налогового вычета в стр.164 подр.5.1.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р54С164");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000510016403");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел51");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.10';
													|en = '5.10'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак металла в стр.180 подр.5.2 ';
													|en = 'Признак металла в стр.180 подр.5.2 '") +
		НСтр("ru = 'Раздела 5 должен соответствовать списку допустимых значений';
			|en = 'Раздела 5 должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак металла';
													|en = 'Возможно ошибочный признак металла'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак металла в стр.180 подр.5.2 Раздела 5 из списка значений';
			|en = 'Выберите признак металла в стр.180 подр.5.2 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Страница %2 подр.5.2 Раздела 5';
													|en = 'Группа строк %1 Страница %2 подр.5.2 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р52С001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00052М118003_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел52");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00052М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.11';
													|en = '5.11'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак остатка в стр.255 подр.5.3 Раздела 5 должен ';
													|en = 'Признак остатка в стр.255 подр.5.3 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака остатка';
													|en = 'Возможно ошибочное значение признака остатка'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака остатка в стр.255 подр.5.3 Раздела 5 из списка значений';
			|en = 'Выберите значение признака остатка в стр.255 подр.5.3 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.3 Раздела 5';
													|en = 'Страница %1 подр.5.3 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р53С255");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000530025503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел53");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_6

&НаСервере
Процедура ПроверкаКС_6_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.01';
													|en = '6.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.110 подр.6.2 Раздела 6 должен ';
													|en = 'Код единицы измерения в стр.110 подр.6.2 Раздела 6 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код единицы измерения';
													|en = 'Возможно ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода единицы измерения в стр.110 подр.6.2 Раздела 6 из списка значений';
			|en = 'Выберите значение кода единицы измерения в стр.110 подр.6.2 Раздела 6 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 6';
													|en = 'Страница %1 Раздела 6'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р62С110");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000620011003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел6");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.02';
													|en = '6.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в гр.1 подр.6.2 Раздела 6 должен ';
													|en = 'Код вида полезного ископаемого в гр.1 подр.6.2 Раздела 6 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код вида полезного ископаемого';
													|en = 'Возможно ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в гр.1 подр.6.2 Раздела 6 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в гр.1 подр.6.2 Раздела 6 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 Раздела 6';
													|en = 'Строка %1 Страница %2 Раздела 6'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р62Г001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00062М100001_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел6");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00062М1");
	
	ПроверкаКС_4_04_код(); 

КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_7

&НаСервере
Процедура ПроверкаКС_7_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.01';
													|en = '7.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.020 Раздела 7 должен ';
													|en = 'Код единицы измерения в стр.020 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код единицы измерения';
													|en = 'Возможно ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода единицы измерения в стр.020 Раздела 7 из списка значений';
			|en = 'Выберите значение кода единицы измерения в стр.020 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000070002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.02';
													|en = '7.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код субъекта РФ в стр.035 Раздела 7 должен ';
													|en = 'Код субъекта РФ в стр.035 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код субъекта РФ';
													|en = 'Возможно ошибочный код субъекта РФ'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода субъекта РФ в стр.035 Раздела 7 из списка значений';
			|en = 'Выберите значение кода субъекта РФ в стр.035 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С035");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000070003503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.03';
													|en = '7.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Коэффициент Ктд в стр.040 Раздела 7 должен ';
													|en = 'Коэффициент Ктд в стр.040 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение коэффициента Ктд';
													|en = 'Возможно ошибочное значение коэффициента Ктд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Ктд в стр.040 Раздела 7 из списка значений';
			|en = 'Выберите значение коэффициента Ктд в стр.040 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000070004003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.04';
													|en = '7.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак коэффициента Ктд в стр.045 Раздела 7 должен ';
													|en = 'Признак коэффициента Ктд в стр.045 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение признака коэффициента Ктд';
													|en = 'Возможно ошибочное значение признака коэффициента Ктд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака коэффициента Ктд в стр.045 Раздела 7 из списка значений';
			|en = 'Выберите значение признака коэффициента Ктд в стр.045 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С045");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000070004503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.05';
													|en = '7.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'КБК в стр.051 подр.7.1 Раздела 7 должен ';
													|en = 'КБК в стр.051 подр.7.1 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение КБК';
													|en = 'Возможно ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.051 подр.7.1 Раздела 7 из списка значений';
			|en = 'Выберите значение КБК в стр.051 подр.7.1 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.7.1 Раздела 7';
													|en = 'Страница %1 подр.7.1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р71С051");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000710005103");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел71");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.06';
													|en = '7.06'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.053 подр.7.1.1 Раздела 7 должен ';
													|en = 'Код вида полезного ископаемого в стр.053 подр.7.1.1 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение кода вида полезного ископаемого';
													|en = 'Возможно ошибочное значение кода вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода вида полезного ископаемого в стр.053 подр.7.1.1 Раздела 7 из списка значений';
			|en = 'Выберите значение кода вида полезного ископаемого в стр.053 подр.7.1.1 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Страница %2 подр.7.1 Раздела 7';
													|en = 'Группа строк %1 Страница %2 подр.7.1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р74С053");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00071М105303_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел71");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00071М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.07';
													|en = '7.07'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в стр.054 подр.7.1.1 Раздела 7 должен ';
													|en = 'Код основания налогообложения в стр.054 подр.7.1.1 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение кода основания налогообложения';
													|en = 'Возможно ошибочное значение кода основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода основания налогообложения в стр.054 подр.7.1.1 Раздела 7 из списка значений';
			|en = 'Выберите значение кода основания налогообложения в стр.054 подр.7.1.1 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Страница %2 подр.7.1 Раздела 7';
													|en = 'Группа строк %1 Страница %2 подр.7.1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р74С054");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00071М105403_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел71");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00071М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_8

&НаСервере
Процедура ПроверкаКС_8_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.01';
													|en = '8.01'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'КБК в стр.020 Раздела 8 должен соответствовать списку ';
													|en = 'КБК в стр.020 Раздела 8 должен соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение КБК';
													|en = 'Возможно ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 8 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 8';
													|en = 'Страница %1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р08С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000080002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.02';
													|en = '8.02'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 должен ';
													|en = 'Признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак коэффициента Кг';
													|en = 'Возможно ошибочный признак коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81С100");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000810010003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел81");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.03';
													|en = '8.03'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Коэффициент Кг в стр.110 подр.8.1 Раздела 8 должен ';
													|en = 'Коэффициент Кг в стр.110 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочное значение коэффициента Кг';
													|en = 'Возможно ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81С110");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000810011003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел81");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.04';
													|en = '8.04'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.160 подр.8.1 Раздела 8 должен ';
													|en = 'Признак налогового вычета в стр.160 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак налогового вычета';
													|en = 'Возможно ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.160 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.160 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81С160");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000810016003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел81");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.05';
													|en = '8.05'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак порядка в стр.161 подр.8.1 Раздела 8 должен ';
													|en = 'Признак порядка в стр.161 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак порядка';
													|en = 'Возможно ошибочный признак порядка'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак порядка в стр.161 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите признак порядка в стр.161 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81С161");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000810016103");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел81");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.06';
													|en = '8.06'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код основания налогообложения в гр.1 подр.8.1 Раздела 8 ';
													|en = 'Код основания налогообложения в гр.1 подр.8.1 Раздела 8 '") +
		НСтр("ru = 'должен соответствовать списку допустимых значений';
			|en = 'должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный код основания налогообложения';
													|en = 'Возможно ошибочный код основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код основания налогообложения в гр.1 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите код основания налогообложения в гр.1 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1 Страница %2 подр.8.1 Раздела 8';
													|en = 'Строка %1 Страница %2 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81Г001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00081М100001_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел81");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00081М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.07';
													|en = '8.07'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.200 подр.8.2 Раздела 8 ';
													|en = 'Признак налогового вычета в стр.200 подр.8.2 Раздела 8 '") +
		НСтр("ru = 'должен соответствовать списку допустимых значений';
			|en = 'должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Возможно ошибочный признак налогового вычета';
													|en = 'Возможно ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.200 подр.8.2 Раздела 8 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.200 подр.8.2 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Страница %2 подр.8.2 Раздела 8';
													|en = 'Группа строк %1 Страница %2 подр.8.2 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р82С200");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П00082М120003_");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	НастройкиКС.Вставить("Подраздел_"		, "Подраздел82");
	НастройкиКС.Вставить("ТабЧасть"			, "КолвоСтрокП00082М1");
	
	ПроверкаКС_2_07_код(); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательДолженПрисутствовать(СтруктураПараметров)
	
	ИмяПоказателя = СтруктураПараметров.ИмяПоказателя;
	
	Если ИмяПоказателя = "П000510005203" Тогда
		
		ПрНП = СокрЛП(СтруктураПараметров.ПрНП);
		МассивПроверкиПрНП = СтрРазделить("1,2", ",", Ложь);
		Если МассивПроверкиПрНП.Найти(ПрНП) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		МассивПрКоэф = СтруктураПараметров.МассивПрКоэф;
		МассивПроверкиПрКоэф = СтрРазделить("01,02,03", ",", Ложь);
		Для каждого ПрКоэф Из МассивПрКоэф Цикл
			Если МассивПроверкиПрКоэф.Найти(СокрЛП(ПрКоэф)) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяПоказателя = "П000510005303" Тогда
		
		ПрНП = СокрЛП(СтруктураПараметров.ПрНП);
		Если ПрНП = "5" Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000070003503" ИЛИ ИмяПоказателя = "П000070004003" Тогда
		
		ПрКтд = СокрЛП(СтруктураПараметров.ПрКтд);
		МассивПроверкиПрКтд = СтрРазделить("1,2,3", ",", Ложь);
		Если МассивПроверкиПрКтд.Найти(ПрКтд) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция Раздел52ДолженБытьЗаполнен(КодВидаПИ)
	
	КодВидаПИ = СокрЛП(КодВидаПИ);
	
	Возврат КодВидаПИ = "04104" ИЛИ КодВидаПИ = "05100";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = "П002120023003" ИЛИ Область.Имя = "П000030009503" ИЛИ Область.Имя = "П000030011003"
		ИЛИ Область.Имя = "П000030017003" ИЛИ Область.Имя = "П003110029006" ИЛИ Область.Имя = "П000510005003"
		ИЛИ Область.Имя = "П000070004003" Тогда
		
		// Особая обработка.
		Если СтруктураРеквизитовФормы["НастраиваемоеПредставлениеНулевогоЗначения_ИменаПоказателей"].Найти(Область.Имя)
			<> Неопределено Тогда
			ИсходноеЗначение = Формат(Область.Значение, Область.Формат + ";ЧРД=','");
		Иначе
			ИсходноеЗначение = Формат(Область.Значение, "ЧН=-;ЧРД=','");
		КонецЕсли;
		
	Иначе
		
		Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
			ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		Иначе
			Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
			ИндексОбласти = 1;
			ИсходноеЗначение = "";
			Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(
				КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
				ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя
				+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
				ИндексОбласти = ИндексОбласти + 1;
			КонецЦикла;
			ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "П000070004003" Тогда
		
		Если РезультатВыбора[КолонкаПоиска] = "-" ИЛИ РезультатВыбора[КолонкаПоиска] = "0" Тогда
			
			Область.Значение = 0;
			
			Область.Формат = СтрЗаменить(
			Область.Формат, Сред(Область.Формат, СтрНайти(Область.Формат, "ЧН=") + 3, 1), РезультатВыбора[КолонкаПоиска]);
			
		Иначе
			
			Область.Значение = РезультатВыбора[КолонкаПоиска];
			
		КонецЕсли;
		
	Иначе
		
		Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
			Область.Значение = РезультатВыбора[КолонкаПоиска];
		Иначе
			СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
			Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
				СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
			КонецЦикла;
			Для Инд = 1 По ИндексОбласти - 1 Цикл
				ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
				= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел6" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел3" ИЛИ Ячейка.Раздел = "Раздел4"
		ИЛИ Ячейка.Раздел = "Раздел5" ИЛИ Ячейка.Раздел = "Раздел7" ИЛИ Ячейка.Раздел = "Раздел8" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" ИЛИ Ячейка.Раздел = "Раздел211" ИЛИ Ячейка.Раздел = "Раздел212"
		ИЛИ Ячейка.Раздел = "Раздел31" ИЛИ Ячейка.Раздел = "Раздел311" ИЛИ Ячейка.Раздел = "Раздел51"
		ИЛИ Ячейка.Раздел = "Раздел52" ИЛИ Ячейка.Раздел = "Раздел71" ИЛИ Ячейка.Раздел = "Раздел81" Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтотОбъект, Ячейка.Раздел);
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						Для каждого НайденныйПодчРаздел Из НайденнаяСтраница.ПолучитьЭлементы() Цикл
							Если НайденныйПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
								Для каждого НайденнаяПодчСтраница Из НайденныйПодчРаздел.ПолучитьЭлементы() Цикл
									Если НайденнаяПодчСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
										
										Если Ячейка.Раздел = "Раздел211" ИЛИ Ячейка.Раздел = "Раздел212" ИЛИ Ячейка.Раздел = "Раздел311" Тогда
											
											Для каждого НайденныйРаздел_ Из НайденнаяПодчСтраница.ПолучитьЭлементы() Цикл
												Если НайденныйРаздел_.КолонкаНомерСтраницыРазделаОтчета
													= Число(НомераСтрокМногоуровнегоРаздела[3]) Тогда
													
													Если Ячейка.Раздел = "Раздел211" Тогда
														
														Если Ячейка.Раздел = НайденныйРаздел_.КолонкаРазделыОтчетаСокрНаим Тогда
															СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
															Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел_.ПолучитьИдентификатор();
															Прервать;
														КонецЕсли;
														
													Иначе
														
														Для каждого НайденнаяСтраница_ Из НайденныйРаздел_.ПолучитьЭлементы() Цикл
															
															Если НайденнаяСтраница_.КолонкаНомерСтраницыРазделаОтчета
																= Число(НомераСтрокМногоуровнегоРаздела[4]) Тогда
																СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
																Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница_.ПолучитьИдентификатор();
																Прервать;
															КонецЕсли;
															
														КонецЦикла;
														
													КонецЕсли;
													
													Прервать;
												КонецЕсли;
											КонецЦикла;
											Прервать;
											
										Иначе
											
											СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
											Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
											Прервать;
											
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел22" ИЛИ Ячейка.Раздел = "Раздел53" ИЛИ Ячейка.Раздел = "Раздел72"
		ИЛИ Ячейка.Раздел = "Раздел73" ИЛИ Ячейка.Раздел = "Раздел82" Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если Ячейка.Раздел = НайденнаяПодчСтраница.КолонкаРазделыОтчетаСокрНаим Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"), СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						РодительскаяВетка = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1];
						
						ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(ЭлементРаздел, СтруктураРаздела, РодительскаяВетка);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(ЭлементРаздел, Знач СтруктураРаздела, Знач РодительскаяВетка)
	
	Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
		КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
		
		Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
			
			ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
			СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
			
			ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
			НаимСтраницы = ?(СтруктураПодчРаздела.Свойство("НаимСтраницы"),
			СтруктураПодчРаздела["НаимСтраницы"], "Стр. ");
			ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы;
			ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяПодчРаздела;
			ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
			
			Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
				
				КолСтрокВДеревеДанныхПодчРаздела = Макс(РодительскаяВетка.Строки[ИндПодчРаздела].Строки.Количество(), 1);
				
				Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
					
					ЭлементПодчПодчРаздел = ЭлементПодчРаздел.ПолучитьЭлементы().Добавить();
					НаимСтраницы = "Стр. ";
					ЭлементПодчПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы
					+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
					ЭлементПодчПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
					ЭлементПодчПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
					
					ПодчРодительскаяВетка = РодительскаяВетка.Строки[ИндПодчРаздела].Строки[НомерСтраницыПодчРаздела - 1];
					
					ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(
						ЭлементПодчПодчРаздел, СтруктураПодчРаздела, ПодчРодительскаяВетка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			РодительЭлемента = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Пока РодительЭлемента <> Неопределено Цикл
				НомерСтраницы = РодительЭлемента.КолонкаНомерСтраницыРазделаОтчета;
				РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
				Если РодительЭлемента <> Неопределено Тогда
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, НомерСтраницы);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоНомеров = НовыеНомераСтрокМногоуровнегоРаздела.Количество();
			Если (КоличествоНомеров / 2 = Цел(КоличествоНомеров / 2)) Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				
				ЭлементыТекущегоУровня = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
				Если ЭлементыТекущегоУровня[0].КолонкаРазделыОтчетаСокрНаим
					= ЭлементыТекущегоУровня[1].КолонкаРазделыОтчетаСокрНаим Тогда
					
					КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаСервере
Процедура УстановитьЧисловойФорматОбласти(ИмяРаздела)
	
	Если ИмяРаздела = "Раздел21" Тогда
		ТабличныйДокумент.Области["П000210005503"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло15_10;
		ТабличныйДокумент.Области["П000210006003"].ТипЗначения = СтруктураРеквизитовФормы.Число17_10;
		ТабличныйДокумент.Области["П000210012503"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло16_10;
	ИначеЕсли ИмяРаздела = "Раздел212" Тогда
		ТабличныйДокумент.Области["П002120020503"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло15_10;
		ТабличныйДокумент.Области["П002120021003"].ТипЗначения = СтруктураРеквизитовФормы.Число17_10;
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		ТабличныйДокумент.Области["П000030018003"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло16_15;
		ТабличныйДокумент.Области["П000030018503"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло16_10;
	ИначеЕсли ИмяРаздела = "Раздел51" Тогда
		ТабличныйДокумент.Области["П000510008003"].ТипЗначения = СтруктураРеквизитовФормы.НеотрицательноеЧисло11_10;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтотОбъектИмя)
	
	Форма_Имя = СтрЗаменить(ЭтотОбъектИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтотОбъектИмя)
	
	Возврат Сред(ЭтотОбъектИмя, СтрНайти(ЭтотОбъектИмя, ".Форма.") + 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
