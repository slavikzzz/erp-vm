
#Область Переменные

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ФормаОтчетаПроверкиКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем НастройкиКС;

&НаСервере
Перем ТаблицаРезультата;

&НаСервере
Перем ТаблицаРасшифровки;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Истина);
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтаФорма, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	ТаблицаРезультата	= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуРезультата();
	ТаблицаРасшифровки	= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуРасшифровки();
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("Счетчик"		, 0);
	ДанныеКС.Вставить("ЧислоОшибок"	, 0);
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОкончания", ДанныеКС.Отчет.ДатаОкончания);
	ДанныеКС.Вставить("ТолькоОшибки", Истина);
	ДанныеКС.Вставить("МакетСКП"	, "Базовая_1");
	ДанныеКС.Вставить("ВариантСКП"	, "ПоРазделам_1_1");
	ДанныеКС.Вставить("АдресРезультата");
	ДанныеКС.Вставить("АдресРасшифровки");
	
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	ЗаполнитьВременныеТаблицы();
	
#Область Проверки

	// критические проверки НК РФ
	
	// проверки Раздела 1
	ПроверкаКС_13_1_к();
	ПроверкаКС_13_2_к();
	ПроверкаКС_13_3_к();
	ПроверкаКС_13_4_к();
	ПроверкаКС_13_5_к();
	ПроверкаКС_13_6_к();
	ПроверкаКС_13_7_к();
	ПроверкаКС_13_8_к();
	
	// основные проверки
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_06();
	
	// проверки Раздела 2
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	ПроверкаКС_2_08();
	ПроверкаКС_2_09();
	ПроверкаКС_2_12();
	ПроверкаКС_2_13();
	ПроверкаКС_2_14();
	ПроверкаКС_2_15();
	ПроверкаКС_2_16();
	ПроверкаКС_2_17();
	ПроверкаКС_2_18();
	ПроверкаКС_2_19();
	ПроверкаКС_2_20();
	ПроверкаКС_2_21();
	ПроверкаКС_2_22();
	ПроверкаКС_2_23();
	ПроверкаКС_2_24();
	ПроверкаКС_2_25();
	ПроверкаКС_2_26();
	ПроверкаКС_2_27();
	ПроверкаКС_2_28();
	ПроверкаКС_2_29();
	ПроверкаКС_2_30();
	ПроверкаКС_2_31();
	ПроверкаКС_2_32();
	ПроверкаКС_2_33();
	ПроверкаКС_2_34();
	ПроверкаКС_2_35();
	ПроверкаКС_2_36();
	ПроверкаКС_2_37();
	ПроверкаКС_2_38();
	ПроверкаКС_2_39();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	ПроверкаКС_3_12();
	ПроверкаКС_3_13();
	ПроверкаКС_3_14();
	ПроверкаКС_3_15();
	ПроверкаКС_3_17();
	ПроверкаКС_3_18();
	ПроверкаКС_3_19();
	ПроверкаКС_3_20();
	ПроверкаКС_3_23();
	ПроверкаКС_3_24();
	ПроверкаКС_3_25();
	ПроверкаКС_3_26();
	ПроверкаКС_3_27();
	ПроверкаКС_3_28();
	ПроверкаКС_3_29();
	ПроверкаКС_3_30();
	ПроверкаКС_3_31();
	ПроверкаКС_3_32();
	ПроверкаКС_3_33();
	ПроверкаКС_3_34();
	ПроверкаКС_3_35();
	
	// проверки Раздела 4
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	ПроверкаКС_4_07();
	ПроверкаКС_4_08();
	ПроверкаКС_4_11();
	ПроверкаКС_4_12();
	ПроверкаКС_4_13();
	ПроверкаКС_4_14();
	
	// проверки Раздела 5
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	ПроверкаКС_5_09();
	ПроверкаКС_5_10();
	ПроверкаКС_5_11();
	ПроверкаКС_5_12();
	ПроверкаКС_5_13();
	ПроверкаКС_5_14();
	ПроверкаКС_5_15();
	ПроверкаКС_5_16();
	ПроверкаКС_5_17();
	ПроверкаКС_5_18();
	ПроверкаКС_5_21();
	ПроверкаКС_5_22();
	ПроверкаКС_5_23();
	ПроверкаКС_5_24();
	
	// проверки Раздела 6
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	
	// проверки Раздела 7
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	ПроверкаКС_7_08();
	ПроверкаКС_7_09();
	ПроверкаКС_7_10();
	ПроверкаКС_7_13();
	ПроверкаКС_7_14();
	ПроверкаКС_7_15();
	ПроверкаКС_7_16();
	ПроверкаКС_7_17();
	
	// проверки Раздела 8
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	ПроверкаКС_8_08();
	ПроверкаКС_8_09();
	ПроверкаКС_8_10();
	ПроверкаКС_8_11();
	ПроверкаКС_8_13();
	ПроверкаКС_8_14();
	ПроверкаКС_8_15();
	ПроверкаКС_8_16();
	ПроверкаКС_8_17();
	
#КонецОбласти

	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРезультата, УникальныйИдентификатор,
		ДанныеКС.АдресРезультата);
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		ДанныеКС.АдресРасшифровки);
	
	Возврат ПодготовитьРезультат();
	
КонецФункции

#КонецОбласти

#Область Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "НДПИ");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2023Кв1");
	СтруктураРезультата.Вставить("ДатаФормирования"		, Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	
	ТаблицаОписаний		= Отчеты.ПроверкаКонтрольныхСоотношений.СформироватьТаблицуОписаний();
	ДанныеКС 			= Новый Структура;
	ДанныеКС.Вставить("Счетчик"			, 0);
	ДанныеКС.Вставить("ДатаОкончания"	, ТекущаяДата());
	СформироватьПриоритетыРазделов();
	
#Область Проверки

	// критические проверки НК РФ
	
	// проверки Раздела 1
	ПроверкаКС_13_1_к();
	ПроверкаКС_13_2_к();
	ПроверкаКС_13_3_к();
	ПроверкаКС_13_4_к();
	ПроверкаКС_13_5_к();
	ПроверкаКС_13_6_к();
	ПроверкаКС_13_7_к();
	ПроверкаКС_13_8_к();
	
	// основные проверки
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_06();
	
	// проверки Раздела 2
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	ПроверкаКС_2_05();
	ПроверкаКС_2_06();
	ПроверкаКС_2_07();
	ПроверкаКС_2_08();
	ПроверкаКС_2_09();
	ПроверкаКС_2_12();
	ПроверкаКС_2_13();
	ПроверкаКС_2_14();
	ПроверкаКС_2_15();
	ПроверкаКС_2_16();
	ПроверкаКС_2_17();
	ПроверкаКС_2_18();
	ПроверкаКС_2_19();
	ПроверкаКС_2_20();
	ПроверкаКС_2_21();
	ПроверкаКС_2_22();
	ПроверкаКС_2_23();
	ПроверкаКС_2_24();
	ПроверкаКС_2_25();
	ПроверкаКС_2_26();
	ПроверкаКС_2_27();
	ПроверкаКС_2_28();
	ПроверкаКС_2_29();
	ПроверкаКС_2_30();
	ПроверкаКС_2_31();
	ПроверкаКС_2_32();
	ПроверкаКС_2_33();
	ПроверкаКС_2_34();
	ПроверкаКС_2_35();
	ПроверкаКС_2_36();
	ПроверкаКС_2_37();
	ПроверкаКС_2_38();
	ПроверкаКС_2_39();
	
	// проверки Раздела 3
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	ПроверкаКС_3_12();
	ПроверкаКС_3_13();
	ПроверкаКС_3_14();
	ПроверкаКС_3_15();
	ПроверкаКС_3_17();
	ПроверкаКС_3_18();
	ПроверкаКС_3_19();
	ПроверкаКС_3_20();
	ПроверкаКС_3_23();
	ПроверкаКС_3_24();
	ПроверкаКС_3_25();
	ПроверкаКС_3_26();
	ПроверкаКС_3_27();
	ПроверкаКС_3_28();
	ПроверкаКС_3_29();
	ПроверкаКС_3_30();
	ПроверкаКС_3_31();
	ПроверкаКС_3_32();
	ПроверкаКС_3_33();
	ПроверкаКС_3_34();
	ПроверкаКС_3_35();
	
	// проверки Раздела 4
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	ПроверкаКС_4_07();
	ПроверкаКС_4_08();
	ПроверкаКС_4_11();
	ПроверкаКС_4_12();
	ПроверкаКС_4_13();
	ПроверкаКС_4_14();
	
	// проверки Раздела 5
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	ПроверкаКС_5_08();
	ПроверкаКС_5_09();
	ПроверкаКС_5_10();
	ПроверкаКС_5_11();
	ПроверкаКС_5_12();
	ПроверкаКС_5_13();
	ПроверкаКС_5_14();
	ПроверкаКС_5_15();
	ПроверкаКС_5_16();
	ПроверкаКС_5_17();
	ПроверкаКС_5_18();
	ПроверкаКС_5_21();
	ПроверкаКС_5_22();
	ПроверкаКС_5_23();
	ПроверкаКС_5_24();
	
	// проверки Раздела 6
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	
	// проверки Раздела 7
	ПроверкаКС_7_01();
	ПроверкаКС_7_02();
	ПроверкаКС_7_03();
	ПроверкаКС_7_04();
	ПроверкаКС_7_05();
	ПроверкаКС_7_06();
	ПроверкаКС_7_07();
	ПроверкаКС_7_08();
	ПроверкаКС_7_09();
	ПроверкаКС_7_10();
	ПроверкаКС_7_13();
	ПроверкаКС_7_14();
	ПроверкаКС_7_15();
	ПроверкаКС_7_16();
	ПроверкаКС_7_17();
	
	// проверки Раздела 8
	ПроверкаКС_8_01();
	ПроверкаКС_8_02();
	ПроверкаКС_8_03();
	ПроверкаКС_8_04();
	ПроверкаКС_8_05();
	ПроверкаКС_8_06();
	ПроверкаКС_8_07();
	ПроверкаКС_8_08();
	ПроверкаКС_8_09();
	ПроверкаКС_8_10();
	ПроверкаКС_8_11();
	ПроверкаКС_8_13();
	ПроверкаКС_8_14();
	ПроверкаКС_8_15();
	ПроверкаКС_8_16();
	ПроверкаКС_8_17();
	
#КонецОбласти

	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ИменаРазделов = Новый Структура();
	
	ИменаРазделов.Вставить("Р01", "Раздел1");
	ИменаРазделов.Вставить("Р02", "Раздел2");
	ИменаРазделов.Вставить("Р21", "Раздел21");
	ИменаРазделов.Вставить("Р22", "Раздел21");
	ИменаРазделов.Вставить("Р23", "Раздел212");
	ИменаРазделов.Вставить("Р03", "Раздел3");
	ИменаРазделов.Вставить("Р31", "Раздел31");
	ИменаРазделов.Вставить("Р32", "Раздел311");
	ИменаРазделов.Вставить("Р04", "Раздел4");
	ИменаРазделов.Вставить("Р05", "Раздел5");
	ИменаРазделов.Вставить("Р51", "Раздел51");
	ИменаРазделов.Вставить("Р52", "Раздел5");
	ИменаРазделов.Вставить("Р06", "Раздел6");
	ИменаРазделов.Вставить("Р62", "Раздел6");
	ИменаРазделов.Вставить("Р07", "Раздел7");
	ИменаРазделов.Вставить("Р71", "Раздел7");
	ИменаРазделов.Вставить("Р72", "Раздел7");
	ИменаРазделов.Вставить("Р73", "Раздел7");
	ИменаРазделов.Вставить("Р08", "Раздел8");
	ИменаРазделов.Вставить("Р81", "Раздел81");
	
	ДанныеКС.Вставить("ИменаРазделов", ИменаРазделов);
	
	ПредставленияРазделов = Новый Структура();
	
	ПредставленияРазделов.Вставить("Р01", "Раздела 1");
	ПредставленияРазделов.Вставить("Р02", "Раздела 2");
	ПредставленияРазделов.Вставить("Р21", "Подраздела 2.1 Раздела 2");
	ПредставленияРазделов.Вставить("Р22", "Подраздела 2.1.1 Раздела 2");
	ПредставленияРазделов.Вставить("Р23", "Подраздела 2.1.2 Раздела 2");
	ПредставленияРазделов.Вставить("Р03", "Раздела 3");
	ПредставленияРазделов.Вставить("Р31", "Подраздела 3.1 Раздела 3");
	ПредставленияРазделов.Вставить("Р32", "Подраздела 3.1.1 Раздела 3");
	ПредставленияРазделов.Вставить("Р04", "Раздела 4");
	ПредставленияРазделов.Вставить("Р05", "Раздела 5");
	ПредставленияРазделов.Вставить("Р51", "Подраздела 5.1 Раздела 5");
	ПредставленияРазделов.Вставить("Р52", "Подраздела 5.2 Раздела 5");
	ПредставленияРазделов.Вставить("Р06", "Подраздела 6.1 Раздела 6");
	ПредставленияРазделов.Вставить("Р62", "Подраздела 6.2 Раздела 6");
	ПредставленияРазделов.Вставить("Р07", "Раздела 7");
	ПредставленияРазделов.Вставить("Р71", "Подраздела 7.1 Раздела 7");
	ПредставленияРазделов.Вставить("Р72", "Подраздела 7.2 Раздела 7");
	ПредставленияРазделов.Вставить("Р73", "Подраздела 7.3 Раздела 7");
	ПредставленияРазделов.Вставить("Р08", "Раздела 8");
	ПредставленияРазделов.Вставить("Р81", "Подраздела 8.1 Раздела 8");
	
	ДанныеКС.Вставить("ПредставленияРазделов", ПредставленияРазделов);
	
	ЦелочисленныеРазделы = Новый Массив;
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МногострочныеЧасти = Новый Соответствие;
	МногострочныеЧасти.Вставить("П000100000101", "П000100");
	МногострочныеЧасти.Вставить("П000211000101", "П000211");
	МногострочныеЧасти.Вставить("П000212000101", "П000212");
	МногострочныеЧасти.Вставить("П000311000101", "П000311");
	МногострочныеЧасти.Вставить("П000400000101", "П000400");
	МногострочныеЧасти.Вставить("П000510000101", "П000510");
	МногострочныеЧасти.Вставить("П000500005501", "П000550");
	МногострочныеЧасти.Вставить("П000620000101", "П000620");
	МногострочныеЧасти.Вставить("П000710000101", "П000710");
	МногострочныеЧасти.Вставить("П000730000101", "П000730");
	МногострочныеЧасти.Вставить("П000810000101", "П000810");
	
	ДанныеКС.Вставить("МногострочныеЧасти", МногострочныеЧасти);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	// Раздел 2
	МассивПолейСписочныхЗначений.Добавить("П000200002003");
	МассивПолейСписочныхЗначений.Добавить("П000200013503");
	МассивПолейСписочныхЗначений.Добавить("П000200023003");
	
	// Раздел 3
	МассивПолейСписочныхЗначений.Добавить("П000300001003");
	МассивПолейСписочныхЗначений.Добавить("П000300002003");
	МассивПолейСписочныхЗначений.Добавить("П000300011003");
	МассивПолейСписочныхЗначений.Добавить("П000300017003");
	
	// Раздел 4
	МассивПолейСписочныхЗначений.Добавить("П000400001003");
	МассивПолейСписочныхЗначений.Добавить("П000400002003");
	МассивПолейСписочныхЗначений.Добавить("П000400003003");
	МассивПолейСписочныхЗначений.Добавить("П000400015503");
	
	// Раздел 5
	МассивПолейСписочныхЗначений.Добавить("П000500001003");
	МассивПолейСписочныхЗначений.Добавить("П000500002003");
	МассивПолейСписочныхЗначений.Добавить("П000500005003");
	МассивПолейСписочныхЗначений.Добавить("П000500016403");
	
	// Раздел 7
	МассивПолейСписочныхЗначений.Добавить("П000700001003");
	МассивПолейСписочныхЗначений.Добавить("П000700003003");
	МассивПолейСписочныхЗначений.Добавить("П000710000101");
	
	
	// Раздел 8
	МассивПолейСписочныхЗначений.Добавить("П000800002003");
	МассивПолейСписочныхЗначений.Добавить("П000800010003");
	МассивПолейСписочныхЗначений.Добавить("П000800011003");
	МассивПолейСписочныхЗначений.Добавить("П000800016003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			ПреобразоватьВЧисло = СтрокаТЗ.Показатель = "П000200023003"
				ИЛИ СтрокаТЗ.Показатель = "П000300011003" ИЛИ СтрокаТЗ.Показатель = "П000300017003" 
				ИЛИ СтрокаТЗ.Показатель = "П000500005003" ИЛИ СтрокаТЗ.Показатель = "П000800011003";
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				Если ПреобразоватьВЧисло Тогда
					СоответствиеЗначений.Вставить(СтрокаВЧисло(СтрокаЗначения.Код), 1);
				Иначе
					СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
				КонецЕсли;
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
	ЗаменаНекорректныхСтрок = Новый Соответствие;
	ЗаменаНекорректныхСтрок.Вставить("П000100000101_", "010");
	ЗаменаНекорректныхСтрок.Вставить("П000100000102_", "020");
	ЗаменаНекорректныхСтрок.Вставить("П000100000103_", "030");
	ЗаменаНекорректныхСтрок.Вставить("П000730000101_", "170");
	ЗаменаНекорректныхСтрок.Вставить("П000730000102_", "180");
	ЗаменаНекорректныхСтрок.Вставить("П000730000103_", "190");
	ЗаменаНекорректныхСтрок.Вставить("П000730000104_", "200");
	ЗаменаНекорректныхСтрок.Вставить("П000730000105_", "210");
	
	ДанныеКС.Вставить("ЗаменаНекорректныхСтрок", ЗаменаНекорректныхСтрок);
	
	ЗаменаНекорректныхГраф = Новый Соответствие;
	ЗаменаНекорректныхГраф.Вставить("П000200012404", "1");
	ЗаменаНекорректныхГраф.Вставить("П000200012405", "2");
	ЗаменаНекорректныхГраф.Вставить("П000200012406", "3");
	ЗаменаНекорректныхГраф.Вставить("П000200012407", "4");
	ЗаменаНекорректныхГраф.Вставить("П000200012408", "5");
	ЗаменаНекорректныхГраф.Вставить("П000200012409", "6");
	ЗаменаНекорректныхГраф.Вставить("П000200012410", "7");
	ЗаменаНекорректныхГраф.Вставить("П000300029003", "1");
	ЗаменаНекорректныхГраф.Вставить("П000300029004", "2");
	ЗаменаНекорректныхГраф.Вставить("П000300029005", "3");
	ЗаменаНекорректныхГраф.Вставить("П000300029006", "4");
	ЗаменаНекорректныхГраф.Вставить("П000300029007", "5");
	
	ДанныеКС.Вставить("ЗаменаНекорректныхГраф", ЗаменаНекорректныхГраф);
	
	СформироватьПриоритетыРазделов();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета)
	
	СтруктураДанных = СохраненныеДанныеОтчета();
	
	Если СтруктураДанных.Свойство("ДанныеМногоуровневыхРазделов") Тогда
	
		Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
			
			ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
				
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("НомерСтраницы", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
					Новый Структура("Наименование, Уровень", Раздел.Ключ, 1));
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				ПересчетСтрокМногострочныхЧастей(ДанныеСтраницы);
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			
			ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ПоказателиОтчета") Тогда
	
		Для каждого Раздел Из СтруктураДанных.ПоказателиОтчета Цикл
			
			КлючРаздела = Сред(Раздел.Ключ, 24);
			ДанныеКС.Вставить("КолвоСтраниц" + КлючРаздела, 1);
			ДанныеКС.Вставить(КлючРаздела, ОбщегоНазначения.СкопироватьРекурсивно(Раздел.Значение));
			ДанныеКС[КлючРаздела].Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеКС[КлючРаздела]));
			ПересчетСтрокМногострочныхЧастей(ДанныеКС[КлючРаздела]);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеМногостраничныхРазделов") Тогда
	
		Для каждого Раздел Из СтруктураДанных.ДанныеМногостраничныхРазделов Цикл
			
			ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Количество());
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаРаздела Из Раздел.Значение Цикл
				
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("НомерСтраницы", XMLСтрока(Раздел.Значение.Индекс(СтраницаРаздела) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
					Новый Структура("Наименование, Уровень", Раздел.Ключ, 1));
				ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
				ПересчетСтрокМногострочныхЧастей(ДанныеСтраницы);
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			
			ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел)
	
	Для каждого Элемент Из СтруктураИсточник.Данные Цикл
		СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Если ТипЗнч(СтруктураИсточник) = Тип("СтрокаДереваЗначений") И НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
			
		КлючПриложения = ВходящийРаздел.Наименование + ВходящийРаздел.Уровень;
		СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, СтруктураИсточник.Строки.Количество());
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаПодраздела Из СтруктураИсточник.Строки Цикл
	
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("НомерСтраницы", СтруктураПриемник.НомерСтраницы + "," +
				XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПодраздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПодраздела, 
				Новый Структура("Наименование, Уровень", КлючПриложения, ВходящийРаздел.Уровень + 1));
			ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
			ПересчетСтрокМногострочныхЧастей(ДанныеСтраницы);
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСтрокМногострочныхЧастей(ДанныеСтраницы)

	Для каждого Элемент Из ДанныеКС.МногострочныеЧасти Цикл
		Если ДанныеСтраницы.Свойство(Элемент.Ключ + "_1") Тогда
			
			Счетчик = 1;
			Пока ДанныеСтраницы.Свойство(Элемент.Ключ + "_" + (Счетчик + 1)) Цикл
				Счетчик = Счетчик + 1
			КонецЦикла;
			
			ДанныеСтраницы.Вставить("КолвоСтрок" + Элемент.Значение, Счетчик);
		
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры // ПересчетСтрокМногострочныхЧастей()

&НаСервере
Процедура СформироватьПриоритетыРазделов()
	
	ПриоритетыРазделов = Новый Массив;
	ПриоритетыРазделов.Добавить("Раздел 1");
	ПриоритетыРазделов.Добавить("Раздел 2");
	ПриоритетыРазделов.Добавить("Раздел 3");
	ПриоритетыРазделов.Добавить("Раздел 4");
	ПриоритетыРазделов.Добавить("Раздел 5");
	ПриоритетыРазделов.Добавить("Раздел 6");
	ПриоритетыРазделов.Добавить("Раздел 7");
	ПриоритетыРазделов.Добавить("Раздел 8");
	
	ДанныеКС.Вставить("ПриоритетыРазделов", ПриоритетыРазделов);
	
	СтруктураКБК = Новый Структура;
	СтруктураКБК.Вставить("Конденсат"	, "18210701013011000110");
	СтруктураКБК.Вставить("ГазГорючий"	, "18210701012011000110");
	
	ДанныеКС.Вставить("КБК", СтруктураКБК);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВременныеТаблицы()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТипСтрока20	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока11	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11));
	ТипСтрока31	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(31));
	ТипСтрока3	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ТипЧисло	= Новый ОписаниеТипов("Число");

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ключ"			, ТипСтрока31);
	ТаблицаДанных.Колонки.Добавить("КБК"			, ТипСтрока20);
	ТаблицаДанных.Колонки.Добавить("ОКТМО"			, ТипСтрока11);
	ТаблицаДанных.Колонки.Добавить("Сумма"			, ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("Раздел"			, ТипСтрока3);
	ТаблицаДанных.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаДанных.Колонки.Добавить("НомерСтроки"	, ТипЧисло);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"	, "П000100000101_");
	ИменаПоказателей.Вставить("Р01С020"	, "П000100000102_");
	ИменаПоказателей.Вставить("Р01С030"	, "П000100000103_");
	ИменаПоказателей.Вставить("Р02С020"	, "П000200002003");
	ИменаПоказателей.Вставить("Р21С040"	, "П000200004003");
	ИменаПоказателей.Вставить("Р21С150"	, "П000200015003");
	ИменаПоказателей.Вставить("Р04С020"	, "П000400002003");
	ИменаПоказателей.Вставить("Р04С040"	, "П000400004003");
	ИменаПоказателей.Вставить("Р04С170"	, "П000400017003");
	ИменаПоказателей.Вставить("Р05С020"	, "П000500002003");
	ИменаПоказателей.Вставить("Р51С040"	, "П000500004003");
	ИменаПоказателей.Вставить("Р51С170"	, "П000500017003");
	ИменаПоказателей.Вставить("Р07С010"	, "П000700001003");
	ИменаПоказателей.Вставить("Р07С040"	, "П000700004003");
	ИменаПоказателей.Вставить("Р72С150"	, "П000700015003");
	ИменаПоказателей.Вставить("Р08С020"	, "П000800002003");
	ИменаПоказателей.Вставить("Р81С040"	, "П000800004003");
	ИменаПоказателей.Вставить("Р81С180"	, "П000800018003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КБК 	= СокрЛП(Показатели.Р01С010.Значение);
		НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р01С020.Значение);
		НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
		НоваяСтрока.Сумма	= Показатели.Р01С030.Значение;
		НоваяСтрока.Раздел	= "Р01";
		НоваяСтрока.НомерСтроки = Счетчик;
		НоваяСтрока.НомерСтраницы	= 1;
	
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		ЗаполнитьПоказатель(Показатели.Р02С020, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р21С040, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С150, СтраницаПодраздела);
		
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КБК 	= СокрЛП(Показатели.Р02С020.Значение);
			НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р21С040.Значение);
			НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
			НоваяСтрока.Сумма	= Показатели.Р21С150.Значение;
			НоваяСтрока.Раздел	= "Р02";
			НоваяСтрока.НомерСтраницы	= СтраницаПодраздела.НомерСтраницы;
	
		КонецЦикла; 
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р04С020, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р04С040, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р04С170, СтраницаРаздела);
	
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КБК 	= СокрЛП(Показатели.Р04С020.Значение);
		НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р04С040.Значение);
		НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
		НоваяСтрока.Сумма	= Показатели.Р04С170.Значение;
		НоваяСтрока.Раздел	= "Р04";
		НоваяСтрока.НомерСтраницы	= СтраницаРаздела.НомерСтраницы;
	
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		ЗаполнитьПоказатель(Показатели.Р05С020, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р51С040, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р51С170, СтраницаПодраздела);
		
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КБК 	= СокрЛП(Показатели.Р05С020.Значение);
			НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р51С040.Значение);
			НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
			НоваяСтрока.Сумма	= Показатели.Р51С170.Значение;
			НоваяСтрока.Раздел	= "Р05";
			НоваяСтрока.НомерСтраницы	= СтраницаПодраздела.НомерСтраницы;
	
		КонецЦикла; 
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р07С010, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р07С040, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р72С150, СтраницаРаздела);
	
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КБК 	= СокрЛП(Показатели.Р07С010.Значение);
		НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р07С040.Значение);
		НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
		НоваяСтрока.Сумма	= Показатели.Р72С150.Значение;
		НоваяСтрока.Раздел	= "Р07";
		НоваяСтрока.НомерСтраницы	= СтраницаРаздела.НомерСтраницы;
	
	КонецЦикла; 
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		ЗаполнитьПоказатель(Показатели.Р08С020, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р81С040, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р81С180, СтраницаПодраздела);
		
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.КБК 	= СокрЛП(Показатели.Р08С020.Значение);
			НоваяСтрока.ОКТМО 	= СокрЛП(Показатели.Р81С040.Значение);
			НоваяСтрока.Ключ	= НоваяСтрока.КБК + НоваяСтрока.ОКТМО;
			НоваяСтрока.Сумма	= Показатели.Р81С180.Значение;
			НоваяСтрока.Раздел	= "Р08";
			НоваяСтрока.НомерСтраницы	= СтраницаПодраздела.НомерСтраницы;
	
		КонецЦикла; 
	КонецЦикла; 
	
	// Создание запроса
	ВТ				= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса	= Новый СхемаЗапроса;
		
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Оператор	= Пакет.Операторы[0];
	ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&ТаблицаДанных");
	Пакет.ТаблицаДляПомещения = "ВТ_1";
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВТ;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("ВременныеТаблицы", ВТ);
	
КонецПроцедуры

#КонецОбласти

#Область Сервис

&НаСервере
Функция СформироватьПоказатели(ИменаПоказателей)
	
	Показатели = Новый Структура;
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ИмяРаздела				= "";
		ПредставлениеРаздела	= "";
		
		ПрефиксРаздела			= Сред(Элемент.Ключ, 1, 3);
		ПрефиксДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаСтроки 		= ДанныеКС.ЗаменаНекорректныхСтрок.Получить(Элемент.Значение);
		ПодстрокаСтроки			= ?(ПодстрокаСтроки = Неопределено, Сред(Элемент.Значение, 9, 3), ПодстрокаСтроки);
		ПодстрокаГрафы 			= ДанныеКС.ЗаменаНекорректныхГраф.Получить(Элемент.Значение);
		ПодстрокаГрафы			= ?(ПодстрокаГрафы = Неопределено, Сред(Элемент.Значение, 13,1), ПодстрокаГрафы);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		
		ДанныеКС.ИменаРазделов.Свойство(ПрефиксРаздела			, ИмяРаздела);
		ДанныеКС.ПредставленияРазделов.Свойство(ПрефиксРаздела	, ПредставлениеРаздела);
		
		Если ПрефиксДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ПрефиксДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПредставлениеРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ПрефиксРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("ПрефиксРаздела"	, ПрефиксРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяРаздела"		, ИмяРаздела);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("НомерСтраницы"	, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока							= ТаблицаРасшифровки.Добавить();
	НоваяСтрока.НомерЭлемента			= ДанныеКС.Счетчик;
	
	НоваяСтрока.СсылкаНаОтчет			= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.ИмяРаздела				= Показатель.ИмяРаздела;
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.НомерСтраницы			= Показатель.НомерСтраницы;
	
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
		Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(НомерСтроки) = Тип("Массив") Тогда
		НомерСтроки = СтрСоединить(НомерСтроки, "_");
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			
			Показатель.НомерСтраницы = ?(Источник.Свойство("НомерСтраницы"), Источник.НомерСтраницы, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
	
		ЗначениеВИсточнике = Источник["Сумма"];
		
		Показатель.Отчет			= ДанныеКС.Отчет;
		Показатель.НомерСтраницы 	= Источник.НомерСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПроверку();

	ДанныеКС.Счетчик = ДанныеКС.Счетчик + 1;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуРезультата()
	
	Если ДанныеКС.ТолькоОшибки И НЕ НастройкиКС.ЭтоОшибка Тогда
		УдалитьСтрокиТаблицыРасшифровки(ДанныеКС.Счетчик);
		Возврат;
	КонецЕсли;
	
	Если НастройкиКС.ЭтоОшибка Тогда
		ДанныеКС.ЧислоОшибок = ДанныеКС.ЧислоОшибок + 1;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	
	НоваяСтрока.Раздел 			= НастройкиКС.Раздел;
	НоваяСтрока.Приоритет		= НастройкиКС.Приоритет;
	
	НоваяСтрока.НомерЭлемента 	= ДанныеКС.Счетчик;
	НоваяСтрока.НомерКС 		= НастройкиКС.НомерКС;
	
	НоваяСтрока.Описание 		= НастройкиКС.Описание;
	НоваяСтрока.Детализация 	= НастройкиКС.Детализация;
	НоваяСтрока.Нарушение 		= НастройкиКС.Нарушение;
	НоваяСтрока.Основание 		= НастройкиКС.Основание;
	НоваяСтрока.Рекомендации 	= НастройкиКС.Рекомендации;
	
	НоваяСтрока.ДопСведения 	= НастройкиКС.ДопСведения;
	НоваяСтрока.Комментарий 	= НастройкиКС.Комментарий;
	
	НоваяСтрока.ЭтоОшибка 		= НастройкиКС.ЭтоОшибка;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыРасшифровки(НомерЭлемента)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерЭлемента", НомерЭлемента);
	
	УдаляемыеСтроки = ТаблицаРасшифровки.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаРасшифровки.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНастройки(Заголовки)
		
	НастройкиКС = Новый Структура;
	
	НастройкиКС.Вставить("Раздел"				, "");
	НастройкиКС.Вставить("НомерКС"				, "");
	
	НастройкиКС.Вставить("Описание"				, "");
	НастройкиКС.Вставить("Детализация"			, "");
	НастройкиКС.Вставить("Нарушение"			, "");
	НастройкиКС.Вставить("Основание"			, "");
	НастройкиКС.Вставить("Рекомендации"			, "");
	
	НастройкиКС.Вставить("ДопСведения"			, "");
	НастройкиКС.Вставить("Комментарий"			, "");
	
	НастройкиКС.Вставить("ЭтоОшибка"			, Ложь);
	
	НастройкиКС.Вставить("Условие"				, "");
	НастройкиКС.Вставить("ДляДокументации"		, "");
	
	НастройкиКС.Вставить("ШаблонДетализации"	, "");
	НастройкиКС.Вставить("ШаблонДопСведений"	, "");
	
	Для каждого ЭлементКоллекции Из Заголовки Цикл
		Если НастройкиКС.Свойство(ЭлементКоллекции.Ключ) Тогда
			НастройкиКС.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Приоритет = ДанныеКС.ПриоритетыРазделов.Найти(НастройкиКС.Раздел);
	Приоритет = ?(Приоритет = Неопределено, 0, Приоритет + 1);
	
	НастройкиКС.Вставить("Приоритет"			, Приоритет);
	
	Если Документирование Тогда
		ДанныеКС.Счетчик = ДанныеКС.Счетчик + 1;
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, НастройкиКС);
		СтрокаОписания.НомерЭлемента = ДанныеКС.Счетчик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультат();
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("АдресТаблицыРезультата"		, ДанныеКС.АдресРезультата);
	СтруктураРезультата.Вставить("АдресТаблицыРасшифровки"		, ДанныеКС.АдресРасшифровки);
	СтруктураРезультата.Вставить("ЧислоОшибок"					, ДанныеКС.ЧислоОшибок);
	СтруктураРезультата.Вставить("ТекстЗаголовка"				, 
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок));
	СтруктураРезультата.Вставить("МакетСКП"						, ДанныеКС.МакетСКП);
	СтруктураРезультата.Вставить("ВариантСКП"					, ДанныеКС.ВариантСКП);
	
	Возврат СтруктураРезультата;
		
КонецФункции

&НаСервере
Функция СтрокаВЧисло(ИсходнаяСтрока)

	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходнаяСтрока);
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено
			ИЛИ СтрНайти(Элемент.Ключ, "П00") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "Колво") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "МнЧасть") = 0
			Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗначСтр(ЗначениеПоказателя)
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПоказателя), ЗначениеПоказателя, "(...)");
	
КонецФункции

#КонецОбласти

#Область Проверки

#Область КС_Проверки_Критические_НК_РФ

#Область Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_13_1_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.1.к';
													|en = '13.1.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 >= 0 в разрезе КБК';
													|en = 'Сумма налога в стр.030 Раздела 1 >= 0 в разрезе КБК'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0, КБК %2';
													|en = '%1 >= 0, КБК %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П000100000103_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_1.КБК КАК КБК,
	|	ВТ_1.Сумма КАК Сумма,
	|	ВТ_1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.Раздел = ""Р01""
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	КБК";
	
	Результат = Запрос.Выполнить();
	ВыборкаР1 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР1.Следующий() Цикл
	
		ЗарегистрироватьПроверку();
		Показатели.Р01С030.Итог = 0;
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, Выборка, Выборка.НомерСтроки);
		КонецЦикла;
		
		НастройкиКС.ЭтоОшибка = Показатели.Р01С030.Итог < 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С030.Итог, ЗначСтр(ВыборкаР1.КБК));
		ДополнитьТаблицуРезультата();
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_2_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.2.к';
													|en = '13.2.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.150 подр.2.1 Раздела 2 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.150 подр.2.1 Раздела 2 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р02");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р21С150");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200015003");
	
	ПроверкаКС_13_2_к_код();	
		                                                                                                   
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_2_к_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П000100000103_");
	ИменаПоказателей.Вставить(НастройкиКС.КлючПоказателя, НастройкиКС.ИмяПоказателя);
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_1.Ключ КАК Ключ,
	|	ВТ_1.КБК КАК КБК,
	|	ВТ_1.ОКТМО КАК ОКТМО,
	|	ВТ_1.Сумма КАК Сумма,
	|	ВТ_1.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_1.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.Раздел = ""Р01""
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(КБК),
	|	МИНИМУМ(ОКТМО),
	|	СУММА(Сумма)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1.Ключ КАК Ключ,
	|	ВТ_1.КБК КАК КБК,
	|	ВТ_1.ОКТМО КАК ОКТМО,
	|	ВТ_1.Сумма КАК Сумма,
	|	ВТ_1.НомерСтраницы КАК НомерСтраницы
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|ГДЕ
	|	ВТ_1.Раздел = &Раздел
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(КБК),
	|	МИНИМУМ(ОКТМО),
	|	СУММА(Сумма)
	|ПО
	|	Ключ";
	
	Запрос.УстановитьПараметр("Раздел", НастройкиКС.КодРаздела);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаР1 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаР1.Следующий() Цикл
	
		ЗарегистрироватьПроверку();
		Показатели.Р01С030.Итог = 0;
		Показатели[НастройкиКС.КлючПоказателя].Итог = 0;
		КлючНайден = Ложь;
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, Выборка, Выборка.НомерСтроки);
		КонецЦикла;
		
		ВыборкаРХ = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаРХ.НайтиСледующий(ВыборкаР1.Ключ, "Ключ") Тогда
			КлючНайден = Истина;
			Выборка = ВыборкаРХ.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.КлючПоказателя], Выборка);
			КонецЦикла; 
		КонецЕсли;
		ВыборкаРХ.Сбросить();
		
		НастройкиКС.ЭтоОшибка = КлючНайден И НЕ Показатели.Р01С030.Итог = Показатели[НастройкиКС.КлючПоказателя].Итог;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С030.Итог, Показатели[НастройкиКС.КлючПоказателя].Итог, ЗначСтр(ВыборкаР1.КБК),
			ЗначСтр(ВыборкаР1.ОКТМО));
		ДополнитьТаблицуРезультата();
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_3_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.3.к';
													|en = '13.3.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 Раздела 4 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 Раздела 4 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р04");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р04С170");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400017003");
	
	ПроверкаКС_13_2_к_код();
		                                                                                                   
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_4_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.4.к';
													|en = '13.4.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 подр.5.1 Раздела 5 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.170 подр.5.1 Раздела 5 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р05");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р51С170");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000500017003");
	
	ПроверкаКС_13_2_к_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_5_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.5.к';
													|en = '13.5.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.150 подр.7.2 Раздела 7 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.150 подр.7.2 Раздела 7 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р07");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р72С150");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000700015003");
	
	ПроверкаКС_13_2_к_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_6_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.6.к';
													|en = '13.6.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.180 подр.8.1 Раздела 8 ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.180 подр.8.1 Раздела 8 '") +
		НСтр("ru = 'по соответствующим КБК и ОКТМО';
			|en = 'по соответствующим КБК и ОКТМО'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3, ОКТМО %4';
													|en = '%1 = %2, КБК %3, ОКТМО %4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	НастройкиКС.Вставить("КодРаздела"		, "Р08");
	НастройкиКС.Вставить("КлючПоказателя"	, "Р81С180");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000800018003");
	
	ПроверкаКС_13_2_к_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_7_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.7.к';
													|en = '13.7.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.050 Раздела 3, если ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.050 Раздела 3, если '") +
		НСтр("ru = 'стр.010 Раздела 1 = ';
			|en = 'стр.010 Раздела 1 = '") + ДанныеКС.КБК.Конденсат + НСтр("ru = ' (газовый конденсат)';
																			|en = ' (газовый конденсат)'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3';
													|en = '%1 = %2, КБК %3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030", "П000100000103_");
	ИменаПоказателей.Вставить("Р01С010", "П000100000101_");
	ИменаПоказателей.Вставить("Р03С050", "П000300005003");
	ИменаПоказателей.Вставить("Р03С020", "П000300002003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
		
	ЗарегистрироватьПроверку();
	УсловиеВыполнено = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		ЗаполнитьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		Если Показатели.Р01С010.Значение = ДанныеКС.КБК.Конденсат Тогда
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
			УсловиеВыполнено = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		ЗаполнитьПоказатель(Показатели.Р03С020, СтраницаРаздела);
		Если Показатели.Р03С020.Значение = ДанныеКС.КБК.Конденсат Тогда
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С050, СтраницаРаздела);
		КонецЕсли; 
	КонецЦикла;
	
	НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С030.Итог = Показатели.Р03С050.Итог;
	НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
		Показатели.Р01С030.Итог, Показатели.Р03С050.Итог, ДанныеКС.КБК.Конденсат);
	НастройкиКС.ДопСведения = НастройкиКС.ШаблонДопСведений;
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_8_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.8.к';
													|en = '13.8.к'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.220 подр.3.1 Раздела 3, ';
													|en = 'Сумма налога в стр.030 Раздела 1 = ∑ стр.220 подр.3.1 Раздела 3, '") +
		НСтр("ru = 'если стр.010 Раздела 1 = ';
			|en = 'если стр.010 Раздела 1 = '") + ДанныеКС.КБК.ГазГорючий + НСтр("ru = ' (газ горючий природный)';
																				|en = ' (газ горючий природный)'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, КБК %3';
													|en = '%1 = %2, КБК %3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.030 Раздела 1';
													|en = 'Уточните сумму налога в стр.030 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;                                                                                                    
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030", "П000100000103_");
	ИменаПоказателей.Вставить("Р01С010", "П000100000101_");
	ИменаПоказателей.Вставить("Р31С220", "П000300022003");
	ИменаПоказателей.Вставить("Р03С020", "П000300002003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
		
	ЗарегистрироватьПроверку();
	УсловиеВыполнено = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		ЗаполнитьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		Если Показатели.Р01С010.Значение = ДанныеКС.КБК.ГазГорючий Тогда
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
			УсловиеВыполнено = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		ЗаполнитьПоказатель(Показатели.Р03С020, СтраницаРаздела);
		Если Показатели.Р03С020.Значение = ДанныеКС.КБК.ГазГорючий Тогда
			Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С220, СтраницаПодраздела1);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р01С030.Итог = Показатели.Р31С220.Итог;
	НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
		Показатели.Р01С030.Итог, Показатели.Р31С220.Итог, ДанныеКС.КБК.ГазГорючий);
	НастройкиКС.ДопСведения = НастройкиКС.ШаблонДопСведений;
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Проверки_Основные

#Область Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 1 должно быть равно стр.020 ';
													|en = 'Значение КБК в стр.010 Раздела 1 должно быть равно стр.020 '") +
		НСтр("ru = 'Раздела 2 или стр.020 Раздела 3 или стр.020 Раздела 4 или стр.020 Раздела 5 или стр.010 Раздела 7 ';
			|en = 'Раздела 2 или стр.020 Раздела 3 или стр.020 Раздела 4 или стр.020 Раздела 5 или стр.010 Раздела 7 '") +
		НСтр("ru = 'или стр.020 Раздела 8';
			|en = 'или стр.020 Раздела 8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.010 Раздела 1';
													|en = 'Уточните значение КБК в стр.010 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Раздела 1';
													|en = 'Группа строк %1 Раздела 1'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"	, "П000100000101_");
	ИменаПоказателей.Вставить("Р02С020"	, "П000200002003");
	ИменаПоказателей.Вставить("Р03С020"	, "П000300002003");
	ИменаПоказателей.Вставить("Р04С020"	, "П000400002003");
	ИменаПоказателей.Вставить("Р05С020"	, "П000500002003");
	ИменаПоказателей.Вставить("Р07С010"	, "П000700001003");
	ИменаПоказателей.Вставить("Р08С020"	, "П000800002003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗаполнитьПоказатель(Показатели.Р02С020, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р02С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р02С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			ЗаполнитьПоказатель(Показатели.Р03С020, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р03С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р03С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
			ЗаполнитьПоказатель(Показатели.Р04С020, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р04С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р04С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
			ЗаполнитьПоказатель(Показатели.Р05С020, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р05С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р05С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
			ЗаполнитьПоказатель(Показатели.Р07С010, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р07С010.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р07С010);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
			ЗаполнитьПоказатель(Показатели.Р08С020, СтраницаРаздела);
			Если Показатели.Р01С010.Значение = Показатели.Р08С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р08С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиКС.ЭтоОшибка = НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С010.ЗначениеСтр, ?(СоответствиеНайдено, Показатели.Р01С010.ЗначениеСтр, "(...)"));
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", Счетчик);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.020 Раздела 1 должно быть равно стр.040 ';
													|en = 'Значение ОКТМО в стр.020 Раздела 1 должно быть равно стр.040 '") +
		НСтр("ru = 'Раздела 2 или стр.190 Раздела 3 или стр.040 Раздела 4 или стр.040 Раздела 5 или стр.040 Раздела 7 ';
			|en = 'Раздела 2 или стр.190 Раздела 3 или стр.040 Раздела 4 или стр.040 Раздела 5 или стр.040 Раздела 7 '") +
		НСтр("ru = 'или стр.040 Раздела 8';
			|en = 'или стр.040 Раздела 8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.020 Раздела 1';
													|en = 'Уточните значение ОКТМО в стр.020 Раздела 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Раздела 1';
													|en = 'Группа строк %1 Раздела 1'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"	, "П000100000102_");
	ИменаПоказателей.Вставить("Р21С040"	, "П000200004003");
	ИменаПоказателей.Вставить("Р31С190"	, "П000300019003");
	ИменаПоказателей.Вставить("Р04С040"	, "П000400004003");
	ИменаПоказателей.Вставить("Р51С040"	, "П000500004003");
	ИменаПоказателей.Вставить("Р07С040"	, "П000700004003");
	ИменаПоказателей.Вставить("Р81С040"	, "П000800004003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик);
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
				ЗаполнитьПоказатель(Показатели.Р21С040, СтраницаПодраздела);
				Если Показатели.Р01С020.Значение = Показатели.Р21С040.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р21С040);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
				ЗаполнитьПоказатель(Показатели.Р31С190, СтраницаПодраздела);
				Если Показатели.Р01С020.Значение = Показатели.Р31С190.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р31С190);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
			ЗаполнитьПоказатель(Показатели.Р04С040, СтраницаРаздела);
			Если Показатели.Р01С020.Значение = Показатели.Р04С040.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р04С040);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
				ЗаполнитьПоказатель(Показатели.Р51С040, СтраницаПодраздела);
				Если Показатели.Р01С020.Значение = Показатели.Р51С040.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р51С040);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
			ЗаполнитьПоказатель(Показатели.Р07С040, СтраницаРаздела);
			Если Показатели.Р01С020.Значение = Показатели.Р07С040.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р07С040);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
				ЗаполнитьПоказатель(Показатели.Р81С040, СтраницаПодраздела);
				Если Показатели.Р01С020.Значение = Показатели.Р81С040.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р81С040);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НастройкиКС.ЭтоОшибка = НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С020.ЗначениеСтр, ?(СоответствиеНайдено, Показатели.Р01С020.ЗначениеСтр, "(...)"));
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", Счетчик);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6';
													|en = '1.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 >= 0';
													|en = 'Сумма налога в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налога в стр.030 Раздела 1 >= 0';
													|en = 'Укажите сумму налога в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1 Раздела 1';
													|en = 'Группа строк %1 Раздела 1'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"	, "П000100000103_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
		
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р01С030.Значение < 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р01С030.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", Счетчик);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_2_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.1';
													|en = '2.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 2 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.020 Раздела 2 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.020 Раздела 2';
													|en = 'Уточните значение КБК в стр.020 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 2';
													|en = 'Страница %1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р02С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200002003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел2");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_01_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	ИменаПоказателей.Вставить("Р01С010", "П000100000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.РазделКБК] Цикл
	
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаРаздела);
		
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
			ЗаполнитьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1, Счетчик);
		
			Если Показатели[НастройкиКС.Показатель1].Значение = Показатели.Р01С010.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р01С010);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели[НастройкиКС.Показатель1].Значение) И НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели[НастройкиКС.Показатель1].ЗначениеСтр, ?(СоответствиеНайдено, 
			Показатели[НастройкиКС.Показатель1].ЗначениеСтр, "(...)"));
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.2';
													|en = '2.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 2 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Выберите КБК в стр.020 Раздела 2 из списка значений';
													|en = 'Выберите КБК в стр.020 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 2';
													|en = 'Страница %1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р02С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(НастройкиКС.ИмяПоказателя);
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаРаздела);
			
			НастройкиКС.ЭтоОшибка = Список.Получить(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели[НастройкиКС.Показатель1].ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.3';
													|en = '2.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.040 подр.2.1 Раздела 2 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.040 подр.2.1 Раздела 2 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.040 подр.2.1 Раздела 2';
													|en = 'Уточните значение ОКТМО в стр.040 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р21С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200004003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел2");
	НастройкиКС.Вставить("ПодразделОКТМО"	, "Раздел21");
	
	ПроверкаКС_2_03_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	ИменаПоказателей.Вставить("Р01С020", "П000100000102_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.РазделОКТМО] Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела[НастройкиКС.ПодразделОКТМО] Цикл
	
			ЗарегистрироватьПроверку();
			СоответствиеНайдено = Ложь;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаПодраздела);
			
			Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик);
			
				Если Показатели[НастройкиКС.Показатель1].Значение = Показатели.Р01С020.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р01С020);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
			
			НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели[НастройкиКС.Показатель1].Значение) И НЕ СоответствиеНайдено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели[НастройкиКС.Показатель1].ЗначениеСтр, ?(СоответствиеНайдено, 
				Показатели[НастройкиКС.Показатель1].ЗначениеСтр, "(...)"));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.4';
													|en = '2.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 >= 0';
													|en = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение налоговой ставки в стр.055 подр.2.1 Раздела 2 >= 0';
			|en = 'Укажите значение налоговой ставки в стр.055 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С055", "П000200005503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С055, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р21С055.Значение < 0; 
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, Показатели.Р21С055.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.5';
													|en = '2.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 919 ';
													|en = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 919 '") +
		НСтр("ru = 'руб. х стр.080 подр.2.1 Раздела 2 - стр.060 подр.2.1 Раздела 2, если стр.060 подр.2.1 Раздела 2 >= 0 ';
			|en = 'руб. х стр.080 подр.2.1 Раздела 2 - стр.060 подр.2.1 Раздела 2, если стр.060 подр.2.1 Раздела 2 >= 0 '") +
		НСтр("ru = 'и гр.1 подр.2.1.2 <> 4300';
			|en = 'и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (919 х %2 - %3), если %3 >= 0';
													|en = '%1 = %4 (919 х %2 - %3), если %3 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С055", "П000200005503");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р21С060", "П000200006003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	Показатели.Р23Г001.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			ЕстьКод4300 = Ложь;
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
					Если ЕстьКод4300 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			РасчетнаяСумма = Окр(919 * Показатели.Р21С080.Значение - Показатели.Р21С060.Значение, 9);
			УсловиеВыполнено = РасчетнаяСумма >= 0 И Показатели.Р21С060.Значение >= 0 И НЕ ЕстьКод4300;
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р21С055.Значение = РасчетнаяСумма; 
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р21С055.Значение, Показатели.Р21С080.Значение, Показатели.Р21С060.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.6';
													|en = '2.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 919 ';
													|en = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 919 '") +
		НСтр("ru = 'руб. х стр.080 подр.2.1 Раздела 2 + стр.060 подр.2.1 Раздела 2, если стр.060 подр.2.1 Раздела 2 < 0 ';
			|en = 'руб. х стр.080 подр.2.1 Раздела 2 + стр.060 подр.2.1 Раздела 2, если стр.060 подр.2.1 Раздела 2 < 0 '") +
		НСтр("ru = 'и гр.1 подр.2.1.2 <> 4300';
			|en = 'и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (919 х %2 + %3), когда %5 < 0';
													|en = '%1 = %4 (919 х %2 + %3), когда %5 < 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С055", "П000200005503");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р21С060", "П000200006003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	Показатели.Р23Г001.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			ЕстьКод4300 = Ложь;
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
					Если ЕстьКод4300 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			РасчетнаяСумма = Окр(919 * Показатели.Р21С080.Значение - Показатели.Р21С060.Значение, 9);
			УсловиеВыполнено = Показатели.Р21С060.Значение < 0 И НЕ ЕстьКод4300;
			МодульСтр060 = ?(Показатели.Р21С060.Значение >= 0, Показатели.Р21С060.Значение, -Показатели.Р21С060.Значение);
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р21С055.Значение = РасчетнаяСумма; 
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
				Показатели.Р21С055.Значение, Показатели.Р21С080.Значение, МодульСтр060, РасчетнаяСумма, 
				Показатели.Р21С060.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.7';
													|en = '2.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 0, ';
													|en = 'Значение налоговой ставки в стр.055 подр.2.1 Раздела 2 = 0, '") +
		НСтр("ru = 'если 919 руб. х стр.080 подр.2.1 Раздела 2 - стр.060 подр.2.1 Раздела 2 < 0 ';
			|en = 'если 919 руб. х стр.080 подр.2.1 Раздела 2 - стр.060 подр.2.1 Раздела 2 < 0 '") +
		НСтр("ru = 'и гр.1 подр.2.1.2 <> 4300';
			|en = 'и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %4 (919 х %2 - %3) < 0';
													|en = '%1 = 0, если %4 (919 х %2 - %3) < 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.055 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С055", "П000200005503");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р21С060", "П000200006003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	Показатели.Р23Г001.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			ЕстьКод4300 = Ложь;
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
					Если ЕстьКод4300 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			РасчетнаяСумма = Окр(919 * Показатели.Р21С080.Значение - Показатели.Р21С060.Значение, 9);
			УсловиеВыполнено = РасчетнаяСумма < 0 И НЕ ЕстьКод4300;
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р21С055.Значение = 0; 
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, Показатели.Р21С055.Значение,
				Показатели.Р21С080.Значение, Показатели.Р21С060.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.8';
													|en = '2.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение показателя Дм в стр.060 подр.2.1 Раздела 2 = ';
													|en = 'Значение показателя Дм в стр.060 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'стр.070 подр.2.1 Раздела 2 х стр.080 подр.2.1 Раздела 2 х (1 - стр.110 подр.2.1 Раздела 2 х 1 (Кд) ';
			|en = 'стр.070 подр.2.1 Раздела 2 х стр.080 подр.2.1 Раздела 2 х (1 - стр.110 подр.2.1 Раздела 2 х 1 (Кд) '") +
		НСтр("ru = 'х стр.115 подр.2.1 Раздела 2 х стр.120 подр.2.1 Раздела 2) - 428 (Кк) - стр.123 подр.2.1 Раздела 2 ';
			|en = 'х стр.115 подр.2.1 Раздела 2 х стр.120 подр.2.1 Раздела 2) - 428 (Кк) - стр.123 подр.2.1 Раздела 2 '") +
		НСтр("ru = '- стр.125 подр.2.1 Раздела 2, если гр.1 подр.2.1.2 <> 4300';
			|en = '- стр.125 подр.2.1 Раздела 2, если гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %9 (%2 х %3 х (1 - %4 х 1 х %5 х %6) - 428 - %7 - %8)';
													|en = '%1 = %9 (%2 х %3 х (1 - %4 х 1 х %5 х %6) - 428 - %7 - %8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение показателя Дм';
													|en = 'Ошибочное значение показателя Дм'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение показателя Дм в стр.060 подр.2.1 Раздела 2';
													|en = 'Уточните значение показателя Дм в стр.060 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С060", "П000200006003");
	ИменаПоказателей.Вставить("Р21С070", "П000200007003");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р21С110", "П000200011003");
	ИменаПоказателей.Вставить("Р21С115", "П000200011503");
	ИменаПоказателей.Вставить("Р21С120", "П000200012003");
	ИменаПоказателей.Вставить("Р21С123", "П000200012303");
	ИменаПоказателей.Вставить("Р21С125", "П000200012503");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	Показатели.Р23Г001.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			ЕстьКод4300 = Ложь;
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
					Если ЕстьКод4300 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			РасчетнаяСумма = Окр(Показатели.Р21С070.Значение * Показатели.Р21С080.Значение * (1 - Показатели.Р21С110.Значение *
				Показатели.Р21С115.Значение * Показатели.Р21С120.Значение) - 428 - Показатели.Р21С123.Значение - 
				Показатели.Р21С125.Значение, 9);
			НастройкиКС.ЭтоОшибка = СтраницаПодраздела.РазделЗаполнен И НЕ ЕстьКод4300 
				И НЕ Показатели.Р21С060.Значение = РасчетнаяСумма; 
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
				Показатели.Р21С060.Значение, Показатели.Р21С070.Значение, Показатели.Р21С080.Значение, Показатели.Р21С110.Значение,
				Показатели.Р21С115.Значение, Показатели.Р21С120.Значение, Показатели.Р21С123.Значение, Показатели.Р21С125.Значение,
				РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.9';
													|en = '2.9'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение Кндпи в стр.070 подр.2.1 Раздела 2 = 559';
													|en = 'Значение Кндпи в стр.070 подр.2.1 Раздела 2 = 559'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение Кндпи';
													|en = 'Ошибочное значение Кндпи'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение Кндпи в стр.070 подр.2.1 Раздела 2 = 559';
													|en = 'Укажите значение Кндпи в стр.070 подр.2.1 Раздела 2 = 559'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(559);
	
	НастройкиКС.Вставить("Показатель1"		, "Р21С070");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200007003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел"		, "Раздел21");
	НастройкиКС.Вставить("МассивЗначений"	, МассивЗначений);
	
	ПроверкаКС_2_09_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_09_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.Раздел_] Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела[НастройкиКС.Подраздел] Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели[НастройкиКС.Показатель1].Значение) 
				И НастройкиКС.МассивЗначений.Найти(Показатели[НастройкиКС.Показатель1].Значение) = Неопределено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели[НастройкиКС.Показатель1].Значение, СтрСоединить(НастройкиКС.МассивЗначений, ", "));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.12';
													|en = '2.12'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кз в стр.110 подр.2.1 Раздела 2 <= 1';
													|en = 'Значение коэффициента Кз в стр.110 подр.2.1 Раздела 2 <= 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 <= 1';
													|en = '%1 <= 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кз';
													|en = 'Ошибочное значение коэффициента Кз'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение коэффициента Кз в стр.110 подр.2.1 Раздела 2 <= 1';
													|en = 'Укажите значение коэффициента Кз в стр.110 подр.2.1 Раздела 2 <= 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С110", "П000200011003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р21С110.Значение > 1; 
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р21С110.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.13';
													|en = '2.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0 или 1';
													|en = 'Значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ккан';
													|en = 'Ошибочное значение коэффициента Ккан'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0 или 1';
			|en = 'Укажите значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(0);
	МассивЗначений.Добавить(1);
	
	НастройкиКС.Вставить("Показатель1"		, "Р21С120");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200012003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел"		, "Раздел21");
	НастройкиКС.Вставить("МассивЗначений"	, МассивЗначений);
	
	ПроверкаКС_2_09_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.14';
													|en = '2.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0, ';
													|en = 'Значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0, '") +
		НСтр("ru = 'если гр.1 подр.2.1.1 Раздела 2 = 4002 - 4010';
			|en = 'если гр.1 подр.2.1.1 Раздела 2 = 4002 - 4010'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0 когда %2 = 4002 - 4010';
													|en = '%1 = 0 когда %2 = 4002 - 4010'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ккан';
													|en = 'Ошибочное значение коэффициента Ккан'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0';
			|en = 'Укажите значение коэффициента Ккан в стр.120 подр.2.1 Раздела 2 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С120", "П000200012003");
	ИменаПоказателей.Вставить("Р22Г001", "П000211000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	СтрокаЗначений = "4002,4003,4004,4005,4006,4007,4008,4009,4010";
	МассивЗначений = СтрРазделить(СтрокаЗначений, ",");
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С120, СтраницаПодраздела1);
			КодНайден = Ложь;
			МассивРасшифровки = Новый Массив;
			
			
			Для Счетчик = 1 По СтраницаПодраздела1.КолвоСтрокП000211 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г001, СтраницаПодраздела1, Счетчик);
				КодНайден = КодНайден ИЛИ НЕ МассивЗначений.Найти(Показатели.Р22Г001.Значение) = Неопределено;
				МассивРасшифровки.Добавить(Показатели.Р22Г001.ЗначениеСтр);
			КонецЦикла; 
			
			НастройкиКС.ЭтоОшибка = КодНайден И НЕ Показатели.Р21С120.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С120.Значение, СтрСоединить(МассивРасшифровки, ", "));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.15';
													|en = '2.15'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кабдт в стр.123 подр.2.1 Раздела 2 >= 0';
													|en = 'Значение коэффициента Кабдт в стр.123 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кабдт';
													|en = 'Ошибочное значение коэффициента Кабдт'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кабдт в стр.123 подр.2.1 Раздела 2 >= 0';
			|en = 'Укажите значение коэффициента Кабдт в стр.123 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Синоним"			, "Р21С001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200012303");
	ПроверкаКС_2_15_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_15_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Синоним, НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
			НастройкиКС.ЭтоОшибка = Показатели[НастройкиКС.Синоним].Значение < 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели[НастройкиКС.Синоним].Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.16';
													|en = '2.16'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Иаб в гр.1 стр.124 подр.2.1 Раздела 2 = 0 или 1';
													|en = 'Значение коэффициента Иаб в гр.1 стр.124 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Иаб';
													|en = 'Ошибочное значение коэффициента Иаб'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Иаб в гр.1 стр.124 подр.2.1 Раздела 2 = 0 или 1';
			|en = 'Укажите значение коэффициента Иаб в гр.1 стр.124 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(0);
	МассивЗначений.Добавить(1);
	
	НастройкиКС.Вставить("Показатель1"		, "Р21П001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200012404");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел"		, "Раздел21");
	НастройкиКС.Вставить("МассивЗначений"	, МассивЗначений);
	
	ПроверкаКС_2_09_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.17';
													|en = '2.17'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Идт в гр.2 стр.124 подр.2.1 Раздела 2 = 0 или 1';
													|en = 'Значение коэффициента Идт в гр.2 стр.124 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Идт';
													|en = 'Ошибочное значение коэффициента Идт'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Идт в гр.2 стр.124 подр.2.1 Раздела 2 = 0 или 1';
			|en = 'Укажите значение коэффициента Идт в гр.2 стр.124 подр.2.1 Раздела 2 = 0 или 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(0);
	МассивЗначений.Добавить(1);
	
	НастройкиКС.Вставить("Показатель1"		, "Р21П001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200012405");
	НастройкиКС.Вставить("Раздел_"			, "Раздел2");
	НастройкиКС.Вставить("Подраздел"		, "Раздел21");
	НастройкиКС.Вставить("МассивЗначений"	, МассивЗначений);
	
	ПроверкаКС_2_09_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.18';
													|en = '2.18'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Нбуг в гр.3 стр.124 подр.2.1 Раздела 2 >= 0';
													|en = 'Значение коэффициента Нбуг в гр.3 стр.124 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Нбуг';
													|en = 'Ошибочное значение коэффициента Нбуг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Нбуг в гр.3 стр.124 подр.2.1 Раздела 2 >= 0';
			|en = 'Укажите значение коэффициента Нбуг в гр.3 стр.124 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Синоним"			, "Р21П001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200012406");
	ПроверкаКС_2_15_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.19';
													|en = '2.19'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.130 подр.2.1 Раздела 2 = ';
													|en = 'Сумма исчисленного налога в стр.130 подр.2.1 Раздела 2 = '") +
		НСтр("ru = '(сумма гр.2 подр.2.1.1 Раздела 2, для которых гр.1 подр.2.1.1 Раздела 2 = 4000, 4002 - 4010) х ';
			|en = '(сумма гр.2 подр.2.1.1 Раздела 2, для которых гр.1 подр.2.1.1 Раздела 2 = 4000, 4002 - 4010) х '") +
		НСтр("ru = 'стр.055 подр.2.1 Раздела 2 + сумма всех стр.260 подр.2.1.2 Раздела 2';
			|en = 'стр.055 подр.2.1 Раздела 2 + сумма всех стр.260 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 х %3 + %4)';
													|en = '%1 = %5 (%2 х %3 + %4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму исчисленного налога в стр.130 подр.2.1 Раздела 2';
													|en = 'Уточните сумму исчисленного налога в стр.130 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С130", "П000200013003");
	ИменаПоказателей.Вставить("Р22Г001", "П000211000101_");
	ИменаПоказателей.Вставить("Р22Г002", "П000211000102_");
	ИменаПоказателей.Вставить("Р21С055", "П000200005503");
	ИменаПоказателей.Вставить("Р23С260", "П000200026003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	СтрокаЗначений = "4000,4002,4003,4004,4005,4006,4007,4008,4009,4010";
	МассивЗначений = СтрРазделить(СтрокаЗначений, ",");
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С130, СтраницаПодраздела1);
			Показатели.Р22Г002.Итог = 0;
			Показатели.Р23С260.Итог = 0;
			
			Для Счетчик = 1 По СтраницаПодраздела1.КолвоСтрокП000211 Цикл
				ЗаполнитьПоказатель(Показатели.Р22Г001, СтраницаПодраздела1, Счетчик);
				Если НЕ МассивЗначений.Найти(Показатели.Р22Г001.Значение) = Неопределено Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г002, СтраницаПодраздела1, Счетчик);
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С055, СтраницаПодраздела1);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С260, СтраницаПодраздела2);
			КонецЦикла;
			
			РасчетнаяСумма = Окр(Показатели.Р22Г002.Итог * Показатели.Р21С055.Значение + Показатели.Р23С260.Итог);
			НастройкиКС.ЭтоОшибка = НЕ Показатели.Р21С130.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С130.Значение, Показатели.Р22Г002.Итог, Показатели.Р21С055.Значение, Показатели.Р23С260.Итог, 
				РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.20';
													|en = '2.20'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение признака налогового вычета в стр.135 подр.2.1 ';
													|en = 'Значение признака налогового вычета в стр.135 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 должно соответствовать списку допустимых значений';
			|en = 'Раздела 2 должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение признака налогового вычета';
													|en = 'Ошибочное значение признака налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака налогового вычета в стр.135 подр.2.1 Раздела 2 из списка значений';
			|en = 'Выберите значение признака налогового вычета в стр.135 подр.2.1 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С135", "П000200013503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			СоответствиеНайдено = Ложь;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С135, СтраницаПодраздела1);
			Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р21С135.ИмяПоказателя);
			
			Если НЕ Список = Неопределено Тогда
				СоответствиеНайдено = НЕ Список.Получить(Показатели.Р21С135.Значение) = Неопределено;
			КонецЕсли;
			
			НастройкиКС.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С135.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.21';
													|en = '2.21'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.140 подр.2.1 Раздела 2 = 0, ';
													|en = 'Сумма налогового вычета в стр.140 подр.2.1 Раздела 2 = 0, '") +
		НСтр("ru = 'если стр.135 подр.2.1 Раздела 2 = 00';
			|en = 'если стр.135 подр.2.1 Раздела 2 = 00'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 00';
													|en = '%1 = 0, если %2 = 00'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налогового вычета в стр.140 подр.2.1 Раздела 2 = 0';
													|en = 'Укажите сумму налогового вычета в стр.140 подр.2.1 Раздела 2 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С140", "П000200014003");
	ИменаПоказателей.Вставить("Р21С135", "П000200013503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р21С135.Значение = "00" И НЕ Показатели.Р21С140.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С140.Значение, Показатели.Р21С135.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_22()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.22';
													|en = '2.22'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.140 подр.2.1 Раздела 2 <= ';
													|en = 'Сумма налогового вычета в стр.140 подр.2.1 Раздела 2 <= '") +
		НСтр("ru = 'стр.145 подр.2.1 Раздела 2, если стр.135 подр.2.1 Раздела 2 = 06';
			|en = 'стр.145 подр.2.1 Раздела 2, если стр.135 подр.2.1 Раздела 2 = 06'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 <= %2, если %3 = 06';
													|en = '%1 <= %2, если %3 = 06'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налогового вычета в стр.140 подр.2.1 Раздела 2';
													|en = 'Уточните сумму налогового вычета в стр.140 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С140", "П000200014003");
	ИменаПоказателей.Вставить("Р21С145", "П000200014503");
	ИменаПоказателей.Вставить("Р21С135", "П000200013503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р21С135.Значение = "06" 
				И Показатели.Р21С140.Значение > Показатели.Р21С145.Значение;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С140.Значение, Показатели.Р21С145.Значение, Показатели.Р21С135.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_23()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.23';
													|en = '2.23'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение предельной величины Пванкор в стр.145 подр.2.1 ';
													|en = 'Значение предельной величины Пванкор в стр.145 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 = 0, если стр.135 подр.2.1 Раздела 2 = 00, 01, 02, 03, 04, 05, 08, 09';
			|en = 'Раздела 2 = 0, если стр.135 подр.2.1 Раздела 2 = 00, 01, 02, 03, 04, 05, 08, 09'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 00, 01, 02, 03, 04, 05, 08, 09';
													|en = '%1 = 0, если %2 = 00, 01, 02, 03, 04, 05, 08, 09'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение величины Пванкор в стр.145 подр.2.1 Раздела 2 = 0';
													|en = 'Укажите значение величины Пванкор в стр.145 подр.2.1 Раздела 2 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗначений = НСтр("ru = '00,01,02,03,04,05,08,09';
							|en = '00,01,02,03,04,05,08,09'");
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С145", "П000200014503");
	ИменаПоказателей.Вставить("Р21С135", "П000200013503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
			НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р21С135.Значение) 
				И НЕ СтрНайти(СтрокаЗначений, Показатели.Р21С135.Значение) = 0 И НЕ Показатели.Р21С145.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р21С145.Значение, Показатели.Р21С135.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_24()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.24';
													|en = '2.24'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.150 подр.2.1 Раздела 2 = ';
													|en = 'Сумма налога в стр.150 подр.2.1 Раздела 2 = '") +
		НСтр("ru = '(стр.130 - стр.140) подр.2.1 Раздела 2';
			|en = '(стр.130 - стр.140) подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3)';
													|en = '%1 = %4 (%2 - %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.150 подр.2.1 Раздела 2';
													|en = 'Уточните сумму налога в стр.150 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.2 НК РФ';
													|en = 'ст.343.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'")); 
	Заголовки.Вставить("ДляДокументации"	, НСтр("ru = 'Отключено с 2024';
													|en = 'Отключено с 2024'")); 
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКС.ГодОтчета > 2023 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С150", "П000200015003");
	ИменаПоказателей.Вставить("Р21С130", "П000200013003");
	ИменаПоказателей.Вставить("Р21С140", "П000200014003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела1);
			
			РасчетнаяСумма = Макс(0, Показатели.Р21С130.Значение - Показатели.Р21С140.Значение);
			НастройкиКС.ЭтоОшибка = НЕ Показатели.Р21С150.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р21С150.Значение, Показатели.Р21С130.Значение, Показатели.Р21С140.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_25()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.25';
													|en = '2.25'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.150 подр.2.1 Раздела 2 >= 0';
													|en = 'Сумма налога в стр.150 подр.2.1 Раздела 2 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.150 подр.2.1 Раздела 2';
													|en = 'Уточните сумму налога в стр.150 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.2 НК РФ';
													|en = 'ст.343.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1 Раздела 2';
													|en = 'Страница %1 подр.2.1 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Синоним"			, "Р21С001");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000200015003");
	ПроверкаКС_2_15_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_26()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.26';
													|en = '2.26'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 >= 0';
													|en = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 >= 0';
			|en = 'Укажите значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С205", "П000200020503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела2);
			
				НастройкиКС.ЭтоОшибка = Показатели.Р23С205.Значение < 0; 
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С205.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_27()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.27';
													|en = '2.27'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = 919 ';
													|en = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = 919 '") +
		НСтр("ru = 'руб. х стр.080 подр.2.1 Раздела 2 - стр.210 подр.2.1.2 Раздела 2, если стр.210 подр.2.1.2 ';
			|en = 'руб. х стр.080 подр.2.1 Раздела 2 - стр.210 подр.2.1.2 Раздела 2, если стр.210 подр.2.1.2 '") +
		НСтр("ru = 'Раздела 2 >= 0 и гр.1 подр.2.1.2 <> 4300';
			|en = 'Раздела 2 >= 0 и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (919 х %2 - %3), если %3 >= 0';
													|en = '%1 = %4 (919 х %2 - %3), если %3 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С205", "П000200020503");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р23С210", "П000200021003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			ЗаполнитьПоказатель(Показатели.Р21С080, СтраницаПодраздела);
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С205, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С080);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С210, СтраницаПодраздела2);
				ЕстьКод4300 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
				КонецЦикла;
			
				РасчетнаяСумма = Окр(919 * Показатели.Р21С080.Значение - Показатели.Р23С210.Значение, 9);
				УсловиеВыполнено = РасчетнаяСумма >= 0 И Показатели.Р23С210.Значение >= 0 И НЕ ЕстьКод4300;
				НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р23С205.Значение = РасчетнаяСумма; 
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С205.Значение, Показатели.Р21С080.Значение, Показатели.Р23С210.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_28()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.28';
													|en = '2.28'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = 919 ';
													|en = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = 919 '") +
		НСтр("ru = 'руб. х стр.080 подр.2.1 Раздела 2 + стр.210 подр.2.1.2 Раздела 2, если стр.210 подр.2.1.2 ';
			|en = 'руб. х стр.080 подр.2.1 Раздела 2 + стр.210 подр.2.1.2 Раздела 2, если стр.210 подр.2.1.2 '") +
		НСтр("ru = 'Раздела 2 < 0 и гр.1 подр.2.1.2 <> 4300';
			|en = 'Раздела 2 < 0 и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (919 х %2 + %3), когда %5 < 0';
													|en = '%1 = %4 (919 х %2 + %3), когда %5 < 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С205", "П000200020503");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р23С210", "П000200021003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			ЗаполнитьПоказатель(Показатели.Р21С080, СтраницаПодраздела);
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С205, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С080);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С210, СтраницаПодраздела2);
				ЕстьКод4300 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
				КонецЦикла;
			
				РасчетнаяСумма = Окр(919 * Показатели.Р21С080.Значение - Показатели.Р23С210.Значение, 9);
				УсловиеВыполнено = Показатели.Р23С210.Значение < 0 И НЕ ЕстьКод4300;
				МодульСтр210 = ?(Показатели.Р23С210.Значение >= 0, Показатели.Р23С210.Значение, -Показатели.Р23С210.Значение);
				НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р23С205.Значение = РасчетнаяСумма; 
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С205.Значение, Показатели.Р21С080.Значение, МодульСтр210, РасчетнаяСумма, 
					Показатели.Р23С210.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_29()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.29';
													|en = '2.29'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = ';
													|en = 'Значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2 = '") +
		НСтр("ru = '(стр.123 + стр.125) подр.2.1 Раздела 2, если гр.1 подр.2.1.2 = 4300';
			|en = '(стр.123 + стр.125) подр.2.1 Раздела 2, если гр.1 подр.2.1.2 = 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 + %3)';
													|en = '%1 = %4 (%2 + %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение налоговой ставки в стр.205 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С205", "П000200020503");
	ИменаПоказателей.Вставить("Р21С123", "П000200012303");
	ИменаПоказателей.Вставить("Р21С125", "П000200012503");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р21С123, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С125, СтраницаПодраздела);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С205, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С123);
				РасшифроватьПоказатель(Показатели.Р21С125);
				ЕстьКод4300 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
				КонецЦикла;
			
				РасчетнаяСумма = Показатели.Р21С123.Значение + Показатели.Р21С125.Значение;
				НастройкиКС.ЭтоОшибка = ЕстьКод4300 И НЕ Показатели.Р23С205.Значение = РасчетнаяСумма; 
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С205.Значение, Показатели.Р21С123.Значение, Показатели.Р21С125.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_30()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.30';
													|en = '2.30'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Если код основания налогообложения в гр.1 подр.2.1.2 Раздела 2 = ';
													|en = 'Если код основания налогообложения в гр.1 подр.2.1.2 Раздела 2 = '") +
		НСтр("ru = '4300, то в данном подр.2.1.2 Раздела 2 гр.1 <> 4000 - 4010';
			|en = '4300, то в данном подр.2.1.2 Раздела 2 гр.1 <> 4000 - 4010'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '4300 <> 4000 - 4010';
													|en = '4300 <> 4000 - 4010'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение кода основания налогообложения';
													|en = 'Ошибочное значение кода основания налогообложения'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение кода в гр.1 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение кода в гр.1 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	СтрокаЗначений = "4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010";
	МассивЗначений = СтрРазделить(СтрокаЗначений, ",");
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЕстьКод4300 = Ложь;
				ЕстьКод4000 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
					ЕстьКод4000 = ЕстьКод4000 ИЛИ НЕ МассивЗначений.Найти(Показатели.Р23Г001.Значение) = Неопределено
				КонецЦикла;
			
				НастройкиКС.ЭтоОшибка = ЕстьКод4300 И ЕстьКод4000; 
				НастройкиКС.Детализация = НастройкиКС.ШаблонДетализации;
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_31()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.31';
													|en = '2.31'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение показателя Дм в стр.210 подр.2.1.2 Раздела 2 = ';
													|en = 'Значение показателя Дм в стр.210 подр.2.1.2 Раздела 2 = '") +
		НСтр("ru = '- стр.123 подр.2.1 Раздела 2 - стр.125 подр.2.1 Раздела 2, если гр.1 подр.2.1.2 = 4300';
			|en = '- стр.123 подр.2.1 Раздела 2 - стр.125 подр.2.1 Раздела 2, если гр.1 подр.2.1.2 = 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (- %2 - %3)';
													|en = '%1 = %4 (- %2 - %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение показателя Дм';
													|en = 'Ошибочное значение показателя Дм'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение показателя Дм в стр.210 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение показателя Дм в стр.210 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С210", "П000200021003");
	ИменаПоказателей.Вставить("Р21С123", "П000200012303");
	ИменаПоказателей.Вставить("Р21С125", "П000200012503");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р21С123, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С125, СтраницаПодраздела);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С210, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С123);
				РасшифроватьПоказатель(Показатели.Р21С125);
				ЕстьКод4300 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
				КонецЦикла;
			
				РасчетнаяСумма = - Показатели.Р21С123.Значение - Показатели.Р21С125.Значение;
				НастройкиКС.ЭтоОшибка = ЕстьКод4300 И НЕ Показатели.Р23С210.Значение = РасчетнаяСумма; 
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С210.Значение, Показатели.Р21С123.Значение, Показатели.Р21С125.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_32()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.32';
													|en = '2.32'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение показателя Дм в стр.210 подр.2.1.2 Раздела 2 = ';
													|en = 'Значение показателя Дм в стр.210 подр.2.1.2 Раздела 2 = '") +
		НСтр("ru = 'стр.070 подр.2.1 Раздела 2 х стр.080 подр.2.1 Раздела 2 х (1 - стр.110 подр.2.1 Раздела 2 х ';
			|en = 'стр.070 подр.2.1 Раздела 2 х стр.080 подр.2.1 Раздела 2 х (1 - стр.110 подр.2.1 Раздела 2 х '") +
		НСтр("ru = 'стр.230 подр.2.1.2 Раздела 2 х стр.250 подр.2.1.2 Раздела 2 х стр.120 подр.2.1 Раздела 2) ';
			|en = 'стр.230 подр.2.1.2 Раздела 2 х стр.250 подр.2.1.2 Раздела 2 х стр.120 подр.2.1 Раздела 2) '") +
		НСтр("ru = '- 428 (Кк) - стр.123 подр.2.1 Раздела 2 - стр.125 подр.2.1 Раздела 2, если ';
			|en = '- 428 (Кк) - стр.123 подр.2.1 Раздела 2 - стр.125 подр.2.1 Раздела 2, если '") +
		НСтр("ru = 'значение в стр.250 подр.2.1.2 Раздела 2 заполнено и гр.1 подр.2.1.2 <> 4300';
			|en = 'значение в стр.250 подр.2.1.2 Раздела 2 заполнено и гр.1 подр.2.1.2 <> 4300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %9 (%2 х %3 х (1 - %4 х %5 х %6 х %7) - 428 - %8)';
													|en = '%1 = %9 (%2 х %3 х (1 - %4 х %5 х %6 х %7) - 428 - %8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение показателя Дм';
													|en = 'Ошибочное значение показателя Дм'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение показателя Дм в стр.210 подр.2.1.2 Раздела 2';
													|en = 'Уточните значение показателя Дм в стр.210 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("ШаблонДетализации2"	, НСтр("ru = '%1 - %2';
														|en = '%1 - %2'"));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С210", "П000200021003");
	ИменаПоказателей.Вставить("Р21С070", "П000200007003");
	ИменаПоказателей.Вставить("Р21С080", "П000200008003");
	ИменаПоказателей.Вставить("Р21С110", "П000200011003");
	ИменаПоказателей.Вставить("Р23С230", "П000200023003");
	ИменаПоказателей.Вставить("Р23С250", "П000200025003");
	ИменаПоказателей.Вставить("Р21С120", "П000200012003");
	ИменаПоказателей.Вставить("Р21С123", "П000200012303");
	ИменаПоказателей.Вставить("Р21С125", "П000200012503");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р21С070, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С080, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С110, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С120, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С123, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р21С125, СтраницаПодраздела);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С210, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С070);
				РасшифроватьПоказатель(Показатели.Р21С080);
				РасшифроватьПоказатель(Показатели.Р21С110);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С230, СтраницаПодраздела2);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С250, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р21С120);
				РасшифроватьПоказатель(Показатели.Р21С123);
				РасшифроватьПоказатель(Показатели.Р21С125);
				ЕстьКод4300 = Ложь;
			
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					ЕстьКод4300 = ЕстьКод4300 ИЛИ Показатели.Р23Г001.Значение = "4300";
				КонецЦикла;
			
				РасчетнаяСумма = Окр(Показатели.Р21С070.Значение * Показатели.Р21С080.Значение * (1 - Показатели.Р21С110.Значение *
					Показатели.Р23С230.Значение * Показатели.Р23С250.Значение * Показатели.Р21С120.Значение) - 428 - 
					Показатели.Р21С123.Значение - Показатели.Р21С125.Значение, 9);
				УсловиеВыполнено = НЕ ЕстьКод4300 И ЗначениеЗаполнено(Показатели.Р23С250.Значение);
				НастройкиКС.ЭтоОшибка = СтраницаПодраздела.РазделЗаполнен И УсловиеВыполнено 
					И НЕ Показатели.Р23С210.Значение = РасчетнаяСумма; 
				Расшифровка2 = СтрШаблон(НастройкиКС.ШаблонДетализации2, 
					Показатели.Р21С123.Значение, Показатели.Р21С125.Значение);
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С210.Значение, Показатели.Р21С070.Значение, Показатели.Р21С080.Значение, 
					Показатели.Р21С110.Значение, Показатели.Р23С230.Значение, Показатели.Р23С250.Значение, 
					Показатели.Р21С120.Значение, Расшифровка2, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_33()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.33';
													|en = '2.33'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 должно ';
													|en = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кд';
													|en = 'Ошибочное значение коэффициента Кд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Кд в стр.230 подр.2.1 Раздела 2 из списка значений';
			|en = 'Выберите значение коэффициента Кд в стр.230 подр.2.1 Раздела 2 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С230", "П000200023003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
	
				ЗарегистрироватьПроверку();
				СоответствиеНайдено = Ложь;
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С230, СтраницаПодраздела2);
				Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р23С230.ИмяПоказателя);
				
				Если НЕ Список = Неопределено Тогда
					СоответствиеНайдено = НЕ Список.Получить(Показатели.Р23С230.Значение) = Неопределено;
				КонецЕсли;
				
				НастройкиКС.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					Показатели.Р23С230.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_34()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.34';
													|en = '2.34'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,2, ';
													|en = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,2, '") +
		НСтр("ru = 'если стр.180 подр.2.1.2 Раздела 2 <= 0,002 и стр.170 подр.2.1.2 Раздела 2 <= 10';
			|en = 'если стр.180 подр.2.1.2 Раздела 2 <= 0,002 и стр.170 подр.2.1.2 Раздела 2 <= 10'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,2, если %2 <= 0,002 и %3 <= 10';
													|en = '%1 = 0,2, если %2 <= 0,002 и %3 <= 10'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кд';
													|en = 'Ошибочное значение коэффициента Кд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,2';
			|en = 'Укажите значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_2_35_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_35()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.35';
													|en = '2.35'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,4, ';
													|en = 'Значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,4, '") +
		НСтр("ru = 'если стр.180 подр.2.1.2 Раздела 2 <= 0,002 и стр.170 подр.2.1.2 Раздела 2 > 10';
			|en = 'если стр.180 подр.2.1.2 Раздела 2 <= 0,002 и стр.170 подр.2.1.2 Раздела 2 > 10'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,4, если %2 <= 0,002 и %3 > 10';
													|en = '%1 = 0,4, если %2 <= 0,002 и %3 > 10'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кд';
													|en = 'Ошибочное значение коэффициента Кд'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,4';
			|en = 'Укажите значение коэффициента Кд в стр.230 подр.2.1.2 Раздела 2 = 0,4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_2_35_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_35_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С230", "П000200023003");
	ИменаПоказателей.Вставить("Р23С180", "П000200018003");
	ИменаПоказателей.Вставить("Р23С170", "П000200017003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела2);
				
				НастройкиКС.ЭтоОшибка = (ЗначениеЗаполнено(Показатели.Р23С170.Значение) 
					ИЛИ ЗначениеЗаполнено(Показатели.Р23С180.Значение)) И Показатели.Р23С180.Значение <= 0.002;
				Если НастройкиКС.НомерКС = "2.34" Тогда
					НастройкиКС.ЭтоОшибка = НастройкиКС.ЭтоОшибка И Показатели.Р23С170.Значение <= 10
						И НЕ Показатели.Р23С230.Значение = 0.2;
				Иначе
					НастройкиКС.ЭтоОшибка = НастройкиКС.ЭтоОшибка И Показатели.Р23С170.Значение > 10
						И НЕ Показатели.Р23С230.Значение = 0.4;
				КонецЕсли;
				
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, Показатели.Р23С230.Значение, 
					Показатели.Р23С180.Значение, Показатели.Р23С170.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_36()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.36';
													|en = '2.36'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Количество налоговых периодов в стр.240 подр.2.1.2 Раздела 2 <= ';
													|en = 'Количество налоговых периодов в стр.240 подр.2.1.2 Раздела 2 <= '") +
		НСтр("ru = '180, если стр.230 подр.2.1.2 Раздела 2 < 1';
			|en = '180, если стр.230 подр.2.1.2 Раздела 2 < 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 <= 180, если %2 <= 1';
													|en = '%1 <= 180, если %2 <= 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное количество налоговых периодов';
													|en = 'Ошибочное количество налоговых периодов'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Уточните количество налоговых периодов в стр.240 подр.2.1.2 Раздела 2';
			|en = 'Уточните количество налоговых периодов в стр.240 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С240", "П000200024003");
	ИменаПоказателей.Вставить("Р23С230", "П000200023003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела2);
				
				НастройкиКС.ЭтоОшибка = Показатели.Р23С230.Значение < 1 И Показатели.Р23С240.Значение > 180;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, Показатели.Р23С240.Значение, 
					Показатели.Р23С230.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_37()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.37';
													|en = '2.37'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 1, ';
													|en = 'Значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 1, '") +
		НСтр("ru = 'если стр.230 подр.2.1.2 Раздела 2 < 1 и стр.220 подр.2.1.2 Раздела 2 < 0,8';
			|en = 'если стр.230 подр.2.1.2 Раздела 2 < 1 и стр.220 подр.2.1.2 Раздела 2 < 0,8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1, если %2 < 1 и %3 < 0,8';
													|en = '%1 = 1, если %2 < 1 и %3 < 0,8'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кдв';
													|en = 'Ошибочное значение коэффициента Кдв'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 1';
			|en = 'Укажите значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_2_38_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_38()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.38';
													|en = '2.38'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 0,3, ';
													|en = 'Значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 0,3, '") +
		НСтр("ru = 'если стр.230 подр.2.1.2 Раздела 2 < 1 и стр.220 подр.2.1.2 Раздела 2 > 1';
			|en = 'если стр.230 подр.2.1.2 Раздела 2 < 1 и стр.220 подр.2.1.2 Раздела 2 > 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,3, если %2 < 1 и %3 > 1';
													|en = '%1 = 0,3, если %2 < 1 и %3 > 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кдв';
													|en = 'Ошибочное значение коэффициента Кдв'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 0,3';
			|en = 'Укажите значение коэффициента Кдв в стр.250 подр.2.1.2 Раздела 2 = 0,3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.2 НК РФ';
													|en = 'ст.342.2 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_2_38_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_38_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С250", "П000200025003");
	ИменаПоказателей.Вставить("Р23С230", "П000200023003");
	ИменаПоказателей.Вставить("Р23С220", "П000200022003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела2);
				
				НастройкиКС.ЭтоОшибка = (ЗначениеЗаполнено(Показатели.Р23С230.Значение) 
					ИЛИ ЗначениеЗаполнено(Показатели.Р23С220.Значение)) И Показатели.Р23С230.Значение < 1;
				Если НастройкиКС.НомерКС = "2.37" Тогда
					НастройкиКС.ЭтоОшибка = НастройкиКС.ЭтоОшибка И Показатели.Р23С220.Значение < 0.8
						И НЕ Показатели.Р23С250.Значение = 1;
				Иначе
					НастройкиКС.ЭтоОшибка = НастройкиКС.ЭтоОшибка И Показатели.Р23С220.Значение > 1
						И НЕ Показатели.Р23С250.Значение = 0.3;
				КонецЕсли;
				
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р23С250.Значение, Показатели.Р23С230.Значение, Показатели.Р23С220.Значение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_39()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.39';
													|en = '2.39'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.260 подр.2.1.2 Раздела 2 = ';
													|en = 'Сумма исчисленного налога в стр.260 подр.2.1.2 Раздела 2 = '") +
		НСтр("ru = '(сумма гр.2 подр.2.1.2 Раздела 2, для которых гр.1 подр.2.1.2 Раздела 2 = 4000, 4002 - 4010, 4300) х ';
			|en = '(сумма гр.2 подр.2.1.2 Раздела 2, для которых гр.1 подр.2.1.2 Раздела 2 = 4000, 4002 - 4010, 4300) х '") +
		НСтр("ru = 'стр.205 подр.2.1.2 Раздела 2';
			|en = 'стр.205 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму исчисленного налога в стр.260 подр.2.1.2 Раздела 2';
													|en = 'Уточните сумму исчисленного налога в стр.260 подр.2.1.2 Раздела 2'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.5 НК РФ';
													|en = 'ст.342.5 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.2.1.2 Раздела 2';
													|en = 'Страница %1 подр.2.1.2 Раздела 2'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23С260", "П000200026003");
	ИменаПоказателей.Вставить("Р23Г001", "П000212000101_");
	ИменаПоказателей.Вставить("Р23Г002", "П000212000102_");
	ИменаПоказателей.Вставить("Р23С205", "П000200020503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	СтрокаЗначений = "4000,4002,4003,4004,4005,4006,4007,4008,4009,4010,4300";
	МассивЗначений = СтрРазделить(СтрокаЗначений, ",");
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел21 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел212 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С260, СтраницаПодраздела2);
				Показатели.Р23Г002.Итог = 0;
				КодНайден = Ложь;
				
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000212 Цикл
					ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаПодраздела2, Счетчик);
					Если НЕ МассивЗначений.Найти(Показатели.Р23Г001.Значение) = Неопределено Тогда
						ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г002, СтраницаПодраздела2, Счетчик);
						КодНайден = КодНайден ИЛИ Истина;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23С205, СтраницаПодраздела2);
				
				РасчетнаяСумма = Окр(Показатели.Р23Г002.Итог * Показатели.Р23С205.Значение);
				НастройкиКС.ЭтоОшибка = КодНайден И НЕ Показатели.Р23С260.Значение = РасчетнаяСумма;
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
					Показатели.Р23С260.Значение, Показатели.Р23Г002.Итог, Показатели.Р23С205.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_3_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.1';
													|en = '3.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 3 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 3 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код вида полезного ископаемого';
													|en = 'Ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода вида полезного ископаемого в стр.010 Раздела 3 из списка';
			|en = 'Выберите значение кода вида полезного ископаемого в стр.010 Раздела 3 из списка'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000300001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.2';
													|en = '3.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 3 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.020 Раздела 3 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.020 Раздела 3';
													|en = 'Уточните значение КБК в стр.020 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000300002003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел3");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.3';
													|en = '3.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 3 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 3 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Выберите КБК в стр.020 Раздела 3 из списка значений';
													|en = 'Выберите КБК в стр.020 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р03С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000300002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел3");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.4';
													|en = '3.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 3 = 168, ';
													|en = 'Код единицы измерения в стр.030 Раздела 3 = 168, '") +
		НСтр("ru = 'если стр.010 Раздела 3 = 03200';
			|en = 'если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 168, если %2 = 03200';
													|en = '%1 = 168, если %2 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код единицы измерения';
													|en = 'Ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите код единицы измерения в стр.030 Раздела 3 = 168';
													|en = 'Укажите код единицы измерения в стр.030 Раздела 3 = 168'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.5';
													|en = '3.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 3 = 114, ';
													|en = 'Код единицы измерения в стр.030 Раздела 3 = 114, '") +
		НСтр("ru = 'если стр.010 Раздела 3 = 03300';
			|en = 'если стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 114, если %2 = 03300';
													|en = '%1 = 114, если %2 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код единицы измерения';
													|en = 'Ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите код единицы измерения в стр.030 Раздела 3 = 114';
													|en = 'Укажите код единицы измерения в стр.030 Раздела 3 = 114'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С030", "П000300003003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Если НастройкиКС.НомерКС = "3.4" Тогда
			НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р03С030.Значение = "168";
		Иначе
			НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03300" И НЕ Показатели.Р03С030.Значение = "114";
		КонецЕсли;
		
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, Показатели.Р03С030.ЗначениеСтр, 
			Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.6';
													|en = '3.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.190 подр.3.1 Раздела 3 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.190 подр.3.1 Раздела 3 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.190 подр.3.1 Раздела 3';
													|en = 'Уточните значение ОКТМО в стр.190 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1 Раздела 3';
													|en = 'Страница %1 подр.3.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р31С190");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000300019003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел3");
	НастройкиКС.Вставить("ПодразделОКТМО"	, "Раздел31");
	
	ПроверкаКС_2_03_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.7';
													|en = '3.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.040 Раздела 3 = сумме ';
													|en = 'Сумма исчисленного налога в стр.040 Раздела 3 = сумме '") +
		НСтр("ru = 'всех стр.220 подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03200';
			|en = 'всех стр.220 подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, если %3 = 03200';
													|en = '%1 = %2, если %3 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение суммы исчисленного налога в стр.040 Раздела 3';
													|en = 'Уточните значение суммы исчисленного налога в стр.040 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С040", "П000300004003");
	ИменаПоказателей.Вставить("Р31С220", "П000300022003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С040, СтраницаРаздела);
		Показатели.Р31С220.Итог = 0;
		
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С220, СтраницаПодраздела1);
		КонецЦикла;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" 
			И НЕ Показатели.Р03С040.Значение = Показатели.Р31С220.Итог;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С040.Значение, Показатели.Р31С220.Итог, Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.8';
													|en = '3.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога к уплате в стр.050 Раздела 3 = ';
													|en = 'Сумма налога к уплате в стр.050 Раздела 3 = '") +
		НСтр("ru = '(стр.040 - стр.045) Раздела 3, если стр.010 Раздела 3 = 03200';
			|en = '(стр.040 - стр.045) Раздела 3, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3), если %5 = 03200';
													|en = '%1 = %4 (%2 - %3), если %5 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога к уплате';
													|en = 'Ошибочная сумма налога к уплате'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение суммы налога к уплате в стр.050 Раздела 3';
													|en = 'Уточните значение суммы налога к уплате в стр.050 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С050", "П000300005003");
	ИменаПоказателей.Вставить("Р03С040", "П000300004003");
	ИменаПоказателей.Вставить("Р03С045", "П000300004503");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р03С040.Значение - Показатели.Р03С045.Значение);
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р03С050.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С050.Значение, Показатели.Р03С040.Значение, Показатели.Р03С045.Значение, РасчетнаяСумма, 
			Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.9';
													|en = '3.9'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога к уплате в стр.050 Раздела 3 >= 0';
													|en = 'Сумма налога к уплате в стр.050 Раздела 3 >= 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога к уплате';
													|en = 'Ошибочная сумма налога к уплате'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение суммы налога к уплате в стр.050 Раздела 3 >= 0';
													|en = 'Укажите значение суммы налога к уплате в стр.050 Раздела 3 >= 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С050", "П000300005003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р03С050.Значение < 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С050.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.10';
													|en = '3.10'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.045 Раздела 3 = ';
													|en = 'Сумма налогового вычета в стр.045 Раздела 3 = '") +
		НСтр("ru = '0, если стр.010 Раздела 3 = 03300';
			|en = '0, если стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0 когда %2 = 03300';
													|en = '%1 = 0 когда %2 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение суммы налогового вычета в стр.045 Раздела 3 = 0';
													|en = 'Укажите значение суммы налогового вычета в стр.045 Раздела 3 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С045", "П000300004503");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03300" И НЕ Показатели.Р03С045.Значение = 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С045.Значение, Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.11';
													|en = '3.11'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога к уплате в стр.220 подр.3.1 Раздела 3 = ';
													|en = 'Сумма налога к уплате в стр.220 подр.3.1 Раздела 3 = '") +
		НСтр("ru = '(стр.210 - стр.215) подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03300';
			|en = '(стр.210 - стр.215) подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3), если %5 = 03300';
													|en = '%1 = %4 (%2 - %3), если %5 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога к уплате';
													|en = 'Ошибочная сумма налога к уплате'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Уточните значение суммы налога к уплате в стр.220 подр.3.1 Раздела 3';
			|en = 'Уточните значение суммы налога к уплате в стр.220 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1 Раздела 3';
													|en = 'Страница %1 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ДляДокументации"	, НСтр("ru = 'Отключено с 2024';
													|en = 'Отключено с 2024'")); 
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКС.ГодОтчета > 2023 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С220", "П000300022003");
	ИменаПоказателей.Вставить("Р31С210", "П000300021003");
	ИменаПоказателей.Вставить("Р31С215", "П000300021503");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С220, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С210, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С215, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р03С010);

			РасчетнаяСумма = Окр(Показатели.Р31С210.Значение - Показатели.Р31С215.Значение);
			НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03300" И НЕ Показатели.Р31С220.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
				Показатели.Р31С220.Значение, Показатели.Р31С210.Значение, Показатели.Р31С215.Значение, РасчетнаяСумма, 
				Показатели.Р03С010.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.12';
													|en = '3.12'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога к уплате в стр.220 подр.3.1 Раздела 3 = ';
													|en = 'Сумма налога к уплате в стр.220 подр.3.1 Раздела 3 = '") +
		НСтр("ru = 'стр.210 подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03200';
			|en = 'стр.210 подр.3.1 Раздела 3, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2 когда %3 = 03200';
													|en = '%1 = %2 когда %3 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога к уплате';
													|en = 'Ошибочная сумма налога к уплате'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Уточните значение суммы налога к уплате в стр.220 подр.3.1 Раздела 3';
			|en = 'Уточните значение суммы налога к уплате в стр.220 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1 Раздела 3';
													|en = 'Страница %1 подр.3.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С220", "П000300022003");
	ИменаПоказателей.Вставить("Р31С210", "П000300021003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С220, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С210, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р03С010);

			НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" 
				И НЕ Показатели.Р31С220.Значение = Показатели.Р31С210.Значение;
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
				Показатели.Р31С220.Значение, Показатели.Р31С210.Значение, Показатели.Р03С010.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.13';
													|en = '3.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.215 подр.3.1 Раздела 3 = ';
													|en = 'Сумма налогового вычета в стр.215 подр.3.1 Раздела 3 = '") +
		НСтр("ru = '0, если стр.010 Раздела 3 = 03200';
			|en = '0, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 03200';
													|en = '%1 = 0, если %2 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога к уплате';
													|en = 'Ошибочная сумма налога к уплате'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение суммы налогового вычета в стр.215 подр.3.1 Раздела 3 = 0';
			|en = 'Укажите значение суммы налогового вычета в стр.215 подр.3.1 Раздела 3 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1 Раздела 3';
													|en = 'Страница %1 подр.3.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С215", "П000300021503");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С215, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р03С010);

			НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р31С215.Значение = 0;
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
				Показатели.Р31С215.Значение, Показатели.Р03С010.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.14';
													|en = '3.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.045 Раздела 3 = ';
													|en = 'Сумма налогового вычета в стр.045 Раздела 3 = '") +
		НСтр("ru = '(стр.060 х стр.070 х стр.080) Раздела 3, если стр.010 Раздела 3 = 03200';
			|en = '(стр.060 х стр.070 х стр.080) Раздела 3, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 х %3 х %4), если %6 = 03200';
													|en = '%1 = %5 (%2 х %3 х %4), если %6 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение суммы налогового вычета в стр.045 Раздела 3';
													|en = 'Уточните значение суммы налогового вычета в стр.045 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.4 НК РФ';
													|en = 'ст.343.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С045", "П000300004503");
	ИменаПоказателей.Вставить("Р03С060", "П000300006003");
	ИменаПоказателей.Вставить("Р03С070", "П000300007003");
	ИменаПоказателей.Вставить("Р03С080", "П000300008003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р03С060.Значение * Показатели.Р03С070.Значение * Показатели.Р03С080.Значение, 2);
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р03С045.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С045.Значение, Показатели.Р03С060.Значение, Показатели.Р03С070.Значение, 
			Показатели.Р03С080.Значение, РасчетнаяСумма, Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.15';
													|en = '3.15'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ков в стр.110 Раздела 3 должно ';
													|en = 'Значение коэффициента Ков в стр.110 Раздела 3 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ков';
													|en = 'Ошибочное значение коэффициента Ков'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Ков в стр.110 Раздела 3 из списка значений';
			|en = 'Выберите значение коэффициента Ков в стр.110 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С110", "П000300011003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С110, СтраницаРаздела);
		Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р03С110.ИмяПоказателя);
		
		Если НЕ Список = Неопределено Тогда
			СоответствиеНайдено = НЕ Список.Получить(Показатели.Р03С110.Значение) = Неопределено;
		КонецЕсли;
		
		НастройкиКС.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р03С110.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.17';
													|en = '3.17'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Цена газа в стр.100 Раздела 3 = ';
													|en = 'Цена газа в стр.100 Раздела 3 = '") +
		НСтр("ru = 'стр.130 х стр.110 + стр.140 х (1 - стр.110) Раздела 3';
			|en = 'стр.130 х стр.110 + стр.140 х (1 - стр.110) Раздела 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 х %3 + %4 х (1 - %3))';
													|en = '%1 = %5 (%2 х %3 + %4 х (1 - %3))'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная цена газа';
													|en = 'Ошибочная цена газа'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните цену газа в стр.100 Раздела 3';
													|en = 'Уточните цену газа в стр.100 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С100", "П000300010003");
	ИменаПоказателей.Вставить("Р03С110", "П000300011003");
	ИменаПоказателей.Вставить("Р03С130", "П000300013003");
	ИменаПоказателей.Вставить("Р03С140", "П000300014003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р03С130.Значение * Показатели.Р03С110.Значение + Показатели.Р03С140.Значение *
			(1 - Показатели.Р03С110.Значение), 4);
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р03С100.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С100.Значение, Показатели.Р03С130.Значение, Показатели.Р03С110.Значение, Показатели.Р03С140.Значение, 
			РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.18';
													|en = '3.18'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ккм в стр.180 Раздела 3 = ';
													|en = 'Значение коэффициента Ккм в стр.180 Раздела 3 = '") +
		НСтр("ru = '6,5 / стр.170 Раздела 3, если стр.010 Раздела 3 = 03200';
			|en = '6,5 / стр.170 Раздела 3, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %3 (6,5 / %2), если %4 = 03200';
													|en = '%1 = %3 (6,5 / %2), если %4 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ккм';
													|en = 'Ошибочное значение коэффициента Ккм'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Ккм в стр.180 Раздела 3';
													|en = 'Уточните значение коэффициента Ккм в стр.180 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С180", "П000300018003");
	ИменаПоказателей.Вставить("Р03С170", "П000300017003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = ?(Показатели.Р03С170.Значение = 0, 0, Окр(6.5 / Показатели.Р03С170.Значение, 15));
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р03С180.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С180.Значение, Показатели.Р03С170.Значение, РасчетнаяСумма, Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.19';
													|en = '3.19'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кгп в стр.170 Раздела 3 должно ';
													|en = 'Значение коэффициента Кгп в стр.170 Раздела 3 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кгп';
													|en = 'Ошибочное значение коэффициента Кгп'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Кгп в стр.170 Раздела 3 из списка значений';
			|en = 'Выберите значение коэффициента Кгп в стр.170 Раздела 3 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С170", "П000300017003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С170, СтраницаРаздела);
		Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р03С170.ИмяПоказателя);
		
		Если НЕ Список = Неопределено Тогда
			СоответствиеНайдено = НЕ Список.Получить(Показатели.Р03С170.Значение) = Неопределено;
		КонецЕсли;
		
		НастройкиКС.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р03С170.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.20';
													|en = '3.20'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента добытого газового конденсата в стр.187 ';
													|en = 'Значение коэффициента добытого газового конденсата в стр.187 '") +
		НСтр("ru = 'Раздела 3 = 0,75, если стр.010 Раздела 3 = 03200';
			|en = 'Раздела 3 = 0,75, если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,75, если %2 = 03200';
													|en = '%1 = 0,75, если %2 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента добытого газового конденсата';
													|en = 'Ошибочное значение коэффициента добытого газового конденсата'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента добытого газового конденсата в стр.187 Раздела 3 = 0,75';
			|en = 'Укажите значение коэффициента добытого газового конденсата в стр.187 Раздела 3 = 0,75'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 3';
													|en = 'Страница %1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С187", "П000300018703");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
				
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р03С187.Значение = 0.75;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р03С187.Значение, Показатели.Р03С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_23()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.23';
													|en = '3.23'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.210 подр.3.1 Раздела 3 = сумме ';
													|en = 'Сумма исчисленного налога в стр.210 подр.3.1 Раздела 3 = сумме '") +
		НСтр("ru = 'всех стр.310 подр.3.1.1 Раздела 3';
			|en = 'всех стр.310 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму исчисленного налога в стр.210 подр.3.1 Раздела 3';
													|en = 'Уточните сумму исчисленного налога в стр.210 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1 Раздела 3';
													|en = 'Страница %1 подр.3.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С210", "П000300021003");
	ИменаПоказателей.Вставить("Р32С310", "П000300031003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			
			ЗарегистрироватьПроверку();

			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С210, СтраницаПодраздела1);
			Показатели.Р32С310.Итог = 0;
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С310, СтраницаПодраздела2);
			КонецЦикла;
			
			НастройкиКС.ЭтоОшибка = НЕ Показатели.Р31С210.Значение = Показатели.Р32С310.Итог;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р31С210.Значение, Показатели.Р32С310.Итог);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела1.НомерСтраницы);
			ДополнитьТаблицуРезультата();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_24()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.24';
													|en = '3.24'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '2,75 - 2,5 х стр.230 подр.3.1 Раздела 3, если 0,7 < стр.230 подр.3.1 Раздела 3 <= 0,9';
			|en = '2,75 - 2,5 х стр.230 подр.3.1 Раздела 3, если 0,7 < стр.230 подр.3.1 Раздела 3 <= 0,9'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %3 (2,75 - 2,5 х %2), если 0,7 < %2 <= 0,9';
													|en = '%1 = %3 (2,75 - 2,5 х %2), если 0,7 < %2 <= 0,9'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Квг';
													|en = 'Ошибочное значение коэффициента Квг'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3';
													|en = 'Уточните значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_26_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_25()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.25';
													|en = '3.25'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '0,5, если стр.230 подр.3.1 Раздела 3 > 0,9';
			|en = '0,5, если стр.230 подр.3.1 Раздела 3 > 0,9'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,5, если %2 > 0,9';
													|en = '%1 = 0,5, если %2 > 0,9'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Квг';
													|en = 'Ошибочное значение коэффициента Квг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = 0,5';
			|en = 'Укажите значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = 0,5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_26_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_26()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.26';
													|en = '3.26'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '1, если стр.230 подр.3.1 Раздела 3 <= 0,7';
			|en = '1, если стр.230 подр.3.1 Раздела 3 <= 0,7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1, если %2 <= 0,7';
													|en = '%1 = 1, если %2 <= 0,7'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Квг';
													|en = 'Ошибочное значение коэффициента Квг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = 1';
			|en = 'Укажите значение коэффициента Квг в стр.290 подр.3.1.1 Раздела 3 = 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_26_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_26_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С290", "П000300029003");
	ИменаПоказателей.Вставить("Р31С230", "П000300023003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			
			ЗаполнитьПоказатель(Показатели.Р31С230, СтраницаПодраздела1);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С290, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р31С230);
				РасчетнаяСумма = 0;
				
				Если НастройкиКС.НомерКС = "3.24" Тогда
					РасчетнаяСумма = Окр(2.75 - 2.5 * Показатели.Р31С230.Значение, 4);
					НастройкиКС.ЭтоОшибка = Показатели.Р31С230.Значение > 0.7 И Показатели.Р31С230.Значение <= 0.9
						И НЕ Показатели.Р32С290.Значение = РасчетнаяСумма;
				ИначеЕсли НастройкиКС.НомерКС = "3.25" Тогда
					НастройкиКС.ЭтоОшибка = Показатели.Р31С230.Значение > 0.9 И НЕ Показатели.Р32С290.Значение = 0.5;
				Иначе
					НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р31С230.Значение) И Показатели.Р31С230.Значение <= 0.7 
						И НЕ Показатели.Р32С290.Значение = 1;
				КонецЕсли;
				
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С290.Значение, Показатели.Р31С230.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_27()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.27';
													|en = '3.27'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '1, если стр.270 подр.3.1.1 Раздела 3 <= 1700';
			|en = '1, если стр.270 подр.3.1.1 Раздела 3 <= 1700'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1, если %2 <= 1700';
													|en = '%1 = 1, если %2 <= 1700'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кгз';
													|en = 'Ошибочное значение коэффициента Кгз'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 1';
			|en = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_30_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_28()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.28';
													|en = '3.28'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '0,64, если 1700 < стр.270 подр.3.1.1 Раздела 3 <= 3300';
			|en = '0,64, если 1700 < стр.270 подр.3.1.1 Раздела 3 <= 3300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,64, если 1700 < %2 <= 3300';
													|en = '%1 = 0,64, если 1700 < %2 <= 3300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кгз';
													|en = 'Ошибочное значение коэффициента Кгз'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 0,64';
			|en = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 0,64'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_30_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_29()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.29';
													|en = '3.29'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '0,5, если стр.270 подр.3.1.1 Раздела 3 > 3300 и стр.010 Раздела 3 = 03200';
			|en = '0,5, если стр.270 подр.3.1.1 Раздела 3 > 3300 и стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,5, если %2 > 3300 и %3 = 03200';
													|en = '%1 = 0,5, если %2 > 3300 и %3 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кгз';
													|en = 'Ошибочное значение коэффициента Кгз'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 0,5';
			|en = 'Укажите значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = 0,5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_30_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_30()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.30';
													|en = '3.30'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '0,5 / стр.170 Раздела 3, если стр.270 подр.3.1.1 Раздела 3 > 3300 и стр.010 Раздела 3 = 03300';
			|en = '0,5 / стр.170 Раздела 3, если стр.270 подр.3.1.1 Раздела 3 > 3300 и стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (0,5 / %4), если %2 > 3300 и %3 = 03300';
													|en = '%1 = %5 (0,5 / %4), если %2 > 3300 и %3 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кгз';
													|en = 'Ошибочное значение коэффициента Кгз'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3';
													|en = 'Уточните значение коэффициента Кгз в стр.290 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_30_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_30_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С290", "П000300029005");
	ИменаПоказателей.Вставить("Р32С270", "П000300027003");
	ИменаПоказателей.Вставить("Р03С170", "П000300017003");
	ИменаПоказателей.Вставить("Р03С010", "П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р03С170, СтраницаРаздела);
		
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С290, СтраницаПодраздела2);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С270, СтраницаПодраздела2);
				РасчетнаяСумма = 0;
				
				Если НастройкиКС.НомерКС = "3.27" Тогда
					НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р32С270.Значение) И Показатели.Р32С270.Значение <= 1700 
						И НЕ Показатели.Р32С290.Значение = 1;
				ИначеЕсли НастройкиКС.НомерКС = "3.28" Тогда
					НастройкиКС.ЭтоОшибка = Показатели.Р32С270.Значение > 1700 И Показатели.Р32С270.Значение <= 3300
						И НЕ Показатели.Р32С290.Значение = 0.64;
				ИначеЕсли НастройкиКС.НомерКС = "3.29" Тогда
					РасшифроватьПоказатель(Показатели.Р03С010);	
					НастройкиКС.ЭтоОшибка = Показатели.Р32С270.Значение > 3300 И Показатели.Р03С010.Значение = "03200" 
						И НЕ Показатели.Р32С290.Значение = 0.5;
				Иначе
					РасшифроватьПоказатель(Показатели.Р03С170);	
					РасшифроватьПоказатель(Показатели.Р03С010);	
					РасчетнаяСумма = ?(Показатели.Р03С170.Значение = 0, 0, Окр(0.5 / Показатели.Р03С170.Значение, 4));
					НастройкиКС.ЭтоОшибка = Показатели.Р32С270.Значение > 3300 И Показатели.Р03С010.Значение = "03300" 
						И НЕ Показатели.Р32С290.Значение = РасчетнаяСумма;
				КонецЕсли;
				
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С290.Значение,  Показатели.Р32С270.Значение, Показатели.Р03С010.ЗначениеСтр, 
					Показатели.Р03С170.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_31()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.31';
													|en = '3.31'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кс в стр.300 подр.3.1.1 Раздела 3 = ';
													|en = 'Значение коэффициента Кс в стр.300 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = 'минимальное значение из коэффициентов Квг, Кр, Кгз, Кас, Корз в стр.290 подр.3.1.1 Раздела 3';
			|en = 'минимальное значение из коэффициентов Квг, Кр, Кгз, Кас, Корз в стр.290 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %7 (min (%2, %3, %4, %5, %6))';
													|en = '%1 = %7 (min (%2, %3, %4, %5, %6))'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кс';
													|en = 'Ошибочное значение коэффициента Кс'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кс в стр.300 подр.3.1.1 Раздела 3';
													|en = 'Уточните значение коэффициента Кс в стр.300 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С300",	"П000300030003");
	ИменаПоказателей.Вставить("Р32П2901",	"П000300029003");
	ИменаПоказателей.Вставить("Р32П2902",	"П000300029004");
	ИменаПоказателей.Вставить("Р32П2903",	"П000300029005");
	ИменаПоказателей.Вставить("Р32П2904",	"П000300029006");
	ИменаПоказателей.Вставить("Р32П2905",	"П000300029007");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела2);
				
				РасчетноеЗначение = Мин(Показатели.Р32П2901.Значение, Показатели.Р32П2902.Значение, Показатели.Р32П2903.Значение, 
					Показатели.Р32П2904.Значение, Показатели.Р32П2905.Значение);
				НастройкиКС.ЭтоОшибка = НЕ Показатели.Р32С300.Значение = РасчетноеЗначение;
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С300.Значение, Показатели.Р32П2901.Значение, Показатели.Р32П2902.Значение, 
					Показатели.Р32П2903.Значение, Показатели.Р32П2904.Значение, Показатели.Р32П2905.Значение, РасчетноеЗначение);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_32()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.32';
													|en = '3.32'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.310 подр.3.1.1 Раздела 3 = ';
													|en = 'Сумма исчисленного налога в стр.310 подр.3.1.1 Раздела 3 = '") +
		НСтр("ru = '(сумма гр.2 подр.3.1.1 Раздела 3, для которых гр.1 подр.3.1.1 Раздела 3 = 4000) х ';
			|en = '(сумма гр.2 подр.3.1.1 Раздела 3, для которых гр.1 подр.3.1.1 Раздела 3 = 4000) х '") +
		НСтр("ru = 'стр.285 подр.3.1.1 Раздела 3';
			|en = 'стр.285 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму исчисленного налога в стр.310 подр.3.1.1 Раздела 3';
													|en = 'Уточните сумму исчисленного налога в стр.310 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С310",	"П000300031003");
	ИменаПоказателей.Вставить("Р32Г001",	"П000311000101_");
	ИменаПоказателей.Вставить("Р32Г002",	"П000311000102_");
	ИменаПоказателей.Вставить("Р32С285",	"П000300028503");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С310, СтраницаПодраздела2);
				Показатели.Р32Г002.Итог = 0;
				КодНайден = Ложь;
				
				Для Счетчик = 1 По СтраницаПодраздела2.КолвоСтрокП000311 Цикл
					ЗаполнитьПоказатель(Показатели.Р32Г001, СтраницаПодраздела2, Счетчик);
					Если Показатели.Р32Г001.Значение = "4000" Тогда
						ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32Г002, СтраницаПодраздела2, Счетчик);
						КодНайден = КодНайден ИЛИ Истина;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С285, СтраницаПодраздела2);
				
				РасчетнаяСумма = Окр(Показатели.Р32Г002.Итог * Показатели.Р32С285.Значение);
				НастройкиКС.ЭтоОшибка = КодНайден И НЕ Показатели.Р32С310.Значение = РасчетнаяСумма;
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
					Показатели.Р32С310.Значение, Показатели.Р32Г002.Итог, Показатели.Р32С285.Значение, РасчетнаяСумма);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_33()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.33';
													|en = '3.33'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 = 42 х стр.240 ';
													|en = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 = 42 х стр.240 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 х стр.300 подр.3.1.1 Раздела 3 х стр.180 Раздела 3 + стр.185 Раздела 3 х 0,75, ';
			|en = 'подр.3.1 Раздела 3 х стр.300 подр.3.1.1 Раздела 3 х стр.180 Раздела 3 + стр.185 Раздела 3 х 0,75, '") +
		НСтр("ru = 'если стр.010 Раздела 3 = 03200';
			|en = 'если стр.010 Раздела 3 = 03200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %6 (42 х %2 х %3 х %4 + %5 х 0,75), если %7 = 03200';
													|en = '%1 = %6 (42 х %2 х %3 х %4 + %5 х 0,75), если %7 = 03200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная ставка налога';
													|en = 'Ошибочная ставка налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3';
													|en = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("ДляДокументации"	, НСтр("ru = 'Отключено с 2024';
													|en = 'Отключено с 2024'")); 
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКС.ГодОтчета > 2023 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С285",	"П000300028503");
	ИменаПоказателей.Вставить("Р31С240", 	"П000300024003");
	ИменаПоказателей.Вставить("Р32С300",	"П000300030003");
	ИменаПоказателей.Вставить("Р03С180", 	"П000300018003");
	ИменаПоказателей.Вставить("Р03С185", 	"П000300018503");
	ИменаПоказателей.Вставить("Р03С010", 	"П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р03С180, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р03С185, СтраницаРаздела);
		
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С240, СтраницаПодраздела1);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С285, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р31С240);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С300, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р03С180);
				РасшифроватьПоказатель(Показатели.Р03С185);
				РасшифроватьПоказатель(Показатели.Р03С010);
				
				РасчетнаяСумма = Окр(42 * Показатели.Р31С240.Значение * Показатели.Р32С300.Значение * 
					Показатели.Р03С180.Значение + Показатели.Р03С185.Значение * 0.75);	
				НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03200" И НЕ Показатели.Р32С285.Значение = РасчетнаяСумма;
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С285.Значение, Показатели.Р31С240.Значение, Показатели.Р32С300.Значение, 
					Показатели.Р03С180.Значение, Показатели.Р03С185.Значение, РасчетнаяСумма, Показатели.Р03С010.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_34()
	
	РасчетнаяВеличина = ?(ДанныеКС.ДатаОкончания > '20240630', 285, 134);
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.34';
													|en = '3.34'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 = 35 х стр.240 ';
													|en = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 = 35 х стр.240 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 х стр.300 подр.3.1.1 Раздела 3 + стр.090 Раздела 3 + ';
			|en = 'подр.3.1 Раздела 3 х стр.300 подр.3.1.1 Раздела 3 + стр.090 Раздела 3 + '") + РасчетнаяВеличина + 
		НСтр("ru = ', если стр.010 Раздела 3 = 03300';
			|en = ', если стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %6 (35 х %2 х %3 + %4 + %5), если %7 = 03300';
													|en = '%1 = %6 (35 х %2 х %3 + %4 + %5), если %7 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная ставка налога';
													|en = 'Ошибочная ставка налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3';
													|en = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С285",	"П000300028503");
	ИменаПоказателей.Вставить("Р31С240", 	"П000300024003");
	ИменаПоказателей.Вставить("Р32С300",	"П000300030003");
	ИменаПоказателей.Вставить("Р03С090", 	"П000300009003");
	ИменаПоказателей.Вставить("Р03С010", 	"П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		ЗаполнитьПоказатель(Показатели.Р03С090, СтраницаРаздела);
		
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С240, СтраницаПодраздела1);
			
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С285, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р31С240);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С300, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р03С090);
				РасшифроватьПоказатель(Показатели.Р03С010);
				
				РасчетнаяСумма = Окр(35 * Показатели.Р31С240.Значение * Показатели.Р32С300.Значение 
					+ Показатели.Р03С090.Значение + РасчетнаяВеличина);	
				НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03300" И НЕ Показатели.Р32С285.Значение = РасчетнаяСумма;
				НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С285.Значение, Показатели.Р31С240.Значение, Показатели.Р32С300.Значение, 
					Показатели.Р03С090.Значение, РасчетнаяВеличина, РасчетнаяСумма, Показатели.Р03С010.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_35()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.35';
													|en = '3.35'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 >= ';
													|en = 'Ставка налога в стр.285 подр.3.1.1 Раздела 3 >= '") +
		НСтр("ru = '0, если стр.010 Раздела 3 = 03300';
			|en = '0, если стр.010 Раздела 3 = 03300'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 >= 0, если %2 = 03300';
													|en = '%1 >= 0, если %2 = 03300'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная ставка налога';
													|en = 'Ошибочная ставка налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3';
													|en = 'Уточните ставку налога в стр.285 подр.3.1.1 Раздела 3'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.4 НК РФ';
													|en = 'ст.342.4 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.3.1.1 Раздела 3';
													|en = 'Страница %1 подр.3.1.1 Раздела 3'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С285",	"П000300028503");
	ИменаПоказателей.Вставить("Р03С010", 	"П000300001003");
	
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		Для каждого СтраницаПодраздела1 Из СтраницаРаздела.Раздел31 Цикл
			Для каждого СтраницаПодраздела2 Из СтраницаПодраздела1.Раздел312 Цикл
				
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С285, СтраницаПодраздела2);
				РасшифроватьПоказатель(Показатели.Р03С010);
				
				НастройкиКС.ЭтоОшибка = Показатели.Р03С010.Значение = "03300" И Показатели.Р32С285.Значение < 0;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р32С285.Значение, Показатели.Р03С010.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела2.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_4

&НаСервере
Процедура ПроверкаКС_4_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.1';
													|en = '4.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 4 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код вида полезного ископаемого';
													|en = 'Ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в стр.010 Раздела 4 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в стр.010 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.2';
													|en = '4.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 4 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.020 Раздела 4 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.020 Раздела 4';
													|en = 'Уточните значение КБК в стр.020 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400002003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел4");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.3';
													|en = '4.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 4 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 4 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 4 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.4';
													|en = '4.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 4 должен ';
													|en = 'Код единицы измерения в стр.030 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код единицы измерения';
													|en = 'Ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код единицы измерения в стр.030 Раздела 4 из списка значений';
			|en = 'Выберите код единицы измерения в стр.030 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С030");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400003003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.5';
													|en = '4.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.040 Раздела 4 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.040 Раздела 4 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.040 Раздела 4';
													|en = 'Уточните значение ОКТМО в стр.040 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400004003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел4");
	
	ПроверкаКС_4_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(НастройкиКС.Показатель1, НастройкиКС.ИмяПоказателя);
	ИменаПоказателей.Вставить("Р01С020", "П000100000102_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС[НастройкиКС.РазделОКТМО] Цикл
	
		ЗарегистрироватьПроверку();
		СоответствиеНайдено = Ложь;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели[НастройкиКС.Показатель1], СтраницаРаздела);
		
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП000100 Цикл
			ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик);
		
			Если Показатели[НастройкиКС.Показатель1].Значение = Показатели.Р01С020.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р01С020);
				СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели[НастройкиКС.Показатель1].Значение) И НЕ СоответствиеНайдено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели[НастройкиКС.Показатель1].ЗначениеСтр, ?(СоответствиеНайдено, 
			Показатели[НастройкиКС.Показатель1].ЗначениеСтр, "(...)"));
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.6';
													|en = '4.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налоговой базы в стр.130 Раздела 4 = (сумма всех значений по ';
													|en = 'Сумма налоговой базы в стр.130 Раздела 4 = (сумма всех значений по '") +
		НСтр("ru = 'гр.2 Раздела 4, для которых гр.1 Раздела 4 = 7000 - 7006) х стр.090 Раздела 4, если стр.080 Раздела 4 ';
			|en = 'гр.2 Раздела 4, для которых гр.1 Раздела 4 = 7000 - 7006) х стр.090 Раздела 4, если стр.080 Раздела 4 '") +
		НСтр("ru = '= 0 или стр.080 Раздела 4 < стр.090 Раздела 4, и если стр.010 Раздела 4 <> 03401';
			|en = '= 0 или стр.080 Раздела 4 < стр.090 Раздела 4, и если стр.010 Раздела 4 <> 03401'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налоговой базы';
													|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налоговой базы в стр.130 Раздела 4';
													|en = 'Уточните сумму налоговой базы в стр.130 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340.1 НК РФ';
													|en = 'ст.340.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С130", "П000400013003");
	ИменаПоказателей.Вставить("Р04Г001", "П000400000101_");
	ИменаПоказателей.Вставить("Р04Г002", "П000400000102_");
	ИменаПоказателей.Вставить("Р04С090", "П000400009003");
	ИменаПоказателей.Вставить("Р04С080", "П000400008003");
	ИменаПоказателей.Вставить("Р04С010", "П000400001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	МассивЗначений = СтрРазделить("7000,7001,7002,7003,7004,7005,7006", ",");
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р04С130, СтраницаРаздела);
		Показатели.Р04Г002.Итог = 0;
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП000400 Цикл
			ЗаполнитьПоказатель(Показатели.Р04Г001, СтраницаРаздела, Счетчик);
			Если НЕ МассивЗначений.Найти(Показатели.Р04Г001.Значение) = Неопределено Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р04Г002, СтраницаРаздела, Счетчик);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р04С090, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р04С080, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р04С010, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р04Г002.Итог * Показатели.Р04С090.Значение, 2);
		НастройкиКС.ЭтоОшибка = (НЕ ЗначениеЗаполнено(Показатели.Р04С080.Значение) 
			ИЛИ Показатели.Р04С080.Значение < Показатели.Р04С090.Значение) И НЕ Показатели.Р04С010.Значение = "03401"
			И НЕ Показатели.Р04С130.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р04С130.Значение, Показатели.Р04Г002.Итог, Показатели.Р04С090.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.7';
													|en = '4.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налоговой базы в стр.130 Раздела 4 = 0, если стр.010 ';
													|en = 'Сумма налоговой базы в стр.130 Раздела 4 = 0, если стр.010 '") +
		НСтр("ru = 'Раздела 4 = 03401';
			|en = 'Раздела 4 = 03401'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 03401';
													|en = '%1 = 0, если %2 = 03401'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налоговой базы';
													|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налоговой базы в стр.130 Раздела 4';
													|en = 'Уточните сумму налоговой базы в стр.130 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340.1 НК РФ';
													|en = 'ст.340.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_4_08_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.8';
													|en = '4.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма исчисленного налога в стр.140 Раздела 4 = 0, если стр.010 ';
													|en = 'Сумма исчисленного налога в стр.140 Раздела 4 = 0, если стр.010 '") +
		НСтр("ru = 'Раздела 4 = 03401';
			|en = 'Раздела 4 = 03401'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 03401';
													|en = '%1 = 0, если %2 = 03401'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма исчисленного налога';
													|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму исчисленного налога в стр.140 Раздела 4';
													|en = 'Уточните сумму исчисленного налога в стр.140 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340.1 НК РФ';
													|en = 'ст.340.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_4_08_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_08_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С130", "П000400013003");
	ИменаПоказателей.Вставить("Р04С140", "П000400014003");
	ИменаПоказателей.Вставить("Р04С010", "П000400001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Показатели.Р04С130.Расшифровывать = НастройкиКС.НомерКС = "4.7";
	Показатели.Р04С140.Расшифровывать = НастройкиКС.НомерКС = "4.8";
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р04С010.Значение = "03401" 
			И ?(НастройкиКС.НомерКС = "4.7", НЕ Показатели.Р04С130.Значение = 0, НЕ Показатели.Р04С140.Значение = 0);
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			?(НастройкиКС.НомерКС = "4.7", Показатели.Р04С130.Значение, Показатели.Р04С140.Значение), 
			Показатели.Р04С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.11';
													|en = '4.11'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.155 Раздела 4 должен ';
													|en = 'Признак налогового вычета в стр.155 Раздела 4 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный признак налогового вычета';
													|en = 'Ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.155 Раздела 4 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.155 Раздела 4 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р04С155");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000400015503");
	НастройкиКС.Вставить("Раздел_"			, "Раздел4");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.12';
													|en = '4.12'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.160 Раздела 4 = 0, если стр.155 ';
													|en = 'Сумма налогового вычета в стр.160 Раздела 4 = 0, если стр.155 '") +
		НСтр("ru = 'Раздела 4 = 00';
			|en = 'Раздела 4 = 00'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 00';
													|en = '%1 = 0, если %2 = 00'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налогового вычета в стр.160 Раздела 4 = 0';
													|en = 'Укажите сумму налогового вычета в стр.160 Раздела 4 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С160", "П000400016003");
	ИменаПоказателей.Вставить("Р04С155", "П000400015503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р04С155.Значение = "00" И НЕ Показатели.Р04С160.Значение = 0;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р04С160.Значение, Показатели.Р04С155.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.13';
													|en = '4.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.170 Раздела 4 = стр.140 Раздела 4 - ';
													|en = 'Сумма налога в стр.170 Раздела 4 = стр.140 Раздела 4 - '") +
		НСтр("ru = 'стр.160 Раздела 4, если стр.150 Раздела 4 = 0';
			|en = 'стр.160 Раздела 4, если стр.150 Раздела 4 = 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3), если %5 = 0';
													|en = '%1 = %4 (%2 - %3), если %5 = 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.170 Раздела 4';
													|en = 'Уточните сумму налога в стр.170 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С170", "П000400017003");
	ИменаПоказателей.Вставить("Р04С140", "П000400014003");
	ИменаПоказателей.Вставить("Р04С160", "П000400016003");
	ИменаПоказателей.Вставить("Р04С150", "П000400015003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р04С140.Значение - Показатели.Р04С160.Значение;
		НастройкиКС.ЭтоОшибка = Показатели.Р04С150.Значение = 0 И НЕ Показатели.Р04С170.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
			Показатели.Р04С170.Значение, Показатели.Р04С140.Значение, Показатели.Р04С160.Значение, РасчетнаяСумма, 
			Показатели.Р04С150.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 4';
														|en = 'Раздел 4'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.14';
													|en = '4.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.170 Раздела 4 = стр.150 Раздела 4 - ';
													|en = 'Сумма налога в стр.170 Раздела 4 = стр.150 Раздела 4 - '") +
		НСтр("ru = 'стр.160 Раздела 4, если стр.150 Раздела 4 не равна 0';
			|en = 'стр.160 Раздела 4, если стр.150 Раздела 4 не равна 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3), если %2 ≠ 0';
													|en = '%1 = %4 (%2 - %3), если %2 ≠ 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.170 Раздела 4';
													|en = 'Уточните сумму налога в стр.170 Раздела 4'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 4';
													|en = 'Страница %1 Раздела 4'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р04С170", "П000400017003");
	ИменаПоказателей.Вставить("Р04С150", "П000400015003");
	ИменаПоказателей.Вставить("Р04С160", "П000400016003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел4 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р04С150.Значение - Показатели.Р04С160.Значение;
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р04С150.Значение = 0 И НЕ Показатели.Р04С170.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р04С170.Значение, Показатели.Р04С150.Значение, Показатели.Р04С160.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_5

&НаСервере
Процедура ПроверкаКС_5_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.1';
													|en = '5.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в стр.010 Раздела 5 должен ';
													|en = 'Код вида полезного ископаемого в стр.010 Раздела 5 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код вида полезного ископаемого';
													|en = 'Ошибочный код вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите код вида полезного ископаемого в стр.010 Раздела 5 из списка значений';
			|en = 'Выберите код вида полезного ископаемого в стр.010 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000500001003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.2';
													|en = '5.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 5 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.020 Раздела 5 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.020 Раздела 5';
													|en = 'Уточните значение КБК в стр.020 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000500002003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел5");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.3';
													|en = '5.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 5 = 00000000000000000000, если ';
													|en = 'Значение КБК в стр.020 Раздела 5 = 00000000000000000000, если '") +
		НСтр("ru = 'стр.010 Раздела 5 = 03400';
			|en = 'стр.010 Раздела 5 = 03400'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 00000000000000000000, если %2 = 03400';
													|en = '%1 = 00000000000000000000, если %2 = 03400'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение КБК в стр.020 Раздела 5 = 00000000000000000000';
													|en = 'Укажите значение КБК в стр.020 Раздела 5 = 00000000000000000000'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р05С020", "П000500002003");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р05С010.Значение = "03400" 
			И НЕ Показатели.Р05С020.Значение = "00000000000000000000";
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
			Показатели.Р05С020.ЗначениеСтр, Показатели.Р05С010.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.4';
													|en = '5.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 5 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 5 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 5 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 5';
													|en = 'Страница %1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р05С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000500002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел5");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.5';
													|en = '5.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Налоговая ставка в стр.045 подр.5.1 Раздела 5 может иметь следующие ';
													|en = 'Налоговая ставка в стр.045 подр.5.1 Раздела 5 может иметь следующие '") +
		НСтр("ru = 'значения: 0, 1, 4, 4,8, 5,5, 6, 6,5, 7,5, 8, 82, 132, 207, 270';
			|en = 'значения: 0, 1, 4, 4,8, 5,5, 6, 6,5, 7,5, 8, 82, 132, 207, 270'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 не в списке %2';
													|en = '%1 не в списке %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение налоговой ставки';
													|en = 'Ошибочное значение налоговой ставки'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение налоговой ставки в стр.045 подр.5.1 Раздела 5';
													|en = 'Уточните значение налоговой ставки в стр.045 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342 НК РФ';
													|en = 'ст.342 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("0,1,4,4.8,5.5,6,6.5,7.5,8,82,132,207,270", ",");
	МаксИндекс = МассивЗначений.ВГраница();
	Для Счетчик = 0 По МаксИндекс Цикл
		МассивЗначений[Счетчик] = Число(МассивЗначений[Счетчик]);
	КонецЦикла; 
	
	НастройкиКС.Вставить("МассивЗначений", МассивЗначений);
	ПроверкаКС_5_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С045", "П000500004503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = НастройкиКС.МассивЗначений.Найти(Показатели.Р51С045.Значение) = Неопределено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С045.Значение, СтрСоединить(НастройкиКС.МассивЗначений, "; "));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.6';
													|en = '5.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 должно ';
													|en = 'Значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение рентного коэффициента';
													|en = 'Ошибочное значение рентного коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите значение рентного коэффициента в стр.050 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.8 НК РФ';
													|en = 'ст.342.8 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С050", "П000500005003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			СоответствиеНайдено = Ложь;
			
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р51С050.ИмяПоказателя);
			
			Если НЕ Список = Неопределено Тогда
				СоответствиеНайдено = НЕ Список.Получить(Показатели.Р51С050.Значение) = Неопределено;
			КонецЕсли;
			
			НастройкиКС.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С050.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.7';
													|en = '5.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5 должно быть ';
													|en = 'Значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5 должно быть '") +
		НСтр("ru = 'заполнено, если признак налогоплательщика в стр.051 подр.5.1 Раздела 5 = 1 или 2';
			|en = 'заполнено, если признак налогоплательщика в стр.051 подр.5.1 Раздела 5 = 1 или 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Значение %1 заполнено, если %2 = 1 или 2';
													|en = 'Значение %1 заполнено, если %2 = 1 или 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение кода субъекта РФ';
													|en = 'Ошибочное значение кода субъекта РФ'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Заполните значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5';
													|en = 'Заполните значение кода субъекта РФ в стр.052 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.3 НК РФ';
													|en = 'ст.342.3 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("1,2", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С052", "П000500005203");
	ИменаПоказателей.Вставить("Р51С051", "П000500005103");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = НЕ МассивЗначений.Найти(Показатели.Р51С051.Значение) = Неопределено 
				И НЕ ЗначениеЗаполнено(Показатели.Р51С052.Значение);
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С052.ЗначениеСтр, Показатели.Р51С051.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.8';
													|en = '5.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.040 подр.5.1 Раздела 5 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.040 подр.5.1 Раздела 5 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.040 подр.5.1 Раздела 5';
													|en = 'Уточните значение ОКТМО в стр.040 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р51С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000500004003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел5");
	НастройкиКС.Вставить("ПодразделОКТМО"	, "Раздел51");
	
	ПроверкаКС_2_03_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.9';
													|en = '5.9'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = ';
													|en = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = '") +
		НСтр("ru = '0.1, 0.25, 1, если гр.1 стр.055 подр.5.1 Раздела 5 = 05';
			|en = '0.1, 0.25, 1, если гр.1 стр.055 подр.5.1 Раздела 5 = 05'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,1, 0,25, 1, если %2 = 05';
													|en = '%1 = 0,1, 0,25, 1, если %2 = 05'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента';
													|en = 'Ошибочное значение коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5';
													|en = 'Уточните значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.1 НК РФ';
													|en = 'ст.342.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1, страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(1);
	МассивЗначений.Добавить(0.1);
	МассивЗначений.Добавить(0.25);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51П055", "П000500005501_");
	ИменаПоказателей.Вставить("Р51П056", "П000500005502_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000550 Цикл
	
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела, Счетчик);
				
				НастройкиКС.ЭтоОшибка = Показатели.Р51П055.Значение = "05"
					И МассивЗначений.Найти(Показатели.Р51П056.Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р51П056.Значение, Показатели.Р51П055.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
			
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.10';
													|en = '5.10'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 = 07, ';
													|en = 'Признак коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 = 07, '") +
		НСтр("ru = 'если стр.010 Раздела 5 = 04303, 04306, 04307, 04309, 04311, 04313, 04315, 04318 - 04332, ';
			|en = 'если стр.010 Раздела 5 = 04303, 04306, 04307, 04309, 04311, 04313, 04315, 04318 - 04332, '") +
		НСтр("ru = '09008, 09009, 09010';
			|en = '09008, 09009, 09010'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 07';
													|en = '%1 = 07'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение признака коэффициента';
													|en = 'Ошибочное значение признака коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение признака коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 = 07';
			|en = 'Укажите значение признака коэффициента в гр.1 стр.055 подр.5.1 Раздела 5 = 07'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.7 НК РФ';
													|en = 'ст.342.7 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1, страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("04303,04306,04307,04309,04311,04313,04315,04318,04319,04320,04321,04322,04323,04324,04325,04326,04327,04328,04329,04330,04331,04332,09008,09009,09010", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51П055", "П000500005501_");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		УсловиеВыполнено = НЕ МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000550 Цикл
	
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51П055, СтраницаПодраздела, Счетчик);
				РасшифроватьПоказатель(Показатели.Р05С010);
				
				НастройкиКС.ЭтоОшибка = УсловиеВыполнено
					И НЕ Показатели.Р51П055.Значение = "07";
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р51П055.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.11';
													|en = '5.11'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0,1 или 1, ';
													|en = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0,1 или 1, '") +
		НСтр("ru = 'если гр.1 стр.055 подр.5.1 Раздела 5 = 07 и стр.010 Раздела 5 = 04303, 04306, 04307, 04309, 04311, ';
			|en = 'если гр.1 стр.055 подр.5.1 Раздела 5 = 07 и стр.010 Раздела 5 = 04303, 04306, 04307, 04309, 04311, '") +
		НСтр("ru = '04313, 04315, 04318 - 04332, 09008, 09009, 09010';
			|en = '04313, 04315, 04318 - 04332, 09008, 09009, 09010'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,1, 1';
													|en = '%1 = 0,1, 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента';
													|en = 'Ошибочное значение коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0,1, 1';
			|en = 'Укажите значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0,1, 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.7 НК РФ';
													|en = 'ст.342.7 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1, страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_11_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_11_код()
	
	МассивЗначений = СтрРазделить("04303,04306,04307,04309,04311,04313,04315,04318,04319,04320,04321,04322,04323,04324,04325,04326,04327,04328,04329,04330,04331,04332,09008,09009,09010", ",");
	
	МассивКоэффициентов = Новый Массив;
	МассивКоэффициентов.Добавить(1);
	МассивКоэффициентов.Добавить(0.1);
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51П055", "П000500005501_");
	ИменаПоказателей.Вставить("Р51П056", "П000500005502_");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		КодНайден = НЕ МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000550 Цикл
	
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51П056, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51П055, СтраницаПодраздела, Счетчик);
				РасшифроватьПоказатель(Показатели.Р05С010);
				
				Если НастройкиКС.НомерКС = "5.11" Тогда
				
					НастройкиКС.ЭтоОшибка = КодНайден И Показатели.Р51П055.Значение = "07"
						И МассивКоэффициентов.Найти(Показатели.Р51П056.Значение) = Неопределено;
			
				Иначе
				
					НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р05С010.Значение) И НЕ КодНайден 
						И Показатели.Р51П055.Значение = "07" И НЕ Показатели.Р51П056.Значение = 1;
			
				КонецЕсли;
				
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р51П056.Значение);
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.12';
													|en = '5.12'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 1, ';
													|en = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 1, '") +
		НСтр("ru = 'если гр.1 стр.055 подр.5.1 Раздела 5 = 07 и стр.010 Раздела 5 <> 04303, 04306, 04307, 04309, 04311, ';
			|en = 'если гр.1 стр.055 подр.5.1 Раздела 5 = 07 и стр.010 Раздела 5 <> 04303, 04306, 04307, 04309, 04311, '") +
		НСтр("ru = '04313, 04315, 04318 - 04332, 09008, 09009, 09010';
			|en = '04313, 04315, 04318 - 04332, 09008, 09009, 09010'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1';
													|en = '%1 = 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента';
													|en = 'Ошибочное значение коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 1';
			|en = 'Укажите значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.7 НК РФ';
													|en = 'ст.342.7 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1, страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_11_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.13';
													|en = '5.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0, ';
													|en = 'Значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5 = 0, '") +
		НСтр("ru = '0,2, 0,4, 0,6, 0,8, 1, если гр.1 стр.055 подр.5.1 Раздела 5 = 01, 02, 03 и стр.051 подр.5.1 ';
			|en = '0,2, 0,4, 0,6, 0,8, 1, если гр.1 стр.055 подр.5.1 Раздела 5 = 01, 02, 03 и стр.051 подр.5.1 '") +
		НСтр("ru = 'Раздела 5 = 1, 2';
			|en = 'Раздела 5 = 1, 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1';
													|en = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента';
													|en = 'Ошибочное значение коэффициента'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5';
													|en = 'Уточните значение коэффициента в гр.2 стр.055 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.3 НК РФ';
													|en = 'ст.342.3 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 подр.5.1 Раздела 5';
													|en = 'Строка %1, страница %2 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивКоэффициентов = Новый Массив;
	МассивКоэффициентов.Добавить(0);
	МассивКоэффициентов.Добавить(0.2);
	МассивКоэффициентов.Добавить(0.4);
	МассивКоэффициентов.Добавить(0.6);
	МассивКоэффициентов.Добавить(0.8);
	МассивКоэффициентов.Добавить(1);
	
	МассивЗначений055 = СтрРазделить("01,02,03", ",");
	МассивЗначений051 = СтрРазделить("1,2", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51П055", "П000500005501_");
	ИменаПоказателей.Вставить("Р51П056", "П000500005502_");
	ИменаПоказателей.Вставить("Р51С051", "П000500005103");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
		
			ЗаполнитьПоказатель(Показатели.Р51С051, СтраницаПодраздела);
			Код051Найден = НЕ МассивЗначений051.Найти(Показатели.Р51С051.Значение) = Неопределено;
		
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000550 Цикл
	
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51П056, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51П055, СтраницаПодраздела, Счетчик);
				РасшифроватьПоказатель(Показатели.Р51С051);
				
				Код055Найден = НЕ МассивЗначений055.Найти(Показатели.Р51П055.Значение) = Неопределено;
				
				НастройкиКС.ЭтоОшибка = Код051Найден И Код055Найден
					И МассивКоэффициентов.Найти(Показатели.Р51П056.Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
					Показатели.Р51П056.Значение);
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.14';
													|en = '5.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Среднесписочная численность в стр.053 подр.5.1 Раздела 5 > 0, ';
													|en = 'Среднесписочная численность в стр.053 подр.5.1 Раздела 5 > 0, '") +
		НСтр("ru = 'если стр.051 подр.5.1 Раздела 5 = 5';
			|en = 'если стр.051 подр.5.1 Раздела 5 = 5'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 > 0, если %2 = 5';
													|en = '%1 > 0, если %2 = 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная среднесписочная численность';
													|en = 'Ошибочная среднесписочная численность'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Укажите среднесписочную численность в стр.053 подр.5.1 Раздела 5 > 0';
			|en = 'Укажите среднесписочную численность в стр.053 подр.5.1 Раздела 5 > 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.3 НК РФ';
													|en = 'ст.342.3 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С053", "П000500005303");
	ИменаПоказателей.Вставить("Р51С051", "П000500005103");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р51С051.Значение = "5" 
				И НЕ Показатели.Р51С053.Значение > 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С053.Значение, Показатели.Р51С051.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.15';
													|en = '5.15'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Первичная оценка в стр.105 подр.5.1 Раздела 5 > 0, ';
													|en = 'Первичная оценка в стр.105 подр.5.1 Раздела 5 > 0, '") +
		НСтр("ru = 'если стр.010 Раздела 5 = 12011';
			|en = 'если стр.010 Раздела 5 = 12011'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 > 0, если %2 = 12011';
													|en = '%1 > 0, если %2 = 12011'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная первичная оценка';
													|en = 'Ошибочная первичная оценка'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните первичную оценку в стр.105 подр.5.1 Раздела 5';
													|en = 'Уточните первичную оценку в стр.105 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340 НК РФ';
													|en = 'ст.340 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С105", "П000500010503");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С105, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р05С010);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р05С010.Значение = "12011" 
				И Показатели.Р51С105.Значение <= 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С105.Значение, Показатели.Р05С010.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.16';
													|en = '5.16'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Стоимость единицы полезного ископаемого в стр.070 подр.5.1 ';
													|en = 'Стоимость единицы полезного ископаемого в стр.070 подр.5.1 '") +
		НСтр("ru = 'Раздела 5 = стр.080 х ((стр.100 - стр.120 - стр.130) / стр.090) подр.5.1 Раздела 5, если стр.010 ';
			|en = 'Раздела 5 = стр.080 х ((стр.100 - стр.120 - стр.130) / стр.090) подр.5.1 Раздела 5, если стр.010 '") +
		НСтр("ru = 'Раздела 5 = 13001 - 13008 и стр.110 подр.5.1 Раздела 5 = 0';
			|en = 'Раздела 5 = 13001 - 13008 и стр.110 подр.5.1 Раздела 5 = 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, 
		НСтр("ru = '%1 = %2 (%3 х ((%4 - %5 - %6) / %7)), если %8 = 13001 - 13008 и %9 = 0';
			|en = '%1 = %2 (%3 х ((%4 - %5 - %6) / %7)), если %8 = 13001 - 13008 и %9 = 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная стоимость единицы полезного ископаемого';
													|en = 'Ошибочная стоимость единицы полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Уточните стоимость единицы полезного ископаемого в стр.070 подр.5.1 Раздела 5';
			|en = 'Уточните стоимость единицы полезного ископаемого в стр.070 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340 НК РФ';
													|en = 'ст.340 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("13001,13002,13003,13004,13005,13006,13007,13008", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С070", "П000500007003");
	ИменаПоказателей.Вставить("Р51С080", "П000500008003");
	ИменаПоказателей.Вставить("Р51С100", "П000500010003");
	ИменаПоказателей.Вставить("Р51С120", "П000500012003");
	ИменаПоказателей.Вставить("Р51С130", "П000500013003");
	ИменаПоказателей.Вставить("Р51С090", "П000500009003");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	ИменаПоказателей.Вставить("Р51С110", "П000500011003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		КодНайден = НЕ МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С070, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С080, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С100, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С120, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С130, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С090, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р05С010);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С110, СтраницаПодраздела);
			
			УсловиеВыполнено = КодНайден И Показатели.Р51С110.Значение = 0;
			РасчетнаяСумма = ?(Показатели.Р51С090.Значение = 0, 0, Окр(Показатели.Р51С080.Значение * 
				((Показатели.Р51С100.Значение - Показатели.Р51С120.Значение - Показатели.Р51С130.Значение) 
				/ Показатели.Р51С090.Значение), 2));
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р51С070.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С070.Значение, РасчетнаяСумма, Показатели.Р51С080.Значение, Показатели.Р51С100.Значение, 
				Показатели.Р51С120.Значение, Показатели.Р51С130.Значение, Показатели.Р51С090.Значение, 
				Показатели.Р05С010.ЗначениеСтр, Показатели.Р51С110.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.17';
													|en = '5.17'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Налоговая база в стр.140 подр.5.1 Раздела 5 = стр.070 подр.5.1 ';
													|en = 'Налоговая база в стр.140 подр.5.1 Раздела 5 = стр.070 подр.5.1 '") +
		НСтр("ru = 'Раздела 5 х сумму гр.2 подр.5.1 Раздела 5, если стр.010 Раздела 5 <> 06103, 04104, 06201 - 06203, ';
			|en = 'Раздела 5 х сумму гр.2 подр.5.1 Раздела 5, если стр.010 Раздела 5 <> 06103, 04104, 06201 - 06203, '") +
		НСтр("ru = '05100, 05200 и гр.1 подр.5.1 Раздела 5 <> 1010 - 1090';
			|en = '05100, 05200 и гр.1 подр.5.1 Раздела 5 <> 1010 - 1090'"));
	Заголовки.Вставить("ШаблонДетализации"	, 
		НСтр("ru = '%1 = %2 (%3 х %4), если %5 <> 06103, 04104, 06201 - 06203, 05100, 05200 и %6 <> 1010 - 1090';
			|en = '%1 = %2 (%3 х %4), если %5 <> 06103, 04104, 06201 - 06203, 05100, 05200 и %6 <> 1010 - 1090'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налоговой базы';
													|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налоговой базы в стр.140 подр.5.1 Раздела 5';
													|en = 'Уточните сумму налоговой базы в стр.140 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.338 НК РФ';
													|en = 'ст.338 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений 	= СтрРазделить("06103,04104,06201,06202,06203,05100,05200", ",");
	МассивЗначений2 = СтрРазделить("1010,1020,1040,1045,1050,1060,1071,1072,1073,1074,1090", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С140", "П000500014003");
	ИменаПоказателей.Вставить("Р51С070", "П000500007003");
	ИменаПоказателей.Вставить("Р51Г001", "П000510000101_");
	ИменаПоказателей.Вставить("Р51Г002", "П000510000102_");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		Код1Найден = НЕ МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С140, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С070, СтраницаПодраздела);
			
			Код2Найден = Ложь;
			Показатели.Р51Г002.Итог = 0;
			МассивКодов = Новый Массив;
			
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000510 Цикл
				ЗаполнитьПоказатель(Показатели.Р51Г001, СтраницаПодраздела, Счетчик);
				МассивКодов.Добавить(Показатели.Р51Г001.ЗначениеСтр);
				КодНайден = НЕ МассивЗначений2.Найти(Показатели.Р51Г001.Значение) = Неопределено;
				Если НЕ КодНайден Тогда
					РасшифроватьПоказатель(Показатели.Р51Г001);
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51Г002, СтраницаПодраздела, Счетчик);
				КонецЕсли;
				Код2Найден = Код2Найден ИЛИ КодНайден;
			КонецЦикла; 
			
			РасшифроватьПоказатель(Показатели.Р05С010);
			
			РасчетнаяСумма = Окр(Показатели.Р51С070.Значение * Показатели.Р51Г002.Итог, 2);
			НастройкиКС.ЭтоОшибка = НЕ Код1Найден И НЕ Код2Найден И НЕ Показатели.Р51С140.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С140.Значение, РасчетнаяСумма, Показатели.Р51С070.Значение, Показатели.Р51Г002.Итог, 
				Показатели.Р05С010.ЗначениеСтр, СтрСоединить(МассивКодов, "; "));
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.18';
													|en = '5.18'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Налоговая база в стр.140 подр.5.1 Раздела 5 = 0, если стр.010 ';
													|en = 'Налоговая база в стр.140 подр.5.1 Раздела 5 = 0, если стр.010 '") +
		НСтр("ru = 'Раздела 5 = 06103, 04104, 06201 - 06203, 05100, 05200';
			|en = 'Раздела 5 = 06103, 04104, 06201 - 06203, 05100, 05200'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 06103, 04104, 06201 - 06203, 05100, 05200';
													|en = '%1 = 0, если %2 = 06103, 04104, 06201 - 06203, 05100, 05200'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налоговой базы';
													|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налоговой базы в стр.140 подр.5.1 Раздела 5 = 0';
													|en = 'Укажите сумму налоговой базы в стр.140 подр.5.1 Раздела 5 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.338 НК РФ';
													|en = 'ст.338 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("06103,04104,06201,06202,06203,05100,05200", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С140", "П000500014003");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		УсловиеВыполнено = НЕ МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С140, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р05С010);
			
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р51С140.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С140.Значение, Показатели.Р05С010.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.21';
													|en = '5.21'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.170 подр.5.1 Раздела 5 = стр.150 подр.5.1 ';
													|en = 'Сумма налога в стр.170 подр.5.1 Раздела 5 = стр.150 подр.5.1 '") +
		НСтр("ru = 'Раздела 5, если стр.010 Раздела 5 <> 04104, 10017, стр.160 подр.5.1 Раздела 5 = 0 и стр.165 ';
			|en = 'Раздела 5, если стр.010 Раздела 5 <> 04104, 10017, стр.160 подр.5.1 Раздела 5 = 0 и стр.165 '") +
		НСтр("ru = 'подр.5.1 Раздела 5 = 0';
			|en = 'подр.5.1 Раздела 5 = 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2, если %3 <> 04104, 10017, %4 = 0, %5 = 0';
													|en = '%1 = %2, если %3 <> 04104, 10017, %4 = 0, %5 = 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.170 подр.5.1 Раздела 5';
													|en = 'Уточните сумму налога в стр.170 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("04104,10017", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С170", "П000500017003");
	ИменаПоказателей.Вставить("Р51С150", "П000500015003");
	ИменаПоказателей.Вставить("Р51С160", "П000500016003");
	ИменаПоказателей.Вставить("Р51С165", "П000500016503");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		КодНеНайден = МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С170, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С150, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С160, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С165, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р05С010);
			
			УсловиеВыполнено = Показатели.Р51С160.Значение = 0 И Показатели.Р51С165.Значение = 0;
			
			НастройкиКС.ЭтоОшибка = КодНеНайден И УсловиеВыполнено 
				И НЕ Показатели.Р51С170.Значение = Показатели.Р51С150.Значение;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С170.Значение, Показатели.Р51С150.Значение, Показатели.Р05С010.ЗначениеСтр,
				Показатели.Р51С160.Значение, Показатели.Р51С165.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_22()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.22';
													|en = '5.22'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.170 подр.5.1 Раздела 5 = (стр.150 - стр.165) ';
													|en = 'Сумма налога в стр.170 подр.5.1 Раздела 5 = (стр.150 - стр.165) '") +
		НСтр("ru = 'подр.5.1 Раздела 5, если стр.010 Раздела 5 <> 04104, 10017, стр.160 подр.5.1 Раздела 5 = 0 и стр.165 ';
			|en = 'подр.5.1 Раздела 5, если стр.010 Раздела 5 <> 04104, 10017, стр.160 подр.5.1 Раздела 5 = 0 и стр.165 '") +
		НСтр("ru = 'подр.5.1 Раздела 5 > 0';
			|en = 'подр.5.1 Раздела 5 > 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2 (%3 - %6), если %4 <> 04104, 10017, %5 = 0, %6 > 0';
													|en = '%1 = %2 (%3 - %6), если %4 <> 04104, 10017, %5 = 0, %6 > 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.170 подр.5.1 Раздела 5';
													|en = 'Уточните сумму налога в стр.170 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("04104,10017", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С170", "П000500017003");
	ИменаПоказателей.Вставить("Р51С150", "П000500015003");
	ИменаПоказателей.Вставить("Р51С160", "П000500016003");
	ИменаПоказателей.Вставить("Р51С165", "П000500016503");
	ИменаПоказателей.Вставить("Р05С010", "П000500001003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р05С010, СтраницаРаздела);
		КодНеНайден = МассивЗначений.Найти(Показатели.Р05С010.Значение) = Неопределено;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С170, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С150, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С160, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р51С165, СтраницаПодраздела);
			РасшифроватьПоказатель(Показатели.Р05С010);
			
			УсловиеВыполнено = Показатели.Р51С160.Значение = 0 И Показатели.Р51С165.Значение > 0;
			
			РасчетнаяСумма = Показатели.Р51С150.Значение - Показатели.Р51С165.Значение;
			НастройкиКС.ЭтоОшибка = КодНеНайден И УсловиеВыполнено 
				И НЕ Показатели.Р51С170.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С170.Значение, РасчетнаяСумма, Показатели.Р51С150.Значение, Показатели.Р05С010.ЗначениеСтр,
				Показатели.Р51С160.Значение, Показатели.Р51С165.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_23()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.23';
													|en = '5.23'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 ';
													|en = 'Значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 '") +
		НСтр("ru = 'должно соответствовать списку допустимых значений';
			|en = 'должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение признака налогового вычета';
													|en = 'Ошибочное значение признака налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 из списка значений';
			|en = 'Выберите значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.6 НК РФ';
													|en = 'ст.343.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С164", "П000500016403");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р51С164.ИмяПоказателя);
			
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
		
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
				
				НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р51С164.Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					Показатели.Р51С164.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_24()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 5';
														|en = 'Раздел 5'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.24';
													|en = '5.24'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 = ';
													|en = 'Значение признака налогового вычета в стр.164 подр.5.1 Раздела 5 = '") +
		НСтр("ru = '10, 11, 12, 13, если стр.165 подр.5.1 Раздела 5 > 0';
			|en = '10, 11, 12, 13, если стр.165 подр.5.1 Раздела 5 > 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 10, 11, 12, 13, если %2 > 0';
													|en = '%1 = 10, 11, 12, 13, если %2 > 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение признака налогового вычета';
													|en = 'Ошибочное значение признака налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Уточните значение признака налогового вычета в стр.164 подр.5.1 Раздела 5';
			|en = 'Уточните значение признака налогового вычета в стр.164 подр.5.1 Раздела 5'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.6 НК РФ';
													|en = 'ст.343.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.5.1 Раздела 5';
													|en = 'Страница %1 подр.5.1 Раздела 5'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений = СтрРазделить("10,11,12,13", ",");
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р51С164", "П000500016403");
	ИменаПоказателей.Вставить("Р51С165", "П000500016503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел5 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел51 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р51С165.Значение > 0
				И МассивЗначений.Найти(Показатели.Р51С164.Значение) = Неопределено; 
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р51С164.ЗначениеСтр, Показатели.Р51С165.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_6

&НаСервере
Процедура ПроверкаКС_6_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.1';
													|en = '6.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма прямых расходов в стр.040 подр.6.1 Раздела 6 = (стр.010 ';
													|en = 'Сумма прямых расходов в стр.040 подр.6.1 Раздела 6 = (стр.010 '") +
		НСтр("ru = '+ стр.020 - стр.030) подр.6.1 Раздела 6';
			|en = '+ стр.020 - стр.030) подр.6.1 Раздела 6'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 + %3 - %4)';
													|en = '%1 = %5 (%2 + %3 - %4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма прямых расходов';
													|en = 'Ошибочная сумма прямых расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму прямых расходов в стр.040 подр.6.1 Раздела 6';
													|en = 'Уточните сумму прямых расходов в стр.040 подр.6.1 Раздела 6'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'п.4 ст.340 НК РФ';
													|en = 'п.4 ст.340 НК РФ'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С040", "П000600004003");
	ИменаПоказателей.Вставить("Р06С010", "П000600001003");
	ИменаПоказателей.Вставить("Р06С020", "П000600002003");
	ИменаПоказателей.Вставить("Р06С030", "П000600003003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	ЗарегистрироватьПроверку();
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел6);
	
	РасчетнаяСумма = Показатели.Р06С010.Значение + Показатели.Р06С020.Значение - Показатели.Р06С030.Значение;
	НастройкиКС.ЭтоОшибка = НЕ Показатели.Р06С040.Значение = РасчетнаяСумма;
	НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
		Показатели.Р06С040.Значение, Показатели.Р06С010.Значение, Показатели.Р06С020.Значение, 
		Показатели.Р06С030.Значение, РасчетнаяСумма);
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.2';
													|en = '6.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма косвенных расходов в стр.090 подр.6.1 Раздела 6 = (стр.050 ';
													|en = 'Сумма косвенных расходов в стр.090 подр.6.1 Раздела 6 = (стр.050 '") +
		НСтр("ru = '+ стр.060 + стр.070 х стр.010 / стр.080) подр.6.1 Раздела 6';
			|en = '+ стр.060 + стр.070 х стр.010 / стр.080) подр.6.1 Раздела 6'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %7 (%2 + %3 + %4 х %5 / %6)';
													|en = '%1 = %7 (%2 + %3 + %4 х %5 / %6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма косвенных расходов';
													|en = 'Ошибочная сумма косвенных расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму косвенных расходов в стр.090 подр.6.1 Раздела 6';
													|en = 'Уточните сумму косвенных расходов в стр.090 подр.6.1 Раздела 6'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'п.4 ст.340 НК РФ';
													|en = 'п.4 ст.340 НК РФ'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С090", "П000600009003");
	ИменаПоказателей.Вставить("Р06С050", "П000600005003");
	ИменаПоказателей.Вставить("Р06С060", "П000600006003");
	ИменаПоказателей.Вставить("Р06С070", "П000600007003");
	ИменаПоказателей.Вставить("Р06С010", "П000600001003");
	ИменаПоказателей.Вставить("Р06С080", "П000600008003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	ЗарегистрироватьПроверку();
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел6);
	
	РасчетнаяСумма = Показатели.Р06С050.Значение + Показатели.Р06С060.Значение + ?(Показатели.Р06С080.Значение = 0, 0, 
		Окр(Показатели.Р06С070.Значение * Показатели.Р06С010.Значение / Показатели.Р06С080.Значение, 2));
	НастройкиКС.ЭтоОшибка = НЕ Показатели.Р06С090.Значение = РасчетнаяСумма;
	НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
		Показатели.Р06С090.Значение, Показатели.Р06С050.Значение, Показатели.Р06С060.Значение, 
		Показатели.Р06С070.Значение, Показатели.Р06С010.Значение, Показатели.Р06С080.Значение, РасчетнаяСумма);
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.3';
													|en = '6.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Общая сумма расходов в стр.100 подр.6.1 Раздела 6 = (стр.040 ';
													|en = 'Общая сумма расходов в стр.100 подр.6.1 Раздела 6 = (стр.040 '") +
		НСтр("ru = '+ стр.090) подр.6.1 Раздела 6';
			|en = '+ стр.090) подр.6.1 Раздела 6'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 + %3)';
													|en = '%1 = %4 (%2 + %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная общая сумма расходов';
													|en = 'Ошибочная общая сумма расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму расходов в стр.100 подр.6.1 Раздела 6';
													|en = 'Уточните сумму расходов в стр.100 подр.6.1 Раздела 6'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'п.4 ст.340 НК РФ';
													|en = 'п.4 ст.340 НК РФ'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р06С100", "П000600010003");
	ИменаПоказателей.Вставить("Р06С040", "П000600004003");
	ИменаПоказателей.Вставить("Р06С090", "П000600009003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	ЗарегистрироватьПроверку();
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел6);
	
	РасчетнаяСумма = Показатели.Р06С040.Значение + Показатели.Р06С090.Значение;
	НастройкиКС.ЭтоОшибка = НЕ Показатели.Р06С100.Значение = РасчетнаяСумма;
	НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
		Показатели.Р06С100.Значение, Показатели.Р06С040.Значение, Показатели.Р06С090.Значение, РасчетнаяСумма);
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.4';
													|en = '6.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма значений в гр.3 подр.6.2 Раздела 6 = 1';
													|en = 'Сумма значений в гр.3 подр.6.2 Раздела 6 = 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1';
													|en = '%1 = 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма значений';
													|en = 'Ошибочная сумма значений'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значения в гр.3 подр.6.2 Раздела 6';
													|en = 'Уточните значения в гр.3 подр.6.2 Раздела 6'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340 НК РФ';
													|en = 'ст.340 НК РФ'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р62Г003", "П000620000103_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	ЗарегистрироватьПроверку();
	
	Для Счетчик = 1 По ДанныеКС.Раздел6.КолвоСтрокП000620 Цикл
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел6, Счетчик);
	КонецЦикла;
	
	НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р62Г003.Итог) И НЕ Показатели.Р62Г003.Итог = 1;
	НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
		Показатели.Р62Г003.Итог);
	ДополнитьТаблицуРезультата();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 6';
														|en = 'Раздел 6'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.5';
													|en = '6.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма расходов в гр.4 подр.6.2 Раздела 6 = стр.100 подр.6.1 ';
													|en = 'Сумма расходов в гр.4 подр.6.2 Раздела 6 = стр.100 подр.6.1 '") +
		НСтр("ru = 'Раздела 6 х гр.3 подр.6.2 Раздела 6, если гр.4 подр.6.2 Раздела 6 <> 0';
			|en = 'Раздела 6 х гр.3 подр.6.2 Раздела 6, если гр.4 подр.6.2 Раздела 6 <> 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма расходов';
													|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму расходов в гр.4 подр.6.2 Раздела 6';
													|en = 'Уточните сумму расходов в гр.4 подр.6.2 Раздела 6'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.340 НК РФ';
													|en = 'ст.340 НК РФ'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р62Г004", "П000620000104_");
	ИменаПоказателей.Вставить("Р62Г003", "П000620000103_");
	ИменаПоказателей.Вставить("Р06С100", "П000600010003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	ЗаполнитьПоказатель(Показатели.Р06С100, ДанныеКС.Раздел6);
	
	Для Счетчик = 1 По ДанныеКС.Раздел6.КолвоСтрокП000620 Цикл

		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р62Г004, ДанныеКС.Раздел6, Счетчик);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р62Г003, ДанныеКС.Раздел6, Счетчик);
		РасшифроватьПоказатель(Показатели.Р06С100);
		
		РасчетнаяСумма = Окр(Показатели.Р62Г003.Значение * Показатели.Р06С100.Значение, 2);
		НастройкиКС.ЭтоОшибка = ЗначениеЗаполнено(Показатели.Р62Г004.Значение) 
			И НЕ Показатели.Р62Г004.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р62Г004.Значение, Показатели.Р06С100.Значение, Показатели.Р62Г003.Значение, РасчетнаяСумма);
		ДополнитьТаблицуРезультата();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_7

&НаСервере
Процедура ПроверкаКС_7_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.1';
													|en = '7.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 7 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.010 Раздела 7 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.010 Раздела 7';
													|en = 'Уточните значение КБК в стр.010 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С010");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000700001003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел7");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.2';
													|en = '7.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код единицы измерения в стр.030 Раздела 7 должен ';
													|en = 'Код единицы измерения в стр.030 Раздела 7 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный код единицы измерения';
													|en = 'Ошибочный код единицы измерения'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода единицы измерения в стр.030 Раздела 7 из списка значений';
			|en = 'Выберите значение кода единицы измерения в стр.030 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С030");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000700003003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел7");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.3';
													|en = '7.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.040 Раздела 7 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.040 Раздела 7 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.040 Раздела 7';
													|en = 'Уточните значение ОКТМО в стр.040 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р07С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000700004003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел7");
	
	ПроверкаКС_4_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.4';
													|en = '7.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение кода субъекта РФ в стр.045 Раздела 7 должно быть ';
													|en = 'Значение кода субъекта РФ в стр.045 Раздела 7 должно быть '") +
		НСтр("ru = 'заполнено, если заполнено значение коэффициента Ктд в стр.050 Раздела 7';
			|en = 'заполнено, если заполнено значение коэффициента Ктд в стр.050 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Значение %1 заполнено, когда значение %2 заполнено';
													|en = 'Значение %1 заполнено, когда значение %2 заполнено'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение кода субъекта РФ';
													|en = 'Ошибочное значение кода субъекта РФ'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Заполните код субъекта РФ в стр.045 Раздела 7';
													|en = 'Заполните код субъекта РФ в стр.045 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.3 НК РФ';
													|en = 'ст.342.3 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("МассивЗначений", СтрРазделить("-,", ","));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р07С045", "П000700004503");
	ИменаПоказателей.Вставить("Р07С050", "П000700005003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		КоэффициентЗаполнен = НастройкиКС.МассивЗначений.Найти(Показатели.Р07С050.Значение) = Неопределено;
		НастройкиКС.ЭтоОшибка = КоэффициентЗаполнен И НЕ ЗначениеЗаполнено(Показатели.Р07С045.Значение);
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р07С045.ЗначениеСтр,Показатели.Р07С050.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.5';
													|en = '7.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ктд в стр.050 Раздела 7 = ';
													|en = 'Значение коэффициента Ктд в стр.050 Раздела 7 = '") +
		НСтр("ru = '0, 0,2, 0,4, 0,6, 0,8, 1, если стр.055 Раздела 7 = 1 - 3';
			|en = '0, 0,2, 0,4, 0,6, 0,8, 1, если стр.055 Раздела 7 = 1 - 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1 когда %2 = 1, 2, 3';
													|en = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1 когда %2 = 1, 2, 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ктд';
													|en = 'Ошибочное значение коэффициента Ктд'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Ктд в стр.050 Раздела 7';
													|en = 'Уточните значение коэффициента Ктд в стр.050 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("МассивЗначений1", СтрРазделить("0,0;0,2;0,4;0,6;0,8;1,0", ";"));
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("1,2,3", ","));
	ПроверкаКС_7_06_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.6';
													|en = '7.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Ктд в стр.050 Раздела 7 = ';
													|en = 'Значение коэффициента Ктд в стр.050 Раздела 7 = '") +
		НСтр("ru = '""-"", если стр.055 Раздела 7 = 0';
			|en = '""-"", если стр.055 Раздела 7 = 0'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = - когда %2 = 0';
													|en = '%1 = - когда %2 = 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Ктд';
													|en = 'Ошибочное значение коэффициента Ктд'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Ктд в стр.050 Раздела 7';
													|en = 'Уточните значение коэффициента Ктд в стр.050 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("МассивЗначений1", СтрРазделить("-,", ","));
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("0,", ","));
	ПроверкаКС_7_06_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_06_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р07С050", "П000700005003");
	ИменаПоказателей.Вставить("Р07С055", "П000700005503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = НЕ НастройкиКС.МассивЗначений2.Найти(Показатели.Р07С055.Значение) = Неопределено
			И НастройкиКС.МассивЗначений1.Найти(Показатели.Р07С050.Значение) = Неопределено;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р07С050.ЗначениеСтр, Показатели.Р07С055.ЗначениеСтр);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.7';
													|en = '7.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Код вида полезного ископаемого в гр.1 подр.7.1 Раздела 7 ';
													|en = 'Код вида полезного ископаемого в гр.1 подр.7.1 Раздела 7 '") +
		НСтр("ru = 'должен соответствовать списку допустимых значений';
			|en = 'должен соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение кода вида полезного ископаемого';
													|en = 'Ошибочное значение кода вида полезного ископаемого'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение кода вида полезного ископаемого в гр.1 подр.7.1 Раздела 7 из списка значений';
			|en = 'Выберите значение кода вида полезного ископаемого в гр.1 подр.7.1 Раздела 7 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Строка %1, страница %2 Раздела 7';
													|en = 'Строка %1, страница %2 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р71Г001", "П000710000101_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р71Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
			Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП000710 Цикл
		
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
				
				НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р71Г001.Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					Показатели.Р71Г001.ЗначениеСтр);
				НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
					Счетчик, СтраницаРаздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.8';
													|en = '7.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма расходов в стр.070 подр.7.2 Раздела 7 = ';
													|en = 'Сумма расходов в стр.070 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '(стр.080 + стр.090 + стр.100) подр.7.2 Раздела 7';
			|en = '(стр.080 + стр.090 + стр.100) подр.7.2 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 + %3 + %4)';
													|en = '%1 = %5 (%2 + %3 + %4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма расходов';
													|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму расходов в стр.070 подр.7.2 Раздела 7';
													|en = 'Уточните сумму расходов в стр.070 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С070", "П000700007003");
	ИменаПоказателей.Вставить("Р72С080", "П000700008003");
	ИменаПоказателей.Вставить("Р72С090", "П000700009003");
	ИменаПоказателей.Вставить("Р72С100", "П000700010003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р72С080.Значение + Показатели.Р72С090.Значение + Показатели.Р72С100.Значение);
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р72С070.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
			Показатели.Р72С070.Значение, Показатели.Р72С080.Значение, Показатели.Р72С090.Значение, 
			Показатели.Р72С100.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.9';
													|en = '7.9'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма расходов в стр.110 подр.7.2 Раздела 7 = ';
													|en = 'Сумма расходов в стр.110 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '(стр.060 + стр.070) подр.7.2 Раздела 7, но не более стр.140 подр.7.2 Раздела 7';
			|en = '(стр.060 + стр.070) подр.7.2 Раздела 7, но не более стр.140 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 + %3), но не более %5';
													|en = '%1 = %4 (%2 + %3), но не более %5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма расходов';
													|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму расходов в стр.110 подр.7.2 Раздела 7';
													|en = 'Уточните сумму расходов в стр.110 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С110", "П000700011003");
	ИменаПоказателей.Вставить("Р72С060", "П000700006003");
	ИменаПоказателей.Вставить("Р72С070", "П000700007003");
	ИменаПоказателей.Вставить("Р72С140", "П000700014003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р72С060.Значение + Показатели.Р72С070.Значение;
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р72С110.Значение = Мин(РасчетнаяСумма, Показатели.Р72С140.Значение);
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации, 
			Показатели.Р72С110.Значение, Показатели.Р72С060.Значение, Показатели.Р72С070.Значение, РасчетнаяСумма, 
			Показатели.Р72С140.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.10';
													|en = '7.10'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кт в стр.120 подр.7.2 Раздела 7 <= 0,3';
													|en = 'Значение коэффициента Кт в стр.120 подр.7.2 Раздела 7 <= 0,3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 <= 0,3';
													|en = '%1 <= 0,3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кт';
													|en = 'Ошибочное значение коэффициента Кт'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кт в стр.120 подр.7.2 Раздела 7';
													|en = 'Уточните значение коэффициента Кт в стр.120 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С120", "П000700012003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		НастройкиКС.ЭтоОшибка = Показатели.Р72С120.Значение > 0.3;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р72С120.Значение);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.13';
													|en = '7.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.140 подр.7.2 Раздела 7 = ';
													|en = 'Сумма налогового вычета в стр.140 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '(стр.120 х стр.130) подр.7.2 Раздела 7';
			|en = '(стр.120 х стр.130) подр.7.2 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налогового вычета в стр.140 подр.7.2 Раздела 7';
													|en = 'Уточните сумму налогового вычета в стр.140 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С140", "П000700014003");
	ИменаПоказателей.Вставить("Р72С120", "П000700012003");
	ИменаПоказателей.Вставить("Р72С130", "П000700013003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р72С120.Значение * Показатели.Р72С130.Значение);
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р72С140.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
			Показатели.Р72С140.Значение, Показатели.Р72С120.Значение, Показатели.Р72С130.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.14';
													|en = '7.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.150 подр.7.2 Раздела 7 = ';
													|en = 'Сумма налога в стр.150 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '(стр.130 - стр.110) подр.7.2 Раздела 7, если гр.2 подр.7.1 Раздела 7 = 6000, 6001';
			|en = '(стр.130 - стр.110) подр.7.2 Раздела 7, если гр.2 подр.7.1 Раздела 7 = 6000, 6001'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3)';
													|en = '%1 = %4 (%2 - %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.150 подр.7.2 Раздела 7';
													|en = 'Уточните сумму налога в стр.150 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("МассивЗначений", СтрРазделить("6000,6001", ","));
	ПроверкаКС_7_15_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.15';
													|en = '7.15'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.150 подр.7.2 Раздела 7 = ';
													|en = 'Сумма налога в стр.150 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '0, если гр.2 подр.7.1 Раздела 7 = 6100, 6101';
			|en = '0, если гр.2 подр.7.1 Раздела 7 = 6100, 6101'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налога в стр.150 подр.7.2 Раздела 7 = 0';
													|en = 'Укажите сумму налога в стр.150 подр.7.2 Раздела 7 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("МассивЗначений", СтрРазделить("6100,6101", ","));
	ПроверкаКС_7_15_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_15_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С150", "П000700015003");
	ИменаПоказателей.Вставить("Р72С130", "П000700013003");
	ИменаПоказателей.Вставить("Р72С110", "П000700011003");
	ИменаПоказателей.Вставить("Р71Г002", "П000710000102_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Показатели.Р72С130.Расшифровывать = НастройкиКС.НомерКС = "7.14";
	Показатели.Р72С110.Расшифровывать = НастройкиКС.НомерКС = "7.14";
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		УсловиеВыполнено = Ложь;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р72С150, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р72С130, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р72С110, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП000710 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р71Г002, СтраницаРаздела, Счетчик);
			УсловиеВыполнено = УсловиеВыполнено 
				ИЛИ НЕ НастройкиКС.МассивЗначений.Найти(Показатели.Р71Г002.Значение) = Неопределено;
		КонецЦикла;
		
		Если НастройкиКС.НомерКС = "7.14" Тогда
			РасчетнаяСумма = Показатели.Р72С130.Значение - Показатели.Р72С110.Значение;
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р72С150.Значение = РасчетнаяСумма;
		Иначе
			НастройкиКС.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р72С150.Значение = 0;
		КонецЕсли;
		
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
			Показатели.Р72С150.Значение, Показатели.Р72С130.Значение, Показатели.Р72С110.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.16';
													|en = '7.16'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма расходов в стр.160 подр.7.2 Раздела 7 = ';
													|en = 'Сумма расходов в стр.160 подр.7.2 Раздела 7 = '") +
		НСтр("ru = '(стр.060 + стр.070 - стр.110) подр.7.2 Раздела 7';
			|en = '(стр.060 + стр.070 - стр.110) подр.7.2 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 + %3 - %4)';
													|en = '%1 = %5 (%2 + %3 - %4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма расходов';
													|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму расходов в стр.160 подр.7.2 Раздела 7';
													|en = 'Уточните сумму расходов в стр.160 подр.7.2 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 7';
													|en = 'Страница %1 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р72С160", "П000700016003");
	ИменаПоказателей.Вставить("Р72С060", "П000700006003");
	ИменаПоказателей.Вставить("Р72С070", "П000700007003");
	ИменаПоказателей.Вставить("Р72С110", "П000700011003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
	
		ЗарегистрироватьПроверку();
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р72С060.Значение + Показатели.Р72С070.Значение - Показатели.Р72С110.Значение;
		НастройкиКС.ЭтоОшибка = НЕ Показатели.Р72С160.Значение = РасчетнаяСумма;
		НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
			Показатели.Р72С160.Значение, Показатели.Р72С060.Значение, Показатели.Р72С070.Значение, 
			Показатели.Р72С110.Значение, РасчетнаяСумма);
		НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаРаздела.НомерСтраницы);
		ДополнитьТаблицуРезультата();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 7';
														|en = 'Раздел 7'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.17';
													|en = '7.17'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.210 подр.7.3 Раздела 7 = ';
													|en = 'Сумма налогового вычета в стр.210 подр.7.3 Раздела 7 = '") +
		НСтр("ru = '(стр.180 - стр.190 - стр.200) подр.7.3 Раздела 7';
			|en = '(стр.180 - стр.190 - стр.200) подр.7.3 Раздела 7'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %5 (%2 - %3 - %4)';
													|en = '%1 = %5 (%2 - %3 - %4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налогового вычета в стр.210 подр.7.3 Раздела 7';
													|en = 'Уточните сумму налогового вычета в стр.210 подр.7.3 Раздела 7'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343.1 НК РФ';
													|en = 'ст.343.1 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Группа строк %1, страница %2 Раздела 7';
													|en = 'Группа строк %1, страница %2 Раздела 7'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р73С210", "П000730000105_");
	ИменаПоказателей.Вставить("Р73С180", "П000730000102_");
	ИменаПоказателей.Вставить("Р73С190", "П000730000103_");
	ИменаПоказателей.Вставить("Р73С200", "П000730000104_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел7 Цикл
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП000730 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, Счетчик);
			
			РасчетнаяСумма = Показатели.Р73С180.Значение - Показатели.Р73С190.Значение - Показатели.Р73С200.Значение;
			НастройкиКС.ЭтоОшибка = НЕ Показатели.Р73С210.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкиКС.ШаблонДетализации,
				Показатели.Р73С210.Значение, Показатели.Р73С180.Значение, Показатели.Р73С190.Значение, 
				Показатели.Р73С200.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрШаблон(НастройкиКС.ШаблонДопСведений, 
				Счетчик, СтраницаРаздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки_Раздела_8

&НаСервере
Процедура ПроверкаКС_8_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.1';
													|en = '8.1'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 8 = стр.010 Раздела 1';
													|en = 'Значение КБК в стр.020 Раздела 8 = стр.010 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение КБК в стр.020 Раздела 8';
													|en = 'Уточните значение КБК в стр.020 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 8';
													|en = 'Страница %1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р08С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000800002003");
	НастройкиКС.Вставить("РазделКБК"		, "Раздел8");
	
	ПроверкаКС_2_01_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.2';
													|en = '8.2'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 8 должно соответствовать списку ';
													|en = 'Значение КБК в стр.020 Раздела 8 должно соответствовать списку '") +
		НСтр("ru = 'допустимых значений';
			|en = 'допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение КБК';
													|en = 'Ошибочное значение КБК'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение КБК в стр.020 Раздела 8 из списка значений';
			|en = 'Выберите значение КБК в стр.020 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 Раздела 8';
													|en = 'Страница %1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р08С020");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000800002003");
	НастройкиКС.Вставить("Раздел_"			, "Раздел8");
	
	ПроверкаКС_2_02_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.3';
													|en = '8.3'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение ОКТМО в стр.040 подр.8.1 Раздела 8 = стр.020 Раздела 1';
													|en = 'Значение ОКТМО в стр.040 подр.8.1 Раздела 8 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ОКТМО';
													|en = 'Ошибочное значение ОКТМО'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение ОКТМО в стр.040 Раздела 8';
													|en = 'Уточните значение ОКТМО в стр.040 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("Показатель1"		, "Р81С040");
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000800004003");
	НастройкиКС.Вставить("РазделОКТМО"		, "Раздел8");
	НастройкиКС.Вставить("ПодразделОКТМО"	, "Раздел81");
	
	ПроверкаКС_2_03_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.4';
													|en = '8.4'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.150 подр.8.1 Раздела 8 = (сумма всех значений ';
													|en = 'Сумма налога в стр.150 подр.8.1 Раздела 8 = (сумма всех значений '") +
		НСтр("ru = 'по гр.2 подр.8.1 Раздела 8, для которых гр.1 подр.8.1 Раздела 8 = 4050) х стр.070 подр.8.1 Раздела 8';
			|en = 'по гр.2 подр.8.1 Раздела 8, для которых гр.1 подр.8.1 Раздела 8 = 4050) х стр.070 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 х %3)';
													|en = '%1 = %4 (%2 х %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.150 подр.8.1 Раздела 8';
													|en = 'Уточните сумму налога в стр.150 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.343 НК РФ';
													|en = 'ст.343 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С150", "П000800015003");
	ИменаПоказателей.Вставить("Р81С070", "П000800007003");
	ИменаПоказателей.Вставить("Р81Г001", "П000810000101_");
	ИменаПоказателей.Вставить("Р81Г002", "П000810000102_");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
	
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р81С150, СтраницаПодраздела);
			Показатели.Р81Г002.Итог = 0;
			КодНайден = Ложь;
			
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП000810 Цикл
				ЗаполнитьПоказатель(Показатели.Р81Г001, СтраницаПодраздела, Счетчик);
				Если Показатели.Р81Г001.Значение = "4050" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р81Г002, СтраницаПодраздела, Счетчик);
					КодНайден = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р81С070, СтраницаПодраздела);
			РасчетнаяСумма = Окр(Показатели.Р81Г002.Итог * Показатели.Р81С070.Значение);
			
			НастройкиКС.ЭтоОшибка = КодНайден И НЕ Показатели.Р81С150.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р81С150.Значение, Показатели.Р81Г002.Итог, Показатели.Р81С070.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.5';
													|en = '8.5'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 должен ';
													|en = 'Признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный признак коэффициента Кг';
													|en = 'Ошибочный признак коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите признак коэффициента Кг в стр.100 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("ИмяПоказателя", "П000800010003");
	ПроверкаКС_8_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С001", НастройкиКС.ИмяПоказателя);
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Список = ДанныеКС.СоответствиеСписков.Получить(Показатели.Р81С001.ИмяПоказателя);
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
			Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
				ЗарегистрироватьПроверку();
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р81С001, СтраницаПодраздела);
				
				ЗначениеПоказателя = ?(ТипЗнч(Показатели.Р81С001.Значение) = Тип("Число"), Показатели.Р81С001.Значение,
					Показатели.Р81С001.ЗначениеСтр);
				НастройкиКС.ЭтоОшибка = Список.Получить(Показатели.Р81С001.Значение) = Неопределено;
				НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
					ЗначениеПоказателя);
				НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
				ДополнитьТаблицуРезультата();
		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.6';
													|en = '8.6'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 должно ';
													|en = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кг';
													|en = 'Ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("ИмяПоказателя", "П000800011003");
	ПроверкаКС_8_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.7';
													|en = '8.7'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = ';
													|en = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = '") +
		НСтр("ru = '0,4, 0,6, 0,8, 1, 1,2, 1,95, если стр.100 подр.8.1 Раздела = 1, 2';
			|en = '0,4, 0,6, 0,8, 1, 1,2, 1,95, если стр.100 подр.8.1 Раздела = 1, 2'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,4, 0,6, 0,8, 1, 1,2, 1,95, если %2 = 1, 2';
													|en = '%1 = 0,4, 0,6, 0,8, 1, 1,2, 1,95, если %2 = 1, 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кг';
													|en = 'Ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8';
													|en = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений1 = СтрРазделить("0.4,0.6,0.8,1,1.2,1.95", ",");
	МаксИндекс = МассивЗначений1.ВГраница();
	Для Счетчик = 0 По МаксИндекс Цикл
		МассивЗначений1[Счетчик] = Число(МассивЗначений1[Счетчик]);
	КонецЦикла; 
	
	НастройкиКС.Вставить("МассивЗначений1", МассивЗначений1);
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("1,2", ","));
	ПроверкаКС_8_10_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.8';
													|en = '8.8'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = ';
													|en = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = '") +
		НСтр("ru = '1, если стр.100 подр.8.1 Раздела = 3';
			|en = '1, если стр.100 подр.8.1 Раздела = 3'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 1, если %2 = 3';
													|en = '%1 = 1, если %2 = 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кг';
													|en = 'Ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = 1';
													|en = 'Укажите значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = 1'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений1 = Новый Массив;
	МассивЗначений1.Добавить(1);
	
	НастройкиКС.Вставить("МассивЗначений1", МассивЗначений1);
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("3", ","));
	ПроверкаКС_8_10_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.9';
													|en = '8.9'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = ';
													|en = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = '") +
		НСтр("ru = '0,5, 0,75, 1, если стр.100 подр.8.1 Раздела = 4';
			|en = '0,5, 0,75, 1, если стр.100 подр.8.1 Раздела = 4'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0,5, 0,75, 1, если %2 = 4';
													|en = '%1 = 0,5, 0,75, 1, если %2 = 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кг';
													|en = 'Ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8';
													|en = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений1 = СтрРазделить("0.5,0.75,1", ",");
	МаксИндекс = МассивЗначений1.ВГраница();
	Для Счетчик = 0 По МаксИндекс Цикл
		МассивЗначений1[Счетчик] = Число(МассивЗначений1[Счетчик]);
	КонецЦикла; 
	
	НастройкиКС.Вставить("МассивЗначений1", МассивЗначений1);
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("4", ","));
	ПроверкаКС_8_10_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.10';
													|en = '8.10'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = ';
													|en = 'Значение коэффициента Кг в стр.110 подр.8.1 Раздела 8 = '") +
		НСтр("ru = '0, 0,2, 0,4, 0,6, 0,8, 1, если стр.100 подр.8.1 Раздела = 5';
			|en = '0, 0,2, 0,4, 0,6, 0,8, 1, если стр.100 подр.8.1 Раздела = 5'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1, если %2 = 5';
													|en = '%1 = 0, 0,2, 0,4, 0,6, 0,8, 1, если %2 = 5'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение коэффициента Кг';
													|en = 'Ошибочное значение коэффициента Кг'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8';
													|en = 'Уточните значение коэффициента Кг в стр.110 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗначений1 = СтрРазделить("0,0.2,0.4,0.6,0.8,1", ",");
	МаксИндекс = МассивЗначений1.ВГраница();
	Для Счетчик = 0 По МаксИндекс Цикл
		МассивЗначений1[Счетчик] = Число(МассивЗначений1[Счетчик]);
	КонецЦикла; 
	
	НастройкиКС.Вставить("МассивЗначений1", МассивЗначений1);
	НастройкиКС.Вставить("МассивЗначений2", СтрРазделить("5", ","));
	ПроверкаКС_8_10_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_10_код()
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С110", "П000800011003");
	ИменаПоказателей.Вставить("Р81С100", "П000800010003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = НЕ НастройкиКС.МассивЗначений2.Найти(Показатели.Р81С100.Значение) = Неопределено
				И НастройкиКС.МассивЗначений1.Найти(Показатели.Р81С110.Значение) = Неопределено;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р81С110.Значение, Показатели.Р81С100.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.11';
													|en = '8.11'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Ставка таможенной пошлины в стр.120 подр.8.1 Раздела 8 = 0, ';
													|en = 'Ставка таможенной пошлины в стр.120 подр.8.1 Раздела 8 = 0, '") +
		НСтр("ru = 'если стр.110 подр.8.1 Раздела < 1 и стр.100 подр.8.1 Раздела не равна 4';
			|en = 'если стр.110 подр.8.1 Раздела < 1 и стр.100 подр.8.1 Раздела не равна 4'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, когда %2 < 1 и %3 <> 4';
													|en = '%1 = 0, когда %2 < 1 и %3 <> 4'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение ставки таможенной пошлины';
													|en = 'Ошибочное значение ставки таможенной пошлины'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите ставку таможенной пошлины в стр.120 подр.8.1 Раздела 8 = 0';
													|en = 'Укажите ставку таможенной пошлины в стр.120 подр.8.1 Раздела 8 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С120", "П000800012003");
	ИменаПоказателей.Вставить("Р81С110", "П000800011003");
	ИменаПоказателей.Вставить("Р81С100", "П000800010003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р81С110.Значение < 1 И НЕ Показатели.Р81С100.Значение = "4"
				И НЕ Показатели.Р81С120.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации, 
				Показатели.Р81С120.Значение, Показатели.Р81С110.Значение, Показатели.Р81С100.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.13';
													|en = '8.13'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Признак налогового вычета в стр.160 подр.8.1 Раздела 8 должен ';
													|en = 'Признак налогового вычета в стр.160 подр.8.1 Раздела 8 должен '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = 'Недопустимое значение %1';
													|en = 'Недопустимое значение %1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочный признак налогового вычета';
													|en = 'Ошибочный признак налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, 
		НСтр("ru = 'Выберите признак налогового вычета в стр.160 подр.8.1 Раздела 8 из списка значений';
			|en = 'Выберите признак налогового вычета в стр.160 подр.8.1 Раздела 8 из списка значений'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКС.Вставить("ИмяПоказателя"	, "П000800016003");
	ПроверкаКС_8_05_код();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.14';
													|en = '8.14'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.165 подр.8.1 Раздела 8 <= ';
													|en = 'Сумма налогового вычета в стр.165 подр.8.1 Раздела 8 <= '") +
		НСтр("ru = 'стр.170 подр.8.1 Раздела 8';
			|en = 'стр.170 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налогового вычета в стр.165 подр.8.1 Раздела 8';
													|en = 'Уточните сумму налогового вычета в стр.165 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С165", "П000800016503");
	ИменаПоказателей.Вставить("Р81С170", "П000800017003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р81С165.Значение > Показатели.Р81С170.Значение;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р81С165.Значение, Показатели.Р81С170.Значение);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.15';
													|en = '8.15'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налогового вычета в стр.165 подр.8.1 Раздела 8 = 0, ';
													|en = 'Сумма налогового вычета в стр.165 подр.8.1 Раздела 8 = 0, '") +
		НСтр("ru = 'если стр.160 подр.8.1 Раздела 8 = 00';
			|en = 'если стр.160 подр.8.1 Раздела 8 = 00'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = 0, если %2 = 00';
													|en = '%1 = 0, если %2 = 00'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налогового вычета';
													|en = 'Ошибочная сумма налогового вычета'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Укажите сумму налогового вычета в стр.165 подр.8.1 Раздела 8 = 0';
													|en = 'Укажите сумму налогового вычета в стр.165 подр.8.1 Раздела 8 = 0'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С165", "П000800016503");
	ИменаПоказателей.Вставить("Р81С160", "П000800016003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р81С160.Значение = "00" И НЕ Показатели.Р81С165.Значение = 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р81С165.Значение, Показатели.Р81С160.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.16';
													|en = '8.16'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Предельная величина Пванкор в стр.170 подр.8.1 Раздела 8 > 0, ';
													|en = 'Предельная величина Пванкор в стр.170 подр.8.1 Раздела 8 > 0, '") +
		НСтр("ru = 'если стр.160 подр.8.1 Раздела 8 = 06';
			|en = 'если стр.160 подр.8.1 Раздела 8 = 06'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 > 0, если %2 = 06';
													|en = '%1 > 0, если %2 = 06'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочное значение предельной величины Пванкор';
													|en = 'Ошибочное значение предельной величины Пванкор'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните значение величины Пванкор в стр.170 подр.8.1 Раздела 8';
													|en = 'Уточните значение величины Пванкор в стр.170 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С170", "П000800017003");
	ИменаПоказателей.Вставить("Р81С160", "П000800016003");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			НастройкиКС.ЭтоОшибка = Показатели.Р81С160.Значение = "06" И НЕ Показатели.Р81С170.Значение > 0;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р81С170.Значение, Показатели.Р81С160.ЗначениеСтр);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 8';
														|en = 'Раздел 8'"));
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.17';
													|en = '8.17'"));
	Заголовки.Вставить("Описание"			, НСтр("ru = 'Сумма налога в стр.180 подр.8.1 Раздела 8 = ';
													|en = 'Сумма налога в стр.180 подр.8.1 Раздела 8 = '") +
		НСтр("ru = 'стр.150 подр.8.1 Раздела 8 - стр.165 подр.8.1 Раздела 8';
			|en = 'стр.150 подр.8.1 Раздела 8 - стр.165 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("ШаблонДетализации"	, НСтр("ru = '%1 = %4 (%2 - %3)';
													|en = '%1 = %4 (%2 - %3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибочная сумма налога';
													|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Рекомендации"		, НСтр("ru = 'Уточните сумму налога в стр.180 подр.8.1 Раздела 8';
													|en = 'Уточните сумму налога в стр.180 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("Основание"			, НСтр("ru = 'ст.342.6 НК РФ';
													|en = 'ст.342.6 НК РФ'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru = 'Страница %1 подр.8.1 Раздела 8';
													|en = 'Страница %1 подр.8.1 Раздела 8'"));
	Заголовки.Вставить("ДляДокументации"	, НСтр("ru = 'Отключено с 2024';
													|en = 'Отключено с 2024'")); 
	ПодготовитьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКС.ГодОтчета > 2023 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р81С180", "П000800018003");
	ИменаПоказателей.Вставить("Р81С150", "П000800015003");
	ИменаПоказателей.Вставить("Р81С165", "П000800016503");
	Показатели = СформироватьПоказатели(ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел8 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел81 Цикл
		
			ЗарегистрироватьПроверку();
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Показатели.Р81С150.Значение - Показатели.Р81С165.Значение;
			НастройкиКС.ЭтоОшибка = НЕ Показатели.Р81С180.Значение = РасчетнаяСумма;
			НастройкиКС.Детализация = СтрШаблон(НастройкиКС.ШаблонДетализации,
				Показатели.Р81С180.Значение, Показатели.Р81С150.Значение, Показатели.Р81С165.Значение, РасчетнаяСумма);
			НастройкиКС.ДопСведения = СтрЗаменить(НастройкиКС.ШаблонДопСведений, "%1", СтраницаПодраздела.НомерСтраницы);
			ДополнитьТаблицуРезультата();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2023Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДСДМ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 10, ДопустимыйЗнак.Неотрицательный));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло15_10
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 10, ДопустимыйЗнак.Неотрицательный));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло16_10
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 10, ДопустимыйЗнак.Неотрицательный));
	СтруктураРеквизитовФормы.мОписаниеТиповЧисло17_10
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 10, ДопустимыйЗнак.Любой));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло16_15
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 15, ДопустимыйЗнак.Неотрицательный));
		
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1   = "П0001000001";
	СтруктураРеквизитовФормы.мИдГруппы211 = "П0002110001";
	СтруктураРеквизитовФормы.мИдГруппы212 = "П0002120001";
	СтруктураРеквизитовФормы.мИдГруппы311 = "П0003110001";
	СтруктураРеквизитовФормы.мИдГруппы4   = "П0004000001";
	СтруктураРеквизитовФормы.мИдГруппы50  = "П0005000055";
	СтруктураРеквизитовФормы.мИдГруппы51  = "П0005100001";
	СтруктураРеквизитовФормы.мИдГруппы52  = "П0005200001";
	СтруктураРеквизитовФормы.мИдГруппы62  = "П0006200001";
	СтруктураРеквизитовФормы.мИдГруппы71  = "П0007100001";
	СтруктураРеквизитовФормы.мИдГруппы73  = "П0007300001";
	СтруктураРеквизитовФормы.мИдГруппы81  = "П0008100001";
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1   = Новый Структура;
	СтруктураДанныхРаздел6   = Новый Структура;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03200 = Новый Массив;
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017 = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", 3);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", 3);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел5", 2);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел8", 2);
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, СтруктураРеквизитовФормы.мИдГруппы211);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, СтруктураРеквизитовФормы.мИдГруппы212);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, СтруктураРеквизитовФормы.мИдГруппы311);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы50,  СтруктураРеквизитовФормы.мИдГруппы50);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  СтруктураРеквизитовФормы.мИдГруппы51);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52,  СтруктураРеквизитовФормы.мИдГруппы52);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  СтруктураРеквизитовФормы.мИдГруппы62);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  СтруктураРеквизитовФормы.мИдГруппы71);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  СтруктураРеквизитовФормы.мИдГруппы73);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81,  СтруктураРеквизитовФормы.мИдГруппы81);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы50,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81,  Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел4", "ТаблицаСтраницыРаздел4");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел7", "ТаблицаСтраницыРаздел7");
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы50,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81,  1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы50,  2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52,  5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81,  2);
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2023";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151054;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.08", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151054";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы211");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы212");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы311");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы50");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы51");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы52");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы62");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы71");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы73");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы81");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧислоДСДМ");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧисло15_10");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧисло16_10");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧисло17_10");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧисло16_15");
	
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("НомераСтраницРазделов3СКодомВидаДПИ03200");
	СтруктураРеквизитовФормы.Вставить("НомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	
	СтруктураРеквизитовФормы.Вставить("ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613");
	
	РегламентированнаяОтчетностьЗагрузка.ДополнитьСтруктуруРеквизитовПараметрамиКопирования(СтруктураРеквизитовФормы);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногоуровневыхРазделов()
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
	= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел7.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];

	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, ИмяТекТабличногоПоля);

	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		
		// Раздел 7 содержит несколько многострочных блоков,
		// Поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы71);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы73);
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы71 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы71].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы71);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ТаблицаДопСтрокГруппы71);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы73 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы73].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы73);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ТаблицаДопСтрокГруппы73);
		
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// Создаем исходную таблицу значений многостраничных разделов.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			СтрТаблицаСтраницы.Представление = "Новая страница";
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;

		Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(
				СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление    = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница = Истина;

		// Очищаем показатели текущей страницы и, в случае, если
		// страница содержит многострочный раздел, удаляем все
		// дополнительно созданные строки.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		// Выполняем расчет показателей добавленной страницы.
		Расчет(Форма, ИмяТекущейСтраницыПанели);

		Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы211;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел212";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы212;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел311";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы311;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы52;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 10;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел51";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы50;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы51;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы62;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы71;
	НовСтр.Область = "МногострочнаяЧасть71";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы73;
	НовСтр.Область = "МногострочнаяЧасть73";
	НовСтр.ВысотаСтроки = 12;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел81";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы81;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы50",  СтруктураРеквизитовФормы.мИдГруппы50);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52",  СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	ИдГрупп.Вставить("мИдГруппы81",  СтруктураРеквизитовФормы.мИдГруппы81);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы50",  СтруктураРеквизитовФормы.мИдГруппы50);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52",  СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	ИдГрупп.Вставить("мИдГруппы81",  СтруктураРеквизитовФормы.мИдГруппы81);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы211 Тогда
		ТекТабличноеПоле = "Раздел21";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы212 Тогда
		ТекТабличноеПоле = "Раздел212";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы311 Тогда
		ТекТабличноеПоле = "Раздел311";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы50 Тогда
		ТекТабличноеПоле = "Раздел51";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы51 Тогда
		ТекТабличноеПоле = "Раздел51";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы52 Тогда
		ТекТабличноеПоле = "Раздел5";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы62 Тогда
		ТекТабличноеПоле = "Раздел6";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы71 Тогда
		ТекТабличноеПоле = "Раздел7";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы73 Тогда
		ТекТабличноеПоле = "Раздел7";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы81 Тогда
		ТекТабличноеПоле = "Раздел81";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы50",  СтруктураРеквизитовФормы.мИдГруппы50);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52",  СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	ИдГрупп.Вставить("мИдГруппы81",  СтруктураРеквизитовФормы.мИдГруппы81);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы50",  СтруктураРеквизитовФормы.мИдГруппы50);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52",  СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	ИдГрупп.Вставить("мИдГруппы81",  СтруктураРеквизитовФормы.мИдГруппы81);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы211;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел212" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы212;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел311" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы311;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы52;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел51" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы62;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел81" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы81;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	Попытка
		ТабличныйДокумент.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
		Подписант 								= СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2023Кв1_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел211", ПрефиксИменМакетов + "Раздел211");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   ПрефиксИменМакетов + "Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел31",  ПрефиксИменМакетов + "Раздел31");
	СоответствиеРазделовМакетам.Вставить("Раздел4",   ПрефиксИменМакетов + "Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",   ПрефиксИменМакетов + "Раздел5");
	СоответствиеРазделовМакетам.Вставить("Раздел52",  ПрефиксИменМакетов + "Раздел52");
	СоответствиеРазделовМакетам.Вставить("Раздел6",   ПрефиксИменМакетов + "Раздел6");
	СоответствиеРазделовМакетам.Вставить("Раздел7",   ПрефиксИменМакетов + "Раздел7");
	СоответствиеРазделовМакетам.Вставить("Раздел72",  ПрефиксИменМакетов + "Раздел72");
	СоответствиеРазделовМакетам.Вставить("Раздел73",  ПрефиксИменМакетов + "Раздел73");
	СоответствиеРазделовМакетам.Вставить("Раздел8",   ПрефиксИменМакетов + "Раздел8");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если Парам1.ИмяСтраницы = "Раздел52" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы52;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы71;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел73" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы73;
	КонецЕсли;
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		// Определение исходного количества строк на листе МЧБ.
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 8;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел4" Тогда
			ИсхКолвоСтрокБлока = 3;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел52" Тогда
			ИсхКолвоСтрокБлока = 2;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел6" Тогда
			ИсхКолвоСтрокБлока = 7;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
			ИсхКолвоСтрокБлока = 9;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел73" Тогда
			ИсхКолвоСтрокБлока = 4;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
				КонецЦикла;
				
				Если Парам1.ИмяСтраницы <> "Раздел4" Тогда
					Если Сч > 1 Тогда
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							ИмяЯчейки = ТекущаяОбласть.Имя;
							Если Лев(ИмяЯчейки, 2) = "П0" И СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				Если Парам1.ИмяСтраницы = "Раздел4" Тогда
					МассивОчищаемыхОбластейТекущегоЛистаРаздел4 = Новый Массив;
					Если СписокЛистовМЧБ.Количество() > 1 Тогда
						НомерЛистаМЧБ = СписокЛистовМЧБ.Индекс(элЛистМЧБ) + 1;
						Если НомерЛистаМЧБ > 1 Тогда
							Для каждого ТекущаяОбласть Из ЛистМЧБ.Области Цикл
							ИмяЯчейки = Лев(ТекущаяОбласть.Имя, 13);
								Если ИмяЯчейки = "П000400001003" ИЛИ ИмяЯчейки = "П000400002003"
									ИЛИ ИмяЯчейки = "П000400003003" ИЛИ ИмяЯчейки = "П000400004003"
									ИЛИ ИмяЯчейки = "П000400005003" ИЛИ ИмяЯчейки = "П000400005004"
									ИЛИ ИмяЯчейки = "П000400005005" ИЛИ ИмяЯчейки = "П000400006003"
									ИЛИ ИмяЯчейки = "П000400007003" Тогда
									МассивОчищаемыхОбластейТекущегоЛистаРаздел4.Добавить(ТекущаяОбласть);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если НомерЛистаМЧБ < СписокЛистовМЧБ.Количество() Тогда
							Для каждого ТекущаяОбласть Из ЛистМЧБ.Области Цикл
								ИмяЯчейки = Лев(ТекущаяОбласть.Имя, 13);
								Если ИмяЯчейки = "П000400008003" ИЛИ ИмяЯчейки = "П000400009003"
									ИЛИ ИмяЯчейки = "П000400010003" ИЛИ ИмяЯчейки = "П000400011003"
									ИЛИ ИмяЯчейки = "П000400012003" ИЛИ ИмяЯчейки = "П000400013003"
									ИЛИ ИмяЯчейки = "П000400014003" ИЛИ ИмяЯчейки = "П000400015003"
									ИЛИ ИмяЯчейки = "П000400015503" ИЛИ ИмяЯчейки = "П000400016003"
									ИЛИ ИмяЯчейки = "П000400017003" Тогда
									МассивОчищаемыхОбластейТекущегоЛистаРаздел4.Добавить(ТекущаяОбласть);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Для каждого ОбластьСписка Из МассивОчищаемыхОбластейТекущегоЛистаРаздел4 Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			Если Область.Имя = "П000700005003" Тогда
				КоэфКтд = СокрЛП(Область.Значение);
				Если СтрДлина(КоэфКтд) = 3 Тогда
					КоэфКтд = СтрЗаменить(КоэфКтд, ",", ".");
					КоэфКтд = СтрЗаменить(КоэфКтд, ".0", ".-");
				Иначе
					КоэфКтд = "-.-";
				КонецЕсли;
				НовСтр.Значение = КоэфКтд;
				НовСтр.ЗначениеМЧБ = КоэфКтд;
			ИначеЕсли Область.Имя = "П000300022003" Тогда
				ЗначМЧБ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(Область.Значение, "ЧГ="), 10, "-", "Справа");
				НовСтр.Значение = ЗначМЧБ;
				НовСтр.ЗначениеМЧБ = ЗначМЧБ;
			Иначе
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000100000102") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000200004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000300019003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000400004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000500004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000700004003") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		ИначеЕсли Показатель.Имя = "П000400007003"
			ИЛИ СтрНайти(Показатель.Имя, "П000730000101") > 0
			ИЛИ СтрНайти(Показатель.Имя, "П000730000106") > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Показатель.ЗначениеМЧБ) Тогда
				Показатель.ЗначениеМЧБ = "--.----";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось заполнить область ""%1""';
																									|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		Если ИмяСтраницы = "Раздел7" Тогда
			СтруктураПараметров72 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметровСтраницы Цикл
				СтруктураПараметров72.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметров72.Вставить("ИмяСтраницы", "Раздел72");
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
			ВывестиНаПечатьЛист(СтруктураПараметров72, ОбщиеРеквизитыРазделов);
			СтруктураПараметров73 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметровСтраницы Цикл
				СтруктураПараметров73.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметров73.Вставить("ИмяСтраницы", "Раздел73");
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
			ВывестиНаПечатьЛист(СтруктураПараметров73, ОбщиеРеквизитыРазделов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма,
	ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
		ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки       = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	
	Если ИмяГруппы = "П0005000055" Тогда
		
		ПостфиксВИмениОбластиМногострочнаяЧасть = "1";
		
	ИначеЕсли ИмяГруппы = "П0005100001" Тогда
		
		ПостфиксВИмениОбластиМногострочнаяЧасть = "2";
	
	ИначеЕсли ИмяГруппы = "П0007100001" Тогда
		
		ПостфиксВИмениОбластиМногострочнаяЧасть = "71";
		
	ИначеЕсли ИмяГруппы = "П0007300001" Тогда
		
		ПостфиксВИмениОбластиМногострочнаяЧасть = "73";
		
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ  = КоординатаНиз;
			Верх = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
	
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
	
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти = Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти <> Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения
		= РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма,
		ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет,
		СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтаФорма, Новый Структура);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".';
								|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СохрТЗМногострочнойГруппы211 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы211].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
		СохрТЗМногострочнойГруппы212 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы212].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		СохрТЗМногострочнойГруппы311 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы311].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		СохрТЗМногострочнойГруппы4 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		СохрТЗМногострочнойГруппы50 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы50].Выгрузить();
		СохрТЗМногострочнойГруппы51 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы51].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		СохрТЗМногострочнойГруппы52 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы52].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		СохрТЗМногострочнойГруппы71 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы71].Выгрузить();
		СохрТЗМногострочнойГруппы73 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы73].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		СохрТЗМногострочнойГруппы81 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы81].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
				
				ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			Иначе
				
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы211].Загрузить(СохрТЗМногострочнойГруппы211);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы212].Загрузить(СохрТЗМногострочнойГруппы212);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы311].Загрузить(СохрТЗМногострочнойГруппы311);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Загрузить(СохрТЗМногострочнойГруппы4);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы50].Загрузить(СохрТЗМногострочнойГруппы50);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы51].Загрузить(СохрТЗМногострочнойГруппы51);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы52].Загрузить(СохрТЗМногострочнойГруппы52);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы71].Загрузить(СохрТЗМногострочнойГруппы71);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы73].Загрузить(СохрТЗМногострочнойГруппы73);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы81].Загрузить(СохрТЗМногострочнойГруппы81);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	КолУровнейРаздела = мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(ИмяТекРаздела, 7)]);
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		
		// Вывод листов с кодом "01012033".
		//
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
				Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
				
				УстановитьТипЗначений("Раздел21");
				
				Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
				
				Для Каждого ЭлСтруктуры Из Ветка2.Данные Цикл
					Если НомСтрокиВВетке2 > 1 И ЭлСтруктуры.Ключ = "П000200002003" Тогда
						Продолжить;
					КонецЕсли;
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлСтруктуры Из Ветка21.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				// Вывод листа с кодом "01012033".
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
				// Определение количества листов с кодом "01012040",
				// относящихся к выведенному листу с кодом "01012033".
				//
				НомерСтроки211 = 0;
				Пока Ветка21.Данные.Свойство("П000211000101_" + Формат(НомерСтроки211 + 1, "ЧГ=")) Цикл
					НомерСтроки211 = НомерСтроки211 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки211 / 3;
				ЦелКол = Цел(НомерСтроки211 / 3);
				КолЛистов01012040ПоКолСтрок211 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				КолЛистов01012040ПоКолСтрок212 = 0;
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка212 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					НомерСтроки212 = 0;
					Пока Ветка212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212 + 1, "ЧГ=")) Цикл
						НомерСтроки212 = НомерСтроки212 + 1;
					КонецЦикла;
					ДробКол = НомерСтроки212 / 3;
					ЦелКол = Цел(НомерСтроки212 / 3);
					КолЛистов01012040ПоКолСтрок212 = КолЛистов01012040ПоКолСтрок212 + ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				КонецЦикла;
				// Необходимое количество листов с кодом "01012040".
				КолЛистов01012040 = Макс(КолЛистов01012040ПоКолСтрок211, КолЛистов01012040ПоКолСтрок212);
				
				// Формирование данных для заполнения листов с кодом "01012040".
				//
				МассивДанных211 = Новый Массив;
				Для НомЛиста = 1 По КолЛистов01012040 Цикл
					ПриращениеКНомеру = (НомЛиста - 1) * 3;
					СтруктДанных211 = Новый Структура;
					Для НомСтрВЭлементеМассива = 1 По 3 Цикл
						ИмяП000211000101 = "П000211000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000211000102 = "П000211000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						НовИмяП000211000101 = "П000211000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000211000102 = "П000211000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных211.Вставить(НовИмяП000211000101, "");
						СтруктДанных211.Вставить(НовИмяП000211000102, 0);
						Если Ветка21.Данные.Свойство(ИмяП000211000101) Тогда
							СтруктДанных211[НовИмяП000211000101] = Ветка21.Данные[ИмяП000211000101];
							СтруктДанных211[НовИмяП000211000102] = Ветка21.Данные[ИмяП000211000102];
						КонецЕсли;
					КонецЦикла;
					МассивДанных211.Добавить(СтруктДанных211);
				КонецЦикла;
				МассивДанных212 = Новый Массив;
				НомСтрокиВВетке21 = 1;
				НомЛиста = 1;
				Пока НомЛиста <= КолЛистов01012040 Цикл
					Если НомСтрокиВВетке21 <= Ветка21.Строки.Количество() Тогда
						Ветка212 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
						НомерСтроки212 = 0;
						Пока Ветка212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212 + 1, "ЧГ=")) Цикл
							НомерСтроки212 = НомерСтроки212 + 1;
						КонецЦикла;
						ДробКол = НомерСтроки212 / 3;
						ЦелКол = Цел(НомерСтроки212 / 3);
						КолЛистовИзТекВетки212 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
						Для НомЛистаИзТекВетки212 = 1 По КолЛистовИзТекВетки212 Цикл
							ПриращениеКНомеру = (НомЛистаИзТекВетки212 - 1) * 3;
							СтруктДанных212 = Новый Структура;
							Для НомСтрВЭлементеМассива = 1 По 3 Цикл
								ИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
								ИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
								НовИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
								НовИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
								СтруктДанных212.Вставить(НовИмяП000212000101, "");
								СтруктДанных212.Вставить(НовИмяП000212000102, 0);
								Если Ветка212.Данные.Свойство(ИмяП000212000101) Тогда
									СтруктДанных212[НовИмяП000212000101] = Ветка212.Данные[ИмяП000212000101];
									СтруктДанных212[НовИмяП000212000102] = Ветка212.Данные[ИмяП000212000102];
								КонецЕсли;
								Если НомЛистаИзТекВетки212 = 1 Тогда
									Для каждого Показатель Из Ветка212.Данные Цикл
										Если Лев(Показатель.Ключ, 2) = "П0" И СтрНайти(Показатель.Ключ, "_") > 0 Тогда
											Продолжить;
										КонецЕсли;
										СтруктДанных212.Вставить(Показатель.Ключ, Показатель.Значение);
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
							МассивДанных212.Добавить(СтруктДанных212);
						КонецЦикла;
					Иначе
						СтруктДанных212 = Новый Структура;
						Для НомСтрВЭлементеМассива = 1 По 3 Цикл
							НовИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							НовИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							СтруктДанных212.Вставить(НовИмяП000212000101, "");
							СтруктДанных212.Вставить(НовИмяП000212000102, 0);
						КонецЦикла;
						МассивДанных212.Добавить(СтруктДанных212);
						КолЛистовИзТекВетки212 = 1;
					КонецЕсли;
					НомСтрокиВВетке21 = НомСтрокиВВетке21 + 1;
					НомЛиста = НомЛиста + КолЛистовИзТекВетки212;
				КонецЦикла;
				
				// Вывод листов с кодом "01012040".
				//
				Для НомЛиста = 1 По КолЛистов01012040 Цикл
					
					ТабличныйДокумент.Очистить();
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
					
					УстановитьТипЗначений("Раздел21");
					
					ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел21");
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных211[НомЛиста - 1]);
					
					СтруктураГруппы = Неопределено;
					
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
					
					УстановитьТипЗначений("Раздел212");
					
					ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел212");
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных212[НомЛиста - 1]);
					
					СтруктураГруппы = Неопределено;
					
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					Для Каждого ЭлСтруктуры Из МассивДанных211[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ЭлСтруктуры Из МассивДанных212[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметров211 = Новый Структура;
					Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
						СтруктураПараметров211.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
					КонецЦикла;
					СтруктураПараметров211.Вставить("ИмяСтраницы", "Раздел211");
					
					// Вывод листа с кодом "01012040".
					ВывестиНаПечатьЛист(СтруктураПараметров211, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка3 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
			
			УстановитьТипЗначений("Раздел3");
			
			Для Каждого ЭлСтруктуры Из Ветка3.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Вывод листов с кодом "01012057".
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
			Для НомСтрокиВВетке3 = 1 По Ветка3.Строки.Количество() Цикл
				
				Ветка31 = Ветка3.Строки[НомСтрокиВВетке3 - 1];
				
				Для НомСтрокиВВетке31 = 1 По Ветка31.Строки.Количество() Цикл
					
					Ветка311 = Ветка31.Строки[НомСтрокиВВетке31 - 1];
					
					// Определение текущего количества листов с кодом "01012064".
					//
					НомерСтроки311 = 0;
					Пока Ветка311.Данные.Свойство("П000311000101_" + Формат(НомерСтроки311 + 1, "ЧГ=")) Цикл
						НомерСтроки311 = НомерСтроки311 + 1;
					КонецЦикла;
					ДробКол = НомерСтроки311 / 3;
					ЦелКол = Цел(НомерСтроки311 / 3);
					КолТекЛистов01012064ПоКолСтрок311 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Формирование данных многосторочной части 3.1.1 для заполнения листов с кодом "01012064".
					//
					МассивДанных311 = Новый Массив;
					Для НомЛиста = 1 По КолТекЛистов01012064ПоКолСтрок311 Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * 3;
						СтруктДанных311 = Новый Структура;
						Для НомСтрВЭлементеМассива = 1 По 3 Цикл
							ИмяП000311000101 = "П000311000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
							ИмяП000311000102 = "П000311000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
							НовИмяП000311000101 = "П000311000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							НовИмяП000311000102 = "П000311000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							СтруктДанных311.Вставить(НовИмяП000311000101, "");
							СтруктДанных311.Вставить(НовИмяП000311000102, 0);
							Если Ветка311.Данные.Свойство(ИмяП000311000101) Тогда
								СтруктДанных311[НовИмяП000311000101] = Ветка311.Данные[ИмяП000311000101];
								СтруктДанных311[НовИмяП000311000102] = Ветка311.Данные[ИмяП000311000102];
							КонецЕсли;
						КонецЦикла;
						МассивДанных311.Добавить(СтруктДанных311);
					КонецЦикла;
					
					Для НомЛиста = 1 По КолТекЛистов01012064ПоКолСтрок311 Цикл
						
						ТабличныйДокумент.Очистить();
						
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
						Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
						
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
						Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
						
						ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел311");
						
						ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных311[НомЛиста - 1]);
						
						СтруктураГруппы = Неопределено;
						
						мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
						
						СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
						
						ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
						
						Если НомСтрокиВВетке31 = 1 И НомЛиста = 1 Тогда
							Для Каждого ЭлСтруктуры Из Ветка31.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = ЭлСтруктуры.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если НомЛиста = 1 Тогда
							Для Каждого ЭлСтруктуры Из Ветка311.Данные Цикл
								Если Лев(ЭлСтруктуры.Ключ, 11) = "П0003110001" Тогда
									Продолжить;
								КонецЕсли;
								Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = ЭлСтруктуры.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Для Каждого ЭлСтруктуры Из МассивДанных311[НомЛиста - 1] Цикл
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураПараметров31 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметров31.Вставить("ИмяСтраницы", "Раздел31");
						
						// Вывод листа с кодом "01012064".
						ВывестиНаПечатьЛист(СтруктураПараметров31, ОбщиеРеквизитыРазделов, СтрПоля);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
		
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка5 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке5 = 1 По Ветка5.Строки.Количество() Цикл
				
				Ветка51 = Ветка5.Строки[НомСтрокиВВетке5 - 1];
				
				// Определение текущего количества листов с кодом "01012088".
				//
				НомерСтроки51 = 0;
				Пока Ветка51.Данные.Свойство("П000510000101_" + Формат(НомерСтроки51 + 1, "ЧГ=")) Цикл
					НомерСтроки51 = НомерСтроки51 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки51 / 12;
				ЦелКол = Цел(НомерСтроки51 / 12);
				КолТекЛистов01012088ПоКолСтрок51 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				НомерСтроки55 = 0;
				Пока Ветка51.Данные.Свойство("П000500005501_" + Формат(НомерСтроки55 + 1, "ЧГ=")) Цикл
					НомерСтроки55 = НомерСтроки55 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки55 / 4;
				ЦелКол = Цел(НомерСтроки55 / 4);
				КолТекЛистов01012088ПоКолСтрок55 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				КолТекЛистов01012088ПоКолСтрок = Макс(КолТекЛистов01012088ПоКолСтрок51, КолТекЛистов01012088ПоКолСтрок55);
				
				// Формирование данных многосторочной части 5.1 для заполнения листов с кодом "01012088".
				//
				МассивДанных51 = Новый Массив;
				Для НомЛиста = 1 По КолТекЛистов01012088ПоКолСтрок Цикл
					ПриращениеКНомеруСтроки51 = (НомЛиста - 1) * 12;
					СтруктДанных51 = Новый Структура;
					Для НомСтрВЭлементеМассива = 1 По 12 Цикл
						ИмяП000510000101 = "П000510000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки51, "ЧГ=");
						ИмяП000510000102 = "П000510000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки51, "ЧГ=");
						НовИмяП000510000101 = "П000510000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000510000102 = "П000510000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных51.Вставить(НовИмяП000510000101, "");
						СтруктДанных51.Вставить(НовИмяП000510000102, 0);
						Если Ветка51.Данные.Свойство(ИмяП000510000101) Тогда
							СтруктДанных51[НовИмяП000510000101] = Ветка51.Данные[ИмяП000510000101];
							СтруктДанных51[НовИмяП000510000102] = Ветка51.Данные[ИмяП000510000102];
						КонецЕсли;
					КонецЦикла;
					
					ПриращениеКНомеруСтроки55 = (НомЛиста - 1) * 4;
					Для НомСтрВЭлементеМассива = 1 По 4 Цикл
						ИмяП000500005501 = "П000500005501_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки55, "ЧГ=");
						ИмяП000500005502 = "П000500005502_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки55, "ЧГ=");
						НовИмяП000500005501 = "П000500005501_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000500005502 = "П000500005502_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных51.Вставить(НовИмяП000500005501, "");
						СтруктДанных51.Вставить(НовИмяП000500005502, 0);
						Если Ветка51.Данные.Свойство(ИмяП000500005501) Тогда
							СтруктДанных51[НовИмяП000500005501] = Ветка51.Данные[ИмяП000500005501];
							СтруктДанных51[НовИмяП000500005502] = Ветка51.Данные[ИмяП000500005502];
						КонецЕсли;
					КонецЦикла;
					МассивДанных51.Добавить(СтруктДанных51);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолТекЛистов01012088ПоКолСтрок Цикл
					
					ТабличныйДокумент.Очистить();
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел5"));
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
					
					УстановитьТипЗначений("Раздел51");
					
					Для НомМнгГруппы = 1 По 2 Цикл
						
						Если НомМнгГруппы = 1 Тогда
							ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы51;
						ИначеЕсли НомМнгГруппы = 2 Тогда
							ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы50;
						КонецЕсли;
												
						ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных51[НомЛиста - 1]);
						
						СтруктураГруппы = Неопределено;
						
						мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
						
						СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
						
						ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
						
					КонецЦикла;
					
					Если НомСтрокиВВетке5 = 1 И НомЛиста = 1 Тогда
						Для Каждого ЭлСтруктуры Из Ветка5.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если НомЛиста = 1 Тогда
						Для Каждого ЭлСтруктуры Из Ветка51.Данные Цикл
							Если Лев(ЭлСтруктуры.Ключ, 11) = "П0005100001"
							 ИЛИ Лев(ЭлСтруктуры.Ключ, 11) = "П0005000055" Тогда
								Продолжить;
							КонецЕсли;
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Для Каждого ЭлСтруктуры Из МассивДанных51[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					// Вывод листа с кодом "01012088".
					ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
				// Определение текущего количества листов с кодом "01012095".
				//
				НомерСтроки52 = 0;
				Пока Ветка5.Данные.Свойство("П000520000101_" + Формат(НомерСтроки52 + 1, "ЧГ=")) Цикл
					НомерСтроки52 = НомерСтроки52 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки52 / 2;
				ЦелКол = Цел(НомерСтроки52 / 2);
				КолТекЛистов01012095ПоКолСтрок52 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
								
				Если НомСтрокиВВетке5 > 1 Тогда
					КолТекЛистов01012095ПоКолСтрок52 = 1;
				КонецЕсли;
				
				// Формирование данных многосторочной части 5.2 для заполнения листов с кодом "01012095".
				//
				МассивДанных52 = Новый Массив;
				Для НомЛиста = 1 По КолТекЛистов01012095ПоКолСтрок52 Цикл
					ПриращениеКНомеруСтроки52 = (НомЛиста - 1) * 2;
					СтруктДанных52 = Новый Структура;
					Для НомСтрВЭлементеМассива = 1 По 2 Цикл
						ИмяП000520000101 = "П000520000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки52, "ЧГ=");
						ИмяП000520000102 = "П000520000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки52, "ЧГ=");
						ИмяП000520000103 = "П000520000103_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки52, "ЧГ=");
						ИмяП000520000104 = "П000520000104_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки52, "ЧГ=");
						ИмяП000520000105 = "П000520000105_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеруСтроки52, "ЧГ=");
						НовИмяП000520000101 = "П000520000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000520000102 = "П000520000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000520000103 = "П000520000103_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000520000104 = "П000520000104_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000520000105 = "П000520000105_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных52.Вставить(НовИмяП000520000101, "");
						СтруктДанных52.Вставить(НовИмяП000520000102, 0);
						СтруктДанных52.Вставить(НовИмяП000520000103, 0);
						СтруктДанных52.Вставить(НовИмяП000520000104, 0);
						СтруктДанных52.Вставить(НовИмяП000520000105, 0);
						Если Ветка5.Данные.Свойство(ИмяП000520000101)
						   И НомСтрокиВВетке5 = 1 Тогда
							СтруктДанных52[НовИмяП000520000101] = Ветка5.Данные[ИмяП000520000101];
							СтруктДанных52[НовИмяП000520000102] = Ветка5.Данные[ИмяП000520000102];
							СтруктДанных52[НовИмяП000520000103] = Ветка5.Данные[ИмяП000520000103];
							СтруктДанных52[НовИмяП000520000104] = Ветка5.Данные[ИмяП000520000104];
							СтруктДанных52[НовИмяП000520000105] = Ветка5.Данные[ИмяП000520000105];
						КонецЕсли;
					КонецЦикла;
					МассивДанных52.Добавить(СтруктДанных52);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолТекЛистов01012095ПоКолСтрок52 Цикл
					
					ТабличныйДокумент.Очистить();
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел5"));
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
					
					УстановитьТипЗначений("Раздел51");
					
					ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы52;
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных52[НомЛиста - 1]);
						
					СтруктураГруппы = Неопределено;
						
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
						
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
						
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					Если НомЛиста = 1 Тогда
						Для Каждого ЭлСтруктуры Из Ветка51.Данные Цикл
							Если Лев(ЭлСтруктуры.Ключ, 11) = "П0005100001"
							 ИЛИ Лев(ЭлСтруктуры.Ключ, 11) = "П0005000055" Тогда
								Продолжить;
							КонецЕсли;
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Для Каждого ЭлСтруктуры Из МассивДанных52[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметров52 = Новый Структура;
					Для Каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
						СтруктураПараметров52.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
					КонецЦикла;
					СтруктураПараметров52.Вставить("ИмяСтраницы", "Раздел52");
					
					// Вывод листа с кодом "01012095".
					ВывестиНаПечатьЛист(СтруктураПараметров52, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел8" Тогда
		
		// Вывод листов с кодом "01012149".
		//
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка8 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке8 = 1 По Ветка8.Строки.Количество() Цикл
				
				Ветка81 = Ветка8.Строки[НомСтрокиВВетке8 - 1];
				
				// Определение текущего количества листов с кодом "01012149".
				//
				НомерСтрокиМнЧ = 0;
				Пока Ветка81.Данные.Свойство("П000810000101_" + Формат(НомерСтрокиМнЧ + 1, "ЧГ=")) Цикл
					НомерСтрокиМнЧ = НомерСтрокиМнЧ + 1;
				КонецЦикла;
				ДробКол = НомерСтрокиМнЧ / 3;
				ЦелКол = Цел(НомерСтрокиМнЧ / 3);
				КолТекЛистов01012149ПоКолСтрокМнЧ = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				// Формирование данных многосторочной части 8.1 для заполнения листов с кодом "01012149".
				//
				МассивДанныхМнЧ = Новый Массив;
				Для НомЛиста = 1 По КолТекЛистов01012149ПоКолСтрокМнЧ Цикл
					ПриращениеКНомеру = (НомЛиста - 1) * 3;
					СтруктДанныхМнЧ = Новый Структура;
					Для НомСтрВЭлементеМассива = 1 По 3 Цикл
						ИмяП000810000101 = "П000810000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000810000102 = "П000810000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						НовИмяП000810000101 = "П000810000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000810000102 = "П000810000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанныхМнЧ.Вставить(НовИмяП000810000101, "");
						СтруктДанныхМнЧ.Вставить(НовИмяП000810000102, 0);
						Если Ветка81.Данные.Свойство(ИмяП000810000101) Тогда
							СтруктДанныхМнЧ[НовИмяП000810000101] = Ветка81.Данные[ИмяП000810000101];
							СтруктДанныхМнЧ[НовИмяП000810000102] = Ветка81.Данные[ИмяП000810000102];
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ.Добавить(СтруктДанныхМнЧ);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолТекЛистов01012149ПоКолСтрокМнЧ Цикл
					
					ТабличныйДокумент.Очистить();
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
					Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел81"));
					
					ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел81");
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанныхМнЧ[НомЛиста - 1]);
					
					СтруктураГруппы = Неопределено;
					
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					Для Каждого ЭлСтруктуры Из Ветка8.Данные Цикл
						Если НомСтрокиВВетке8 > 1 И ЭлСтруктуры.Ключ = "П000800002003" Тогда
							Продолжить;
						КонецЕсли;
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					Если НомЛиста = 1 Тогда
						Для Каждого ЭлСтруктуры Из Ветка81.Данные Цикл
							Если Лев(ЭлСтруктуры.Ключ, 11) = "П0008100001" Тогда
								Продолжить;
							КонецЕсли;
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Для Каждого ЭлСтруктуры Из МассивДанныхМнЧ[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					// Вывод листа с кодом "01012149".
					ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписи    = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
			
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
    	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Если ЭлементСтруктуры.Ключ = "Раздел7" Тогда
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
															
							СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
								
						КонецЦикла;
						
					Иначе
						
						Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
								
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
							
							Ном = Ном + 1;
							
							Продолжить;
								
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
								
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
								
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21"
			И Раздел.ИмяСтраницы <> "Раздел212"
			И Раздел.ИмяСтраницы <> "Раздел5"
			И Раздел.ИмяСтраницы <> "Раздел51"
			И Раздел.ИмяСтраницы <> "Раздел3"
			И Раздел.ИмяСтраницы <> "Раздел31"
			И Раздел.ИмяСтраницы <> "Раздел311"
			И Раздел.ИмяСтраницы <> "Раздел8"
			И Раздел.ИмяСтраницы <> "Раздел81" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневые разделы и входящие в них подразделы.
		Если Раздел.ИмяСтраницы = "Раздел2"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел21"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел212"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел3"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел31"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел311"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел5"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел51"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел8"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел81" Тогда
			
			ИмяМногоуровневогоРаздела = Лев(Раздел.ИмяСтраницы, 7);
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяМногоуровневогоРаздела]);
			
			Если Раздел.ИмяСтраницы = "Раздел2"
			 ИЛИ Раздел.ИмяСтраницы = "Раздел3"
			 ИЛИ Раздел.ИмяСтраницы = "Раздел5"
			 ИЛИ Раздел.ИмяСтраницы = "Раздел8" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
						ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
						Если Раздел.ИмяСтраницы = "Раздел2" Тогда
							ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
							ТабличныйДокумент.Области["П000200003003"].Значение = "168";
						ИначеЕсли Раздел.ИмяСтраницы = "Раздел8" Тогда
							ТабличныйДокумент.Области["П000800001003"].Значение = "03100";
							ТабличныйДокумент.Области["П000800003003"].Значение = "168";
						КонецЕсли;
						СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Раздел21"
				ИЛИ Раздел.ИмяСтраницы = "Раздел31"
				ИЛИ Раздел.ИмяСтраницы = "Раздел51"
				ИЛИ Раздел.ИмяСтраницы = "Раздел81" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						Если ДеревоДанныхРазделУровень1.Строки[0].Данные.Количество() = 0 Тогда
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
							ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Раздел212" ИЛИ Раздел.ИмяСтраницы = "Раздел311" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						ДеревоДанныхРазделУровень2 = ДеревоДанныхРазделУровень1.Строки[0];
						Если ДеревоДанныхРазделУровень2.Строки.Количество() = 1 Тогда
							Если ДеревоДанныхРазделУровень2.Строки[0].Данные.Количество() = 0 Тогда
								ТабличныйДокумент.Очистить();
								ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			Если Раздел.ИмяСтраницы = "Раздел7" Тогда
				ТабличныйДокумент.Области["П000700005003"].Значение = "-";
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СохраненныеДанныеОтчета();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Восстанавливаем сохраненные данные многоуровневых разделов.
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21"
			И Раздел.ИмяСтраницы <> "Раздел212"
			И Раздел.ИмяСтраницы <> "Раздел3"
			И Раздел.ИмяСтраницы <> "Раздел31"
			И Раздел.ИмяСтраницы <> "Раздел311"
			И Раздел.ИмяСтраницы <> "Раздел5"
			И Раздел.ИмяСтраницы <> "Раздел51"
			И Раздел.ИмяСтраницы <> "Раздел8"
			И Раздел.ИмяСтраницы <> "Раздел81" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения")
		И СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина Тогда
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
			ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
	КонецЕсли;
	
	РасчетНаСервере("Раздел6");
	РасчетНаСервере("Раздел51");
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	
	Для Каждого Показатель Из ДанныеТит Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
					+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000100010") Тогда
			
			СтарыеИмена1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000010001003,П000010002003,П000010003003");
			НовыеИмена1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000100000101,П000100000102,П000100000103");
			
			НовыеДанные1 = Новый Структура;
			СтарыеДанные1 = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел1"];
			
			Для каждого Показатель Из СтарыеДанные1 Цикл
				ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
				ИндВМассиве = СтарыеИмена1.Найти(ПодстрокаПоиска);
				Если ИндВМассиве <> Неопределено Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена1[ИндВМассиве]);
					НовыеДанные1.Вставить(НовИмяПоказателя, Показатель.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_1 = ДанныеМногострочныхРазделов["П0000100010"];
			Для НомКолонки = 1 по 3 Цикл
				НовИмяКолонки = "П00010000010" + НомКолонки;
				ТЗ_1.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
			КонецЦикла;
			
			Для НомСтр1 = 1 По ТЗ_1.Количество() Цикл
				НомСтр1Стр = Формат(НомСтр1, "ЧГ=");
				Если НовыеДанные1.Свойство("П000100000101_" + НомСтр1Стр) Тогда
					СтрокаТЗ_1 = ТЗ_1[НомСтр1 - 1];
					СтрокаТЗ_1["П000100000101"] = НовыеДанные1["П000100000101_" + НомСтр1Стр];
					СтрокаТЗ_1["П000100000102"] = НовыеДанные1["П000100000102_" + НомСтр1Стр];
					СтрокаТЗ_1["П000100000103"] = НовыеДанные1["П000100000103_" + НомСтр1Стр];
				КонецЕсли;
			КонецЦикла;
			
			СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел1"] = НовыеДанные1;
			ДанныеМногострочныхРазделов.Вставить("П0001000001", ТЗ_1.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000100010");
			
		КонецЕсли;
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000662100") Тогда
			
			СтарыеИмена6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000066210001,П000066210002,П000066210003,П000066210004");
			НовыеИмена6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000620000101,П000620000102,П000620000103,П000620000104");
			
			НовыеДанные6 = Новый Структура;
			СтарыеДанные6 = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел6"];
			
			Для каждого Показатель Из СтарыеДанные6 Цикл
				ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
				ИндВМассиве = СтарыеИмена6.Найти(ПодстрокаПоиска);
				Если ИндВМассиве <> Неопределено Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена6[ИндВМассиве]);
					НовыеДанные6.Вставить(НовИмяПоказателя, Показатель.Значение);
				ИначеЕсли СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000600" Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00006", "П00060");
					НовыеДанные6.Вставить(НовИмяПоказателя, Показатель.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_6 = ДанныеМногострочныхРазделов["П0000662100"];
			Для НомКолонки = 1 по 4 Цикл
				НовИмяКолонки = "П00062000010" + НомКолонки;
				ТЗ_6.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
			КонецЦикла;
			
			Для НомСтр6 = 1 По ТЗ_6.Количество() Цикл
				НомСтр6Стр = Формат(НомСтр6, "ЧГ=");
				Если НовыеДанные6.Свойство("П000620000101_" + НомСтр6Стр) Тогда
					СтрокаТЗ_6 = ТЗ_6[НомСтр6 - 1];
					СтрокаТЗ_6["П000620000101"] = НовыеДанные6["П000620000101_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000102"] = НовыеДанные6["П000620000102_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000103"] = НовыеДанные6["П000620000103_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000104"] = НовыеДанные6["П000620000104_" + НомСтр6Стр];
				КонецЕсли;
			КонецЦикла;
			
			СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел6"] = НовыеДанные6;
			ДанныеМногострочныхРазделов.Вставить("П0006200001", ТЗ_6.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000662100");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				Если ЭлементСтруктуры.Ключ = "Раздел4" Тогда
					
					ТЗ_4 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					Для каждого СтрокаТЗ_4 Из ТЗ_4 Цикл
						
						СтарыеДанные = СтрокаТЗ_4.Данные;
						СтарыеДанныеДопСтрок = СтрокаТЗ_4.ДанныеДопСтрок;
						
						НовыеДанные = Новый Структура;
						НовыеДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма["П0004000001"], Тип("ТаблицаЗначений"));
						
						Для каждого Показатель Из СтарыеДанные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000400" Тогда
								Если Показатель.Ключ = "П000040007003" ИЛИ Показатель.Ключ = "П000040007004" Тогда
									Год = СтарыеДанные["П000040007004"];
									Мес = СтарыеДанные["П000040007003"];
									НовИмяПоказателя = "П000400007003";
									Если Год > 0 И Мес > 0 Тогда
										СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
										СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
										НовыеДанные.Вставить(НовИмяПоказателя, Дата(СтрГод + СтрМес + "01000000"));
									Иначе
										НовыеДанные.Вставить(НовИмяПоказателя,
											РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")));
									КонецЕсли;
								Иначе
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00004", "П00040");
									НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ТЗ_40 = Неопределено;
						НовыеДанныеДопСтрок.Очистить();
						Если СтрокаТЗ_4.ДополнительныеДанные <> Неопределено
							И СтрокаТЗ_4.ДополнительныеДанные.Свойство("П000044110000", ТЗ_40) Тогда
							НомСтр40 = 0;
							Для каждого СтрокаТЗ_40 Из ТЗ_40 Цикл
								НомСтр40 = НомСтр40 + 1;
								НомСтр40Стр = Формат(НомСтр40, "ЧГ=");
								НовыеДанные.Вставить("П000400000101_" + НомСтр40Стр, СтрокаТЗ_40["КодОснования"]);
								НовыеДанные.Вставить("П000400000102_" + НомСтр40Стр, СтрокаТЗ_40["Количество"]);
								НовСтрокаДопДанных40 = НовыеДанныеДопСтрок.Добавить();
								НовСтрокаДопДанных40["П000400000101"] = СтрокаТЗ_40["КодОснования"];
								НовСтрокаДопДанных40["П000400000102"] = СтрокаТЗ_40["Количество"];
							КонецЦикла;
						Иначе
							НовыеДанные.Вставить("П000400000101_1", "");
							НовыеДанные.Вставить("П000400000102_1", 0);
							НовыеДанныеДопСтрок.Добавить();
						КонецЕсли;
						
						СтрокаТЗ_4.Данные = НовыеДанные;
						
						СтрокаТЗ_4.ДанныеДопСтрок = НовыеДанныеДопСтрок;
						
					КонецЦикла;
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел7" Тогда
					
					ТЗ_7 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					Для каждого СтрокаТЗ_7 Из ТЗ_7 Цикл
						
						СтарыеДанные = СтрокаТЗ_7.Данные;
						СтарыеДанныеДопСтрок = СтрокаТЗ_7.ДанныеДопСтрок;
						
						НовыеДанные = Новый Структура;
						НовыеДанныеДопСтрок = Новый Структура;
						
						СтарыеИмена73 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000070017003,П000070018003,П000070019003,П000070020003,П000070021003,П000070022003");
						НовыеИмена73 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000730000101,П000730000102,П000730000103,П000730000104,П000730000105,П000730000106");
						
						Для каждого Показатель Из СтарыеДанные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000700" Тогда
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00007", "П00070");
								НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
							ИначеЕсли СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 11) = "П0000771000" Тогда
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П0000771000", "П0007100001");
								НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
							ИначеЕсли СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000700" Тогда
								ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
								ИндВМассиве = СтарыеИмена73.Найти(ПодстрокаПоиска);
								Если ИндВМассиве <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена73[ИндВМассиве]);
									Если ПодстрокаПоиска = "П000070017003" ИЛИ ПодстрокаПоиска = "П000070022003" Тогда
										Если ПодстрокаПоиска = "П000070017003" Тогда
											Год = СтарыеДанные[СтрЗаменить(Показатель.Ключ, "П000070017003", "П000070017004")];
										Иначе
											Год = СтарыеДанные[СтрЗаменить(Показатель.Ключ, "П000070022003", "П000070022004")];
										КонецЕсли;
										Мес = Показатель.Значение;
										Если Год > 0 И Мес > 0 Тогда
											СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
											СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
											НовыеДанные.Вставить(НовИмяПоказателя, Дата(СтрГод + СтрМес + "01000000"));
										Иначе
											НовыеДанные.Вставить(НовИмяПоказателя,
												РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")));
										КонецЕсли;
									Иначе
										НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если СтарыеДанныеДопСтрок.Свойство("П0000771000") Тогда
							
							ТЗ_71 = СтарыеДанныеДопСтрок["П0000771000"];
							
							Для НомКолонки = 1 по 3 Цикл
								НовИмяКолонки = "П00071000010" + НомКолонки;
								ТЗ_71.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
							КонецЦикла;
							
							НовыеДанныеДопСтрок.Вставить("П0007100001", ТЗ_71.Скопировать());
							
						КонецЕсли;
						
						Если СтарыеДанныеДопСтрок.Свойство("П0000700170") Тогда
							
							ТЗ_73 = СтарыеДанныеДопСтрок["П0000700170"];
							
							ТЗ_73.Колонки.Вставить(0, "П000730000101", ОписаниеТиповДата);
							ТЗ_73.Колонки.Добавить("П000730000106", ОписаниеТиповДата);
							
							Для каждого СтрокаТЗ_73 Из ТЗ_73 Цикл
								
								Мес = СтрокаТЗ_73["П000070017003"];
								Год = СтрокаТЗ_73["П000070017004"];
								Если Год > 0 И Мес > 0 Тогда
									СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
									СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
									СтрокаТЗ_73["П000730000101"] = Дата(СтрГод + СтрМес + "01000000");
								Иначе
									СтрокаТЗ_73["П000730000101"]
									= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
								КонецЕсли;
								
								Мес = СтрокаТЗ_73["П000070022003"];
								Год = СтрокаТЗ_73["П000070022004"];
								Если Год > 0 И Мес > 0 Тогда
									СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
									СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
									СтрокаТЗ_73["П000730000106"] = Дата(СтрГод + СтрМес + "01000000");
								Иначе
									СтрокаТЗ_73["П000730000106"]
									= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
								КонецЕсли;
								
							КонецЦикла;
							
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070017003"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070017004"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070022003"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070022004"]);
							
							Для НомКолонки = 2 по 5 Цикл
								НовИмяКолонки = "П00073000010" + НомКолонки;
								ТЗ_73.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
							КонецЦикла;
							
							НовыеДанныеДопСтрок.Вставить("П0007300001", ТЗ_73.Скопировать());
							
						КонецЕсли;
						
						СтрокаТЗ_7.Данные = НовыеДанные;
						
						СтрокаТЗ_7.ДанныеДопСтрок = НовыеДанныеДопСтрок;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
					
					ТЗ_21 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					ПредЗначКБК = Неопределено;
					
					Для каждого СтрокаТЗ_21 Из ТЗ_21 Цикл
						
						ТекЗначКБК = СокрЛП(СтрокаТЗ_21.Данные["П000020002003"]);
						
						Если ПредЗначКБК <> ТекЗначКБК Тогда
							
							ВеткаРаздел2 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел2.Данные = Новый Структура;
							
							ВеткаРаздел2.Данные.Вставить("П000200001003", "03100");
							ВеткаРаздел2.Данные.Вставить("П000200002003", ТекЗначКБК);
							ВеткаРаздел2.Данные.Вставить("П000200003003", "168");
							
							ПредЗначКБК = ТекЗначКБК;
							
						КонецЕсли;
						
						ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
						ВеткаРаздел21.Данные = Новый Структура;
						
						Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000200" Тогда
								Если Показатель.Ключ = "П000020002003" Тогда
									Продолжить;
								КонецЕсли;
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00002", "П00020");
								ВеткаРаздел21.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
							КонецЕсли;
						КонецЦикла;
						
						ТЗ_211 = Неопределено;
						Если СтрокаТЗ_21.ДополнительныеДанные <> Неопределено
							И СтрокаТЗ_21.ДополнительныеДанные.Свойство("П000022110000", ТЗ_211) Тогда
							НомСтр211 = 0;
							Для каждого СтрокаТЗ_211 Из ТЗ_211 Цикл
								НомСтр211 = НомСтр211 + 1;
								ВеткаРаздел21.Данные.Вставить("П000211000101_" + Формат(НомСтр211, "ЧГ="), СтрокаТЗ_211["КодОснования"]);
								ВеткаРаздел21.Данные.Вставить("П000211000102_" + Формат(НомСтр211, "ЧГ="), СтрокаТЗ_211["Количество"]);
							КонецЦикла;
						Иначе
							ВеткаРаздел21.Данные.Вставить("П000211000101_1", "");
							ВеткаРаздел21.Данные.Вставить("П000211000102_1", 0);
						КонецЕсли;
						
						НомСтрТЗ_212 = 0;
						Пока СтрокаТЗ_21.Данные.Свойство("П000022121000_" + Формат(НомСтрТЗ_212 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
							ВеткаРаздел212.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000200" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_212 + 1, "ЧГ=") Тогда
										НовИмяПоказателя = СтрЗаменить(Лев(Показатель.Ключ, 13), "П00002", "П00020");
										ВеткаРаздел212.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_212 = Неопределено;
							Если СтрокаТЗ_21.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_21.ДополнительныеДанные.Свойство("П000022121000_" + Формат(НомСтрТЗ_212 + 1, "ЧГ="), ТЗ_212) Тогда
								НомСтр212 = 0;
								Для каждого СтрокаТЗ_212 Из ТЗ_212 Цикл
									НомСтр212 = НомСтр212 + 1;
									ВеткаРаздел212.Данные.Вставить("П000212000101_" + Формат(НомСтр212, "ЧГ="), СтрокаТЗ_212["КодОснования"]);
									ВеткаРаздел212.Данные.Вставить("П000212000102_" + Формат(НомСтр212, "ЧГ="), СтрокаТЗ_212["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел212.Данные.Вставить("П000212000101_1", "");
								ВеткаРаздел212.Данные.Вставить("П000212000102_1", 0);
							КонецЕсли;
							НомСтрТЗ_212 = НомСтрТЗ_212 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел3" Тогда
					
					ТЗ_3 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					Для каждого СтрокаТЗ_3 Из ТЗ_3 Цикл
						
						ИндексСтрокиТЗ_3 = ТЗ_3.Индекс(СтрокаТЗ_3);
						Если ИндексСтрокиТЗ_3 > 0 Тогда
							ПредыдущаяСтрокаТЗ_3 = ТЗ_3[ИндексСтрокиТЗ_3 - 1];
							Если СокрЛП(СтрокаТЗ_3.Данные["П000030001003"]) = СокрЛП(ПредыдущаяСтрокаТЗ_3.Данные["П000030001003"])
							   И СокрЛП(СтрокаТЗ_3.Данные["П000030002003"]) = СокрЛП(ПредыдущаяСтрокаТЗ_3.Данные["П000030002003"])
							   И СокрЛП(СтрокаТЗ_3.Данные["П000030003003"]) = СокрЛП(ПредыдущаяСтрокаТЗ_3.Данные["П000030003003"])
							   И СтрокаТЗ_3.Данные["П000030004003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030004003"]
							   И СтрокаТЗ_3.Данные["П000030004503"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030004503"]
							   И СтрокаТЗ_3.Данные["П000030005003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030005003"]
							   И СтрокаТЗ_3.Данные["П000030006003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030006003"]
							   И СтрокаТЗ_3.Данные["П000030007003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030007003"]
							   И СтрокаТЗ_3.Данные["П000030008003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030008003"]
							   И СтрокаТЗ_3.Данные["П000030009003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030009003"]
							   И СтрокаТЗ_3.Данные["П000030010003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030010003"]
							   И СтрокаТЗ_3.Данные["П000030011003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030011003"]
							   И СтрокаТЗ_3.Данные["П000030012003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030012003"]
							   И СтрокаТЗ_3.Данные["П000030013003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030013003"]
							   И СтрокаТЗ_3.Данные["П000030014003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030014003"]
							   И СтрокаТЗ_3.Данные["П000030015003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030015003"]
							   И СтрокаТЗ_3.Данные["П000030016003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030016003"]
							   И СтрокаТЗ_3.Данные["П000030017003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030017003"]
							   И СтрокаТЗ_3.Данные["П000030018003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030018003"]
							   И СтрокаТЗ_3.Данные["П000030018503"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030018503"]
							   И СтрокаТЗ_3.Данные["П000030018703"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030018703"] Тогда
								
								ВеткаРаздел3 = ДеревоДанных.Строки[ДеревоДанных.Строки.Количество() - 1];
								
							Иначе
								
								ВеткаРаздел3 = ДеревоДанных.Строки.Добавить();
								ВеткаРаздел3.Данные = Новый Структура;
								
							КонецЕсли;
						Иначе
							
							ВеткаРаздел3 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел3.Данные = Новый Структура;
							
						КонецЕсли;
						
						РазрешенныеКодыСтрок3 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"010,020,030,040,045,050,060,070,080,090,100,110,120,130,140,150,160,170,180,185,187");
						Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок3.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00003", "П00030");
									ВеткаРаздел3.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
						ВеткаРаздел31.Данные = Новый Структура;
						
						РазрешенныеКодыСтрок31 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"190,200,210,215,220,230,240,250");
						Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок31.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00003", "П00030");
									ВеткаРаздел31.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						СтарыеИмена311 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000030029003,П000030029004,П000030029005,П000030029006,П000030029007");
						НовыеИмена311 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000300029003,П000300029004,П000300029005,П000300029006,П000300029007");
						
						НомСтрТЗ_311 = 0;
						Пока СтрокаТЗ_3.Данные.Свойство("П000033110000_" + Формат(НомСтрТЗ_311 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
							ВеткаРаздел311.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_311 + 1, "ЧГ=") Тогда
										ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
										ИндВМассиве = СтарыеИмена311.Найти(ПодстрокаПоиска);
										Если ИндВМассиве <> Неопределено Тогда
											НовИмяПоказателя = НовыеИмена311[ИндВМассиве];
										Иначе
											НовИмяПоказателя = СтрЗаменить(ПодстрокаПоиска, "П00003", "П00030");
										КонецЕсли;
										ВеткаРаздел311.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_311 = Неопределено;
							Если СтрокаТЗ_3.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_3.ДополнительныеДанные.Свойство("П000033110000_" + Формат(НомСтрТЗ_311 + 1, "ЧГ="), ТЗ_311) Тогда
								НомСтр311 = 0;
								Для каждого СтрокаТЗ_311 Из ТЗ_311 Цикл
									НомСтр311 = НомСтр311 + 1;
									ВеткаРаздел311.Данные.Вставить("П000311000101_" + Формат(НомСтр311, "ЧГ="), СтрокаТЗ_311["КодОснования"]);
									ВеткаРаздел311.Данные.Вставить("П000311000102_" + Формат(НомСтр311, "ЧГ="), СтрокаТЗ_311["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел311.Данные.Вставить("П000311000101_1", "");
								ВеткаРаздел311.Данные.Вставить("П000311000102_1", 0);
							КонецЕсли;
							НомСтрТЗ_311 = НомСтрТЗ_311 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел5" Тогда
					
					ТЗ_5 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					Для каждого СтрокаТЗ_5 Из ТЗ_5 Цикл
						
						ВеткаРаздел5 = ДеревоДанных.Строки.Добавить();
						ВеткаРаздел5.Данные = Новый Структура;
						
						РазрешенныеКодыСтрок5 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"010,020,030,040,070,080,090,100,110,120,130,140,150,160");
						Для каждого Показатель Из СтрокаТЗ_5.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000500" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок5.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00005", "П00050");
									ВеткаРаздел5.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						НомСтрТЗ_51 = 0;
						Пока СтрокаТЗ_5.Данные.Свойство("П000055110000_" + Формат(НомСтрТЗ_51 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
							ВеткаРаздел51.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_5.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000500" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_51 + 1, "ЧГ=") Тогда
										НовИмяПоказателя = СтрЗаменить(Лев(Показатель.Ключ, 13), "П00005", "П00050");
										ВеткаРаздел51.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_51 = Неопределено;
							Если СтрокаТЗ_5.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_5.ДополнительныеДанные.Свойство("П000055110000_" + Формат(НомСтрТЗ_51 + 1, "ЧГ="), ТЗ_51) Тогда
								НомСтр51 = 0;
								Для каждого СтрокаТЗ_51 Из ТЗ_51 Цикл
									НомСтр51 = НомСтр51 + 1;
									ВеткаРаздел51.Данные.Вставить("П000510000101_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["КодОснования"]);
									ВеткаРаздел51.Данные.Вставить("П000510000102_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел51.Данные.Вставить("П000510000101_1", "");
								ВеткаРаздел51.Данные.Вставить("П000510000102_1", 0);
							КонецЕсли;
							НомСтрТЗ_51 = НомСтрТЗ_51 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел8" Тогда
					
					ТЗ_8 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					ПредЗначКБК = Неопределено;
					
					Для каждого СтрокаТЗ_8 Из ТЗ_8 Цикл
						
						ТекЗначКБК = СокрЛП(СтрокаТЗ_8.Данные["П000800002003"]);
						
						Если ПредЗначКБК <> ТекЗначКБК Тогда
							
							ВеткаРаздел8 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел8.Данные = Новый Структура;
							
							ВеткаРаздел8.Данные.Вставить("П000800001003", "03100");
							ВеткаРаздел8.Данные.Вставить("П000800002003", ТекЗначКБК);
							ВеткаРаздел8.Данные.Вставить("П000800003003", "168");
							
							ПредЗначКБК = ТекЗначКБК;
							
						КонецЕсли;
						
						НомСтрТЗ_81 = 0;
						Пока СтрокаТЗ_8.Данные.Свойство("П000810000100_" + Формат(НомСтрТЗ_81 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел812 = ВеткаРаздел8.Строки.Добавить();
							ВеткаРаздел812.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_8.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0008000" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_81 + 1, "ЧГ=") Тогда
										ВеткаРаздел812.Данные.Вставить(Лев(Показатель.Ключ, 13), Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_81 = Неопределено;
							Если СтрокаТЗ_8.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_8.ДополнительныеДанные.Свойство("П000810000100_" + Формат(НомСтрТЗ_81 + 1, "ЧГ="), ТЗ_81) Тогда
								НомСтр811 = 0;
								Для каждого СтрокаТЗ_81 Из ТЗ_81 Цикл
									НомСтр811 = НомСтр811 + 1;
									ВеткаРаздел812.Данные.Вставить("П000810000101_" + Формат(НомСтр811, "ЧГ="), СтрокаТЗ_81["КодОснования"]);
									ВеткаРаздел812.Данные.Вставить("П000810000102_" + Формат(НомСтр811, "ЧГ="), СтрокаТЗ_81["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел812.Данные.Вставить("П000810000101_1", "");
								ВеткаРаздел812.Данные.Вставить("П000810000102_1", 0);
							КонецЕсли;
							
							НомСтрТЗ_81 = НомСтрТЗ_81 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200015003");
	// Раздел 2.1.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200026003");
	
	// Раздел 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300005003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300010003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300018003");
	// Раздел 3.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300021003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300022003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300024003");
	// Раздел 3.1.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300030003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300031003");
	
	// Раздел 4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400017003", "П000400014003;П000400015003;П000400016003");
	
	// Раздел 5.1.
	Если СтруктураРеквизитовФормы["ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613"] Тогда
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500017003", "П000500001003;П000500009003;П000500015003;П000500016003;П000500016503");
		
	КонецЕсли;
	
	// Раздел 6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600004003", "П000600001003;П000600002003;П000600003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600009003", "П000600001003;П000600005003;П000600006003;П000600007003;П000600008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600010003", "П000600001003;П000600002003;П000600003003;П000600005003;П000600006003;П000600007003;П000600008003");
	// Для вычисления значений в графе 3 многострочной части подраздела 6.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000620000103", "П000620000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000620000104", "П000620000102;П000600001003;П000600002003;П000600003003;П000600005003;П000600006003;П000600007003;П000600008003");
	
	Если РассчитыватьСтроку070Раздела81(ЭтаФорма) Тогда
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000800007003", "П000800008003;П000800009003;П000800011003;П000800012003");
		
	КонецЕсли;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000800018003", "П000800015003;П000800016503");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.Вставить("ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613",
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20220930');
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	РегламентированнаяОтчетностьЗагрузка.ЗаполнитьПарметрыКопирования(ЭтотОбъект);
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			УстановитьКодПоМестуПоУмолчанию();
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		Если СтруктураРеквизитовФормы.мВыбраннаяФорма = СтруктураРеквизитовФормы.мСкопированаФорма 
			Или СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено Тогда
			
			ВосстановитьСохраненныеДанные();
		Иначе
			НачальныеОперацииСМногострочнымиБлоками();
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			УстановитьКодПоМестуПоУмолчанию();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		Если ТипЗнч(СтруктураДанныхРаздел1) = Тип("Структура") И СтруктураДанныхРаздел1.Свойство("П000100000102_1")
			И П0001000001.Количество() = 1 Тогда
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
			РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
			СтруктураПараметров);
			
			Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
				ОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
				СтруктураДанныхРаздел1.Вставить("П000100000102_1", ОКТМО);
				П0001000001[0]["П000100000102"] = ОКТМО;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	СформироватьСпискиВыбора();
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураПараметров
		= Новый Структура("Организация, ДатаЗначения", СтруктураРеквизитовФормы.Организация, ДатаПодписи);
		Если РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
			ТабличныйДокумент.Области.ПоМесту.Значение = "213";
		Иначе
			ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодОтчетногоПериода = МесяцОкончания + 70;
	Иначе
		КодОтчетногоПериода = МесяцОкончания;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел8";
	СтрокаУровня1.Представление            = "Раздел 8";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		Если СтрНайти(ИмяСтраницы, "Раздел2") > 0
		 ИЛИ СтрНайти(ИмяСтраницы, "Раздел3") > 0
		 ИЛИ СтрНайти(ИмяСтраницы, "Раздел5") > 0
		 ИЛИ СтрНайти(ИмяСтраницы, "Раздел8") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;

	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2023Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20230401'
						И (Область.Имя = "ПрВычет_Раздел2" ИЛИ Область.Имя = "ПрВычет_Раздел8") И КодПоказателя = "14" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20220901' Тогда
						
						Если Область.Имя = "ВидыПИ_Раздел5" И КодПоказателя = "10017" Тогда
							
							Продолжить;
							
						ИначеЕсли (Область.Имя = "КБК_Раздел1_20220101" ИЛИ Область.Имя = "КБК_Раздел5_20220101")
							И КодПоказателя = "18210701170011000110" Тогда
							
							Продолжить;
							
						ИначеЕсли (Область.Имя = "КБК_Раздел1_20220101" ИЛИ Область.Имя = "КБК_Раздел5_20220101")
							И КодПоказателя = "18210701030011000110" Тогда
							
							НовСтрока = ТаблСписка.Добавить();
							НовСтрока.Код = КодПоказателя;
							НовСтрока.Название
							= "Налог на добычу полезных ископаемых (за исключением полезных ископаемых, в отношении которых при "
							+ "налогообложении установлен рентный коэффициент, отличный от 1, полезных ископаемых в виде природных "
							+ "алмазов, угля, в том числе коксующегося, железных руд, многокомпонентной комплексной руды, в отношении "
							+ "которой при налогообложении установлен коэффициент, характеризующий стоимость ценных компонентов в руде)";
							
						Иначе
							
							НовСтрока = ТаблСписка.Добавить();
							НовСтрока.Код = КодПоказателя;
							НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
							
						КонецЕсли;
						
					ИначеЕсли ТекущаяДатаСеанса() < '20230201'
							И Область.Имя = "ПрВычет_Раздел5"
							И СокрЛП(КодПоказателя) = "13" Тогда
						
						Продолжить;
						
					Иначе
						
						НовСтрока = ТаблСписка.Добавить();
						НовСтрока.Код = КодПоказателя;
						НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);	
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2022 Тогда
		
		ИмяСекции_КБК_Раздел1 = "КБК_Раздел1_20220101";
		ИмяСекции_КБК_Раздел5 = "КБК_Раздел5_20220101";
		ИмяСекции_КБК_Раздел7 = "КБК_Раздел7_20220101";
		
	Иначе
		
		ИмяСекции_КБК_Раздел1 = "КБК_Раздел1";
		ИмяСекции_КБК_Раздел5 = "КБК_Раздел5";
		ИмяСекции_КБК_Раздел7 = "КБК_Раздел7";
		
	КонецЕсли;
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	Если СтруктураРеквизитовФормы.ИП Тогда
		ИмяСекцииФормРеорг = "ФормыРеорганизацииИП";
	Иначе
		ИмяСекцииФормРеорг = "ФормыРеорганизацииОрг";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора[ИмяСекцииФормРеорг]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100000101", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекции_КБК_Раздел1]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200002003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000211000101",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел211"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000212000101",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел212"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200023003",  0, ,
	"Выбор значения коэффициента Кд", КоллекцияСписковВыбора["КоэфКд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200013503",  2, ,
		"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрВычет_Раздел2"]);
	
	//Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300001003",  5, ,
	"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300002003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300003003",  3, ,
	"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300011003",  0, ,
	"Выбор значения коэффициента К Ов", КоллекцияСписковВыбора["КоэфКОв"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300017003",  0, ,
	"Выбор значения коэффициента Кгп", КоллекцияСписковВыбора["КоэфКгп"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000311000101",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел3"]);
	
	//Раздел 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400001003",  5, ,
	"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400002003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400003003",  3, ,
	"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000101",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400015503",  2, ,
		"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрВычет_Раздел4"]);
	
	//Раздел 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500001003",  5, ,
	"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500002003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекции_КБК_Раздел5]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500003003",  3, ,
	"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500005003",  0, ,
		"Выбор рентного коэффициента Крента", КоллекцияСписковВыбора["Крента"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500005103",  1, ,
		"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500005203",  2, ,
		"Выбор кода субъекта РФ", КоллекцияСписковВыбора["СубъектыРФ_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500005501",  2, ,
		"Выбор признака коэффициента к ставке налоге", КоллекцияСписковВыбора["ПризнакиКоэффКСтавкеНалога_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500016403",  2, ,
		"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрВычет_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000520000101",  2, ,
		"Выбор признака металла", КоллекцияСписковВыбора["ПризнакиМеталла_Раздел5"]);
	
	//Раздел 6.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000600011003",  3, ,
	"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000620000101",  5, ,
	"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел6"]);
	
	//Раздел 7.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекции_КБК_Раздел7]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700003003",  3, ,
	"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ_Раздел7"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700004503",  2, ,
		"Выбор кода субъекта РФ", КоллекцияСписковВыбора["СубъектыРФ_Раздел5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700005003",  0, ,
	"Выбор значения коэффициента Ктд", КоллекцияСписковВыбора["КоэфКтд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700005503",  0, ,
	"Выбор признака коэффициента Ктд", КоллекцияСписковВыбора["ПризнакиКоэфКтд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000710000101",  5, ,
	"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел7"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000710000102",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел7"]);
	
	//Раздел 8.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800002003", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел8"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800010003",  1, ,
	"Выбор признака коэффициента Кг", КоллекцияСписковВыбора["ПризнакиКоэфКг_Раздел8"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800011003",  0, ,
	"Выбор значения коэффициента Кг", КоллекцияСписковВыбора["КоэфКг_Раздел8"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800016003",  2, ,
		"Выбор признака налогового вычета", КоллекцияСписковВыбора["ПрВычет_Раздел8"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000810000101",  4, ,
	"Выбор кода основания налогообложения", КоллекцияСписковВыбора["ОснованияНалогообложения_Раздел8"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);

		Если Область.Имя = "П000700005003" Тогда
			Если СокрЛП(Область.Значение) = "0,0" Тогда
				ИсходноеЗначение = "0";
			ИначеЕсли СокрЛП(Область.Значение) = "1,0" Тогда
				ИсходноеЗначение = "1";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		
		Если Область.Имя = "П000700005003" Тогда
			ЗначПоказателя = СокрЛП(Область.Значение);
			Если ЗначПоказателя = "0" Тогда
				Область.Значение = "0,0";
			ИначеЕсли ЗначПоказателя = "1" Тогда
				Область.Значение = "1,0";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки508");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_NDPI_1_010_00_05_08_03.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_NDPI");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДПИ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",			СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг",		СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",			СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	+ "_" + ПараметрыВыгрузки.КодИФНС
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг),
			СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|71|72|73|74|75|76|77|78|79|80|81|82";
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	// Титульный лист.
	//
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
			Если Символы56КПП = "50" И ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту)
				И ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено
				И ПараметрыВыгрузки.ПоМесту <> "213"
				И ПараметрыВыгрузки.ПоМесту <> "216"
				И ПараметрыВыгрузки.ПоМесту <> "331" Тогда
				СообщитьВТС("Если 5-й и 6-й символы КПП организации равны 50, код места представления "
				+ "декларации должен принимать одно из значений: 213, 216, 331", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано полное наименование налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияИП) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяИП) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНС) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("На титульном листе не задан код места нахождения (учета)", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("На титульном листе задан некорректный код места нахождения (учета)", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту = "213" Тогда
		Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
		Если Символы56КПП <> "50" Тогда
			СообщитьВТС("Если код места представления декларации равен 213, "
			+ "5-й и 6-й символы КПП организации должны быть равны 50", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		СообщитьВТС("На титульном листе не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		СообщитьВТС("На титульном листе задано некорректное значение кода налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2")
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		ИначеЕсли (СтрРазделить("1,2,3,5,6,0", ",").Найти(ПараметрыВыгрузки.ФормРеорг)) = Неопределено Тогда
			СообщитьВТС("Неверно задан код формы реорганизации. "
				+ "Возможны значения: 1, 2, 3, 5, 6, 0", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации",
				"Титульный", "ИННРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации",
				"Титульный", "КППРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	НомерСтроки = 1;
	НомерСтрокиСтр = "1";
	ЗаполненХотяБыОдинИзБлоковРаздела1 = Ложь;
	Раздел1 = мДанныеОтчета.Раздел1;
	Пока Раздел1.Свойство("П000100000101_" + НомерСтрокиСтр) Цикл
		ИмяЯчейкиКБКРаздел1 = "П000100000101_" + НомерСтрокиСтр;
		ИмяЯчейкиОКТМОРаздел1 = "П000100000102_" + НомерСтрокиСтр;
		ИмяЯчейкиСуммаРаздел1 = "П000100000103_" + НомерСтрокиСтр;
		
		КБКРаздел1 = СокрЛП(Раздел1[ИмяЯчейкиКБКРаздел1]);
		ОКТМОРаздел1 = СокрЛП(Раздел1[ИмяЯчейкиОКТМОРаздел1]);
		СуммаРаздел1 = Раздел1[ИмяЯчейкиСуммаРаздел1];
		
		Если НЕ ЗначениеЗаполнено(КБКРаздел1)
			И НЕ ЗначениеЗаполнено(ОКТМОРаздел1)
			И НЕ ЗначениеЗаполнено(СуммаРаздел1) Тогда
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
			Продолжить;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела1 = Истина;
		
		ДлинаКБКРаздел1 = СтрДлина(КБКРаздел1);
		Если ДлинаКБКРаздел1 <> 20 Тогда
			СообщитьВТС("Раздел 1: в строке " + НомерСтрокиСтр + " не"
			+ ?(ДлинаКБКРаздел1 = 0, "", "верно") + " задан КБК", "Раздел1", ИмяЯчейкиКБКРаздел1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаОКТМОРаздел1 = СтрДлина(ОКТМОРаздел1);
		Если ДлинаОКТМОРаздел1 <> 11 И ДлинаОКТМОРаздел1 <> 8 Тогда
			СообщитьВТС("Раздел 1: в строке " + НомерСтрокиСтр + " не"
			+ ?(ДлинаОКТМОРаздел1 = 0, "", "верно") + " задан код по ОКТМО", "Раздел1", ИмяЯчейкиОКТМОРаздел1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела1 Тогда
		СообщитьВТС("Раздел 1: не заполнен ни один из блоков строки 010 - 030", "Раздел1", "П000100000101_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	// Определение необходимости проверки раздела 2.
	ДанныеРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	ПроверятьРаздел2 = Ложь;
	Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
		ЗаполненРаздел2 = НЕ СтраницаПуста(СтраницаРаздела2.Данные, "Раздел2", ДеревоВыгрузки);
		Если ЗаполненРаздел2 Тогда
			ПроверятьРаздел2 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", ДеревоВыгрузки);
			Если ЗаполненРаздел21 Тогда
				ПроверятьРаздел2 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
				ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки);
				Если ЗаполненРаздел212 Тогда
					ПроверятьРаздел2 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПроверятьРаздел2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка раздела 2.
	Если ПроверятьРаздел2 Тогда
		
		Возможные_ПрВычетРаздел21 = СтрРазделить("00,01,02,03,04,05,06,08,09,14", ",");
		Если ПараметрыВыгрузки.ДатаКонцаПериодаОтчета < '20230401' Тогда
			Возможные_ПрВычетРаздел21 = СтрРазделить("00,01,02,03,04,05,06,08,09", ",");
		КонецЕсли;
		
		Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
			
			НомерСтраницы = ДанныеРаздела2.Строки.Индекс(СтраницаРаздела2) + 1;
		
			// КБК.
			КБКРаздел2Длина = СтрДлина(СокрЛП(СтраницаРаздела2.Данные["П000200002003"]));
			Если КБКРаздел2Длина <> 20 Тогда
				СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
				+ ": не" + ?(КБКРаздел2Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел2", "П000200002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка раздела 2.1.
			// Должен быть заполнен хотя бы 1 экземпляр раздела 2.1.
			ЕстьЗаполненныйЭкземплярРаздела21 = Ложь;
			
			Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
				
				ЗаполненаСтраницаРаздела21 = Ложь;
				Если СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", ДеревоВыгрузки) Тогда
					Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
						Если СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки) Тогда
							Продолжить;
						Иначе
							ЗаполненаСтраницаРаздела21 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполненаСтраницаРаздела21 = Истина;
				КонецЕсли;
				Если НЕ ЗаполненаСтраницаРаздела21 Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела21 = Истина;
				
				НомерСтраницы21 = СтраницаРаздела2.Строки.Индекс(СтраницаРаздела21) + 1;
				
				КоординатыСтраницы21 = Строка(НомерСтраницы) + "," + Строка(НомерСтраницы21);
				
				ОКТМОРаздел21  = СокрЛП(СтраницаРаздела21.Данные["П000200004003"]);
				СерЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005003"]);
				НомЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005004"]);
				ВидЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005005"]);
				ПрВычетРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200013503"]);
				
				// ОКТМО.
				ОКТМОРаздел21Длина = СтрДлина(ОКТМОРаздел21);
				Если НЕ (ОКТМОРаздел21Длина = 8 ИЛИ ОКТМОРаздел21Длина = 11) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ": не" + ?(ОКТМОРаздел21Длина = 0, "", "верно")
					+ " задан код по ОКТМО",
					"Раздел21", "П000200004003", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СерЛицРаздел21);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы21 + ": " + ТекстСообщения, "Раздел21", "П000200005003", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", НомЛицРаздел21);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы21 + ": " + ТекстСообщения, "Раздел21", "П000200005004", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", ВидЛицРаздел21);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы21 + ": " + ТекстСообщения, "Раздел21", "П000200005005", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ПрВычетРаздел21) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ":  не задан признак налогового вычета",
					"Раздел21", "П000200013503", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				ИначеЕсли Возможные_ПрВычетРаздел21.Найти(ПрВычетРаздел21) = Неопределено Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы21 + ": задан некорректный признак налогового вычета. Возможны значения: "
					+ СтрСоединить(Возможные_ПрВычетРаздел21, ", "), "Раздел21", "П000200013503", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 2.1.
				НомерСтроки211 = 1;
				НомерСтроки211Стр = "1";
				Пока СтраницаРаздела21.Данные.Свойство("П000211000101_" + НомерСтроки211Стр) Цикл
					
					КодОснНал = СокрЛП(СтраницаРаздела21.Данные["П000211000101_" + НомерСтроки211Стр]);
					КолНефти  = СтраницаРаздела21.Данные["П000211000102_" + НомерСтроки211Стр];
					
					Если НЕ ЗначениеЗаполнено(КодОснНал)
					   И НЕ ЗначениеЗаполнено(КолНефти) Тогда
						НомерСтроки211 = НомерСтроки211 + 1;
						НомерСтроки211Стр = Формат(НомерСтроки211, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					// Код основания налогообложения.
					КодОснНалДлина = СтрДлина(КодОснНал);
					Если КодОснНалДлина <> 4 Тогда
						СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
						+ " -> Расчет налога. Страница " + НомерСтраницы21
						+ ": в строке " + НомерСтроки211Стр + " не" + ?(КодОснНалДлина = 0, "", "верно")
						+ " задан код основания налогообложения",
						"Раздел21", "П000211000101_" + НомерСтроки211Стр, КоординатыСтраницы21);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					НомерСтроки211 = НомерСтроки211 + 1;
					НомерСтроки211Стр = Формат(НомерСтроки211, "ЧГ=");
					
				КонецЦикла;
				
				// Определение необходимости проверки текущего экземпляра раздела 2.1.2.
				ПроверятьРаздел212 = Ложь;
				Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
					ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки);
					Если ЗаполненРаздел212 Тогда
						ПроверятьРаздел212 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Проверка текущего экземпляра раздела 2.1.2.
				Если ПроверятьРаздел212 Тогда
					
					Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
						
						Если СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки) Тогда
							Продолжить;
						КонецЕсли;
						
						НомерСтраницы212 = СтраницаРаздела21.Строки.Индекс(СтраницаРаздела212) + 1;
						
						КоординатыСтраницы212 = Строка(НомерСтраницы) + "," + Строка(НомерСтраницы21) + "," + Строка(НомерСтраницы212);
						
						НаимЗалежиРаздел212 = СокрЛП(СтраницаРаздела212.Данные["П000200016003"]);
						
						// Наименование залежи.
						НаимЗалежиРаздел212Длина = СтрДлина(НаимЗалежиРаздел212);
						Если НаимЗалежиРаздел212Длина = 0 Тогда
							СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
							+ " -> Расчет налога. Страница " + НомерСтраницы21
							+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
							+ ": не задано наименование залежи", "Раздел212", "П000200016003", КоординатыСтраницы212);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						// Проверка многострочной части текущего экземпляра раздела 2.1.2.
						// Должна быть заполнена хотя бы 1 строка.
						ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 = Ложь;
						
						НомерСтроки212 = 1;
						НомерСтроки212Стр = "1";
						Пока СтраницаРаздела212.Данные.Свойство("П000212000101_" + НомерСтроки212Стр) Цикл
							
							КодОснНал212 = СокрЛП(СтраницаРаздела212.Данные["П000212000101_" + НомерСтроки212Стр]);
							КолНефти212  = СтраницаРаздела212.Данные["П000212000102_" + НомерСтроки212Стр];
							
							Если НЕ ЗначениеЗаполнено(КодОснНал212)
							   И НЕ ЗначениеЗаполнено(КолНефти212) Тогда
								НомерСтроки212 = НомерСтроки212 + 1;
								НомерСтроки212Стр = Формат(НомерСтроки212, "ЧГ=");
								Продолжить;
							КонецЕсли;
							
							ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 = Истина;
							
							// Код основания налогообложения.
							КодОснНал212Длина = СтрДлина(КодОснНал212);
							Если КодОснНал212Длина <> 4 Тогда
								СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
								+ " -> Расчет налога. Страница " + НомерСтраницы21
								+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
								+ ": в строке " + НомерСтроки212Стр + " не" + ?(КодОснНал212Длина = 0, "", "верно")
								+ " задан код основания налогообложения", "Раздел212",
								"П000212000101_" + НомерСтроки212Стр, КоординатыСтраницы212);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							НомерСтроки212 = НомерСтроки212 + 1;
							НомерСтроки212Стр = Формат(НомерСтроки212, "ЧГ=");
							
						КонецЦикла;
						
						Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 Тогда
							СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
							+ " -> Расчет налога. Страница " + НомерСтраницы21
							+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
							+ ": в строке 1 не задан код основания налогообложения",
							"Раздел212", "П000212000101_1" , КоординатыСтраницы212);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела21 Тогда
				СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
				+ ": должен быть заполнен раздел 2.1", "Раздел21", "П000200004003", НомерСтраницы + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	// Определение необходимости проверки раздела 3.
	ДанныеРаздела3 = ДанныеМногоуровневыхРазделов.Раздел3;
	ПроверятьРаздел3 = Ложь;
	Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
		ЗаполненРаздел3 = НЕ СтраницаПуста(СтраницаРаздела3.Данные, "Раздел3", ДеревоВыгрузки);
		Если ЗаполненРаздел3 Тогда
			ПроверятьРаздел3 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
			ЗаполненРаздел31 = НЕ СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", ДеревоВыгрузки);
			Если ЗаполненРаздел31 Тогда
				ПроверятьРаздел3 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
				ЗаполненРаздел311 = НЕ СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки);
				Если ЗаполненРаздел311 Тогда
					ПроверятьРаздел3 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПроверятьРаздел3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка раздела 3.
	Если ПроверятьРаздел3 Тогда
		
		Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
			
			НомерСтраницы3 = ДанныеРаздела3.Строки.Индекс(СтраницаРаздела3) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300001003"]));
			Если КодДПИРаздел3Длина <> 5 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(КодДПИРаздел3Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого", "Раздел3", "П000300001003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// КБК.
			КБКРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300002003"]));
			Если КБКРаздел3Длина <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(КБКРаздел3Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел3", "П000300002003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// ОКЕИ.
			ОКЕИРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300003003"]));
			Если ОКЕИРаздел3Длина <> 3 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(ОКЕИРаздел3Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ", "Раздел3", "П000300003003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьЗаполненныйЭкземплярРаздела31 = Ложь;
			
			Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
				
				ЗаполненаСтраницаРаздела31 = Ложь;
				Если СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", ДеревоВыгрузки) Тогда
					Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
						Если СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки) Тогда
							Продолжить;
						Иначе
							ЗаполненаСтраницаРаздела31 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполненаСтраницаРаздела31 = Истина;
				КонецЕсли;
				Если НЕ ЗаполненаСтраницаРаздела31 Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела31 = Истина;
				
				НомерСтраницы31 = СтраницаРаздела3.Строки.Индекс(СтраницаРаздела31) + 1;
				
				КоординатыСтраницы31 = Строка(НомерСтраницы3) + "," + Строка(НомерСтраницы31);
				
				ОКТМОРаздел31  = СокрЛП(СтраницаРаздела31.Данные["П000300019003"]);
				СерЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300020003"]);
				НомЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300020004"]);
				ВидЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300020005"]);
				
				// ОКТМО.
				ОКТМОРаздел31Длина = СтрДлина(ОКТМОРаздел31);
				Если НЕ (ОКТМОРаздел31Длина = 8 ИЛИ ОКТМОРаздел31Длина = 11) Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": не" + ?(ОКТМОРаздел31Длина = 0, "", "верно")
					+ " задан код по ОКТМО",
					"Раздел31", "П000300019003", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СерЛицРаздел31);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3 + " -> Расчет налога. Страница "
					+ НомерСтраницы31 + ": " + ТекстСообщения, "Раздел31", "П000300020003", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", НомЛицРаздел31);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3 + " -> Расчет налога. Страница "
					+ НомерСтраницы31 + ": " + ТекстСообщения, "Раздел31", "П000300020004", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", ВидЛицРаздел31);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3 + " -> Расчет налога. Страница "
					+ НомерСтраницы31 + ": " + ТекстСообщения, "Раздел31", "П000300020005", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела311 = Ложь;
				
				Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
					
					Если СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки) Тогда
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненныйЭкземплярРаздела311 = Истина;
					
					НомерСтраницы311 = СтраницаРаздела31.Строки.Индекс(СтраницаРаздела311) + 1;
					
					КоординатыСтраницы311 = Строка(НомерСтраницы3) + "," + Строка(НомерСтраницы31) + "," + Строка(НомерСтраницы311);
					
					НаимЗалежиРаздел311 = СокрЛП(СтраницаРаздела311.Данные["П000300026003"]);
					
					// Наименование залежи.
					НаимЗалежиРаздел311Длина = СтрДлина(НаимЗалежиРаздел311);
					Если НаимЗалежиРаздел311Длина = 0 Тогда
						СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
						+ " -> Расчет налога. Страница " + НомерСтраницы31
						+ " -> Полезное ископаемое, добытое из залежи. Страница " + НомерСтраницы311
						+ ": не задано наименование залежи", "Раздел311", "П000300026003", КоординатыСтраницы311);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Проверка многострочной части текущего экземпляра раздела 3.1.1.
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 = Ложь;
					
					НомерСтроки311 = 1;
					НомерСтроки311Стр = "1";
					Пока СтраницаРаздела311.Данные.Свойство("П000311000101_" + НомерСтроки311Стр) Цикл
						
						КодОснНал311 = СокрЛП(СтраницаРаздела311.Данные["П000311000101_" + НомерСтроки311Стр]);
						КолНефти311  = СтраницаРаздела311.Данные["П000311000102_" + НомерСтроки311Стр];
						
						Если НЕ ЗначениеЗаполнено(КодОснНал311)
						   И НЕ ЗначениеЗаполнено(КолНефти311) Тогда
							НомерСтроки311 = НомерСтроки311 + 1;
							НомерСтроки311Стр = Формат(НомерСтроки311, "ЧГ=");
							Продолжить;
						КонецЕсли;
						
						ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 = Истина;
						
						// Код основания налогообложения.
						КодОснНал311Длина = СтрДлина(КодОснНал311);
						Если КодОснНал311Длина <> 4 Тогда
							СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
							+ " -> Расчет налога. Страница " + НомерСтраницы31
							+ " -> Полезное ископаемое, добытое из залежи. Страница " + НомерСтраницы311
							+ ": в строке " + НомерСтроки311Стр + " не" + ?(КодОснНал311Длина = 0, "", "верно")
							+ " задан код основания налогообложения", "Раздел311",
							"П000311000101_" + НомерСтроки311Стр, КоординатыСтраницы311);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						НомерСтроки311 = НомерСтроки311 + 1;
						НомерСтроки311Стр = Формат(НомерСтроки311, "ЧГ=");
						
					КонецЦикла;
					
					Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 Тогда
						СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
							+ " -> Расчет налога. Страница " + НомерСтраницы31
						+ " -> Полезное ископаемое, добытое из залежи. Страница " + НомерСтраницы311
						+ ": в строке 1 не задан код основания налогообложения",
						"Раздел311", "П000311000101_1" , КоординатыСтраницы311);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненныйЭкземплярРаздела311 Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": должен быть заполнен раздел 3.1.1", "Раздел311", "П000300026003", КоординатыСтраницы31 + ",1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела31 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": должен быть заполнен раздел 3.1", "Раздел31", "П000300019003", НомерСтраницы3 + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	// Определение необходимости проверки раздела 4.
	Раздел4 = мДанныеОтчета.Раздел4;
	ПроверятьРаздел4 = Ложь;
	Для Каждого СтраницаРаздела4 Из Раздел4 Цикл
		Данные4 = СтраницаРаздела4.Данные[0].Значение;
		Если СтраницаПуста(Данные4, "Раздел4", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьРаздел4 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ПроверятьРаздел4 Тогда
		
		Для Каждого СтраницаРаздела4 Из Раздел4 Цикл
			Данные4 = СтраницаРаздела4.Данные[0].Значение;
			Если СтраницаПуста(Данные4, "Раздел4", ДеревоВыгрузки) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы4 = Раздел4.Индекс(СтраницаРаздела4) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400001003"]));
			Если КодДПИРаздел4Длина <> 5 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(КодДПИРаздел4Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого", "Раздел4", "П000400001003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// КБК.
			КБКРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400002003"]));
			Если КБКРаздел4Длина <> 20 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(КБКРаздел4Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел4", "П000400002003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКЕИ.
			ОКЕИРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400003003"]));
			Если ОКЕИРаздел4Длина <> 3 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(ОКЕИРаздел4Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ", "Раздел4", "П000400003003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400004003"]));
			Если НЕ (ОКТМОРаздел4Длина = 8 ИЛИ ОКТМОРаздел4Длина = 11) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(ОКТМОРаздел4Длина = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел4", "П000400004003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Серия, номер и вид лицензии на пользование недрами.
			ТекстСообщения = "";
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СокрЛП(Данные4["П000400005003"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4 + ": " + ТекстСообщения,
				"Раздел4", "П000400005003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", СокрЛП(Данные4["П000400005004"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4 + ": " + ТекстСообщения,
				"Раздел4", "П000400005004", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", СокрЛП(Данные4["П000400005005"]));
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4 + ": " + ТекстСообщения,
				"Раздел4", "П000400005005", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Наименование нового морского месторождения.
			НаимМестРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400006003"]));
			Если НаимМестРаздел4Длина = 0 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не задано наименование нового морского месторождения", "Раздел4", "П000400006003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Месяц и год начала промышленной добычи углеводородного сырья.
			Если НЕ ЗначениеЗаполнено(Данные4["П000400007003"]) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не заданы месяц и год начала промышленной добычи углеводородного сырья", "Раздел4", "П000400007003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Признак налогового вычета.
			ПрВычетРаздел4 = Данные4["П000400015503"];
			Если НЕ ЗначениеЗаполнено(ПрВычетРаздел4) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ":  не задан признак налогового вычета",
				"Раздел4", "П000400015503", НомерСтраницы4);
				СтатусПроверки = Ложь;
			ИначеЕсли (СтрРазделить("00,03,07", ",").Найти(ПрВычетРаздел4)) = Неопределено Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": задан некорректный признак налогового вычета. Возможны значения: 00, 03, 07",
				"Раздел4", "П000400015503", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка многострочной части текущего экземпляра раздела 4.
			ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 = Ложь;
			
			НомерСтроки4 = 1;
			НомерСтроки4Стр = "1";
			Пока Данные4.Свойство("П000400000101_" + НомерСтроки4Стр) Цикл
				
				КодОснНал4 = СокрЛП(Данные4["П000400000101_" + НомерСтроки4Стр]);
				КолНефти4  = Данные4["П000400000102_" + НомерСтроки4Стр];
				
				Если НЕ ЗначениеЗаполнено(КодОснНал4)
				   И НЕ ЗначениеЗаполнено(КолНефти4) Тогда
					НомерСтроки4 = НомерСтроки4 + 1;
					НомерСтроки4Стр = Формат(НомерСтроки4, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 = Истина;
				
				// Код основания налогообложения.
				КодОснНал4Длина = СтрДлина(КодОснНал4);
				Если КодОснНал4Длина <> 4 Тогда
					СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
					+ ": в строке " + НомерСтроки4Стр + " не" + ?(КодОснНал4Длина = 0, "", "верно")
					+ " задан код основания налогообложения", "Раздел4",
					"П000400000101_" + НомерСтроки4Стр, НомерСтраницы4);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомерСтроки4 = НомерСтроки4 + 1;
				НомерСтроки4Стр = Формат(НомерСтроки4, "ЧГ=");
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": в строке 1 не задан код основания налогообложения",
				"Раздел4", "П000400000101_1" , НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 5.
	// Определение необходимости проверки раздела 5.
	ДанныеРаздела5 = ДанныеМногоуровневыхРазделов.Раздел5;
	ПроверятьРаздел5 = Ложь;
	Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
		ЗаполненРаздел5 = НЕ СтраницаПуста(СтраницаРаздела5.Данные, "Раздел5", ДеревоВыгрузки);
		Если ЗаполненРаздел5 Тогда
			ПроверятьРаздел5 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
			ЗаполненРаздел51 = НЕ СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", ДеревоВыгрузки);
			Если ЗаполненРаздел51 Тогда
				ПроверятьРаздел5 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьРаздел5 Тогда
		
		Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
			
			НомерСтраницы5 = ДанныеРаздела5.Строки.Индекс(СтраницаРаздела5) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел5      = СокрЛП(СтраницаРаздела5.Данные["П000500001003"]);
			КодДПИРаздел5Длина = СтрДлина(КодДПИРаздел5);
			Если КодДПИРаздел5Длина <> 5 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(КодДПИРаздел5Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого", "Раздел5", "П000500001003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// КБК.
			КБКРаздел5Длина = СтрДлина(СокрЛП(СтраницаРаздела5.Данные["П000500002003"]));
			Если КБКРаздел5Длина <> 20 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(КБКРаздел5Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел5", "П000500002003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКЕИ.
			ОКЕИРаздел5Длина = СтрДлина(СокрЛП(СтраницаРаздела5.Данные["П000500003003"]));
			Если ОКЕИРаздел5Длина <> 3 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(ОКЕИРаздел5Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ", "Раздел5", "П000500003003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьЗаполненныйЭкземплярРаздела51 = Ложь;
			
			Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
				
				Если СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела51 = Истина;
				
				НомерСтраницы51 = СтраницаРаздела5.Строки.Индекс(СтраницаРаздела51) + 1;
				
				КоординатыСтраницы51 = Строка(НомерСтраницы5) + "," + Строка(НомерСтраницы51);
				
				ОКТМОРаздел51    = СокрЛП(СтраницаРаздела51.Данные["П000500004003"]);
				СерЛицРаздел51   = СокрЛП(СтраницаРаздела51.Данные["П000500004103"]);
				НомЛицРаздел51   = СокрЛП(СтраницаРаздела51.Данные["П000500004104"]);
				ВидЛицРаздел51   = СокрЛП(СтраницаРаздела51.Данные["П000500004105"]);
				КрентаРаздел51   = СокрЛП(СтраницаРаздела51.Данные["П000500005003"]);
				ПризнакНпл       = СокрЛП(СтраницаРаздела51.Данные["П000500005103"]);
				КодСубРаздел51   = СокрЛП(СтраницаРаздела51.Данные["П000500005203"]);
				СрЧислРаботников = СтраницаРаздела51.Данные["П000500005303"];
				ПризнакНалВычета = СокрЛП(СтраницаРаздела51.Данные["П000500016403"]);
								
				// Количество реализованного добытого полезного ископаемого.
				КолРеалДПИ = СтраницаРаздела51.Данные["П000500009003"];
				ВырРеалДПИ = СтраницаРаздела51.Данные["П000500010003"];
				
				// ОКТМО.
				ОКТМОРаздел51Длина = СтрДлина(ОКТМОРаздел51);
				Если НЕ (ОКТМОРаздел51Длина = 8 ИЛИ ОКТМОРаздел51Длина = 11) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(ОКТМОРаздел51Длина = 0, "", "верно")
					+ " задан код по ОКТМО",
					"Раздел51", "П000500004003", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				ВозможныеДлиныЗначенияРеквизита = Новый Массив;
				ВозможныеДлиныЗначенияРеквизита.Добавить(3);
				ВозможныеДлиныЗначенияРеквизита.Добавить(4);
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита,ВозможныеДлиныЗначенияРеквизита",
				"Серия", СерЛицРаздел51, ВозможныеДлиныЗначенияРеквизита);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5 + " -> Раздел 5.1. Страница "
					+ НомерСтраницы51 + ": " + ТекстСообщения, "Раздел51", "П000500004103", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", НомЛицРаздел51);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5 + " -> Раздел 5.1. Страница "
					+ НомерСтраницы51 + ": " + ТекстСообщения, "Раздел51", "П000500004104", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", ВидЛицРаздел51);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5 + " -> Раздел 5.1. Страница "
					+ НомерСтраницы51 + ": " + ТекстСообщения, "Раздел51", "П000500004105", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если КрентаРаздел51 = "0" Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не задан рентный коэффициент Крента", "Раздел51", "П000500005003", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				ИначеЕсли НЕ (КрентаРаздел51 = "1" ИЛИ КрентаРаздел51 = "3,5" ИЛИ КрентаРаздел51 = "7" ИЛИ КрентаРаздел51 = "0,2") Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": задан некорректный рентный коэффициент Крента. Возможны значения: 1, 3.5, 7, 0.2",
					"Раздел51", "П000500005003", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				ВозмКодыСуб = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000500005203");
				Если ЗначениеЗаполнено(КодСубРаздел51) И ВозмКодыСуб.МассивЗначений.Найти(КодСубРаздел51) = Неопределено Тогда
					
					СообщитьВТС("Код субъекта Российской Федерации может принимать одно из значений: "
					+ ВозмКодыСуб.СтрокаЗначений, "Раздел51", "П000500005203", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КолРеалДПИ) И ЗначениеЗаполнено(ВырРеалДПИ) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ ": не заполнено значение количества реализованного добытого полезного ископаемого при заполненном значении выручки от реализации добытого полезного ископаемого",
					"Раздел51", "П000500009003", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВырРеалДПИ) И ЗначениеЗаполнено(КолРеалДПИ) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ ": не заполнено значение выручки от реализации добытого полезного ископаемого при заполненном значении количества реализованного добытого полезного ископаемого",
					"Раздел51", "П000500010003", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ПризнакНалВычетаДлина = СтрДлина(ПризнакНалВычета);
				Если ПризнакНалВычетаДлина <> 2 Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(ПризнакНалВычетаДлина = 0, "", "верно")
					+ " задан признак налогового вычета",
					"Раздел51", "П000500016403", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				ИначеЕсли (СтрРазделить("00,10,11,12,13", ",").Найти(ПризнакНалВычета)) = Неопределено Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": задан некорректный признак налогового вычета. Возможны значения: 00, 10, 11, 12, 13",
					"Раздел51", "П000500016403", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 5.1
				// (признак и значение коэффициента, применяемого к ставке налога).
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Ложь;
				
				ЕстьЗначение01или03ЭлементаПрКоэфРаздела51 = Ложь;
				ЕстьЗначение02ЭлементаПрКоэфРаздела51      = Ложь;
				
				НомерСтроки51 = 1;
				НомерСтроки51Стр = "1";
				Пока СтраницаРаздела51.Данные.Свойство("П000500005501_" + НомерСтроки51Стр) Цикл
					
					ПрКоэф51    = СокрЛП(СтраницаРаздела51.Данные["П000500005501_" + НомерСтроки51Стр]);
					ЗначКоэф51  = СтраницаРаздела51.Данные["П000500005502_" + НомерСтроки51Стр];
					
					Если НЕ ЗначениеЗаполнено(ПрКоэф51)
					   И НЕ ЗначениеЗаполнено(ЗначКоэф51)
					   Тогда
						НомерСтроки51 = НомерСтроки51 + 1;
						НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Истина;
					
					Если ПрКоэф51 = "01"
					 ИЛИ ПрКоэф51 = "03" Тогда
						ЕстьЗначение01или03ЭлементаПрКоэфРаздела51 = Истина;
					КонецЕсли;
					
					Если ПрКоэф51 = "02" Тогда
						ЕстьЗначение02ЭлементаПрКоэфРаздела51 = Истина;
					КонецЕсли;
					
					// Признак коэффициента.
					ПрКоэф51Длина = СтрДлина(ПрКоэф51);
					Если ПрКоэф51Длина <> 2 Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр + " не" + ?(ПрКоэф51Длина = 0, "", "верно")
						+ " задан признак коэффициента", "Раздел51",
						"П000500005501_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
					ИначеЕсли (СтрРазделить("01,02,03,04,05,06,07,08,09,00", ",").Найти(ПрКоэф51)) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр
						+ " задан некорректный признак коэффициента. Возможны значения: 01, 02, 03, 04, 05, 06, 07, 08, 09, 00",
						"Раздел51", "П000500005501_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
					ИначеЕсли ПризнакНпл = "0"
						    И НЕ СтрРазделить("01,02,03", ",").Найти(ПрКоэф51) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр
						+ " задан некорректный признак коэффициента. Возможны значения: 04, 05, 06, 07, 08, 09, 00",
						"Раздел51", "П000500005501_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Значение коэффициента.
					Если ПрКоэф51 = "00"
					   И НЕ ЗначКоэф51 = 0 Тогда
					   
					   СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					   + " -> Раздел 5.1. Страница " + НомерСтраницы51
					   + ": в строке " + НомерСтроки51Стр
					   + " задано некорректное значение коэффициента. Возможны значения: 0",
					   "Раздел51", "П000500005502_" + НомерСтроки51Стр, КоординатыСтраницы51);
					   СтатусПроверки = Ложь;
						
					ИначеЕсли ПрКоэф51 = "07" И НЕ (ЗначКоэф51 = 0.1 ИЛИ ЗначКоэф51 = 1) Тогда
						
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр
						+ " задано некорректное значение коэффициента. Возможны значения: 0.1, 1",
						"Раздел51", "П000500005502_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
						
					ИначеЕсли ПрКоэф51 = "05" И НЕ (ЗначКоэф51 = 0.1 ИЛИ ЗначКоэф51 = 1 ИЛИ ЗначКоэф51 = 0.25) Тогда
						
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр
						+ " задано некорректное значение коэффициента. Возможны значения: 0.1, 0.25, 1",
						"Раздел51", "П000500005502_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
										
					НомерСтроки51 = НомерСтроки51 + 1;
					НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": в строке 1 не задан признак коэффициента",
					"Раздел51", "П000500005501_" , КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ПризнакНплДлина = СтрДлина(ПризнакНпл);
				Если ПризнакНплДлина <> 1 Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(ПризнакНплДлина = 0, "", "верно")
					+ " задан признак налогоплательщика",
					"Раздел51", "П000500005103", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				ИначеЕсли (СтрРазделить("0,1,2,3,4,5", ",").Найти(ПризнакНпл)) = Неопределено Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": задан некорректный признак налогоплательщика. Возможны значения: 0, 1, 2, 3, 4, 5",
					"Раздел51", "П000500005103", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				ИначеЕсли ЕстьЗначение01или03ЭлементаПрКоэфРаздела51
					    И НЕ ПризнакНпл = "1" Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": задан некорректный признак налогоплательщика. Возможны значения: 1",
					"Раздел51", "П000500005103", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				ИначеЕсли ЕстьЗначение02ЭлементаПрКоэфРаздела51
					    И НЕ ПризнакНпл = "2" Тогда
					
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": задан некорректный признак налогоплательщика. Возможны значения: 2",
					"Раздел51", "П000500005103", КоординатыСтраницы51);
					
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				Если (ПризнакНпл = "1" ИЛИ ПризнакНпл = "2"
					ИЛИ ЕстьЗначение01или03ЭлементаПрКоэфРаздела51
					ИЛИ ЕстьЗначение02ЭлементаПрКоэфРаздела51)
					И НЕ ЗначениеЗаполнено(КодСубРаздел51) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не задан код субъекта Российской Федерации", "Раздел51", "П000500005203", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ПризнакНпл = "5"
				   И НЕ ЗначениеЗаполнено(СрЧислРаботников) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не задана среднесписочная численность работников организации", "Раздел51",
					"П000500005303", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 5.1
				// (данные о количестве добытого полезного ископаемого, подлежащего
				// налогообложению, по коду основания налогообложения).
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Ложь;
				
				НомерСтроки51 = 1;
				НомерСтроки51Стр = "1";
				Пока СтраницаРаздела51.Данные.Свойство("П000510000101_" + НомерСтроки51Стр) Цикл
					
					КодОснНал51 = СокрЛП(СтраницаРаздела51.Данные["П000510000101_" + НомерСтроки51Стр]);
					КолНефти51  = СтраницаРаздела51.Данные["П000510000102_" + НомерСтроки51Стр];
					
					Если НЕ ЗначениеЗаполнено(КодОснНал51)
					   И НЕ ЗначениеЗаполнено(КолНефти51)
					   Тогда
						НомерСтроки51 = НомерСтроки51 + 1;
						НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Истина;
					
					// Код основания налогообложения.
					КодОснНал51Длина = СтрДлина(КодОснНал51);
					Если КодОснНал51Длина <> 4 Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр + " не" + ?(КодОснНал51Длина = 0, "", "верно")
						+ " задан код основания налогообложения", "Раздел51",
						"П000510000101_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					НомерСтроки51 = НомерСтроки51 + 1;
					НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": в строке 1 не задан код основания налогообложения",
					"Раздел51", "П000510000101_1" , КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела51 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": должен быть заполнен раздел 5.1", "Раздел51", "П000500004003", НомерСтраницы5 + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если КодДПИРаздел5 = "04104"
			 ИЛИ КодДПИРаздел5 = "05100" Тогда
				
				// Проверка многострочной части текущего экземпляра раздела 5.2.
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела52 = Ложь;
				
				НомерСтроки52 = 1;
				НомерСтроки52Стр = "1";
				Пока СтраницаРаздела5.Данные.Свойство("П000520000101_" + НомерСтроки52Стр) Цикл
					
					ПризнакМеталла52   = СокрЛП(СтраницаРаздела5.Данные["П000520000101_" + НомерСтроки52Стр]);
					СредняяЦена52      = СтраницаРаздела5.Данные["П000520000102_" + НомерСтроки52Стр];
					СреднееЗначКурса52 = СтраницаРаздела5.Данные["П000520000103_" + НомерСтроки52Стр];
					ДоляМеталла52      = СтраницаРаздела5.Данные["П000520000104_" + НомерСтроки52Стр];
					ПроцентЖелеза52    = СтраницаРаздела5.Данные["П000520000105_" + НомерСтроки52Стр];
					
					Если НЕ ЗначениеЗаполнено(ПризнакМеталла52)
					   И НЕ ЗначениеЗаполнено(СредняяЦена52)
					   И НЕ ЗначениеЗаполнено(СреднееЗначКурса52)
					   И НЕ ЗначениеЗаполнено(ДоляМеталла52)
					   И НЕ ЗначениеЗаполнено(ПроцентЖелеза52) Тогда
						НомерСтроки52 = НомерСтроки52 + 1;
						НомерСтроки52Стр = Формат(НомерСтроки52, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела52 = Истина;
					
					ПризнакМеталла52Длина = СтрДлина(ПризнакМеталла52);
					Если ПризнакМеталла52Длина <> 2 Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.2: не" + ?(ПризнакМеталла52Длина = 0, "", "верно")
						+ " задан признак металла", "Раздел5",
						"П000520000101_" + НомерСтроки52Стр, НомерСтраницы5);
						СтатусПроверки = Ложь;
					ИначеЕсли (СтрРазделить("01,02,03,04,05,06,07", ",").Найти(ПризнакМеталла52)) = Неопределено Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.2"
						+ ": задан некорректный признак металла. Возможны значения: 01, 02, 03, 04, 05, 06, 07",
						"Раздел5", "П000520000101_" + НомерСтроки52Стр, НомерСтраницы5);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если КодДПИРаздел5 = "04104"
					   И НЕ ЗначениеЗаполнено(ПроцентЖелеза52) Тогда
					   
					   СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.2: не задан процент содержания железа в руде", "Раздел5",
						"П000520000105_" + НомерСтроки52Стр, НомерСтраницы5);
						СтатусПроверки = Ложь;
						
					ИначеЕсли КодДПИРаздел5 = "05100"
					        И НЕ ЗначениеЗаполнено(ДоляМеталла52) Тогда
							
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.2: не задана доля содержания металла в руде", "Раздел5",
						"П000520000104_" + НомерСтроки52Стр, НомерСтраницы5);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
					НомерСтроки52 = НомерСтроки52 + 1;
					НомерСтроки52Стр = Формат(НомерСтроки52, "ЧГ=");
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела52 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ ": должен быть заполнен раздел 5.2", "Раздел5", "П000520000101_1", НомерСтраницы5);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 6.
	// Определение необходимости проверки раздела 6.
	Раздел6 = мДанныеОтчета.Раздел6;
	ПроверятьРаздел6 = НЕ СтраницаПуста(Раздел6, "Раздел6", ДеревоВыгрузки);
	
	Если ПроверятьРаздел6 Тогда
		
		ОКЕИРаздел6 = СокрЛП(Раздел6["П000600011003"]);
		
		// ОКЕИ.
		ОКЕИРаздел6Длина = СтрДлина(ОКЕИРаздел6);
		Если ОКЕИРаздел6Длина <> 3 Тогда
			СообщитьВТС("Раздел 6: не" + ?(ОКЕИРаздел6Длина = 0, "", "верно")
			+ " задан код единицы измерения по ОКЕИ", "Раздел6",
			"П000600011003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела6 = Ложь;
		НомерСтроки6 = 1;
		НомерСтроки6Стр = "1";
		Пока Раздел6.Свойство("П000620000101_" + НомерСтроки6Стр) Цикл
			
			КодДПИРаздел6   = СокрЛП(Раздел6["П000620000101_" + НомерСтроки6Стр]);
			КоличДПИРаздел6 = Раздел6["П000620000102_" + НомерСтроки6Стр];
			ДоляДПИРаздел6  = Раздел6["П000620000103_" + НомерСтроки6Стр];
			СумРасхРаздел6  = Раздел6["П000620000104_" + НомерСтроки6Стр];
			
			Если НЕ ЗначениеЗаполнено(КодДПИРаздел6)
				И НЕ ЗначениеЗаполнено(КоличДПИРаздел6)
				И НЕ ЗначениеЗаполнено(ДоляДПИРаздел6)
				И НЕ ЗначениеЗаполнено(СумРасхРаздел6) Тогда
				НомерСтроки6 = НомерСтроки6 + 1;
				НомерСтроки6Стр = Формат(НомерСтроки6, "ЧГ=");
				Продолжить;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзБлоковРаздела6 = Истина;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел6Длина = СтрДлина(КодДПИРаздел6);
			Если КодДПИРаздел6Длина <> 5 Тогда
				СообщитьВТС("Раздел 6: в строке " + НомерСтроки6Стр
				+ " не" + ?(КодДПИРаздел6Длина = 0, "", "верно")
				+ " задан код добытого полезного ископаемого", "Раздел6",
				"П000620000101_" + НомерСтроки6Стр);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки6 = НомерСтроки6 + 1;
			НомерСтроки6Стр = Формат(НомерСтроки6, "ЧГ=");
			
		КонецЦикла;
		
		Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела6 Тогда
			СообщитьВТС("Раздел 6: в строке 1 не задан код добытого полезного ископаемого",
			"Раздел6", "П000620000101_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 7.
	// Определение необходимости проверки раздела 7.
	Раздел7 = мДанныеОтчета.Раздел7;
	ПроверятьРаздел7 = Ложь;
	Для Каждого СтраницаРаздела7 Из Раздел7 Цикл
		Данные7 = СтраницаРаздела7.Данные[0].Значение;
		Если СтраницаПуста(Данные7, "Раздел7", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьРаздел7 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ПроверятьРаздел7 Тогда
		
		Для Каждого СтраницаРаздела7 Из Раздел7 Цикл
			Данные7 = СтраницаРаздела7.Данные[0].Значение;
			Если СтраницаПуста(Данные7, "Раздел7", ДеревоВыгрузки) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы7 = Раздел7.Индекс(СтраницаРаздела7) + 1;
			
			КБКРаздел7         = СокрЛП(Данные7["П000700001003"]);
			СерЛицРаздел7      = СокрЛП(Данные7["П000700002003"]);
			НомЛицРаздел7      = СокрЛП(Данные7["П000700002004"]);
			ВидЛицРаздел7      = СокрЛП(Данные7["П000700002005"]);
			ОКЕИРаздел7        = СокрЛП(Данные7["П000700003003"]);
			ОКТМОРаздел7       = СокрЛП(Данные7["П000700004003"]);
			ЗначениеКтдРаздел7 = СокрЛП(Данные7["П000700005003"]);
			ПризнКтдРаздел7    = СокрЛП(Данные7["П000700005503"]);
			ЗначениеКугРаздел7 = Данные7["П000700005603"];
			
			// КБК.
			КБКРаздел7Длина = СтрДлина(КБКРаздел7);
			Если КБКРаздел7Длина <> 20 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(КБКРаздел7Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел7", "П000700001003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Серия, номер и вид лицензии на пользование недрами.
			ТекстСообщения = "";
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СерЛицРаздел7);
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7 + ": " + ТекстСообщения,
				"Раздел7", "П000700002003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", НомЛицРаздел7);
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7 + ": " + ТекстСообщения,
				"Раздел7", "П000700002004", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", ВидЛицРаздел7);
			Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7 + ": " + ТекстСообщения,
				"Раздел7", "П000700002005", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// ОКЕИ.
			ОКЕИРаздел7Длина = СтрДлина(ОКЕИРаздел7);
			Если ОКЕИРаздел7Длина <> 3 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(ОКЕИРаздел7Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ", "Раздел7", "П000700003003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОРаздел7Длина = СтрДлина(ОКТМОРаздел7);
			Если НЕ (ОКТМОРаздел7Длина = 8 ИЛИ ОКТМОРаздел7Длина = 11) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(ОКТМОРаздел7Длина = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел7", "П000700004003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			КодСуб = СокрЛП(Данные7["П000700004503"]);
			ВозмКодыСуб = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000700004503");
			Если ЗначениеЗаполнено(КодСуб) И ВозмКодыСуб.МассивЗначений.Найти(КодСуб) = Неопределено Тогда
				СообщитьВТС("Код субъекта Российской Федерации может принимать одно из значений: "
				+ ВозмКодыСуб.СтрокаЗначений, "Раздел7", "П000700004503", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если (ПризнКтдРаздел7 = "1" ИЛИ ПризнКтдРаздел7 = "2" ИЛИ ПризнКтдРаздел7 = "3")
				И НЕ ЗначениеЗаполнено(КодСуб) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не задан код субъекта Российской Федерации", "Раздел7", "П000700004503", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Значение коэффициента Ктд.
			Если (ПризнКтдРаздел7 = "1" ИЛИ ПризнКтдРаздел7 = "2" ИЛИ ПризнКтдРаздел7 = "3")
				И ЗначениеКтдРаздел7 = "-" Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не задано значение коэффициента Ктд", "Раздел7", "П000700005003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			ИначеЕсли (ПризнКтдРаздел7 = "1" ИЛИ ПризнКтдРаздел7 = "2" ИЛИ ПризнКтдРаздел7 = "3")
			   И НЕ ЗначениеКтдРаздел7 = "0,0"
			   И НЕ ЗначениеКтдРаздел7 = "0,2"
			   И НЕ ЗначениеКтдРаздел7 = "0,4"
			   И НЕ ЗначениеКтдРаздел7 = "0,6"
			   И НЕ ЗначениеКтдРаздел7 = "0,8"
			   И НЕ ЗначениеКтдРаздел7 = "1,0" Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": задано некорректное значение коэффициента Ктд. Возможны значения: 0, 0.2, 0.4, 0.6, 0.8, 1", "Раздел7", "П000700005003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Признак коэффициента Ктд.
			Если НЕ ЗначениеЗаполнено(ПризнКтдРаздел7) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не задан признак коэффициента Ктд", "Раздел7", "П000700005503", НомерСтраницы7);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрНайти("0123", ПризнКтдРаздел7) = 0 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": задан некорректный признак коэффициента Ктд. Возможны значения: 0, 1, 2, 3", "Раздел7", "П000700005503", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьКодДПИ01150Раздел71 = Ложь;
			ЗаполненХотяБыОдинИзБлоковРаздела71 = Ложь;
			НомерСтроки71 = 1;
			НомерСтроки71Стр = "1";
			Пока Данные7.Свойство("П000710000101_" + НомерСтроки71Стр) Цикл
				
				КодДПИРаздел71      = СокрЛП(Данные7["П000710000101_" + НомерСтроки71Стр]);
				КодОснНалРаздел71   = СокрЛП(Данные7["П000710000102_" + НомерСтроки71Стр]);
				КоличДПИРаздел71    = Данные7["П000710000103_" + НомерСтроки71Стр];
				СуммаНалогаРаздел71 = Данные7["П000710000104_" + НомерСтроки71Стр];
				
				Если НЕ ЗначениеЗаполнено(КодДПИРаздел71)
					И НЕ ЗначениеЗаполнено(КодОснНалРаздел71)
					И НЕ ЗначениеЗаполнено(КоличДПИРаздел71)
					И НЕ ЗначениеЗаполнено(СуммаНалогаРаздел71) Тогда
					НомерСтроки71 = НомерСтроки71 + 1;
					НомерСтроки71Стр = Формат(НомерСтроки71, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				ЗаполненХотяБыОдинИзБлоковРаздела71 = Истина;
				
				// Код вида добытого полезного ископаемого.
				КодДПИРаздел71Длина = СтрДлина(КодДПИРаздел71);
				Если КодДПИРаздел71Длина <> 5 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки71Стр
					+ " подраздела 7.1 не" + ?(КодДПИРаздел71Длина = 0, "", "верно")
					+ " задан код вида добытого полезного ископаемого", "Раздел7",
					"П000710000101_" + НомерСтроки71Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код основания налогообложения.
				КодОснНалРаздел71Длина = СтрДлина(КодОснНалРаздел71);
				Если КодОснНалРаздел71Длина <> 4 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки71Стр
					+ " подраздела 7.1 не" + ?(КодОснНалРаздел71Длина = 0, "", "верно")
					+ " задан код основания налогообложения", "Раздел7",
					"П000710000102_" + НомерСтроки71Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если КодДПИРаздел71 = "01150" Тогда
					ЕстьКодДПИ01150Раздел71 = Истина;
				КонецЕсли;
				
				НомерСтроки71 = НомерСтроки71 + 1;
				НомерСтроки71Стр = Формат(НомерСтроки71, "ЧГ=");
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(ЗначениеКугРаздел7)
			   И ЕстьКодДПИ01150Раздел71 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не задано значение коэффициента Куг", "Раздел7", "П000700005603", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела71 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке 1 подраздела 7.1 не задан код вида добытого полезного ископаемого",
				"Раздел7", "П000710000101_1", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки73 = 1;
			НомерСтроки73Стр = "1";
			Пока Данные7.Свойство("П000730000101_" + НомерСтроки73Стр) Цикл
				
				МесГодВознРаздел73 = Данные7["П000730000101_" + НомерСтроки73Стр];
				НалВычНачРаздел7   = Данные7["П000730000102_" + НомерСтроки73Стр];
				НалВычПредРаздел7  = Данные7["П000730000103_" + НомерСтроки73Стр];
				НалВычТекРаздел7   = Данные7["П000730000104_" + НомерСтроки73Стр];
				НалВычКонРаздел7   = Данные7["П000730000105_" + НомерСтроки73Стр];
				МесГодОконРаздел73 = Данные7["П000730000106_" + НомерСтроки73Стр];
				
				Если НЕ ЗначениеЗаполнено(МесГодВознРаздел73)
					И НЕ ЗначениеЗаполнено(НалВычНачРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычПредРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычТекРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычКонРаздел7)
					И НЕ ЗначениеЗаполнено(МесГодОконРаздел73) Тогда
					НомерСтроки73 = НомерСтроки73 + 1;
					НомерСтроки73Стр = Формат(НомерСтроки73, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				// Месяц и год возникновения права на налоговый вычет.
				Если НЕ ЗначениеЗаполнено(МесГодВознРаздел73) Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки73Стр
					+ " подраздела 7.3 не заданы месяц и год возникновения права на налоговый вычет",
					"Раздел7", "П000730000101_" + НомерСтроки73Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Месяц и год окончания права на налоговый вычет.
				Если НЕ ЗначениеЗаполнено(МесГодОконРаздел73) Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки73Стр
					+ " подраздела 7.3 не заданы месяц и год окончания права на налоговый вычет",
					"Раздел7", "П000730000106_" + НомерСтроки73Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомерСтроки73 = НомерСтроки73 + 1;
				НомерСтроки73Стр = Формат(НомерСтроки73, "ЧГ=");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 8.
	// Определение необходимости проверки раздела 2.
	ДанныеРаздела8 = ДанныеМногоуровневыхРазделов.Раздел8;
	ПроверятьРаздел8 = Ложь;
	Для каждого СтраницаРаздела8 Из ДанныеРаздела8.Строки Цикл
		ЗаполненРаздел8 = НЕ СтраницаПуста(СтраницаРаздела8.Данные, "Раздел8", ДеревоВыгрузки);
		Если ЗаполненРаздел8 Тогда
			ПроверятьРаздел8 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела81 Из СтраницаРаздела8.Строки Цикл
			ЗаполненРаздел81 = НЕ СтраницаПуста(СтраницаРаздела81.Данные, "Раздел81", ДеревоВыгрузки);
			Если ЗаполненРаздел81 Тогда
				ПроверятьРаздел8 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел8 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка раздела 8.
	Если ПроверятьРаздел8 Тогда
		
		Возможные_ПрВычетРаздел81 = СтрРазделить("00,01,02,03,04,05,06,08,09,14", ",");
		Если ПараметрыВыгрузки.ДатаКонцаПериодаОтчета < '20230401' Тогда
			Возможные_ПрВычетРаздел81 = СтрРазделить("00,01,02,03,04,05,06,08,09", ",");
		КонецЕсли;
		
		Для каждого СтраницаРаздела8 Из ДанныеРаздела8.Строки Цикл
			
			НомерСтраницы = ДанныеРаздела8.Строки.Индекс(СтраницаРаздела8) + 1;
			
			// КБК.
			КБКРаздел8Длина = СтрДлина(СокрЛП(СтраницаРаздела8.Данные["П000800002003"]));
			Если КБКРаздел8Длина <> 20 Тогда
				СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
				+ ": не" + ?(КБКРаздел8Длина = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел8", "П000800002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка раздела 8.1.
			// Должен быть заполнен хотя бы 1 экземпляр раздела 8.1.
			ЕстьЗаполненныйЭкземплярРаздела81 = Ложь;
			
			Для каждого СтраницаРаздела81 Из СтраницаРаздела8.Строки Цикл
				
				Если СтраницаПуста(СтраницаРаздела81.Данные, "Раздел81", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела81 = Истина;
				
				НомерСтраницы81 = СтраницаРаздела8.Строки.Индекс(СтраницаРаздела81) + 1;
				
				КоординатыСтраницы81 = Строка(НомерСтраницы) + "," + Строка(НомерСтраницы81);
				
				ОКТМОРаздел81   = СокрЛП(СтраницаРаздела81.Данные["П000800004003"]);
				СерЛицРаздел81  = СокрЛП(СтраницаРаздела81.Данные["П000800005003"]);
				НомЛицРаздел81  = СокрЛП(СтраницаРаздела81.Данные["П000800005004"]);
				ВидЛицРаздел81  = СокрЛП(СтраницаРаздела81.Данные["П000800005005"]);
				ГодНачРаздел81  = СокрЛП(СтраницаРаздела81.Данные["П000800006003"]);
				ПрКгРаздел81    = СокрЛП(СтраницаРаздела81.Данные["П000800010003"]);
				КоэфКгРаздел81  = СокрЛП(СтраницаРаздела81.Данные["П000800011003"]);
				ПрВычетРаздел81 = СокрЛП(СтраницаРаздела81.Данные["П000800016003"]);
				
				// ОКТМО.
				ОКТМОРаздел81Длина = СтрДлина(ОКТМОРаздел81);
				Если НЕ (ОКТМОРаздел81Длина = 8 ИЛИ ОКТМОРаздел81Длина = 11) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81
					+ ": не" + ?(ОКТМОРаздел81Длина = 0, "", "верно")
					+ " задан код по ОКТМО",
					"Раздел81", "П000800004003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				ТекстСообщения = "";
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Серия", СерЛицРаздел81);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы81 + ": " + ТекстСообщения, "Раздел81", "П000800005003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Номер", НомЛицРаздел81);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы81 + ": " + ТекстСообщения, "Раздел81", "П000800005004", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				СтруктураПараметров = Новый Структура("ТипРеквизита,ЗначениеРеквизита", "Вид", ВидЛицРаздел81);
				Если НЕ РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы81 + ": " + ТекстСообщения, "Раздел81", "П000800005005", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ГодНачРаздел81Длина = СтрДлина(ГодНачРаздел81);
				Если ГодНачРаздел81Длина <> 4 Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81
					+ ": не" + ?(ГодНачРаздел81Длина = 0, "", "верно")
					+ " задан год начала промышленной добычи нефти",
					"Раздел81", "П000800006003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ПрКгРаздел81) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81 + ": не задан признак коэффициента Кг",
					"Раздел81", "П000800010003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				ИначеЕсли ПрКгРаздел81 <> "1"
					    И ПрКгРаздел81 <> "2"
						И ПрКгРаздел81 <> "3"
						И ПрКгРаздел81 <> "4"
						И ПрКгРаздел81 <> "5" Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81
					+ ": некорректно задан признак коэффициента Кг. Возможны значения: 1, 2, 3, 4, 5",
					"Раздел81", "П000800010003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Признак налогового вычета.
				Если НЕ ЗначениеЗаполнено(ПрВычетРаздел81) Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81 + ":  не задан признак налогового вычета",
					"Раздел81", "П000800016003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				ИначеЕсли Возможные_ПрВычетРаздел81.Найти(ПрВычетРаздел81) = Неопределено Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы + " -> Расчет налога. Страница "
					+ НомерСтраницы81 + ": задан некорректный признак налогового вычета. Возможны значения: "
					+ СтрСоединить(Возможные_ПрВычетРаздел81, ", "), "Раздел81", "П000800016003", КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 8.1.
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела81 = Ложь;
				
				НомерСтроки81 = 1;
				НомерСтроки81Стр = "1";
				Пока СтраницаРаздела81.Данные.Свойство("П000810000101_" + НомерСтроки81Стр) Цикл
					
					КодОснНал81 = СокрЛП(СтраницаРаздела81.Данные["П000810000101_" + НомерСтроки81Стр]);
					КолНефти81  = СтраницаРаздела81.Данные["П000810000102_" + НомерСтроки81Стр];
					
					Если НЕ ЗначениеЗаполнено(КодОснНал81) И НЕ ЗначениеЗаполнено(КолНефти81) Тогда
						НомерСтроки81 = НомерСтроки81 + 1;
						НомерСтроки81Стр = Формат(НомерСтроки81, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела81 = Истина;
					
					// Код основания налогообложения.
					КодОснНал81Длина = СтрДлина(КодОснНал81);
					Если КодОснНал81Длина <> 4 Тогда
						СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
						+ " -> Расчет налога. Страница " + НомерСтраницы81
						+ ": в строке " + НомерСтроки81Стр + " не" + ?(КодОснНал81Длина = 0, "", "верно")
						+ " задан код основания налогообложения", "Раздел81",
						"П000810000101_" + НомерСтроки81Стр, КоординатыСтраницы81);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					НомерСтроки81 = НомерСтроки81 + 1;
					НомерСтроки81Стр = Формат(НомерСтроки81, "ЧГ=");
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела81 Тогда
					СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы81
					+ ": в строке 1 не задан код основания налогообложения",
					"Раздел81", "П000810000101_1" , КоординатыСтраницы81);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела81 Тогда
				СообщитьВТС("Раздел 8 -> Уплата налога. Страница " + НомерСтраницы
				+ ": должен быть заполнен раздел 8.1", "Раздел81", "П000800004003", НомерСтраницы + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция РеквизитЛицензииСоответствуетТребованиям(СтруктураПараметров, ТекстСообщения)
	
	ТипРеквизита      = СтруктураПараметров.ТипРеквизита;
	ЗначениеРеквизита = СтруктураПараметров.ЗначениеРеквизита;
	
	Если ТипРеквизита = "Серия" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ВозможныеДлиныЗначенияРеквизита = Неопределено;
			СтруктураПараметров.Свойство("ВозможныеДлиныЗначенияРеквизита", ВозможныеДлиныЗначенияРеквизита);
			Если ТипЗнч(ВозможныеДлиныЗначенияРеквизита) <> Тип("Массив") Тогда
				ВозможныеДлиныЗначенияРеквизита = Новый Массив;
				ВозможныеДлиныЗначенияРеквизита.Добавить(3);
			КонецЕсли;
			
			Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначениеРеквизита, Истина)
				ИЛИ ВозможныеДлиныЗначенияРеквизита.Найти(СтрДлина(ЗначениеРеквизита)) = Неопределено Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'серия лицензии на пользование недрами должна состоять из %1 букв русского алфавита';
				|en = 'серия лицензии на пользование недрами должна состоять из %1 букв русского алфавита'"),
				СтрСоединить(ВозможныеДлиныЗначенияРеквизита, "-"));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задана серия лицензии на пользование недрами';
									|en = 'не задана серия лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = "Номер" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ВозможныеДлиныЗначенияРеквизита = Новый Массив;
			ВозможныеДлиныЗначенияРеквизита.Добавить(5);
			ВозможныеДлиныЗначенияРеквизита.Добавить(6);
			
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеРеквизита, , Истина)
				ИЛИ ВозможныеДлиныЗначенияРеквизита.Найти(СтрДлина(ЗначениеРеквизита)) = Неопределено Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'номер лицензии на пользование недрами должен состоять из %1 цифр';
												|en = 'номер лицензии на пользование недрами должен состоять из %1 цифр'"),
				СтрСоединить(ВозможныеДлиныЗначенияРеквизита, "-"));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задан номер лицензии на пользование недрами';
									|en = 'не задан номер лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = "Вид" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначениеРеквизита, Истина)
				ИЛИ СтрДлина(ЗначениеРеквизита) <> 2 Тогда
				
				ТекстСообщения = НСтр("ru = 'вид лицензии на пользование недрами должен состоять из 2 букв русского алфавита';
										|en = 'вид лицензии на пользование недрами должен состоять из 2 букв русского алфавита'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'не задан вид лицензии на пользование недрами';
									|en = 'не задан вид лицензии на пользование недрами'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Конвертирование числовых значений коэффициента Ктд в строке 050 Раздела 7 в строковые.
	ДанныеМногостраничныхРазделов = СохраненныеДанныеОтчета["ДанныеМногостраничныхРазделов"];
	ТаблицаРаздел7 = ДанныеМногостраничныхРазделов["Раздел7"];
	
	Для каждого СтрокаРаздел7 Из ТаблицаРаздел7 Цикл
		
		ТекЗнач = СтрокаРаздел7.Данные["П000700005003"];
		
		Если ТипЗнч(ТекЗнач) = Тип("Число") Тогда
			
			СтрокаРаздел7.Данные.Вставить("П000700005003",
			?(ТекЗнач = 0, "-", Формат(ТекЗнач, "ЧЦ=2; ЧДЦ=1; ЧН=")));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеМногостраничныхРазделов.Вставить("Раздел7", ТаблицаРаздел7);
	СохраненныеДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// Обработка всех узлов "КолРеалДПИ" раздела 5.
	УзлыКолРеалДПИ = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "КолРеалДПИ", "Раздел51"), Истина);
	
	Для Каждого Узел Из УзлыКолРеалДПИ Цикл
		
		Если Узел.Значение = "0" Тогда
			Продолжить;
		КонецЕсли;
		
		// находим узел "ВырРеалДПИ" соответствующий узлу "КолРеалДПИ".
		УзелВырРеалДПИ = Узел.Родитель.Строки.Найти("ВырРеалДПИ", "Код");
		
		Если УзелВырРеалДПИ <> Неопределено Тогда
			
			УзелВырРеалДПИ.Обязательность = "О";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка всех узлов "Крента" раздела 5.
	// Список возможных значений, согласно схеме XSD: 1, 3.5, 7, 0.2.
	УзлыКрента = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "Крента", "Раздел51"), Истина);
	Для Каждого Узел Из УзлыКрента Цикл
		Если Узел.Значение = "1.0" Тогда
			Узел.Значение = "1";
		ИначеЕсли Узел.Значение = "7.0" Тогда
			Узел.Значение = "7";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Раздел 1.
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	СумПУ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУ");
	НомерСтроки = 1;
	ДанныеРаздела1 = мДанныеОтчета.Раздел1;
	Пока ДанныеРаздела1.Свойство("П000100000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЭкзСумПУ = СкопироватьУзел(СумНалПУ, СумПУ);
		ЗаполнитьДаннымиУзел(ДанныеРаздела1, ЭкзСумПУ, НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Раздел 2.
	ДанныеРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	
	// Определение необходимости выгрузки раздела 2.
	ВыгружатьРаздел2 = Ложь;
	Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
		ЗаполненРаздел2 = НЕ СтраницаПуста(СтраницаРаздела2.Данные, "Раздел2", УзелРодитель.Владелец());
		Если ЗаполненРаздел2 Тогда
			ВыгружатьРаздел2 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", УзелРодитель.Владелец());
			Если ЗаполненРаздел21 Тогда
				ВыгружатьРаздел2 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
				ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", УзелРодитель.Владелец());
				Если ЗаполненРаздел212 Тогда
					ВыгружатьРаздел2 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВыгружатьРаздел2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыгружатьРаздел2 Тогда
		
		ИсчНалНефт = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалНефт");
		Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
			ЭкзИсчНалНефт = СкопироватьУзел(УзелРодитель, ИсчНалНефт);
			Для каждого Эл Из ЭкзИсчНалНефт.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела2.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Раздел 2.1.
			ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефт, "ПокРасчНал");
			Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
				ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалНефт, ПокРасчНал);
				Для каждого Эл Из ЭкзПокРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела21.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// Многострочная часть раздела 2.1.
				ДобНефтУчНедр = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтУчНедр");
				НомерСтроки211 = 1;
				Пока СтраницаРаздела21.Данные.Свойство("П000211000101_" + Формат(НомерСтроки211, "ЧГ=")) Цикл
					ЭкзДобНефтУчНедр = СкопироватьУзел(ЭкзПокРасчНал, ДобНефтУчНедр);
					Для каждого Эл Из ЭкзДобНефтУчНедр.Строки Цикл
						ВывестиПоказательВXML(Эл, СтраницаРаздела21.Данные[Эл.Ключ + "_" + Формат(НомерСтроки211, "ЧГ=")]);
					КонецЦикла;
					НомерСтроки211 = НомерСтроки211 + 1;
				КонецЦикла;
				// Раздел 2.1.2.
				ДобНефтЗалеж = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтЗалеж");
				Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
					ЭкзДобНефтЗалеж = СкопироватьУзел(ЭкзПокРасчНал, ДобНефтЗалеж);
					Для каждого Эл Из ЭкзДобНефтЗалеж.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(Эл, СтраницаРаздела212.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					// Многострочная часть раздела 2.1.2.
					КолНефтОсн = ПолучитьПодчиненныйЭлемент(ЭкзДобНефтЗалеж, "КолНефтОсн");
					НомерСтроки212 = 1;
					Пока СтраницаРаздела212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212, "ЧГ=")) Цикл
						ЭкзКолНефтОсн = СкопироватьУзел(ЭкзДобНефтЗалеж, КолНефтОсн);
						Для каждого Эл Из ЭкзКолНефтОсн.Строки Цикл
							ВывестиПоказательВXML(Эл, СтраницаРаздела212.Данные[Эл.Ключ + "_" + Формат(НомерСтроки212, "ЧГ=")]);
						КонецЦикла;
						НомерСтроки212 = НомерСтроки212 + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	ДанныеРаздела3 = ДанныеМногоуровневыхРазделов.Раздел3;
	
	// Определение необходимости выгрузки раздела 3.
	ВыгружатьРаздел3 = Ложь;
	Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
		ЗаполненРаздел3 = НЕ СтраницаПуста(СтраницаРаздела3.Данные, "Раздел3", УзелРодитель.Владелец());
		Если ЗаполненРаздел3 Тогда
			ВыгружатьРаздел3 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
			ЗаполненРаздел31 = НЕ СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", УзелРодитель.Владелец());
			Если ЗаполненРаздел31 Тогда
				ВыгружатьРаздел3 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
				ЗаполненРаздел311 = НЕ СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", УзелРодитель.Владелец());
				Если ЗаполненРаздел311 Тогда
					ВыгружатьРаздел3 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВыгружатьРаздел3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыгружатьРаздел3 Тогда
		
		ИсчНалГаз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалГаз");
		Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
			ЭкзИсчНалГаз = СкопироватьУзел(УзелРодитель, ИсчНалГаз);
			Для каждого Эл Из ЭкзИсчНалГаз.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела3.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 3.1.
			ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалГаз, "ПокРасчНал");
			Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
				ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалГаз, ПокРасчНал);
				Для каждого Эл Из ЭкзПокРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела31.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Раздел 3.1.1.
				КолДПИЗал = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "КолДПИЗал");
				Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
					ЭкзКолДПИЗал = СкопироватьУзел(ЭкзПокРасчНал, КолДПИЗал);
					Для каждого Эл Из ЭкзКолДПИЗал.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(Эл, СтраницаРаздела311.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					// Многострочная часть раздела 3.1.1.
					КолДПИЗалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолДПИЗал, "КолДПИЗалОсн");
					НомерСтроки311 = 1;
					Пока СтраницаРаздела311.Данные.Свойство("П000311000101_" + Формат(НомерСтроки311, "ЧГ=")) Цикл
						ЭкзКолДПИЗалОсн = СкопироватьУзел(ЭкзКолДПИЗал, КолДПИЗалОсн);
						Для каждого Эл Из ЭкзКолДПИЗалОсн.Строки Цикл
							ВывестиПоказательВXML(Эл, СтраницаРаздела311.Данные[Эл.Ключ + "_" + Формат(НомерСтроки311, "ЧГ=")]);
						КонецЦикла;
						НомерСтроки311 = НомерСтроки311 + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	// Определение необходимости выгрузки раздела 4.
	ДанныеРаздела4 = мДанныеОтчета.Раздел4;
	ВыгружатьРаздел4 = Ложь;
	Для Каждого СтраницаРаздела4 Из ДанныеРаздела4 Цикл
		Если СтраницаПуста(СтраницаРаздела4.Данные[0].Значение, "Раздел4", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		ВыгружатьРаздел4 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ВыгружатьРаздел4 Тогда
		
		ИсчУплНалНов = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалНов");
		Для Каждого СтраницаРаздела Из ДанныеРаздела4 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			ЭкзИсчУплНалНов = СкопироватьУзел(УзелРодитель, ИсчУплНалНов);
			Для Каждого Эл Из ЭкзИсчУплНалНов.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П000400007003" Тогда
						ВывестиПоказательВXML(Эл, Формат(ДанныеСтраницы[Эл.Ключ], "ДФ=""ММ.гггг"""));
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть раздела 4.
			КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалНов, "КолПИНалОсн");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000400000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзКолПИНалОсн = СкопироватьУзел(ЭкзИсчУплНалНов, КолПИНалОсн);
				Для Каждого Эл Из ЭкзКолПИНалОсн.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки, "ЧГ=")]);
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 5.
	// Определение необходимости выгрузки раздела 5.
	ДанныеРаздела5 = ДанныеМногоуровневыхРазделов.Раздел5;
	ПроверятьРаздел5 = Ложь;
	Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
		ЗаполненРаздел5 = НЕ СтраницаПуста(СтраницаРаздела5.Данные, "Раздел5", УзелРодитель.Владелец());
		Если ЗаполненРаздел5 Тогда
			ПроверятьРаздел5 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
			ЗаполненРаздел51 = НЕ СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", УзелРодитель.Владелец());
			Если ЗаполненРаздел51 Тогда
				ПроверятьРаздел5 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьРаздел5 Тогда
		
		ИсчУплНалИскл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалИскл");
		Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
			ЭкзИсчУплНалИскл = СкопироватьУзел(УзелРодитель, ИсчУплНалИскл);
			Для каждого Эл Из ЭкзИсчУплНалИскл.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела5.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 5.1.
			КолПИУчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "КолПИУчНал");
			Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
				ЭкзКолПИУчНал = СкопироватьУзел(ЭкзИсчУплНалИскл, КолПИУчНал);
				Для каждого Эл Из ЭкзКолПИУчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// Многострочная часть раздела 5.1 (признак и значение коэффициента, применяемого к ставке налога).
				ПрЗначКоэф = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "ПрЗначКоэф");
				НомерСтроки51 = 1;
				Пока СтраницаРаздела51.Данные.Свойство("П000500005501_" + Формат(НомерСтроки51, "ЧГ=")) Цикл
					ЭкзПрЗначКоэф = СкопироватьУзел(ЭкзКолПИУчНал, ПрЗначКоэф);
					Для каждого Эл Из ЭкзПрЗначКоэф.Строки Цикл
						ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ + "_" + Формат(НомерСтроки51, "ЧГ=")]);
					КонецЦикла;
					НомерСтроки51 = НомерСтроки51 + 1;
				КонецЦикла;
				// Многострочная часть раздела 5.1 (данные о количестве добытого полезного ископаемого).
				КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "КолПИНалОсн");
				НомерСтроки51 = 1;
				Пока СтраницаРаздела51.Данные.Свойство("П000510000101_" + Формат(НомерСтроки51, "ЧГ=")) Цикл
					ЭкзКолПИНалОсн = СкопироватьУзел(ЭкзКолПИУчНал, КолПИНалОсн);
					Для каждого Эл Из ЭкзКолПИНалОсн.Строки Цикл
						ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ + "_" + Формат(НомерСтроки51, "ЧГ=")]);
					КонецЦикла;
					НомерСтроки51 = НомерСтроки51 + 1;
				КонецЦикла;
				// Данные о сумме налога, подлежащей уплате в бюджет.
				СумНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "СумНалУпл");
				Для каждого Эл Из СумНалУпл.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Раздел 5.2.
			ДаннРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "ДаннРасчНал");
			НомерСтроки52 = 1;
			Пока СтраницаРаздела5.Данные.Свойство("П000520000101_" + Формат(НомерСтроки52, "ЧГ=")) Цикл
				ЭкзДаннРасчНал = СкопироватьУзел(ЭкзИсчУплНалИскл, ДаннРасчНал);
				Для каждого Эл Из ЭкзДаннРасчНал.Строки Цикл
					ВывестиПоказательВXML(Эл, СтраницаРаздела5.Данные[Эл.Ключ + "_" + Формат(НомерСтроки52, "ЧГ=")]);
				КонецЦикла;
				НомерСтроки52 = НомерСтроки52 + 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 6.
	СтоимЕдДПИ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СтоимЕдДПИ");
	ДанныеРаздела6 = мДанныеОтчета.Раздел6;
	СумРасхДПИОбщ = ПолучитьПодчиненныйЭлемент(СтоимЕдДПИ, "СумРасхДПИОбщ");
	Для каждого Эл Из СумРасхДПИОбщ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	СумРасхДПИОтд = ПолучитьПодчиненныйЭлемент(СтоимЕдДПИ, "СумРасхДПИОтд");
	Для каждого Эл Из СумРасхДПИОтд.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Многострочная часть раздела 6.2.
	СумРасхДПИКод = ПолучитьПодчиненныйЭлемент(СумРасхДПИОтд, "СумРасхДПИКод");
	НомерСтроки = 1;
	Пока ДанныеРаздела6.Свойство("П000620000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЭкзСумРасхДПИКод = СкопироватьУзел(СумРасхДПИОтд, СумРасхДПИКод);
		Для Каждого Эл Из ЭкзСумРасхДПИКод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ + "_" + Формат(НомерСтроки, "ЧГ=")]);
			КонецЕсли;
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	// Раздел 7.
	ДанныеРаздела7 = мДанныеОтчета.Раздел7;
	ИсчУплНалУг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалУг");
	Для Каждого СтраницаРаздела Из ДанныеРаздела7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзИсчУплНалУг = СкопироватьУзел(УзелРодитель, ИсчУплНалУг);
		Для Каждого Эл Из ЭкзИсчУплНалУг.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Код = "Ктд" Тогда
					КоэфКтд = СокрЛП(ДанныеСтраницы[Эл.Ключ]);
					Если СтрДлина(КоэфКтд) = 3 Тогда
						Если КоэфКтд = "0,0" Тогда
							ВывестиПоказательВXML(Эл, "0");
						Иначе
							ВывестиПоказательВXML(Эл, СтрЗаменить(КоэфКтд, ",", "."));
						КонецЕсли;
					Иначе
						ВывестиПоказательВXML(Эл, "");
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 7 (подраздел 7.1).
		ДанДПИУг = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "ДанДПИУг");
		ДанДПИУгУч = ПолучитьПодчиненныйЭлемент(ДанДПИУг, "ДанДПИУгУч");
		НомерСтроки71 = 1;
		Пока ДанныеСтраницы.Свойство("П000710000101_" + Формат(НомерСтроки71, "ЧГ=")) Цикл
			ЭкзДанДПИУгУч = СкопироватьУзел(ДанДПИУг, ДанДПИУгУч);
			Для Каждого Эл Из ЭкзДанДПИУгУч.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки71, "ЧГ=")]);
				КонецЕсли;
			КонецЦикла;
			НомерСтроки71 = НомерСтроки71 + 1;
		КонецЦикла;
		// Подраздел 7.2.
		РасчНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалУпл");
		Для Каждого Эл Из РасчНалУпл.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		РасхОТПер = ПолучитьПодчиненныйЭлемент(РасчНалУпл, "РасхОТПер");
		Для Каждого Эл Из РасхОТПер.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 7 (подраздел 7.3).
		РасчНалВыч = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалВыч");
		РасчНалВычПер = ПолучитьПодчиненныйЭлемент(РасчНалВыч, "РасчНалВычПер");
		НомерСтроки73 = 1;
		Пока ДанныеСтраницы.Свойство("П000730000101_" + Формат(НомерСтроки73, "ЧГ=")) Цикл
			ЭкзРасчНалВычПер = СкопироватьУзел(РасчНалВыч, РасчНалВычПер);
			Для Каждого Эл Из ЭкзРасчНалВычПер.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П000730000101" ИЛИ Эл.Ключ = "П000730000106" Тогда
						ВывестиПоказательВXML(Эл, Формат(ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки73, "ЧГ=")], "ДФ=""ММ.гггг"""));
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки73, "ЧГ=")]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НомерСтроки73 = НомерСтроки73 + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 8.
	// Определение необходимости выгрузки раздела 8.
	ДанныеРаздела8 = ДанныеМногоуровневыхРазделов.Раздел8;
	ПроверятьРаздел8 = Ложь;
	Для каждого СтраницаРаздела8 Из ДанныеРаздела8.Строки Цикл
		ЗаполненРаздел8 = НЕ СтраницаПуста(СтраницаРаздела8.Данные, "Раздел8", УзелРодитель.Владелец());
		Если ЗаполненРаздел8 Тогда
			ПроверятьРаздел8 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела81 Из СтраницаРаздела8.Строки Цикл
			ЗаполненРаздел81 = НЕ СтраницаПуста(СтраницаРаздела81.Данные, "Раздел81", УзелРодитель.Владелец());
			Если ЗаполненРаздел81 Тогда
				ПроверятьРаздел8 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел8 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьРаздел8 Тогда
		
		ИсчНалНефтНДД = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалНефтНДД");
		Для каждого СтраницаРаздела8 Из ДанныеРаздела8.Строки Цикл
			ЭкзИсчНалНефтНДД = СкопироватьУзел(УзелРодитель, ИсчНалНефтНДД);
			Для каждого Эл Из ЭкзИсчНалНефтНДД.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела8.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 8.1.
			РасчНалУч = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефтНДД, "РасчНалУч");
			Для каждого СтраницаРаздела81 Из СтраницаРаздела8.Строки Цикл
				ЭкзРасчНалУч = СкопироватьУзел(ЭкзИсчНалНефтНДД, РасчНалУч);
				Для каждого Эл Из ЭкзРасчНалУч.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела81.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// Многострочная часть раздела 8.1.
				КолНефтНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалУч, "КолНефтНалОсн");
				НомерСтроки81 = 1;
				Пока СтраницаРаздела81.Данные.Свойство("П000810000101_" + Формат(НомерСтроки81, "ЧГ=")) Цикл
					ЭкзКолНефтНалОсн = СкопироватьУзел(ЭкзРасчНалУч, КолНефтНалОсн);
					Для каждого Эл Из ЭкзКолНефтНалОсн.Строки Цикл
						ВывестиПоказательВXML(Эл, СтраницаРаздела81.Данные[Эл.Ключ + "_" + Формат(НомерСтроки81, "ЧГ=")]);
					КонецЦикла;
					НомерСтроки81 = НомерСтроки81 + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	Если Показатели = "Раздел2" Тогда
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200001003");
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200003003");
	ИначеЕсли Показатели = "Раздел8" Тогда
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000800001003");
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000800003003");
	КонецЕсли;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ])
				И НЕ (Пок.Ключ = "П000700005003" И СокрЛП(ДанныеСтраницы[Пок.Ключ]) = "-") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
	НЕ ЗначениеЗаполнено(Узел.Значение));
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
			СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
					КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
			+ """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
			+ """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана. Выгрузка невозможна';
								|en = 'Организация не выбрана. Выгрузка невозможна'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ПроверятьВозможностьВыгрузки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения_СКП(ЭтаФорма, Новый Структура);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если ПроверятьВозможностьВыгрузки И НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела2 = НайденнаяСтраница2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел212" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела2 = НайденнаяСтраница2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				ТекСтраницаРаздела21 = НайденнаяСтраница21;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел31" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела3 = НайденнаяСтраница3;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел311" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела3 = НайденнаяСтраница3;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				ТекСтраницаРаздела31 = НайденнаяСтраница31;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел5" Тогда
		
		Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел51" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела5 = НайденнаяСтраница5;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел8" Тогда
		
		Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
				Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница8.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел81" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
				Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела8 = НайденнаяСтраница8;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница81 Из ТекСтраницаРаздела8.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница81.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница81.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Раздел2"
		ИЛИ Ячейка.Раздел = "Раздел21"
		ИЛИ Ячейка.Раздел = "Раздел212"
		ИЛИ Ячейка.Раздел = "Раздел3"
		ИЛИ Ячейка.Раздел = "Раздел31"
		ИЛИ Ячейка.Раздел = "Раздел311"
		ИЛИ Ячейка.Раздел = "Раздел5"
		ИЛИ Ячейка.Раздел = "Раздел51"
		ИЛИ Ячейка.Раздел = "Раздел8"
		ИЛИ Ячейка.Раздел = "Раздел81" Тогда
		
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		ИначеЕсли Ячейка.СтрокаПП <> Неопределено
			И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				Иначе
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				
				ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
				
				КолСтрокВДеревеДанныхРаздел2 = Макс(ДеревоДанныхРаздел2.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел2 = 1 По КолСтрокВДеревеДанныхРаздел2 Цикл
					
					ЭлементРаздел2 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел2.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел2;
					ЭлементРаздел2.КолонкаРазделыОтчетаСокрНаим      = "Раздел2";
					ЭлементРаздел2.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел2;
					ЭлементРаздел2.ИндексКартинки                    = 0;
					ЭлементРаздел2.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел2.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел21
						= Макс(ДеревоДанныхРаздел2.Строки[НомерСтраницыРаздел2 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел21 = 1 По КолСтрокВДеревеДанныхРаздел21 Цикл
						
						ЭлементРаздел21 = ЭлементРаздел2.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел21.КолонкаРазделыОтчета              = "Расчет налога. Стр. " + НомерСтраницыРаздел21;
						ЭлементРаздел21.КолонкаРазделыОтчетаСокрНаим      = "Раздел21";
						ЭлементРаздел21.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел21;
						ЭлементРаздел21.ИндексКартинки                    = 0;
						ЭлементРаздел21.РазделМногостраничный             = ЭлементРаздел2.РазделМногостраничный;
						ЭлементРаздел21.РазделМногострочный               = ЭлементРаздел2.РазделМногострочный;
						
						КолСтрокВДеревеДанныхРаздел212
							= Макс(ДеревоДанныхРаздел2.Строки[НомерСтраницыРаздел2 - 1].Строки[НомерСтраницыРаздел21 - 1].Строки.Количество(), 1);
						
						Для НомерСтраницыРаздел212 = 1 По КолСтрокВДеревеДанныхРаздел212 Цикл
							
							ЭлементРаздел212 = ЭлементРаздел21.ПолучитьЭлементы().Добавить();
							
							ЭлементРаздел212.КолонкаРазделыОтчета              = "Нефть, добытая" + Символы.ПС + "из залежи. Стр. " + НомерСтраницыРаздел212;
							ЭлементРаздел212.КолонкаРазделыОтчетаСокрНаим      = "Раздел212";
							ЭлементРаздел212.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел212;
							ЭлементРаздел212.ИндексКартинки                    = 1;
							ЭлементРаздел212.РазделМногостраничный             = ЭлементРаздел21.РазделМногостраничный;
							ЭлементРаздел212.РазделМногострочный               = ЭлементРаздел21.РазделМногострочный;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				
				ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
				
				КолСтрокВДеревеДанныхРаздел3 = Макс(ДеревоДанныхРаздел3.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел3 = 1 По КолСтрокВДеревеДанныхРаздел3 Цикл
					
					ЭлементРаздел3 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел3.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел3;
					ЭлементРаздел3.КолонкаРазделыОтчетаСокрНаим      = "Раздел3";
					ЭлементРаздел3.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел3;
					ЭлементРаздел3.ИндексКартинки                    = 0;
					ЭлементРаздел3.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел3.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел31
						= Макс(ДеревоДанныхРаздел3.Строки[НомерСтраницыРаздел3 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел31 = 1 По КолСтрокВДеревеДанныхРаздел31 Цикл
						
						ЭлементРаздел31 = ЭлементРаздел3.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел31.КолонкаРазделыОтчета              = "Расчет налога. Стр. " + НомерСтраницыРаздел31;
						ЭлементРаздел31.КолонкаРазделыОтчетаСокрНаим      = "Раздел31";
						ЭлементРаздел31.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел31;
						ЭлементРаздел31.ИндексКартинки                    = 0;
						ЭлементРаздел31.РазделМногостраничный             = ЭлементРаздел3.РазделМногостраничный;
						ЭлементРаздел31.РазделМногострочный               = ЭлементРаздел3.РазделМногострочный;
						
						КолСтрокВДеревеДанныхРаздел311
							= Макс(ДеревоДанныхРаздел3.Строки[НомерСтраницыРаздел3 - 1].Строки[НомерСтраницыРаздел31 - 1].Строки.Количество(), 1);
						
						Для НомерСтраницыРаздел311 = 1 По КолСтрокВДеревеДанныхРаздел311 Цикл
							
							ЭлементРаздел311 = ЭлементРаздел31.ПолучитьЭлементы().Добавить();
							
							ЭлементРаздел311.КолонкаРазделыОтчета              = "Полезное ископаемое," + Символы.ПС + "добытое из залежи. Стр. " + НомерСтраницыРаздел311;
							ЭлементРаздел311.КолонкаРазделыОтчетаСокрНаим      = "Раздел311";
							ЭлементРаздел311.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел311;
							ЭлементРаздел311.ИндексКартинки                    = 1;
							ЭлементРаздел311.РазделМногостраничный             = ЭлементРаздел31.РазделМногостраничный;
							ЭлементРаздел311.РазделМногострочный               = ЭлементРаздел31.РазделМногострочный;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				
				ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
				
				КолСтрокВДеревеДанныхРаздел5 = Макс(ДеревоДанныхРаздел5.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел5 = 1 По КолСтрокВДеревеДанныхРаздел5 Цикл
					
					ЭлементРаздел5 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел5.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел5;
					ЭлементРаздел5.КолонкаРазделыОтчетаСокрНаим      = "Раздел5";
					ЭлементРаздел5.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел5;
					ЭлементРаздел5.ИндексКартинки                    = 0;
					ЭлементРаздел5.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел5.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел51
						= Макс(ДеревоДанныхРаздел5.Строки[НомерСтраницыРаздел5 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел51 = 1 По КолСтрокВДеревеДанныхРаздел51 Цикл
						
						ЭлементРаздел51 = ЭлементРаздел5.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел51.КолонкаРазделыОтчета              = "Раздел 5.1. Стр. " + НомерСтраницыРаздел51;
						ЭлементРаздел51.КолонкаРазделыОтчетаСокрНаим      = "Раздел51";
						ЭлементРаздел51.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел51;
						ЭлементРаздел51.ИндексКартинки                    = 1;
						ЭлементРаздел51.РазделМногостраничный             = ЭлементРаздел5.РазделМногостраничный;
						ЭлементРаздел51.РазделМногострочный               = ЭлементРаздел5.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
				
				ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
				
				КолСтрокВДеревеДанныхРаздел8 = Макс(ДеревоДанныхРаздел8.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел8 = 1 По КолСтрокВДеревеДанныхРаздел8 Цикл
					
					ЭлементРаздел8 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел8.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел8;
					ЭлементРаздел8.КолонкаРазделыОтчетаСокрНаим      = "Раздел8";
					ЭлементРаздел8.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел8;
					ЭлементРаздел8.ИндексКартинки                    = 0;
					ЭлементРаздел8.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел8.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел81
						= Макс(ДеревоДанныхРаздел8.Строки[НомерСтраницыРаздел8 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел81 = 1 По КолСтрокВДеревеДанныхРаздел81 Цикл
						
						ЭлементРаздел81 = ЭлементРаздел8.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел81.КолонкаРазделыОтчета              = "Расчет налога. Стр. " + НомерСтраницыРаздел81;
						ЭлементРаздел81.КолонкаРазделыОтчетаСокрНаим      = "Раздел81";
						ЭлементРаздел81.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел81;
						ЭлементРаздел81.ИндексКартинки                    = 1;
						ЭлементРаздел81.РазделМногостраничный             = ЭлементРаздел8.РазделМногостраничный;
						ЭлементРаздел81.РазделМногострочный               = ЭлементРаздел8.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(
				ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел8"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел81" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если (СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Уплата налога") > 0)
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Уплата налога""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Расчет налога") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Расчет налога""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Нефть") > 0
			И СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "из залежи") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Нефть, добытая из залежи""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Полезное ископаемое") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Полезное ископаемое, добытое из залежи""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Раздел 5.1") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Раздел 5.1""";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел7" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы71);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы73);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы71].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы73].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ТаблицаДопСтрокГруппы);
		
	ИначеЕсли ИмяСтраницы = "Раздел4" Тогда
		
		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИдГруппы);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочного блока.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + ИдГруппы].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела = ТаблицаДопСтрокГруппы;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если НаимРаздела = "Раздел4"
		ИЛИ НаимРаздела = "Раздел7" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел6" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Многоуровневые разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Раздел21"
		ИЛИ НаимРаздела = "Раздел212"
		ИЛИ НаимРаздела = "Раздел3"
		ИЛИ НаимРаздела = "Раздел31"
		ИЛИ НаимРаздела = "Раздел311"
		ИЛИ НаимРаздела = "Раздел5"
		ИЛИ НаимРаздела = "Раздел51"
		ИЛИ НаимРаздела = "Раздел8"
		ИЛИ НаимРаздела = "Раздел81" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТекВетка.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначений(ИмяТекРаздела)
	
	Если ИмяТекРаздела = "Раздел51" Тогда
		ТабличныйДокумент.Области.П000500008003.ТипЗначения
		= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДСДМ;
	ИначеЕсли ИмяТекРаздела = "Раздел21" Тогда
		ТабличныйДокумент.Области.П000200005503.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло15_10;
		ТабличныйДокумент.Области.П000200006003.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповЧисло17_10;
		ТабличныйДокумент.Области.П000200012503.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло16_10;
	ИначеЕсли ИмяТекРаздела = "Раздел212" Тогда
		ТабличныйДокумент.Области.П000200020503.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло15_10;
		ТабличныйДокумент.Области.П000200021003.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповЧисло17_10;
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		ТабличныйДокумент.Области.П000300018003.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло16_15;
		ТабличныйДокумент.Области.П000300018503.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧисло16_10;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Программная установка типа (обход интерактивного запрета на точность больше 9).
	УстановитьТипЗначений(ИмяТекРаздела);
	
	// Многостраничные и многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел7" Тогда
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел7";
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
				Если ЭтаФорма[ИмяГруппыДопСтрок].Количество() = 1 Тогда 
					Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1"];
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_2");
			Если Обл = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел4" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей.
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными.
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела.
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Раздел6" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппыДопСтрок = КЗ.Ключ;
			Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел21"
		ИЛИ ИмяТекРаздела = "Раздел212"
		ИЛИ ИмяТекРаздела = "Раздел3"
		ИЛИ ИмяТекРаздела = "Раздел31"
		ИЛИ ИмяТекРаздела = "Раздел311"
		ИЛИ ИмяТекРаздела = "Раздел5"
		ИЛИ ИмяТекРаздела = "Раздел51"
		ИЛИ ИмяТекРаздела = "Раздел8"
		ИЛИ ИмяТекРаздела = "Раздел81" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(ИмяТекРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Если ИмяТекРаздела = "Раздел21"
			ИЛИ ИмяТекРаздела = "Раздел212"
			ИЛИ ИмяТекРаздела = "Раздел311"
			ИЛИ ИмяТекРаздела = "Раздел5"
			ИЛИ ИмяТекРаздела = "Раздел51"
			ИЛИ ИмяТекРаздела = "Раздел81" Тогда
			
			ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
			
			//Если НЕ ЗначениеЗаполнено(ИмяГруппы)
			//	И ИмяТекРаздела = "Раздел51" Тогда
			Если ИмяТекРаздела = "Раздел51" Тогда
				
				ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы50;
				
				ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, ТекВетка.Данные);
				
				СтруктураГруппы = Неопределено;
				
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
				
				Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
					ИмяГруппыДопСтрок = КЗ.Ключ;
					Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
						Если Обл <> Неопределено Тогда 
							Обл.Гиперссылка = Ложь;
							Обл.Текст = "";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы51;
				
			КонецЕсли;
			
			ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, ТекВетка.Данные);
			
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
			Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
				ИмяГруппыДопСтрок = КЗ.Ключ;
				Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
					Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
					Если Обл <> Неопределено Тогда 
						Обл.Гиперссылка = Ложь;
						Обл.Текст = "";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный"
		И ИмяТекРаздела <> "Раздел2"
		И ИмяТекРаздела <> "Раздел21"
		И ИмяТекРаздела <> "Раздел212"
		И ИмяТекРаздела <> "Раздел3"
		И ИмяТекРаздела <> "Раздел31"
		И ИмяТекРаздела <> "Раздел311"
		И ИмяТекРаздела <> "Раздел5"
		И ИмяТекРаздела <> "Раздел51"
		И ИмяТекРаздела <> "Раздел8"
		И ИмяТекРаздела <> "Раздел81" Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел31" Тогда
		ОбновитьНомераСтраницРазделов3СКодомВидаДПИ03200();
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел51" Тогда
		ОбновитьНомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	Иначе
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоРазделовВФормеОтчета(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Раздел21"
		ИЛИ ИмяРаздела = "Раздел212"
		ИЛИ ИмяРаздела = "Раздел3"
		ИЛИ ИмяРаздела = "Раздел31"
		ИЛИ ИмяРаздела = "Раздел311"
		ИЛИ ИмяРаздела = "Раздел5"
		ИЛИ ИмяРаздела = "Раздел51"
		ИЛИ ИмяРаздела = "Раздел8"
		ИЛИ ИмяРаздела = "Раздел81" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяРаздела", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
		Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
			|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
		
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаПодчиненногоРазделаНаСервере(ИмяРаздела);
		
		СпрятатьСсылкуУдалитьСтраницу();
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаПодчиненногоРазделаНаСервере(ИмяРаздела) Экспорт
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	Если ИмяРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
		ТабличныйДокумент.Области["П000200003003"].Значение = "168";
	ИначеЕсли ИмяРаздела = "Раздел8" Тогда
		ТабличныйДокумент.Области["П000800001003"].Значение = "03100";
		ТабличныйДокумент.Области["П000800003003"].Значение = "168";
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(
	ИмяРаздела, , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетВДеревеЗначений(ЭтаФорма, ИмяРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
			ТабличныйДокумент.Области["П000400002003"].Очистить();
			УстановитьДоступностьОбластей(ЭтаФорма, "Раздел4");
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
			ТабличныйДокумент.Области["П000700005003"].Значение = "-";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ДобавитьСтраницуВРазделе2НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		Родитель21 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя21 = Родитель21.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя21);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212" Тогда
		
		Родитель212 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя212 = Родитель212.КолонкаНомерСтраницыРазделаОтчета;
		
		ПраРодитель212 = Родитель212.ПолучитьРодителя();
		НомСтраницыПраРодителя212 = ПраРодитель212.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе212НаСервере(НомСтраницыРодителя212, НомСтраницыПраРодителя212);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		ДобавитьСтраницуВРазделе3НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
		
		Родитель31 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя31 = Родитель31.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе31НаСервере(НомСтраницыРодителя31);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311" Тогда
		
		Родитель311 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя311 = Родитель311.КолонкаНомерСтраницыРазделаОтчета;
		
		ПраРодитель311 = Родитель311.ПолучитьРодителя();
		НомСтраницыПраРодителя311 = ПраРодитель311.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе311НаСервере(НомСтраницыРодителя311, НомСтраницыПраРодителя311);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		ДобавитьСтраницуВРазделе5НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51" Тогда
		
		Родитель51 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя51 = Родитель51.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе51НаСервере(НомСтраницыРодителя51);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
		
		ДобавитьСтраницуВРазделе8НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел81" Тогда
		
		Родитель81 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя81 = Родитель81.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе81НаСервере(НомСтраницыРодителя81);
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4" Тогда
			ТабличныйДокумент.Области["П000400002003"].Очистить();
		ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7" Тогда
			ТабличныйДокумент.Области["П000700005003"].Значение = "-";
		КонецЕсли;
		
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе2НаСервере()
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки.Добавить();
	ВеткаРаздел2.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел2"));
	ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
	ТабличныйДокумент.Области["П000200003003"].Значение = "168";
	ВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел21 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе212НаСервере(НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки[
	НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 2
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел212 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];// ур. 2
	ПредыдущаяВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела21 = НайденнаяСтраница21;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе3НаСервере()
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки.Добавить();
	ВеткаРаздел3.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
	ВеткаРаздел31.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел3.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
	ВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел3"));
	ВеткаРаздел3.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе31НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
	ВеткаРаздел31.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел31 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
	ВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе311НаСервере(НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки[
	НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 2
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел311 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];// ур. 2
	ПредыдущаяВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела31 = НайденнаяСтраница31;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе5НаСервере()
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	// Ур. 0.
	ВеткаРаздел5 = ДеревоДанныхРаздел5.Строки.Добавить();
	ВеткаРаздел5.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
	ВеткаРаздел51.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел5.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел5 = ДеревоДанныхРаздел5.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел5.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
	ВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел5"));
	ВеткаРаздел5.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе51НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	// Ур. 0.
	ВеткаРаздел5 = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
	ВеткаРаздел51.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел51 = ДеревоДанныхРаздел5.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
	Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
	ВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела5 = НайденнаяСтраница5;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе8НаСервере()
	
	ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
	
	// Ур. 0.
	ВеткаРаздел8 = ДеревоДанныхРаздел8.Строки.Добавить();
	ВеткаРаздел8.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел81 = ВеткаРаздел8.Строки.Добавить();
	ВеткаРаздел81.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел8.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел8 = ДеревоДанныхРаздел8.Строки[
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел8.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел81"));
	ВеткаРаздел81.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел8"));
	ТабличныйДокумент.Области["П000800001003"].Значение = "03100";
	ТабличныйДокумент.Области["П000800003003"].Значение = "168";
	ВеткаРаздел8.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел8, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
			Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница8.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе81НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
	
	// Ур. 0.
	ВеткаРаздел8 = ДеревоДанныхРаздел8.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел81 = ВеткаРаздел8.Строки.Добавить();
	ВеткаРаздел81.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел8.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел81 = ДеревоДанныхРаздел8.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел81.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел81"));
	ВеткаРаздел81.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел8, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
			Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела8 = НайденнаяСтраница8;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница81 Из ТекСтраницаРаздела8.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница81.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница81.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(Форма, ИмяГруппы, ДанныеРаздела)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СтруктураГруппы.Очистить();
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	ИмяПервойКолонки = СписокИменКолонокРаздела.Получить(0).Значение;
	
	НСтр = 1;
	НСтрСтр = "1";
	
	Пока ДанныеРаздела.Свойство(ИмяПервойКолонки + "_" + НСтрСтр) Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы.Добавить();
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если ТекСтрокаТаблицы.Свойство(ИмяКолонки) Тогда
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ДанныеРаздела[ИмяПоказателя];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НСтр = НСтр + 1;
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел212"
		ИЛИ ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311"
		ИЛИ ИмяРаздела = "Раздел5" ИЛИ ИмяРаздела = "Раздел51" Тогда
		
		РасчетВДеревеЗначений(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		РасчетВСтруктуре(Форма, "Раздел4");
	
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		// Стр. 040 = стр. 010 + стр. 020 - стр. 030.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600004003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600004003.Значение
					= Форма.ТабличныйДокумент.Области.П000600001003.Значение
					+ Форма.ТабличныйДокумент.Области.П000600002003.Значение
					- Форма.ТабличныйДокумент.Области.П000600003003.Значение;
				Форма.СтруктураДанныхРаздел6.Вставить("П000600004003",
					Форма.ТабличныйДокумент.Области.П000600004003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600004003",
					Форма.СтруктураДанныхРаздел6.П000600001003
					+ Форма.СтруктураДанныхРаздел6.П000600002003
					- Форма.СтруктураДанныхРаздел6.П000600003003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 090 = стр. 050 + стр. 060 + стр. 070 х стр. 010 : стр. 080.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600009003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600009003.Значение
					= Форма.ТабличныйДокумент.Области.П000600005003.Значение
					+ Форма.ТабличныйДокумент.Области.П000600006003.Значение;
				// Учет деления на ноль.
				Если Форма.ТабличныйДокумент.Области.П000600008003.Значение <> 0 Тогда
					Форма.ТабличныйДокумент.Области.П000600009003.Значение
						= Окр(Форма.ТабличныйДокумент.Области.П000600009003.Значение
						+ Форма.ТабличныйДокумент.Области.П000600007003.Значение
						* Форма.ТабличныйДокумент.Области.П000600001003.Значение
						/ Форма.ТабличныйДокумент.Области.П000600008003.Значение, 2);
				КонецЕсли;
				Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
					Форма.ТабличныйДокумент.Области.П000600009003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
					Форма.СтруктураДанныхРаздел6.П000600005003
					+ Форма.СтруктураДанныхРаздел6.П000600006003);
				// Учет деления на ноль.
				Если Форма.СтруктураДанныхРаздел6.П000600008003 <> 0 Тогда
					Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
						Окр(Форма.СтруктураДанныхРаздел6.П000600009003
						+ Форма.СтруктураДанныхРаздел6.П000600007003
						* Форма.СтруктураДанныхРаздел6.П000600001003
						/ Форма.СтруктураДанныхРаздел6.П000600008003, 2));
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 100 = стр. 040 + стр. 090.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600010003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600010003.Значение
					= Форма.ТабличныйДокумент.Области.П000600004003.Значение
					+ Окр(Форма.ТабличныйДокумент.Области.П000600009003.Значение, 2);
				Форма.СтруктураДанныхРаздел6.Вставить("П000600010003",
					Форма.ТабличныйДокумент.Области.П000600010003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600010003",
					Форма.СтруктураДанныхРаздел6.П000600004003
					+ Окр(Форма.СтруктураДанныхРаздел6.П000600009003, 2));
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000620000103, Лев(ОбластьИмя, 13)) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000620000104, Лев(ОбластьИмя, 13)) > 0)) Тогда
			
			ОбщаяСуммаПоГрафе2 = 0;
			ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = 0;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				НомДопСтроки = 1;
				НомДопСтрокиСтр = "1";
				Пока Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + НомДопСтрокиСтр) <> Неопределено Цикл
					ОбщаяСуммаПоГрафе2 = ОбщаяСуммаПоГрафе2
						+ Форма.ТабличныйДокумент.Области["П000620000102_" + НомДопСтрокиСтр].Значение;
					НомДопСтроки = НомДопСтроки + 1;
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
				КонецЦикла;
				
				НомДопСтроки = 1;
				НомДопСтрокиСтр = "1";
				Пока Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + НомДопСтрокиСтр) <> Неопределено Цикл
					ЭтоПоследняяСтрокаРаздела62
						= Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + Формат(НомДопСтроки + 1, "ЧГ=")) = Неопределено;
					Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
						Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
							= ?(ОбщаяСуммаПоГрафе2 <> 0,
							Форма.ТабличныйДокумент.Области["П000620000102_" + НомДопСтрокиСтр].Значение
							/ ОбщаяСуммаПоГрафе2, 0);
						ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки
							+ Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение;
					Иначе
						Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
							= ?(ОбщаяСуммаПоГрафе2 <> 0, 1 - ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки, 0);
					КонецЕсли;
					Форма.ТабличныйДокумент.Области["П000620000104_" + НомДопСтрокиСтр].Значение
						= Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
						* Форма.ТабличныйДокумент.Области["П000600010003"].Значение;
					НомДопСтроки = НомДопСтроки + 1;
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
				КонецЦикла;
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы62, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					ОбщаяСуммаПоГрафе2 = ОбщаяСуммаПоГрафе2 + Зап.П000620000102;
				КонецЦикла;
				Для каждого Зап Из ТаблицаБлока Цикл
					ЭтоПоследняяСтрокаРаздела62 = (ТаблицаБлока.Индекс(Зап) = ТаблицаБлока.Количество() - 1);
					Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
						Зап.П000620000103 = ?(ОбщаяСуммаПоГрафе2 <> 0, Зап.П000620000102 / ОбщаяСуммаПоГрафе2, 0);
						ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки
							+ Зап.П000620000103;
					Иначе
						Зап.П000620000103 = ?(ОбщаяСуммаПоГрафе2 <> 0, 1 - ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки, 0);
					КонецЕсли;
					Зап.П000620000104 = Зап.П000620000103 * Форма.СтруктураДанныхРаздел6.П000600010003;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел7");
		
	ИначеЕсли ИмяРаздела = "Раздел81" Тогда
		
		Если РассчитыватьСтроку070Раздела81(Форма) Тогда
			
			// Стр. 070 = 0,5 * (стр. 080 - 15) * стр. 090 * 7,3 * стр. 110 - стр. 120 * стр. 090
			//(Кндд = 0,5 x (Цнефть - 15) x Р x 7,3 x Кг - ЭП x Р)
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Если ЗначениеЗаполнено(ОбластьИмя)
					И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000800007003, ОбластьИмя) > 0) Тогда
					
					Стр080 = Форма.ТабличныйДокумент.Области.П000800008003.Значение;
					Стр090 = Форма.ТабличныйДокумент.Области.П000800009003.Значение;
					Стр110 = Форма.ТабличныйДокумент.Области.П000800011003.Значение;
					Стр120 = Форма.ТабличныйДокумент.Области.П000800012003.Значение;
					Форма.ТабличныйДокумент.Области.П000800007003.Значение
						= 0.5 * (Стр080 - 15) * Стр090 * 7.3 * Стр110 - ?(Стр110 < 1, 0, Стр120 * Стр090);
				ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
					РасчетВДеревеЗначений(Форма, ИмяРаздела);
				КонецЕсли;
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 180 = стр. 150 - стр. 165.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000800018003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000800018003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000800015003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000800016503.Значение);
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел81");
		Расчет(Форма, "Раздел7");
		Расчет(Форма, "Раздел6");
		Расчет(Форма, "Раздел5");
		Расчет(Форма, "Раздел4");
		Расчет(Форма, "Раздел3");
		Расчет(Форма, "Раздел21");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		Если ИмяЛиста = "Раздел4" Тогда
			// Стр. 170 = ?(стр. 150 = 0, стр. 140 - стр. 160,  стр. 150 - стр. 160).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000400017003.Значение
				= ?(Форма.ТабличныйДокумент.Области.П000400015003.Значение = 0,
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				  Форма, Форма.ТабличныйДокумент.Области.П000400014003.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				  Форма, Форма.ТабличныйДокумент.Области.П000400016003.Значение),
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				  Форма, Форма.ТабличныйДокумент.Области.П000400015003.Значение)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				  Форма, Форма.ТабличныйДокумент.Области.П000400016003.Значение));
				Данные.Вставить("П000400017003", Форма.ТабличныйДокумент.Области.П000400017003.Значение);
			Иначе
				Данные.Вставить("П000400017003", ?(Данные.П000400015003 = 0,
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400014003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400016003),
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400015003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400016003)));
			КонецЕсли;
		ИначеЕсли ИмяЛиста = "Раздел7" Тогда
			// Стр. 070 = стр. 080 + стр. 090 + стр. 100.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700007003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области.П000700008003.Значение
					+ Форма.ТабличныйДокумент.Области.П000700009003.Значение
					+ Форма.ТабличныйДокумент.Области.П000700010003.Значение);
				Данные.Вставить("П000700007003", Форма.ТабличныйДокумент.Области.П000700007003.Значение);
			Иначе
				Данные.Вставить("П000700007003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Данные.П000700008003 + Данные.П000700009003 + Данные.П000700010003));
			КонецЕсли;
			
			// Стр. 130 = сумма значений графы 4 подраздела 7.1 с кодами 6000, 6001, 6100 и 6101 по графе 2.
			ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрок = Неопределено) ИЛИ (Тип(ДанныеДопСтрок) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			ДанныеДопСтрокПодразд71 = ДанныеДопСтрок.П0007100001;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд71.Количество() Цикл
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
					ДопСтрокаПодразд71 = ДанныеДопСтрокПодразд71[НомДопСтроки - 1];
					ДопСтрокаПодразд71.П000710000102 = Форма.ТабличныйДокумент.Области["П000710000102_" + НомДопСтрокиСтр].Значение;
					ДопСтрокаПодразд71.П000710000104 = Форма.ТабличныйДокумент.Области["П000710000104_" + НомДопСтрокиСтр].Значение;
				КонецЦикла;
			КонецЕсли;
			
			СуммаЗначенийГрафы4Подраздела71 = 0;
			
			Для Каждого ДопСтрокаПодразд71 Из ДанныеДопСтрокПодразд71 Цикл
				
				Если СокрЛП(ДопСтрокаПодразд71.П000710000102) = "6000"
					ИЛИ СокрЛП(ДопСтрокаПодразд71.П000710000102) = "6001"
					ИЛИ СокрЛП(ДопСтрокаПодразд71.П000710000102) = "6100"
					ИЛИ СокрЛП(ДопСтрокаПодразд71.П000710000102) = "6101" Тогда
					
					СуммаЗначенийГрафы4Подраздела71
						= СуммаЗначенийГрафы4Подраздела71
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, ДопСтрокаПодразд71.П000710000104);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				
				Форма.ТабличныйДокумент.Области.П000700013003.Значение
					= СуммаЗначенийГрафы4Подраздела71;
					
				Данные.Вставить("П000700013003", Форма.ТабличныйДокумент.Области.П000700013003.Значение);
				
			Иначе
				
				Данные.Вставить("П000700013003", СуммаЗначенийГрафы4Подраздела71);
				
			КонецЕсли;
			
			// Стр. 140 = стр. 130 × стр. 120.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700014003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области.П000700013003.Значение)
					* Форма.ТабличныйДокумент.Области.П000700012003.Значение);
				Данные.Вставить("П000700014003", Форма.ТабличныйДокумент.Области.П000700014003.Значение);
			Иначе
				Данные.Вставить("П000700014003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Данные.П000700013003) * Данные.П000700012003));
			КонецЕсли;
			
			// Стр. 110 = стр. 060 + стр. 070 <= стр. 140.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700011003.Значение = Мин(
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700006003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700007003.Значение),
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700014003.Значение));
				Данные.Вставить("П000700011003", Форма.ТабличныйДокумент.Области.П000700011003.Значение);
			Иначе
				Данные.Вставить("П000700011003", Мин(
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700006003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700007003),
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700014003)));
			КонецЕсли;
			
			// Стр. 150 = стр. 130 - стр. 110.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700015003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700013003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700011003.Значение);
				Данные.Вставить("П000700015003",
					Форма.ТабличныйДокумент.Области.П000700015003.Значение);
			Иначе
				Данные.Вставить("П000700015003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700013003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700011003));
			КонецЕсли;
			
			// Стр. 160 = стр. 060 + стр. 070 - стр. 110.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700016003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700006003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700007003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700011003.Значение);
				Данные.Вставить("П000700016003", Форма.ТабличныйДокумент.Области.П000700016003.Значение);
			Иначе
				Данные.Вставить("П000700016003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700006003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700007003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700011003));
			КонецЕсли;
			
			// Стр. 210 = стр. 180 - стр. 190 - стр. 200.
			ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрок = Неопределено) ИЛИ (Тип(ДанныеДопСтрок) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			ДанныеДопСтрокПодразд73 = ДанныеДопСтрок.П0007300001;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд73.Количество() Цикл
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
					ДопСтрокаПодразд73 = ДанныеДопСтрокПодразд73[НомДопСтроки - 1];
					ДопСтрокаПодразд73.П000730000102 = Форма.ТабличныйДокумент.Области["П000730000102_" + НомДопСтрокиСтр].Значение;
					ДопСтрокаПодразд73.П000730000103 = Форма.ТабличныйДокумент.Области["П000730000103_" + НомДопСтрокиСтр].Значение;
					ДопСтрокаПодразд73.П000730000104 = Форма.ТабличныйДокумент.Области["П000730000104_" + НомДопСтрокиСтр].Значение;
				КонецЦикла;
			КонецЕсли;
		
			Для каждого ДопСтрокаПодразд73 Из ДанныеДопСтрокПодразд73 Цикл
				ДопСтрокаПодразд73.П000730000105
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000102)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000103)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000104);
			КонецЦикла;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд73.Количество() Цикл
					ДопСтрокаПодразд73 = ДанныеДопСтрокПодразд73[НомДопСтроки - 1];
					Форма.ТабличныйДокумент.Области["П000730000105_" + Формат(НомДопСтроки, "ЧГ=")].Значение
					= ДопСтрокаПодразд73.П000730000105;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел212" Тогда
		
		ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
			АктивнаяВетка = ДеревоДанныхРаздел2.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
			АктивнаяВетка = ДеревоДанныхРаздел2.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		ВозможныеКодыОснНал_Раздел212 = СтрРазделить("4000,4002,4003,4005,4006,4007,4008,4009,4010,4300", ",", Ложь);
		
		Для каждого Ветка2 Из ДеревоДанныхРаздел2.Строки Цикл
			
			Для каждого Ветка21 Из Ветка2.Строки Цикл
				
				Если Ветка21 = АктивнаяВетка Тогда
					Для каждого Пок Из Ветка21.Данные Цикл
						Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Ветка21.Данные.Вставить(Пок.Ключ, Обл.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для каждого Ветка212 Из Ветка21.Строки Цикл
					
					Если Ветка212 = АктивнаяВетка Тогда
						Для каждого Пок Из Ветка212.Данные Цикл
							Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Ветка212.Данные.Вставить(Пок.Ключ, Обл.Значение);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					// Стр. 260 = стр. 205 х графа 2, если графа 1 = "4000", "4002", "4003", "4005" - "4010", "4300".
					//
					КоличествоПИ = 0;
					НомерСтроки212 = 1;
					Пока Ветка212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212, "ЧГ=")) Цикл
						Если ВозможныеКодыОснНал_Раздел212.Найти(
							СокрЛП(Ветка212.Данные["П000212000101_" + Формат(НомерСтроки212, "ЧГ=")])) <> Неопределено Тогда
							КоличествоПИ = КоличествоПИ + Ветка212.Данные["П000212000102_" + Формат(НомерСтроки212, "ЧГ=")]
						КонецЕсли;
						НомерСтроки212 = НомерСтроки212 + 1;
					КонецЦикла;
					
					Стр260 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Ветка212.Данные["П000200020503"] * КоличествоПИ);
					
					Ветка212.Данные.Вставить("П000200026003", Стр260);
					
					Если Ветка212 = АктивнаяВетка Тогда
						Для каждого Пок Из Ветка212.Данные Цикл
							Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Ветка212.Данные[Пок.Ключ];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				// Стр. 150 = стр. 130 - стр. 140.
				//
				Ветка21.Данные.Вставить("П000200015003"
				, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Ветка21.Данные["П000200013003"])
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Ветка21.Данные["П000200014003"]));
				
				Если Ветка21 = АктивнаяВетка Тогда
					Для каждого Пок Из Ветка21.Данные Цикл
						Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Ветка21.Данные[Пок.Ключ];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311" Тогда
		
		ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			АктивнаяВетка = ДеревоДанныхРаздел3.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
			АктивнаяВетка = ДеревоДанныхРаздел3.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
			АктивнаяВетка = ДеревоДанныхРаздел3.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Для каждого Ветка3 Из ДеревоДанныхРаздел3.Строки Цикл
			
			Если Ветка3 = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка3.Данные Цикл
					Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Ветка3.Данные.Вставить(Пок.Ключ, Обл.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			КодВидаПИ = СокрЛП(Ветка3.Данные["П000300001003"]);
			
			Стр060 = Ветка3.Данные["П000300006003"];
			Стр070 = Ветка3.Данные["П000300007003"];
			Стр080 = Ветка3.Данные["П000300008003"];
			Стр110 = Ветка3.Данные["П000300011003"];
			Стр130 = Ветка3.Данные["П000300013003"];
			Стр140 = Ветка3.Данные["П000300014003"];
			Стр150 = Ветка3.Данные["П000300015003"];
			Стр170 = Ветка3.Данные["П000300017003"];
			
			// Стр. 100 = стр. 130 х стр. 110 + стр. 140 х (1 – стр. 110).
			//
			Стр100 = Окр(Стр130 * Стр110 + Стр140 * (1 - Стр110), 4);
			Ветка3.Данные.Вставить("П000300010003", Стр100);
			
			Стр040 = 0;
			
			Для каждого Ветка31 Из Ветка3.Строки Цикл
				
				Если Ветка31 = АктивнаяВетка Тогда
					Для каждого Пок Из Ветка31.Данные Цикл
						Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Ветка31.Данные.Вставить(Пок.Ключ, Обл.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Стр215 = Ветка31.Данные["П000300021503"];
				Стр250 = Ветка31.Данные["П000300025003"];
				
				Стр210 = 0;
				
				Для каждого Ветка311 Из Ветка31.Строки Цикл
					
					Если Ветка311 = АктивнаяВетка Тогда
						Для каждого Пок Из Ветка311.Данные Цикл
							Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Ветка311.Данные.Вставить(Пок.Ключ, Обл.Значение);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					// Стр. 300 = минимальное значение из стр. 290.
					//
					Стр300 = Мин(Ветка311.Данные["П000300029003"], Ветка311.Данные["П000300029004"],
					Ветка311.Данные["П000300029005"], Ветка311.Данные["П000300029006"], Ветка311.Данные["П000300029007"]);
					
					Ветка311.Данные.Вставить("П000300030003", Стр300);
					
					// Стр. 310 = стр. 285 х графа 2, если графа 1 = "4000".
					//
					КоличествоПИ = 0;
					НомерСтроки311 = 1;
					Пока Ветка311.Данные.Свойство("П000311000101_" + Формат(НомерСтроки311, "ЧГ=")) Цикл
						Если СокрЛП(Ветка311.Данные["П000311000101_" + Формат(НомерСтроки311, "ЧГ=")]) = "4000" Тогда
							КоличествоПИ = КоличествоПИ + Ветка311.Данные["П000311000102_" + Формат(НомерСтроки311, "ЧГ=")];
						КонецЕсли;
						НомерСтроки311 = НомерСтроки311 + 1;
					КонецЦикла;
					
					Стр310 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Ветка311.Данные["П000300028503"] * КоличествоПИ);
					
					Ветка311.Данные.Вставить("П000300031003", Стр310);
					
					Стр210 = Стр210 + Стр310;
					
					Если Ветка311 = АктивнаяВетка Тогда
						Для каждого Пок Из Ветка311.Данные Цикл
							Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Ветка311.Данные[Пок.Ключ];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				// Стр. 210 равна сумме стр. 310.
				//
				Ветка31.Данные.Вставить("П000300021003", Стр210);
				
				// Стр. 220 = стр. 210 - стр. 215.
				//
				Стр220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Стр210 - Стр215);
				
				Ветка31.Данные.Вставить("П000300022003", Стр220);
				
				// Стр. 240 = (0,15 х стр. 170 х (стр. 100 х стр. 250 + стр. 150 х (1 – стр. 250))) /
				// ((1 – стр. 250) х 42 + стр. 250 х 35).
				//
				ЧислСтр240 = 0.15 * Стр170 * (Стр100 * Стр250 + Стр150 * (1 - Стр250));
				ЗнамСтр240 = (1 - Стр250) * 42 + Стр250 * 35;
				Стр240 = ?(ЗнамСтр240 = 0, 0, Окр(ЧислСтр240 / ЗнамСтр240, 4));
				Ветка31.Данные.Вставить("П000300024003", Стр240);
				
				Стр040 = Стр040 + Стр210;
				
				Если Ветка31 = АктивнаяВетка Тогда
					Для каждого Пок Из Ветка31.Данные Цикл
						Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Ветка31.Данные[Пок.Ключ];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КодВидаПИ = "03200" Тогда
				
				// Стр. 040 равна сумме стр. 210.
				//
				Ветка3.Данные.Вставить("П000300004003", Стр040);
				
				// Стр. 045 = стр. 060 х стр. 070 х стр. 080.
				//
				Стр045 = Окр(Стр060 * Стр070 * Стр080, 2);
				Ветка3.Данные.Вставить("П000300004503", Стр045);
				
				// Стр. 050 = стр. 040 - стр. 045.
				//
				Стр050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Стр040 - Стр045);
				Ветка3.Данные.Вставить("П000300005003", Стр050);
				
			ИначеЕсли КодВидаПИ = "03300" Тогда
				
				Ветка3.Данные.Вставить("П000300004003", 0);
				Ветка3.Данные.Вставить("П000300004503", 0);
				Ветка3.Данные.Вставить("П000300005003", 0);
				
			Иначе
				
				// Ручное редактирование стр. 040, стр. 045, стр. 050.
				
			КонецЕсли;
			
			Если КодВидаПИ = "03300" Тогда
				
				Ветка3.Данные.Вставить("П000300018003", 0);
				
			Иначе
				
				// Стр. 180 = 6,5 / стр. 170.
				//
				ЧислСтр180 = 6.5;
				ЗнамСтр180 = Стр170;
				Стр180 = ?(ЗнамСтр180 = 0, 0, Окр(ЧислСтр180 / ЗнамСтр180, 15));
				Ветка3.Данные.Вставить("П000300018003", Стр180);
				
			КонецЕсли;
			
			Если Ветка3 = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка3.Данные Цикл
					Обл = Форма.ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Ветка3.Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Раздел5" ИЛИ ИмяРаздела = "Раздел51" Тогда
		
		ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
			АктивнаяВетка5 = ДеревоДанныхРаздел5.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
			АктивнаяВетка51 = ДеревоДанныхРаздел5.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел5 Из ДеревоДанныхРаздел5.Строки Цикл
			
			Если ВеткаРаздел5 = АктивнаяВетка5 Тогда
				ВеткаРаздел5.Данные.Вставить("П000500001003", Форма.ТабличныйДокумент.Области["П000500001003"].Значение);
			КонецЕсли;
			
			Для каждого ВеткаРаздел51 Из ВеткаРаздел5.Строки Цикл
				
				Если ВеткаРаздел51 = АктивнаяВетка51 Тогда
					НомСтр = 1;
					НомСтрСтр = "1";
					Пока ВеткаРаздел51.Данные.Свойство("П000510000101_" + НомСтрСтр) Цикл
						ВеткаРаздел51.Данные.Вставить("П000510000101_" + НомСтрСтр,
						Форма.ТабличныйДокумент.Области["П000510000101_" + НомСтрСтр].Значение);
						ВеткаРаздел51.Данные.Вставить("П000510000102_" + НомСтрСтр,
						Форма.ТабличныйДокумент.Области["П000510000102_" + НомСтрСтр].Значение);
						НомСтр = НомСтр + 1;
						НомСтрСтр = Формат(НомСтр, "ЧГ=");
					КонецЦикла;
					
					Если Форма.СтруктураРеквизитовФормы["ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613"] Тогда
						
						ВеткаРаздел51.Данные.Вставить("П000500015003", Форма.ТабличныйДокумент.Области["П000500015003"].Значение);
						ВеткаРаздел51.Данные.Вставить("П000500016003", Форма.ТабличныйДокумент.Области["П000500016003"].Значение);
						ВеткаРаздел51.Данные.Вставить("П000500016503", Форма.ТабличныйДокумент.Области["П000500016503"].Значение);
						
					КонецЕсли;
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы["ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613"] Тогда
					
					Стр150 = ВеткаРаздел51.Данные["П000500015003"];
					Стр160 = ВеткаРаздел51.Данные["П000500016003"];
					Стр165 = ВеткаРаздел51.Данные["П000500016503"];
					Стр170 = ?(ЗначениеЗаполнено(Стр160), Стр160 - Стр165, Стр150 - Стр165);
					
					//Если СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "10017" Тогда
					//	СуммаПоГрафе2Раздела51 = 0;
					//	НомСтр = 1;
					//	НомСтрСтр = "1";
					//	Пока ВеткаРаздел51.Данные.Свойство("П000510000101_" + НомСтрСтр) Цикл
					//		СуммаПоГрафе2Раздела51 = СуммаПоГрафе2Раздела51 + ВеткаРаздел51.Данные["П000510000102_" + НомСтрСтр];
					//		НомСтр = НомСтр + 1;
					//		НомСтрСтр = Формат(НомСтр, "ЧГ=");
					//	КонецЦикла;
					//	Стр170 = Мин(Стр170, СуммаПоГрафе2Раздела51 * 16.5);
					//КонецЕсли;
					
					Если НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "10017"
					   И НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "04104"
					   И НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "04106" Тогда
						ВеткаРаздел51.Данные.Вставить("П000500017003", Стр170);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВеткаРаздел51 = АктивнаяВетка51 Тогда
					ВеткаРаздел51.Данные.Вставить("П000500007003", Форма.ТабличныйДокумент.Области["П000500007003"].Значение);
					
					Если Форма.СтруктураРеквизитовФормы["ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613"]
					   И НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "10017"
					   И НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "04104"
					   И НЕ СокрЛП(ВеткаРаздел5.Данные["П000500001003"]) = "04106" Тогда
						
						Форма.ТабличныйДокумент.Области["П000500017003"].Значение = ВеткаРаздел51.Данные["П000500017003"];
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Раздел81" Тогда
		
		ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхРаздел8.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел8 Из ДеревоДанныхРаздел8.Строки Цикл
			Для каждого ВеткаРаздел81 Из ВеткаРаздел8.Строки Цикл
				
				Если ВеткаРаздел81 = АктивнаяВеткаДереваЗначений Тогда
					
					Если РассчитыватьСтроку070Раздела81(Форма) Тогда
						
						Стр080 = Форма.ТабличныйДокумент.Области.П000800008003.Значение;
						Стр090 = Форма.ТабличныйДокумент.Области.П000800009003.Значение;
						Стр110 = Форма.ТабличныйДокумент.Области.П000800011003.Значение;
						Стр120 = Форма.ТабличныйДокумент.Области.П000800012003.Значение;
						Форма.ТабличныйДокумент.Области.П000800007003.Значение
						= 0.5 * (Стр080 - 15) * Стр090 * 7.3 * Стр110 - ?(Стр110 < 1, 0, Стр120 * Стр090);
						
						ВеткаРаздел81.Данные.Вставить("П000800008003", Форма.ТабличныйДокумент.Области["П000800008003"].Значение);
						ВеткаРаздел81.Данные.Вставить("П000800009003", Форма.ТабличныйДокумент.Области["П000800009003"].Значение);
						ВеткаРаздел81.Данные.Вставить("П000800011003", Форма.ТабличныйДокумент.Области["П000800011003"].Значение);
						ВеткаРаздел81.Данные.Вставить("П000800012003", Форма.ТабличныйДокумент.Области["П000800012003"].Значение);
						
					КонецЕсли;
					
					ВеткаРаздел81.Данные.Вставить("П000800015003", Форма.ТабличныйДокумент.Области["П000800015003"].Значение);
					ВеткаРаздел81.Данные.Вставить("П000800016503", Форма.ТабличныйДокумент.Области["П000800016503"].Значение);
					
				КонецЕсли;
				
				Если РассчитыватьСтроку070Раздела81(Форма) Тогда
					
					ВеткаРаздел81.Данные.Вставить("П000800007003", 0.5 * (ВеткаРаздел81.Данные.П000800008003 - 15) * ВеткаРаздел81.Данные.П000800009003
					* 7.3 * ВеткаРаздел81.Данные.П000800011003 - ?(ВеткаРаздел81.Данные.П000800011003 < 1, 0, ВеткаРаздел81.Данные.П000800012003
					* ВеткаРаздел81.Данные.П000800009003));
					
				КонецЕсли;
				
				ВеткаРаздел81.Данные.Вставить("П000800018003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаРаздел81.Данные.П000800015003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ВеткаРаздел81.Данные.П000800016503));
				
				Если ВеткаРаздел81 = АктивнаяВеткаДереваЗначений Тогда
					
					Если РассчитыватьСтроку070Раздела81(Форма) Тогда
						
						Форма.ТабличныйДокумент.Области["П000800007003"].Значение = ВеткаРаздел81.Данные.П000800007003;
						
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области["П000800018003"].Значение = ВеткаРаздел81.Данные.П000800018003;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел8, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьСтроку070Раздела81(Форма)
	
	Возврат Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20210901';
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда

				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;

				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл

				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;

			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекПраРодитель = ТекРодитель.ПолучитьРодителя();
		НомСтраницыПраРодителя = ТекПраРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел212НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел3НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел31НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекПраРодитель = ТекРодитель.ПолучитьРодителя();
		НомСтраницыПраРодителя = ТекПраРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел311НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел5НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел51НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел8НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел81" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел81НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	Иначе
		
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		НомерСтраницы = 1;
		Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
			СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЦикла;
		Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел2 = ДеревоДанныхРаздел2.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел2, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел2.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел2", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел21 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел21, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел21", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел212НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел212
	= ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел212, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанныхРаздел2.Строки[
	НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела21 = НайденнаяСтраница21;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел212", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел3НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел3 = ДеревоДанныхРаздел3.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел3, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел3.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел3", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел31НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел31 = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел31, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел31", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел311НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел311
	= ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел311, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 2.
	ДеревоДанныхРаздел3.Строки[
	НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела31 = НайденнаяСтраница31;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел311", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел5НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	КолСтраницРаздел5 = ДеревоДанныхРаздел5.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел5, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел5.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел5", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел51НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	КолСтраницРаздел51 = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел51, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела5 = НайденнаяСтраница5;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел51", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел51");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел8НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
	
	КолСтраницРаздел8 = ДеревоДанныхРаздел8.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел8, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел8.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел8, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
			Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница8.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел8", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел81НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел8 = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]);
	
	КолСтраницРаздел81 = ДеревоДанныхРаздел8.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел81, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел8.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел8"]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел8, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел8 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел8.КолонкаРазделыОтчетаСокрНаим = "Раздел8" Тогда
			Для каждого НайденнаяСтраница8 Из НайденныйРаздел8.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница8.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела8 = НайденнаяСтраница8;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница81 Из ТекСтраницаРаздела8.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница81.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница81.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел81", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Если (СтрНайти(ТабличныйДокумент.ТекущаяОбласть.Имя, "ДобавитьСтроку") > 0
		И СтрНайти(ТабличныйДокумент.ТекущаяОбласть.Имя, "73") > 0)
		ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 11) = "П0007300001" Тогда
		Если П0007300001.Количество() = 36 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество строк 170-220 раздела 7.3 не должно превышать 36.';
									|en = 'Количество строк 170-220 раздела 7.3 не должно превышать 36.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущаяСтраница);
	
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) Экспорт 
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML();
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана. Выгрузка невозможна';
								|en = 'Организация не выбрана. Выгрузка невозможна'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

	Если СтруктураРеквизитовФормы.НеобходимоПреобразованиеИзПрошлойРедакции Тогда 
		ОО = Новый ОписаниеОповещения("ВопросВыполнитьПреобразованиеИзПрошлойРедакции", ЭтотОбъект);
		ПоказатьВопрос(ОО, "Была скопирована форма другой редакции. Выполнить конвертацию данных?",
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьПреобразованиеИзПрошлойРедакции(РезультатВопроса, ДополнительныеПараметры) Экспорт
	РегламентированнаяОтчетностьЗагрузкаКлиент.ВыполнитьПреобразованиеИзПрошлойРедакции(ЭтотОбъект, РезультатВопроса);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку';
								|en = 'Не выбран многострочный раздел, в который необходимо добавить строку'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел21" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы211;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел212" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы212;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел311" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы311;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел5" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы52;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел51" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницы = "Раздел6" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы62;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел7" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницы = "Раздел81" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы81;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку
							= ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "10_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
	ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
	ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
								|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ВыбЭлемент <> Неопределено И ВыбЭлемент.Значение <> Область.Значение Тогда
		
		Область.Значение = ВыбЭлемент.Значение;
		
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "П000200012003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКоэффициентов = Новый СписокЗначений;
		СписокКоэффициентов.Добавить(0);
		СписокКоэффициентов.Добавить(1);
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, СписокКоэффициентов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКоэффициентов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "П000500005502") > 0
		    И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			
		НомерМнгСтроки = Сред(Область.Имя, СтрНайти(Область.Имя, "_") + 1);
		
		ПризнакКоэфф = СокрЛП(ТабличныйДокумент.Области["П000500005501_" + НомерМнгСтроки].Значение);
		
		Если ПризнакКоэфф = "05" ИЛИ ПризнакКоэфф = "07" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СписокЗначенийКоэффициентов = Новый СписокЗначений;
			СписокЗначенийКоэффициентов.Добавить(0.1);
			
			Если ПризнакКоэфф = "05" Тогда
				
				СписокЗначенийКоэффициентов.Добавить(0.25);
				
			КонецЕсли;
			
			СписокЗначенийКоэффициентов.Добавить(1);
			
			Оп = Новый ОписаниеОповещения(
			"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
			
			ПоказатьВыборИзСписка(Оп, СписокЗначенийКоэффициентов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокЗначенийКоэффициентов.НайтиПоЗначению(Область.Значение));
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000800006003" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "0000");
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000200013503" ИЛИ ИмяПоказателя = "П000200014003" ИЛИ ИмяПоказателя = "П000200014503" Тогда
		
		Если СокрЛП(ТабличныйДокумент.Области["П000200013503"].Значение) = "06"
			И ТабличныйДокумент.Области["П000200014003"].Значение > ТабличныйДокумент.Области["П000200014503"].Значение Тогда
			ТабличныйДокумент.Области["П000200014003"].Значение = 0;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Значение в стр. 140 не должно быть больше значения в стр. 145, если в стр. 135 значение 06. Значение в стр. 140 очищено';
			|en = 'Значение в стр. 140 не должно быть больше значения в стр. 145, если в стр. 135 значение 06. Значение в стр. 140 очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000700012003" Тогда
		Если ЗначПоказателя > 0.3 Тогда
			Область.Значение = 0.3;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Значение коэффициента Кт должно быть меньше или равно 0,3';
									|en = 'Значение коэффициента Кт должно быть меньше или равно 0,3'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000400001003" Тогда
		Если СокрЛП(ЗначПоказателя) = "03401" Тогда
			ТабличныйДокумент.Области["П000400002003"].Значение = "00000000000000000000";
		Иначе
			Если ТабличныйДокумент.Области["П000400002003"].Значение = "00000000000000000000" Тогда
				ТабличныйДокумент.Области["П000400002003"].Значение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомерСтраницыРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Если ИмяПоказателя = "П000500001003" Тогда
		
		Если СокрЛП(ЗначПоказателя) = "03400" Тогда
			
			ТабличныйДокумент.Области["П000500002003"].Значение = "00000000000000000000";
			
		Иначе
			
			Если ТабличныйДокумент.Области["П000500002003"].Значение = "00000000000000000000" Тогда
				
				ТабличныйДокумент.Области["П000500002003"].Значение = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СокрЛП(ЗначПоказателя) = "04104"
		   И НЕ СокрЛП(ЗначПоказателя) = "05100" Тогда
		   
		    СохрП000500001003 = ТабличныйДокумент.Области["П000500001003"].Значение;
			СохрП000500002003 = ТабличныйДокумент.Области["П000500002003"].Значение;
			СохрП000500003003 = ТабличныйДокумент.Области["П000500003003"].Значение;
		   
		 	ОчисткаПодчиненногоРазделаНаСервере(ИмяРаздела);
			
		    ТабличныйДокумент.Области["П000500001003"].Значение = СохрП000500001003;
			ТабличныйДокумент.Области["П000500002003"].Значение = СохрП000500002003;
			ТабличныйДокумент.Области["П000500003003"].Значение = СохрП000500003003;
			
		Иначе
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				ИмяРаздела, НомерСтраницыРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000400007003"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000730000101"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000730000106" Тогда
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Если Год(ЗначПоказателя) > 2099 Тогда
				Область.Значение = '20991231';
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Значение месяца и года должно быть в интервале 01.1900 - 12.2099';
										|en = 'Значение месяца и года должно быть в интервале 01.1900 - 12.2099'");
				Сообщение.Сообщить();
			ИначеЕсли Год(ЗначПоказателя) < 1900 Тогда
				Область.Значение = '19000101';
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Значение месяца и года должно быть в интервале 01.1900 - 12.2099';
										|en = 'Значение месяца и года должно быть в интервале 01.1900 - 12.2099'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000700005003" Тогда
		ЗначПоказателя = СокрЛП(ЗначПоказателя);
		Если СтрДлина(ЗначПоказателя) = 2 Тогда
			Если Лев(ЗначПоказателя, 1) = "," Тогда
				ЗначПоказателя = "0" + ЗначПоказателя;
			ИначеЕсли Прав(ЗначПоказателя, 1) = "," Тогда
				ЗначПоказателя = ЗначПоказателя + "0";
			КонецЕсли;
			Область.Значение = ЗначПоказателя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Область.Значение = "-";
		ИначеЕсли ЗначПоказателя = "0" Тогда
			Область.Значение = "0,0";
		ИначеЕсли ЗначПоказателя = "1" Тогда
			Область.Значение = "1,0";
		Иначе
			ВозможныеКтд = Новый Массив;
			ВозможныеКтд.Добавить("-");
			ВозможныеКтд.Добавить("0,0");
			ВозможныеКтд.Добавить("0,2");
			ВозможныеКтд.Добавить("0,4");
			ВозможныеКтд.Добавить("0,6");
			ВозможныеКтд.Добавить("0,8");
			ВозможныеКтд.Добавить("1,0");
			Если ВозможныеКтд.Найти(ЗначПоказателя) = Неопределено Тогда
				Область.Значение = "-";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Введено некорректное значение коэффициента Ктд. Возможны значения: 0; 0,2; 0,4; 0,6; 0,8; 1. Значение коэффициента Ктд очищено';
										|en = 'Введено некорректное значение коэффициента Ктд. Возможны значения: 0; 0,2; 0,4; 0,6; 0,8; 1. Значение коэффициента Ктд очищено'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
	Иначе
		
		Если Область.Имя = "П000300001003" И СокрЛП(Область.Значение) = "03200" Тогда
			ОчиститьСтр215ВПодчиненныхРазделах31();
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел212"
			ИЛИ ИмяРаздела = "Раздел3" ИЛИ ИмяРаздела = "Раздел31" ИЛИ ИмяРаздела = "Раздел311"
			ИЛИ ИмяРаздела = "Раздел5" ИЛИ ИмяРаздела = "Раздел51" Тогда
			РасчетНаСервере(ИмяРаздела, ИмяОбласти);
		Иначе
			РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	СформироватьСпискиВыбора();
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтр215ВПодчиненныхРазделах31()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТекВетка3 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	Для каждого Ветка31 Из ТекВетка3.Строки Цикл
		Ветка31.Данные.Вставить("П000300021503", 0);
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
	= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераСтраницРазделов3СКодомВидаДПИ03200()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03200.Очистить();
	
	Для каждого Ветка3 Из ДеревоДанныхРаздела.Строки Цикл
		Если СокрЛП(Ветка3.Данные["П000300001003"]) = "03200" Тогда
			СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03200.Добавить(
				ДеревоДанныхРаздела.Строки.Индекс(Ветка3) + 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017.Очистить();
	
	Для каждого Ветка5 Из ДеревоДанныхРаздела.Строки Цикл
		Если СокрЛП(Ветка5.Данные["П000500001003"]) = "10017"
		 ИЛИ СокрЛП(Ветка5.Данные["П000500001003"]) = "04104"
		 ИЛИ СокрЛП(Ветка5.Данные["П000500001003"]) = "04106" Тогда
			СтруктураРеквизитовФормы.НомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017.Добавить(
				ДеревоДанныхРаздела.Строки.Индекс(Ветка5) + 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел6.Очистить();
	
	ТаблицаСтраницыРаздел4.Очистить();
	ТаблицаСтраницыРаздел7.Очистить();
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел8"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел81" Тогда
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			КонецЕсли;
			
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпределяющаяОбласть.Значение)
				И ОпределяющаяОбласть.Значение <> "0" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
		Иначе
			ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел21" Тогда
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000200013503"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200014003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "00" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=0";
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=-";
		КонецЕсли;
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000200013503"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200014503"];
		Если (СтрРазделить("01,02,03,04,05", ",").Найти(СокрЛП(ОпределяющаяОбласть.Значение))) <> Неопределено Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=0";
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=-";
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200015003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200012003"];
		ОбрабатываемаяОбласть.Формат = "ЧН=0";
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел212" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области["П000200023003"];
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000200024003"];
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000200025003"];
		Если ОпределяющаяОбласть.Значение = 1 Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200026003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		КодВидаПИ = СокрЛП(Форма.ТабличныйДокумент.Области["П000300001003"].Значение);
		
		Если КодВидаПИ = "03200" Тогда
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004003"];
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть.Защита   = Ложь;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004503"];
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть.Защита   = Ложь;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300005003"];
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть.Защита   = Ложь;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			
		ИначеЕсли КодВидаПИ = "03300" Тогда
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004503"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300005003"];
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		Иначе
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004003"];
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004503"];
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300005003"];
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300006003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300007003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300008003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300009003"];
		Если КодВидаПИ = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300010003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300018003"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть.Защита   = Ложь;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300018703"];
		Если КодВидаПИ = "03300" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел31" Тогда
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300021003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300021503"];
		Если Форма.СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03200.Найти(
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0]) <> Неопределено Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=-", "ЧН=0");
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = СтрЗаменить(ОбрабатываемаяОбласть.Формат, "ЧН=0", "ЧН=-");
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300022003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300024003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел311" Тогда
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300030003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300031003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области["П000400001003"];
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000400002003"];
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000400013003"];
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области["П000400014003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "03401" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ОбрабатываемаяОбласть2.Формат = "ЧН=0";
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			ОбрабатываемаяОбласть3.Формат = "ЧН=0";
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ОбрабатываемаяОбласть2.Формат = "ЧН=-";
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
			ОбрабатываемаяОбласть3.Формат = "ЧН=-";
		КонецЕсли;
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000400015503"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000400016003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "00" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=0";
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			ОбрабатываемаяОбласть.Формат = "ЧН=-";
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000400017003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000500001003"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500002003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "03400" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, Ложь);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		НомерСтрокиМнгЧасти = 1;
		
		Пока НЕ Форма.ТабличныйДокумент.Области.Найти("П000520000101_" + НомерСтрокиМнгЧасти)
			= Неопределено Цикл
			
			ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000520000101_" + НомерСтрокиМнгЧасти];
			ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000520000102_" + НомерСтрокиМнгЧасти];
			ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области["П000520000103_" + НомерСтрокиМнгЧасти];
			ОбрабатываемаяОбласть4 = Форма.ТабличныйДокумент.Области["П000520000104_" + НомерСтрокиМнгЧасти];
			ОбрабатываемаяОбласть5 = Форма.ТабличныйДокумент.Области["П000520000105_" + НомерСтрокиМнгЧасти];
			
			Если СокрЛП(ОпределяющаяОбласть.Значение) = "04104"
			 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "05100" Тогда
				
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
				
				Если СокрЛП(ОпределяющаяОбласть.Значение) = "05100" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть4);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть4);
				КонецЕсли;
				
				Если СокрЛП(ОпределяющаяОбласть.Значение) = "04104" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть5);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть5);
				КонецЕсли;
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть4);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть5);
				
				Форма.ТабличныйДокумент.Области["ДобавлениеСтроки52"].Очистить(Истина, Истина, Истина);
				Форма.ТабличныйДокумент.Области["ДобавитьСтроку52"].Гиперссылка = Ложь;
				Форма.ТабличныйДокумент.Области["ДобавитьСтрокуЗначок52"].Гиперссылка = Ложь;
				
			КонецЕсли;
			
			НомерСтрокиМнгЧасти = НомерСтрокиМнгЧасти + 1;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел51" Тогда
		
		Если Форма.СтруктураРеквизитовФормы["ПрименяетсяПисьмоФНС_20221012_СД_4_3_13613"] Тогда
			
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500017003"];
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет
			 ИЛИ НЕ Форма.СтруктураРеквизитовФормы.НомераСтраницРазделов5СКодамиВидаДПИ04104_04106_10017.Найти(
					Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0]) = Неопределено Тогда
				ОбрабатываемаяОбласть.Защита   = Ложь;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть.Защита   = Истина;
				ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000500005103"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500005203"];
		
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "1"
		 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "2" Тогда
		 
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		Иначе
			
			СохрП000500005203 = ОбрабатываемаяОбласть.Значение;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
			НомерСтрокиМнгЧасти = 1;
			
			Пока НЕ Форма.ТабличныйДокумент.Области.Найти("П000500005501_" + НомерСтрокиМнгЧасти)
				= Неопределено Цикл
				
				ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области["П000500005501_" + НомерСтрокиМнгЧасти];
				
				Если СокрЛП(ОпределяющаяОбласть.Значение) = "01"
				 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "02"
				 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "03" Тогда
					
					РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
					
					ОбрабатываемаяОбласть.Значение = СохрП000500005203;
					
					Прервать;
					
				КонецЕсли;
				
				НомерСтрокиМнгЧасти = НомерСтрокиМнгЧасти + 1;
				
			КонецЦикла
			
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000500005103"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500005303"];
		
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "5" Тогда
		 
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			
		КонецЕсли;
		
		НомерСтрокиМнгЧасти = 1;
		
		Пока НЕ Форма.ТабличныйДокумент.Области.Найти("П000500005501_" + НомерСтрокиМнгЧасти)
			= Неопределено Цикл
			
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области["П000500005501_" + НомерСтрокиМнгЧасти];
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500005502_" + НомерСтрокиМнгЧасти];
			
			Если СокрЛП(ОпределяющаяОбласть.Значение) = "00" Тогда
				
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				
			Иначе
				
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				
			КонецЕсли;
			
			НомерСтрокиМнгЧасти = НомерСтрокиМнгЧасти + 1;
			
		КонецЦикла
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел7" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области["П000700005503"];
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000700004503"];
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000700005003"];
		
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "1"
		 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "2"
		 ИЛИ СокрЛП(ОпределяющаяОбласть.Значение) = "3" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ОбрабатываемаяОбласть2.Значение = "-";
			
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000700005603"];
		
		СохрП000700005603 = ОбрабатываемаяОбласть.Значение;
		
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		
		НомерСтрокиМнгЧасти = 1;
		
		Пока НЕ Форма.ТабличныйДокумент.Области.Найти("П000710000101_" + НомерСтрокиМнгЧасти)
			= Неопределено Цикл
			
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области["П000710000101_" + НомерСтрокиМнгЧасти];
			
			Если СокрЛП(ОпределяющаяОбласть.Значение) = "01150" Тогда
				
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				
				ОбрабатываемаяОбласть.Значение = СохрП000700005603;
				
				Прервать;
				
			КонецЕсли;
			
			НомерСтрокиМнгЧасти = НомерСтрокиМнгЧасти + 1;
			
		КонецЦикла
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел81" Тогда
		
		Если РассчитыватьСтроку070Раздела81(Форма) Тогда
			
			ОбрабатываемаяОбласть070 = Форма.ТабличныйДокумент.Области["П000800007003"];
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабатываемаяОбласть070.Защита   = Ложь;
				ОбрабатываемаяОбласть070.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабатываемаяОбласть070.Защита   = Истина;
				ОбрабатываемаяОбласть070.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
			
		КонецЕсли;
		
		ОбрабатываемаяОбласть180 = Форма.ТабличныйДокумент.Области["П000800018003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть180.Защита   = Ложь;
			ОбрабатываемаяОбласть180.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть180.Защита   = Истина;
			ОбрабатываемаяОбласть180.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку211" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы211;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку212" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы212;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку311" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы311;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку51" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы50;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку51_2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы51;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку52" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы52;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку62" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы62;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку71" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы71;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку73" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы73;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку81" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы81;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 
			И ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
