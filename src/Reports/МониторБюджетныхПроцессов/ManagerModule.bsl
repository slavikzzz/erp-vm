#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет переданную диаграмму ганта 
// шагами бюджетного процесса на основании переданной модели бюджетирования.
//
// Параметры:
//	Параметры - Структура - Значения параметров для заполнения диаграммы:
//  	* МодельБюджетирования - Справочник.МоделиБюджетирования - Модель, для которой будет выведен бюджетный процесс.
//  	* Результат - ДиаграммаГанта - Диаграмма ганта, куда будет выведен результат.
//  	* НачалоПериода - Дата - Начало периода диаграммы ганта.
//  	* КонецПериода - Дата - Конец периода диаграммы ганта.
//  	* ТипОтчета - Число - 0-план, 1-факт, 2-план и факт.
//  	* Группировки - Строка - Имя варианта компоновки данных.
//  	* ДопПараметры - Структура - Структура с дополнительными фильтрами.
//	АдресХранилища - Строка - Адрес во временном хранилище.
//
Процедура ЗаполнитьДиаграмму(Параметры, АдресХранилища) Экспорт
	
	МодельБюджетирования = Параметры.МодельБюджетирования;
	Результат     = Параметры.Результат; // ДиаграммаГанта -
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода  = Параметры.КонецПериода;
	ТипОтчета     = Параметры.ТипОтчета;
	Группировки   = Параметры.Группировки;
	ДопПараметры  = Параметры.ДопПараметры;
	
	Результат.Очистить();
	Результат.АвтоОпределениеПолногоИнтервала = Ложь;
	Если НачалоПериода <> '000101010000' И КонецПериода <> '000101010000' Тогда
		Результат.УстановитьПолныйИнтервал(НачалоДня(НачалоПериода), КонецДня(КонецПериода));
	КонецЕсли;
	
	// Подготовка дерева для вывода в диаграмму
	#Область ПодготовкаДерева
	
	Если Группировки = "Вариант1" Тогда
		ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования,
			НачалоПериода, КонецПериода, ТипОтчета > 0, Ложь);
	Иначе
		ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования,
			НачалоПериода, КонецПериода, ТипОтчета > 0, Истина);
	КонецЕсли;
		
	ТаблицаЗадач.Колонки.Добавить("ЭтапПодготовкиБюджетовВПериоде");
	
	Для Каждого СтрокаЗадачи Из ТаблицаЗадач Цикл
		СтрокаЗадачи.ДатаНачалаФакт 		= НачалоДня(СтрокаЗадачи.ДатаНачалаФакт);
		СтрокаЗадачи.ДатаОкончанияФакт 		= КонецДня(СтрокаЗадачи.ДатаОкончанияФакт);
	КонецЦикла;
	
	Компоновка = Отчеты.МониторБюджетныхПроцессов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ИмяВарианта = ?(Группировки = "Вариант1", "РежимОбзор", "ПроцессПоЗадачам");
	Вариант = Компоновка.ВариантыНастроек.Найти(ИмяВарианта);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компоновка));
	КомпоновщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "НачалоПериода", НачалоПериода);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "КонецПериода", КонецПериода);
	
	ПоказатьПланВыполнения = ДопПараметры.Свойство("ПланВыполнения") И ДопПараметры.ПланВыполнения;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Если ИмяВарианта = "РежимОбзор" Тогда
		Если ТипОтчета = 0 Тогда // план
			ФинансоваяОтчетностьСервер.НовыйОтбор(Отбор, "ЭтапПодготовкиБюджетов", , , ВидСравненияКомпоновкиДанных.Заполнено);
		ИначеЕсли ТипОтчета = 1 И Не ПоказатьПланВыполнения Тогда // факт
			ФинансоваяОтчетностьСервер.НовыйОтбор(Отбор, "Задача", , , ВидСравненияКомпоновкиДанных.Заполнено);
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйОтбор(Отбор, "ПроцессПодготовкиБюджетов", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	Иначе
		Если ТипОтчета = 0 Тогда // план
			НастроитьОтбор(Отбор, "ГруппаФакт");
		ИначеЕсли ТипОтчета = 1 Тогда // факт
			НастроитьОтбор(Отбор, "ГруппаПлан");
			Если ПоказатьПланВыполнения Тогда
				НастроитьОтбор(Отбор, "Задача");
			КонецЕсли;
		Иначе
			Если ПоказатьПланВыполнения Тогда
				НастроитьОтбор(Отбор, "ЭтапПодготовкиБюджетов");
				НастроитьОтбор(Отбор, "Задача");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ФлагИсполнитель") Тогда
		НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсполнительИсходный");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ДопПараметры.ЗначениеИсполнитель;
		НовыйОтбор.Использование = ДопПараметры.ФлагИсполнитель;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	ДеревоРезультат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(Компоновка,
		КомпоновщикНастроек.Настройки,
		ВнешниеНаборыДанных,
		Группировки = "Вариант1");
	
	#КонецОбласти
	
	// Дополнительная обработка области для вариантов "Процесс по задачам" и "Процесс по исполнителям".
	#Область ОбработкаДерева
	Если Группировки = "Вариант1" Тогда
		СтруктураПоиска = Новый Структура("ЭтапПодготовкиБюджетовДействие, ЭтапПодготовкиБюджетовОснование",
												Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов, Неопределено);
		ПовторяемыеГруппы = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		МассивПовторяемых = Новый Массив;
		Для Каждого СтрокаПовторяемыхГрупп Из ПовторяемыеГруппы Цикл
			МассивПовторяемых.Добавить(СтрокаПовторяемыхГрупп.ЭтапПодготовкиБюджетов);
			СтрокаПовторяемыхГрупп.ЭтапПодготовкиБюджетовЭтоГруппа = Истина;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Ссылка В(&Ссылки)
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
		
		НастройкиДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПовторяемых, "НастройкаДействия");
		Ссылки = Новый Массив;
		Для Каждого ПовторяемаяГруппа Из МассивПовторяемых Цикл
			НастройкаДействия = НастройкиДействий[ПовторяемаяГруппа].НастройкаДействия; // ХранилищеЗначения
			Действие = НастройкаДействия.Получить();
			НайденнаяСтрока = Действие.Найти("ГруппаШагов", "Имя");
			Если НайденнаяСтрока <> Неопределено Тогда
				Ссылки.Добавить(НайденнаяСтрока.Значение);
				НастройкиДействий.Вставить(ПовторяемаяГруппа, НайденнаяСтрока.Значение);
			Иначе
				НастройкиДействий.Вставить(ПовторяемаяГруппа, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		
		ИерархияНужныхГрупп = ДеревоЭтаповПодготовкиБюджета(Запрос);
		СоответствиеРодителей = Новый Соответствие;
		Для Каждого ПовторяемаяГруппа Из МассивПовторяемых Цикл
			СсылкаНаГруппу = НастройкиДействий[ПовторяемаяГруппа];
			Если СсылкаНаГруппу = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивРодителей = Новый Массив;
			НайденнаяСтрока = ИерархияНужныхГрупп.Строки.Найти(СсылкаНаГруппу, , Истина);
			Пока НайденнаяСтрока <> Неопределено Цикл
				МассивРодителей.Добавить(НайденнаяСтрока.Ссылка);
				НайденнаяСтрока = НайденнаяСтрока.Родитель;
			КонецЦикла;
			СоответствиеРодителей.Вставить(ПовторяемаяГруппа, ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРодителей));
		КонецЦикла;
		
		КопияДляЗаполнения = Новый ДеревоЗначений;
		Для Каждого Колонка Из ДеревоРезультат.Колонки Цикл
			КопияДляЗаполнения.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
		ОбработатьПовторяемыеЭтапыПроцесса(КопияДляЗаполнения, ДеревоРезультат, СоответствиеРодителей);
		
		ДополнитьДеревоВыводаПроцессами(МодельБюджетирования, КопияДляЗаполнения, ТаблицаЗадач, НачалоПериода, КонецПериода, ДопПараметры);
		
		ДеревоРезультат = КопияДляЗаполнения;
		
	Иначе
		ПоИсполнителям = Группировки = "Вариант3";
		ТаблицаПериодов = РазбитьТаблицуШаговПоПериодам(ДеревоРезультат, МодельБюджетирования, ПоИсполнителям);
		ДеревоРезультат = СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, ТаблицаПериодов, ТипОтчета, ПоИсполнителям);
		Если ПоИсполнителям Тогда
			ДеревоРезультат.Строки.Сортировать("Исполнитель, ДатаНачала" + ?(ТипОтчета = 1, "Факт", ""), Истина);
		Иначе
			ДеревоРезультат.Строки.Сортировать("ДатаНачала" + ?(ТипОтчета = 1, "Факт", ""), Истина);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТипОтчета <> 1 Тогда
		Серия = Результат.Серии.Добавить();
		Серия.Значение = "План";
		Серия.Текст = "План";
	КонецЕсли;
	
	Если ТипОтчета > 0 Тогда
		СерияФакт = Результат.Серии.Добавить();
		СерияФакт.Значение = "Факт";
		СерияФакт.Текст = "Факт";
	КонецЕсли;
	
	СтруктураСерий = Новый Структура("План, Факт", Серия, СерияФакт);
	
	ВывестиДеревоВДиаграммуГанта(Результат, ДеревоРезультат, СтруктураСерий, ТипОтчета, Группировки, ПоказатьПланВыполнения);
	
	ОформитьДиаграммуПослеВывода(Результат, ТипОтчета, Группировки, НачалоПериода, КонецПериода);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Получает сведения по бюджетным задачам и помещает результат в хранилище, 
// для фонового выполнения.
//
// Параметры:
//  Параметры - Структура - Значения отборов для формирования отчета.
// 	АдресХранилища - Строка - Адрес во временном хранилище.
//
Процедура ПолучитьСведенияОЗадачах(Параметры, АдресХранилища) Экспорт
	
	Компановка = Отчеты.ВыполнениеЗадачБюджетногоПроцесса.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	
	ГруппировкаДетали = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетали.Использование = Истина;
	
	ВыбранноеПоле = ГруппировкаДетали.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("НеВыполнено");
	ВыбранноеПоле.Заголовок = "НеВыполнено";

 	ВыбранноеПоле = ГруппировкаДетали.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Просроченные");
	ВыбранноеПоле.Заголовок = "Просроченные";
	
	Отбор = Настройки.Отбор;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МодельБюджетирования");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Параметры.МодельБюджетирования;
	НовыйОтбор.Использование = Истина;
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
	Параметр.Использование = Истина;
	Параметр.Значение = ТекущаяДатаСеанса();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компановка, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Таблица = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(Таблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ШаблонЗаголовка = НСтр("ru = 'Выполняется задач: %1, из них просрочено: %2';
							|en = 'Tasks in progress: %1, overdue: %2'");
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, Таблица.Итог("НеВыполнено"), Таблица.Итог("Просроченные"));
	
	ПоместитьВоВременноеХранилище(Заголовок, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаДереваЗначенийДляВыводаВДиаграмму


// Возвращает дерево этапов подготовки бюджета
// 
// Параметры:
// 	Запрос - Запрос - Запрос выборки этапов.
// Возвращаемое значение:
// 	ДеревоЗначений - дерево этапов подготовки бюджетов:
// 	 *Ссылка - СправочникСсылка.ЭтапыПодготовкиБюджетов - Этап подготовки бюджета.
Функция ДеревоЭтаповПодготовкиБюджета(Запрос)
	РезультатЗапроса = Запрос.Выполнить();
	ИерархияНужныхГрупп = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Возврат ИерархияНужныхГрупп;
КонецФункции

Процедура НастроитьОтбор(Отбор, ЧтоОтчключить)
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если Элемент.Представление = ЧтоОтчключить Тогда
			Отбор.Элементы.Удалить(Элемент);
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НастроитьОтбор(Элемент, ЧтоОтчключить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазбитьТаблицуШаговПоПериодам(ДеревоРезультат, МодельБюджетирования, ПоИсполнителям = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеречислениеПериодичность.Ссылка КАК Периодичность
		|ИЗ
		|	Перечисление.Периодичность КАК ПеречислениеПериодичность
		|ГДЕ
		|	ПеречислениеПериодичность.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЭтапыПодготовкиБюджетов.Периодичность
		|			ИЗ
		|				Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|			ГДЕ
		|				ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеречислениеПериодичность.Порядок УБЫВ";

	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
		
	РезультатЗапроса = Запрос.Выполнить();
	ПорядкиПериодичности = РезультатЗапроса.Выгрузить();
	
	ДеревоПериодов = Новый ДеревоЗначений;
	ДеревоПериодов.Колонки.Добавить("Период");
	ДеревоПериодов.Колонки.Добавить("Периодичность");
	Если ПоИсполнителям Тогда
		ДеревоПериодов.Колонки.Добавить("Исполнитель");
	КонецЕсли;
	
	ДатаНачалаДействияМодели = МодельБюджетирования.НачалоДействия;
	
	Для Каждого СтрокаРезультата Из ДеревоРезультат Цикл
		
		Если ПоИсполнителям Тогда
			СтрокаПоиска = ДеревоПериодов.Строки.Найти(СтрокаРезультата.Исполнитель);
			Если СтрокаПоиска = Неопределено Тогда
				СтрокаПоиска = ДеревоПериодов.Строки.Добавить();
				СтрокаПоиска.Исполнитель = СтрокаРезультата.Исполнитель;
			КонецЕсли;
		Иначе
			СтрокаПоиска = ДеревоПериодов;
		КонецЕсли;
		
		НайденнаяСтрокаДереваПериодов = ПорядкиПериодичности.Найти(СтрокаРезультата.Периодичность);
		Для Сч = 0 По ПорядкиПериодичности.Индекс(НайденнаяСтрокаДереваПериодов) Цикл
			СтрокаПериода = ПорядкиПериодичности[Сч];
			Период = БюджетированиеКлиентСервер.ДатаНачалаПериода(СтрокаРезультата.Период, СтрокаПериода.Периодичность);
			Период = Макс(ДатаНачалаДействияМодели, Период); // поправка на начало действия модели
			НайденнаяСтрока = СтрокаПоиска.Строки.Найти(Период);
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = СтрокаПоиска.Строки.Добавить();
				НайденнаяСтрока.Период = Период;
				НайденнаяСтрока.Периодичность = СтрокаПериода.Периодичность;
				Если ПоИсполнителям Тогда
					НайденнаяСтрока.Исполнитель = СтрокаРезультата.Исполнитель;
				КонецЕсли;
			КонецЕсли;
			СтрокаПоиска = НайденнаяСтрока;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоПериодов;
	
КонецФункции

Функция СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, ДеревоПериодов, ТипОтчета, ПоИсполнителям, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат = Неопределено Тогда
		СтрокиРезультат = Новый ДеревоЗначений;
		Для Каждого Колонка Из ДеревоРезультат.Колонки Цикл
			СтрокиРезультат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПериода Из ДеревоПериодов.Строки Цикл
		
		// добавляем период
		НоваяСтрока = СтрокиРезультат.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериода);
		Если Не ПоИсполнителям ИЛИ ЗначениеЗаполнено(СтрокаПериода.Родитель) Тогда
			// добавляем все задачи периода в подчиненные строки
			СтруктураПоиска = Новый Структура("Период, Периодичность", СтрокаПериода.Период, СтрокаПериода.Периодичность);
			Если ПоИсполнителям Тогда
				СтруктураПоиска.Вставить("Исполнитель", СтрокаПериода.Исполнитель);
			КонецЕсли;
			НайденныеСтроки = ДеревоРезультат.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаЗадачи = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗадачи, НайденнаяСтрока);
				Если ЗначениеЗаполнено(НайденнаяСтрока.ЭтапПодготовкиБюджетовОснование) Тогда
					СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование = 
						НайденнаяСтрока.ЭтапПодготовкиБюджетовОснованиеНаименование + " ("
							+ НайденнаяСтрока.ЭтапПодготовкиБюджетовНаименование + "%1)";
				ИначеЕсли ЗначениеЗаполнено(СтрокаЗадачи.ЭтапПодготовкиБюджетов) Тогда
					СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование = 
							СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование + "%1";
				ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрока.ЗадачаНаименование) Тогда
					СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование = 
							НайденнаяСтрока.ЗадачаНаименование + "%1";
				Иначе
					СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование = "";
				КонецЕсли;
				Процесс = "";
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПроцессПодготовкиБюджетов) Тогда
					Процесс = НСтр("ru = ', Процесс №';
									|en = ', Process No.'") + НайденнаяСтрока.ПроцессПодготовкиБюджетовНомер;
				КонецЕсли;
				СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование, Процесс);
			КонецЦикла;
		КонецЕсли;
		// добавляем подчиненные строки
		СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, СтрокаПериода, ТипОтчета, ПоИсполнителям, НоваяСтрока);
		
		Если Не ПоИсполнителям ИЛИ ЗначениеЗаполнено(СтрокаПериода.Родитель) Тогда
			ИмяПоля = "ДатаНачала" + ?(ТипОтчета = 1, "Факт", "");
			Для Каждого ПодчиненнаяСтрока Из НоваяСтрока.Строки Цикл
				Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяПоля]) Тогда
					НоваяСтрока[ИмяПоля] = ПодчиненнаяСтрока.Период;
				Иначе
					НоваяСтрока[ИмяПоля] = Мин(НоваяСтрока[ИмяПоля], ПодчиненнаяСтрока.Период);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиРезультат;
	
КонецФункции

Процедура ОбработатьПовторяемыеЭтапыПроцесса(ДеревоПриемник, ДеревоЭтапов, СоответствиеРодителей)
	
	Для Каждого СтрокаДерева Из ДеревоЭтапов.Строки Цикл
		НужноДобавлять = Истина;
		Если ЗначениеЗаполнено(СтрокаДерева.ЭтапПодготовкиБюджетовОснование) Тогда
			РодителиГруппыСсылки = СоответствиеРодителей[СтрокаДерева.ЭтапПодготовкиБюджетов];
			Если РодителиГруппыСсылки.Найти(СтрокаДерева.ЭтапПодготовкиБюджетовОснование) <> Неопределено Тогда
				НужноДобавлять = Ложь;
			Иначе
				СтрокаДерева.ЭтапПодготовкиБюджетовНаименование = СтрокаДерева.ЭтапПодготовкиБюджетовОснованиеНаименование;
				СтрокаДерева.ЭтапПодготовкиБюджетовОтветственный = СтрокаДерева.ЭтапПодготовкиБюджетовОснованиеОтветственный;
				СтрокаДерева.ЭтапПодготовкиБюджетовЭтоГруппа = СтрокаДерева.ЭтапПодготовкиБюджетовОснованиеЭтоГруппа;
				СтрокаДерева.ЭтапПодготовкиБюджетовВыполнятьАвтоматически = СтрокаДерева.ЭтапПодготовкиБюджетовОснованиеВыполнятьАвтоматически;
			КонецЕсли;
		КонецЕсли;
		Если НужноДобавлять Тогда
			НоваяСтрока = ДеревоПриемник.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			Приемник = НоваяСтрока;
		Иначе
			Приемник = ДеревоПриемник;
		КонецЕсли;
		ОбработатьПовторяемыеЭтапыПроцесса(Приемник, СтрокаДерева, СоответствиеРодителей);
	КонецЦикла;
	
КонецПроцедуры


// Выполняет подготовку дерева результатов.
// 
// Параметры:
// 	Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов - Документ процесса подготовки.
// 	Источник - КоллекцияСтрокДереваЗначений - Описание
// 	Приемник - КоллекцияСтрокДереваЗначений - Описание
// 	ТаблицаЗадач - ТаблицаЗначений - Таблица задач.
// 	КэшРеквизитовЭтапов - ТаблицаЗначений - кэш реквизитов этапов:
// 	 *Наименование - Строка - Наименование этапа.
// 	КэшРеквизитовЗадач - ТаблицаЗначений - кэш реквизитов задач:
// 	 *Наименование - Строка - Наименование задачи.
// Возвращаемое значение:
// 	Булево - Описание
Функция СкопироватьДеревоПроцессаВДеревоРезультат(Процесс, Источник, Приемник, 
									ТаблицаЗадач, КэшРеквизитовЭтапов, КэшРеквизитовЗадач)
	
	НаУровнеЕстьКонечныеЭтапы = Ложь;
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.ЭтапПодготовкиБюджетовЭтоГруппа = СтрокаИсточника.ЭтоГруппа;
		Реквизиты = КэшРеквизитовЭтапов.Найти(НоваяСтрока.ЭтапПодготовкиБюджетов);
		НоваяСтрока.ЭтапПодготовкиБюджетовВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ЭтапПодготовкиБюджетовОснование) Тогда
			Реквизиты = КэшРеквизитовЭтапов.Найти(НоваяСтрока.ЭтапПодготовкиБюджетовОснование);
			НоваяСтрока.ЭтапПодготовкиБюджетов 							= НоваяСтрока.ЭтапПодготовкиБюджетовОснование;
			НоваяСтрока.ЭтапПодготовкиБюджетовНаименование 				= Реквизиты.Наименование;
			НоваяСтрока.ЭтапПодготовкиБюджетовОтветственный 			= Реквизиты.Ответственный;
			НоваяСтрока.ЭтапПодготовкиБюджетовЭтоГруппа 				= Реквизиты.ЭтоГруппа;
			НоваяСтрока.ЭтапПодготовкиБюджетовВыполнятьАвтоматически 	= Реквизиты.ВыполнятьАвтоматически;
		КонецЕсли;
		НоваяСтрока.ПроцессПодготовкиБюджетов = Процесс;
		
		Если СтрокаИсточника.ЭтоГруппа Тогда
			ВПодчиненныхЕстьКонечныеЭтапы = СкопироватьДеревоПроцессаВДеревоРезультат(Процесс, СтрокаИсточника.Строки, НоваяСтрока.Строки, 
																						ТаблицаЗадач, КэшРеквизитовЭтапов, КэшРеквизитовЗадач);
			Если Не ВПодчиненныхЕстьКонечныеЭтапы Тогда
				Приемник.Удалить(НоваяСтрока);
			Иначе
				НаУровнеЕстьКонечныеЭтапы = Истина;
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска = Новый Структура(
				"ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование, ПроцессПодготовкиБюджетов",
				СтрокаИсточника.ЭтапПодготовкиБюджетов, СтрокаИсточника.ЭтапПодготовкиБюджетовОснование, Процесс);
			НайденныеСтроки = ТаблицаЗадач.НайтиСтроки(СтруктураПоиска);
			
			ВПодчиненныхЕстьКонечныеЭтапы = Ложь;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, НоваяСтрока);
				ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, НайденнаяСтрока);
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.Задача) Тогда
					Реквизиты = КэшРеквизитовЗадач.Найти(НайденнаяСтрока.Задача);
					НоваяПодчиненнаяСтрока.ЗадачаДата = Реквизиты.Дата;
					НоваяПодчиненнаяСтрока.ЗадачаНаименование = Реквизиты.Наименование;
					НоваяПодчиненнаяСтрока.ЗадачаНомер = Реквизиты.Номер;
					НоваяПодчиненнаяСтрока.ЗадачаСрокИсполнения = Реквизиты.СрокИсполнения;
				КонецЕсли;
			
				ВПодчиненныхЕстьКонечныеЭтапы = Истина;
				
			КонецЦикла;
			
			Если Не ВПодчиненныхЕстьКонечныеЭтапы Тогда
				Приемник.Удалить(НоваяСтрока);
			Иначе
				НаУровнеЕстьКонечныеЭтапы = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаУровнеЕстьКонечныеЭтапы;
	
КонецФункции

Функция НайтиСтрокиОсновногоПланаДляЗаполненияЗадач(ДеревоЗадач, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоЗадач.Строки Цикл
		
		Если Не СтрокаДерева.Строки.Количество() И Не ЗначениеЗаполнено(СтрокаДерева.Задача) Тогда
			Результат.Добавить(СтрокаДерева);
		Иначе
			НайтиСтрокиОсновногоПланаДляЗаполненияЗадач(СтрокаДерева, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗадачиОсновногоПланаПоПервомуПроцессу(Процесс, МассивСтрокКЗаполнениюЗадач, 
													ТаблицаЗадачЗаполнения, КэшРеквизитовЗадач)
													
	МассивКУдалению = Новый Массив;
	Индекс = 0;
	Для Каждого СтрокаКЗаполнению Из МассивСтрокКЗаполнениюЗадач Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ПроцессПодготовкиБюджетов", Процесс); 
		СтруктураПоиска.Вставить("ЭтапПодготовкиБюджетов", СтрокаКЗаполнению.ЭтапПодготовкиБюджетов);
		СтруктураПоиска.Вставить("ЭтапПодготовкиБюджетовОснование", СтрокаКЗаполнению.ЭтапПодготовкиБюджетовОснование);
		СтруктураПоиска.Вставить("Период", СтрокаКЗаполнению.Период);
		
		НайденныеСтроки = ТаблицаЗадачЗаполнения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению, НайденныеСтроки[0], 
				"Исполнитель, Задача, ЗадачаВыполнена, ДатаНачалаФакт, ДатаОкончанияФакт");
			Если ЗначениеЗаполнено(НайденныеСтроки[0].Задача) Тогда
				РеквизитыЗадачи = КэшРеквизитовЗадач.Найти(НайденныеСтроки[0].Задача);
				СтрокаКЗаполнению.ЗадачаНомер = РеквизитыЗадачи.Номер;
				СтрокаКЗаполнению.ЗадачаДата = РеквизитыЗадачи.Дата;
				СтрокаКЗаполнению.ЗадачаНаименование = РеквизитыЗадачи.Наименование;
				СтрокаКЗаполнению.ЗадачаСрокИсполнения = РеквизитыЗадачи.СрокИсполнения;
			КонецЕсли;
			ТаблицаЗадачЗаполнения.Удалить(НайденныеСтроки[0]);
			МассивКУдалению.Вставить(0, Индекс);
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Для Каждого Элемент Из МассивКУдалению Цикл
		МассивСтрокКЗаполнениюЗадач.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДеревоВыводаПроцессами(МодельБюджетирования, ДеревоЗадач, ТаблицаЗадач, ДатаНачала, ДатаОкончания, ДопПараметры)
	
	Процессы = ТаблицаЗадач.ВыгрузитьКолонку("ПроцессПодготовкиБюджетов");
	Процессы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Процессы);
	Индекс = Процессы.Найти(Документы.ПроцессПодготовкиБюджетов.ПустаяСсылка());
	Если Индекс <> Неопределено Тогда
		Процессы.Удалить(Индекс);
	КонецЕсли;
	МассивРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Процессы, "НастройкиИерархии, Дата");
	СписокПроцессов = Новый СписокЗначений;
	СписокПроцессов.ЗагрузитьЗначения(Процессы);
	Для Каждого ЭлементСписка Из СписокПроцессов Цикл
		ЭлементСписка.Представление = МассивРеквизитов[ЭлементСписка.Значение].Дата;
	КонецЦикла;
	СписокПроцессов.СортироватьПоПредставлению();
	Процессы = СписокПроцессов.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ОтфильтрованныеЗадачи ИЗ &ТаблицаЗадач КАК Таблица
	|ГДЕ Таблица.Период МЕЖДУ &ДатаНачала И &ДатаОкончания И &ФильтрНаИсполнителя
	|;
	|ВЫБРАТЬ * ИЗ ОтфильтрованныеЗадачи
	|;
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка,
	|	ЭтапыПодготовкиБюджетов.Наименование,
	|	ЭтапыПодготовкиБюджетов.ЭтоГруппа,
	|	ЭтапыПодготовкиБюджетов.Действие,
	|	ЭтапыПодготовкиБюджетов.Ответственный,
	|	ЭтапыПодготовкиБюджетов.ВыполнятьАвтоматически
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БюджетнаяЗадача.Ссылка,
	|	БюджетнаяЗадача.СрокИсполнения,
	|	БюджетнаяЗадача.Наименование,
	|	БюджетнаяЗадача.Номер,
	|	БюджетнаяЗадача.Дата
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.Ссылка В(&Задачи)";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	МассивЗадач = ТаблицаЗадач.ВыгрузитьКолонку("Задача");
	МассивЗадач = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗадач);
	Запрос.УстановитьПараметр("Задачи", МассивЗадач);
	КопияТаблицыЗадач = ТаблицаЗадач.Скопировать();
	КопияТаблицыЗадач.Колонки.Удалить("ЭтапПодготовкиБюджетовВПериоде");
	КопияТаблицыЗадач.Колонки.Удалить("НастройкаДействия");
	КопияТаблицыЗадач.Колонки.Удалить("ПредыдущиеЗадачи");
	Запрос.УстановитьПараметр("ТаблицаЗадач", КопияТаблицыЗадач);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ФлагИсполнитель") Тогда
		Если ДопПараметры.ФлагИсполнитель Тогда
			Запрос.УстановитьПараметр("Исполнитель", ДопПараметры.ЗначениеИсполнитель);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаИсполнителя", "Таблица.Исполнитель = &Исполнитель");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаИсполнителя", "ИСТИНА");
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаИсполнителя", "ИСТИНА");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаЗадачЗаполнения = МассивРезультатов[1].Выгрузить();
	КэшРеквизитовЭтапов = МассивРезультатов[2].Выгрузить();
	КэшРеквизитовЗадач = МассивРезультатов[3].Выгрузить();
	
	ФормироватьЗадачиАвтоматически = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "АвтоматическиФормироватьЗадачи");
	Если Не ФормироватьЗадачиАвтоматически Тогда
		МассивСтрокКЗаполнениюЗадач = НайтиСтрокиОсновногоПланаДляЗаполненияЗадач(ДеревоЗадач);
	КонецЕсли;
	
	Для Каждого Процесс Из Процессы Цикл
		
		Если Не ФормироватьЗадачиАвтоматически Тогда
			ЗаполнитьЗадачиОсновногоПланаПоПервомуПроцессу(Процесс, МассивСтрокКЗаполнениюЗадач, ТаблицаЗадачЗаполнения, КэшРеквизитовЗадач);
		КонецЕсли;
		
		Если ТаблицаЗадачЗаполнения.Найти(Процесс, "ПроцессПодготовкиБюджетов") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоИерархииПоПроцессу = Документы.ПроцессПодготовкиБюджетов.ИерархияЭтаповПроцессаПоДокументу(
														МассивРеквизитов[Процесс].НастройкиИерархии.Выгрузить());
		ДеревоИерархииПоПроцессу.Строки.Сортировать("Код", Истина);
		
		СтрокаПроцесса = ДеревоЗадач.Строки.Добавить();
		СтрокаПроцесса.ПроцессПодготовкиБюджетов = Процесс;
		НаУровнеЕстьКонечныеЭтапы = СкопироватьДеревоПроцессаВДеревоРезультат(Процесс, ДеревоИерархииПоПроцессу.Строки, СтрокаПроцесса.Строки, 
																				ТаблицаЗадачЗаполнения, КэшРеквизитовЭтапов, КэшРеквизитовЗадач);
		Если Не НаУровнеЕстьКонечныеЭтапы Тогда
			ДеревоЗадач.Строки.Удалить(СтрокаПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводДереваЗначенийВДиаграммуГантаСлужебные

Функция ПолучитьЗначениеДерева(СтрокаДерева)
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	Если ЗначениеЗаполнено(СтрокаДерева.ЭтапПодготовкиБюджетов)
		ИЛИ СтрокаДерева.ЭтапПодготовкиБюджетов = Справочники.ЭтапыПодготовкиБюджетов.ПустаяСсылка() Тогда
		Возврат СтрокаДерева.ЭтапПодготовкиБюджетов;
	ИначеЕсли Колонки.Найти("Период") <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Период) Тогда
		Возврат СтрокаДерева.Период;
	ИначеЕсли Колонки.Найти("Исполнитель") <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Исполнитель) Тогда
		Возврат СтрокаДерева.Исполнитель;
	ИначеЕсли Колонки.Найти("ПроцессПодготовкиБюджетов") <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.ПроцессПодготовкиБюджетов) Тогда
		Возврат СтрокаДерева.ПроцессПодготовкиБюджетов;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная группировка диаграммы ганта бюджетного процесса!';
								|en = 'Unknown grouping of Gantt chart of the budget process.'")
	КонецЕсли;
	
КонецФункции

Функция ИнтервалыЗадач()
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачалаФакт");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончанияФакт");
	ТаблицаИнтервалов.Колонки.Добавить("Задача");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаНаименование");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаДата");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаНомер");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаВыполнена");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаСрокИсполнения");
	ТаблицаИнтервалов.Колонки.Добавить("ЭтапПодготовкиБюджетов");
	ТаблицаИнтервалов.Колонки.Добавить("ЭтапПодготовкиБюджетовНаименование");
	ТаблицаИнтервалов.Колонки.Добавить("Периодичность");
	ТаблицаИнтервалов.Колонки.Добавить("Период");
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТаблицыЗначенийСНеперескающимисяИнтервалами

Функция ПересечениеИнтервалов(Начало1, Конец1, Начало2, Конец2)
	
	// Начало2 лежит на отрезке 1
	ПересечениеИнтервалов 	= Начало1 <= Начало2 И Начало2 <= Конец1;
	// Конец2 лежит на отрезке 1
	ПересечениеИнтервалов 	= ПересечениеИнтервалов ИЛИ (Начало1 <= Конец2 И Конец2 <= Конец1);
	// Конец2 лежит на отрезке 1
	ПересечениеИнтервалов 	= ПересечениеИнтервалов ИЛИ (Начало2 <= Начало1 И Конец1 <= Конец2);
	
	Возврат ПересечениеИнтервалов;
	
КонецФункции


// Вырезает интервал дат по одной таблице из другой таблицы и помещает значение в ТаблицаРезультат.
// 
// Параметры:
// 	ТаблицаРезультат - ТаблицаЗначений - таблица результата вырезки интервалов:
// 	 *Тип - Строка - тип.
// 	 *ДатаНачала - Дата - дата начала.
// 	 *ДатаОкончания - Дата - дата окончания.
// 	 *Строки - Массив - строки.
// 	ЧтоВырезать - Строка - значение колонки "Тип".
// 	ОткудаВырезать - Структура - Описание:
// 	*Сформирована - Неопределено - ключ структуры.
// 	*Факт - Неопределено - ключ структуры
Процедура ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, ЧтоВырезать, ОткудаВырезать)
	
	СтрокиТаблицыЧтоВырезать = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", ЧтоВырезать));
	
	Для Каждого КлючИЗначение Из ОткудаВырезать Цикл
		Для Каждого СтрокаТаблицыЧтоВырезать Из СтрокиТаблицыЧтоВырезать Цикл
			СтрокиТаблицыОткудаВырезать = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", КлючИЗначение.Ключ));
			Для Каждого СтрокаТаблицыОткудаВырезать Из СтрокиТаблицыОткудаВырезать Цикл
				ПересечениеИнтервалов 	= ПересечениеИнтервалов(СтрокаТаблицыЧтоВырезать.ДатаНачала, 
																СтрокаТаблицыЧтоВырезать.ДатаОкончания, 
																СтрокаТаблицыОткудаВырезать.ДатаНачала, 
																СтрокаТаблицыОткудаВырезать.ДатаОкончания);
				Если ПересечениеИнтервалов Тогда
					
					// для рассшифровки скопируем строки исходной таблицы
					Для Каждого СтрокаРезультата Из СтрокаТаблицыОткудаВырезать.Строки Цикл
						СтрокаТаблицыЧтоВырезать.Строки.Добавить(СтрокаРезультата);
					КонецЦикла;
					
					// Интервал "откуда" слева от интервала, который хотим вырезать
					Если СтрокаТаблицыОткудаВырезать.ДатаНачала < СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания <= СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						СтрокаТаблицыОткудаВырезать.ДатаОкончания = СтрокаТаблицыЧтоВырезать.ДатаНачала - 1;
					// Интервал "откуда" справа от интервала, который хотим вырезать
					ИначеЕсли СтрокаТаблицыОткудаВырезать.ДатаНачала >= СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания > СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						СтрокаТаблицыОткудаВырезать.ДатаНачала = СтрокаТаблицыЧтоВырезать.ДатаОкончания + 1;
					// Интервал "откуда" больше от интервала, который хотим вырезать
					ИначеЕсли СтрокаТаблицыОткудаВырезать.ДатаНачала < СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания > СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						НоваяСтрока = ТаблицаРезультат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыОткудаВырезать);
						СтрокаТаблицыОткудаВырезать.ДатаНачала = СтрокаТаблицыЧтоВырезать.ДатаОкончания + 1;
						НоваяСтрока.ДатаОкончания = СтрокаТаблицыЧтоВырезать.ДатаНачала - 1;
					// Интервал "откуда" входит в интервал, который хотим вырезать
					Иначе
						ТаблицаРезультат.Удалить(СтрокаТаблицыОткудаВырезать);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


// Обработка пересечений интервалов.
// 
// Параметры:
// 	СтрокаРезультат - СтрокаТаблицыЗначений - строка таблицы результата:
// 	 *ДатаНачала - Дата - Дата начала.
// 	 *ДатаОкончания - Дата - дата окончания.
// 	 *Строки - Массив - Строки.
// 	НайденныеСтроки - Массив из СтрокаТаблицыЗначений - строки с колонками:
// 	 *ДатаНачала - Дата - Дата начала.
// 	 *ДатаОкончания - Дата - дата окончания.
Процедура ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки)
	
	ДатаНачалаИнт1 = СтрокаРезультат.ДатаНачала;
	ДатаОкончанияИнт1 = СтрокаРезультат.ДатаОкончания;
	БылиПересечения = Ложь;
	Для Каждого СтрокаТаблицыОткудаВырезать Из НайденныеСтроки Цикл
		Если СтрокаТаблицыОткудаВырезать = СтрокаРезультат Тогда
			Продолжить;
		КонецЕсли;
		ДатаНачалаИнт2 = СтрокаТаблицыОткудаВырезать.ДатаНачала;
		ДатаОкончанияИнт2 = СтрокаТаблицыОткудаВырезать.ДатаОкончания;
		ПересечениеИнтервалов = ПересечениеИнтервалов(ДатаНачалаИнт1, ДатаОкончанияИнт1, ДатаНачалаИнт2, ДатаОкончанияИнт2);
		Если ПересечениеИнтервалов Тогда
			СтрокаРезультат.ДатаНачала = Мин(ДатаНачалаИнт1, ДатаНачалаИнт2);
			СтрокаРезультат.ДатаОкончания = Макс(ДатаОкончанияИнт1, ДатаОкончанияИнт2);
			Для Каждого ИсходнаяСтрока Из СтрокаТаблицыОткудаВырезать.Строки Цикл
				СтрокаРезультат.Строки.Добавить(ИсходнаяСтрока);
			КонецЦикла;
			СтрокаРезультат.Владелец().Удалить(СтрокаТаблицыОткудаВырезать);
			БылиПересечения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиПересечения Тогда
		НайденныеСтроки = СтрокаРезультат.Владелец().НайтиСтроки(Новый Структура("Тип", СтрокаРезультат.Тип));
		ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки);
	КонецЕсли;
	
КонецПроцедуры


// Обрабатывает строку интервала.
// 
// Параметры:
// 	Тип - Строка - тип.
// 	НайденнаяСтрока - СтрокаТаблицыЗначений, Неопределено - найденная строка таблицы интервалов:
// 	*ДатаНачала - Дата - Дата начала.
// 	*ДатаОкончания - Дата - Дата окончания.
// 	ТаблицаРезультат - ТаблицаЗначений - Таблица результата:
// 	*ДатаНачала - Дата - Дата начала.
// 	*ДатаОкончания - Дата - Дата окончания.
// 	*Строки - Массив - Строки.
// 	ПоказатьПланВыполнения - Булево - Показать план выполнения.
// 	ТекДата - Дата - Текущая дата.
Процедура ОбработатьСтрокуИнтервала(Тип, НайденнаяСтрока, ТаблицаРезультат, ПоказатьПланВыполнения, ТекДата)
	
	Если Тип <> "План" Тогда
		
		Если Не ПоказатьПланВыполнения Тогда
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.Задача) Тогда
				НайденнаяСтрока[Тип + "Обработан"] = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Подходит = Ложь;
		ЗадачаВыполнена = Ложь;
		Если ТипЗнч(НайденнаяСтрока.ЗадачаВыполнена) = Тип("Булево") Тогда
			ЗадачаВыполнена = НайденнаяСтрока.ЗадачаВыполнена;
		КонецЕсли;
		СрокИсполнения = НайденнаяСтрока.ДатаОкончанияФакт;
		Если ТипЗнч(НайденнаяСтрока.ЗадачаСрокИсполнения) = Тип("Дата") Тогда
			СрокИсполнения = НайденнаяСтрока.ЗадачаСрокИсполнения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
			СрокИсполнения = Дата(1, 1, 1);
		КонецЕсли;
		
		Если Тип = "Факт" И ЗадачаВыполнена = Истина Тогда
			Подходит = Истина;
		ИначеЕсли Тип = "Просрочена" И ЗадачаВыполнена = Ложь
			И СрокИсполнения <= ТекДата Тогда
			Подходит = Истина;
		ИначеЕсли Тип = "Сформирована" И ЗадачаВыполнена = Ложь
			И СрокИсполнения > ТекДата Тогда
			Подходит = Истина;
		КонецЕсли;
		
		Если Не Подходит Тогда
			НайденнаяСтрока[Тип + "Обработан"] = Истина;
			Возврат
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.ЭтапПодготовкиБюджетов) Тогда
			НайденнаяСтрока[Тип + "Обработан"] = Истина;
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", Тип));
	
	Для Каждого СтрокаРезультат Из НайденныеСтроки Цикл
		ДатаНачалаИнт1 = СтрокаРезультат.ДатаНачала;
		ДатаОкончанияИнт1 = СтрокаРезультат.ДатаОкончания;
		ДатаНачалаИнт2 = НайденнаяСтрока["ДатаНачала" 		+ ?(Тип = "План", "", "Факт")];
		ДатаОкончанияИнт2 = НайденнаяСтрока["ДатаОкончания" 	+ ?(Тип = "План", "", "Факт")];
		ПересечениеИнтервалов = ПересечениеИнтервалов(ДатаНачалаИнт1, ДатаОкончанияИнт1, ДатаНачалаИнт2, ДатаОкончанияИнт2);
		Если ПересечениеИнтервалов Тогда
			СтрокаРезультат.ДатаНачала = Мин(ДатаНачалаИнт1, ДатаНачалаИнт2);
			СтрокаРезультат.ДатаОкончания = Макс(ДатаОкончанияИнт1, ДатаОкончанияИнт2);
			ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки);
			НайденнаяСтрока[Тип + "Обработан"] = Истина;
			СтрокаРезультат.Строки.Добавить(НайденнаяСтрока);
			Возврат
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРезультат = ТаблицаРезультат.Добавить();
	СтрокаРезультат.Тип = Тип;
	СтрокаРезультат.ДатаНачала = НайденнаяСтрока["ДатаНачала" + ?(Тип = "План", "", "Факт")];
	СтрокаРезультат.ДатаОкончания = НайденнаяСтрока["ДатаОкончания" + ?(Тип = "План", "", "Факт")];
	НайденнаяСтрока[Тип + "Обработан"] = Истина;
	СтрокаРезультат.Строки = Новый Массив;
	СтрокаРезультат.Строки.Добавить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ПреобразоватьТаблицуИнтервалов(ТаблицаИнтервалов, ПоказатьПланВыполнения)
	
	ТаблицаРезультат = ТаблицаИнтервалов.СкопироватьКолонки("ДатаНачала, ДатаОкончания");
	ТаблицаРезультат.Колонки.Добавить("Тип");
	ТаблицаРезультат.Колонки.Добавить("Строки");
	
	ТаблицаРезультат.Индексы.Добавить("Тип");
	
	ТекДата = ТекущаяДатаСеанса();
	
	СтруктураТипов = Новый Структура("План, Факт, Просрочена, Сформирована");
	Для Каждого КлючИЗначение Из СтруктураТипов Цикл
		
		Тип = КлючИЗначение.Ключ;
		ТаблицаИнтервалов.Колонки.Добавить(Тип + "Обработан", Новый ОписаниеТипов("Булево"));
		
		НайденнаяСтрока = ТаблицаИнтервалов.Найти(Ложь, Тип + "Обработан");
		Пока НайденнаяСтрока <> Неопределено Цикл
			ОбработатьСтрокуИнтервала(Тип, НайденнаяСтрока, ТаблицаРезультат, ПоказатьПланВыполнения, ТекДата);
			НайденнаяСтрока = ТаблицаИнтервалов.Найти(Ложь, Тип + "Обработан");
		КонецЦикла;
		
	КонецЦикла;
	
	ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, "Просрочена", Новый Структура("Сформирована, Факт"));
	ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, "Сформирована", Новый Структура("Факт"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область ВыводДереваЗначенийВДиаграммуГанта


// Добавляет интервало диаграммы.
// 
// Параметры:
// 	Интервал - ЗначениеДиаграммыГанта - интервал диаграммы.
// 	СтрокаДерева - СтрокаТаблицыЗначений - Строка дерева:
// 	*ДатаНачала - Дата - дата начала.
// 	*ДатаОкончания - Дата - Дата окончания.
// 	Тип - Строка - Тип
// 	УровеньЗадачи - Булево - это уровень задачи.
Процедура ДобавитьИнтервалДиаграммы(Интервал, СтрокаДерева, Тип, УровеньЗадачи = Ложь)
	
	Подинтервал = Интервал.Добавить();
	Подинтервал.Начало 	= СтрокаДерева.ДатаНачала;
	Подинтервал.Конец 	= СтрокаДерева.ДатаОкончания;
	Если СтрокаДерева.Тип = "План" Тогда
		Подинтервал.Цвет 	= ЦветаСтиля.РезультатОжидаетсяЦвет;
	ИначеЕсли СтрокаДерева.Тип = "Факт" Тогда
		Подинтервал.Цвет 	= ЦветаСтиля.РезультатУспехЦвет;
	ИначеЕсли СтрокаДерева.Тип = "Просрочена" Тогда
		Подинтервал.Цвет 	= WebЦвета.Красный;
	ИначеЕсли СтрокаДерева.Тип = "Сформирована" Тогда
		Подинтервал.Цвет 	= WebЦвета.Оранжевый;
	Иначе
		Подинтервал.Цвет 	= WebЦвета.Черный;
	КонецЕсли;
	
	МассивРасшифровки = Новый СписокЗначений;
	Для Каждого СтрокаЗадачи Из СтрокаДерева.Строки Цикл
		ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаЗадачи.Период, СтрокаЗадачи.Периодичность);
		Если Тип = "Факт" И ЗначениеЗаполнено(СтрокаЗадачи.Задача) Тогда
			ПредставлениеЗначения = НСтр("ru = '%1 №%2 от %3 (%4)';
										|en = '%1 No.%2 from %3 (%4)'");
			ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ПредставлениеЗначения, 
												СтрокаЗадачи.ЗадачаНаименование,
												СтрокаЗадачи.ЗадачаНомер,
												Формат(СтрокаЗадачи.ЗадачаДата, "ДЛФ=Д"),
												ПредставлениеПериода);
			Значение = СтрокаЗадачи.Задача;
		Иначе
			ПредставлениеЗначения = СтрокаЗадачи.ЭтапПодготовкиБюджетовНаименование + " (" + ПредставлениеПериода + ")";
			Значение = СтрокаЗадачи.ЭтапПодготовкиБюджетов;
		КонецЕсли;
		Если УровеньЗадачи Тогда
			ДополнениеПредставления = НСтр("ru = 'с %1 по %2';
											|en = 'from %1 to %2'");
			ДополнениеПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ДополнениеПредставления,
													Формат(СтрокаДерева.ДатаНачала, "ДФ=dd.MM.yy"),
													Формат(СтрокаДерева.ДатаОкончания, "ДФ=dd.MM.yy"));
			
			СоединяемыеСтроки = Новый Массив;
			СоединяемыеСтроки.Добавить(ПредставлениеЗначения);
			СоединяемыеСтроки.Добавить(ДополнениеПредставления);
			ПредставлениеЗначения = СтрСоединить(СоединяемыеСтроки, " ");
		КонецЕсли;
		МассивРасшифровки.Добавить(Значение, ПредставлениеЗначения);
	КонецЦикла;
	Подинтервал.Расшифровка = МассивРасшифровки;
	Если МассивРасшифровки.Количество() = 1 Тогда
		Подинтервал.Текст = МассивРасшифровки[0].Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиТаблицуВывода(ТаблицаВывода, Результат, Точка, ТипОтчета, СтруктураСерий)
	
	Для Каждого СтрокаТаблицыВывода Из ТаблицаВывода Цикл
		
		УровеньЗадачи = Не Точка.Точки.Количество();
		
		Если ТипОтчета <> 1 И СтрокаТаблицыВывода.Тип = "План" Тогда
			// отображение задач
			Интервал = Результат.ПолучитьЗначение(Точка, СтруктураСерий.План);
			ДобавитьИнтервалДиаграммы(Интервал, СтрокаТаблицыВывода, "План", УровеньЗадачи);
		КонецЕсли;
		
		Если ТипОтчета > 0 И СтрокаТаблицыВывода.Тип <> "План" Тогда
			// отображение задач
			Интервал = Результат.ПолучитьЗначение(Точка, СтруктураСерий.Факт);
			ДобавитьИнтервалДиаграммы(Интервал, СтрокаТаблицыВывода, "Факт", УровеньЗадачи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиДеревоВДиаграммуГанта(Результат, СтрокиДерева, СтруктураСерий, ТипОтчета, Группировки, ПоказатьПланВыполнения, ТочкаРодитель = Неопределено)
	ТаблицаИнтервалов = Неопределено;
	
	Если ТочкаРодитель = Неопределено Тогда
		ТочкаРодитель = Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева.Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() Тогда
			
			#Область ВыводИерархии
			
			// оформление точки: установка текста, значения, картинки
			Точка = ТочкаРодитель.Точки.Добавить();
			Точка.Значение = ПолучитьЗначениеДерева(СтрокаДерева);
			Если Точка.Значение = Справочники.ЭтапыПодготовкиБюджетов.ПустаяСсылка() Тогда
				Точка.Текст = НСтр("ru = '<Вне бюджетного процесса>';
									|en = '<Out of budget process>'");
			Иначе
				Если Группировки = "Вариант1" Тогда
					Точка.Текст = СтрокаДерева.ЭтапПодготовкиБюджетовНаименование;
					Если ЗначениеЗаполнено(СтрокаДерева.ЭтапПодготовкиБюджетов) Тогда
						Если СтрокаДерева.ЭтапПодготовкиБюджетовЭтоГруппа Тогда
							Точка.Картинка = БиблиотекаКартинок.Папка;
						Иначе
							Точка.Картинка = БиблиотекаКартинок.Элемент;
							Если СтрокаДерева.ЭтапПодготовкиБюджетовВыполнятьАвтоматически = Истина Тогда
								Точка.Текст = Точка.Текст + НСтр("ru = ', <Автоматически>';
																|en = ', <Automatically>'");
							ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭтапПодготовкиБюджетовОтветственный) Тогда
								Точка.Текст = Точка.Текст + ", " + СтрокаДерева.ЭтапПодготовкиБюджетовОтветственный;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Точка.Значение) = Тип("ДокументСсылка.ПроцессПодготовкиБюджетов") Тогда
						Точка.Картинка = БиблиотекаКартинок.Документ;
					КонецЕсли;
					Точка.Расшифровка = Точка.Значение;
				Иначе
					Если ТипЗнч(Точка.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
						Точка.Текст = Строка(Точка.Значение);
						Точка.Картинка = БиблиотекаКартинок.Пользователь;
						Точка.Расшифровка = Точка.Значение;
					Иначе
						ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаДерева.Период, СтрокаДерева.Периодичность);
						Точка.Текст = ПредставлениеПериода;
						РасшифровкаПериода = НСтр("ru = 'Период планирования: %1';
													|en = 'Planning period: %1'");
						Точка.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РасшифровкаПериода, ПредставлениеПериода);
						Если СтрокаДерева.Периодичность <> ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
							Точка.Расшифровка 	= Точка.Расшифровка + Символы.ПС;
							ДатаПланирования 	= БюджетированиеКлиентСервер.ДатаНачалаПериода(
															СтрокаДерева.Период, 
															СтрокаДерева.Периодичность);
							ДатаПланирования 	= Формат(ДатаПланирования, "ДЛФ=D");
							Точка.Расшифровка 	= Точка.Расшифровка + ДатаПланирования;
							Точка.Расшифровка 	= Точка.Расшифровка + " - ";
							ДатаПланирования 	= БюджетированиеКлиентСервер.ДатаКонцаПериода(
															СтрокаДерева.Период, 
															СтрокаДерева.Периодичность);
							ДатаПланирования 	= Формат(ДатаПланирования, "ДЛФ=D");
							Точка.Расшифровка 	= Точка.Расшифровка + ДатаПланирования;
						КонецЕсли;
						Если СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
							Точка.Картинка = БиблиотекаКартинок.ПиктограммаПериодДень;
						ИначеЕсли СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
							Точка.Картинка = БиблиотекаКартинок.Период_Неделя;
						ИначеЕсли СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
							Точка.Картинка = БиблиотекаКартинок.ПиктограммаПериодНеделя;
						Иначе
							Точка.Картинка = БиблиотекаКартинок.Периоды;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// вывод задач
			ПодчиненнаяТаблицаИнтервалов = ВывестиДеревоВДиаграммуГанта(Результат,
			                                                            СтрокаДерева,
			                                                            СтруктураСерий,
			                                                            ТипОтчета,
			                                                            Группировки,
			                                                            ПоказатьПланВыполнения,
			                                                            Точка);
			
			// Для вариантов отчета, отображающих процесс по задачам - 
			// - выводим интервалы на всех уровнях иерархии.
			Если Группировки <> "Вариант1" Тогда
				Если ТаблицаИнтервалов = Неопределено Тогда
					ТаблицаИнтервалов = ПодчиненнаяТаблицаИнтервалов.Скопировать();
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПодчиненнаяТаблицаИнтервалов, ТаблицаИнтервалов);
				КонецЕсли;
			КонецЕсли;
			
			Если ПодчиненнаяТаблицаИнтервалов <> Неопределено Тогда
				
				ТаблицаВывода = ПреобразоватьТаблицуИнтервалов(ПодчиненнаяТаблицаИнтервалов, ПоказатьПланВыполнения);
				ВывестиТаблицуВывода(ТаблицаВывода, Результат, Точка, ТипОтчета, СтруктураСерий);
			
			КонецЕсли;
			
			#КонецОбласти
			
		Иначе
			
			#Область ВыводЗадачи
			
			Если ТаблицаИнтервалов = Неопределено Тогда
				ТаблицаИнтервалов = ИнтервалыЗадач();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаИнтервалов.Добавить(), СтрокаДерева);
			
			ТаблицаТекущейЗадачи = ИнтервалыЗадач();
			ЗаполнитьЗначенияСвойств(ТаблицаТекущейЗадачи.Добавить(), СтрокаДерева);
			ТаблицаВывода = ПреобразоватьТаблицуИнтервалов(ТаблицаТекущейЗадачи, ПоказатьПланВыполнения);
			
			ТочкаЗадачи = ТочкаРодитель.Точки.Добавить();
			
			Если Группировки = "Вариант1" Тогда
				ТочкаЗадачи.Значение = СтрокаДерева.Период;
			Иначе
				ТочкаЗадачи.Значение = СтрокаДерева.ЭтапПодготовкиБюджетов;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТочкаЗадачи.Значение) ИЛИ Группировки <> "Вариант1" Тогда
				
				ТочкаЗадачи.Текст = СтрокаДерева.ЭтапПодготовкиБюджетовНаименование;
				ТочкаЗадачи.Текст = ТочкаЗадачи.Текст;
				Если Группировки = "Вариант2" Тогда
					ТочкаЗадачи.Текст = ТочкаЗадачи.Текст + ", " + Строка(СтрокаДерева.Исполнитель);
				КонецЕсли;
				
			Иначе
				
				ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаДерева.Период, СтрокаДерева.Периодичность);
				ТочкаЗадачи.Текст = ПредставлениеПериода;
				Если СтрокаДерева.Исполнитель <> СтрокаДерева.Родитель.ЭтапПодготовкиБюджетовОтветственный Тогда
					ТочкаЗадачи.Текст = ТочкаЗадачи.Текст + ", " + Строка(СтрокаДерева.Исполнитель);
				КонецЕсли;
				Если ТочкаРодитель.Текст = НСтр("ru = '<Вне бюджетного процесса>';
												|en = '<Out of budget process>'") Тогда
					ТочкаЗадачи.Текст = ТочкаЗадачи.Текст + ", " + Строка(СтрокаДерева.ЗадачаНаименование);
				КонецЕсли;
				
			КонецЕсли;
			
			ТочкаЗадачи.Расшифровка = СтрокаДерева.ЭтапПодготовкиБюджетов;
			ТочкаЗадачи.Картинка = БиблиотекаКартинок.Задача;
			
			ВывестиТаблицуВывода(ТаблицаВывода, Результат, ТочкаЗадачи, ТипОтчета, СтруктураСерий);
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

#КонецОбласти

#Область ОформлениеДиаграммыПослеВывода

Функция ОбработатьРазвернутьТочки(Результат, Точки, СворачиваемыйТип)
	
	БылиТочкиСПодчиненнымиНаУровне = Ложь;
	ВстретилсяСворачиваемыйТип = Ложь;
	Для Каждого Точка Из Точки Цикл
		
		Разворачивать = ОбработатьРазвернутьТочки(Результат, Точка.Точки, СворачиваемыйТип);
		
		Если Разворачивать Тогда
			Результат.РазвернутьТочку(Точка, Ложь);
		Иначе
			Результат.СвернутьТочку(Точка, Ложь);
		КонецЕсли;
		
		Если Точка.Точки.Количество() Тогда
			БылиТочкиСПодчиненнымиНаУровне = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Точка.Значение) = СворачиваемыйТип Тогда
			ВстретилсяСворачиваемыйТип = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Разворачивать = БылиТочкиСПодчиненнымиНаУровне;
	Разворачивать = Разворачивать ИЛИ Не ВстретилсяСворачиваемыйТип;
	
	Возврат Разворачивать;
			
КонецФункции

Процедура ОформитьДиаграммуПослеВывода(Результат, ТипОтчета, Группировки, Знач НачалоПериода, Знач КонецПериода)
	
	Результат.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	
	ЭлементыШкалы = Результат.ОбластьПостроения.ШкалаВремени.Элементы;
	
	Пока ЭлементыШкалы.Количество() > 1 Цикл
		ЭлементыШкалы.Удалить(ЭлементыШкалы[1]);
	КонецЦикла;
	
	ЭлементыШкалы[0].Единица = ТипЕдиницыШкалыВремени.День;
	
	Если Группировки = "Вариант1" Тогда
		ОбработатьРазвернутьТочки(Результат, Результат.Точки, Тип("Дата"));
	Иначе
		ОбработатьРазвернутьТочки(Результат, Результат.Точки, Тип("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
	КонецЕсли;
	
	Если Группировки = "Вариант1" Тогда
		Результат.АвтоОпределениеПолногоИнтервала = Истина;
		НачалоАвтоИнтервала = Результат.НачалоПолногоИнтервала;
		КонецАвтоИнтервала = Результат.КонецПолногоИнтервала;
		Результат.АвтоОпределениеПолногоИнтервала = Ложь;
		Результат.УстановитьПолныйИнтервал(
							Мин(НачалоАвтоИнтервала, НачалоПериода),
							Макс(КонецАвтоИнтервала, КонецДня(КонецПериода)));
	Иначе
		Результат.АвтоОпределениеПолногоИнтервала = Ложь;
		Результат.УстановитьПолныйИнтервал(НачалоПериода, КонецДня(КонецПериода));
	КонецЕсли;
	
	НачалоПериода = Результат.НачалоПолногоИнтервала;
	КонецПериода = Результат.КонецПолногоИнтервала;
	
	Добавлено = 0; 
	ДополнитьМесяцГодом = Истина;
	Если Год(НачалоПериода) <> Год(КонецПериода) Тогда
		ДополнитьМесяцГодом = Ложь;
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Год;
		НоваяШкала.Формат = НСтр("ru = 'ДФ=''yyyy''';
								|en = 'DF=''yyyy'''");
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоКвартала(НачалоПериода) <> НачалоКвартала(КонецПериода) Тогда
		ДополнитьМесяцГодом = Ложь;
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Квартал;
		ПараметрКварталаНаЯзыкеКода = "к";
		ПараметрГодНаЯзыкеКода = "yyyy";
		ФорматнаяСтрока = НСтр("ru = 'ДФ=''%1 ""кв."" %2''';
								|en = 'DF=''%1'' ""q"" %2'''");
		НоваяШкала.Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ФорматнаяСтрока,
			ПараметрКварталаНаЯзыкеКода,
			ПараметрГодНаЯзыкеКода);
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоМесяца(НачалоПериода) <> НачалоМесяца(КонецПериода) Тогда
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Если ДополнитьМесяцГодом Тогда
			НоваяШкала.Формат = НСтр("ru = 'ДФ=''MMMM yyyy''';
									|en = 'DF=''MMMM yyyy'''");
		Иначе
			НоваяШкала.Формат = НСтр("ru = 'ДФ=''MMM''';
									|en = 'DF=''MMM'''");
		КонецЕсли;
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоМесяца(КонецПериода) <= КонецМесяца(НачалоПериода) + 1 Тогда
		// если 2 месяца - то добавляем день
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.День;
		НоваяШкала.Формат = НСтр("ru = 'ДФ=dd';
								|en = 'DF=dd'");
		Добавлено = Добавлено + 1;
	КонецЕсли;
	
	Пока ЭлементыШкалы.Количество() > Добавлено Цикл
		ЭлементыШкалы.Удалить(ЭлементыШкалы[Добавлено]);
	КонецЦикла;
	
	Если Группировки = "Вариант1" Тогда
		Заголовок = НСтр("ru = 'Этап процесса / Период планирования';
						|en = 'Process stage / Planning period'");
	ИначеЕсли Группировки = "Вариант2" Тогда
		Заголовок = НСтр("ru = 'Период планирования / Задача';
						|en = 'Planning period / Task'");
	ИначеЕсли Группировки = "Вариант3" Тогда
		Заголовок = НСтр("ru = 'Исполнитель / Период планирования / Задача';
						|en = 'Assignee / Planning period / Task'");
	КонецЕсли;
	
	Результат.ОбластьПостроения.Заголовок = СтрЗаменить(Заголовок, "/ ", "/" + Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
