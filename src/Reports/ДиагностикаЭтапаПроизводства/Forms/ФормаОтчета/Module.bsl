
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СтатусГрафика", СтатусГрафика) Тогда
		
		СтатусГрафика = СтатусРабочийГрафик();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрКоманды", ЭтапПроизводства) Тогда
			
		УстановитьЗаголовокФормы();
		СформироватьОтчетНаСервере();
		
	КонецЕсли;
	
	ВывестиЛегенду();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Планировать(Команда)
	
	ПланироватьГрафикЭтапа();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		Если НЕ ОбработчикОжиданияДлительнойОперации = ОбработчикПланированияГрафика() Тогда
			ОповеститьОПланированииГрафикаЭтапа();
		КонецЕсли;
		
		НачатьОжиданиеДлительнойОперации();
		
	Иначе
		
		ОповеститьОПланированииГрафикаЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСмежныхЭтапов(Команда)
	
	Если ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ЭтапПроизводства);
		ПараметрыФормы.Вставить("СтатусГрафика", СтатусГрафика);
		
		ОткрытьФорму(
			"Отчет.ДиаграммаСмежныхЭтаповПроизводства.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			ЭтапПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементаФормыТабличныйДокумент

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.Свойство("ВидОбласти") Тогда
			
			Если Расшифровка.ВидОбласти = "ОткрытьДиагностикуСмежногоЭтапа" Тогда
				
				ОткрытьДиагностикуСмежногоЭтапа(Расшифровка);
				
			ИначеЕсли Расшифровка.ВидОбласти = "УправлениеВидимостьюАльтернативныхВидовРЦ" Тогда
				
				ПоказатьСкрытьАльтернативы(Расшифровка, ТабличныйДокумент);
				
			ИначеЕсли Расшифровка.ВидОбласти = "ИспользоватьВидРЦ" Тогда
				
				ЗаменитьИспользуемыйВидРЦКлиент(Расшифровка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭтапПроизводства,
			"НаименованиеЭтапа, Номер");
		ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ЗначенияРеквизитов);
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Диагностика графика этапа ""%1""';
				|en = 'The ""%1"" stage resource chart'"),
			ПредставлениеЭтапа);
		
	Иначе
		
		Заголовок = НСтр("ru = 'Диагностика графика этапа производства';
						|en = 'Production stage resource chart'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	СформироватьОтчетНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		ТабличныйДокумент.Очистить();
		Возврат;
	КонецЕсли;
	
	ПоказатьСкрытьГрафикНеАктуален();
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЭтапПроизводства", ЭтапПроизводства);
	ПараметрыПроцедуры.Вставить("СтатусГрафика", СтатусГрафика);
	ПараметрыПроцедуры.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Диагностика этапа производства""';
			|en = 'Generate the ""Production stage resource chart"" report'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.ДиагностикаЭтапаПроизводства.СформироватьОтчет",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = ОбработчикФормированияОтчета();
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ОбработатьРезультатФормированияОтчетаВФоне(ЭтотОбъект, ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработчикФормированияОтчета()
	
	Возврат "СформироватьОтчетВФонеЗавершение";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьДлительнуюОперацию(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьРезультатФормированияОтчетаВФоне(Форма, Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатФормирования = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатФормирования) = Тип("Структура") Тогда
			
			Если РезультатФормирования.Свойство("ТабличныйДокумент") Тогда
				
				Форма.ТабличныйДокумент = РезультатФормирования.ТабличныйДокумент;
				
				Если РезультатФормирования.Свойство("РасшифровкиАльтернатив") Тогда
					
					Для каждого Расшифровка Из РезультатФормирования.РасшифровкиАльтернатив Цикл
						ПоказатьСкрытьАльтернативы(Расшифровка, Форма.ТабличныйДокумент);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Форма.Элементы.ТабличныйДокумент);
		
	Иначе
		
		ОчиститьТабличныйДокументИСкрытьОтображениеСостояния(Форма);
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличныйДокументИСкрытьОтображениеСостояния(Форма)
	
	ОчиститьТабличныйДокумент(Форма.ТабличныйДокумент);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Форма.Элементы.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТабличныйДокумент(ТабличныйДокумент)
	ТабличныйДокумент.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ОбработчикОжиданияДлительнойОперации, ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	Если ОбработчикОжиданияДлительнойОперации = ОбработчикФормированияОтчета() Тогда
		
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
			Элементы.ТабличныйДокумент,
			"ФормированиеОтчета");
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		
		ОчиститьТабличныйДокументИСкрытьОтображениеСостояния(ЭтотОбъект);
		
	Иначе
		
		ОбработатьРезультатФормированияОтчетаВФоне(ЭтотОбъект, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЛегенду()
	
	МакетОформления = Отчеты.ДиагностикаЭтапаПроизводства.ПолучитьМакет("ДиагностикаЭтапа");
	ОбластьЛегенда = МакетОформления.ПолучитьОбласть("Легенда");
	Легенда.Вывести(ОбластьЛегенда);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьАльтернативы(Расшифровка, ТабличныйДокумент)
	
	ОбластьАльтернативы = ТабличныйДокумент.Область(Расшифровка.ВысотаТаблицы + 1,, Расшифровка.ВысотаТаблицы + Расшифровка.КоличествоАльтернатив * 3);
	ОбластьАльтернативы.Видимость = НЕ ОбластьАльтернативы.Видимость;
	
	ОбластьИсполнитель_Использование = ТабличныйДокумент.Область(Расшифровка.Верх, Расшифровка.Лево, Расшифровка.Верх, Расшифровка.Лево);
	Если ОбластьАльтернативы.Видимость Тогда
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'скрыть альтернативы';
														|en = 'hide alternatives'");
	Иначе
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'показать альтернативы';
														|en = 'show alternatives'");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИспользуемыйВидРЦКлиент(Расшифровка)

	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заменить используемый вид РЦ на ""%1""?';
			|en = 'Replace the used work center type with ""%1""?'"),
		Строка(Расшифровка.ВидРабочегоЦентра));
						
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить вид РЦ';
														|en = 'Change work center type'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьИспользуемыйВидРЦКлиентЗавершение", ЭтотОбъект, Расшифровка);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИспользуемыйВидРЦКлиентЗавершение(РезультатВопроса, Расшифровка) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменаВыполнена = ЗаменитьИспользуемыйВидРЦСервер(
		ЭтапПроизводства,
		Расшифровка.КлючСвязи,
		Расшифровка.ВидРабочегоЦентра);
	
	Если ЗаменаВыполнена Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаменитьИспользуемыйВидРЦСервер(ЭтапПроизводства, КлючСвязи, ВидРабочегоЦентра)
	
	ВыполненоУспешно = Истина;
	
	ЭтапОбъект = ЭтапПроизводства.ПолучитьОбъект();
	
	Если ТипЗнч(КлючСвязи) = Тип("Массив") Тогда
		Для Каждого Ключ Из КлючСвязи Цикл
			ЭтапОбъект.ЗаменитьИспользуемыйВидРЦ(Ключ, ВидРабочегоЦентра);
		КонецЦикла;
	Иначе
		ЭтапОбъект.ЗаменитьИспользуемыйВидРЦ(КлючСвязи, ВидРабочегоЦентра);
	КонецЕсли;
	
	Попытка
		
		Если ЭтапОбъект.Проведен Тогда
			ЭтапОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ЭтапОбъект.Записать();
		КонецЕсли;
		
	Исключение
		
		ВыполненоУспешно = Ложь;
		
	КонецПопытки; 
	
	Возврат ВыполненоУспешно;
	
КонецФункции

&НаСервере
Процедура ПоказатьСкрытьГрафикНеАктуален()
	
	ГрафикАктуален = РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ГрафикЭтапаАктуален(
		ЭтапПроизводства);
	
	Элементы.ГруппаГрафикНеАктуален.Видимость = НЕ ГрафикАктуален
		И СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиагностикуСмежногоЭтапа(Расшифровка)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрКоманды", Расшифровка.ЭтапПроизводства);
	ПараметрыФормы.Вставить("СтатусГрафика", СтатусГрафика);
	
	ОткрытьФорму(
		"Отчет.ДиагностикаЭтапаПроизводства.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		Расшифровка.ЭтапПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура ПланироватьГрафикЭтапа()
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	Этапы = Новый Массив;
	Этапы.Добавить(ЭтапПроизводства);
	ПараметрыПроцедуры.Вставить("Этапы", Этапы);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Планирование графика этапов производства""';
			|en = 'Production stage schedule planning""'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикЭтапов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = ОбработчикПланированияГрафика();
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		РезультатПланирования = РезультатПланирования(ДлительнаяОперация.АдресРезультата);
		НачатьОжиданиеДлительнойОперации = Ложь;
		
		ДлительнаяОперация = Неопределено;
		СформироватьОтчетНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработчикПланированияГрафика()
	
	Возврат "ПланироватьГрафикЭтапаВФонеЗавершение";
	
КонецФункции

&НаКлиенте
Процедура ПланироватьГрафикЭтапаВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПланирования = РезультатПланирования(Результат.АдресРезультата);
	ОповеститьОПланированииГрафикаЭтапа();
	
	ДлительнаяОперация = Неопределено;
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПланирования(АдресРезультата)
	
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПланированииГрафикаЭтапа()
	
	Если РезультатПланирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(РезультатПланирования);
	
	РезультатПланирования = Неопределено;
	
КонецПроцедуры

#КонецОбласти
