#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует отчет.
//
// Параметры:
//  Параметры  - Структура - параметры формирования отчета. Содержит:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - диагностируемый этап.
//		* СтатусГрафика - Число - статус диагностируемого графика.
//		* ТабличныйДокумент - ТабличныйДокумент - табличный документ.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат формирования отчета.
//
Процедура СформироватьОтчет(Параметры, АдресХранилища) Экспорт
	
	ТабличныйДокумент = Параметры.ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	РасшифровкиАльтернатив = Новый Массив;
	
	ДанныеЭтапа = ДанныеЭтапа(Параметры.ЭтапПроизводства, Параметры.СтатусГрафика);
	МакетОформления = Отчеты.ДиагностикаЭтапаПроизводства.ПолучитьМакет("ДиагностикаЭтапа");
	
	Если ДанныеЭтапа <> Неопределено Тогда
		
		ВывестиШапку(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
		
		ВывестиСмежныеЭтапы(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
		ВывестиЛевуюГраницу(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
		
		ВывестиИсполнителей(ТабличныйДокумент, ДанныеЭтапа, МакетОформления, РасшифровкиАльтернатив);
		ВывестиМатериалы(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
		
		ОбвестиГраницыЭтапа(ТабличныйДокумент, ДанныеЭтапа);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("РасшифровкиАльтернатив", РасшифровкиАльтернатив);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#Область КомандыПодменюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений.
//  - Неопределено.
//
Функция ДобавитьКомандуДиагностикаГрафикаЭтапаПроизводства(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиагностикаЭтапаПроизводства)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор      = Метаданные.Отчеты.ДиагностикаЭтапаПроизводства.ПолноеИмя();
		КомандаОтчет.Представление      = НСтр("ru = 'Диагностика графика';
												|en = 'Schedule adjustment'");
		КомандаОтчет.ИмяФормы           = "Отчет.ДиагностикаЭтапаПроизводства.Форма";
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность           = "Обычное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СмежныеЭтапы

Процедура ВывестиСмежныеЭтапы(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	ОбластьЗаголовок = МакетОформления.ПолучитьОбласть("СмежныеЭтапыЗаголовок");
	Если ДанныеЭтапа.РазмещениеКНачалу Тогда
		ОбластьЗаголовок.Область("R1C1").Текст = НСтр("ru = 'Предшественники';
														|en = 'Predecessors stages'");
	Иначе
		ОбластьЗаголовок.Область("R1C1").Текст = НСтр("ru = 'Последователи';
														|en = 'Successors'");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Оформления = ОформленияИсполнители(МакетОформления);
	
	ОбластьЭтап = МакетОформления.ПолучитьОбласть("Этап");
	ОбластьЭтапДанные = МакетОформления.ПолучитьОбласть("ЭтапДанные");
	ОбластьИнтервалЗанят    = МакетОформления.ПолучитьОбласть("ИнтервалЗанят");
	ОбластьИнтервалДоступен = МакетОформления.ПолучитьОбласть("ИнтервалДоступен");
	
	Этапы = СмежныеЭтапы(ДанныеЭтапа);
	Для каждого Этап Из Этапы Цикл
		
		ОбластьЭтап.Параметры.ЭтапПроизводства = Этап.ЭтапПроизводства;
		ОбластьЭтап.Параметры.ПредставлениеЭтапа = Этап.ПредставлениеЭтапа;
		ТабличныйДокумент.Вывести(ОбластьЭтап);
		
		Начало = ДанныеЭтапа.ПолныйИнтервалНачало;
		Пока Начало < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
			
			Если ДанныеЭтапа.РазмещениеКНачалу Тогда
				
				Если Начало < Этап.ОкончаниеЭтапа Тогда
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалЗанят);
				Иначе
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалДоступен);
				КонецЕсли;
				
			Иначе
				
				Окончание = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Начало) - 1;
				Если Окончание >= Этап.НачалоЭтапа И ЗначениеЗаполнено(Этап.НачалоЭтапа) Тогда
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалЗанят);
				Иначе
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалДоступен);
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьЭтапДанные);
			
			Расшифровка = Новый Структура;
			Расшифровка.Вставить("ВидОбласти", "ОткрытьДиагностикуСмежногоЭтапа");
			Расшифровка.Вставить("ЭтапПроизводства", Этап.ЭтапПроизводства);
			ДобавленнаяОбласть.Расшифровка = Расшифровка;
			
			Начало = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Начало);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СмежныеЭтапы(ДанныеЭтапа)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтапов(
		МенеджерВременныхТаблиц,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЭтапа.ЭтапПроизводства),
		Ложь);
	
	ТекстыЗапросовПакета = Новый Массив;
	
	Если ДанныеЭтапа.РазмещениеКНачалу Тогда
		ТекстыЗапросовПакета.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Связи.Этап КАК ЭтапПроизводства
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	ВТСвязиЭтапов КАК Связи
			|ГДЕ
			|	Связи.СледующийЭтап = &ЭтапПроизводства
			|	И Связи.Этап.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)");
	Иначе
		ТекстыЗапросовПакета.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Связи.СледующийЭтап КАК ЭтапПроизводства
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	ВТСвязиЭтапов КАК Связи
			|ГДЕ
			|	Связи.Этап = &ЭтапПроизводства
			|	И Связи.СледующийЭтап.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)");
	КонецЕсли;
	
	ТекстыЗапросовПакета.Добавить(
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ТекстЗапросаВТСрокиВыполненияЭтапов(
			"ВТЭтапы",
			"ЭтапПроизводства"));
	
	ТекстыЗапросовПакета.Добавить(
		"ВЫБРАТЬ
		|	Этапы.ЭтапПроизводства КАК ЭтапПроизводства,
		|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
		|	ЕСТЬNULL(СрокиВыполнения.НачалоЭтапа, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоЭтапа,
		|	ЕСТЬNULL(СрокиВыполнения.ОкончаниеЭтапа, ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеЭтапа
		|ИЗ
		|	ВТЭтапы КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК СрокиВыполнения
		|		ПО Этапы.ЭтапПроизводства = СрокиВыполнения.ЭтапПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоЭтапа,
		|	ОкончаниеЭтапа");
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, ";");
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Этапы.ЭтапПроизводства"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭтапПроизводства", ДанныеЭтапа.ЭтапПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", ДанныеЭтапа.СтатусГрафика);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Исполнители

Процедура ВывестиИсполнителей(ТабличныйДокумент, ДанныеЭтапа, МакетОформления, РасшифровкиАльтернатив)
	
	ВывестиЗаголовокИсполнители(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
	
	Если ЭтоЭтапУББВ(ДанныеЭтапа) Тогда
		
		ВывестиРасписаниеПодразделения(ТабличныйДокумент, ДанныеЭтапа, МакетОформления);
		
	Иначе
		
		Исполнители = ИсполнителиЭтапа(ДанныеЭтапа);
		
		Если Исполнители.Количество() > 0 Тогда
			
			ГрафикИсполнителей = ГрафикИсполнителей(ДанныеЭтапа, Исполнители);
			
			Для каждого Исполнитель Из Исполнители Цикл
				
				Если НЕ Исполнитель.Альтернативный Тогда
					
					ВывестиИсполнителя(ТабличныйДокумент, ДанныеЭтапа, Исполнитель, Исполнители, ГрафикИсполнителей, МакетОформления, РасшифровкиАльтернатив);
					
				КонецЕсли;
			    	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокИсполнители(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	ОбластьЗаголовок = МакетОформления.ПолучитьОбласть("ДоступностьВидовРабочихЦентровЗаголовок");
	
	Если ЭтоЭтапУББВ(ДанныеЭтапа) Тогда
		ЗаголовокИсполнители = НСтр("ru = 'Доступность подразделения';
									|en = 'Shop floor capacity'");
	Иначе
		ЗаголовокИсполнители = НСтр("ru = 'Доступность видов рабочих центров';
									|en = 'Work center types capacity'");
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ЗаголовокИсполнители = ЗаголовокИсполнители;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ВывестиРасписаниеПодразделения(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	// Вывод заголовка.
	ОбластьЗаголовок = МакетОформления.ПолучитьОбласть("Исполнитель");
	ОбластьЗаголовок.Параметры.Исполнитель = ДанныеЭтапа.Подразделение;
	ОбластьЗаголовок.Параметры.Требуется = ПолучитьВремяСтрокой(
		ДанныеЭтапа.ДлительностьЭтапа, ДанныеЭтапа.ЕдиницаИзмеренияДлительностиЭтапа);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Вывод расписания.
	ОбластьИсполнительНетДоступности = МакетОформления.ПолучитьОбласть("ИсполнительДанные");
	ОбластьИсполнительЕстьДоступность = МакетОформления.ПолучитьОбласть("ИсполнительДанныеБезОграниченияДоступности");
	
	Оформления = ОформленияИсполнители(МакетОформления);
	
	Расписание = РасписаниеПодразделения(ДанныеЭтапа);
	
	Начало = ДанныеЭтапа.ПолныйИнтервалНачало;
	Пока Начало < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
		
		Окончание = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Начало);
		ИнтервалЗанят = Ложь;
		
		Если Расписание.Найти(Начало, "ДатаГрафика") = Неопределено Тогда
			
			ОбластьДанные = ОбластьИсполнительНетДоступности;
			
			УстановитьОформлениеОбласти(
				ОбластьДанные.Области.ИсполнительДанные,
				Оформления.ИнтервалНедоступен);
			
		Иначе
			
			ОбластьДанные = ОбластьИсполнительЕстьДоступность;
			
			Если (ДанныеЭтапа.НачалоЭтапа >= Начало И ДанныеЭтапа.НачалоЭтапа < Окончание)
				ИЛИ (Начало >= ДанныеЭтапа.НачалоЭтапа И Начало < ДанныеЭтапа.ОкончаниеЭтапа) Тогда
				
				Оформление = Оформления.ИнтервалЗанятДиагностируемымЭтапом;
				ИнтервалЗанят = Истина;
				
			Иначе
				
				Оформление = Оформления.ИнтервалДоступен;
				
			КонецЕсли;
			
			УстановитьОформлениеОбласти(
				ОбластьДанные.Области.ИсполнительДанныеБезОграниченияДоступности,
				Оформление);
			
		КонецЕсли;
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьДанные);
		
		Если ИнтервалЗанят Тогда
			ЗаполнитьГраницыЭтапа(ДанныеЭтапа, ДобавленнаяОбласть);
		КонецЕсли;
		
	    Начало = Окончание;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РасписаниеПодразделения(ДанныеЭтапа)
	
	Если ДанныеЭтапа.ПроизводствоНаСтороне Тогда
		
		Графики = Новый ТаблицаЗначений;
		Графики.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		Графики.Колонки.Добавить("ГрафикРаботыСсылка", Новый ОписаниеТипов("СправочникСсылка.Календари"));
		
		НоваяСтрока = Графики.Добавить();
		НоваяСтрока.ГрафикРаботы = 1;
		НоваяСтрока.ГрафикРаботыСсылка = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПроизводствоСервер.СоздатьВТГрафикиРаботыПодразделений(
			ДанныеЭтапа.Подразделение, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	&ГрафикРаботы                КАК ГрафикРаботы,
			|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботыСсылка
			|ИЗ
			|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ГрафикРаботы", 1);
		Графики = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Результат = Обработки.ПланированиеГрафикаПроизводства2_2.РасписаниеУББВ(
		Графики, ДанныеЭтапа.ПолныйИнтервалНачало, ДанныеЭтапа.ПолныйИнтервалОкончание);
	
	Результат.Индексы.Добавить("ДатаГрафика");
	
	Возврат Результат;
	
КонецФункции

Функция ИсполнителиЭтапа(ДанныеЭтапа)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.Ссылка КАК ЭтапПроизводства,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.ВидРабочегоЦентра,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.ВремяРаботы,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.ЕдиницаИзмерения,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.КлючСвязи КАК КлючСвязи,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.Использовать,
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.НомерСтроки
	|ПОМЕСТИТЬ ВТИсполнители
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ЭтапПроизводства2_2ВидыРабочихЦентров
	|ГДЕ
	|	ЭтапПроизводства2_2ВидыРабочихЦентров.Ссылка = &ЭтапПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.Ссылка,
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра,
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.ВремяРаботы,
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения,
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров,
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.Использовать,
	|	ЕСТЬNULL(ЭтапПроизводства2_2ВидыРабочихЦентров.НомерСтроки, 0)
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ЭтапПроизводства2_2ВидыРабочихЦентров
	|		ПО ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.Ссылка = ЭтапПроизводства2_2ВидыРабочихЦентров.Ссылка
	|			И ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров = ЭтапПроизводства2_2ВидыРабочихЦентров.КлючСвязи
	|ГДЕ
	|	ЭтапПроизводства2_2АльтернативныеВидыРабочихЦентров.Ссылка = &ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсполнители.ВидРабочегоЦентра,
	|	ВТИсполнители.ВремяРаботы,
	|	ВТИсполнители.ЕдиницаИзмерения,
	|	ВТИсполнители.КлючСвязи,
	|	ВТИсполнители.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы КАК УчитыватьДоступность,
	|	ВТИсполнители.ЭтапПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	НЕ ВТИсполнители.Использовать КАК Альтернативный,
	|	0 КАК ГрафикРаботы
	|ИЗ
	|	ВТИсполнители КАК ВТИсполнители
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТИсполнители.НомерСтроки");
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ДанныеЭтапа.ЭтапПроизводства);
	
	Возврат СвернутьИсполнителей(Запрос.Выполнить().Выгрузить(), Ложь);
	
КонецФункции

Функция ГрафикИсполнителей(ДанныеЭтапа, Исполнители)
	
	Результат = Новый Структура;
	
	Результат.Вставить("РасписаниеББВ", РасписаниеББВ(ДанныеЭтапа, Исполнители));
	Результат.Вставить("ЗагрузкаВРЦБезОграничений", ЗагрузкаВРЦБезОграничений(ДанныеЭтапа, Исполнители));
	Результат.Вставить("ДоступностьВРЦ", ДоступностьВРЦ(ДанныеЭтапа, Исполнители));
	
	Возврат Результат;
	
КонецФункции

Функция РасписаниеББВ(ДанныеЭтапа, Исполнители)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсполнителиЭтапов", Исполнители);
	Параметры.Вставить("РасписаниеББВ", Неопределено);
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПрочитатьРасписаниеББВ(
		Параметры,
		ДанныеЭтапа.ПолныйИнтервалНачало,
		ДанныеЭтапа.ПолныйИнтервалОкончание);
	
	Возврат Параметры.РасписаниеББВ;
	
КонецФункции

Функция ЗагрузкаВРЦБезОграничений(ДанныеЭтапа, Исполнители)
	
	ВРЦБезОграничений = Новый Массив;
	Для каждого Исполнитель Из Исполнители Цикл
		Если НЕ Исполнитель.УчитыватьДоступность Тогда
			ВРЦБезОграничений.Добавить(Исполнитель.ВидРабочегоЦентра);
		КонецЕсли;
	КонецЦикла;
	
	Если ВРЦБезОграничений.Количество() > 0 Тогда
		
		Если ДанныеЭтапа.СтатусГрафика = СтатусРабочийГрафик() Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра,
			|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала,
			|	СУММА(ВЫБОР
			|			КОГДА ДоступностьВидовРабочихЦентровОбороты.Регистратор = &ЭтапПроизводства
			|				ТОГДА ДоступностьВидовРабочихЦентровОбороты.ЗанятоОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ЗанятоТекущим
			|ИЗ
			|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			ВидРабочегоЦентра В (&ВидыРабочихЦентров)
			|				И (ДатаИнтервала МЕЖДУ &Начало И &Окончание)) КАК ДоступностьВидовРабочихЦентровОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра,
			|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала";
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПланированиеЗагрузкиВидовРабочихЦентров.ВидРабочегоЦентра,
			|	ПланированиеЗагрузкиВидовРабочихЦентров.ДатаИнтервала,
			|	СУММА(ВЫБОР
			|			КОГДА ПланированиеЗагрузкиВидовРабочихЦентров.ЭтапПроизводства = &ЭтапПроизводства
			|				ТОГДА ПланированиеЗагрузкиВидовРабочихЦентров.Занято
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ЗанятоТекущим
			|ИЗ
			|	РегистрСведений.ПланированиеЗагрузкиВидовРабочихЦентров КАК ПланированиеЗагрузкиВидовРабочихЦентров
			|ГДЕ
			|	ПланированиеЗагрузкиВидовРабочихЦентров.СтатусГрафика = &СтатусГрафика
			|	И ПланированиеЗагрузкиВидовРабочихЦентров.ВидРабочегоЦентра В(&ВидыРабочихЦентров)
			|	И ПланированиеЗагрузкиВидовРабочихЦентров.ДатаИнтервала МЕЖДУ &Начало И &Окончание
			|
			|СГРУППИРОВАТЬ ПО
			|	ПланированиеЗагрузкиВидовРабочихЦентров.ВидРабочегоЦентра,
			|	ПланированиеЗагрузкиВидовРабочихЦентров.ДатаИнтервала";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("СтатусГрафика", ДанныеЭтапа.СтатусГрафика);
		Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВРЦБезОграничений);
		Запрос.УстановитьПараметр("Начало", ДанныеЭтапа.ПолныйИнтервалНачало);
		Запрос.УстановитьПараметр("Окончание", ДанныеЭтапа.ПолныйИнтервалОкончание);
		Запрос.УстановитьПараметр("ЭтапПроизводства", ДанныеЭтапа.ЭтапПроизводства);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступностьВРЦ(ДанныеЭтапа, Исполнители)
	
	МассивВРЦ = Новый Массив;
	Для каждого Исполнитель Из Исполнители Цикл
		Если Исполнитель.УчитыватьДоступность Тогда
			МассивВРЦ.Добавить(Исполнитель.ВидРабочегоЦентра);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВРЦ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжение", ДанныеЭтапа.Распоряжение);
	Запрос.УстановитьПараметр("ЭтапПроизводства", ДанныеЭтапа.ЭтапПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", ДанныеЭтапа.СтатусГрафика);
	
	МассивЭтапов = Новый Массив;
	СоздатьВТЗагрузкаРаспоряженияИЗаполнитьЭтапыИсключения(ДанныеЭтапа, Запрос, МассивЭтапов);
	
	Параметры = Новый Структура("Распоряжение, Очередь, ПриоритетНомер, ПодразделениеНомер");
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеЭтапа);
	Параметры.Вставить("РазмещениеКНачалу", Ложь);
	Параметры.Вставить("ОтсутствиеПрочихЗаказов", Ложь);
	Параметры.Вставить("ОтменитьРучныеИзмененияГрафика", Ложь);
	
	Обработки.ПланированиеГрафикаПроизводства2_2.СоздатьВТДоступностьВидовРЦ(
		МенеджерВременныхТаблиц,
		"ВТДоступность",
		МассивВРЦ,
		МассивЭтапов,
		ДанныеЭтапа.ПолныйИнтервалНачало, 
		ДанныеЭтапа.ПолныйИнтервалОкончание,
		Параметры);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТДоступность.Исполнитель КАК ВидРабочегоЦентра,
	|	ВТДоступность.ДатаИнтервала,
	|	ЕСТЬNULL(ВТЗагрузкаРаспоряжения.ЗанятоТекущим, 0) КАК ЗанятоТекущим,
	|	ВТДоступность.КоличествоРасход + ЕСТЬNULL(ВТЗагрузкаРаспоряжения.ЗанятоПрочими, 0) КАК ЗанятоПрочими,
	|	ВТДоступность.КоличествоПриход - (ЕСТЬNULL(ВТЗагрузкаРаспоряжения.ЗанятоТекущим, 0) + ВТДоступность.КоличествоРасход + ЕСТЬNULL(ВТЗагрузкаРаспоряжения.ЗанятоПрочими, 0)) КАК СвободноСРезервом,
	|	ВТДоступность.КоличествоПриход КАК ОбщаяДоступность,
	|	ВЫРАЗИТЬ(&Резерв КАК ЧИСЛО(15, 0)) КАК РезервОбщий,
	|	&ДоступноДляТекущегоСРезервом КАК ДоступноДляТекущегоСРезервом,
	|	ВЫБОР
	|		КОГДА НЕ ВТДоступность.РезервДоступности = 0
	|			ТОГДА ВЫБОР
	|					КОГДА &Резерв <= &ДоступноДляТекущегоСРезервом
	|						ТОГДА ВЫРАЗИТЬ(&Резерв КАК ЧИСЛО(15, 0))
	|					ИНАЧЕ &ДоступноДляТекущегоСРезервом
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервДоступноДляТекущего
	
	|ИЗ
	|	ВТДоступность КАК ВТДоступность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗагрузкаРаспоряжения КАК ВТЗагрузкаРаспоряжения
	|		ПО ВТДоступность.Исполнитель = ВТЗагрузкаРаспоряжения.ВидРабочегоЦентра
	|			И ВТДоступность.ДатаИнтервала = ВТЗагрузкаРаспоряжения.ДатаИнтервала";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДоступноДляТекущегоСРезервом",
		"ВТДоступность.КоличествоПриход - (ВТДоступность.КоличествоРасход + ЕСТЬNULL(ВТЗагрузкаРаспоряжения.ЗанятоПрочими, 0))");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Резерв",
		"ВТДоступность.КоличествоПриход * (ВТДоступность.РезервДоступности / 100)");
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьВТЗагрузкаРаспоряженияИЗаполнитьЭтапыИсключения(ДанныеЭтапа, Запрос, ЭтапыИсключения)
	
	Если ДанныеЭтапа.СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала,
		|	СУММА(ДоступностьВидовРабочихЦентровОбороты.ЗанятоОборот) КАК ЗанятоТекущим,
		|	СУММА(0) КАК ЗанятоПрочими
		|ПОМЕСТИТЬ ВТЗагрузкаРаспоряжения
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты(, , Регистратор, ) КАК ДоступностьВидовРабочихЦентровОбороты
		|ГДЕ
		|	ДоступностьВидовРабочихЦентровОбороты.Регистратор = &ЭтапПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра,
		|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала";
		
		Запрос.Выполнить();
		
		ЭтапыИсключения.Добавить(ДанныеЭтапа.ЭтапПроизводства);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланированиеЗагрузкиВидовРабочихЦентров.ВидРабочегоЦентра,
		|	ПланированиеЗагрузкиВидовРабочихЦентров.ДатаИнтервала,
		|	ПланированиеЗагрузкиВидовРабочихЦентров.ЭтапПроизводства,
		|	ПланированиеЗагрузкиВидовРабочихЦентров.Занято
		|ПОМЕСТИТЬ ВТРезультатыПланирования
		|ИЗ
		|	РегистрСведений.ПланированиеЗагрузкиВидовРабочихЦентров КАК ПланированиеЗагрузкиВидовРабочихЦентров
		|ГДЕ
		|	ПланированиеЗагрузкиВидовРабочихЦентров.СтатусГрафика = &СтатусГрафика
		|	И ПланированиеЗагрузкиВидовРабочихЦентров.Распоряжение = &Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРезультатыПланирования.ВидРабочегоЦентра,
		|	ВТРезультатыПланирования.ДатаИнтервала,
		|	СУММА(ВЫБОР
		|			КОГДА ВТРезультатыПланирования.ЭтапПроизводства = &ЭтапПроизводства
		|				ТОГДА ВТРезультатыПланирования.Занято
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗанятоТекущим,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ВТРезультатыПланирования.ЭтапПроизводства = &ЭтапПроизводства
		|				ТОГДА ВТРезультатыПланирования.Занято
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗанятоПрочими
		|ПОМЕСТИТЬ ВТЗагрузкаРаспоряжения
		|ИЗ
		|	ВТРезультатыПланирования КАК ВТРезультатыПланирования
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРезультатыПланирования.ВидРабочегоЦентра,
		|	ВТРезультатыПланирования.ДатаИнтервала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТРезультатыПланирования.ЭтапПроизводства
		|ИЗ
		|	ВТРезультатыПланирования КАК ВТРезультатыПланирования";
		
		ЭтапыИсключения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭтапПроизводства");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИсполнителя(ТабличныйДокумент, ДанныеЭтапа, Исполнитель, Исполнители, ГрафикИсполнителей, МакетОформления, РасшифровкиАльтернатив)
	
	ВывестиЗаголовокИсполнитель(ТабличныйДокумент, Исполнитель, Исполнители, МакетОформления, РасшифровкиАльтернатив);
	
	Если Исполнитель.УчитыватьДоступность Тогда
		
		ВывестиДоступностьИсполнительСОграничениями(
			ТабличныйДокумент, ДанныеЭтапа, Исполнитель, ГрафикИсполнителей, МакетОформления);
		
	Иначе
		
		ВывестиДоступностьИсполнительБезОграничений(
			ТабличныйДокумент, ДанныеЭтапа, Исполнитель, ГрафикИсполнителей, МакетОформления);
			
	КонецЕсли;
	
	АльтернативныеИсполнители = АльтернативныеИсполнители(Исполнитель, Исполнители);
	Если НЕ АльтернативныеИсполнители = Неопределено Тогда
		
		ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
		Для каждого АльтернативныйИсполнитель Из АльтернативныеИсполнители Цикл
			
			ВывестиИсполнителя(
				ТабличныйДокумент,
				ДанныеЭтапа,
				АльтернативныйИсполнитель,
				Исполнители,
				ГрафикИсполнителей,
				МакетОформления,
				РасшифровкиАльтернатив);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокИсполнитель(ТабличныйДокумент, Исполнитель, Исполнители, МакетОформления, РасшифровкиАльтернатив)
	
	АльтернативныеИсполнители = АльтернативныеИсполнители(Исполнитель, Исполнители);
	
	ВыводитьИспользование = Исполнитель.Альтернативный
		ИЛИ (НЕ АльтернативныеИсполнители = Неопределено
		И НЕ АльтернативныеИсполнители.Количество() = 0);
	
	Если ВыводитьИспользование Тогда
		
		Если НЕ Исполнитель.Альтернативный Тогда
			
			ОбластьИсполнитель = МакетОформления.ПолучитьОбласть("Исполнитель_Исполнитель");
			ОбластьИспользование = МакетОформления.ПолучитьОбласть("Исполнитель_Использование");
			ОбластьТребуется = МакетОформления.ПолучитьОбласть("Исполнитель_Требуется");
			
		Иначе
			
			ОбластьИсполнитель = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Исполнитель");
			ОбластьИспользование = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Использование");
			ОбластьТребуется = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Требуется");
		
		КонецЕсли;
		
	Иначе
		
		ОбластьИсполнитель = МакетОформления.ПолучитьОбласть("Исполнитель");
		ОбластьТребуется = ОбластьИсполнитель;
		
	КонецЕсли;
	
	ОбластьИсполнитель.Параметры.Исполнитель = Исполнитель.ВидРабочегоЦентра;
	ВремяВСекундах = ПолучитьВремяВСекундах(Исполнитель.ВремяРаботы, Исполнитель.ЕдиницаИзмерения);
	ОбластьТребуется.Параметры.Требуется = ПолучитьВремяСтрокой(ВремяВСекундах);
	
	Если ВыводитьИспользование Тогда
		
		ТабличныйДокумент.Вывести(ОбластьИсполнитель);
		
		Если НЕ Исполнитель.Альтернативный Тогда
			ОбластьИспользование.Области.Исполнитель_Использование.Текст = НСтр("ru = 'показать альтернативы';
																				|en = 'show alternatives'");
			ОбластьИспользование.Области.Исполнитель_Использование.Гиперссылка = Истина;
			ОбластьИспользование.Области.Исполнитель_Использование.Шрифт = Новый Шрифт(,,,, Истина);
		Иначе
			ОбластьИспользование.Области.ИсполнительАльтернативный_Использование.Текст = НСтр("ru = 'использовать';
																								|en = 'use'");
			ОбластьИспользование.Области.ИсполнительАльтернативный_Использование.Гиперссылка = Истина;
			ОбластьИспользование.Области.ИсполнительАльтернативный_Использование.Шрифт = Новый Шрифт(,,,, Истина);
		КонецЕсли;
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИспользование);
		
		Если НЕ Исполнитель.Альтернативный Тогда
			РасшифровкаИсполнитель = Новый Структура;
			РасшифровкаИсполнитель.Вставить("ВидОбласти", "УправлениеВидимостьюАльтернативныхВидовРЦ");
			РасшифровкаИсполнитель.Вставить("ВидРабочегоЦентра", Исполнитель.ВидРабочегоЦентра);
			РасшифровкаИсполнитель.Вставить("КлючСвязи", Исполнитель.КлючСвязи);
			РасшифровкаИсполнитель.Вставить("КоличествоАльтернатив", АльтернативныеИсполнители.Количество());
			РасшифровкаИсполнитель.Вставить("ВысотаТаблицы", ТабличныйДокумент.ВысотаТаблицы);
			РасшифровкаИсполнитель.Вставить("Лево", ДобавленнаяОбласть.Лево);
			РасшифровкаИсполнитель.Вставить("Верх", ДобавленнаяОбласть.Верх);
			ДобавленнаяОбласть.Расшифровка = РасшифровкаИсполнитель;
			
			РасшифровкиАльтернатив.Добавить(РасшифровкаИсполнитель);
		Иначе
			РасшифровкаАльтернативныйИсполнитель = Новый Структура;
			РасшифровкаАльтернативныйИсполнитель.Вставить("ВидОбласти", "ИспользоватьВидРЦ");
			РасшифровкаАльтернативныйИсполнитель.Вставить("ВидРабочегоЦентра", Исполнитель.ВидРабочегоЦентра);
			РасшифровкаАльтернативныйИсполнитель.Вставить("КлючСвязи", ?(ЗначениеЗаполнено(Исполнитель.МассивКлючей),
																							Исполнитель.МассивКлючей,
																							Исполнитель.КлючСвязи));
			ДобавленнаяОбласть.Расшифровка = РасшифровкаАльтернативныйИсполнитель;
		КонецЕсли;
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьТребуется);
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьИсполнитель);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АльтернативныеИсполнители(Исполнитель, Исполнители)
	
	Результат = Исполнители.СкопироватьКолонки();
	
	Для Каждого Ключ Из Исполнитель.МассивКлючей Цикл
		Если НЕ Исполнитель.Альтернативный Тогда
			СтруктураПоиска = Новый Структура("КлючСвязи, Альтернативный", Ключ, Истина);
			РезультатПоиска = Исполнители.НайтиСтроки(СтруктураПоиска);
			Для Каждого ВРЦ Из РезультатПоиска Цикл
				Строка = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, ВРЦ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СвернутьИсполнителей(Результат, Истина);
	
КонецФункции

Процедура ВывестиДоступностьИсполнительСОграничениями(ТабличныйДокумент, ДанныеЭтапа, Исполнитель, ГрафикИсполнителей, МакетОформления)
	
	ОбластьИсполнитель = МакетОформления.ПолучитьОбласть("ИсполнительДанные");
	Оформления = ОформленияИсполнители(МакетОформления);
	
	СтруктураПоиска = Новый Структура("ВидРабочегоЦентра, ДатаИнтервала", Исполнитель.ВидРабочегоЦентра);
	ПустыеЗначения = Новый Структура("ОбщаяДоступность, ДоступноДляТекущего, ЗанятоТекущим", "", "", "");
	
	ДатаИнтервала = ДанныеЭтапа.ПолныйИнтервалНачало;
	Пока ДатаИнтервала < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
		
		СтруктураПоиска.ДатаИнтервала = ДатаИнтервала;
		НайденныеСтроки = ГрафикИсполнителей.ДоступностьВРЦ.НайтиСтроки(СтруктураПоиска);
		
		ИнтервалЗанят = Ложь;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ОбластьИсполнитель.Параметры, ПустыеЗначения);
			Оформление = Оформления.ИнтервалНедоступен;
			
		Иначе
			
			ЗначенияЗаполнения = НайденныеСтроки[0];
			
			Если ЗначенияЗаполнения.РезервОбщий > 0 Тогда
				
				ДоступноБезРезерва = ЗначенияЗаполнения.ОбщаяДоступность - ЗначенияЗаполнения.РезервОбщий;
				ОбщаяДоступность = ПолучитьВремяСтрокой(ДоступноБезРезерва)
					+ " (+"
					+ ПолучитьВремяСтрокой(ЗначенияЗаполнения.РезервОбщий)
					+ ")";
				
			Иначе
				ОбщаяДоступность = ПолучитьВремяСтрокой(ЗначенияЗаполнения.ОбщаяДоступность);
			КонецЕсли;
			
			Если ЗначенияЗаполнения.РезервДоступноДляТекущего > 0 Тогда
				
				ДоступноДляТекущегоБезРезерва = ЗначенияЗаполнения.ДоступноДляТекущегоСРезервом
					- ЗначенияЗаполнения.РезервДоступноДляТекущего;
				ДоступноДляТекущего = ПолучитьВремяСтрокой(ДоступноДляТекущегоБезРезерва)
					+ " (+"
					+ ПолучитьВремяСтрокой(ЗначенияЗаполнения.РезервДоступноДляТекущего)
					+ ")";
					
			Иначе
				ДоступноДляТекущего = ПолучитьВремяСтрокой(ЗначенияЗаполнения.ДоступноДляТекущегоСРезервом);
			КонецЕсли;
			
			ОбластьИсполнитель.Параметры.ОбщаяДоступность = ОбщаяДоступность;
			ОбластьИсполнитель.Параметры.ДоступноДляТекущего = ДоступноДляТекущего;
			ОбластьИсполнитель.Параметры.ЗанятоТекущим = ПолучитьВремяСтрокой(ЗначенияЗаполнения.ЗанятоТекущим);
			
			Если ЗначенияЗаполнения.СвободноСРезервом < 0 Тогда
				Оформление = Оформления.ИнтервалПерегружен;
			ИначеЕсли ЗначенияЗаполнения.ЗанятоТекущим > 0 Тогда
				Оформление = Оформления.ИнтервалЗанятДиагностируемымЭтапом;
			ИначеЕсли ЗначенияЗаполнения.ЗанятоПрочими > 0 И ЗначенияЗаполнения.СвободноСРезервом = 0 Тогда
				Оформление = Оформления.ИнтервалЗанят;
			ИначеЕсли ЗначенияЗаполнения.ЗанятоПрочими > 0 Тогда
				Оформление = Оформления.ИнтервалЧастичноДоступен;
			ИначеЕсли ЗначенияЗаполнения.ОбщаяДоступность = 0 Тогда
				Оформление = Оформления.ИнтервалНедоступен;
			Иначе
				Оформление = Оформления.ИнтервалДоступен;
			КонецЕсли;
			
			Если ЗначенияЗаполнения.ЗанятоТекущим > 0 Тогда
				ИнтервалЗанят = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьОформлениеОбласти(ОбластьИсполнитель.Области.ИсполнительДанные, Оформление);
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИсполнитель);
		
		Если ИнтервалЗанят Тогда
			ЗаполнитьГраницыЭтапа(ДанныеЭтапа, ДобавленнаяОбласть);
		КонецЕсли;
		
		ДатаИнтервала = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, ДатаИнтервала);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДоступностьИсполнительБезОграничений(ТабличныйДокумент, ДанныеЭтапа, Исполнитель, ГрафикИсполнителей, МакетОформления)
	
	ОбластьИсполнительНетДоступности = МакетОформления.ПолучитьОбласть("ИсполнительДанные");
	ОбластьИсполнительЕстьДоступность = МакетОформления.ПолучитьОбласть("ИсполнительДанныеБезОграниченияДоступности");
	Оформления = ОформленияИсполнители(МакетОформления);
	
	Доступность = ГрафикИсполнителей.РасписаниеББВ;
	СтруктураПоискаДоступность = Новый Структура;
	СтруктураПоискаДоступность.Вставить("ГрафикРаботы", Исполнитель.ГрафикРаботы);
	
	Загрузка = ГрафикИсполнителей.ЗагрузкаВРЦБезОграничений;
	СтруктураПоискаЗагрузка = Новый Структура("ВидРабочегоЦентра, ДатаИнтервала");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаЗагрузка, Исполнитель);
	
	ПустыеЗначения = Новый Структура("ЗанятоТекущим", "");
	
	ДатаИнтервала = ДанныеЭтапа.ПолныйИнтервалНачало;
	Пока ДатаИнтервала < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
		
		СтруктураПоискаДоступность.Вставить("ДатаИнтервала", ДатаИнтервала);
		НайденныеСтроки = Доступность.НайтиСтроки(СтруктураПоискаДоступность);
		
		ИнтервалЗанят = Ложь;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОбластьИсполнитель = ОбластьИсполнительНетДоступности;
			УстановитьОформлениеОбласти(
				ОбластьИсполнитель.Области.ИсполнительДанные,
				Оформления.ИнтервалНедоступен);
			
		Иначе
			
			ОбластьИсполнитель = ОбластьИсполнительЕстьДоступность;
			
			СтруктураПоискаЗагрузка.ДатаИнтервала = ДатаИнтервала;
			НайденныеСтрокиЗагрузка = Загрузка.НайтиСтроки(СтруктураПоискаЗагрузка);
			
			Если НайденныеСтрокиЗагрузка.Количество() = 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ОбластьИсполнитель.Параметры, ПустыеЗначения);
				Оформление = Оформления.ИнтервалДоступен;
				
			Иначе
				
				ЗначенияЗаполнения = НайденныеСтрокиЗагрузка[0];
				ОбластьИсполнитель.Параметры.ЗанятоТекущим = ПолучитьВремяСтрокой(ЗначенияЗаполнения.ЗанятоТекущим);
				
				Если ЗначенияЗаполнения.ЗанятоТекущим > 0 Тогда
					Оформление = Оформления.ИнтервалЗанятДиагностируемымЭтапом;
					ИнтервалЗанят = Истина;
				Иначе
					Оформление = Оформления.ИнтервалДоступен;
				КонецЕсли;
				
			КонецЕсли;
			
			УстановитьОформлениеОбласти(
				ОбластьИсполнитель.Области.ИсполнительДанныеБезОграниченияДоступности,
				Оформление);
			
		КонецЕсли;
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИсполнитель);
		
		Если ИнтервалЗанят Тогда
			ЗаполнитьГраницыЭтапа(ДанныеЭтапа, ДобавленнаяОбласть);
		КонецЕсли;
		
		ДатаИнтервала = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, ДатаИнтервала);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОформленияИсполнители(МакетОформления)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИнтервалЗанятДиагностируемымЭтапом",
		МакетОформления.ПолучитьОбласть("ИнтервалЗанятДиагностируемымЭтапом").Области.ИнтервалЗанятДиагностируемымЭтапом);
		
	Результат.Вставить("ИнтервалЗанят",
		МакетОформления.ПолучитьОбласть("ИнтервалЗанят").Области.ИнтервалЗанят);
	
	Результат.Вставить("ИнтервалНедоступен",
		МакетОформления.ПолучитьОбласть("ИнтервалНедоступен").Области.ИнтервалНедоступен);
	
	Результат.Вставить("ИнтервалДоступен",
		МакетОформления.ПолучитьОбласть("ИнтервалДоступен").Области.ИнтервалДоступен);
	
	Результат.Вставить("ИнтервалЧастичноДоступен",
		МакетОформления.ПолучитьОбласть("ИнтервалЧастичноДоступен").Области.ИнтервалЧастичноДоступен);
	
	Результат.Вставить("ИнтервалПерегружен",
		МакетОформления.ПолучитьОбласть("ИнтервалПерегружен").Области.ИнтервалПерегружен);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьГраницыЭтапа(ДанныеЭтапа, ДобавленнаяОбласть)
	
	Если ЗначениеЗаполнено(ДанныеЭтапа.ЛеваяГраницаЭтапа) Тогда
		
		ДанныеЭтапа.ЛеваяГраницаЭтапа = Мин(
			ДанныеЭтапа.ЛеваяГраницаЭтапа,
			ДобавленнаяОбласть.Лево);
			
	Иначе
		
		ДанныеЭтапа.ЛеваяГраницаЭтапа = ДобавленнаяОбласть.Лево;
		
	КонецЕсли;
	
	ДанныеЭтапа.ПраваяГраницаЭтапа = Макс(
		ДанныеЭтапа.ПраваяГраницаЭтапа,
		ДобавленнаяОбласть.Право);
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

Процедура ВывестиМатериалы(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	Материалы = МатериалыЭтапа(ДанныеЭтапа);
	Если Материалы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОформления.ПолучитьОбласть("МатериалыЗаголовок");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Оформления = ОформленияИсполнители(МакетОформления);
	
	ОбластьМатериал       = МакетОформления.ПолучитьОбласть("Материал");
	ОбластьМатериалДанные = МакетОформления.ПолучитьОбласть("МатериалДанные");
	
	Для каждого Строка Из Материалы Цикл
		
		ОбластьМатериал.Параметры.Материал            = ПредставлениеМатериала(Строка);
		ОбластьМатериал.Параметры.РасшифровкаМатериал = Строка.Номенклатура;
		ОбластьМатериал.Параметры.Требуется           = Строка.Количество;
		
		ТабличныйДокумент.Вывести(ОбластьМатериал);
		
		Начало = ДанныеЭтапа.ПолныйИнтервалНачало;
		Пока Начало < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
			
			Если Начало < Строка.ДатаОбеспечения Тогда
				
				УстановитьОформлениеОбласти(ОбластьМатериалДанные.Области.МатериалДанные, Оформления.ИнтервалЗанят);
				
			Иначе
				
				УстановитьОформлениеОбласти(ОбластьМатериалДанные.Области.МатериалДанные, Оформления.ИнтервалДоступен);
				
			КонецЕсли;
			
			ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьМатериалДанные);
			
			Начало = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Начало);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МатериалыЭтапа(ДанныеЭтапа)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	УправлениеПроизводством.СоздатьВТОграниченияГрафикаПроизводстваПоМатериалам(
		МенеджерВременныхТаблиц,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЭтапа.ЭтапПроизводства),
		Истина,
		Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Материалы.Номенклатура                 КАК Номенклатура,
	|	Материалы.Номенклатура.Представление   КАК НоменклатураПредставление,
	|	Материалы.Характеристика               КАК Характеристика,
	|	Материалы.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ДатыОбеспечения.ДатаОбеспечения        КАК ДатаОбеспечения,
	|	&ТекстЗапросаЕдиницаИзмерения          КАК ЕдиницаИзмерения,
	|	&ТекстЗапросаПредставление             КАК ЕдиницаИзмеренияПредставление,
	|	СУММА(ВЫБОР
	|			КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|				ТОГДА Материалы.Количество
	|			ИНАЧЕ Материалы.КоличествоУпаковок
	|		КОНЕЦ)                                 КАК Количество
	|ИЗ
	|	ВТОграниченияГрафикаПроизводстваПоМатериалам КАК ДатыОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
	|		ПО ДатыОбеспечения.ЭтапПроизводства = Материалы.Ссылка
	|			И ДатыОбеспечения.Номенклатура = Материалы.Номенклатура
	|			И ДатыОбеспечения.Характеристика = Материалы.Характеристика
	|			И НЕ Материалы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Материалы.Номенклатура,
	|	Материалы.Характеристика,
	|	Материалы.Номенклатура.Представление,
	|	Материалы.Характеристика.Представление,
	|	ДатыОбеспечения.ДатаОбеспечения,
	|	&ТекстЗапросаЕдиницаИзмерения,
	|	&ТекстЗапросаПредставление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбеспечения УБЫВ,
	|	Номенклатура");
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"Материалы.Упаковка",
			"Материалы.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаПредставление",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Материалы.Упаковка",
			"Материалы.Номенклатура"));
	
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Неопределено, РезультатЗапроса.Выгрузить());
	
КонецФункции

Функция ПредставлениеМатериала(ЗначенияЗаполнения)
	
	Результат = ЗначенияЗаполнения.НоменклатураПредставление;
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.ХарактеристикаПредставление) Тогда
		Результат = Результат + ", " + ЗначенияЗаполнения.ХарактеристикаПредставление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.ЕдиницаИзмеренияПредставление) Тогда
		Результат = Результат + ", " + ЗначенияЗаполнения.ЕдиницаИзмеренияПредставление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеОграничения

Процедура ВывестиЛевуюГраницу(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПланироватьНеРанее) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОформления.ПолучитьОбласть("ПланироватьНеРанее");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ФорматДатыГрафика = УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	ТекстПланироватьНеРанее = Формат(ДанныеЭтапа.ПланироватьНеРанее, ФорматДатыГрафика);
	
	ОбластьЭтап = МакетОформления.ПолучитьОбласть("Этап");
	ОбластьЭтап.Параметры.ЭтапПроизводства   = ДанныеЭтапа.ЭтапПроизводства;
	ОбластьЭтап.Параметры.ПредставлениеЭтапа = ТекстПланироватьНеРанее;
	ТабличныйДокумент.Вывести(ОбластьЭтап);
	
	Оформления = ОформленияИсполнители(МакетОформления);
	ОбластьЭтапДанные = МакетОформления.ПолучитьОбласть("ЭтапДанные");
	
	Начало = ДанныеЭтапа.ПолныйИнтервалНачало;
	Пока Начало < ДанныеЭтапа.ПолныйИнтервалОкончание Цикл
		
		Если Начало < ДанныеЭтапа.ПланироватьНеРанее Тогда
			УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалЗанят);
		Иначе
			УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, Оформления.ИнтервалДоступен);
		КонецЕсли;
		
		ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьЭтапДанные);
		Начало = ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Начало);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ДанныеЭтапа(ЭтапПроизводства, СтатусГрафика)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГрафикПроизводства.Распоряжение КАК Распоряжение,
		|	ГрафикПроизводства.ЭтапПроизводства КАК ЭтапПроизводства,
		|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
		|	ГрафикПроизводства.ЭтапПроизводства.Подразделение КАК Подразделение,
		|	ГрафикПроизводства.ЭтапПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ГрафикПроизводства.ЭтапПроизводства.ПланироватьНеРанее) = ТИП(ДАТА)
		|			ТОГДА ГрафикПроизводства.ЭтапПроизводства.ПланироватьНеРанее
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ПланироватьНеРанее,
		|	ГрафикПроизводства.НачалоЭтапа КАК НачалоЭтапа,
		|	ГрафикПроизводства.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
		|	ГрафикПроизводства.ЭтапПроизводства.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ГрафикПроизводства.ЭтапПроизводства.Номер КАК НомерЭтапа,
		|	ГрафикПроизводства.ЭтапПроизводства.ПланироватьРаботуВидовРабочихЦентров КАК ПланироватьРаботуВидовРабочихЦентров,
		|	ГрафикПроизводства.ЭтапПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ГрафикПроизводства.Распоряжение.Очередь КАК Очередь,
		|	ГрафикПроизводства.Распоряжение.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
		|	ГрафикПроизводства.Распоряжение.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеНомер,
		|	ГрафикПроизводства.ЭтапПроизводства.ДлительностьЭтапа КАК ДлительностьЭтапа,
		|	ВЫБОР
		|		КОГДА ГрафикПроизводства.ЭтапПроизводства.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
		|			ТОГДА &ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ
		|		ИНАЧЕ ГрафикПроизводства.ЭтапПроизводства.ЕдиницаИзмеренияДлительностиЭтапа
		|	КОНЕЦ КАК ЕдиницаИзмеренияДлительностиЭтапа,
		|	ВЫБОР
		|		КОГДА ГрафикПроизводства.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РазмещениеКНачалу,
		|	&СтатусГрафика КАК СтатусГрафика
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|ГДЕ
		|	ГрафикПроизводства.ЭтапПроизводства = &ЭтапПроизводства
		|	И ГрафикПроизводства.СтатусГрафика = &СтатусГрафика";
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ГрафикПроизводства.ЭтапПроизводства"));
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
	Запрос.УстановитьПараметр("ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ",
		Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 1 Тогда
		
		ЗначенияЗаполнения = РезультатЗапроса[0];
		
		Результат = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Результат.Вставить(Колонка.Имя, ЗначенияЗаполнения[Колонка.Имя]);
		КонецЦикла;
		
		Если ЭтоЭтапУББВ(Результат) Тогда
			
			Результат.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День;
			
		КонецЕсли;
		
		Результат.Вставить("ПолныйИнтервалНачало", '00010101');
		Результат.Вставить("ПолныйИнтервалОкончание", '00010101');
		
		Результат.Вставить("ЛеваяГраницаЭтапа", 0);
		Результат.Вставить("ПраваяГраницаЭтапа", 0);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиШапку(ТабличныйДокумент, ДанныеЭтапа, МакетОформления)
	
	Начало = ДанныеЭтапа.НачалоЭтапа;
	Окончание = ДанныеЭтапа.ОкончаниеЭтапа;
	
	ИнтервалПланирования = ДанныеЭтапа.ИнтервалПланирования;
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалЧас");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалЧасЗаголовок");
		
		СтруктураПараметры = Новый Структура("ЧасНачалоДня");
		
		ПолныйИнтервалНачало = НачалоДня(Начало) - 86400;
		ПолныйИнтервалОкончание = КонецДня(Окончание) + 86400;
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалДень");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалДеньЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоНедели, День1, День2,
			|День3, День4, День5, День6, День7");
		
		ПолныйИнтервалНачало = НачалоНедели(Начало) - (86400 * 7);
		ПолныйИнтервалОкончание = КонецНедели(Окончание) + (86400 * 7);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалНеделя");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалНеделяЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоНедели");
		
		ПолныйИнтервалНачало = НачалоНедели(Начало) - (86400 * 7);
		ПолныйИнтервалОкончание = КонецНедели(Окончание) + (86400 * 7);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалМесяц");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалМесяцЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоМесяца");
		
		ПолныйИнтервалНачало = НачалоМесяца(НачалоМесяца(Начало) - 1);
		ПолныйИнтервалОкончание = КонецМесяца(КонецМесяца(Окончание) + 1);
		
	КонецЕсли;
	
	ОбластьИнтервалЗаголовок.Параметры.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
	ОбластьИнтервалЗаголовок.Параметры.ПредставлениеЭтапа = ДанныеЭтапа.ПредставлениеЭтапа;
	
	ТабличныйДокумент.Вывести(ОбластьИнтервалЗаголовок);
	
	ТекущийИнтервал = ПолныйИнтервалНачало;
	
	Пока ТекущийИнтервал < ПолныйИнтервалОкончание Цикл
		
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			Если НачалоЧаса(ТекущийИнтервал) = НачалоДня(ТекущийИнтервал) Тогда
				
				СтруктураПараметры.ЧасНачалоДня = ТекущийИнтервал;
				
			КонецЕсли;
			
			Если КонецЧаса(ТекущийИнтервал) = КонецДня(ТекущийИнтервал) Тогда
				
				ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
				ТабличныйДокумент.Присоединить(ОбластьИнтервал);
				
			КонецЕсли;
			
			ТекущийИнтервал = КонецЧаса(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			
			Если НачалоДня(ТекущийИнтервал) = НачалоНедели(ТекущийИнтервал) Тогда
				
				СтруктураПараметры.ДеньНачалоНедели = ТекущийИнтервал;
				
				ДеньНедели = 0;
				
			КонецЕсли;
			
			ЭтоТекущийДень = ТекущийИнтервал = НачалоДня(ТекущаяДатаСеанса());
			
			ДеньНедели = ДеньНедели + 1;
			
			Если ДеньНедели = 1 Тогда
				
				СтруктураПараметры.День1 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День1.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День1.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 2 Тогда
				
				СтруктураПараметры.День2 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День2.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День2.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 3 Тогда
				
				СтруктураПараметры.День3 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День3.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День3.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 4 Тогда
				
				СтруктураПараметры.День4 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День4.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День4.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 5 Тогда
				
				СтруктураПараметры.День5 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День5.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День5.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 6 Тогда
				
				СтруктураПараметры.День6 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День6.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День6.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели = 7 Тогда
				
				СтруктураПараметры.День7 = ТекущийИнтервал;
				ОбластьИнтервал.Области.День7.Шрифт = Новый Шрифт(
					ОбластьИнтервал.Области.День7.Шрифт,,, ЭтоТекущийДень);
				
			КонецЕсли;
			
			Если КонецДня(ТекущийИнтервал) = КонецНедели(ТекущийИнтервал) Тогда
				
				ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
				ТабличныйДокумент.Присоединить(ОбластьИнтервал);
				
			КонецЕсли;
			
			ТекущийИнтервал = КонецДня(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			
			СтруктураПараметры.ДеньНачалоНедели = ТекущийИнтервал;
			
			ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
			ТабличныйДокумент.Присоединить(ОбластьИнтервал);
			
			ТекущийИнтервал = КонецНедели(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
			
			СтруктураПараметры.ДеньНачалоМесяца = ТекущийИнтервал;
			
			ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
			ТабличныйДокумент.Присоединить(ОбластьИнтервал);
			
			ТекущийИнтервал = КонецМесяца(ТекущийИнтервал) + 1;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = ОбластьИнтервал.ВысотаТаблицы;
	ТабличныйДокумент.ФиксацияСлева  = ОбластьИнтервалЗаголовок.ШиринаТаблицы;
	
	ДанныеЭтапа.ПолныйИнтервалНачало = ПолныйИнтервалНачало;
	ДанныеЭтапа.ПолныйИнтервалОкончание = ПолныйИнтервалОкончание;
	
КонецПроцедуры

Процедура УстановитьОформлениеОбласти(Приемник, Источник)
	
	Приемник.ЦветФона   = Источник.ЦветФона;
	Приемник.ЦветТекста = Источник.ЦветТекста;
	Приемник.ЦветУзора  = Источник.ЦветУзора;
	Приемник.Узор       = Источник.Узор;
	
КонецПроцедуры

Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

Функция ПривестиКОкончаниюИнтервалаПланирования(ДанныеЭтапа, Дата)
	
	Если ДанныеЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = КонецДня(Дата) + 1;
	ИначеЕсли ДанныеЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = КонецНедели(Дата) + 1;
	ИначеЕсли ДанныеЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Результат = КонецМесяца(Дата) + 1;
	ИначеЕсли ДанныеЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = КонецЧаса(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЭтапУББВ(ДанныеЭтапа)
	
	Возврат НЕ ДанныеЭтапа.ПланироватьРаботуВидовРабочихЦентров ИЛИ ДанныеЭтапа.ПроизводствоНаСтороне;
	
КонецФункции

Функция ПолучитьВремяВСекундах(ВремяРаботы, ЕдиницаИзмерения)
	
	Возврат ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
		ВремяРаботы, ЕдиницаИзмерения);
	
КонецФункции

Функция ПолучитьВремяСтрокой(ВремяРаботы, ЕдиницаИзмерения = Неопределено)
	
	Возврат ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(
		ВремяРаботы, ЕдиницаИзмерения);
	
КонецФункции

Процедура ОбвестиГраницыЭтапа(ТабличныйДокумент, ДанныеЭтапа)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЭтапа.ЛеваяГраницаЭтапа)
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеЭтапа.ПраваяГраницаЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	ОбластьТекущийЭтап = ТабличныйДокумент.Область(
		4, 
		ДанныеЭтапа.ЛеваяГраницаЭтапа, 
		ТабличныйДокумент.ВысотаТаблицы, 
		ДанныеЭтапа.ПраваяГраницаЭтапа);
													
	ОбластьТекущийЭтап.Обвести(Линия, Линия, Линия, Линия);
	ОбластьТекущийЭтап.ЦветРамки = WebЦвета.СветлоЗеленый;
	
КонецПроцедуры

Функция СвернутьИсполнителей(Исполнители, СворачиватьАльтернативные = Ложь)
	
	Если Исполнители.Колонки.Найти("МассивКлючей") = Неопределено Тогда
		Исполнители.Колонки.Добавить("МассивКлючей", Новый ОписаниеТипов("Массив"));
	КонецЕсли;
	
	Если Исполнители.Количество() < 2 Тогда
		Возврат Исполнители;
	КонецЕсли;
	
	Соответствие = Новый Соответствие();
	Для индекс = -Исполнители.Количество() + 1 По 0 Цикл
		
		Элемент = Исполнители[-индекс];
		
		Если НЕ ЗначениеЗаполнено(Элемент.МассивКлючей) Тогда
			Элемент.МассивКлючей.Добавить(Элемент.КлючСвязи);
		КонецЕсли;
		
		Если НЕ СворачиватьАльтернативные И Элемент.Альтернативный = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Соответствие.Количество() = 0 Тогда
			Соответствие.Вставить(Элемент.ВидРабочегоЦентра, Элемент);
			Продолжить;
		КонецЕсли;
		
		Дубль = Соответствие.Получить(Элемент.ВидРабочегоЦентра);
		
		Если НЕ ЗначениеЗаполнено(Дубль) Тогда
			Соответствие.Вставить(Элемент.ВидРабочегоЦентра, Элемент);
			Продолжить;
		КонецЕсли;
		
		Дубль.ВремяРаботы = Дубль.ВремяРаботы + Элемент.ВремяРаботы;
		Дубль.МассивКлючей.Добавить(Элемент.КлючСвязи);
		
		Исполнители.Удалить(Элемент);
	КонецЦикла;
	
	Возврат Исполнители;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли