#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ЗаполнитьЗначенияСвойств(Отчет, Параметры);
	
	Если Не ЗначениеЗаполнено(Отчет.ОтчетныйГод) Тогда 
		Отчет.ОтчетныйГод = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	
	НайтиУведомление("Последний");
	
	КонтролируемыеСделки.ЗаполнитьСписокГоловныхОрганизаций(Элементы.Организация.СписокВыбора);
	
	ОбновитьТекстЗаголовка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, СтандартнаяОбработка, ТекстПредупреждения)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Отчет.РежимРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеДоЗагрузкиНастроек = Отчет.Уведомление;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	Если ЗначениеЗаполнено(УведомлениеДоЗагрузкиНастроек)
		И УведомлениеДоЗагрузкиНастроек <> Отчет.Уведомление Тогда
		Отчет.Уведомление = УведомлениеДоЗагрузкиНастроек;
		ИнициализироватьРеквизитыФормыПоУведомлению();
	КонецЕсли;
	
	ОбновитьТекстЗаголовка();
	
	УстановитьДоступностьСвойствУведомления();
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НайтиУведомление("Последний");
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйГодПриИзменении(Элемент)
	
	НомерКорректировки = 0;
	НайтиУведомление("Последний");
	Отчет.НачалоПериода = НачалоГода(Дата(Отчет.ОтчетныйГод, 1, 1));
	Отчет.КонецПериода = КонецГода(Дата(Отчет.ОтчетныйГод, 12, 31, 23, 59, 59));
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#Область Оформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировка

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборы

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент);
	
	ОбновитьТекстЗаголовка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеПоля

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСортировка

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Перем ОтказПроверкиЗаполнения;
	
	ОчиститьСообщения();
	
	Если Отчет.ОтчетныйГод < 2024 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
						НСтр("ru = 'Отченость по цепочкам формируются не ранее 2024 года.';
							|en = 'Отченость по цепочкам формируются не ранее 2024 года.'"),
						,
						Элементы.ОтчетныйГод,
						Отчет.ОтчетныйГод);
		Возврат;
	КонецЕсли;

	РезультатВыполнения = СформироватьОтчетНаСервере();
	РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения", ОтказПроверкиЗаполнения);
	
	Если ОтказПроверкиЗаполнения = Истина Тогда
		
		ОткрытьНастройки();
		
	Иначе
		
		Если РезультатВыполнения.Статус = "Выполняется" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьПодготовленныеДанные", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		
		ЗакрытьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ЗакрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если ОписаниеЗаданияФормированияОтчета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьРеквизитыФормыПоУведомлению()
	
	ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отчет.Уведомление,
		"Организация, ОтчетныйГод, НомерКорректировки");
	
	Отчет.Организация = ПараметрыУведомления.Организация;
	Если ЗначениеЗаполнено(ПараметрыУведомления.ОтчетныйГод) Тогда
		Отчет.ОтчетныйГод = Год(ПараметрыУведомления.ОтчетныйГод);
		Отчет.НачалоПериода = НачалоГода(Дата(Отчет.ОтчетныйГод,1,1));
		Отчет.КонецПериода = КонецГода(Дата(Отчет.ОтчетныйГод,12,31,23,59,59));
	КонецЕсли;
	НомерКорректировки = ПараметрыУведомления.НомерКорректировки;
	ТипУведомления = ?(НомерКорректировки = 0,0,1);
	УстановитьДоступностьСвойствУведомления();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрУведомление(Отчет)
	
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление") Тогда
			Элемент.Значение = Отчет.Уведомление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСвойствУведомления()
	
	Если ЗначениеЗаполнено(Отчет.Организация)
		И НЕ ЗначениеЗаполнено(Отчет.Уведомление) Тогда

		Элементы.ДекорацияУведомлениеНеНайдено.Заголовок = НСтр("ru = 'Нет уведомлений с указанными параметрами';
																|en = 'Нет уведомлений с указанными параметрами'");
	Иначе
		Элементы.ДекорацияУведомлениеНеНайдено.Заголовок = "";
	КонецЕсли;
	
	УстановитьПараметрУведомление(Отчет);
	
КонецПроцедуры

&НаСервере
Процедура НайтиУведомление(ТипПоиска)
	
	Если Не ЗначениеЗаполнено(Отчет.ОтчетныйГод) Тогда 
		Отчет.ОтчетныйГод = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчет.Организация) Тогда
		
		НайденноеУведомление = КонтролируемыеСделки.НайтиУведомлениеОрганизацииВОтчетномГоду(Отчет.Организация,Отчет.ОтчетныйГод, ТипУведомления, НомерКорректировки,ТипПоиска);
		
		Если НайденноеУведомление <> Неопределено Тогда
			Отчет.Уведомление = НайденноеУведомление;
		ИначеЕсли ЗначениеЗаполнено(Отчет.Уведомление) Тогда
			ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отчет.Уведомление,
				"Организация, ОтчетныйГод, НомерКорректировки");
			Если ПараметрыУведомления.Организация = Отчет.Организация Тогда
				НомерКорректировки = ПараметрыУведомления.НомерКорректировки;
				ТипУведомления = ?(НомерКорректировки = 0,0,1);
				Отчет.ОтчетныйГод = Год(ПараметрыУведомления.ОтчетныйГод);
			Иначе
				Отчет.Уведомление = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Отчет.Уведомление = Неопределено;	
	КонецЕсли;
	
	УстановитьДоступностьСвойствУведомления();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("ОтчетныйГод"                   	, Отчет.ОтчетныйГод);
	ПараметрыОтчета.Вставить("НачалоПериода"                   	, НачалоГода(Дата(Отчет.ОтчетныйГод,1,1)));
	ПараметрыОтчета.Вставить("КонецПериода"                   	, КонецГода(Дата(Отчет.ОтчетныйГод,12,31,23,59,59)));
	ПараметрыОтчета.Вставить("Уведомление"                   	, Отчет.Уведомление);
	
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"    , Отчет.РазмещениеДополнительныхПолей);

	ПараметрыОтчета.Вставить("Группировка"                      , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , Отчет.ДополнительныеПоля.Выгрузить());

	ПараметрыОтчета.Вставить("КлючВариантаОтчета"               , КлючВариантаОтчета);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ОбновитьТекстЗаголовка()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВариантаОтчета", КлючВариантаОтчета);
	ЗаголовокОтчета = Отчеты.СписокЦепочекСозданияСтоимостиКонтролируемыхСделок.ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Если ЗначениеЗаполнено(Отчет.Организация) И ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация);
	КонецЕсли;
	
	Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

// Получить запрещенные поля.
// 
// Параметры:
//  Режим - Строка - Режим
// 
// Возвращаемое значение:
//  ФиксированныйМассив из Строка - запрещенные поля
&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Регистратор");
	СписокПолей.Добавить("НачалоПериода");
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Валюта");
	СписокПолей.Добавить("ЕдиницаИзмерения");
		
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если Режим = "Выбор" Тогда
	ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Порядок" ИЛИ Режим = "Группировка" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтотОбъект, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

// Возвращает описание задания формирования отчета
//
// Возвращаемое значение:
//  Структура - параметры выполнения задания: см. ДлительныеОперации.ВыполнитьФункцию.
//  Структура - если не проверяется заполнение, возвращается следующая структура измерений:
//  * ЗаданиеВыполнено - Булево - Истана, если задание выполнено.
//  * ОтказПроверкиЗаполнения - Булево - Истина, если не нужно осуществлять проверку заполнения.
//
&НаСервере
Функция СформироватьОтчетНаСервере()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Ложь);
	
	Если Не ПроверитьЗаполнение() Тогда
		
		РезультатВыполнения.ОтказПроверкиЗаполнения = Истина;
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если ОписаниеЗаданияФормированияОтчета <> Неопределено Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ОписаниеЗаданияФормированияОтчета.ИдентификаторЗадания);
		ОписаниеЗаданияФормированияОтчета = Неопределено;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодписи);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПараметрыЗадания.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	ОписаниеЗаданияФормированияОтчета = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыЗадания, "БухгалтерскиеОтчетыВызовСервера.ПодготовитьОтчет", ПараметрыОтчета);
	
	Возврат ОписаниеЗаданияФормированияОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанные(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ЗагрузитьПодготовленныеДанныеНаСервере(РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере(РезультатВыполнения)
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "Статус", "Отменено") = "Отменено" Тогда
		
		Результат = Новый ТабличныйДокумент;
		ДанныеРасшифровки = Неопределено;
		// ОписаниеЗаданияФормированияОтчета не очищаем на случай, если отмена произошла перед началом нового формирования отчета,
		// и описание уже относится к новому запуску.
		Возврат;
		
	ИначеЕсли РезультатВыполнения.Статус = "Ошибка" Тогда
		// Это результат аварийного завершения фонового задания.
		ОбщегоНазначения.СообщитьПользователю(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
		Результат = Новый ТабличныйДокумент;
		ДанныеРасшифровки = Неопределено;
		
		ПозицияТочки = СтрНайти(ИмяФормы, ".", ,, 2);
		ПолноеИмяМетаданного = ?(ПозицияТочки = 0, ИмяФормы, Лев(ИмяФормы, ПозицияТочки - 1));
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданного);
		ОтчетОрганизация = ?(Отчет.Свойство("Организация"), Отчет.Организация, Неопределено);
		
		ЗаписьЖурналаРегистрации("ОшибкаФормированияОтчета",
			УровеньЖурналаРегистрации.Ошибка,
			ОтчетМетаданные,
			ОтчетОрганизация,
			РезультатВыполнения.ПодробноеПредставлениеОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеЗаданияФормированияОтчета = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	УдалитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	Если ДанныеОтчета = Неопределено Или Не ДанныеОтчета.Свойство("Результат") Тогда
		// Некорректный результат формирования отчета.
		Результат = Новый ТабличныйДокумент;
		ДанныеРасшифровки = Неопределено;
		
		ПозицияТочки = СтрНайти(ИмяФормы, ".", ,, 2);
		ПолноеИмяМетаданного = ?(ПозицияТочки = 0, ИмяФормы, Лев(ИмяФормы, ПозицияТочки - 1));
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданного);
		ОтчетОрганизация = ?(Отчет.Свойство("Организация"), Отчет.Организация, Неопределено);
		
		ЗаписьЖурналаРегистрации("ОшибкаФормированияОтчета",
			УровеньЖурналаРегистрации.Ошибка,
			ОтчетМетаданные,
			ОтчетОрганизация,
			НСтр("ru = 'Некорректный результат формирования отчета: отсутствует Результат';
				|en = 'Некорректный результат формирования отчета: отсутствует Результат'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
		Возврат;
		
	КонецЕсли;
		
	Результат = ДанныеОтчета.Результат;
	ДанныеОтчета.Результат = Неопределено;
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	ДанныеОтчета.ДанныеРасшифровки = Неопределено;
		
	БухгалтерскийУчетПереопределяемый.ОбработатьРезультатПроверкиИтогов(ЭтотОбъект, ДанныеОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

#КонецОбласти